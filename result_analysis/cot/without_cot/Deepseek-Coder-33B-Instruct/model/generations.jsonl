{"task_id": 0, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    Given an ndarray where the last column is the target y and all preceding columns are the features X,\n    add a bias (intercept) term, then compute the weight vector.\n\n    Parameters:\n    data (np.ndarray): ndarray where the last column is the target y and all preceding columns are the features X.\n    alpha (float): regularisation strength. Default is 0.0.\n\n    Returns:\n    list[float]: weight vector rounded to 4 decimal places as a Python list.\n    If the matrix (X^T X + alpha I) is not invertible, return -1.\n    \"\"\"\n    # Add a bias (intercept) term\n    data = np.insert(data, 0, 1, axis=1)\n\n    # Split data into X and y\n    X = data[:, :-1]\n    y = data[:, -1]\n\n    # Compute the weight vector\n    try:\n        w = np.linalg.inv(X.T @ X + alpha * np.eye(X.shape[1])) @ X.T @ y\n    except np.linalg.LinAlgError:\n        return -1\n\n    # Return the weight vector rounded to 4 decimal places as a Python list\n    return np.round(w, 4).tolist()\n```\n\nThis script first adds a bias (intercept) term to the data, then splits the data into features X and target y. It then computes the weight vector using the closed-form solution for Ridge Regression. If the matrix (X^T X + alpha I) is not invertible, it returns -1. Finally, it returns the weight vector rounded to 4 decimal places as a Python list.\n"}
{"task_id": 1, "completion_id": 0, "completion": "Here is a Python script that implements the dual-form perceptron learning algorithm:\n\n```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    K = np.dot(X_train, X_train.T)\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    updates = 0\n\n    while updates < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.dot(K[i], y_train * alpha)\n            if y_train[i] * (activation + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                updates += 1\n                if updates >= n_iter:\n                    break\n        if not updated:\n            break\n\n    w = np.dot(alpha * y_train, X_train)\n    return (np.round(w, 4).tolist(), round(b, 4))\n```\n\nThis script first computes the Gram matrix `K`, which is a matrix of inner products of the training samples. Then it initializes the dual parameters `alpha` and the bias `b` to zero. It then enters a loop where it scans the samples in the order 0 \u2026 n-1. For each sample, it computes the activation and tests the margin. If the margin is \u2264 0, the sample is mis-classified and the dual parameters and the bias are updated. The loop restarts from the first sample if an update was made. The loop stops when an entire pass over the data finishes with no update or after `n_iter` updates. Finally, it computes the primal weight vector `w` from the final `alpha` and returns it along with the bias, both rounded to 4 decimal places.\n"}
{"task_id": 2, "completion_id": 0, "completion": "Here is the Python script that implements the required GLM link functions:\n\n```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1 / (mu * (1 - mu))\n\n    return {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv_link,\n            \"derivative\": identity_derivative\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv_link,\n            \"derivative\": log_derivative\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv_link,\n            \"derivative\": logit_derivative\n        }\n    }\n```\n\nThis script defines the three link functions and their inverses and derivatives for the identity, log, and logit links. The functions are then returned in a dictionary. The functions are designed to work with numpy arrays, allowing for element-wise operations.\n"}
{"task_id": 3, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\nclass Node:\n    def __init__(self, indices):\n        self.indices = indices\n        self.left = None\n        self.right = None\n        self.is_leaf = False\n\nclass IsolationTree:\n    def __init__(self, data):\n        self.data = data\n        self.root = Node(list(range(len(data))))\n        self.n_features = data.shape[1]\n        self.depths = [0] * len(data)\n\n    def build_tree(self, node, depth):\n        if len(node.indices) < 3:\n            node.is_leaf = True\n            for i in node.indices:\n                self.depths[i] = depth\n            return\n\n        feature = np.random.choice(self.n_features)\n        down = np.min(self.data[node.indices, feature])\n        up = np.max(self.data[node.indices, feature])\n        v = np.random.uniform(down, up)\n\n        left_indices = [i for i in node.indices if self.data[i, feature] <= v]\n        right_indices = [i for i in node.indices if self.data[i, feature] > v]\n\n        node.left = Node(left_indices)\n        node.right = Node(right_indices)\n\n        self.build_tree(node.left, depth + 1)\n        self.build_tree(node.right, depth + 1)\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    np.random.seed(0)\n    tree = IsolationTree(data)\n    tree.build_tree(tree.root, 0)\n    return tree.depths\n```\n\nThis script first defines a `Node` class to represent a node in the isolation tree. Each node contains a list of indices of samples that reach it, and pointers to its left and right children. The `IsolationTree` class represents the isolation tree itself. It contains a `build_tree` method that recursively builds the tree following the rules described in the task statement. The `isolation_tree_path_length` function creates an `IsolationTree` object, builds the tree, and returns the depths of the leaves.\n"}
{"task_id": 7, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Calculate the minimum support count\n    min_count = math.ceil(minsup * len(transactions))\n\n    # Count the occurrence of each item\n    item_counts = Counter()\n    for transaction in transactions:\n        item_counts.update(transaction)\n\n    # Filter out items that do not meet the minimum support count\n    frequent_items = set(item for item, count in item_counts.items() if count >= min_count)\n\n    # Count the occurrence of each itemset\n    itemset_counts = Counter()\n    for transaction in transactions:\n        for length in range(1, len(frequent_items) + 1):\n            for itemset in combinations(frequent_items, length):\n                if set(itemset).issubset(transaction):\n                    itemset_counts[itemset] += 1\n\n    # Filter out itemsets that do not meet the minimum support count\n    frequent_itemsets = {itemset: count for itemset, count in itemset_counts.items() if count >= min_count}\n\n    return frequent_itemsets\n```\n\nThis script first calculates the minimum support count based on the given minimum support threshold and the total number of transactions. It then counts the occurrence of each item in the transactions and filters out items that do not meet the minimum support count. It then counts the occurrence of each itemset in the transactions and filters out itemsets that do not meet the minimum support count. The function returns a dictionary that maps each frequent itemset to its absolute support count.\n"}
{"task_id": 11, "completion_id": 0, "completion": "Here is a Python script that implements the K-Means clustering algorithm from scratch:\n\n```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    # Initialize the centers as the first k samples\n    centers = data[:k]\n\n    for _ in range(max_iter):\n        # Assign each sample to its nearest center\n        labels = np.argmin(np.linalg.norm(data[:, None] - centers, axis=-1), axis=-1)\n\n        # Compute the new centers as the mean of the samples in each cluster\n        new_centers = np.array([data[labels == i].mean(axis=0) for i in range(k)])\n\n        # If any center is empty, re-initialize it with a random sample\n        for i in range(k):\n            if np.isnan(new_centers[i]).any():\n                new_centers[i] = data[np.random.randint(0, data.shape[0])]\n\n        # Check for convergence\n        if np.linalg.norm(new_centers - centers) < epsilon:\n            break\n\n        centers = new_centers\n\n    # Round the coordinates of the centers to 4 decimal places\n    centers = [list(map(lambda x: round(x, 4), center)) for center in centers]\n\n    return centers, labels.tolist()\n```\n\nThis script first initializes the centers as the first `k` samples. It then enters a loop where it assigns each sample to its nearest center, recomputes the centers as the mean of the samples in each cluster, checks if any center is empty and re-initializes it with a random sample if necessary, and checks for convergence. The centers are then rounded to 4 decimal places and returned together with the list of cluster labels for the samples.\n"}
{"task_id": 13, "completion_id": 0, "completion": "Here is a Python script that implements the item-based k-NN collaborative filtering recommender:\n\n```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_users, n_items = data.shape\n    rated_items = np.where(data[user_ind] > 0)[0]\n    unrated_items = np.where(data[user_ind] == 0)[0]\n\n    if len(unrated_items) == 0:\n        return []\n\n    S = np.zeros((n_items, n_items))\n    for i in range(n_items):\n        for j in range(i, n_items):\n            common_users = np.intersect1d(np.where(data[:, i] > 0), np.where(data[:, j] > 0))\n            if len(common_users) == 0:\n                continue\n            v1, v2 = data[common_users, i], data[common_users, j]\n            if criterion == 'cosine':\n                if np.std(v1) > 1e-3:\n                    v1 = v1 - np.mean(v1)\n                if np.std(v2) > 1e-3:\n                    v2 = v2 - np.mean(v2)\n                S[i, j] = S[j, i] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n            elif criterion == 'pearson':\n                S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1]\n\n    scores = defaultdict(float)\n    for t in unrated_items:\n        for i in rated_items:\n            scores[t] += data[user_ind, i] * S[t, i]\n        scores[t] /= np.sum(np.abs(S[t, rated_items]))\n\n    return sorted(scores, key=scores.get, reverse=True)[:k]\n```\n\nThis script first identifies the rated and unrated items for the active user. If the user has already rated all items, it returns an empty list. It then computes the item-item similarity matrix using the specified criterion. Finally, it computes the predicted attractiveness score for each unrated item and returns the indices of the top k items.\n"}
{"task_id": 19, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    total_gain = -np.inf\n    best_split = None\n\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n\n        for threshold in unique_values:\n            left_indices = np.where(feature_values <= threshold)[0]\n            right_indices = np.where(feature_values > threshold)[0]\n\n            if len(left_indices) == 0 or len(right_indices) == 0:\n                continue\n\n            left_g = g[left_indices].sum()\n            left_h = h[left_indices].sum()\n            right_g = g[right_indices].sum()\n            right_h = h[right_indices].sum()\n\n            parent_loss = -0.5 * (g.sum() ** 2) / (h.sum() + lam) + gamma\n            left_loss = -0.5 * (left_g ** 2) / (left_h + lam) + gamma\n            right_loss = -0.5 * (right_g ** 2) / (right_h + lam) + gamma\n\n            gain = parent_loss - left_loss - right_loss\n\n            if gain > total_gain:\n                total_gain = gain\n                best_split = (feature_index, threshold)\n\n    if total_gain <= 0:\n        return None\n\n    return best_split\n```\n\nThis script iterates over all features and all unique values of each feature, calculating the gain for each split. It keeps track of the split that yields the maximum gain. If no split yields a positive gain, it returns `None`.\n"}
{"task_id": 20, "completion_id": 0, "completion": "Here is the Python code that implements the sigmoid activation function and its gradient:\n\n```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to numpy array\n    x = np.array(x)\n\n    # Compute sigmoid\n    sigmoid_x = 1 / (1 + np.exp(-x))\n\n    # Compute gradient\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n\n    # Round to 4 decimal places\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n\n    # Convert back to Python list if input was a list\n    if isinstance(x, list):\n        sigmoid_x = sigmoid_x.tolist()\n        gradient_x = gradient_x.tolist()\n\n    return sigmoid_x, gradient_x\n```\n\nThis function first converts the input to a NumPy array, then computes the sigmoid and gradient, rounds them to 4 decimal places, and finally converts the NumPy arrays back to Python lists if the input was a list.\n"}
{"task_id": 21, "completion_id": 0, "completion": "Here is a Python script that implements the AdaBoost algorithm with one-dimensional decision stumps:\n\n```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    # Sort the training data\n    sorted_train = sorted(zip(x_train, y_train))\n    x_train, y_train = zip(*sorted_train)\n\n    # Initialize the weights\n    weights = np.ones(len(x_train)) / len(x_train)\n\n    # Initialize the ensemble\n    ensemble = []\n\n    # Initialize the error\n    error = float('inf')\n\n    while error > epsilon:\n        # Find the best stump\n        best_stump = None\n        best_error = float('inf')\n        for i in range(1, len(x_train)):\n            # Compute the error for the stump\n            stump_error = sum(weights[j] for j in range(len(x_train)) if (x_train[j] <= x_train[i-1] and y_train[j] == 1) or (x_train[j] > x_train[i-1] and y_train[j] == -1))\n            if stump_error < best_error:\n                best_stump = (0, (x_train[i-1] + x_train[i]) / 2)\n                best_error = stump_error\n            stump_error = sum(weights[j] for j in range(len(x_train)) if (x_train[j] > x_train[i-1] and y_train[j] == 1) or (x_train[j] <= x_train[i-1] and y_train[j] == -1))\n            if stump_error < best_error:\n                best_stump = (1, (x_train[i-1] + x_train[i]) / 2)\n                best_error = stump_error\n\n        # Compute the coefficient\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n\n        # Update the weights\n        weights = weights * np.exp(-alpha * np.array(y_train) * np.array([1 if (x < best_stump[1] and d == 0) or (x > best_stump[1] and d == 1) else -1 for x, d in ensemble + [best_stump]]))\n        weights /= np.sum(weights)\n\n        # Add the stump to the ensemble\n        ensemble.append(best_stump)\n\n        # Compute the training error\n        error = sum(weights[j] for j in range(len(x_train)) if (x_train[j] <= best_stump[1] and y_train[j] == 1) or (x_train[j] > best_stump[1] and y_train[j] == -1))\n\n    # Compute the predictions\n    predictions = [1 if sum(alpha * (1 if (x < d and theta == 0) or (x > d and theta == 1) else -1) for alpha, (d, theta) in ensemble) > 0 else -1 for x in x_test]\n\n    return predictions\n```\n\nThis script first sorts the training data and initializes the weights. It then enters a loop where it finds the best stump (i.e., the stump with the smallest weighted error), computes the coefficient, updates the weights, and adds the stump to the ensemble. The loop continues until the training error is less than or equal to the user-supplied value `epsilon`. Finally, it computes the predictions for the test set and returns them.\n"}
{"task_id": 25, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Compute the pairwise Euclidean distances between all training samples and test samples\n    distances = np.sqrt(np.sum(X_train**2, 1).reshape(-1, 1) + np.sum(X_test**2, 1) - 2 * np.dot(X_train, X_test.T))\n\n    # Compute the Gaussian kernel matrix\n    kernel_matrix = np.exp(-gamma * distances**2)\n\n    # Compute the decision function for each test sample\n    decision_function = np.dot(kernel_matrix.T, y_train * alpha) + b\n\n    # Return the predicted labels\n    return [1 if df > 0 else -1 for df in decision_function]\n```\n\nThis function first computes the pairwise Euclidean distances between all training samples and test samples. Then it computes the Gaussian kernel matrix using these distances. The decision function for each test sample is then computed as the dot product of the kernel matrix and the vector of training labels, scaled by the vector of Lagrange multipliers, and shifted by the bias term. Finally, the predicted labels are returned as a list of 1s and -1s, based on whether the decision function for each test sample is positive or negative.\n"}
{"task_id": 28, "completion_id": 0, "completion": "Here is the Python function that solves the task:\n\n```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X = np.array(X)\n    m, n = X.shape\n\n    if not (1 <= k <= min(m, n)):\n        return -1\n\n    U, s, Vt = np.linalg.svd(X, full_matrices=False)\n    S = np.zeros((m, n))\n    S[:k, :k] = np.diag(s[:k])\n\n    X_hat = U.dot(S).dot(Vt)\n    mse = np.mean((X - X_hat)**2)\n\n    return np.round(X_hat, 4).tolist(), round(mse, 4)\n```\n\nThis function first checks if the provided `k` is valid. If it's not, it returns `-1`. If `k` is valid, it computes the SVD of the input matrix `X`. Then it constructs the `S` matrix from the first `k` singular values and uses it to compute the reconstructed matrix `X_hat`. Finally, it computes the mean squared error between `X` and `X_hat` and returns both `X_hat` and the MSE, rounded to four decimals.\n"}
{"task_id": 29, "completion_id": 0, "completion": "Here is a Python script that implements the described algorithm:\n\n```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n\n    # Sort the training samples by the single feature x\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n\n    # Initialize residuals\n    residuals = y_train.copy()\n\n    # Initialize list to store stumps\n    stumps = []\n\n    # While the residual sum of squares of the current ensemble is larger than a tolerance\n    while np.sum(residuals**2) > epsilon:\n        # Candidate split points are the mid-points between every two consecutive feature values\n        split_points = (x_train[1:] + x_train[:-1]) / 2\n\n        min_rss = np.inf\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n\n        # For every candidate split s\n        for s in split_points:\n            # let c1 be the mean of the current residuals whose feature values are \u2264 s\n            c1 = np.mean(residuals[x_train <= s])\n            # let c2 be the mean of the current residuals whose feature values are > s\n            c2 = np.mean(residuals[x_train > s])\n\n            # compute the RSS that would be obtained by adding the stump defined by (s, c1, c2)\n            rss = np.sum((residuals - (c1 * (x_train <= s) + c2 * (x_train > s)))**2)\n\n            # If this RSS is smaller than the current minimum, update the minimum RSS and the best split\n            if rss < min_rss:\n                min_rss = rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n\n        # Add to the ensemble the stump that produces the smallest RSS\n        stumps.append((best_split, best_c1, best_c2))\n\n        # Update the residuals (real target minus current ensemble prediction)\n        residuals = y_train - (best_c1 * (x_train <= best_split) + best_c2 * (x_train > best_split))\n\n    # After the loop finishes, predictions for a new point x are obtained by summing the constant contributions of all learned stumps\n    prediction = sum(c1 * (x_query <= s) + c2 * (x_query > s) for s, c1, c2 in stumps)\n\n    return round(prediction, 4)\n```\n\nThis script first sorts the training data by the feature values, then iteratively adds the stump that minimizes the squared residuals until the total residual sum of squares becomes smaller than the specified tolerance. The prediction for a new point is then obtained by summing the constant contributions of all learned stumps. The function returns the prediction for the new point, rounded to four decimal places.\n"}
{"task_id": 34, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None):\n    \"\"\"\n    Generate a NumPy tensor filled with 0.0s and 1.0s.\n\n    Parameters:\n    shape (tuple[int, ...]): The desired shape of the tensor.\n    sparsity (float): The probability of generating a 1.0.\n    seed (int | None): The seed for the random number generator.\n\n    Returns:\n    numpy.ndarray: A NumPy array of the desired shape filled with 0.0s and 1.0s.\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n\n    if seed is not None:\n        np.random.seed(seed)\n\n    tensor = np.random.rand(*shape)\n    threshold = 1 - sparsity\n    tensor = np.where(tensor < threshold, 0.0, 1.0)\n\n    return tensor.astype(np.float64)\n```\n\nThis script first checks if the sparsity is within the legal range. If not, it returns -1. Then, if a seed is provided, it sets the seed for the random number generator. After that, it generates a tensor of the desired shape filled with random floats between 0 and 1. The threshold is calculated as 1 minus the sparsity. Finally, it converts all values in the tensor that are below the threshold to 0.0 and all others to 1.0, and returns the resulting tensor.\n"}
{"task_id": 39, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    # Get the median value\n    median_value = np.median(data[:, d])\n\n    # Get the indices of the samples with values smaller and larger than the median\n    smaller_indices = np.where(data[:, d] < median_value)[0]\n    larger_indices = np.where(data[:, d] > median_value)[0]\n\n    # Get the index of the sample with the median value\n    median_index = np.where(data[:, d] == median_value)[0][0]\n\n    return median_index, smaller_indices.tolist(), larger_indices.tolist()\n```\n\nThis script first calculates the median value of the column `d` in the data. It then finds the indices of the samples with values smaller and larger than the median. The index of the sample with the median value is found by finding the first occurrence of the median value in the column `d`. The function returns a tuple containing the median index and the lists of indices of samples with smaller and larger values.\n"}
{"task_id": 40, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, \"Input array must be one-dimensional\"\n    assert stride >= 1, \"Stride must be a positive integer\"\n    assert len(x) >= frame_width, \"Frame width must be less than or equal to the length of the input array\"\n\n    n_frames = (len(x) - frame_width) // stride + 1\n    shape = (n_frames, frame_width)\n    strides = (x.strides[0] * stride, x.strides[0])\n\n    result = as_strided(x, shape=shape, strides=strides)\n    result.flags.writeable = writeable and x.flags.writeable\n\n    return result\n```\n\nThis function first checks the preconditions and then calculates the shape and strides for the new array using `numpy.lib.stride_tricks.as_strided`. It then creates a view on the original array with these parameters and sets the `writeable` flag according to the `writeable` argument.\n"}
{"task_id": 48, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert to numpy array if not already\n    if isinstance(X, list):\n        X = np.array(X)\n\n    # Check if matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n\n    # Check if all elements are between 0 and 1 inclusive\n    if not np.all((0 <= X) & (X <= 1)):\n        return False\n\n    # Check if each row sums to 1 up to a numerical tolerance of 1e-8\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, np.ones_like(row_sums), rtol=0, atol=1e-8):\n        return False\n\n    return True\n```\n\nThis function first checks if the input is a list and converts it to a numpy array if necessary. It then checks if the matrix is two-dimensional, if all elements are between 0 and 1 inclusive, and if each row sums to 1 up to a numerical tolerance of 1e-8. If all these conditions are met, the function returns True, otherwise it returns False.\n"}
{"task_id": 55, "completion_id": 0, "completion": "Here is a Python script that implements the RMSprop optimisation algorithm for ordinary least-squares (OLS) linear regression:\n\n```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n\n    for _ in range(max_iter):\n        for i in range(0, n, batch_size):\n            X_batch = X[i:i+batch_size]\n            y_batch = y[i:i+batch_size]\n\n            grad = (1/n) * X_batch.T @ (X_batch @ w - y_batch)\n            s = rho * s + (1 - rho) * grad ** 2\n            w = w - eta * grad / np.sqrt(s + eps_station)\n\n        if np.linalg.norm(grad) < epsilon:\n            break\n\n    return [round(weight, 4) for weight in w]\n```\n\nThis script first initializes the weight vector `w` and the running average of squared gradients `s` to zero. Then, it enters a loop that iterates for `max_iter` times. In each iteration, it processes mini-batches of the data and updates the weight vector `w` using the RMSprop rule. The loop breaks early if the \u2113\u2082-norm of the gradient becomes smaller than `epsilon`. Finally, it returns the final weight vector `w` rounded to four decimal places.\n"}
{"task_id": 56, "completion_id": 0, "completion": "Here is a Python script that implements the SoftPlus activation function and its derivative:\n\n```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"\n    Implements the SoftPlus activation function and its derivative.\n\n    Parameters:\n    x (scalar, list, or numpy array): Input values.\n    deriv (bool): If True, returns the derivative of the SoftPlus function.\n\n    Returns:\n    list or float: The SoftPlus function or its derivative applied to x, rounded to the nearest 4th decimal.\n    \"\"\"\n    # Convert x to a numpy array\n    x = np.array(x)\n\n    if deriv:\n        # Compute the derivative of the SoftPlus function\n        # The derivative of SoftPlus(x) is the logistic (sigmoid) function\n        # sigma(x) = 1 / (1 + e^-x)\n        # We use np.exp to compute e^-x in a numerically stable way\n        result = 1 / (1 + np.exp(-x))\n    else:\n        # Compute the SoftPlus function\n        # SoftPlus(x) = log(1 + e^x)\n        # We use np.log1p to compute log(1 + e^x) in a numerically stable way\n        result = np.log1p(np.exp(x))\n\n    # Round the result to the nearest 4th decimal\n    result = np.round(result, 4)\n\n    # If the input was a scalar, return a single float\n    if np.isscalar(x):\n        return result.item()\n    else:\n        # Otherwise, return a list\n        return result.tolist()\n```\n\nThis script uses the `np.log1p` function to compute the natural logarithm of 1 plus a number, which is numerically stable for large inputs. It also uses the `np.exp` function to compute the exponential of a number, which is numerically stable for small inputs. The `np.round` function is used to round the result to the nearest 4th decimal.\n"}
{"task_id": 58, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    # Create N-grams from the corpus\n    ngrams = [tuple(corpus[i:i+N]) for i in range(len(corpus)-N+1)]\n    n_minus_grams = [tuple(corpus[i:i+N-1]) for i in range(len(corpus)-N+2)]\n\n    # Count N-grams and (N-1)-grams\n    ngram_counts = Counter(ngrams)\n    n_minus_gram_counts = Counter(n_minus_grams)\n\n    # Compute the total log-probability\n    total_log_prob = 0.0\n    for i in range(len(sequence)-N+1):\n        ngram = tuple(sequence[i:i+N])\n        n_minus_gram = tuple(sequence[i:i+N-1])\n\n        # If either the numerator or the denominator is zero, return float('-inf')\n        if n_minus_gram_counts[n_minus_gram] == 0 or ngram_counts[ngram] == 0:\n            return float('-inf')\n\n        # Compute the log-probability of the ngram\n        log_prob = np.log(ngram_counts[ngram] / n_minus_gram_counts[n_minus_gram])\n        total_log_prob += log_prob\n\n    return round(total_log_prob, 4)\n```\n\nThis script first creates N-grams and (N-1)-grams from the corpus. It then counts the occurrences of these N-grams and (N-1)-grams. It computes the log-probability of each N-gram in the sequence and sums these probabilities. If at any point either the numerator or the denominator is zero, it immediately returns `float('-inf')`. Finally, it returns the total log-probability rounded to 4 decimal places.\n"}
{"task_id": 62, "completion_id": 0, "completion": "Here is a Python script that implements the Lasso regression with polynomial features using coordinate descent:\n\n```python\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    X = np.array(X)\n    y = np.array(y)\n\n    # Build design matrix\n    X_poly = np.empty((X.shape[0], degree+1))\n    X_poly[:, 0] = 1\n    for i in range(1, degree+1):\n        X_poly[:, i] = X ** i\n\n    # Initialize weights\n    weights = np.zeros(degree+1)\n\n    # Coordinate descent\n    for _ in range(n_iterations):\n        max_change = 0\n\n        # Update bias\n        weights[0] = np.mean(y - np.dot(X_poly[:, 1:], weights[1:]))\n\n        # Update other coefficients\n        for j in range(1, degree+1):\n            rho = np.dot(X_poly[:, j], y - np.dot(X_poly, weights) + weights[j] * X_poly[:, j])\n            weights[j] = soft_threshold(rho, reg_factor) / np.dot(X_poly[:, j], X_poly[:, j])\n\n            # Update max_change\n            max_change = max(max_change, np.abs(rho))\n\n        # Check for early stopping\n        if max_change < tol:\n            break\n\n    # Round weights to 4 decimal places\n    weights = [round(weight, 4) for weight in weights]\n\n    return weights\n\ndef soft_threshold(rho: float, lambda_: float) -> float:\n    \"\"\"Compute the soft threshold function.\"\"\"\n    if rho < -lambda_:\n        return rho + lambda_\n    elif rho > lambda_:\n        return rho - lambda_\n    else:\n        return 0\n```\n\nThis script first builds the design matrix by raising each input to the power from 1 to the specified degree. It then initializes the weights to zero and performs coordinate descent. In each iteration, it first updates the bias and then updates the weights for each feature. It keeps track of the maximum change in any weight and checks if it falls below the specified tolerance. If it does, it terminates the algorithm. Finally, it rounds the weights to 4 decimal places and returns them.\n"}
{"task_id": 63, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    This function calculates the backward probability vector beta_t for a given time index t.\n\n    Parameters:\n    A (list[list[float]]): transition-probability matrix of shape (N, N)\n    B (list[list[float]]): emission-probability matrix of shape (N, M)\n    obs (list[int]): list of observation indices (length T)\n    t (int): integer time index (0 \u2264 t < T)\n\n    Returns:\n    list[float]: list of backward probabilities rounded to 4 decimal places\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    N = A.shape[0]\n    beta = np.ones(N)\n\n    for i in range(t, -1, -1):\n        beta = np.dot(A, beta * B[:, obs[i]])\n\n    return [round(b, 4) for b in beta]\n```\n\nThis function first converts the input lists to numpy arrays for easier manipulation. It then initializes the backward vector `beta` to an array of ones. The function then iterates from `t` to `0` (inclusive), updating the `beta` vector at each step using the formula provided in the task description. Finally, it returns the `beta` vector as a list of rounded values.\n"}
{"task_id": 65, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    obs = np.array(obs)\n\n    T = len(obs)\n    N = len(A)\n\n    beta = np.zeros((T, N))\n    beta[T-1, :] = 1.0\n\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t+1]] * beta[t+1, :])\n\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n\n    return round(prob, 6)\n```\n\nThis script first checks if any of the input lists are empty. If they are, it returns 0.0. Then it converts the input lists to numpy arrays for easier manipulation. It initializes the backward variables `beta` as a 2D numpy array of zeros. The last row of `beta` is set to 1.0. The function then iterates over the observation sequence in reverse order, updating the backward variables for each time step. Finally, it computes the sequence probability as the sum of the product of the initial distribution, the emission probabilities, and the backward variables for the first time step. The function returns this probability rounded to 6 decimal places.\n"}
{"task_id": 69, "completion_id": 0, "completion": "Here is a Python script that implements the forward algorithm for Hidden Markov Models:\n\n```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n\n    # Validate input dimensions\n    if (S.ndim != 1 or A.ndim != 2 or B.ndim != 2 or\n        S.shape[0] != A.shape[0] != B.shape[0] or\n        S.shape[0] != A.shape[1] or\n        np.any(S < 0) or np.any(A < 0) or np.any(B < 0) or\n        np.sum(S) != 1 or np.allclose(np.sum(A, axis=1), np.ones(A.shape[0])) or\n        np.allclose(np.sum(B, axis=1), np.ones(B.shape[0]))):\n        return -1\n\n    # Check that every observation index is in the valid range [0, m-1]\n    m = B.shape[1]\n    if not all(0 <= obs < m for obs in observations):\n        return -1\n\n    # Initialize alpha\n    alpha = np.zeros((S.shape[0], len(observations)))\n    alpha[:, 0] = S * B[:, observations[0]]\n\n    # Forward algorithm\n    for t in range(1, len(observations)):\n        for j in range(S.shape[0]):\n            alpha[j, t] = np.sum(alpha[:, t-1] * A[:, j] * B[j, observations[t]])\n\n    # Return the sum of the last column of alpha, rounded to 4 decimal places\n    return round(np.sum(alpha[:, -1]), 4)\n```\n\nThis script first validates the input dimensions and checks that every observation index is in the valid range. If the input is invalid, it returns -1. Otherwise, it implements the forward algorithm and returns the sum of the last column of the alpha matrix, rounded to 4 decimal places.\n"}
{"task_id": 70, "completion_id": 0, "completion": "Here is a Python script that implements the FP-Growth algorithm:\n\n```python\nfrom collections import Counter, defaultdict\n\nclass Node:\n    def __init__(self, item, count, parent):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.next = None\n\n    def increment(self, count):\n        self.count += count\n\ndef construct_tree(transactions, min_support):\n    header_table = defaultdict(int)\n    for transaction in transactions:\n        for item in transaction:\n            header_table[item] += 1\n\n    header_table = {k: v for k, v in header_table.items() if v >= min_support}\n    frequent_items = set(header_table.keys())\n\n    if len(frequent_items) == 0:\n        return None, None\n\n    for k in header_table:\n        header_table[k] = [header_table[k], None]\n\n    tree = Node(\"null\", 1, None)\n    for transaction in transactions:\n        transaction = [item for item in transaction if item in frequent_items]\n        transaction.sort(key=lambda x: header_table[x][0], reverse=True)\n        current_node = tree\n        for item in transaction:\n            current_node = update_tree(item, current_node, header_table, 1)\n    return tree, header_table\n\ndef update_tree(item, tree_node, header_table, count):\n    if item in tree_node.children:\n        tree_node.children[item].increment(count)\n    else:\n        if header_table[item][1] is None:\n            header_table[item][1] = tree_node\n        else:\n            update_header_table(item, header_table[item][1])\n        tree_node.children[item] = Node(item, count, tree_node)\n\n        if header_table[item][1].next is None:\n            header_table[item][1].next = tree_node.children[item]\n        else:\n            update_node_link(item, header_table[item][1])\n    return tree_node.children[item]\n\ndef update_header_table(item, target_node):\n    while target_node.next is not None:\n        target_node = target_node.next\n    target_node.next = header_table[item][1]\n\ndef update_node_link(item, check_node):\n    while check_node.next is not None:\n        check_node = check_node.next\n    check_node.next = header_table[item][1]\n\ndef mine_tree(header_table, min_support, pre_fix, freq_item_list):\n    for k in header_table.keys():\n        new_freq_set = pre_fix.copy()\n        new_freq_set.add(k)\n        freq_item_list.append(new_freq_set)\n        cond_tree_input = []\n        node = header_table[k][1]\n        while node is not None:\n            path = []\n            parent = node.parent\n            while parent.parent is not None:\n                path.append(parent.item)\n                parent = parent.parent\n            path.reverse()\n            cond_tree_input.append(path)\n            node = node.next\n        cond_tree, new_header_table = construct_tree(cond_tree_input, min_support)\n        if new_header_table is not None:\n            mine_tree(new_header_table, min_support, new_freq_set, freq_item_list)\n\ndef fp_growth(transactions, min_support):\n    tree, header_table = construct_tree(transactions, min_support)\n    if tree is None:\n        return []\n    freq_item_list = []\n    mine_tree(header_table, min_support, set(), freq_item_list)\n    return sorted(freq_item_list, key=lambda x: (len(x), sorted(x)))\n```\n\nThis script first constructs the FP-tree and the header table. Then it mines the FP-tree to find all frequent item-sets. The `fp_growth` function returns a list of all frequent item-sets sorted by their length and then lexicographically.\n"}
{"task_id": 75, "completion_id": 0, "completion": "Here is a Python script that implements the k-Nearest Neighbour (k-NN) classifier:\n\n```python\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Check if k is valid\n    if k < 1 or k > len(X_train):\n        return -1\n\n    # Convert lists to numpy arrays for easier computation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Initialize an empty list to store the predicted labels\n    y_pred = []\n\n    # Iterate over each test sample\n    for test_sample in X_test:\n        # Compute the Euclidean distance between the test sample and each training sample\n        distances = np.sqrt(np.sum((X_train - test_sample) ** 2, axis=1))\n\n        # Get the indices of the k nearest training samples\n        k_nearest_indices = np.argsort(distances)[:k]\n\n        # Get the class labels of the k nearest training samples\n        k_nearest_labels = y_train[k_nearest_indices]\n\n        # Get the unique class labels and their counts\n        unique_labels, counts = np.unique(k_nearest_labels, return_counts=True)\n\n        # If there is a tie, choose the smallest class label\n        if len(unique_labels) > 1 and np.max(counts) == np.min(counts):\n            y_pred.append(np.min(unique_labels))\n        else:\n            # Otherwise, choose the class label with the highest count\n            y_pred.append(unique_labels[np.argmax(counts)])\n\n    return y_pred\n```\n\nThis script first checks if the provided `k` is valid. If it is not, it returns `-1`. Then it converts the input lists to NumPy arrays for easier computation. It initializes an empty list to store the predicted labels. For each test sample, it computes the Euclidean distance to each training sample, gets the indices of the `k` nearest training samples, gets the class labels of these training samples, and counts the occurrences of each class label. If there is a tie, it chooses the smallest class label. Otherwise, it chooses the class label with the highest count. The predicted label is then appended to the list of predicted labels. Finally, the list of predicted labels is returned.\n"}
{"task_id": 76, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert lists to numpy arrays\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n\n    # Compute the loss\n    loss = -np.sum(y * np.log(y_pred + np.finfo(float).eps))\n\n    # Round to 4 decimal places\n    loss = round(loss, 4)\n\n    return loss\n```\n\nThis function first converts the input lists to numpy arrays for easier manipulation. Then it computes the cross-entropy loss by summing the product of `y` and the natural logarithm of `y_pred` (with a small epsilon added for numerical stability). Finally, it rounds the loss to 4 decimal places and returns it.\n"}
{"task_id": 77, "completion_id": 0, "completion": "Here is a Python script that implements forward propagation for an L-layer neural network:\n\n```python\nimport numpy as np\n\ndef sigmoid(Z):\n    \"\"\"\n    Implements the sigmoid activation function.\n    \"\"\"\n    A = 1/(1+np.exp(-Z))\n    return A\n\ndef relu(Z):\n    \"\"\"\n    Implements the ReLU activation function.\n    \"\"\"\n    A = np.maximum(0,Z)\n    return A\n\ndef linear_forward(A, W, b):\n    \"\"\"\n    Implement the linear part of a layer's forward propagation.\n    \"\"\"\n    Z = np.dot(W, A) + b\n    return Z\n\ndef linear_activation_forward(A_prev, W, b, activation):\n    \"\"\"\n    Implement the forward propagation for the LINEAR->ACTIVATION layer\n    \"\"\"\n    Z = linear_forward(A_prev, W, b)\n    if activation == \"sigmoid\":\n        A = sigmoid(Z)\n    elif activation == \"relu\":\n        A = relu(Z)\n    return A, Z\n\ndef L_model_forward(X, parameters):\n    \"\"\"\n    Implement forward propagation for the [LINEAR->RELU]*(L-1)->LINEAR->SIGMOID computation\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    \n    for l in range(1, L):\n        A_prev = A \n        A, cache = linear_activation_forward(A_prev, parameters['W' + str(l)], parameters['b' + str(l)], activation = \"relu\")\n        caches.append(cache)\n        \n    AL, cache = linear_activation_forward(A, parameters['W' + str(L)], parameters['b' + str(L)], activation = \"sigmoid\")\n    caches.append(cache)\n            \n    return AL.round(4).tolist(), caches\n```\n\nThis script first defines the activation functions (sigmoid and ReLU) and the linear and activation forward propagation steps. Then it uses these to implement forward propagation for an L-layer neural network. The function `L_model_forward` takes as input the input matrix `X` and a dictionary `parameters` containing the network parameters. It iterates over each layer, applying the linear and activation steps, and storing the results in a list of caches. Finally, it returns the final activation `AL`, rounded to 4 decimal places and converted to a regular Python list.\n"}
{"task_id": 81, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Clip A2 to the interval [\u03b5, 1\u2013\u03b5]\n    epsilon = 1e-15\n    A2 = np.clip(A2, epsilon, 1.0 - epsilon)\n\n    # Compute the binary cross-entropy cost\n    m = Y.shape[0]\n    cost = -1/m * (np.dot(Y, np.log(A2).T) + np.dot(1-Y, np.log(1-A2).T))\n\n    # Return the cost rounded to 6 decimal places\n    return np.round(cost, 6)\n```\n\nThis script first clips the predicted probabilities to the interval [\u03b5, 1\u2013\u03b5] to avoid taking the log of 0. Then it computes the binary cross-entropy cost using the given formula. Finally, it returns the cost rounded to 6 decimal places.\n"}
{"task_id": 82, "completion_id": 0, "completion": "Here is a Python script that implements the `epsilon_soft` function:\n\n```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    # Convert Q to numpy array\n    Q = np.array(Q)\n\n    # Get the index of the greediest action\n    greedy_index = np.argmax(Q)\n\n    # Calculate the base probability\n    base = epsilon / len(Q)\n\n    # Initialize probabilities with base probability\n    probabilities = np.full(len(Q), base)\n\n    # Set the greediest action's probability to (1 - epsilon) + base\n    probabilities[greedy_index] = (1 - epsilon) + base\n\n    # Round probabilities to 4 decimal places\n    probabilities = np.round(probabilities, 4)\n\n    # Normalize probabilities to sum to 1\n    probabilities /= np.sum(probabilities)\n\n    return probabilities.tolist()\n```\n\nThis function first converts the input Q-values to a numpy array for easier manipulation. It then finds the index of the greediest action (the first maximum in case of ties). The base probability is calculated as epsilon divided by the number of actions.\n\nThe probabilities are initialized with the base probability, and the greediest action's probability is set to (1 - epsilon) + base. The probabilities are then rounded to 4 decimal places and normalized to sum to 1. The result is returned as a list.\n"}
{"task_id": 86, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Transpose the predictions to iterate over samples\n    transposed_predictions = list(map(list, zip(*predictions)))\n\n    # Initialize an empty list to store the final predictions\n    final_predictions = []\n\n    # Iterate over each sample\n    for sample_predictions in transposed_predictions:\n        # Count the votes for each class label\n        vote_counts = Counter(sample_predictions)\n\n        # Get the class labels with the highest vote count\n        max_vote_labels = [label for label, count in vote_counts.items() if count == max(vote_counts.values())]\n\n        # Choose the smallest label in case of ties\n        final_prediction = min(max_vote_labels)\n\n        # Append the final prediction to the list\n        final_predictions.append(final_prediction)\n\n    return final_predictions\n```\n\nThis script first transposes the input list of lists so that we can iterate over the predictions for each sample. Then, for each sample, it counts the votes for each class label and identifies the class labels with the highest vote count. If there are ties, it chooses the smallest label. Finally, it appends the final prediction to the list of final predictions.\n"}
{"task_id": 88, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return round(np.logaddexp(0.0, z), 4)\n    else:\n        z = np.array(z)\n        result = np.logaddexp(0.0, z)\n        result = np.round(result, 4)\n        return result.tolist()\n```\n\nThis function first checks if the input `z` is a scalar (either an integer or a float). If it is, it computes the softplus value and rounds it to 4 decimal places. If `z` is not a scalar, it converts it to a NumPy array, computes the softplus values for each element, rounds them to 4 decimal places, and converts the result to a Python list.\n"}
{"task_id": 90, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if policy has any estimates\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n\n    # Get the true expected payouts and policy's estimates\n    true_evs = bandit.arm_evs\n    estimated_evs = [policy.ev_estimates[i] for i in sorted(policy.ev_estimates.keys())]\n\n    # Compute the squared error for every arm\n    squared_errors = [(estimated_ev - true_ev) ** 2 for estimated_ev, true_ev in zip(estimated_evs, true_evs)]\n\n    # Average these values and round the result to 4 decimal places\n    mse = round(sum(squared_errors) / len(squared_errors), 4)\n\n    return mse\n```\n\nThis script first checks if the policy has any estimates. If not, it returns `numpy.nan`. Then it gets the true expected payouts and policy's estimates. It computes the squared error for every arm and averages these values, rounding the result to 4 decimal places. The function finally returns this mean-squared error.\n"}
{"task_id": 96, "completion_id": 0, "completion": "Here is a Python script that implements the additive-smoothed N-gram log-probability function:\n\n```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Build all 1-,\u2026,N-gram frequency tables from the corpus\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        for n in range(1, N+1):\n            for ngram in zip(*[words[i:] for i in range(n)]):\n                ngram_counts[n][ngram] += 1\n\n    # Add an explicit \u201c<UNK>\u201d token to the vocabulary to handle unseen words\n    vocab = set(word for words in corpus for word in words.split())\n    vocab.add(\"<UNK>\")\n\n    # Estimate the probability of every contiguous N-gram in the target sentence\n    words = sequence.split()\n    if len(words) < N:\n        return 0.0\n\n    log_prob = 0.0\n    for ngram in zip(*[words[i:] for i in range(N)]):\n        context = ngram[:-1]\n        word = ngram[-1]\n        if word not in vocab:\n            word = \"<UNK>\"\n        count_context_word = ngram_counts[N][ngram]\n        count_context = sum(ngram_counts[N][context + (word,)] for word in vocab)\n        prob = (count_context_word + K) / (count_context + K * len(vocab))\n        log_prob += math.log(prob)\n\n    return round(log_prob, 4)\n```\n\nThis script first builds all 1-,\u2026,N-gram frequency tables from the corpus. It then adds an explicit \u201c<UNK>\u201d token to the vocabulary to handle unseen words. It estimates the probability of every contiguous N-gram in the target sentence with additive smoothing. If the sentence length is smaller than N, no N-grams exist, in that case it returns 0.0. Finally, it returns the natural logarithm of the sentence probability (i.e. the sum of log-probabilities of all N-grams) rounded to 4 decimals.\n"}
{"task_id": 108, "completion_id": 0, "completion": "Here is a Python script that implements the regularized Alternating Least Squares (ALS) algorithm to factorize a real-valued matrix:\n\n```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    N, M = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    for _ in range(max_iter):\n        H_new = np.linalg.solve(np.dot(W.T, W) + alpha * np.eye(K), np.dot(W.T, X))\n        W_new = np.linalg.solve(np.dot(H_new, H_new.T) + alpha * np.eye(K), np.dot(X, H_new.T).T).T\n\n        if np.linalg.norm(H_new - H) < tol and np.linalg.norm(W_new - W) < tol:\n            break\n\n        H, W = H_new, W_new\n\n    X_hat = np.dot(W, H)\n    return X_hat.round(4).tolist()\n```\n\nThis script first initializes the factor matrices `W` and `H` with random values. It then enters a loop where it alternately solves for `H` and `W`. The loop continues until either the change in `H` and `W` is less than `tol` or `max_iter` iterations have been executed. The reconstructed matrix `X_hat` is then returned, rounded to 4 decimal places and converted to a standard Python list of lists.\n"}
{"task_id": 109, "completion_id": 0, "completion": "Here is a Python script that implements the K-Means++ algorithm:\n\n```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    # K-Means++ initialization\n    centroids = [random.choice(X)]\n    for _ in range(1, K):\n        dist_sq = np.array([min([np.inner(c-x,c-x) for c in centroids]) for x in X])\n        probs = dist_sq / dist_sq.sum()\n        cumulative_probs = probs.cumsum()\n        r = random.random()\n        for j, p in enumerate(cumulative_probs):\n            if r < p:\n                i = j\n                break\n        centroids.append(X[i])\n\n    # Lloyd's algorithm\n    for _ in range(max_iter):\n        clusters = [[] for _ in range(K)]\n        for x in X:\n            distances = [np.linalg.norm(x - c) for c in centroids]\n            cluster_idx = np.argmin(distances)\n            clusters[cluster_idx].append(x)\n\n        new_centroids = []\n        for cluster in clusters:\n            if cluster:\n                new_centroids.append(np.mean(cluster, axis=0))\n            else:\n                new_centroids.append(np.zeros(X.shape[1]))\n\n        if np.allclose(centroids, new_centroids):\n            break\n\n        centroids = new_centroids\n\n    return sorted([list(map(lambda x: round(x, 4), c)) for c in centroids])\n```\n\nThis script first initializes the centroids using the K-Means++ method. Then it performs the Lloyd's algorithm until the centroids converge or the maximum number of iterations is reached. The centroids are then sorted and rounded to four decimal places as required.\n"}
{"task_id": 111, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes every character of the input string using a provided vocabulary.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list/array of integer ids back to text using an inverse vocabulary.\"\"\"\n    return ''.join(inverse_vocab.get(i, '') for i in indices if i != 0)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Puts everything together: encodes the raw text, calls model.predict, applies argmax, and decodes the ids.\"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    prediction = model.predict(np.array([encoded]))\n    decoded = int_to_string(np.argmax(prediction, axis=-1)[0], inv_output_vocabulary)\n    return decoded\n```\n\nThis script assumes that the model has a `predict` method that takes a 2D numpy array as input and returns a 3D numpy array. The `argmax` function is used to select the most probable character at each time step. The `get` method of the vocabulary dictionaries is used to handle characters not in the vocabulary.\n"}
{"task_id": 113, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        global EXAMPLES\n        examples = EXAMPLES\n\n    predictions = []\n    for example in examples:\n        prediction = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        prediction_str = ''.join(prediction)\n        print(f\"input: {example}\\noutput: {prediction_str}\")\n        predictions.append(prediction_str)\n\n    return predictions\n```\n\nThis script defines a function `run_examples` that takes a model, input and output vocabularies, and a list of examples. It then iterates over the examples, calls the `run_example` function to get the prediction, joins the prediction characters into a string, prints the input and output, and appends the prediction string to a list. Finally, it returns the list of predictions.\n\nPlease note that the `run_example` function is assumed to be defined elsewhere in the code and is not defined in this script.\n"}
{"task_id": 115, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Compute z\n    z = np.dot(X, w)\n\n    # Compute p\n    p = 1 / (1 + np.exp(-z))\n\n    # Replace 0 and 1 probabilities with a small constant\n    eps = 1e-20\n    p = np.clip(p, eps, 1 - eps)\n\n    # Compute the loss\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n\n    # Compute the gradient\n    gradient = np.dot(X.T, p - y) / X.shape[0]\n\n    return round(loss, 4), np.around(gradient, 4).tolist()\n```\n\nThis function first computes the z values, then the p values. It replaces any 0 or 1 probabilities with a small constant to avoid numerical issues. It then computes the loss and the gradient, and returns them rounded to 4 decimal places.\n"}
{"task_id": 118, "completion_id": 0, "completion": "Here is a Python script that implements the AdaBoost algorithm with decision stumps.\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    m, n = X_train.shape\n    w = np.ones(m) / m\n    clfs = []\n\n    for _ in range(n_clf):\n        best_clf, best_error, best_predict = None, float('inf'), None\n\n        for d in range(n):\n            for sign in [1, -1]:\n                predict = sign * X_train[:, d]\n                error = sum(w[y_train != predict])\n\n                if error < best_error:\n                    best_clf = d\n                    best_error = error\n                    best_predict = predict.copy()\n\n        eps = 1e-10\n        best_error += eps  # Avoid division by zero\n        alpha = 0.5 * np.log((1 - best_error) / best_error)\n        w *= np.exp(-alpha * y_train * best_predict)\n        w /= np.sum(w)\n\n        clfs.append((best_clf, alpha))\n\n    y_pred = np.zeros(X_test.shape[0])\n    for d, alpha in clfs:\n        predict = alpha * np.where(X_test[:, d] > 0, 1, -1)\n        y_pred += predict\n\n    return [1 if p > 0 else -1 for p in y_pred]\n```\n\nThis script first initializes the weights of all training examples to be equal. Then, for each weak classifier, it iterates over all features and signs, and chooses the feature-sign combination that minimizes the weighted error. The weight of the misclassified examples is then updated, and the weight of the classifier is computed. The classifier and its weight are stored. Finally, for each test example, the weighted votes of all classifiers are aggregated and the sign of the sum determines the predicted label.\n"}
{"task_id": 128, "completion_id": 0, "completion": "Here is a Python script that implements the multi-class Linear Discriminant Analysis (LDA) transformation:\n\n```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    class_labels = np.unique(y)\n    if n_components <= 0 or n_components > X.shape[1]:\n        return []\n\n    # Compute the within-class scatter matrix\n    within_class_scatter = np.zeros((X.shape[1], X.shape[1]))\n    for c in class_labels:\n        X_c = X[y == c]\n        within_class_scatter += np.cov(X_c.T) * (X_c.shape[0] - 1)\n\n    # Compute the between-class scatter matrix\n    global_mean = np.mean(X, axis=0)\n    between_class_scatter = np.zeros((X.shape[1], X.shape[1]))\n    for c in class_labels:\n        X_c = X[y == c]\n        n_c = X_c.shape[0]\n        mean_c = np.mean(X_c, axis=0)\n        between_class_scatter += n_c * np.outer(mean_c - global_mean, mean_c - global_mean)\n\n    # Compute the matrix A = pinv(S_W)\u00b7S_B\n    A = np.dot(np.linalg.pinv(within_class_scatter), between_class_scatter)\n\n    # Perform eigen-decomposition of A\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n\n    # Sort the eigen-pairs in descending order of the eigen-values\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n\n    # Deterministic sign\n    for i in range(eigenvectors.shape[1]):\n        if eigenvectors[0, i] < 0:\n            eigenvectors[:, i] *= -1\n\n    # Project X on the first n_components eigenvectors\n    projection = np.dot(X, eigenvectors[:, :n_components])\n\n    # Round every element to four decimal places\n    projection = np.round(projection, 4).tolist()\n\n    return projection\n```\n\nThis script first computes the within-class scatter matrix and the between-class scatter matrix. Then it computes the matrix A = pinv(S_W)\u00b7S_B and performs eigen-decomposition of A. The eigenvectors are sorted in descending order of the corresponding eigenvalues. The sign of the eigenvectors is determined deterministically. Finally, the data is projected onto the first n_components eigenvectors and the result is rounded to four decimal places.\n"}
{"task_id": 140, "completion_id": 0, "completion": "Here is a Python solution using Breadth-First Search (BFS) algorithm. The idea is to use two queues, one for the agent and one for the fire. We start by adding the agent's initial position and all the fire sources to their respective queues. Then, we perform a BFS on both queues simultaneously. For each minute, we process all the cells that are currently in the agent's queue. If the agent reaches the goal, we return the current minute. If the agent can move to a cell and it is not on fire, we add it to the agent's queue. We also process all the cells that are currently in the fire's queue and add all the cells that are not on fire to the fire's queue. If the agent's queue is empty, it means that the agent cannot reach the goal, so we return -1.\n\n```python\nfrom collections import deque\nimport math\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    # Initialize the queues for the agent and the fire\n    agent_queue = deque([(0, 0)])\n    fire_queue = deque([(i, j) for i in range(n) for j in range(n) if grid[i][j] == 'F'])\n\n    # Initialize the visited sets for the agent and the fire\n    agent_visited = set([(0, 0)])\n    fire_visited = set(fire_queue)\n\n    # Perform BFS\n    for minutes in range(1, math.inf):\n        # Process all the cells that are currently in the fire's queue\n        for _ in range(len(fire_queue)):\n            i, j = fire_queue.popleft()\n            for di, dj in directions:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < n and 0 <= nj < n and grid[ni][nj] != '#' and (ni, nj) not in fire_visited:\n                    fire_queue.append((ni, nj))\n                    fire_visited.add((ni, nj))\n\n        # Process all the cells that are currently in the agent's queue\n        for _ in range(len(agent_queue)):\n            i, j = agent_queue.popleft()\n            for di, dj in directions:\n                ni, nj = i + di, j + dj\n                if ni == nj == n - 1:  # The agent reached the goal\n                    return minutes\n                if 0 <= ni < n and 0 <= nj < n and grid[ni][nj] != '#' and (ni, nj) not in agent_visited and (ni, nj) not in fire_visited:\n                    agent_queue.append((ni, nj))\n                    agent_visited.add((ni, nj))\n\n        # If the agent's queue is empty, it means that the agent cannot reach the goal\n        if not agent_queue:\n            return -1\n```\n\nThis solution has a time complexity of O(n^2) and a space complexity of O(n^2) where n is the size of the grid.\n"}
{"task_id": 141, "completion_id": 0, "completion": "Here is a Python script that implements the k-Nearest Neighbors (k-NN) classifier as a single function.\n\n```python\nimport numpy as np\nfrom scipy.spatial import distance\nfrom collections import Counter\n\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    # Compute the distance between each test sample and every training sample\n    if metric == 'euclidean':\n        dist_matrix = distance.cdist(X_test, X_train, 'euclidean')\n    elif metric == 'manhattan':\n        dist_matrix = distance.cdist(X_test, X_train, 'cityblock')\n    elif metric == 'cosine':\n        dist_matrix = distance.cdist(X_test, X_train, 'cosine')\n    else:\n        dist_matrix = distance.cdist(X_test, X_train, 'euclidean')\n\n    # For every test sample find the k training samples with the smallest distance\n    k_nearest_indices = np.argsort(dist_matrix)[:, :k]\n\n    # Predict the class by majority vote among those k neighbours\n    y_pred = []\n    for row in k_nearest_indices:\n        k_nearest_labels = y_train[row]\n        most_common_label = Counter(k_nearest_labels).most_common()\n        # In case of a tie return the smallest label value\n        most_common_label.sort(key=lambda x: (-x[1], x[0]))\n        y_pred.append(most_common_label[0][0])\n\n    return np.array(y_pred)\n```\n\nThis script first computes the distance between each test sample and every training sample using the specified metric. It then finds the k training samples with the smallest distance for each test sample. The predicted class for each test sample is determined by majority vote among those k neighbours. In case of a tie, the smallest label value is returned. The predicted labels are returned as a 1-D NumPy array.\n"}
{"task_id": 146, "completion_id": 0, "completion": "Here is a Python script that implements the k-Nearest Neighbours (k-NN) classifier from scratch:\n\n```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2))\n\n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2))\n\n    def cosine_distance(x1, x2):\n        eps = 1e-12\n        return 1 - np.dot(x1, x2) / (np.linalg.norm(x1) * np.linalg.norm(x2) + eps)\n\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError(f\"Unknown metric: {metric}\")\n\n    y_pred = []\n    for x_test in X_test:\n        distances = [distance_func(x_test, x) for x in X]\n        k_nearest_indices = np.argsort(distances)[:k]\n        k_nearest_labels = y[k_nearest_indices]\n        unique_labels, counts = np.unique(k_nearest_labels, return_counts=True)\n        max_count_indices = np.argwhere(counts == np.max(counts)).flatten()\n        if len(max_count_indices) > 1:\n            y_pred.append(np.min(unique_labels[max_count_indices]))\n        else:\n            y_pred.append(unique_labels[max_count_indices[0]])\n\n    return y_pred\n```\n\nThis script first defines three distance functions: Euclidean, Manhattan, and Cosine. It then uses a list comprehension to compute the distance between each test sample and every training sample, and uses NumPy's `argsort` function to find the indices of the *k* nearest training samples. It then uses NumPy's `unique` function to find the unique labels of the *k* nearest training samples and their counts, and uses NumPy's `argwhere` function to find the indices of the labels with the maximum count. If there is a tie, it chooses the smallest label. Finally, it appends the predicted label to the `y_pred` list.\n"}
{"task_id": 155, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to numpy array\n    state = np.array(state)\n\n    # First layer\n    z1 = np.dot(state, weights['W1']) + weights['b1']\n    a1 = np.maximum(0, z1)  # ReLU\n\n    # Second layer\n    z2 = np.dot(a1, weights['W2']) + weights['b2']\n    a2 = np.maximum(0, z2)  # ReLU\n\n    # Output layer\n    z3 = np.dot(a2, weights['W3']) + weights['b3']\n    action = np.tanh(z3)\n\n    # Round to 4 decimal places\n    action = [round(x, 4) for x in action.tolist()]\n\n    return action\n```\n\nThis script first converts the state to a numpy array for easier manipulation. Then it performs the forward pass of the network, applying the ReLU activation function after the first two linear transformations. The final output is passed through a tanh function to keep the actions within the range [-1, 1]. The resulting action vector is then rounded to 4 decimal places and returned as a list.\n"}
{"task_id": 160, "completion_id": 0, "completion": "Here is the Python code that implements Lasso regression via coordinate descent:\n\n```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    if fit_intercept:\n        X = np.column_stack((np.ones(m), X))\n    else:\n        X = np.column_stack((np.zeros(m), X))\n\n    w = np.zeros(n + fit_intercept)\n    b = 0.0\n\n    for _ in range(max_iters):\n        for j in range(n + fit_intercept):\n            if j == 0:\n                r = y - np.dot(X[:, 1:], w[1:])\n            else:\n                r = y - np.dot(X[:, :j], w[:j]) - np.dot(X[:, j+1:], w[j+1:])\n\n            if j == 0 and fit_intercept:\n                b = np.mean(r)\n            else:\n                w_j = np.dot(X[:, j], r) / np.sum(X[:, j]**2)\n                w[j] = np.sign(w_j) * max(abs(w_j) - lambda_param * m, 0)\n\n    return [round(weight, 4) for weight in w], round(b, 4)\n```\n\nThis function first checks if an intercept should be fitted. If so, it adds a column of ones to the feature matrix. If not, it adds a column of zeros. Then it initializes the weights and bias to zero.\n\nThe function then enters a loop over the number of iterations. In each iteration, it enters a loop over each feature. For each feature, it computes the partial residual and updates the weight using the soft-thresholding operator. If the intercept is fitted, it also updates the bias.\n\nFinally, it returns the weights and bias, rounded to 4 decimal places.\n"}
{"task_id": 165, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert lists to numpy arrays\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(y, list):\n        y = np.array(y)\n\n    # Check if the vectors have the same length\n    if x.shape[0] != y.shape[0]:\n        return -1\n\n    # Compute the Hamming distance\n    distance = np.sum(x != y) / x.shape[0]\n\n    # Return the distance rounded to 4 decimal places\n    return round(distance, 4)\n```\n\nThis script first checks if the inputs are lists and converts them to numpy arrays if necessary. It then checks if the two vectors have the same length. If they do not, it returns -1. Otherwise, it computes the Hamming distance and returns it rounded to 4 decimal places.\n"}
{"task_id": 169, "completion_id": 0, "completion": "Here is a Python script that implements the `generate_window` function as described:\n\n```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer\")\n\n    if window == \"hamming\":\n        return [round(0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == \"hann\":\n        return [round(0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == \"blackman_harris\":\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        return [round(a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for generalized cosine window\")\n        return [round(sum(a * np.cos(2 * np.pi * k * n / (N - 1)) for k, a in enumerate(coefficients)), 4) for n in range(N)]\n    else:\n        raise ValueError(f\"Unknown window type: {window}\")\n```\n\nThis script uses the `numpy` library for the cosine function and list comprehensions to generate the window coefficients. It also uses the `round` function to round the coefficients to 4 decimal places. The script raises a `ValueError` if the input is invalid.\n"}
{"task_id": 171, "completion_id": 0, "completion": "Here is a Python script that implements a binary Logistic Regression classifier using mini-batch Gradient Descent.\n\n```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    # Convert lists to numpy arrays\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Add intercept term to the data\n    X_train = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n\n    # Map labels to {0,1}\n    unique_labels = np.unique(y_train)\n    y_train = np.where(y_train == unique_labels[0], 0, 1)\n\n    # If all training labels are identical, return the unique label for all test samples\n    if np.all(y_train == 0):\n        return [unique_labels[0]] * X_test.shape[0]\n    elif np.all(y_train == 1):\n        return [unique_labels[1]] * X_test.shape[0]\n\n    # Initialize weight vector\n    weights = np.zeros(X_train.shape[1])\n\n    # Train the weight vector using mini-batch Gradient Descent\n    for _ in range(epochs):\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train[i:i+batch_size]\n            y_batch = y_train[i:i+batch_size]\n\n            # Compute the gradient of the negative log-likelihood loss\n            y_pred = 1 / (1 + np.exp(-X_batch.dot(weights)))\n            gradient = X_batch.T.dot(y_pred - y_batch)\n\n            # Update the weights\n            weights -= learning_rate * gradient / batch_size\n\n    # Predict labels for the test set\n    y_pred = 1 / (1 + np.exp(-X_test.dot(weights)))\n    y_pred = np.where(y_pred < 0.5, unique_labels[0], unique_labels[1])\n\n    return y_pred.tolist()\n```\n\nThis script first converts the input lists to numpy arrays and adds an intercept term to the data. It then maps the labels to {0,1} and checks if all training labels are identical. If they are, it returns the unique label for all test samples. Otherwise, it initializes the weight vector and trains it using mini-batch Gradient Descent. Finally, it predicts labels for the test set and returns them.\n"}
{"task_id": 176, "completion_id": 0, "completion": "Here is a Python script that implements the AdaBoost algorithm with decision stumps from scratch:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    n_samples, n_features = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    f_index, f_threshold, f_polarity, f_weights = [], [], [], []\n\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        for feature_i in range(n_features):\n            feature_values = np.expand_dims(X_train[:, feature_i], axis=1)\n            unique_values = np.unique(feature_values)\n\n            for threshold in unique_values:\n                polarity = 1\n                predictions = np.ones(np.shape(y_train))\n                predictions[X_train[:, feature_i] < threshold] = -1\n\n                error = sum(weights[y_train != predictions])\n                if error > 0.5:\n                    error = 1 - error\n                    polarity = -1\n\n                if error < min_error:\n                    min_error = error\n                    f_index = feature_i\n                    f_threshold = threshold\n                    f_polarity = polarity\n\n        f_weights.append(0.5 * np.log((1.0 - min_error) / (min_error + 1e-10)))\n        predictions = np.ones(np.shape(y_train))\n        negative_idx = X_train[:, f_index] < f_threshold\n        predictions[negative_idx] = -1\n        weights *= np.exp(-f_weights[-1] * y_train * predictions)\n        weights /= np.sum(weights)\n\n        if min_error == 0:\n            break\n\n    y_pred = np.zeros(np.shape(y_train))\n    for i in range(n_estimators):\n        predictions = np.ones(np.shape(y_train))\n        negative_idx = X_train[:, f_index[i]] < f_threshold[i]\n        predictions[negative_idx] = -1\n        y_pred += f_weights[i] * predictions\n\n    y_pred = np.sign(y_pred)\n    y_pred = [1 if y == 1 else 0 for y in y_pred]\n    return y_pred\n```\n\nThis script first initializes the weights for all samples to be equal. Then, for each boosting round, it iterates over all features and thresholds to find the best decision stump (i.e., the one with the smallest weighted classification error). The weights are then updated according to the AdaBoost algorithm. The final predictions are obtained by aggregating the weighted votes of all decision stumps.\n"}
{"task_id": 178, "completion_id": 0, "completion": "Here is a Python script that implements the Particle Swarm Optimization (PSO) algorithm to minimize the Sphere function.\n\n```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    rng = np.random.default_rng(seed)\n\n    # Initialize particles\n    particles = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = rng.uniform(-1, 1, (num_particles, n_dims))\n    p_best = particles.copy()\n    g_best = particles[np.argmin(np.sum(particles**2, axis=1))]\n\n    # PSO parameters\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n\n    for _ in range(num_iterations):\n        # Update velocities\n        velocities = w * velocities + c1 * rng.uniform(0, 1, (num_particles, n_dims)) * (p_best - particles) + c2 * rng.uniform(0, 1, (num_particles, n_dims)) * (g_best - particles)\n\n        # Update positions\n        particles = np.clip(particles + velocities, -1, 1)\n\n        # Update personal bests\n        p_best[np.sum(particles**2, axis=1) < np.sum(p_best**2, axis=1)] = particles[np.sum(particles**2, axis=1) < np.sum(p_best**2, axis=1)]\n\n        # Update global best\n        g_best = p_best[np.argmin(np.sum(p_best**2, axis=1))]\n\n    return round(np.sum(g_best**2), 4)\n```\n\nThis script first checks if the input arguments are positive. If not, it returns -1. Then it initializes the particles and velocities randomly within the search space. The PSO parameters are set to the given values. The main loop runs for the specified number of iterations. In each iteration, the velocities and positions of the particles are updated according to the PSO algorithm. The personal bests and the global best are updated as well. Finally, the best objective value found is returned, rounded to the nearest 4th decimal.\n"}
{"task_id": 180, "completion_id": 0, "completion": "Here is a Python script that implements the k-Nearest Neighbours algorithm as described:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    predictions = []\n    for test_sample in X_test:\n        distances = np.sqrt(np.sum((X_train - test_sample)**2, axis=1))\n        indices = np.argsort(distances)\n\n        if k == 0 or k > len(X_train):\n            k = len(X_train)\n\n        if task == \"classification\":\n            labels = y_train[indices[:k]]\n            prediction = Counter(labels).most_common(1)[0][0]\n        else:  # regression\n            prediction = round(np.mean(y_train[indices[:k]]), 4)\n\n        predictions.append(prediction)\n\n    return predictions\n```\n\nThis script first calculates the Euclidean distance between each test sample and every training sample. It then sorts the training samples by their distance to the test sample and selects the k nearest ones. Depending on the task, it either selects the most common label among the k nearest neighbours (classification) or calculates the average of their target values (regression). The predictions are then returned in the same order as the test samples.\n"}
{"task_id": 184, "completion_id": 0, "completion": "Here is a Python script that implements a CART decision tree classifier from scratch. The script uses the Gini impurity and recursive binary splitting to build the decision tree.\n\n```python\nimport numpy as np\n\nclass Node:\n    def __init__(self, predicted_class):\n        self.predicted_class = predicted_class\n        self.feature_index = 0\n        self.threshold = 0\n        self.left = None\n        self.right = None\n\n\ndef gini_impurity(y):\n    _, counts = np.unique(y, return_counts=True)\n    probabilities = counts / counts.sum()\n    return 1 - np.sum(np.square(probabilities))\n\n\ndef split_data(X, y, feature_index, threshold):\n    left_mask = X[:, feature_index] < threshold\n    right_mask = X[:, feature_index] >= threshold\n    return (X[left_mask], y[left_mask]), (X[right_mask], y[right_mask])\n\n\ndef find_best_split(X, y):\n    best_gain = -np.inf\n    best_feature, best_threshold = None, None\n    parent_gini = gini_impurity(y)\n\n    for feature_index in range(X.shape[1]):\n        thresholds = np.unique(X[:, feature_index])\n        for threshold in thresholds:\n            (X_left, y_left), (X_right, y_right) = split_data(X, y, feature_index, threshold)\n            if len(y_left) == 0 or len(y_right) == 0:\n                continue\n            child_gini = (len(y_left) * gini_impurity(y_left) + len(y_right) * gini_impurity(y_right)) / len(y)\n            gain = parent_gini - child_gini\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_index\n                best_threshold = threshold\n\n    return best_feature, best_threshold\n\n\ndef build_tree(X, y, depth=0, max_depth=None):\n    classes, counts = np.unique(y, return_counts=True)\n    predicted_class = classes[np.argmax(counts)]\n\n    node = Node(predicted_class=predicted_class)\n\n    if depth == max_depth or len(np.unique(y)) == 1:\n        return node\n\n    feature_index, threshold = find_best_split(X, y)\n\n    if feature_index is None:\n        return node\n\n    (X_left, y_left), (X_right, y_right) = split_data(X, y, feature_index, threshold)\n    node.feature_index = feature_index\n    node.threshold = threshold\n    node.left = build_tree(X_left, y_left, depth + 1, max_depth)\n    node.right = build_tree(X_right, y_right, depth + 1, max_depth)\n\n    return node\n\n\ndef predict_one(x, tree):\n    node = tree\n    while node.left:\n        if x[node.feature_index] < node.threshold:\n            node = node.left\n        else:\n            node = node.right\n    return node.predicted_class\n\n\ndef decision_tree_predict(X_train, y_train, X_test, max_depth=None):\n    tree = build_tree(X_train, y_train, max_depth=max_depth)\n    return [predict_one(x, tree) for x in X_test]\n```\n\nThis script first defines a `Node` class to represent a node in the decision tree. The `gini_impurity` function calculates the Gini impurity of a set of labels. The `split_data` function splits a dataset based on a feature and a threshold. The `find_best_split` function finds the best feature and threshold to split a dataset. The `build_tree` function recursively builds the decision tree. The `predict_one` function predicts the class of a single sample. Finally, the `decision_tree_predict` function builds the decision tree and predicts the classes of all test samples.\n"}
{"task_id": 190, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef gini(y):\n    _, counts = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    return 1 - np.sum(np.square(probabilities))\n\ndef best_gini_split(X, y):\n    X = np.array(X)\n    y = np.array(y)\n\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = np.inf\n\n    G_whole_dataset = gini(y)\n\n    for feature_index in range(X.shape[1]):\n        unique_values = np.unique(X[:, feature_index])\n\n        for threshold_value in unique_values:\n            left_indices = X[:, feature_index] <= threshold_value\n            right_indices = X[:, feature_index] > threshold_value\n\n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue\n\n            left_y = y[left_indices]\n            right_y = y[right_indices]\n\n            G_split = (len(left_y) / len(y)) * gini(left_y) + (len(right_y) / len(y)) * gini(right_y)\n\n            if G_split < best_gini or (\n                np.isclose(G_split, best_gini) and\n                (feature_index < best_feature_index or\n                (feature_index == best_feature_index and threshold_value < best_threshold_value))\n            ):\n                best_feature_index = feature_index\n                best_threshold_value = threshold_value\n                best_gini = G_split\n\n    if best_feature_index == -1:\n        return (-1, None, round(G_whole_dataset, 4))\n    else:\n        return (best_feature_index, best_threshold_value, round(best_gini, 4))\n```\n\nThis script first calculates the Gini impurity of the whole dataset. Then, for each feature and each unique value of that feature, it calculates the Gini impurity of the split and updates the best split if the current split has a smaller Gini impurity. If the Gini impurity is the same, it prefers the split with the smaller feature index, and if the feature indices are also the same, it prefers the smaller threshold value. If no valid split is found, it returns `(-1, None, round(G_whole_dataset, 4))`.\n"}
{"task_id": 191, "completion_id": 0, "completion": "Here is a Python script that implements the requested factory function:\n\n```python\nimport numpy as np\nfrom typing import Iterable\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    def euclidean(x, y):\n        return round(np.sqrt(np.sum((np.array(x) - np.array(y)) ** 2)), 4)\n\n    def manhattan(x, y):\n        return round(np.sum(np.abs(np.array(x) - np.array(y))), 4)\n\n    def chebyshev(x, y):\n        return round(np.max(np.abs(np.array(x) - np.array(y))), 4)\n\n    def cosine(x, y):\n        x, y = np.array(x), np.array(y)\n        norm_x, norm_y = np.linalg.norm(x), np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return round(1 - np.dot(x, y) / (norm_x * norm_y), 4)\n\n    metrics = {\n        'euclidean': euclidean,\n        'manhattan': manhattan,\n        'chebyshev': chebyshev,\n        'cosine': cosine\n    }\n\n    def d(x, y):\n        if name not in metrics:\n            return -1\n        try:\n            x, y = np.array(x, dtype=float), np.array(y, dtype=float)\n            if x.ndim != 1 or y.ndim != 1 or x.size == 0 or y.size == 0 or x.size != y.size:\n                return -1\n        except ValueError:\n            return -1\n        return metrics[name](x, y)\n\n    return d\n```\n\nThis script defines a factory function `metric` that takes a string `name` as input and returns a callable `d`. The callable `d` computes the requested distance metric between two numeric vectors. The function `d` also validates the input vectors and returns -1 if the validation fails.\n"}
{"task_id": 197, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n\n    if md_action:\n        action_dim = len(env.action_space.spaces)\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            else:\n                n_actions_per_dim.append(np.inf)\n                cont_action = True\n\n        if not cont_action:\n            action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n    else:\n        action_dim = 1\n        if hasattr(env.action_space, 'n'):\n            n_actions_per_dim.append(env.action_space.n)\n            if not cont_action:\n                action_ids = list(range(env.action_space.n))\n        else:\n            n_actions_per_dim.append(np.inf)\n\n    return n_actions_per_dim, action_ids, action_dim\n```\n\nThis script first checks if the action space is multi-dimensional. If it is, it iterates over each sub-space and checks if it is discrete or continuous. If it is discrete, it adds the number of actions to `n_actions_per_dim`. If it is continuous, it sets the corresponding entry in `n_actions_per_dim` to `numpy.inf` and sets `cont_action` to `True`. If the action space is not multi-dimensional, it checks if it is discrete or continuous. If it is discrete, it adds the number of actions to `n_actions_per_dim`. If it is continuous, it sets the corresponding entry in `n_actions_per_dim` to `numpy.inf` and sets `cont_action` to `True`. If the action space is fully discrete and multi-dimensional, it calculates all possible actions via the cartesian product of the ranges for each dimension and adds them to `action_ids`.\n"}
{"task_id": 198, "completion_id": 0, "completion": "Here is a Python script that implements the \u03b2-maximisation step in Latent Dirichlet Allocation:\n\n```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Initialize \u03b2\n    beta = np.zeros((V, len(phi[0][0])))\n\n    # Compute \u03b2\n    for d in range(len(phi)):\n        for n in range(len(phi[d])):\n            for t in range(len(phi[d][n])):\n                beta[corpus[d][n]][t] += phi[d][n][t]\n\n    # Normalize \u03b2\n    beta = beta / np.sum(beta, axis=0)\n\n    # Round \u03b2\n    beta = np.round(beta, 4)\n\n    return beta.tolist()\n```\n\nThis script first initializes \u03b2 as a V x T matrix of zeros. It then iterates over all documents, tokens, and topics, and adds the corresponding value from \u03d5 to the appropriate entry in \u03b2. After that, it normalizes \u03b2 by dividing each column by its sum. Finally, it rounds all entries in \u03b2 to four decimal places. The result is returned as a nested list.\n"}
{"task_id": 202, "completion_id": 0, "completion": "Here is a Python script that implements the PAM clustering algorithm:\n\n```python\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    def calculate_cost(medoids):\n        return sum(np.min(np.sum((X[medoids] - X) ** 2, axis=-1)) for medoid in medoids)\n\n    def assign_clusters(medoids):\n        return np.argmin(np.sum((X[medoids] - X[:, None]) ** 2, axis=-1), axis=-1)\n\n    medoids = list(range(k))\n    cost = calculate_cost(medoids)\n\n    while True:\n        best_swap = None\n        best_cost = cost\n        for medoid in medoids:\n            for non_medoid in set(range(len(X))) - set(medoids):\n                new_medoids = medoids[:]\n                new_medoids[medoids.index(medoid)] = non_medoid\n                new_cost = calculate_cost(new_medoids)\n                if new_cost < best_cost:\n                    best_cost = new_cost\n                    best_swap = (medoid, non_medoid)\n        if best_swap is None:\n            break\n        medoids[medoids.index(best_swap[0])] = best_swap[1]\n        cost = best_cost\n\n    return assign_clusters(medoids).tolist()\n```\n\nThis script first defines two helper functions: `calculate_cost` and `assign_clusters`. The `calculate_cost` function calculates the total cost of the current medoids, which is the sum of the Euclidean distances between every sample and the medoid of the cluster it belongs to. The `assign_clusters` function assigns each sample to the closest medoid.\n\nThe main function `pam_clustering` initializes the medoids as the first k samples of X. It then enters a loop where it tries all possible single swaps between a medoid and a non-medoid, accepting the swap that strictly reduces the total cost the most. If no swap can further decrease the cost, it breaks the loop. After convergence, it assigns each sample to the closest medoid and returns the cluster labels as a Python list.\n"}
{"task_id": 216, "completion_id": 0, "completion": "Here is a Python script that implements the Elastic Net regression from scratch using batch gradient descent.\n\n```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    # Check if the shapes of x_train and x_test are compatible\n    if len(x_train[0]) != len(x_test[0]):\n        return -1\n\n    # Check if n_iterations is smaller than 1\n    if n_iterations < 1:\n        return -1\n\n    # Convert the inputs to numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n\n    # Generate polynomial features\n    x_train = np.hstack([x_train**(i+1) for i in range(degree)])\n    x_test = np.hstack([x_test**(i+1) for i in range(degree)])\n\n    # Standardize the features\n    x_train[:, 1:] = (x_train[:, 1:] - np.mean(x_train[:, 1:], axis=0)) / np.std(x_train[:, 1:], axis=0)\n    x_test = (x_test - np.mean(x_test, axis=0)) / np.std(x_test, axis=0)\n\n    # Initialize the weight vector\n    weights = np.zeros(x_train.shape[1])\n\n    # Train the model\n    for _ in range(n_iterations):\n        y_pred = np.dot(x_train, weights)\n        residuals = y_pred - y_train\n        gradient = np.dot(x_train.T, residuals) + reg_factor * (l1_ratio * np.sign(weights) + (1 - l1_ratio) * weights)\n        weights -= learning_rate * gradient\n\n    # Make predictions\n    y_pred = np.dot(x_test, weights)\n\n    # Return the predictions rounded to 4 decimals\n    return np.round(y_pred, 4).tolist()\n```\n\nThis script first checks if the shapes of `x_train` and `x_test` are compatible and if `n_iterations` is smaller than 1. If not, it returns `-1`. Then it converts the inputs to numpy arrays and generates polynomial features of the given degree. It standardizes the features by subtracting the mean and dividing by the standard deviation. It initializes the weight vector and trains the model for `n_iterations` passes of batch gradient descent. Finally, it makes predictions for `x_test` and returns the predictions rounded to 4 decimals.\n"}
{"task_id": 217, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n\n    # Compute sigmoid\n    sigmoid = 1 / (1 + np.exp(-predicted))\n\n    # Compute gradient\n    grad = actual * sigmoid - (1 - sigmoid)\n\n    # Compute Hessian\n    hess = sigmoid * (1 - sigmoid)\n\n    # Round all results to 6 decimal places\n    sigmoid = np.round(sigmoid, 6)\n    grad = np.round(grad, 6)\n    hess = np.round(hess, 6)\n\n    # Convert results back to Python lists\n    sigmoid = sigmoid.tolist()\n    grad = grad.tolist()\n    hess = hess.tolist()\n\n    return grad, hess, sigmoid\n```\n\nThis function first converts the inputs to numpy arrays for vectorized computation. It then computes the sigmoid, gradient, and Hessian for each observation. The results are rounded to 6 decimal places and converted back to Python lists before being returned.\n"}
{"task_id": 218, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    def get_score(hand):\n        total = sum(hand)\n        if total + 10 <= 21 and 1 in hand:\n            total += 10\n        return total if total <= 21 else -1\n\n    player_score = get_score(player)\n    dealer_score = get_score(dealer)\n\n    if player_score == -1:\n        return -1\n    elif dealer_score == -1:\n        return 1\n    elif player_score > dealer_score:\n        return 1 if (len(player) == 2 and player_score == 21) else 1\n    elif player_score < dealer_score:\n        return -1\n    else:\n        return 0\n```\n\nThis script first defines a helper function `get_score` that calculates the score of a hand. It sums the cards in the hand and if the hand contains an Ace and the sum is less than or equal to 11, it adds 10 to the total. If the total is greater than 21, it returns -1 to represent a bust.\n\nThe main function `blackjack_outcome` calculates the scores of the player's and dealer's hands and checks the conditions for each possible outcome. If the player busts, the function returns -1. If the dealer busts, the function returns 1. If neither player nor dealer busts, the function compares the scores and returns 1 if the player's score is higher, -1 if the dealer's score is higher, and 0 if the scores are equal. If the player has a natural blackjack (a two-card hand with a score of 21), the function returns 1.5 instead of 1.\n"}
{"task_id": 221, "completion_id": 0, "completion": "Here is a Python script that implements the MSLE metric:\n\n```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper that returns element-wise squared log errors.\"\"\"\n    return (np.log(1 + actual) - np.log(1 + predicted)) ** 2\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    # Input validation\n    if len(actual) != len(predicted):\n        return -1\n    if any(x < 0 for x in actual) or any(x < 0 for x in predicted):\n        return -1\n\n    # Calculate squared log errors and return their mean\n    squared_log_errors = squared_log_error(np.array(actual), np.array(predicted))\n    return round(np.mean(squared_log_errors), 4)\n```\n\nThis script first checks if the inputs are valid. If they are not, it returns -1. If they are valid, it calculates the squared log errors and returns their mean, rounded to 4 decimal places.\n"}
{"task_id": 222, "completion_id": 0, "completion": "Here is a Python script that implements the sigmoid function as per the requirements:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z = np.array(z)\n    mask = (z >= 0)\n    neg_mask = (z < 0)\n\n    z_pos = np.zeros(z.shape)\n    z_pos[mask] = z[mask]\n    z_neg = np.zeros(z.shape)\n    z_neg[neg_mask] = z[neg_mask]\n\n    exp_z_pos = np.exp(-z_pos)\n    exp_z_neg = np.exp(z_neg)\n\n    sigmoid_pos = 1 / (1 + exp_z_pos)\n    sigmoid_neg = exp_z_neg / (1 + exp_z_neg)\n\n    sigmoid = np.zeros(z.shape)\n    sigmoid[mask] = sigmoid_pos[mask]\n    sigmoid[neg_mask] = sigmoid_neg[neg_mask]\n\n    if np.isscalar(z):\n        return round(float(sigmoid), 4)\n    else:\n        return np.around(sigmoid, 4).tolist()\n```\n\nThis script first converts the input to a NumPy array. It then creates masks for positive and negative values. It computes the sigmoid function for positive and negative values separately to avoid overflow for large positive values. Finally, it combines the results and rounds the values to 4 decimal places. If the input is a scalar, it returns a float, otherwise it returns a Python list.\n"}
{"task_id": 224, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, (list, np.ndarray)):\n        return [leaky_relu(zi, a) for zi in z]\n    else:\n        return max(z, a*z)\n\n# Test the function\nz = np.array([[1, -2, 3], [-4, 5, -6]])\nprint(leaky_relu(z))\n```\n\nThis script defines a function `leaky_relu` that applies the Leaky ReLU activation to every element in an input tensor. If the input is a list or a numpy array, it applies the function recursively to each element. If the input is a scalar, it applies the Leaky ReLU activation to the scalar. The function returns a list with the same nested structure as the input.\n\nThe test at the end of the script applies the function to a 2x3 numpy array and prints the result.\n"}
{"task_id": 226, "completion_id": 0, "completion": "Here is a Python script that implements the AdaBoost algorithm with decision stumps:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    n_samples, n_features = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    clfs = []\n\n    for _ in range(n_clf):\n        best_clf, best_error, best_accuracy = None, float('inf'), None\n\n        for feature_index in range(n_features):\n            feature_values = X_train[:, feature_index]\n            thresholds = np.unique(feature_values)\n\n            for threshold in thresholds:\n                polarity = 1\n                predictions = np.ones(n_samples)\n                predictions[feature_values < threshold] = -1\n\n                error = np.sum(weights[predictions != y_train])\n\n                if error > 0.5:\n                    error = 1 - error\n                    polarity = -1\n\n                if error < best_error:\n                    best_clf = (feature_index, threshold, polarity)\n                    best_error = error\n                    best_accuracy = predictions\n\n        alpha = 0.5 * np.log((1 - best_error) / (best_error + 1e-10))\n        weights *= np.exp(-alpha * y_train * best_accuracy)\n        weights /= np.sum(weights)\n\n        clfs.append((best_clf, alpha))\n\n    predictions = np.zeros(X_test.shape[0])\n    for clf, alpha in clfs:\n        feature_index, threshold, polarity = clf\n        predictions += alpha * (2 * ((polarity * X_test[:, feature_index]) > (polarity * threshold)) - 1)\n\n    return [1 if prediction > 0 else -1 for prediction in predictions]\n```\n\nThis script first initializes the weights of the samples to be equal. Then, for each weak learner (decision stump), it iterates over all features and thresholds to find the one that minimizes the weighted classification error. The learner weight is then computed and the sample weights are updated. Finally, the predictions for the test data are computed by summing the weighted predictions of all weak learners.\n"}
{"task_id": 241, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n\n    d0, d1 = shape[0], np.prod(shape[1:])\n    A = np.random.normal(size=(d0, d1))\n    U, _, Vt = np.linalg.svd(A, full_matrices=False)\n\n    Q = U if U.shape == A.shape else Vt\n    result = Q.reshape(shape) * scale\n\n    return result.tolist()\n```\n\nThis script first checks if the input shape has at least two dimensions. If not, it returns -1. Then it generates a random matrix A with the specified shape, computes its singular value decomposition, and chooses the factor that has the same size as A. The chosen factor is reshaped to the desired shape and scaled by the given factor. The resulting matrix is returned as a list.\n\nPlease note that the orthogonality condition is not explicitly checked in this script. However, it is assumed that the SVD of a random matrix will yield an orthogonal matrix, which is what this script is based on.\n"}
{"task_id": 243, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert state to numpy array\n    state = np.array(state)\n\n    # Calculate z1\n    z1 = np.maximum(0, np.sum(state))\n\n    # Calculate z2, z3\n    z2, z3 = 4 * z1, 16 * z1\n\n    # Calculate logits\n    logits = 4 * z3\n\n    # Calculate action probabilities\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n\n    # Calculate state value\n    state_value = 4 * z3\n\n    # Round action probabilities and state value to 4 decimal places\n    action_probs = [round(prob, 4) for prob in action_probs]\n    state_value = round(state_value, 4)\n\n    return action_probs, state_value\n```\n\nThis script first converts the input state to a numpy array for easier computation. It then calculates the intermediate values z1, z2, and z3 using the given formulas. The logits are calculated as 4 times z3. The action probabilities are calculated as the softmax of the logits. The state value is calculated as 4 times z3. Finally, the action probabilities and state value are rounded to 4 decimal places and returned.\n"}
{"task_id": 249, "completion_id": 0, "completion": "Here is a Python script that implements the `actor_critic_forward` function as described:\n\n```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state and parameters to numpy arrays\n    state = np.array(state)\n    W1, b1, W2, b2, W3, b3, Wa, ba, Wc, bc = [np.array(params[key]) for key in ['W1', 'b1', 'W2', 'b2', 'W3', 'b3', 'Wa', 'ba', 'Wc', 'bc']]\n\n    # Perform three affine transformations followed by ReLU on the shared part\n    hidden = np.maximum(0, np.dot(state, W1) + b1)\n    hidden = np.maximum(0, np.dot(hidden, W2) + b2)\n    hidden = np.maximum(0, np.dot(hidden, W3) + b3)\n\n    # Feed the final hidden vector into the actor head and convert the resulting raw scores into a probability distribution with the soft-max function\n    logits = np.dot(hidden, Wa) + ba\n    probabilities = np.exp(logits) / np.sum(np.exp(logits))\n\n    # Feed the same hidden vector into the critic head to obtain the scalar state value\n    value = np.dot(hidden, Wc) + bc\n\n    # Round every probability and the state value to 4 decimal places before returning\n    probabilities = [round(prob, 4) for prob in probabilities]\n    value = round(float(value), 4)\n\n    return probabilities, value\n```\n\nThis script first converts the state and parameters to NumPy arrays for easier manipulation. It then performs the three affine transformations and ReLU operations on the shared part of the network. The final hidden vector is then fed into the actor head to obtain the raw scores, which are converted into a probability distribution using the soft-max function. The same hidden vector is then fed into the critic head to obtain the scalar state value. Finally, the probabilities and the state value are rounded to 4 decimal places before being returned.\n"}
{"task_id": 253, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l1_penalty = l1_ratio * np.linalg.norm(w, 1)\n    l2_penalty = (1 - l1_ratio) * 0.5 * np.linalg.norm(w) ** 2\n    penalty = alpha * (l1_penalty + l2_penalty)\n\n    if gradient:\n        gradient = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return np.round(gradient, 4).tolist()\n    else:\n        return round(penalty, 4)\n```\n\nThis function first computes the L1 and L2 penalties, then combines them with the overall regularisation strength to get the penalty value. If the `gradient` flag is set to `True`, it computes the gradient of the penalty with respect to the weight vector and returns it as a list.\n\nThe function uses NumPy for efficient numerical computations and list comprehension for rounding the output to 4 decimal places.\n"}
{"task_id": 256, "completion_id": 0, "completion": "Here is a Python script that implements the `grad_check_RNN` function as described:\n\n```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float = 1e-7):\n    if param_name in [\"X\", \"y\"]:\n        return None\n\n    if param_name in [\"Ba\", \"Bx\"]:\n        param_name = param_name.lower()\n\n    # Get the parameter from the model\n    param = model.parameters[param_name]\n\n    # Initialize the gradient array\n    grads = np.zeros_like(param, dtype=np.float64)\n\n    # Iterate over every element of the parameter\n    for idx, _ in np.ndenumerate(param):\n        # Perturb the parameter by +\u03b5 and -\u03b5\n        param[idx] += epsilon\n        X_plus = deepcopy(X)\n        pred_plus = [model.forward(X_plus[:, :, t]) for t in range(n_t)]\n        loss_plus = loss_func(pred_plus)\n\n        param[idx] -= 2 * epsilon\n        X_minus = deepcopy(X)\n        pred_minus = [model.forward(X_minus[:, :, t]) for t in range(n_t)]\n        loss_minus = loss_func(pred_minus)\n\n        # Approximate the partial derivative\n        grads[idx] = (loss_plus - loss_minus) / (2 * epsilon)\n\n        # Reset the parameter\n        param[idx] += epsilon\n\n        # Flush the gradients\n        model.flush_gradients()\n\n    return grads.T\n```\n\nThis function first checks if the parameter is trainable (i.e., not \"X\" or \"y\"). If it is, it then checks if the parameter is \"Ba\" or \"Bx\" and converts it to the lower-case version. It then gets the parameter from the model and initializes the gradient array. It then iterates over every element of the parameter, perturbing the parameter by +\u03b5 and -\u03b5, running the forward loop `n_t` times for each perturbation, collecting the predictions and evaluating the loss, and approximating the partial derivative. Finally, it resets the parameter and flushes the gradients.\n"}
{"task_id": 257, "completion_id": 0, "completion": "Here is a Python script that implements the AdaBoost algorithm with decision stumps.\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    m, n = X_train.shape\n    w = np.ones(m) / m\n    clfs = []\n\n    for _ in range(n_clf):\n        best_clf, best_error, best_predict = None, float('inf'), None\n\n        for feature in range(n):\n            for threshold in np.sort(X_train[:, feature]):\n                predict = np.ones(m)\n                predict[X_train[:, feature] < threshold] = -1\n\n                error = np.sum(w[predict != y_train])\n\n                if error > 0.5:\n                    error = 1 - error\n                    predict = -predict\n\n                if error < best_error:\n                    best_clf = (feature, threshold)\n                    best_error = error\n                    best_predict = predict.copy()\n\n        alpha = 0.5 * np.log((1 - best_error) / best_error)\n        clfs.append((best_clf, alpha))\n\n        w *= np.exp(-alpha * y_train * best_predict)\n        w /= np.sum(w)\n\n    y_pred = np.zeros(X_test.shape[0])\n    for clf, alpha in clfs:\n        feature, threshold = clf\n        predict = np.ones(X_test.shape[0])\n        predict[X_test[:, feature] < threshold] = -1\n        y_pred += alpha * predict\n\n    return [1 if p > 0 else -1 for p in y_pred]\n```\n\nThis script first initializes the weights of all training examples to be equal. Then, for each weak classifier, it iterates over all features and thresholds to find the best decision stump that minimizes the weighted classification error. The weight of the stump is then computed and updated. Finally, the script aggregates all stump votes for each test sample and outputs the predicted labels.\n"}
{"task_id": 261, "completion_id": 0, "completion": "Here is the Python code that implements the Glorot/Xavier normal weight-initialisation function:\n\n```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    fan_in, fan_out = shape[:2]\n    receptive_field_size = 1\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n    fan_in *= receptive_field_size\n    fan_out *= receptive_field_size\n    stddev = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=stddev, size=shape)\n```\n\nThis function first calculates the fan_in and fan_out values based on the shape of the tensor. If the shape has more than two dimensions, it also calculates the receptive field size. Then it calculates the standard deviation using the formula \u221a[2/(fan_in+fan_out)]. Finally, it generates a NumPy array of the requested shape with elements drawn from a normal distribution with mean 0 and the calculated standard deviation.\n"}
{"task_id": 266, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    adj_list = [[] for _ in V]\n    for u, v in E:\n        if u in V and v in V:\n            u_index = V.index(u)\n            v_index = V.index(v)\n            if v not in adj_list[u_index]:\n                adj_list[u_index].append(v)\n            if u not in adj_list[v_index]:\n                adj_list[v_index].append(u)\n    return adj_list\n```\n\nThis script first initializes an empty adjacency list for each vertex in `V`. Then, for each edge in `E`, it finds the indices of the vertices in `V` and adds the other vertex to the adjacency list of the first vertex, if it's not already there. It does the same for the other vertex.\n\nThe time complexity of this script is O(|V|*|E|) because for each vertex, it checks all edges. The space complexity is O(|V|*|E|) because in the worst case, every vertex could be connected to every other vertex, resulting in a complete graph.\n"}
{"task_id": 267, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_feature, best_threshold, best_polarity, best_error = None, None, None, None\n\n    for feature_i in range(n_features):\n        feature_values = X[:, feature_i]\n        unique_values = np.unique(feature_values)\n\n        for threshold in unique_values:\n            for polarity in [-1, 1]:\n                predictions = polarity * ((feature_values < threshold) * 2 - 1)\n                errors = (predictions != y) * sample_weights\n                error = np.sum(errors)\n\n                if best_error is None or error < best_error:\n                    best_feature = feature_i\n                    best_threshold = threshold\n                    best_polarity = polarity\n                    best_error = error\n\n    return {\n        \"feature_index\": best_feature,\n        \"threshold\": round(best_threshold, 4),\n        \"polarity\": best_polarity,\n        \"weighted_error\": round(best_error, 4)\n    }\n```\n\nThis script first initializes the best feature, threshold, polarity, and error to None. It then iterates over all features, all unique feature values, and both polarities. For each combination, it calculates the predictions, the errors, and the total error. If the total error is smaller than the current best error, it updates the best feature, threshold, polarity, and error. Finally, it returns a dictionary with the best feature, threshold, polarity, and error.\n"}
{"task_id": 273, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport math\nimport numpy as np\nfrom collections import Counter\n\ndef entropy(labels):\n    \"\"\"Calculate the entropy of a list of labels.\"\"\"\n    n = len(labels)\n    counts = Counter(labels)\n    return -sum(count / n * math.log2(count / n) for count in counts.values())\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\"\"\"\n    # Convert to numpy arrays for easier manipulation\n    feature = np.array(feature)\n    target = np.array(target)\n\n    # Sort the feature and target arrays together\n    sorted_indices = np.argsort(feature)\n    feature = feature[sorted_indices]\n    target = target[sorted_indices]\n\n    # Calculate the parent entropy\n    parent_entropy = entropy(target)\n\n    # Initialize variables to keep track of the best split\n    best_threshold = None\n    best_information_gain = 0.0\n\n    # Iterate over all possible thresholds\n    for i in range(1, len(feature)):\n        if feature[i] != feature[i - 1]:  # Only consider distinct values\n            # Split the data at the current threshold\n            left_labels = target[:i]\n            right_labels = target[i:]\n\n            # Calculate the information gain for the current split\n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n            information_gain = parent_entropy - (len(left_labels) / len(target)) * left_entropy - (len(right_labels) / len(target)) * right_entropy\n\n            # Update the best split if the current split is better\n            if information_gain > best_information_gain:\n                best_threshold = feature[i]\n                best_information_gain = information_gain\n\n    # If no useful split was found, return (None, 0.0)\n    if best_threshold is None:\n        return None, 0.0\n\n    # Round the threshold and information gain to 4 decimal places\n    best_threshold = round(best_threshold, 4)\n    best_information_gain = round(best_information_gain, 4)\n\n    return best_threshold, best_information_gain\n```\n\nThis script first sorts the feature and target arrays together. It then calculates the parent entropy. It then iterates over all possible thresholds, splitting the data at each threshold and calculating the information gain for the current split. If the current split is better than the best split so far, it updates the best split. If no useful split was found, it returns (None, 0.0). Finally, it rounds the threshold and information gain to 4 decimal places and returns them.\n"}
{"task_id": 286, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    if name in globals() and callable(globals()[name]):\n        return globals()[name]\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n```\n\nThis script first defines three initializer functions: `zeros_init`, `ones_init`, and `random_uniform_init`. Then, it defines the `get_initializer` function that retrieves the initializer function based on the name provided. If the name does not correspond to a valid initializer, it raises a `ValueError`.\n"}
{"task_id": 287, "completion_id": 0, "completion": "Here is a Python script that implements the 2-D average pooling forward and backward pass:\n\n```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n\n    # Compute the output shape\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n\n    # Initialize the output and gradient arrays\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    grad_input = np.zeros_like(X)\n\n    # Perform the forward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_h):\n                for w in range(out_w):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n\n    # Perform the backward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_h):\n                for w in range(out_w):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, h, w] / (p_h * p_w)\n\n    # Round and convert to Python lists\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n\n    return pooled_output, grad_input\n```\n\nThis script first computes the output shape of the pooling operation and initializes the output and gradient arrays. It then performs the forward pass by iterating over the input array and computing the average of each pooling window. The backward pass is performed by distributing the gradient of the loss with respect to each pooled value equally to all elements that took part in each average. The output and gradient arrays are then rounded to the nearest 4-th decimal and converted to Python lists using `tolist()`.\n"}
{"task_id": 290, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.isclose(tree_a.threshold, tree_b.threshold):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False\n```\n\nThis script defines the `Node` and `Leaf` classes, and the `compare_trees` function. The `compare_trees` function checks if the two trees are equivalent by recursively comparing the nodes and leaves of the trees. If the two trees are equivalent, it returns `True`; otherwise, it returns `False`.\n"}
{"task_id": 292, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert the input lists to numpy arrays\n    parent1 = np.array(parent1)\n    parent2 = np.array(parent2)\n\n    # Check if the shapes of the parent matrices are the same\n    if parent1.shape != parent2.shape:\n        return -1\n\n    # Create the children matrices\n    child1 = parent1.copy()\n    child2 = parent2.copy()\n\n    # Perform the crossover\n    child1[:, cutoff:] = parent2[:, cutoff:]\n    child2[:, cutoff:] = parent1[:, cutoff:]\n\n    # Convert the children matrices back to lists\n    child1 = child1.tolist()\n    child2 = child2.tolist()\n\n    return child1, child2\n```\n\nThis script first checks if the shapes of the parent matrices are the same. If they are not, it returns -1. If they are, it creates copies of the parent matrices and performs the crossover by swapping the columns after the cutoff index. Finally, it converts the children matrices back to lists and returns them as a tuple.\n"}
{"task_id": 294, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {}\n    for i, edges in enumerate(G['_G']):\n        label = list(G['_V2I'].keys())[list(G['_V2I'].values()).index(i)]\n        adj[label] = []\n        for edge in edges:\n            adj[label].append((edge[1], edge[2]))\n            if not G['is_directed']:\n                adj[edge[1]].append((label, edge[2]))\n        adj[label] = sorted(adj[label], key=lambda x: x[0])\n    return adj\n```\n\nThis script first initializes an empty dictionary `adj`. Then it iterates over the adjacency lists in `G['_G']`. For each adjacency list, it finds the corresponding vertex label using the `_V2I` dictionary. It then adds an empty list to `adj` for this label.\n\nNext, it iterates over the edges in the adjacency list. For each edge, it adds a tuple `(target_label, weight)` to the list of `adj[label]`. If the graph is undirected, it also adds a tuple `(label, weight)` to the list of `adj[target_label]`.\n\nFinally, it sorts the list of `adj[label]` by the neighbour label and returns `adj`.\n"}
{"task_id": 296, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert the input to a NumPy array\n    x = np.array(x)\n\n    # Check if all elements are 0 or 1\n    return np.array_equal(x, x.astype(bool))\n```\n\nThis function works by converting the input to a NumPy array and then comparing it to a boolean version of the array. If the boolean version of the array only contains `True` and `False` values (which correspond to `1` and `0`, respectively), then the original array is binary.\n\nThe `np.array_equal` function is used to compare the two arrays. This function returns `True` if the two arrays are element-wise equal, and `False` otherwise.\n\nThis function should work for integer, float, or boolean arrays of any shape.\n"}
{"task_id": 298, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # Preprocess the corpus\n    corpus = [[\"<bol>\"]*(N-1) + sentence.split() + [\"<eol>\"]*(N-1) for sentence in corpus]\n    query = [\"<bol>\"]*(N-1) + query.split() + [\"<eol>\"]*(N-1)\n\n    # Count N-grams and (N-1)-gram prefixes\n    ngram_counts = defaultdict(int)\n    prefix_counts = defaultdict(int)\n    for sentence in corpus:\n        for i in range(len(sentence) - N + 1):\n            ngram = tuple(sentence[i:i+N])\n            prefix = tuple(sentence[i:i+N-1])\n            ngram_counts[ngram] += 1\n            prefix_counts[prefix] += 1\n\n    # Compute the MLE conditional probability\n    log_prob = 0.0\n    for i in range(len(query) - N + 1):\n        ngram = tuple(query[i:i+N])\n        prefix = tuple(query[i:i+N-1])\n        if prefix_counts[prefix] == 0 or ngram_counts[ngram] == 0:\n            return float('-inf')\n        prob = ngram_counts[ngram] / prefix_counts[prefix]\n        log_prob += math.log(prob)\n\n    return round(log_prob, 4)\n```\n\nThis script first preprocesses the corpus and query by splitting them into tokens and padding them with special tokens. It then counts N-grams and (N-1)-gram prefixes in the corpus. For each N-gram in the query, it computes the MLE conditional probability and adds the natural logarithm of this probability to the total log-probability. If any necessary N-gram is unseen in the corpus, the function returns float('-inf'). Finally, the function returns the total log-probability, rounded to 4 decimal places.\n"}
{"task_id": 302, "completion_id": 0, "completion": "Here is a Python script that implements the Spectral Clustering algorithm from scratch:\n\n```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n, d = X.shape\n\n    # Step 1: Build a weighted adjacency matrix W\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = np.linalg.norm(X[i] - X[j])\n            W[i, j] = 1 / (1 + dist)\n            W[j, i] = W[i, j]\n\n    # Step 2: Compute the (unnormalised) graph Laplacian L\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n\n    # Step 3: Obtain the first k eigenvectors of L\n    _, E = np.linalg.eigh(L)\n    E = E[:, :k]\n\n    # Step 4: Run k-means on the rows of E\n    centroids = E[:k]\n    labels = np.zeros(n, dtype=int)\n    for _ in range(100):\n        prev_labels = labels.copy()\n        for i in range(k, n):\n            dists = np.linalg.norm(E[i] - centroids, axis=1)\n            labels[i] = np.argmin(dists)\n        for j in range(k):\n            if np.any(labels == j):\n                centroids[j] = np.mean(E[labels == j], axis=0)\n            else:\n                centroids[j] = E[np.random.randint(n)]\n        if np.all(labels == prev_labels):\n            break\n\n    return labels.tolist()\n```\n\nThis script first builds the weighted adjacency matrix W, then computes the graph Laplacian L. It then obtains the first k eigenvectors of L and uses these as the projection matrix E. Finally, it runs k-means on the rows of E, returning the resulting cluster labels as a list.\n"}
{"task_id": 303, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n\n    return f\"\"\"------------------------- DEBUG -------------------------\nMine (prev) [{prev_label}]:\n{prev_mine}\n\nTheirs (prev) [{prev_label}]:\n{golds[prev_label]}\n\nMine [{curr_label}]:\n{curr_mine}\n\nTheirs [{curr_label}]:\n{golds[curr_label]}{warn_str}\n----------------------- END DEBUG -----------------------\"\"\"\n```\n\nThis function uses Python's f-string formatting to create the desired output string. It first calculates the index of the previous element in `params`, then unpacks the `mine` and `label` values for the previous and current elements. Finally, it constructs and returns the desired string using these values.\n"}
{"task_id": 304, "completion_id": 0, "completion": "Here is a Python script that implements the function `bayesian_posterior_mean` as described in the task.\n\n```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif np.isscalar(V):\n        V *= np.eye(X.shape[1])\n    elif len(V) == X.shape[1]:\n        V = np.diag(V)\n    else:\n        V = np.asarray(V)\n\n    if np.isscalar(mu):\n        mu = np.full(X.shape[1], mu)\n    else:\n        mu = np.asarray(mu)\n\n    V_inv = np.linalg.inv(V)\n    Sigma_b = np.linalg.inv(V_inv + X.T @ X)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n\n    return np.round(mu_b, 4).tolist()\n```\n\nThis script first checks if an intercept column should be added to the design matrix `X`. Then it checks the type of the prior scale `V` and converts it to the appropriate form if necessary. The prior mean `mu` is also broadcast to the correct length if it is a scalar. The posterior mean of the coefficients is then computed using the closed-form formula and rounded to 4 decimal places.\n"}
{"task_id": 308, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n\n    # Convert limits expressed in Hertz to the Mel scale and generate n_filters+2 equally\u2013spaced values on the Mel axis.\n    mel_min = 2595 * np.log10(1 + min_freq/700)\n    mel_max = 2595 * np.log10(1 + max_freq/700)\n    mel_values = np.linspace(mel_min, mel_max, n_filters + 2)\n\n    # Convert those Mel values back to Hertz \u2013 these are the (n_filters+2) corner frequencies of the triangular filters.\n    freq_values = 700 * (10**(mel_values/2595) - 1)\n\n    # For every DFT bin k (whose centre frequency is k*fs/N) and every Mel filter i compute the left\u2010hand and right\u2010hand slopes of the triangle and keep the *positive* minimum of both \u2013 this is the weight for filter i and bin k.\n    filterbank = np.zeros((n_filters, N//2 + 1))\n    for i in range(n_filters):\n        for k in range(N//2 + 1):\n            f_k = k * fs / N\n            left_slope = (freq_values[i+1] - f_k) / (freq_values[i+1] - freq_values[i])\n            right_slope = (f_k - freq_values[i]) / (freq_values[i+2] - freq_values[i])\n            filterbank[i, k] = max(0, min(left_slope, right_slope))\n\n    # If normalize is true scale every filter by w_i \u2190 2/(f_(i+2) - f_i) w_i so that its area in Mel space equals 1.\n    if normalize:\n        filterbank = filterbank / np.sum(filterbank, axis=1, keepdims=True)\n\n    return filterbank.tolist()\n```\n\nThis script first converts the frequency limits from Hertz to Mel scale and generates `n_filters+2` equally spaced values on the Mel axis. It then converts these Mel values back to Hertz to get the corner frequencies of the triangular filters. For every DFT bin and every Mel filter, it computes the left-hand and right-hand slopes of the triangle and keeps the positive minimum of both. If `normalize` is true, it scales every filter so that its area in Mel space equals 1. Finally, it returns the complete filterbank as a plain Python list.\n"}
{"task_id": 312, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n    N = window_len - 1 if symmetric else window_len\n\n    n = np.arange(window_len)\n    window = a0 - a1*np.cos(2*np.pi*n/N) + a2*np.cos(4*np.pi*n/N) - a3*np.cos(6*np.pi*n/N)\n\n    return np.round(window, 4).tolist()\n```\n\nThis function first checks if the window length is less than or equal to 0, in which case it returns an empty list. If the window length is 1, it returns a list with a single element 1.0.\n\nThen it calculates the window coefficients for each sample in the window. If the `symmetric` parameter is `True`, it uses the symmetric form of the window, otherwise it uses the periodic form.\n\nFinally, it rounds the window coefficients to 4 decimal places and returns them as a list.\n"}
{"task_id": 313, "completion_id": 0, "completion": "Here is a Python script that implements the `expected_log_dirichlet` function as described in the task. It uses the digamma function and the recursion and asymptotic expansion provided in the task description.\n\n```python\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Compute the digamma function using a recursion and an asymptotic expansion.\n\n    Parameters\n    ----------\n    x : float\n        The argument of the digamma function.\n\n    Returns\n    -------\n    float\n        The value of the digamma function at x.\n    \"\"\"\n    # Use the recursion \u03c8(x) = \u03c8(x+1) \u2212 1/x to shift small x up to a moderate value.\n    while x < 6:\n        x += 1\n        x = x - 1 / x\n\n    # Apply the asymptotic expansion to obtain a good approximation for the remaining (now large) x.\n    return math.log(x) - 1 / (2 * x) - 1 / (12 * x**2) + 1 / (120 * x**4) - 1 / (252 * x**6)\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma_sum = np.sum(gamma[d,:])\n    return round(digamma(gamma[d,t]) - digamma(gamma_sum), 4)\n```\n\nThis script first defines a helper function `digamma` that computes the digamma function using a recursion and an asymptotic expansion. The `expected_log_dirichlet` function then uses this helper function to compute the expectation of the logarithm of the *t*-th component of the *d*-th Dirichlet-distributed vector, rounded to four decimal places.\n"}
{"task_id": 317, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_prediction, prev_label = params[prev_ix]\n    prev_gold = golds[prev_label]\n    curr_prediction, curr_label = params[ix]\n    curr_gold = golds[curr_label]\n\n    return f\"\"\"------------------------- DEBUG -------------------------\nMine (prev) [{prev_label}]:\n{prev_prediction}\n\nTheirs (prev) [{prev_label}]:\n{prev_gold}\n\nMine [{curr_label}]:\n{curr_prediction}\n\nTheirs [{curr_label}]:\n{curr_gold}{warn_str}\n----------------------- END DEBUG -----------------------\n\"\"\"\n```\n\nThis script defines a function `err_fmt` that takes four arguments: `params`, `golds`, `ix`, and `warn_str`. It first calculates the index of the previous item in `params`. It then retrieves the prediction, label, and gold for the previous and current items. Finally, it returns a formatted string that includes the predictions, labels, and golds for the previous and current items, as well as the optional warning string.\n"}
{"task_id": 318, "completion_id": 0, "completion": "Here is a Python script that implements the AdaBoost algorithm using decision stumps as weak learners.\n\n```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    n_samples, n_features = X_train.shape\n    w = np.full(n_samples, 1/n_samples)\n    alphas = []\n    hs = []\n\n    for _ in range(n_estimators):\n        best_feature, best_threshold, best_polarity, min_error = None, None, None, float('inf')\n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = polarity * np.sign(X_train[:, feature] - threshold)\n                    error = np.sum(w[predictions != y_train])\n                    if error < min_error:\n                        min_error = error\n                        best_feature, best_threshold, best_polarity = feature, threshold, polarity\n\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        alphas.append(alpha)\n        hs.append((best_feature, best_threshold, best_polarity))\n\n        predictions = alphas[-1] * hs[-1][2] * np.sign(X_train[:, hs[-1][0]] - hs[-1][1])\n        w = w * np.exp(-alpha * y_train * predictions)\n        w = w / np.sum(w)\n\n    final_predictions = np.zeros(X_test.shape[0])\n    for alpha, h in zip(alphas, hs):\n        final_predictions += alpha * h[2] * np.sign(X_test[:, h[0]] - h[1])\n    return [1 if p >= 0 else -1 for p in final_predictions]\n```\n\nThis script first initializes the weights of the samples to be equal. Then, for each boosting round, it finds the best decision stump (i.e., the one that minimizes the weighted classification error) and updates the weights of the samples. Finally, it makes the final predictions by summing the predictions of all the decision stumps, weighted by their corresponding alphas.\n\nPlease note that this script assumes that the input data is numerical and that the labels are either -1 or 1. If the labels are not in this format, you may need to preprocess them accordingly.\n"}
{"task_id": 329, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n\n    if positive_only:\n        k = np.arange(N // 2 + 1)\n    else:\n        k = np.arange(-N // 2, N // 2 + 1)\n\n    f_k = k * (fs / N)\n    return np.round(f_k, 4).tolist()\n```\n\nThis function first checks if `N` or `fs` is not strictly positive. If so, it returns an empty list.\n\nThen it calculates the bin indices `k` based on the `positive_only` flag. If `positive_only` is `True`, it generates indices from 0 to `N // 2`. If `positive_only` is `False`, it generates indices from `-N // 2` to `N // 2`.\n\nFinally, it calculates the center frequencies `f_k` for each bin and rounds them to 4 decimal places. The result is returned as a list.\n"}
{"task_id": 331, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n\n    oob_predictions = predictions[oob_mask.any(axis=1)]\n    oob_true = y_true[oob_mask.any(axis=1)]\n\n    oob_avg_predictions = oob_predictions.mean(axis=1)\n    oob_mse = np.mean((oob_avg_predictions - oob_true) ** 2)\n\n    return round(oob_mse, 4) if oob_predictions.size > 0 else -1\n```\n\nThis script first converts the input lists to numpy arrays for easier manipulation. It then selects the samples that have at least one OOB prediction and their corresponding true values. It computes the average prediction for each of these samples and computes the mean squared error between these averages and the true values. The result is rounded to 4 decimal places and returned. If no sample has an OOB prediction, the function returns -1.\n"}
{"task_id": 332, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Compute the support for every item\n    item_support = Counter()\n    for transaction in transactions:\n        item_support.update(set(transaction))\n\n    # Discard items with support smaller than min_support\n    frequent_items = {item for item, support in item_support.items() if support >= min_support}\n\n    # Create a global ordering of the remaining items\n    ordered_items = sorted(frequent_items, key=lambda item: (-item_support[item], item))\n\n    # Create the root node\n    root = {\"support\": 0, \"children\": {}}\n\n    # For every transaction\n    for transaction in transactions:\n        # Remove duplicates, keep only frequent items, and reorder them according to the global ordering\n        filtered_transaction = [item for item in ordered_items if item in transaction]\n\n        # Walk from the root and update/extend the path, increasing the support of every visited node by 1\n        node = root\n        for item in filtered_transaction:\n            if item not in node[\"children\"]:\n                node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n            node = node[\"children\"][item]\n            node[\"support\"] += 1\n\n    return root\n```\n\nThis script first computes the support for every item, then discards the items with support smaller than `min_support`. It creates a global ordering of the remaining items and initializes the root node of the FP-Tree. For every transaction, it removes duplicates, keeps only frequent items, and reorders them according to the global ordering. It then walks from the root and updates/extends the path, increasing the support of every visited node by 1.\n"}
{"task_id": 336, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert lists to numpy arrays\n    X = np.array(X)\n    Y = np.array(X) if Y is None else np.array(Y)\n\n    # Check if the number of columns in X and Y are the same\n    if X.shape[1] != Y.shape[1]:\n        return -1\n\n    # Compute the dot product of X and Y\n    dot_product = np.dot(X, Y.T)\n\n    # Add the constant c0\n    kernel_matrix = dot_product + c0\n\n    # Round the kernel matrix to 4 decimal places\n    kernel_matrix = np.round(kernel_matrix, 4)\n\n    return kernel_matrix.tolist()\n```\n\nThis script first converts the input lists to NumPy arrays. It then checks if the number of columns in X and Y are the same. If they are not, it returns -1. If they are, it computes the dot product of X and Y, adds the constant c0, and rounds the result to 4 decimal places. Finally, it converts the result back to a list of lists and returns it.\n"}
{"task_id": 340, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    # Update the first moment estimate\n    m = beta1 * m + (1 - beta1) * grad\n\n    # Update the second moment estimate\n    v = beta2 * v + (1 - beta2) * np.square(grad)\n\n    # Bias correction\n    m_hat = m / (1 - np.power(beta1, t))\n    v_hat = v / (1 - np.power(beta2, t))\n\n    # Update the parameter\n    param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n\n    return (param.tolist(), m.tolist(), v.tolist())\n```\n\nThis script implements the Adam optimizer update rule as described in the task. It first updates the first and second moment estimates, then applies bias correction to these estimates, and finally uses these corrected estimates to update the parameter. The updated parameter, first moment, and second moment estimates are returned as lists, rounded to 8 decimal places.\n"}
{"task_id": 343, "completion_id": 0, "completion": "Here is a Python script that implements the function `cross_entropy_update` as described:\n\n```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Convert rewards to numpy array\n    rewards = np.array(rewards)\n\n    # Get the number of samples to retain\n    N = len(rewards)\n    n_retain = int(retain_prcnt * N)\n\n    # Get the indices of the top n_retain samples\n    top_indices = np.argsort(rewards)[-n_retain:]\n\n    # Get the top n_retain samples\n    top_samples = theta_samples[top_indices]\n\n    # Compute the mean and variance of the top samples\n    mean = np.mean(top_samples, axis=0)\n    variance = np.var(top_samples, axis=0)\n\n    # Round the results to 4 decimal places\n    mean = [round(x, 4) for x in mean]\n    variance = [round(x, 4) for x in variance]\n\n    return mean, variance\n```\n\nThis function first converts the `rewards` list to a numpy array for easier manipulation. It then computes the number of samples to retain based on the `retain_prcnt` parameter. It then sorts the indices of the `rewards` array in descending order and selects the top `n_retain` indices. These indices are used to select the corresponding samples from `theta_samples`. The mean and variance of these top samples are then computed and rounded to four decimal places. The function finally returns these mean and variance as Python lists.\n"}
{"task_id": 353, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    # Count the occurrences of each label\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n\n    # If the input is empty, return 0.0\n    if total_labels <= 0:\n        return 0.0\n\n    # Calculate the entropy\n    entropy_val = -sum((count / total_labels) * math.log2(count / total_labels)\n                       for count in label_counts.values())\n\n    # Return the entropy rounded to five decimal places\n    return round(entropy_val, 5)\n```\n\nThis script first counts the occurrences of each label using the `Counter` class from the `collections` module. It then calculates the entropy using the formula provided in the task description. Finally, it rounds the entropy to five decimal places and returns it.\n"}
{"task_id": 354, "completion_id": 0, "completion": "Here is a Python script that implements the 2-D convolution using the im2col strategy:\n\n```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n\n    if isinstance(pad, str):\n        if pad == 'same':\n            pad_rows = (((in_rows - 1) * stride + dilation * (kernel_rows - 1) + 1 - in_rows) // 2)\n            pad_cols = (((in_cols - 1) * stride + dilation * (kernel_cols - 1) + 1 - in_cols) // 2)\n        else:\n            raise ValueError(\"Invalid padding specification\")\n    elif isinstance(pad, int):\n        pad_rows, pad_cols = pad, pad\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            pad_rows, pad_cols = pad\n        elif len(pad) == 4:\n            pad_rows, pad_cols = pad[0], pad[2]\n        else:\n            raise ValueError(\"Invalid padding specification\")\n    else:\n        raise ValueError(\"Invalid padding specification\")\n\n    out_rows = (in_rows + pad_rows * 2 - dilation * (kernel_rows - 1) - 1) // stride + 1\n    out_cols = (in_cols + pad_cols * 2 - dilation * (kernel_cols - 1) - 1) // stride + 1\n\n    X_pad = np.pad(X, ((0, 0), (pad_rows, pad_rows), (pad_cols, pad_cols), (0, 0)))\n\n    X_col = np.zeros((kernel_rows * kernel_cols * in_ch, out_rows * out_cols))\n    for y in range(out_rows):\n        for x in range(out_cols):\n            y_pad = y * stride\n            x_pad = x * stride\n            X_col[:, y * out_cols + x] = X_pad[:, y_pad:y_pad+kernel_rows*dilation:dilation, x_pad:x_pad+kernel_cols*dilation:dilation, :].ravel()\n\n    W_col = W.transpose(3, 2, 0, 1).reshape(out_ch, -1)\n\n    out = (W_col @ X_col).reshape(out_ch, out_rows, out_cols, n_ex).transpose(3, 1, 2, 0)\n\n    return out.tolist()\n```\n\nThis script first computes the output dimensions and padding amounts based on the input dimensions, stride, padding specification, and dilation factor. It then pads the input batch and reshapes it into a 2-D matrix where each column corresponds to a region of the input that is convolved with the kernels. The kernels are also reshaped into a 2-D matrix. The convolution is then performed by matrix multiplication of the kernel matrix and the input matrix. The result is reshaped back into the output shape and converted to a list.\n"}
{"task_id": 355, "completion_id": 0, "completion": "Here is a Python script that implements the PCA with deterministic sign fix as described:\n\n```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Standardize the data\n    data_centered = data - np.mean(data, axis=0)\n\n    # Compute the principal directions\n    if solver == \"svd\":\n        _, _, vh = np.linalg.svd(data_centered, full_matrices=False)\n        directions = vh.T\n    elif solver == \"eigen\":\n        cov = np.cov(data_centered, rowvar=False, ddof=1)\n        _, v = np.linalg.eigh(cov)\n        directions = v.T[::-1]\n    else:\n        raise ValueError(\"Invalid solver. Choose 'svd' or 'eigen'.\")\n\n    # Sort the directions in descending order of their importance\n    explained_variance = np.var(data_centered, axis=0, ddof=1)\n    idx = np.argsort(explained_variance)[::-1]\n    directions = directions[idx]\n    explained_variance = explained_variance[idx]\n\n    # Keep the first n_components of them\n    if n_components < directions.shape[0]:\n        directions = directions[:n_components]\n        explained_variance = explained_variance[:n_components]\n\n    # Make the sign of every kept direction deterministic\n    for i in range(directions.shape[0]):\n        if directions[i, 0] < 0:\n            directions[i] *= -1\n            data_centered[:, idx[i]] *= -1\n\n    # Project the centred data onto the retained directions\n    scores = np.dot(data_centered, directions.T)\n\n    # Return the projected data and the explained variance ratios\n    return (scores.round(4).tolist(), np.round(explained_variance / np.sum(explained_variance), 4).tolist())\n```\n\nThis script first standardizes the data by subtracting the feature-wise mean. It then computes the principal directions using either the SVD or the eigen-decomposition of the covariance matrix, depending on the chosen solver. The directions are sorted in descending order of their importance and the first `n_components` are kept. The sign of each kept direction is made deterministic by checking the first non-zero loading and flipping the direction and the corresponding column of the projected data if necessary. Finally, the centred data is projected onto the retained directions to obtain the scores, which are returned along with the explained variance ratios.\n"}
{"task_id": 356, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return leaf.value.index(max(leaf.value))\n    else:\n        return leaf.value\n```\n\nIn this script, the `Leaf` class is defined with an `__init__` method that takes a `value` argument. The `leaf_predict` function takes a `Leaf` object and a boolean `classifier` as input. If `classifier` is `True`, it returns the index of the maximum value in the `value` attribute of the `Leaf` object. If `classifier` is `False`, it returns the `value` attribute of the `Leaf` object.\n"}
{"task_id": 357, "completion_id": 0, "completion": "Here is a Python script that implements the K-Means clustering algorithm from scratch:\n\n```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Initialize centroids\n    centroids = data[:K].copy()\n\n    # Main loop\n    for _ in range(max_iters):\n        # Assign each sample to the closest centroid\n        clusters = np.argmin(np.linalg.norm(data[:, None] - centroids, axis=-1), axis=-1)\n\n        # Compute new centroids\n        new_centroids = np.array([data[clusters==k].mean(axis=0) for k in range(K)])\n\n        # Stop if centroids don't change\n        if np.allclose(centroids, new_centroids):\n            break\n\n        centroids = new_centroids\n\n    # Sort and round centroids\n    centroids = sorted(centroids.tolist())\n    centroids = [[round(x, 4) for x in centroid] for centroid in centroids]\n\n    return centroids\n```\n\nThis script first initializes the centroids with the first K samples in the data matrix. It then enters a loop where it assigns each sample to the closest centroid, recomputes the centroids as the mean of the samples currently assigned to it, and stops if none of the centroids changes any more. Finally, it sorts the centroids lexicographically and rounds each coordinate to four decimals before returning them as a plain Python list of lists.\n"}
{"task_id": 362, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert the data to a float numpy array\n    data = np.array(data, dtype=float)\n\n    # Compute the sum of every row\n    row_sums = data.sum(axis=1)\n\n    # If any row sums to 0, return -1\n    if np.any(row_sums == 0):\n        return -1\n\n    # Divide every element in a row by that row's sum\n    data = data / row_sums[:, np.newaxis]\n\n    # Round every entry of the resulting matrix to 4 decimal places\n    data = np.round(data, 4)\n\n    # Return the result as a native Python list using tolist()\n    return data.tolist()\n```\n\nThis function first converts the input data to a float numpy array. It then computes the sum of every row. If any row sum is 0, the function returns -1. Otherwise, it divides every element in a row by that row's sum. The resulting matrix is then rounded to 4 decimal places and returned as a native Python list using the `tolist()` method.\n"}
{"task_id": 363, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def is_composite_continuous(space):\n        if isinstance(space, Tuple) or isinstance(space, Dict):\n            return all(is_composite_continuous(sub_space) for sub_space in space.spaces.values() if isinstance(space, Dict) else space.spaces)\n        else:\n            return isinstance(space, Box)\n\n    cont_action = is_composite_continuous(env.action_space) if tuple_action else isinstance(env.action_space, Box)\n    cont_obs = is_composite_continuous(env.observation_space) if tuple_obs else isinstance(env.observation_space, Box)\n\n    return (cont_action, cont_obs)\n```\n\nThis script defines the `Space` classes and the `Env` class. It then defines the `is_continuous` function, which checks whether the action and observation spaces of the given environment are continuous according to the provided flags. The `is_composite_continuous` helper function is used to recursively check the continuousity of composite spaces.\n"}
{"task_id": 369, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n\n    for update in updates:\n        running_pred -= learning_rate * update\n\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        # Apply softmax to get class probabilities\n        class_probs = np.exp(running_pred) / np.exp(running_pred).sum(axis=-1, keepdims=True)\n        # Return the indices of the maximum class probabilities\n        return np.argmax(class_probs, axis=-1)\n```\n\nThis script first initializes a running prediction array with zeros. Then, for each tree update, it subtracts the scaled update from the running prediction. If the problem is regression, it returns the running prediction rounded to 4 decimal places. If the problem is classification, it applies the softmax function to the running prediction to get class probabilities, and then returns the indices of the maximum class probabilities.\n"}
{"task_id": 371, "completion_id": 0, "completion": "Here is a Python script that implements the 1-D cross-correlation with stride, padding and dilation:\n\n```python\nimport numpy as np\nimport math\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    # Get the dimensions of the input\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n\n    # Calculate the output length\n    output_length = math.ceil((signal_length + 2 * pad - dilation * (kernel_width - 1) - 1) / stride) + 1\n\n    # Initialize the output volume\n    Y = np.zeros((n_examples, output_length, out_channels))\n\n    # Add zero padding to the input\n    if isinstance(pad, int):\n        X = np.pad(X, ((0, 0), (pad, pad), (0, 0)))\n    elif isinstance(pad, tuple):\n        X = np.pad(X, ((0, 0), (pad[0], pad[1]), (0, 0)))\n    elif pad == \"same\":\n        total_pad = math.ceil(signal_length / stride) * stride - signal_length\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n        X = np.pad(X, ((0, 0), (pad_left, pad_right), (0, 0)))\n\n    # Perform the cross-correlation\n    for i in range(output_length):\n        for j in range(out_channels):\n            Y[:, i, j] = np.sum(X[:, i * stride:i * stride + kernel_width:dilation + 1, :] * W[::-1, :, j], axis=(1, 2))\n\n    return Y.tolist()\n```\n\nThis script first calculates the output length based on the input signal length, kernel width, stride, padding, and dilation. It then initializes the output volume and adds zero padding to the input. Finally, it performs the cross-correlation by sliding the kernel over the input and computing the dot product of the overlapping parts. The result is returned as a list.\n"}
{"task_id": 373, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n\n    _, counts = np.unique(y, return_counts=True)\n    p = counts / len(y)\n    gini = 1 - np.sum(np.square(p))\n\n    return round(gini, 4)\n```\n\nThis script first checks if the input sequence is empty. If it is, it returns 0.0. Otherwise, it computes the relative frequencies of the classes in the sequence and uses them to compute the Gini impurity. The Gini impurity is then rounded to 4 decimal places and returned.\n"}
{"task_id": 374, "completion_id": 0, "completion": "Here is a Python script that implements the linear regression with batch gradient descent:\n\n```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    # Check if the input data are inconsistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n\n    # Initialize the weights and bias\n    weights = np.zeros(X.shape[1])\n    bias = 0.0\n\n    # Perform the gradient descent updates\n    for _ in range(n_iterations):\n        # Compute the predicted values\n        y_pred = np.dot(X, weights) + bias\n\n        # Compute the gradients\n        dw = (2 / X.shape[0]) * np.dot(X.T, (y_pred - y))\n        db = (2 / X.shape[0]) * np.sum(y_pred - y)\n\n        # Update the weights and bias\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n\n    # Return the learned parameters rounded to 4 decimal places\n    return [round(val, 4) for val in weights], round(bias, 4)\n```\n\nThis script first checks if the input data are inconsistent. If they are, it returns -1. Otherwise, it initializes the weights and bias to zero, and then performs the gradient descent updates for the specified number of iterations. The gradients are computed using the formulae provided in the problem statement, and the weights and bias are updated using these gradients and the learning rate. Finally, the learned parameters are returned, rounded to 4 decimal places.\n"}
{"task_id": 376, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the list of lists to a numpy array\n    X = np.array(X)\n\n    # Check if the array is square\n    if X.shape[0] != X.shape[1]:\n        return False\n\n    # Check if the array is symmetric\n    return np.allclose(X, X.T, atol=1e-8)\n```\n\nThis script first converts the input list of lists to a numpy array. It then checks if the array is square. If it is not, the function returns `False`. If the array is square, the function checks if it is symmetric by comparing it to its transpose (`X.T`). The `np.allclose` function is used to compare the array and its transpose, allowing for a small rounding error (`atol=1e-8`). If the array is symmetric, the function returns `True`; otherwise, it returns `False`.\n"}
{"task_id": 377, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    This function calculates the negative gradient of the logistic loss for binary classification.\n    The function receives two one-dimensional arrays (or Python lists) y \u2013 binary class labels (0 or 1)\n    and f \u2013 current prediction scores (floats).\n    The function returns the list of negative gradients g rounded to four decimal places.\n    If the label array contains values other than 0 or 1, the function returns -1.\n    \"\"\"\n    # Check if all elements in y are either 0 or 1\n    if not all(i in [0, 1] for i in y):\n        return -1\n\n    # Convert y to y' using the rule y' = 2y - 1\n    y_prime = [2*i - 1 for i in y]\n\n    # Calculate the negative gradient for each sample\n    g = [y_prime[i] / (1 + np.exp(y_prime[i] * f[i])) for i in range(len(y))]\n\n    # Round each value in g to the nearest 4th decimal\n    g = [round(i, 4) for i in g]\n\n    return g\n```\n\nThis function first checks if all elements in the `y` list are either 0 or 1. If not, it returns -1. Then it converts the labels to `y'` using the rule `y' = 2y - 1`. After that, it calculates the negative gradient for each sample using the formula `g\u1d62 = y\u2032\u1d62 / (1 + exp(y\u2032\u1d62 f\u1d62))`. Finally, it rounds each value in `g` to the nearest 4th decimal and returns the list.\n"}
{"task_id": 380, "completion_id": 0, "completion": "Here is the Python code that implements the SELU activation and its derivatives:\n\n```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    ALPHA = 1.6732632423543772848170429916717\n    SCALE = 1.0507009873554804934193349852946\n\n    x = np.asarray(x)\n\n    if order == 0:\n        # SELU(x) = scale * ELU(x, alpha)\n        result = np.where(x > 0, x, np.exp(x) - 1) * ALPHA * SCALE\n    elif order == 1:\n        # \u2202SELU/\u2202x = scale * \u03b1 * ELU'(x, alpha)\n        result = np.where(x > 0, SCALE * ALPHA, SCALE * ALPHA * np.exp(x))\n    elif order == 2:\n        # \u2202\u00b2SELU/\u2202x\u00b2 = scale * \u03b1 * ELU''(x, alpha)\n        result = np.where(x > 0, 0, SCALE * ALPHA * np.exp(x))\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2\")\n\n    return np.round(result, 4).tolist()\n```\n\nThis function first converts the input `x` to a NumPy array. Then, depending on the value of `order`, it computes the SELU activation or its derivatives. The results are rounded to 4 decimal places and returned as a Python list.\n"}
{"task_id": 387, "completion_id": 0, "completion": "Here is a Python script that implements the task:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y), dtype=float)\n\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        x_sorted = x[sorted_indices]\n        residuals_sorted = residuals[sorted_indices]\n\n        split_points = (x_sorted[1:] + x_sorted[:-1]) / 2\n        residuals_left = np.cumsum(residuals_sorted[:-1]) / np.arange(1, len(x_sorted))\n        residuals_right = (np.sum(residuals_sorted) - np.cumsum(residuals_sorted)) / (len(x_sorted) - np.arange(1, len(x_sorted) + 1))\n        errors = np.square(residuals_left - residuals_right)\n\n        best_split_index = np.argmin(errors)\n        best_split = split_points[best_split_index]\n\n        y_pred += learning_rate * np.where(x <= best_split, residuals_left[best_split_index], residuals_right[best_split_index])\n\n    return np.round(y_pred, 4).tolist()\n```\n\nThis script first initializes the predictions to the mean of the target values. Then, for each boosting round, it computes the residuals, sorts the samples by their feature values, and evaluates every possible split. The split that minimizes the sum of squared errors is chosen. The predictions are then updated and the process is repeated for the specified number of boosting rounds. Finally, the predictions are rounded to 4 decimal places and converted to a Python list.\n"}
{"task_id": 394, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    w = w - (learning_rate * grad) / np.sqrt(Eg + 1e-8)\n\n    return np.round(w, 4).tolist(), np.round(Eg, 4).tolist()\n```\n\nThis function first checks if the running average `Eg` is `None`. If it is, it initializes it as a zero array of the same shape as the gradient. Then it updates the running average by applying the RMSprop update rule. Finally, it updates the parameters `w` and returns them rounded to 4 decimal places as regular Python lists.\n"}
{"task_id": 398, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        return np.round((np.where(x >= 0, 1, elu(x, alpha) + alpha)).tolist(), 4)\n    else:\n        return np.round((np.where(x >= 0, x, alpha * (np.exp(x) - 1))).tolist(), 4)\n```\n\nThis function first converts the input list to a NumPy array for easier computation. Then it checks the `derivative` flag. If it's `True`, it computes the gradient of ELU function for each element in the array and rounds the result to 4 decimal places. If it's `False`, it computes the ELU function for each element in the array and rounds the result to 4 decimal places. The result is then returned as a Python list.\n"}
{"task_id": 411, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    def get_stats(data):\n        tuple_data = any(isinstance(x, (list, tuple, np.ndarray)) for x in data)\n        multidim_data = any(isinstance(x, (list, tuple, np.ndarray)) and len(x) > 1 for x in data)\n        continuous_data = any(isinstance(x, (list, tuple, np.ndarray)) for x in data for y in x if isinstance(y, float) and y != int(y))\n        n_data_per_dim = [len(set(x)) if isinstance(x, (list, tuple, np.ndarray)) else 1 for x in data]\n        data_dim = len(data[0]) if isinstance(data[0], (list, tuple, np.ndarray)) else 1\n        data_ids = [sorted(list(set(x))) if isinstance(x, (list, tuple, np.ndarray)) else [x] for x in data]\n        return tuple_data, multidim_data, continuous_data, n_data_per_dim, data_dim, data_ids\n\n    tuple_actions, multidim_actions, continuous_actions, n_actions_per_dim, action_dim, action_ids = get_stats(actions)\n    tuple_observations, multidim_observations, continuous_observations, n_obs_per_dim, obs_dim, obs_ids = get_stats(observations)\n\n    return {\n        'tuple_actions': tuple_actions,\n        'tuple_observations': tuple_observations,\n        'multidim_actions': multidim_actions,\n        'multidim_observations': multidim_observations,\n        'continuous_actions': continuous_actions,\n        'continuous_observations': continuous_observations,\n        'n_actions_per_dim': n_actions_per_dim,\n        'action_dim': action_dim,\n        'n_obs_per_dim': n_obs_per_dim,\n        'obs_dim': obs_dim,\n        'action_ids': action_ids,\n        'obs_ids': obs_ids\n    }\n```\n\nThis script defines a helper function `get_stats` that computes the statistics for a given list of data. It then uses this function to compute the statistics for the actions and observations, and returns a dictionary with the computed statistics.\n"}
{"task_id": 413, "completion_id": 0, "completion": "Here is a Python script that implements a simplified Gradient Boosting Decision Tree (GBDT) regressor from scratch. The script uses NumPy for all computations and does not use any external libraries. The internal regression trees are binary-splitting, use mean-squared-error as the split criterion, and stop growing when max_depth is reached or no further reduction in error is possible.\n\n```python\nimport numpy as np\n\nclass Node:\n    def __init__(self, feature=None, threshold=None, left=None, right=None, value=None):\n        self.feature = feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\n\nclass GBDT:\n    def __init__(self, n_estimators=10, learning_rate=0.1, max_depth=3):\n        self.n_estimators = n_estimators\n        self.learning_rate = learning_rate\n        self.max_depth = max_depth\n        self.trees = []\n\n    def fit(self, X, y):\n        y_pred = np.full(np.shape(y), np.mean(y))\n        for _ in range(self.n_estimators):\n            gradient = y - y_pred\n            tree = self._build_tree(X, gradient)\n            y_pred += np.multiply(self.learning_rate, self._predict(X, tree))\n            self.trees.append(tree)\n\n    def _build_tree(self, X, gradient, depth=0):\n        n_samples, n_features = X.shape\n        best_idx, best_thr = None, None\n        min_error = np.inf\n        for f in range(n_features):\n            thresholds = np.unique(X[:, f])\n            for threshold in thresholds:\n                left_idx = X[:, f] < threshold\n                right_idx = X[:, f] >= threshold\n                left_grad = gradient[left_idx]\n                right_grad = gradient[right_idx]\n                error = np.sum(np.square(left_grad)) + np.sum(np.square(right_grad))\n                if error < min_error:\n                    min_error = error\n                    best_idx = f\n                    best_thr = threshold\n        if best_idx is None or min_error == 0 or depth == self.max_depth:\n            return Node(value=np.mean(gradient))\n        left_idx = X[:, best_idx] < best_thr\n        right_idx = X[:, best_idx] >= best_thr\n        left = self._build_tree(X[left_idx], gradient[left_idx], depth + 1)\n        right = self._build_tree(X[right_idx], gradient[right_idx], depth + 1)\n        return Node(best_idx, best_thr, left, right)\n\n    def _predict(self, X, tree):\n        if tree.value is not None:\n            return np.full(X.shape[0], tree.value)\n        if X[:, tree.feature] < tree.threshold:\n            return self._predict(X, tree.left)\n        else:\n            return self._predict(X, tree.right)\n\n    def predict(self, X):\n        y_pred = np.zeros(X.shape[0])\n        for tree in self.trees:\n            y_pred += np.multiply(self.learning_rate, self._predict(X, tree))\n        return y_pred.tolist()\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    gbdt = GBDT(n_estimators, learning_rate, max_depth)\n    gbdt.fit(X_train, y_train)\n    return [round(x, 4) for x in gbdt.predict(X_test)]\n```\n\nThis script defines a Node class to represent a node in the decision tree, and a GBDT class to represent the Gradient Boosting Decision Tree. The fit method trains the model, and the predict method makes predictions. The gbdt_regression function is the main function that takes the training data, test data, and hyperparameters as input and returns the predictions.\n"}
{"task_id": 416, "completion_id": 0, "completion": "Here is a Python script that implements the multivariate Gaussian PDF:\n\n```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    This function calculates the probability density function (PDF) of a multivariate Gaussian (Normal) distribution.\n\n    Parameters:\n    X (numpy array): A NumPy array of shape (n_samples, n_features) containing the data points for which the PDF values must be evaluated.\n    mean (numpy array): The mean vector of the distribution (length n_features).\n    cov (numpy array): The covariance matrix of shape (n_features, n_features) which must be positive-definite (invertible).\n\n    Returns:\n    list: A Python list whose i-th element is the PDF value for X[i] rounded to four decimal places.\n    \"\"\"\n    n_samples, n_features = X.shape\n    mean = np.array(mean)\n    cov = np.array(cov)\n\n    # Calculate the determinant of the covariance matrix\n    det_cov = np.linalg.det(cov)\n\n    # Calculate the inverse of the covariance matrix\n    inv_cov = np.linalg.inv(cov)\n\n    # Calculate the normalization factor\n    norm_factor = (2*math.pi)**(-n_features/2) * det_cov**(-0.5)\n\n    # Calculate the PDF values\n    pdf_values = []\n    for x in X:\n        x_minus_mean = x - mean\n        exponent = -0.5 * np.dot(np.dot(x_minus_mean, inv_cov), x_minus_mean.T)\n        pdf_value = norm_factor * math.exp(exponent)\n        pdf_values.append(round(pdf_value, 4))\n\n    return pdf_values\n```\n\nThis script first calculates the determinant and inverse of the covariance matrix, then calculates the normalization factor. It then iterates over each data point in X, calculates the PDF value for that point, rounds it to four decimal places, and appends it to the list of PDF values. The function finally returns this list of PDF values.\n"}
{"task_id": 419, "completion_id": 0, "completion": "Here is a Python script that implements the task:\n\n```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n        X_new = np.c_[np.ones(X_new.shape[0]), X_new]\n\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif np.isscalar(V):\n        V = np.eye(X.shape[1]) * V\n    elif V.ndim == 1:\n        V = np.diag(V)\n\n    if np.isscalar(mu):\n        mu = np.full(X.shape[1], mu)\n\n    V_inv = np.linalg.inv(V)\n    Sigma_post = np.linalg.inv(V_inv + X.T @ X)\n    mu_post = Sigma_post @ (V_inv @ mu + X.T @ y)\n\n    y_new = X_new @ mu_post\n\n    return [round(y, 4) for y in y_new]\n```\n\nThis script first checks if an intercept should be added to the design matrices. It then checks the type of `V` and `mu` and converts them to the appropriate format if necessary. It then computes the posterior mean and covariance matrix and uses these to compute the MAP predictive means for the new design matrix. The MAP predictive means are rounded to 4 decimal places and returned as a list.\n"}
{"task_id": 423, "completion_id": 0, "completion": "Here is the Python function that solves the task:\n\n```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Stub for the RMSLE metric.  Complete the body of the function.\"\"\"\n    # Check if both inputs have the same length\n    if len(actual) != len(predicted):\n        return -1\n\n    # Check if both inputs contain only non-negative numbers\n    for i in range(len(actual)):\n        if actual[i] < 0 or predicted[i] < 0:\n            return -1\n\n    # Compute the RMSLE\n    rmsle = np.sqrt(np.mean(np.square((np.log(np.array(predicted) + 1) - np.log(np.array(actual) + 1)))))\n\n    # Return the result rounded to four decimal places\n    return round(rmsle, 4)\n```\n\nThis function first checks if both input lists have the same length and if they contain only non-negative numbers. If not, it returns -1. Then it computes the RMSLE using the provided formula and returns the result rounded to four decimal places.\n"}
{"task_id": 428, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        if symmetric:\n            window = [0.5 - 0.5 * math.cos(2 * math.pi * n / (window_len - 1)) for n in range(window_len)]\n        else:\n            window = [0.5 - 0.5 * math.cos(2 * math.pi * n / (window_len + 1)) for n in range(window_len)]\n        return [round(x, 4) for x in window]\n```\n\nThis script first checks if the window length is less than or equal to 0. If it is, it returns an empty list. If the window length is 1, it returns a list with a single element, 1.0. Otherwise, it calculates the Hann window coefficients using the provided formula, rounds them to 4 decimal places, and returns them as a list.\n"}
{"task_id": 433, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        # 2-D convolutional kernel\n        receptive_field_size = shape[2] * shape[3]\n        fan_in  = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    else:\n        # Other tensors\n        fan_in, fan_out = shape[0], shape[1]\n\n    return float(fan_in), float(fan_out)\n```\n\nThis function first checks if the shape has exactly 4 dimensions. If it does, it assumes that the shape corresponds to a 2-D convolutional kernel and calculates the fan-in and fan-out according to the rules for convolutional kernels. If the shape has fewer than 4 dimensions, it simply takes the first two dimensions as the fan-in and fan-out. The function returns the fan-in and fan-out as floats.\n"}
{"task_id": 435, "completion_id": 0, "completion": "Here is a Python script that implements the task:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(y.mean(), 4)] * len(y)\n\n    y_hat = np.full(y.shape, y.mean())\n\n    for t in range(n_estimators):\n        residuals = y - y_hat\n        model = np.linalg.lstsq(X, residuals, rcond=None)[0]\n        y_hat += learning_rate * (X @ model)\n\n    return [round(y, 4) for y in y_hat.tolist()]\n```\n\nThis script first converts the input lists to NumPy arrays. It then checks for the special cases where the number of estimators is less than or equal to zero or the learning rate is zero. If either of these conditions is met, it returns a list of the mean of the target values.\n\nIf neither of these special cases apply, it initializes the prediction vector with the mean of the target values. It then enters a loop that repeats for the specified number of estimators. In each iteration, it computes the residuals, fits a linear model to predict the residuals, and updates the overall prediction.\n\nFinally, it rounds each predicted value to the nearest 4th decimal and returns the list of rounded values.\n"}
{"task_id": 437, "completion_id": 0, "completion": "Here is a Python script that implements the logistic sigmoid function and its derivatives:\n\n```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    # Convert x to numpy array if it's not already\n    x = np.array(x)\n\n    # Compute sigmoid function\n    s = 1 / (1 + np.exp(-x))\n\n    # Compute derivatives\n    if order == 0:\n        result = s\n    elif order == 1:\n        result = s * (1 - s)\n    elif order == 2:\n        result = s * (1 - s) * (1 - 2 * s)\n    else:\n        return -1\n\n    # Round to 4 decimal places and return\n    result = np.round(result, 4)\n    if result.shape == (1,):\n        return float(result)\n    else:\n        return result.tolist()\n```\n\nThis function first converts the input `x` to a numpy array. It then computes the sigmoid function and its derivatives based on the `order` parameter. The result is rounded to 4 decimal places and returned as a float if the input was a scalar, or as a list if the input was a list or numpy array. If the `order` is not 0, 1, or 2, the function returns -1.\n"}
{"task_id": 438, "completion_id": 0, "completion": "Here is a Python script that implements the `to_categorical` function as described:\n\n```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = max(y) + 1\n    elif num_classes < max(y) + 1:\n        return -1\n    one_hot = np.zeros((len(y), num_classes))\n    one_hot[np.arange(len(y)), y] = 1\n    return one_hot.tolist()\n```\n\nThis script first converts the input list or NumPy array to a NumPy array for easier manipulation. It then checks if `num_classes` is provided. If it is not, it is set to `max(y) + 1`. If `num_classes` is provided but is smaller than `max(y) + 1`, the function returns `-1`. Otherwise, it creates a 2-D NumPy array of zeros with dimensions `(len(y), num_classes)`. It then sets the appropriate elements to 1 based on the class indices in `y`. Finally, it converts the NumPy array to a list of lists and returns it.\n"}
{"task_id": 439, "completion_id": 0, "completion": "Here is a Python script that implements the Apriori algorithm:\n\n```python\nimport itertools\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    # Count the occurrence of each item\n    item_counts = {}\n    for transaction in transactions:\n        for item in transaction:\n            if item in item_counts:\n                item_counts[item] += 1\n            else:\n                item_counts[item] = 1\n\n    # Filter out items that do not meet the minimum support threshold\n    min_count = min_sup * len(transactions)\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_count}\n\n    # Generate frequent itemsets of size 1\n    frequent_itemsets = list(frequent_items.keys())\n\n    k = 2\n    while True:\n        # Generate candidate itemsets of size k\n        candidate_itemsets = list(itertools.combinations(frequent_items, k))\n\n        # Count the occurrence of each candidate itemset\n        candidate_counts = {}\n        for transaction in transactions:\n            for candidate in candidate_itemsets:\n                if all(item in transaction for item in candidate):\n                    if candidate in candidate_counts:\n                        candidate_counts[candidate] += 1\n                    else:\n                        candidate_counts[candidate] = 1\n\n        # Filter out candidate itemsets that do not meet the minimum support threshold\n        frequent_itemsets.extend([candidate for candidate, count in candidate_counts.items() if count >= min_count])\n\n        # If no new frequent itemsets were found, stop\n        if len(candidate_counts) == 0:\n            break\n\n        k += 1\n\n    # Sort the frequent itemsets by length and then lexicographically\n    frequent_itemsets.sort(key=lambda itemset: (len(itemset), itemset))\n\n    return frequent_itemsets\n```\n\nThis script first counts the occurrence of each item in the transactions. It then filters out items that do not meet the minimum support threshold. It generates frequent itemsets of size 1 and starts the main loop of the Apriori algorithm. In each iteration of the loop, it generates candidate itemsets of size `k`, counts the occurrence of each candidate itemset, filters out those that do not meet the minimum support threshold, and adds them to the list of frequent itemsets. The loop continues until no new frequent itemsets are found. Finally, it sorts the frequent itemsets by length and then lexicographically and returns them.\n"}
{"task_id": 440, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the input list to a numpy array for easier manipulation\n    predictions_array = np.array(predictions)\n\n    # Average the probability vectors over all estimators for every sample\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n\n    # Round every averaged probability to four decimal places\n    averaged_probabilities = np.round(averaged_probabilities, 4)\n\n    # Get the final predicted class label (index of the maximal probability) for every sample\n    predicted_classes = np.argmax(averaged_probabilities, axis=1)\n\n    # Convert the numpy arrays back to python lists\n    averaged_probabilities = averaged_probabilities.tolist()\n    predicted_classes = predicted_classes.tolist()\n\n    return averaged_probabilities, predicted_classes\n```\n\nThis script first converts the input list to a numpy array for easier manipulation. It then averages the probability vectors over all estimators for every sample, rounds every averaged probability to four decimal places, and obtains the final predicted class label (index of the maximal probability) for every sample. Finally, it converts the numpy arrays back to python lists and returns them.\n"}
{"task_id": 444, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert lists to numpy arrays\n    X = np.array(X)\n    if Y is not None:\n        Y = np.array(Y)\n\n    # Validate inputs\n    if sigma is None:\n        sigma = np.sqrt(X.shape[1] / 2)\n    elif isinstance(sigma, float):\n        if sigma <= 0:\n            return -1\n        sigma = np.full(X.shape[1], sigma)\n    elif isinstance(sigma, list):\n        if len(sigma) != X.shape[1] or any(s <= 0 for s in sigma):\n            return -1\n        sigma = np.array(sigma)\n    else:\n        return -1\n\n    if Y is None:\n        Y = X\n    elif X.shape[1] != Y.shape[1]:\n        return -1\n\n    # Compute kernel matrix\n    X_norm = np.sum(X ** 2, axis=-1)\n    Y_norm = np.sum(Y ** 2, axis=-1)\n    K = np.exp(-0.5 * (X_norm[:, None] + Y_norm[None, :] - 2 * np.dot(X, Y.T)) / sigma ** 2)\n\n    # Round to 4 decimal places and return as a list\n    return np.round(K, 4).tolist()\n```\n\nThis script first validates the inputs, then computes the kernel matrix using the given formula. The result is rounded to 4 decimal places and returned as a list.\n"}
{"task_id": 446, "completion_id": 0, "completion": "Here is a Python script that implements the `decision_stump` function:\n\n```python\nimport numpy as np\n\ndef decision_stump(X, y):\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n\n    # Compute the parent entropy\n    parent_entropy = entropy(y)\n\n    # Initialize the best gain, feature index and threshold\n    best_gain = -np.inf\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n\n    # Iterate over all features\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n\n        # Iterate over all thresholds\n        for threshold in thresholds:\n            left_indices = feature_values <= threshold\n            right_indices = feature_values > threshold\n\n            # Compute the information gain\n            left_entropy = entropy(y[left_indices])\n            right_entropy = entropy(y[right_indices])\n            gain = parent_entropy - ((left_indices.sum() / n_samples) * left_entropy +\n                                     (right_indices.sum() / n_samples) * right_entropy)\n\n            # Update the best gain, feature index and threshold\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = feature_index\n                best_threshold = round(threshold, 4)\n                left_majority_label = np.argmax(np.bincount(y[left_indices]))\n                right_majority_label = np.argmax(np.bincount(y[right_indices]))\n\n    # If no split can improve information gain, return -1, None, majority_label, majority_label\n    if best_gain <= 0:\n        majority_label = np.argmax(np.bincount(y))\n        return -1, None, majority_label, majority_label\n\n    return best_feature_index, best_threshold, left_majority_label, right_majority_label\n\ndef entropy(y):\n    _, counts = np.unique(y, return_counts=True)\n    probabilities = counts / counts.sum()\n    return -(probabilities * np.log2(probabilities)).sum()\n```\n\nThis script first computes the parent entropy, then iterates over all features and thresholds to find the best split. The information gain is computed for each split and the best gain, feature index and threshold are updated if a higher gain is found. If no split can improve information gain, the function returns -1, None, majority_label, majority_label. The entropy function computes the Shannon entropy of the class labels.\n"}
{"task_id": 452, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\nfrom typing import List\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X = np.array(X)\n    subset1 = X[X[:, feature_i] >= threshold] if isinstance(threshold, (int, float)) else X[X[:, feature_i] == threshold]\n    subset2 = X[X[:, feature_i] < threshold] if isinstance(threshold, (int, float)) else X[X[:, feature_i] != threshold]\n    return [subset1.tolist(), subset2.tolist()]\n```\n\nThis script first converts the input data set to a NumPy array for easier manipulation. Then it creates two subsets based on the threshold type. If the threshold is numeric, it creates the first subset with samples where the feature value is greater than or equal to the threshold, and the second subset with the remaining samples. If the threshold is not numeric, it creates the first subset with samples where the feature value is exactly equal to the threshold, and the second subset with the remaining samples. Finally, it converts the subsets to regular Python lists and returns them in a list.\n"}
{"task_id": 453, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check if inputs are valid\n    if len(Q) != len(Q_next) or len(Q) != len(actions) or len(Q) != len(rewards) or len(Q) != len(dones):\n        return -1\n    if gamma < 0 or gamma > 1:\n        return -1\n\n    # Create a copy of Q\n    y = np.round(Q.copy(), 4).tolist()\n\n    # Update the target values\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * max(Q_next[i])\n        y[i][actions[i]] = np.round(target, 4)\n\n    return y\n```\n\nThis script first checks if the inputs are valid. If they are not, it returns -1. Then it creates a copy of the Q matrix and updates the target values according to the formula provided in the task description. Finally, it returns the updated matrix as a nested Python list.\n"}
{"task_id": 458, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if num_classes is None:\n        num_classes = max(labels) + 1\n\n    if any(label < 0 for label in labels) or any(label >= num_classes for label in labels):\n        return -1\n\n    one_hot_matrix = [[0]*num_classes for _ in labels]\n    for i, label in enumerate(labels):\n        one_hot_matrix[i][label] = 1\n\n    return one_hot_matrix\n```\n\nThis script first checks if `num_classes` is `None` and if so, it infers it as `max(labels) + 1`. Then it checks if any label is negative or greater than or equal to `num_classes`. If so, it returns -1. Otherwise, it creates a matrix of zeros with the shape of `(len(labels), num_classes)` and sets the corresponding index of each row to 1 for each label. Finally, it returns the one-hot encoded matrix.\n"}
{"task_id": 461, "completion_id": 0, "completion": "Here is a Python script that implements the gradient boosting regressor:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"    \n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y), dtype=float)\n\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        unique_x = np.unique(x)\n        if unique_x.shape[0] == 1:\n            y_pred += learning_rate * np.mean(residuals)\n            continue\n\n        min_sse = np.inf\n        best_split = None\n        best_vl = None\n        best_vr = None\n\n        for t in unique_x[:-1]:\n            left_mask = x <= t\n            right_mask = x > t\n\n            if np.any(left_mask) and np.any(right_mask):\n                vl = np.mean(residuals[left_mask])\n                vr = np.mean(residuals[right_mask])\n                sse = np.sum((residuals[left_mask] - vl)**2) + np.sum((residuals[right_mask] - vr)**2)\n\n                if sse < min_sse:\n                    min_sse = sse\n                    best_split = t\n                    best_vl = vl\n                    best_vr = vr\n\n        if best_split is None:\n            y_pred += learning_rate * np.mean(residuals)\n        else:\n            y_pred += learning_rate * np.where(x <= best_split, best_vl, best_vr)\n\n    return np.round(y_pred, 4).tolist()\n```\n\nThis script first converts the input lists to numpy arrays for easier manipulation. It then initializes the predictions to the mean of the target values. If the number of estimators is 0 or negative, it returns the mean target for every sample.\n\nFor each iteration, it computes the residuals and unique x values. If there is only one unique x value, it adds the mean residual to the predictions and continues to the next iteration.\n\nFor each unique x value except the greatest one, it computes the sum of squared errors for the left and right sides of the split. If the sum of squared errors is less than the minimum seen so far, it updates the minimum, the best split, and the best residuals for the left and right sides.\n\nIf no valid split was found, it adds the mean residual to the predictions. Otherwise, it adds the best residuals for the left and right sides of the best split to the predictions.\n\nFinally, it rounds the predictions to four decimal places and returns them as a list.\n"}
{"task_id": 471, "completion_id": 0, "completion": "Here is a Python script that implements the Expected SARSA TD(0) update:\n\n```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    # Get the number of actions\n    num_actions = len(q_table[0])\n\n    # Compute the target\n    if next_state is None:\n        target = reward\n    else:\n        # Compute the expectation\n        expectation = sum(\n            (1 - epsilon + epsilon / num_actions) * q_table[next_state][a] if a == np.argmax(q_table[next_state])\n            else epsilon / num_actions * q_table[next_state][a]\n            for a in range(num_actions)\n        )\n        target = reward + gamma * expectation\n\n    # Update the Q-table\n    q_table[state][action] += lr * (target - q_table[state][action])\n\n    # Round all entries to 4 decimal places\n    q_table = [[round(val, 4) for val in row] for row in q_table]\n\n    return q_table\n```\n\nThis script first computes the target using the given formula. If there is no next state (i.e., the transition ends the episode), the target is just the immediate reward. Otherwise, the target is computed as the sum of the expectation of the Q-values for the next state, weighted by the \u03b5-soft policy. The Q-table is then updated using the computed target and the learning rate. Finally, all entries in the Q-table are rounded to four decimal places.\n"}
{"task_id": 474, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n\n    for i in range(m):\n        x_min = round((i//2 + 0.1) * 10, 4)\n        x_max = round((i//2 + 0.9) * 10, 4)\n        y_min = round((i%2 * interval + 0.1) * 10, 4)\n        y_max = round((i%2 * interval + 0.9) * 10, 4)\n\n        for _ in range(n_train):\n            X_train.append([round(random.uniform(x_min, x_max), 4), round(random.uniform(y_min, y_max), 4)])\n            Y_train.append((i - 0.5) * 2)\n\n        for _ in range(n_val):\n            X_val.append([round(random.uniform(x_min, x_max), 4), round(random.uniform(y_min, y_max), 4)])\n            Y_val.append((i - 0.5) * 2)\n\n    return np.array(X_train), np.array(X_val), np.array(Y_train), np.array(Y_val)\n```\n\nThis script first checks if a seed is provided, and if so, it sets the random seed. Then it initializes empty lists for the training and validation data and labels. For each class, it calculates the minimum and maximum x and y values for the class, and then generates the specified number of training and validation samples for that class. The samples are uniformly distributed within the calculated range, and the labels are calculated based on the class index. Finally, it returns the generated data as NumPy arrays.\n"}
{"task_id": 475, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * np.square(grad)\n\n    m_hat = m_new / (1 - b1**t)\n    v_hat = v_new / (1 - b2**t)\n\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n\n    return w_new, m_new, v_new\n```\n\nThis function performs a single Adam optimisation step. It first checks if the previous first and second moments are None, and if so, initializes them as zero arrays of the same shape as the gradient. Then it calculates the new first and second moments, applies the bias correction, and finally updates the parameters. The updated parameters, first and second moments are returned.\n"}
{"task_id": 479, "completion_id": 0, "completion": "Here is a Python script that implements the \u03b5-greedy algorithm for the stationary multi-armed bandit problem:\n\n```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    # Set the random seed\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Initialize the estimated value of every arm with the constant ev_prior\n    # and set all pull counters to 0\n    N = len(rewards[0])\n    arm_values = [ev_prior] * N\n    pull_counters = [0] * N\n\n    # For each time-step t (row in rewards):\n    for t in range(len(rewards)):\n        # With probability epsilon choose an arm uniformly at random\n        if np.random.random() < epsilon:\n            arm = np.random.randint(0, N)\n        # Otherwise choose the arm that currently has the largest estimated value\n        # (break ties by the smallest index)\n        else:\n            max_value = max(arm_values)\n            arm = np.random.choice([i for i, value in enumerate(arm_values) if value == max_value])\n\n        # Receive the reward that corresponds to the chosen arm at this time-step\n        reward = rewards[t][arm]\n\n        # Update the chosen arm\u2019s estimate using the incremental sample mean\n        arm_values[arm] += (reward - arm_values[arm]) / (pull_counters[arm] + 1)\n\n        # Increment the pull counter for the chosen arm\n        pull_counters[arm] += 1\n\n    # Return the list of arm value estimates rounded to 4 decimal places\n    return [round(value, 4) for value in arm_values]\n```\n\nThis script first initializes the estimated value of every arm with the constant `ev_prior` and sets all pull counters to 0. Then, for each time-step, it either chooses a random arm with probability `epsilon` or the arm with the highest estimated value. It then receives the reward for the chosen arm and updates the estimated value of the chosen arm using the incremental sample mean. Finally, it returns the list of arm value estimates rounded to 4 decimal places.\n"}
{"task_id": 481, "completion_id": 0, "completion": "Here is a Python script that implements the DBSCAN algorithm from scratch:\n\n```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if len(data) == 0:\n        return []\n\n    labels = [0]*len(data)\n    cluster_id = 0\n\n    for P_idx, P in enumerate(data):\n        if not (labels[P_idx] == 0):\n            continue\n\n        Neighbors_P = region_query(data, P_idx, eps)\n        if len(Neighbors_P) < min_samples:\n            labels[P_idx] = -1\n            continue\n\n        cluster_id += 1\n        grow_cluster(data, labels, P_idx, Neighbors_P, cluster_id, eps, min_samples)\n\n    return labels\n\ndef grow_cluster(data, labels, P_idx, Neighbors_P, cluster_id, eps, min_samples):\n    labels[P_idx] = cluster_id\n\n    i = 0\n    while i < len(Neighbors_P):\n        P_n_idx = Neighbors_P[i]\n        if labels[P_n_idx] == -1:\n            labels[P_n_idx] = cluster_id\n\n        elif labels[P_n_idx] != 0:\n            i += 1\n            continue\n\n        labels[P_n_idx] = cluster_id\n        Neighbors_P_n = region_query(data, P_n_idx, eps)\n        if len(Neighbors_P_n) >= min_samples:\n            Neighbors_P = Neighbors_P + Neighbors_P_n\n\n        i += 1\n\ndef region_query(data, P_idx, eps):\n    neighbors = []\n\n    for P_n_idx in range(0, len(data)):\n        if np.linalg.norm(data[P_idx] - data[P_n_idx]) < eps:\n            neighbors.append(P_n_idx)\n\n    return neighbors\n```\n\nThis script first checks if the data array is empty. If it is, it returns an empty list. Then it initializes a list of labels for each data point, all set to 0. It then iterates over each data point. If the point has already been assigned to a cluster, it skips it. Otherwise, it finds all points within the neighborhood of the current point. If the number of such points is less than the minimum number of samples, the point is marked as noise and skipped. Otherwise, a new cluster is started and the current point is added to it. The function `grow_cluster` is then called to expand the cluster by adding all reachable points to it. The function `region_query` is used to find all points within the neighborhood of a given point.\n"}
{"task_id": 482, "completion_id": 0, "completion": "Here is a Python script that implements the one-hot encoding routine:\n\n```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    # Convert input to numpy array\n    y = np.array(y)\n\n    # If num_classes is not provided, set it to max(y) + 1\n    if num_classes is None:\n        num_classes = max(y) + 1\n\n    # Check if any label is negative or not smaller than num_classes\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError(\"Labels must be non-negative and smaller than num_classes\")\n\n    # Create a 2D array of zeros\n    one_hot = np.zeros((len(y), num_classes), dtype=int)\n\n    # Set the corresponding elements to 1\n    one_hot[np.arange(len(y)), y] = 1\n\n    return one_hot\n```\n\nThis script first converts the input labels to a numpy array. If `num_classes` is not provided, it is set to `max(y) + 1`. It then checks if any label is negative or not smaller than `num_classes`, and raises a `ValueError` if so. Finally, it creates a 2D array of zeros, and sets the corresponding elements to 1, which represents the one-hot encoding of the input labels.\n"}
{"task_id": 485, "completion_id": 0, "completion": "Here is a Python script that implements the CART regression tree algorithm for one numerical input feature.\n\n```python\nimport numpy as np\n\nclass Node:\n    def __init__(self, depth, X, y):\n        self.depth = depth\n        self.X = X\n        self.y = y\n        self.left = None\n        self.right = None\n        self.split_point = None\n        self.mean = np.mean(y)\n\ndef split_node(node, max_depth):\n    if node.depth >= max_depth or len(node.X) < 2:\n        return\n    best_split_point = None\n    best_sse = float('inf')\n    for split_point in node.X:\n        left_y = [y for x, y in zip(node.X, node.y) if x < split_point]\n        right_y = [y for x, y in zip(node.X, node.y) if x >= split_point]\n        sse = sum((np.mean(left_y) - y) ** 2 for y in left_y) + \\\n              sum((np.mean(right_y) - y) ** 2 for y in right_y)\n        if sse < best_sse:\n            best_sse = sse\n            best_split_point = split_point\n    if best_split_point is not None:\n        node.split_point = best_split_point\n        left_X = [x for x in node.X if x < best_split_point]\n        left_y = [y for x, y in zip(node.X, node.y) if x < best_split_point]\n        right_X = [x for x in node.X if x >= best_split_point]\n        right_y = [y for x, y in zip(node.X, node.y) if x >= best_split_point]\n        node.left = Node(node.depth + 1, left_X, left_y)\n        node.right = Node(node.depth + 1, right_X, right_y)\n        split_node(node.left, max_depth)\n        split_node(node.right, max_depth)\n\ndef predict(node, x):\n    if node.split_point is None or x < node.split_point:\n        if node.left is not None:\n            return predict(node.left, x)\n        else:\n            return node.mean\n    else:\n        if node.right is not None:\n            return predict(node.right, x)\n        else:\n            return node.mean\n\ndef regression_tree_predict(X_train, y_train, X_test, max_depth=3):\n    if len(X_train) == 0:\n        return []\n    root = Node(0, X_train, y_train)\n    split_node(root, max_depth)\n    return [predict(root, x) for x in X_test]\n```\n\nThis script first defines a `Node` class to represent a node in the tree. The `split_node` function recursively splits a node by finding the split point that minimizes the sum of squared errors (SSE) of the two children. The `predict` function traverses the tree to make a prediction for a given feature value. The `regression_tree_predict` function builds the tree and uses it to make predictions for the test set.\n"}
{"task_id": 490, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    # Convert the input to a numpy array\n    x = np.array(x)\n    \n    # If the input array is empty, return an empty list\n    if x.size == 0:\n        return []\n    \n    # Create a square diagonal matrix with the input values on the diagonal\n    matrix = np.diag(x)\n    \n    # Convert the numpy array to a list of lists and return it\n    return matrix.tolist()\n```\n\nThis script first converts the input to a NumPy array. If the array is empty, it returns an empty list. Otherwise, it creates a square diagonal matrix with the input values on the diagonal using NumPy's `diag` function. Finally, it converts the resulting matrix to a list of lists and returns it.\n"}
{"task_id": 491, "completion_id": 0, "completion": "Here is a Python script that implements the FP-Growth algorithm:\n\n```python\nfrom collections import Counter, defaultdict\nimport itertools\n\nclass Node:\n    def __init__(self, item, count, parent):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.next = None\n\n    def increment(self, count):\n        self.count += count\n\ndef construct_tree(transactions, min_sup):\n    header_table = defaultdict(int)\n    for transaction in transactions:\n        for item in transaction:\n            header_table[item] += 1\n\n    header_table = {k: v for k, v in header_table.items() if v >= min_sup}\n    sorted_items = [v[0] for v in sorted(header_table.items(), key=lambda kv: (-kv[1], kv[0]))]\n    root = Node(None, None, None)\n\n    for transaction in transactions:\n        sorted_transaction = [item for item in transaction if item in header_table]\n        sorted_transaction.sort(key=lambda item: sorted_items.index(item))\n        current_node = root\n        for item in sorted_transaction:\n            current_node = current_node.children.setdefault(item, Node(item, 1, current_node))\n            header_table[item] += 1\n\n    return root, header_table\n\ndef mine_frequent_itemsets(header_table, prefix, frequent_itemsets):\n    sorted_items = [v[0] for v in sorted(list(header_table.items()), key=lambda kv: kv[1])]\n    for item in sorted_items:\n        new_prefix = prefix.copy()\n        new_prefix.add(item)\n        frequent_itemsets.append(tuple(sorted(new_prefix)))\n        conditional_pattern_base = {}\n        node = header_table[item][0]\n        while node is not None:\n            parent = node.parent\n            if parent.item is not None:\n                conditional_pattern_base[parent.item] = parent.count\n            node = parent\n        conditional_tree, new_header_table = construct_tree(conditional_pattern_base, header_table[item][1])\n        if conditional_tree.children:\n            mine_frequent_itemsets(new_header_table, new_prefix, frequent_itemsets)\n\ndef fp_growth(transactions, min_sup):\n    root, header_table = construct_tree(transactions, min_sup)\n    frequent_itemsets = []\n    mine_frequent_itemsets(header_table, set(), frequent_itemsets)\n    return frequent_itemsets\n```\n\nThis script first constructs the FP-tree and the header table. Then it mines the frequent item-sets by recursively constructing the conditional FP-trees and adding the frequent item-sets to the result. The frequent item-sets are sorted by length and lexicographically.\n"}
{"task_id": 492, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n\n    X = np.array(X)\n    n_samples, n_features = X.shape\n\n    # Generate all combinations of features up to degree\n    combinations = [combinations_with_replacement(range(n_features), i) for i in range(degree + 1)]\n    combinations = [item for sublist in combinations for item in sublist]\n\n    # Generate the polynomial features\n    X_poly = []\n    for i in range(n_samples):\n        features = []\n        for comb in combinations:\n            feature = 1\n            for index in comb:\n                feature *= X[i, index]\n            features.append(feature)\n        X_poly.append(features)\n\n    return X_poly\n```\n\nThis script first checks if the degree is negative. If it is, it returns -1. Then it converts the input list to a numpy array for easier manipulation. It generates all combinations of features up to the given degree using the `combinations_with_replacement` function from the `itertools` module. Finally, it generates the polynomial features by multiplying the original features according to the combinations and appends them to the `X_poly` list.\n"}
{"task_id": 493, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    else:\n        y_mean = np.mean(y)\n        return round(np.mean([(y_i - y_mean)**2 for y_i in y]), 4)\n```\n\nThis script first checks if the input list or array is empty. If it is, it returns -1. If it's not, it calculates the mean of the input, then calculates the mean-squared error by subtracting the mean from each element, squaring the result, and then taking the mean of those squared differences. The result is then rounded to 4 decimal places.\n"}
{"task_id": 496, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Convert x to a numpy array if it's not already\n    x = np.array(x)\n\n    # Apply the affine function\n    y = slope * x + intercept\n\n    # The first derivative is the slope\n    grad = np.full_like(x, slope)\n\n    # The second derivative is zero\n    grad2 = np.zeros_like(x)\n\n    # Round all elements to 4 decimal places\n    y = np.round(y, 4)\n    grad = np.round(grad, 4)\n    grad2 = np.round(grad2, 4)\n\n    return y.tolist(), grad.tolist(), grad2.tolist()\n```\n\nThis function first converts the input `x` to a numpy array if it's not already. Then it applies the affine function to each element of `x`, and calculates the first and second derivatives. The first derivative is just the slope, and the second derivative is zero. Finally, it rounds all elements to 4 decimal places and returns the results as lists.\n"}
{"task_id": 499, "completion_id": 0, "completion": "Here is a Python script that implements the PCA dimensionality reduction routine:\n\n```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    # Check if k is within the valid range\n    if k < 1 or k > data.shape[1]:\n        return -1\n\n    # Standardize the data\n    data_std = (data - np.mean(data, axis=0)) / np.std(data, axis=0, ddof=1)\n\n    # Compute the sample covariance matrix\n    cov_mat = np.cov(data_std.T, ddof=1)\n\n    # Perform an eigen-decomposition of the covariance matrix\n    eig_vals, eig_vecs = np.linalg.eig(cov_mat)\n\n    # Sort eigenvalues and eigenvectors in descending order\n    idx = eig_vals.argsort()[::-1]\n    eig_vals = eig_vals[idx]\n    eig_vecs = eig_vecs[:, idx]\n\n    # Fix the sign of the eigenvectors\n    eig_vecs = np.sign(eig_vecs) * np.abs(eig_vecs)\n\n    # Project the standardized data onto the first k eigenvectors\n    projection = np.dot(data_std, eig_vecs[:, :k])\n\n    # Return the projected data rounded to 4 decimal places\n    return np.round(projection, 4).tolist()\n```\n\nThis script first checks if `k` is within the valid range. If it is, it standardizes the data, computes the sample covariance matrix, performs an eigen-decomposition of the covariance matrix, sorts the eigenvalues and eigenvectors in descending order, fixes the sign of the eigenvectors, and projects the standardized data onto the first `k` eigenvectors. It then returns the projected data rounded to 4 decimal places. If `k` is outside the valid range, it returns `-1`.\n"}
{"task_id": 500, "completion_id": 0, "completion": "Here is a Python script that implements a very small-scale Gradient Boosting binary classifier using decision stumps as weak learners and the squared-error loss.\n\n```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Initialize the predictions with the average of the training labels\n    F = np.full(y_train.shape, np.mean(y_train))\n\n    # Loop over the number of estimators\n    for _ in range(n_estimators):\n        # Compute the residuals\n        r = y_train - F\n\n        # Initialize the best stump\n        best_stump = None\n        min_error = float('inf')\n\n        # Loop over all features\n        for i in range(X_train.shape[1]):\n            # Sort the feature values and the residuals\n            sorted_idx = np.argsort(X_train[:, i])\n            sorted_X = X_train[sorted_idx, i]\n            sorted_r = r[sorted_idx]\n\n            # Compute the cumulative sum of the residuals\n            cum_sum = np.cumsum(sorted_r)\n\n            # Compute the total sum of the residuals\n            total_sum = np.sum(sorted_r)\n\n            # Compute the errors for each split\n            errors = np.square(cum_sum[:-1]) / (np.arange(1, len(cum_sum)) + 1) + np.square(total_sum - cum_sum[1:]) / (len(cum_sum) - np.arange(1, len(cum_sum)))\n\n            # Find the best split\n            idx = np.argmin(errors)\n            if errors[idx] < min_error:\n                min_error = errors[idx]\n                threshold = (sorted_X[idx] + sorted_X[idx + 1]) / 2\n                best_stump = (i, threshold)\n\n        # Update the predictions\n        i, threshold = best_stump\n        h = np.where(X_train[:, i] <= threshold, -1, 1)\n        F += learning_rate * h\n\n    # Return the predicted class labels\n    return np.where(F > 0.5, 1, 0).tolist()\n```\n\nThis script first initializes the predictions with the average of the training labels. Then, for each estimator, it computes the residuals, sorts them, and finds the best split for each feature. The best split is the one that minimizes the total squared error. The predictions are then updated with the best stump. Finally, the predicted class labels are returned by thresholding the final score at 0.5.\n"}
{"task_id": 505, "completion_id": 0, "completion": "Here is a Python script that implements the contrastive divergence update for a binary Restricted Boltzmann Machine (RBM).\n\n```python\nimport numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n\n    # Compute the positive phase hidden probabilities\n    h0_prob = sigmoid(np.dot(X, W) + hbias)\n\n    # Run k full Gibbs steps (hidden \u2192 visible \u2192 hidden) without stochastic sampling\n    v_k = X.copy()\n    for _ in range(k):\n        h_k_prob = sigmoid(np.dot(v_k, W) + hbias)\n        h_k = np.random.binomial(1, h_k_prob)\n        v_k_prob = sigmoid(np.dot(h_k, W.T) + vbias)\n        v_k = np.random.binomial(1, v_k_prob)\n\n    # Compute positive and negative gradients\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)\n\n    # Update the weight matrix\n    W_new = W + learning_rate * (pos_grad - neg_grad) / X.shape[0]\n\n    # Return the updated weight matrix rounded to 4 decimal places and converted to a plain Python list of lists\n    return np.round(W_new, 4).tolist()\n```\n\nThis script first checks if the mini-batch is empty. If it is, it returns an empty list. Otherwise, it computes the positive phase hidden probabilities, runs `k` full Gibbs steps (hidden \u2192 visible \u2192 hidden) without stochastic sampling, computes the positive and negative gradients, updates the weight matrix, and returns the updated weight matrix rounded to 4 decimal places and converted to a plain Python list of lists.\n"}
{"task_id": 509, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert lists to numpy arrays\n    x = np.array(x)\n    y = np.array(y)\n\n    # Check if the vectors have the same length\n    if x.shape != y.shape:\n        return -1\n\n    # Compute the absolute differences\n    diff = np.abs(x - y)\n\n    # Return the maximum difference\n    return np.round(np.max(diff), 4)\n```\n\nThis script first converts the input lists to NumPy arrays. It then checks if the arrays have the same shape (i.e., the same length). If they do not, the function returns -1. Otherwise, it computes the absolute differences between the arrays and returns the maximum of these differences, rounded to four decimal places.\n"}
{"task_id": 510, "completion_id": 0, "completion": "Here is the Python code that implements the VAE loss function:\n\n```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Clip y_pred into the open interval (eps, 1 - eps)\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n\n    # Compute the reconstruction loss\n    reconstruction_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred), axis=-1)\n\n    # Compute the KL divergence\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=-1)\n\n    # Compute the VAE loss\n    vae_loss = np.mean(reconstruction_loss + kl_divergence)\n\n    return round(vae_loss, 6)\n```\n\nThis function first clips the `y_pred` values to the open interval `(eps, 1 - eps)` to avoid numerical instability. Then it computes the reconstruction loss as the sum of the binary cross-entropy of `y` and `y_pred`. The KL divergence is computed as the sum of the terms in the formula, and finally the VAE loss is computed as the average of the reconstruction loss and the KL divergence. The function returns the VAE loss rounded to 6 decimal places.\n"}
{"task_id": 513, "completion_id": 0, "completion": "Here is the Python function that implements the Factorization Machine regression prediction formula:\n\n```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n\n    linear_term = np.dot(X, w)\n\n    interaction_term = 0.5 * np.sum(np.power(np.dot(X, V), 2) - np.dot(np.power(X, 2), np.power(V, 2)), axis=1)\n\n    predictions = w0 + linear_term + interaction_term\n\n    return [round(pred, 4) for pred in predictions]\n```\n\nThis function first converts the input lists to numpy arrays for easier computation. It then calculates the linear term and interaction term separately, and finally adds them together to get the predictions. The predictions are rounded to 4 decimal places before being returned.\n"}
{"task_id": 517, "completion_id": 0, "completion": "Here is a Python script that implements the sigmoid function as described:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to numpy array\n    z = np.array(z)\n\n    # Compute sigmoid\n    sigmoid = 1 / (1 + np.exp(-z))\n\n    # Round to 4 decimal places\n    sigmoid = np.round(sigmoid, 4)\n\n    # If input was scalar, return a float\n    if sigmoid.size == 1:\n        return float(sigmoid)\n    else:\n        # Otherwise return a list\n        return sigmoid.tolist()\n\n# Test the function\nprint(sigmoid([-1, 0, 1]))  # Output: [0.2689, 0.5, 0.7311]\n```\n\nThis script first converts the input to a numpy array. It then computes the sigmoid function element-wise for the array. The result is rounded to four decimal places. If the input was a scalar, the function returns a float. Otherwise, it returns a list obtained with `numpy.ndarray.tolist()`.\n"}
{"task_id": 518, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n\n    return wrapper\n```\n\nThis code defines a decorator `unhot` that takes a function as an argument and returns a new function that performs the described conversion and then calls the original function. The conversion is performed by checking if the input arrays are two-dimensional and their second dimension is larger than one, in which case they are assumed to be one-hot encoded and are replaced by their `argmax` along axis 1.\n"}
{"task_id": 520, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return np.round(z * (1 - z), 4)\n    elif isinstance(z, list):\n        return [sigmoid_grad(sub_z) for sub_z in z]\n    elif isinstance(z, np.ndarray):\n        return np.round(z * (1 - z), 4)\n    else:\n        raise TypeError(\"Input must be a float, list, or NumPy ndarray.\")\n```\n\nThis script first checks the type of the input. If it's a scalar (either an integer or a float), it computes the gradient and rounds it to 4 decimal places. If it's a list, it recursively applies the function to each element of the list. If it's a NumPy array, it computes the gradient element-wise and rounds each result to 4 decimal places. If the input is of any other type, it raises a TypeError.\n"}
{"task_id": 528, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to numpy array\n    X = np.array(X)\n\n    # Find the min and max values for each column in X\n    x1_min, x1_max = X[:, 0].min(), X[:, 0].max()\n    x2_min, x2_max = X[:, 1].min(), X[:, 1].max()\n\n    # Create equally spaced 1-D arrays x1_plot and x2_plot\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n\n    # Create a mesh-grid from x1_plot and x2_plot\n    x1_mesh, x2_mesh = np.meshgrid(x1_plot, x2_plot)\n\n    # Classify every grid point with the rule and store the labels in a 2-D list\n    labels = np.sign(W[0]*x1_mesh + W[1]*x2_mesh + b)\n\n    return labels.tolist()\n```\n\nThis script first converts the input list `X` to a numpy array for easier manipulation. It then finds the minimum and maximum values for each column in `X` to determine the range of the grid. It creates two equally spaced 1-D arrays `x1_plot` and `x2_plot` of length `grid_n` that span this range. It then creates a mesh-grid from these arrays. Finally, it classifies every grid point with the rule and stores the labels in a 2-D numpy array `labels`. The function then returns this array as a list of lists.\n"}
{"task_id": 537, "completion_id": 0, "completion": "Here is a Python script that implements a Gaussian Naive Bayes classifier from scratch:\n\n```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Compute class priors\n    priors = np.bincount(y_train) / len(y_train)\n\n    # Compute mean and standard deviation for each feature for each class\n    means = np.array([X_train[y_train == c].mean(axis=0) for c in range(2)])\n    stds = np.array([X_train[y_train == c].std(axis=0) for c in range(2)])\n\n    # Add a very small constant to avoid division by zero\n    eps = 1e-9\n    stds += eps\n\n    # Compute the Gaussian likelihood for each feature for each class\n    likelihoods = np.exp(-0.5 * ((X_test[:, :, None] - means) / stds) ** 2) / (np.sqrt(2 * np.pi) * stds)\n\n    # Compute the posterior probability for each class\n    posteriors = priors * np.prod(likelihoods, axis=1)\n\n    # Return the class with the larger posterior probability for each test sample\n    return np.argmax(posteriors, axis=1).tolist()\n```\n\nThis script first computes the class priors, which are the relative frequencies of each class in the training set. It then computes the mean and standard deviation for each feature for each class from the training data. It adds a very small constant to the standard deviations to avoid division by zero. The Gaussian likelihood for each feature for each class is then computed using the formula given in the task description. The posterior probability for each class is computed as the product of the class prior and the Gaussian likelihood for each feature. Finally, the class with the larger posterior probability is returned for each test sample.\n"}
{"task_id": 539, "completion_id": 0, "completion": "Here is the Python code that implements the binary cross-entropy cost function:\n\n```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n\n    Parameters:\n    AL (np.ndarray): A vector of model probabilities.\n    Y (np.ndarray): A vector of true labels.\n\n    Returns:\n    float: The binary cross-entropy cost.\n    \"\"\"\n    # Clip the probabilities to avoid numerical overflow\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n\n    # Compute the binary cross-entropy cost\n    cost = -1/Y.shape[1] * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n\n    return round(cost, 4)\n```\n\nThis function first clips the input probabilities to avoid numerical overflow. Then it computes the binary cross-entropy cost using the given formula. The cost is returned as a plain Python float rounded to 4 decimal places.\n"}
{"task_id": 552, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n\n    pi, A, B = hmm['pi'], hmm['A'], hmm['B']\n    N = len(pi)\n    M = len(B[0])\n\n    # Forward probabilities\n    alpha = np.zeros((N, t+1))\n    alpha[:, 0] = pi * B[:, observations[0]]\n\n    for i in range(1, t+1):\n        for j in range(N):\n            alpha[j, i] = np.sum(alpha[:, i-1] * A[:, j] * B[j, observations[i]])\n\n    # Backward probabilities\n    beta = np.zeros((N, len(observations) - t))\n    beta[:, -1] = 1\n\n    for i in range(len(observations) - t - 1, 0, -1):\n        for j in range(N):\n            beta[j, i-1] = np.sum(beta[:, i] * A[j, :] * B[:, observations[i]])\n\n    # Posterior probabilities\n    gamma = alpha[:, t] * beta[:, 0]\n    gamma = gamma / np.sum(gamma)\n\n    return [round(p, 4) for p in gamma]\n```\n\nThis script first checks if the provided time step `t` is within the valid range. If it is not, it returns an empty list. Then it computes the forward probabilities `alpha` and backward probabilities `beta` for the given HMM and observation sequence up to the time step `t`. Finally, it computes the posterior probabilities `gamma` by multiplying the forward and backward probabilities at the time step `t` and normalizes them to sum up to 1. The result is a list of the posterior probabilities for each state at time `t`, rounded to four decimal places.\n"}
{"task_id": 555, "completion_id": 0, "completion": "Here is a Python script that implements the DBSCAN algorithm:\n\n```python\nimport numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import pdist, squareform\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    # Compute pairwise Euclidean distances\n    dists = squareform(pdist(data, 'euclidean'))\n\n    # Identify core points\n    core_points = np.sum(dists <= eps, axis=0) >= min_samples\n\n    # Initialize cluster labels\n    labels = np.full(data.shape[0], -1)\n\n    # Initialize cluster counter\n    cluster_id = 0\n\n    # Iterate over all points\n    for point in range(data.shape[0]):\n        # If the point is not yet labeled\n        if labels[point] == -1:\n            # If the point is a core point\n            if core_points[point]:\n                # Start a new cluster\n                cluster_id += 1\n                labels[point] = cluster_id\n\n                # Initialize a queue for BFS\n                queue = deque([point])\n\n                # While the queue is not empty\n                while queue:\n                    # Pop a point from the queue\n                    current_point = queue.popleft()\n\n                    # Iterate over all points\n                    for neighbor in range(data.shape[0]):\n                        # If the point is not yet labeled\n                        if labels[neighbor] == -1:\n                            # If the point is within eps of the current point\n                            if dists[current_point, neighbor] <= eps:\n                                # Label the point\n                                labels[neighbor] = cluster_id\n\n                                # If the point is a core point\n                                if core_points[neighbor]:\n                                    # Add the point to the queue\n                                    queue.append(neighbor)\n\n    return labels.tolist()\n```\n\nThis script first computes the pairwise Euclidean distances between all points. Then it identifies the core points, i.e., the points that have at least `min_samples` points within a distance of `eps`. The script then iterates over all points. If a point is not yet labeled and is a core point, it starts a new cluster and labels the point. Then it performs a breadth-first search (BFS) from the point, labeling all points that are within `eps` of the current point and are not yet labeled. The BFS continues until all points in the current cluster have been labeled. The script repeats this process until all points have been labeled.\n"}
{"task_id": 561, "completion_id": 0, "completion": "Here is a Python script that implements the Expectation\u2013Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n```python\nimport numpy as np\nfrom scipy.stats import multivariate_normal\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Implements the Expectation\u2013Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    data (np.ndarray): 2-D NumPy array containing N samples with D features.\n    k (int): Number of Gaussian components.\n    max_iter (int): Maximum number of iterations.\n    epsilon (float): Tolerance for the change in mixture weights.\n\n    Returns:\n    list[int]: List of length N containing the final cluster label of each sample.\n    \"\"\"\n    # Randomly initialize the parameters of K Gaussian components\n    np.random.seed(0)\n    means = data[np.random.choice(range(data.shape[0]), size=k, replace=False)]\n    covariances = [np.cov(data, rowvar=0) for _ in range(k)]\n    weights = np.ones(k) / k\n    responsibilities = np.zeros((data.shape[0], k))\n\n    # Repeatedly perform the Expectation (E) and Maximization (M) steps\n    for _ in range(max_iter):\n        # E step\n        for i in range(k):\n            responsibilities[:, i] = weights[i] * multivariate_normal.pdf(data, mean=means[i], cov=covariances[i])\n        row_sums = responsibilities.sum(axis=1)[:, np.newaxis]\n        responsibilities /= np.clip(row_sums, a_min=1e-7, a_max=None)\n\n        # M step\n        new_weights = responsibilities.mean(axis=0)\n        new_means = (responsibilities[:, :, np.newaxis] * data).sum(axis=0) / np.maximum(new_weights[:, np.newaxis], 1e-7)\n        new_covariances = [np.cov(data, rowvar=0, aweights=(responsibilities[:, i])) for i in range(k)]\n\n        # Check for convergence\n        if np.allclose(weights, new_weights, atol=epsilon):\n            break\n\n        # Update parameters\n        weights = new_weights\n        means = new_means\n        covariances = new_covariances\n\n    # Assign each sample to the component with the largest posterior probability\n    labels = np.argmax(responsibilities, axis=1)\n\n    # Sort the components by the first coordinate of their mean in ascending order\n    order = np.argsort(means[:, 0])\n    labels = order[labels]\n\n    return labels.tolist()\n```\n\nThis script first initializes the parameters of the Gaussian components randomly. Then, it repeatedly performs the Expectation and Maximization steps until convergence or the maximum number of iterations is reached. After convergence, it assigns each sample to the component with the largest posterior probability. Finally, it sorts the components by the first coordinate of their mean in ascending order and re-labels the cluster indices accordingly.\n"}
{"task_id": 562, "completion_id": 0, "completion": "Here is a Python script that implements the Spectral Clustering algorithm:\n\n```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n\n    # Compute the pairwise squared distance\n    dist = np.sum(data**2, axis=1).reshape(-1, 1) + \\\n           np.sum(data**2, axis=1) - \\\n           2 * np.dot(data, data.T)\n\n    # Compute the similarity\n    W = np.exp(-gamma * dist)\n\n    # Compute the degree diagonal\n    D = np.diag(np.sum(W, axis=1))\n\n    # Compute the Laplacian\n    if method == 'unnormalized':\n        L = D - W\n    else:\n        D_inv_sqrt = np.diag(1 / np.sqrt(np.diag(D)))\n        L = np.eye(len(data)) - np.dot(np.dot(D_inv_sqrt, W), D_inv_sqrt)\n\n    # Compute the eigenvectors\n    _, V = np.linalg.eigh(L)\n    V = V[:, :n_cluster]\n\n    # Normalize the eigenvectors\n    if method == 'normalized':\n        V /= np.linalg.norm(V, axis=1).reshape(-1, 1)\n\n    # Run k-means\n    centroids = V[:n_cluster]\n    labels = np.argmin(np.sum((V[:, np.newaxis, :] - centroids) ** 2, axis=2), axis=1)\n\n    # Relabel clusters\n    label_order = np.argsort(np.argmin(np.sum((data - centroids) ** 2, axis=1)))\n    labels = label_order[labels]\n\n    return labels.tolist()\n```\n\nThis script first computes the pairwise squared distance and the similarity matrix. Then it computes the degree diagonal and the Laplacian. Depending on the `method` parameter, it either uses the un-normalized or the symmetric normalized Laplacian. After that, it computes the eigenvectors of the Laplacian. If the normalized variant is chosen, it row-normalizes the eigenvector matrix. Finally, it runs k-means in the eigenvector space to obtain final cluster labels. The labels are then relabeled so that the cluster containing the smallest original index gets label 0, the next one 1, etc.\n"}
{"task_id": 563, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n\n    w = np.dot(alpha * y_data, X_data)\n    w = np.round(w, 4).tolist()\n    b = np.round(b, 4)\n\n    return w, b\n```\n\nThis script implements the dual-form Perceptron learning algorithm as described in the task. It first initializes the alpha and b parameters, then computes the Gram matrix G. It then enters a loop that iterates over the training set, updating the alpha and b parameters if necessary. If no update is made in a complete pass over the data, the loop is broken. Finally, the weight vector is recovered and returned, with each component rounded to 4 decimal places.\n"}
{"task_id": 564, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n\n    if task_type == 'classification':\n        for child in root.child:\n            if child.x == features[root.label]:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n\n    elif task_type == 'regression':\n        if features[root.label] <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\n```\n\nThis script defines a `Node` class and a `predict_sample` function. The `predict_sample` function recursively traverses the decision tree according to the rules defined in the task description. It first checks if the current node is a leaf node (i.e., if it stores a prediction `y`). If it is, it returns that value. Otherwise, it inspects the feature with index `node.label` and continues the traversal according to the rules for classification and regression trees.\n"}
{"task_id": 565, "completion_id": 0, "completion": "Here is a Python script that implements the `choose_best_feature` function. This function calculates the entropy and conditional entropy for each feature and then selects the feature with the maximum information gain.\n\n```python\nimport numpy as np\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    def entropy(labels):\n        _, counts = np.unique(labels, return_counts=True)\n        p = counts / len(labels)\n        return -np.sum(p * np.log2(p))\n\n    def conditional_entropy(feature, labels):\n        _, counts = np.unique(feature, return_counts=True)\n        p = counts / len(feature)\n        entropy = 0.0\n        for value in np.unique(feature):\n            subset_labels = labels[feature == value]\n            entropy += p[list(feature).index(value)] * entropy(subset_labels)\n        return entropy\n\n    H_y = entropy(y)\n    max_info_gain = -np.inf\n    best_feature_index = -1\n\n    for feature_index in range(X.shape[1]):\n        H_y_given_A = conditional_entropy(X[:, feature_index], y)\n        info_gain = H_y - H_y_given_A\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_feature_index = feature_index\n\n    return best_feature_index, round(max_info_gain, 6)\n```\n\nThis script first defines two helper functions: `entropy` and `conditional_entropy`. The `entropy` function calculates the entropy of a set of labels, and the `conditional_entropy` function calculates the conditional entropy of a feature given a set of labels.\n\nThe `choose_best_feature` function then iterates over each feature in the input data matrix `X`, calculates the conditional entropy of the feature given the labels `y`, and subtracts this from the entropy of the labels `y` to get the information gain. If this information gain is greater than the current maximum information gain, it updates the maximum information gain and the best feature index.\n\nFinally, the function returns the best feature index and the maximum information gain, rounded to 6 decimal places.\n"}
{"task_id": 566, "completion_id": 0, "completion": "Here is a Python script that implements the Isolation Forest algorithm as described:\n\n```python\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n\n    def c(n):\n        return 2.0 * (np.log(n - 1) + 0.5772156649) - (2.0 * (n - 1) / n) if n > 1 else 0\n\n    def path_length(x, tree, i=0):\n        if i >= len(tree):\n            return c(tree[-1].shape[0])\n        if x[tree[i][0]] < tree[i][1]:\n            return path_length(x, tree, 2 * i + 1)\n        else:\n            return path_length(x, tree, 2 * i + 2)\n\n    def build_tree(data, height_limit, i=0):\n        if i >= height_limit or data.shape[0] <= 1:\n            return [None, None, data.shape[0]]\n        feature = np.random.choice(data.shape[1])\n        threshold = np.random.uniform(data[:, feature].min(), data[:, feature].max())\n        left_data = data[data[:, feature] < threshold]\n        right_data = data[data[:, feature] >= threshold]\n        return [feature, threshold, build_tree(left_data, height_limit, i + 1), build_tree(right_data, height_limit, i + 1)]\n\n    trees = []\n    for _ in range(n_trees):\n        subsample_indices = np.random.choice(data.shape[0], size=min(sample_size, data.shape[0]), replace=False)\n        subsample = data[subsample_indices]\n        trees.append(build_tree(subsample, math.ceil(math.log2(subsample.shape[0]))))\n\n    scores = []\n    for x in data:\n        path_lengths = [path_length(x, tree) for tree in trees]\n        scores.append(np.mean(path_lengths))\n\n    phi = 2.0 * np.log(data.shape[0] - 1) - 2.0 * (data.shape[0] - 1) / data.shape[0]\n    scores = [2 ** (-y / phi) for y in scores]\n\n    threshold = np.percentile(scores, 100 * (1 - epsilon))\n    outliers = [i for i, score in enumerate(scores) if score > threshold]\n\n    return sorted(outliers)\n```\n\nThis script first defines two helper functions: `c(n)` and `path_length(x, tree)`. The `c(n)` function computes the expected path length of unsuccessful searches in a binary search tree. The `path_length(x, tree)` function computes the path length of an observation `x` in a given tree.\n\nThe `build_tree(data, height_limit)` function recursively builds a random binary tree. It chooses a random feature and a random threshold, and splits the data into two subsets based on this split.\n\nThe main function `detect_outliers(data, n_trees, sample_size, epsilon)` first builds a number of random isolation trees. Then, for each observation, it computes the average path length over all trees and converts it to an anomaly score. The anomaly score is then used to determine which observations are outliers.\n"}
{"task_id": 568, "completion_id": 0, "completion": "Here is a Python script that implements the Maximum Entropy Classifier with Generalized Iterative Scaling (GIS) algorithm:\n\n```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    # Build the empirical distributions\n    empirical_distributions = defaultdict(lambda: defaultdict(int))\n    for x, y in zip(X_train, y_train):\n        empirical_distributions[y][tuple(x)] += 1\n\n    # Initialize the weight vector\n    weights = np.zeros(len(empirical_distributions))\n\n    # Iteratively update the weight vector\n    for _ in range(n_iter):\n        # Calculate the normalization factor\n        Z = np.array([sum(math.exp(weights[y] * sum(empirical_distributions[y][tuple(x)] for y in empirical_distributions)) for x in X_train) for _ in empirical_distributions])\n\n        # Calculate the new weights\n        new_weights = np.array([sum(empirical_distributions[y][tuple(x)] * math.exp(weights[y] * sum(empirical_distributions[y][tuple(x)] for y in empirical_distributions)) for x in X_train) for y in empirical_distributions]) / Z\n\n        # Calculate the largest absolute update\n        max_update = max(abs(new_weights - weights))\n\n        # Update the weights\n        weights = new_weights\n\n        # Check if the largest absolute update is smaller than epsilon\n        if max_update < epsilon:\n            break\n\n    # Predict the labels for the test set\n    y_pred = []\n    for x in X_test:\n        # Calculate the conditional probabilities\n        conditional_probabilities = np.array([sum(empirical_distributions[y][tuple(x)] * math.exp(weights[y] * sum(empirical_distributions[y][tuple(x)] for y in empirical_distributions)) for y in empirical_distributions) for _ in empirical_distributions]) / sum(math.exp(weights[y] * sum(empirical_distributions[y][tuple(x)] for y in empirical_distributions)) for y in empirical_distributions)\n\n        # Predict the label with the highest conditional probability\n        y_pred.append(np.argmax(conditional_probabilities))\n\n    return y_pred\n```\n\nThis script first builds the empirical distributions from the training data. It then initializes the weight vector and iteratively updates it until the largest absolute update is smaller than `epsilon` or the number of iterations reaches `n_iter`. Finally, it predicts the labels for the test set and returns them.\n"}
{"task_id": 569, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    # Count the number of documents\n    num_docs = len(data)\n\n    # Count the number of documents each word appears in\n    word_counts = Counter()\n    for _, words in data:\n        word_counts.update(set(words))\n\n    # Calculate the document-frequency ratio for each word\n    word_ratios = {word: round(count / num_docs, 4) for word, count in word_counts.items()}\n\n    # Sort the words by their document-frequency ratio\n    sorted_words = sorted(word_ratios.items(), key=lambda x: x[1], reverse=True)\n\n    # Get the set of the most frequent words\n    if cut_off is None:\n        cut_off = len(word_ratios)\n    top_words = set(word for word, _ in sorted_words[:cut_off])\n\n    return sorted_words, top_words\n```\n\nThis script first counts the number of documents and the number of documents each word appears in. It then calculates the document-frequency ratio for each word and sorts the words by their ratio. Finally, it creates a set of the most frequent words according to the `cut_off` parameter.\n"}
{"task_id": 571, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           -1).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector\n    w = np.dot(X.T, alpha * y)\n    w_list = w.tolist()\n\n    # Compute the bias term\n    b = np.mean(y - np.dot(X, w))\n\n    # Round all elements to 4 decimal places\n    w_list = [round(elem, 4) for elem in w_list]\n    b = round(b, 4)\n\n    return w_list, b\n```\n\nThis function first computes the weight vector and bias term using the formulas provided in the task description. It then rounds all elements of the weight vector and the bias term to 4 decimal places. The weight vector is returned as a list of floats.\n"}
{"task_id": 572, "completion_id": 0, "completion": "Here is a Python script that implements the Local Outlier Factor (LOF) algorithm:\n\n```python\nimport numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    n = len(data)\n    distances = np.sqrt(np.sum((data[np.newaxis, :] - data[:, np.newaxis]) ** 2, axis=-1))\n\n    k_distances = np.zeros(n)\n    k_neighbors = np.zeros((n, k), dtype=int)\n    for i in range(n):\n        distances_to_i = distances[i, :]\n        k_nearest_neighbors = np.argpartition(distances_to_i, k)[:k+1]\n        k_nearest_neighbors = k_nearest_neighbors[k_nearest_neighbors != i]\n        k_distances[i] = np.max(distances_to_i[k_nearest_neighbors])\n        k_neighbors[i, :] = k_nearest_neighbors\n\n    reachability_distances = np.maximum(distances, k_distances[:, np.newaxis])\n    local_reachability_density = 1 / (np.sum(reachability_distances, axis=1) / k)\n    lof = np.sum(local_reachability_density[k_neighbors] / (k * local_reachability_density[:, np.newaxis]), axis=1) / k\n\n    lof_scores = np.round(lof, 4)\n    outlier_indices = np.where(lof_scores > epsilon)[0]\n\n    return lof_scores.tolist(), outlier_indices.tolist()\n```\n\nThis script first computes the pair-wise Euclidean distances between all samples. Then, for each sample, it computes its k-distance and the indices of its k nearest neighbors. The reachability distance between two points is defined as the maximum of their k-distance and their Euclidean distance. The Local Reachability Density (LRD) of a sample is computed as the ratio of the sum of reachability distances to its k-distance. Finally, the Local Outlier Factor (LOF) of a sample is computed as the ratio of the sum of LRDs of its k-nearest neighbors to its LRD. The script returns a tuple consisting of the list of LOF scores rounded to four decimals and the ascending list of indices of all samples whose LOF score is strictly larger than `epsilon`.\n"}
{"task_id": 574, "completion_id": 0, "completion": "Here is a Python script that implements the `generate_data` function as described:\n\n```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n\n    for c in range(m):\n        base = 10 * (c // 2) + 5\n        X_train.append(np.round(np.random.uniform(base+1, base+9, (n_train, 2)), 4))\n        y_train.append(np.full(n_train, c))\n        X_val.append(np.round(np.random.uniform(base+1, base+9, (n_val, 2)), 4))\n        y_val.append(np.full(n_val, c))\n\n    return (np.vstack(X_train), np.vstack(X_val), np.hstack(y_train), np.hstack(y_val))\n```\n\nThis script first checks if a seed is provided. If so, it sets the random seed. Then it initializes empty lists for the training and validation data and labels. For each class, it generates the training and validation data and labels, rounds them to 4 decimal places, and appends them to the appropriate lists. Finally, it stacks the lists into NumPy arrays and returns them.\n"}
{"task_id": 579, "completion_id": 0, "completion": "Here is a Python script that implements the K-Means clustering algorithm:\n\n```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    # Initialization\n    centres = X[:k].tolist()\n    labels = [0] * len(X)\n\n    for _ in range(max_iters):\n        # Assignment step\n        new_labels = []\n        for point in X:\n            distances = [np.linalg.norm(point - np.array(centre)) for centre in centres]\n            new_labels.append(np.argmin(distances))\n\n        # Update step\n        if labels == new_labels:\n            break\n        labels = new_labels\n        for i in range(k):\n            points_in_cluster = [x for x, label in zip(X, labels) if label == i]\n            if points_in_cluster:\n                centres[i] = np.mean(points_in_cluster, axis=0).tolist()\n\n    # Round the coordinates of the centres to 4 decimals\n    centres = [[round(coord, 4) for coord in centre] for centre in centres]\n\n    return labels, centres\n```\n\nThis script first initializes the cluster centers as the first *k* points in the dataset. Then, it performs the Lloyd iterations until the assignments stop changing or the maximum number of iterations is reached. In each iteration, it assigns each point to the nearest cluster center and then updates the cluster centers as the mean of the points in each cluster. Finally, it rounds the coordinates of the cluster centers to 4 decimal places.\n"}
{"task_id": 581, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n    w = np.zeros(n)\n    b = 0.0\n\n    if learning_rate == 0 or iterations == 0:\n        return (w.tolist(), round(b, 4))\n\n    for _ in range(iterations):\n        y_pred = np.dot(X, w) + b\n        residuals = y - y_pred\n\n        dw = (-2 * np.dot(X.T, residuals) + l1_penalty * np.sign(w) + 2 * l2_penalty * w) / m\n        db = -2 * np.sum(residuals) / m\n\n        w -= learning_rate * dw\n        b -= learning_rate * db\n\n    return (np.round(w, 4).tolist(), round(b, 4))\n```\n\nThis function first initializes the weights and bias to zero. If the learning rate or the number of iterations is zero, it returns the initial parameters. Otherwise, it performs the specified number of iterations of gradient descent. For each iteration, it computes the predictions, the residuals, and the gradients. It then updates the weights and bias using these gradients. Finally, it returns the learned weights and bias, rounded to four decimal places.\n"}
{"task_id": 591, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.array(x)\n    for layer in weights[:-1]:\n        x = np.array([neuron[0] + np.dot(neuron[1:], x) for neuron in layer])\n        x = np.maximum(x, 0)\n    output = np.array([neuron[0] + np.dot(neuron[1:], x) for neuron in weights[-1]])\n    return output.round(4).tolist() if len(output) > 1 else output.item().round(4)\n```\n\nThis script first converts the input vector `x` to a numpy array. Then, for each layer (except the last one) in the network, it computes the dot product of the weights and the input vector, adds the bias term, and applies the ReLU activation function. After the last layer, it computes the dot product of the weights and the input vector, adds the bias term, and returns the result. If the output layer has more than one neuron, it returns the result as a list of floats, otherwise it returns a single float.\n"}
{"task_id": 595, "completion_id": 0, "completion": "Here is a Python script that implements the K-Means clustering algorithm from scratch:\n\n```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Your task: implement here. See docstring in the description.\"\"\"\n    # Initialise the centroids with the first k samples in X\n    centroids = X[:k]\n\n    # Repeat for at most max_iters iterations\n    for _ in range(max_iters):\n        # Assign every sample to the nearest centroid using the squared Euclidean distance\n        distances = np.sqrt(((X - centroids[:, np.newaxis])**2).sum(axis=-1))\n        labels = np.argmin(distances, axis=0)\n\n        # Update each centroid to the arithmetic mean of the samples currently assigned to it\n        new_centroids = np.array([X[labels==i].mean(axis=0) for i in range(k)])\n\n        # Stop early if all centroids move less than 1e-4 in a full iteration\n        if np.all(np.abs(new_centroids - centroids) < 1e-4):\n            break\n\n        # If a cluster becomes empty during an update, keep its centroid unchanged\n        new_centroids = np.where(np.isnan(new_centroids), centroids, new_centroids)\n\n        centroids = new_centroids\n\n    # After convergence, sort the centroids in ascending lexicographical order\n    centroids = centroids[np.lexsort(centroids.T[::-1])]\n\n    # Round every coordinate to 4 decimal places\n    centroids = np.round(centroids, 4).tolist()\n\n    return centroids\n```\n\nThis script first initializes the centroids with the first `k` samples in `X`. It then enters a loop where it assigns each sample to the nearest centroid, updates the centroids to the mean of the samples assigned to them, and checks if the centroids have moved less than `1e-4` in a full iteration. If they have, it breaks the loop. If a cluster becomes empty during an update, it keeps its centroid unchanged. After convergence, it sorts the centroids in ascending lexicographical order and rounds each coordinate to 4 decimal places. Finally, it returns the sorted, rounded centroids as a list of lists.\n"}
