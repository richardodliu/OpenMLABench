{"task_id": 0, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Perform Ridge Regression using the closed-form solution.\n\n    Parameters:\n    - data: np.ndarray, shape (n_samples, n_features + 1)\n        The last column is the target variable y.\n        The preceding columns are the feature matrix X.\n    - alpha: float, default 0.0\n        Regularization strength (lambda).\n\n    Returns:\n    - list[float]: Weight vector w with the coefficients rounded to 4 decimal places.\n\n    If the matrix X^T X + alpha * I is not invertible, returns -1.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X_b = np.c_[np.ones(X.shape[0]), X]\n    n_features = X_b.shape[1]\n    I = np.eye(n_features)\n    A = X_b.T @ X_b + alpha * I\n    try:\n        w = np.linalg.inv(A) @ X_b.T @ y\n    except np.linalg.LinAlgError:\n        return -1\n    return [round(coeff, 4) for coeff in w]\ndata = np.array([[1, 2], [2, 3], [3, 5]])\nalpha = 0.1"}
{"task_id": 0, "completion_id": 1, "solution": "import numpy as np\nimport numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Solves the Ridge Regression using the closed-form solution.\n    \n    Parameters:\n        data (np.ndarray): A 2D numpy array where the last column contains target values y,\n                           and all preceding columns are features X.\n        alpha (float): The L2 regularization strength (default is 0.0 for standard linear regression).\n    \n    Returns:\n        list: Weight vector rounded to 4 decimal places.\n              Returns -1 if the matrix (X.T @ X + alpha * I) is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X = np.hstack((np.ones((X.shape[0], 1)), X))\n    n_features = X.shape[1]\n    identity_matrix = np.eye(n_features)\n    A = X.T @ X + alpha * identity_matrix\n    try:\n        A_inv = np.linalg.inv(A)\n    except np.linalg.LinAlgError:\n        return -1\n    w = A_inv @ X.T @ y\n    return [float(round(weight, 4)) for weight in w]\ndata = np.array([[1, 1, 1], [2, 4, 2], [3, 5, 2.3]])"}
{"task_id": 0, "completion_id": 2, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Computes the Ridge Regression weight vector using the closed-form solution.\n\n    Parameters:\n    - data: np.ndarray, shape (n_samples, n_features + 1)\n        Input data where the last column contains target values y,\n        and all preceding columns contain feature values X.\n    - alpha: float (default=0.0)\n        Regularization strength. Larger values result in more shrinkage.\n\n    Returns:\n    - list[float]: Weight vector rounded to 4 decimal places.\n        Returns -1 if the matrix (X.T @ X + alpha * I) is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X_b = np.c_[np.ones(X.shape[0]), X]\n    n_features = X_b.shape[1]\n    I = np.eye(n_features)\n    try:\n        w_hat = np.linalg.inv(X_b.T @ X_b + alpha * I) @ X_b.T @ y\n    except np.linalg.LinAlgError:\n        return -1\n    return [round(float(weight), 4) for weight in w_hat]\ndata = np.array([[1, 1, 3], [2, 2, 4], [3, 3, 5]])"}
{"task_id": 0, "completion_id": 3, "solution": "import numpy as np\nimport numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Perform Ridge Regression using the closed-form solution.\n    \n    Parameters:\n        data (np.ndarray): 2D array where the last column is the target y,\n                            and the rest are the features X.\n        alpha (float): Regularization strength (\u03bb), default is 0.0.\n\n    Returns:\n        list of float: Weight vector (including the bias), rounded to 4 decimal places.\n        Returns -1 if the matrix (X^T X + \u03b1 * I) is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X = np.hstack([np.ones((X.shape[0], 1)), X])\n    Xt = X.T\n    n_features = X.shape[1]\n    matrix_to_invert = Xt @ X + alpha * np.eye(n_features)\n    if np.linalg.det(matrix_to_invert) == 0:\n        return -1\n    try:\n        w = np.linalg.inv(matrix_to_invert) @ Xt @ y\n    except np.linalg.LinAlgError:\n        return -1\n    return [round(weight, 4) for weight in w.tolist()]\ndata = np.array([[1, 2, 3], [2, 3, 5], [3, 4, 7]])"}
{"task_id": 0, "completion_id": 4, "solution": "import numpy as np\nimport numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Computes the weight vector for Ridge Regression using the closed-form solution.\n    \n    Parameters:\n    - data (np.ndarray): Input matrix where last column is the target y, \n                         other columns are the featues X.\n    - alpha (float): Regularization strength (must be >= 0).\n    \n    Returns:\n    - list[float]: The weight vector rounded to 4 decimal places.\n                   Returns -1 if the matrix is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X = np.hstack([np.ones((X.shape[0], 1)), X])\n    n_features_with_bias = X.shape[1]\n    I = np.eye(n_features_with_bias)\n    A = X.T @ X + alpha * I\n    if np.linalg.det(A) == 0:\n        return -1\n    w = np.linalg.inv(A) @ X.T @ y\n    return [round(weight, 4) for weight in w]"}
{"task_id": 0, "completion_id": 5, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Performs Ridge Regression using the closed-form solution.\n\n    Parameters:\n    - data: A numpy ndarray where the last column is the target y,\n            and the rest are feature columns.\n    - alpha: Regularisation strength (\u03bb \u2265 0).\n\n    Returns:\n    - A Python list of the weight vector (bias included), rounded to 4 decimal places.\n    - Returns -1 if the matrix (X.T @ X + \u03b1 * I) is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X = np.hstack((np.ones((X.shape[0], 1)), X))\n    n_features = X.shape[1]\n    I = np.eye(n_features)\n    X_T_X = X.T @ X\n    reg_term = alpha * I\n    A = X_T_X + reg_term\n    det = np.linalg.det(A)\n    if abs(det) < 1e-12:\n        return -1\n    w = np.linalg.inv(A) @ X.T @ y\n    return [round(wi, 4) for wi in w.tolist()]"}
{"task_id": 0, "completion_id": 6, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Computes the weight vector for Ridge Regression using the closed-form solution.\n    \n    Parameters:\n        data (np.ndarray): A 2D numpy array where the last column is the target y,\n                           and the preceding columns are the features X.\n        alpha (float): Regularisation strength (default is 0.0).\n\n    Returns:\n        list[float]: Weight vector rounded to 4 decimal places.\n                     If the matrix is not invertible, returns -1.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X = np.hstack((np.ones((X.shape[0], 1)), X))\n    Xt = X.T\n    n_features = X.shape[1]\n    identity = np.eye(n_features)\n    reg_matrix = alpha * identity\n    matrix = Xt @ X + reg_matrix\n    determinant = np.linalg.det(matrix)\n    if np.isclose(determinant, 0):\n        return -1\n    w_hat = np.linalg.inv(matrix) @ Xt @ y\n    return [round(w, 4) for w in w_hat]"}
{"task_id": 0, "completion_id": 7, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Compute the weight vector for Ridge (L2-regularized) Linear Regression using \n    the closed-form solution.\n\n    Parameters:\n    - data : np.ndarray\n        A 2D NumPy array where the last column is the target variable y and\n        the preceding columns are the features X.\n    - alpha : float, optional\n        Regularization strength (default is 0.0, which corresponds to ordinary least squares).\n\n    Returns:\n    - list[float]\n        A list of coefficients (rounded to 4 decimal places) including the \n        intercept term.\n\n    Raises:\n    - Returns -1 if the matrix (X^T X + alpha * I) is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X = np.hstack([np.ones((X.shape[0], 1)), X])\n    n_features = X.shape[1]\n    I = np.eye(n_features)\n    A = X.T @ X + alpha * I\n    if np.linalg.det(A) == 0:\n        return -1\n    try:\n        w = np.linalg.inv(A) @ X.T @ y\n    except np.linalg.LinAlgError:\n        return -1\n    return [round(coeff, 4) for coeff in w]"}
{"task_id": 0, "completion_id": 8, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Perform Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    \n    Parameters:\n    - data: numpy ndarray where the last column is the target y and all previous columns are the features X.\n    - alpha: Regularisation strength (default is 0.0, which corresponds to ordinary least squares).\n    \n    Returns:\n    - A list of estimated weights (including the bias) rounded to 4 decimal places.\n      Returns -1 if the matrix (X^T * X + alpha * I) is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X = np.hstack((np.ones((X.shape[0], 1)), X))\n    n_features = X.shape[1]\n    I = np.eye(n_features)\n    A = X.T @ X + alpha * I\n    determinant = np.linalg.det(A)\n    if abs(determinant) < 1e-10:\n        return -1\n    w = np.linalg.inv(A) @ X.T @ y\n    return [round(coef, 4) for coef in w]"}
{"task_id": 0, "completion_id": 9, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Perform Ridge (L2-regularised) Linear Regression using the closed-form solution.\n    \n    Parameters:\n        data (np.ndarray): A 2D NumPy array where the last column is the target y,\n                          and all preceding columns are features X.\n        alpha (float): Regularization strength (default is 0.0).\n    \n    Returns:\n        list[float]: A list of estimated weights (including the bias) rounded to 4 decimal places.\n                     Returns -1 if the matrix is not invertible (determinant is 0).\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X = np.hstack([np.ones((X.shape[0], 1)), X])\n    n_features = X.shape[1]\n    reg_matrix = np.eye(n_features) * alpha\n    X_t_X = X.T @ X\n    X_t_y = X.T @ y\n    try:\n        w = np.linalg.inv(X_t_X + reg_matrix) @ X_t_y\n    except np.linalg.LinAlgError:\n        return -1\n    return [float(np.round(w_i, 4)) for w_i in w]\ndata = np.array([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]])\nalpha = 0.1"}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    updates = 0\n    i = 0\n    while i < n_samples and updates < n_iter:\n        x_i = X_train[i]\n        y_i = y_train[i]\n        activation = 0.0\n        for j in range(n_samples):\n            activation += alpha[j] * y_train[j] * np.dot(X_train[j], x_i)\n        margin = y_i * (activation + b)\n        if margin <= 0:\n            alpha[i] += eta\n            b += eta * y_i\n            updates += 1\n            i = 0\n        else:\n            i += 1\n    w = np.zeros(n_features)\n    for i in range(n_samples):\n        w += alpha[i] * y_train[i] * X_train[i]\n    w_rounded = [round(weight, 4) for weight in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 1, "completion_id": 1, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    update_count = 0\n    K = np.dot(X_train, X_train.T)\n    for i in range(n_samples):\n        activation = np.dot(alpha * y_train, K[:, i])\n        margin = y_train[i] * (activation + b)\n        if margin <= 0:\n            alpha[i] += eta\n            b += eta * y_train[i]\n            update_count += 1\n            i = -1\n        if update_count == 0:\n            break\n        elif update_count >= n_iter:\n            break\n    w = np.dot(alpha * y_train, X_train)\n    w = [round(wi, 4) for wi in w]\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 1, "completion_id": 2, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    updates = 0\n    K = np.dot(X_train, X_train.T)\n    while updates < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.dot(alpha * y_train, K[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                updates += 1\n                break\n        if not updated:\n            break\n    w = np.dot(alpha * y_train, X_train)\n    w = [float(round(val, 4)) for val in w]\n    b = round(float(b), 4)\n    return (w, b)"}
{"task_id": 1, "completion_id": 3, "solution": "import numpy as np\nimport numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples = X_train.shape[0]\n    alpha = np.zeros(n_samples, dtype=float)\n    b = 0.0\n    update_count = 0\n    i = 0\n    K = np.dot(X_train, X_train.T)\n    while update_count < n_iter:\n        activation = sum((alpha[j] * y_train[j] * K[j, i] for j in range(n_samples)))\n        margin = y_train[i] * (activation + b)\n        if margin <= 0:\n            alpha[i] += eta\n            b += eta * y_train[i]\n            update_count += 1\n            i = 0\n        else:\n            i += 1\n        if i == n_samples:\n            break\n    w = np.sum(alpha[:, np.newaxis] * y_train[:, np.newaxis] * X_train, axis=0)\n    w = [round(x, 4) for x in w]\n    b = round(b, 4)\n    return (w, b)\nX_train = np.array([[1, 2], [2, 3], [3, 1]])\ny_train = np.array([1, 1, -1])"}
{"task_id": 1, "completion_id": 4, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    update_count = 0\n    K = np.dot(X_train, X_train.T)\n    y = y_train\n    indices = np.arange(n_samples)\n    i = 0\n    while update_count < n_iter:\n        for i in indices:\n            activation = 0.0\n            for j in range(n_samples):\n                activation += alpha[j] * y[j] * K[j, i]\n            margin = y[i] * (activation + b)\n            if margin <= 1e-08:\n                alpha[i] += eta\n                b += eta * y[i]\n                update_count += 1\n                i = -1\n                break\n        else:\n            break\n    w = np.zeros(n_features)\n    for i in range(n_samples):\n        if alpha[i] > 1e-08:\n            w += alpha[i] * y[i] * X_train[i]\n    w_rounded = [round(wi, 4) for wi in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 1, "completion_id": 5, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"\n    Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples = X_train.shape[0]\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    update_count = 0\n    K = np.dot(X_train, X_train.T)\n    i = 0\n    while update_count < n_iter:\n        activated = 0\n        for i in range(n_samples):\n            activation = np.dot(alpha * y_train, K[i]) + b\n            if y_train[i] * activation <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                update_count += 1\n                activated = 1\n                break\n        if not activated:\n            break\n    w = np.dot(alpha * y_train, X_train).round(4)\n    b_rounded = round(b, 4)\n    return (w.tolist(), b_rounded)"}
{"task_id": 1, "completion_id": 6, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    update_count = 0\n    K = np.dot(X_train, X_train.T)\n    for i in range(n_samples):\n        activation = np.dot(alpha * y_train, K[:, i])\n        margin = y_train[i] * (activation + b)\n        if margin <= 0:\n            alpha[i] += eta\n            b += eta * y_train[i]\n            update_count += 1\n            i = -1\n        if update_count >= n_iter:\n            break\n    w = np.dot(alpha, np.diag(y_train) @ X_train)\n    return ([round(val, 4) for val in w.tolist()], round(b, 4))"}
{"task_id": 1, "completion_id": 7, "solution": "import numpy as np\nimport numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    assert np.array_equal(np.unique(y_train), np.array([-1, 1]))\n    K = np.dot(X_train, X_train.T)\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    update_count = 0\n    i = 0\n    while update_count < n_iter:\n        y_pred = y_train[i]\n        activation = 0.0\n        for j in range(n_samples):\n            activation += alpha[j] * y_train[j] * K[j, i]\n        margin = y_pred * (activation + b)\n        if margin <= 0:\n            alpha[i] += eta\n            b += eta * y_train[i]\n            update_count += 1\n            i = 0\n        else:\n            i = (i + 1) % n_samples\n        if i == 0 and np.all(y_train * (K @ (alpha * y_train) + b) > 0):\n            break\n    w = np.dot(alpha * y_train, X_train)\n    return (list(np.round(w, 4)), round(b, 4))\nX_train = np.array([[1, 1], [2, 2], [3, 3], [2, 1], [1, 2]])\ny_train = np.array([1, 1, 1, -1, -1])"}
{"task_id": 1, "completion_id": 8, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, _) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    gram = X_train @ X_train.T\n    iter_count = 0\n    max_updates = n_iter\n    for i in range(n_samples):\n        activation = y_train @ (alpha * gram[:, i])\n        margin = y_train[i] * (activation + b)\n        if margin <= 0:\n            alpha[i] += eta\n            b += eta * y_train[i]\n            i = -1\n            iter_count += 1\n            if iter_count >= max_updates:\n                break\n    w = (alpha * y_train)[:, np.newaxis] @ X_train\n    w = np.sum(w, axis=0)\n    return (list(np.round(w, 4)), round(b, 4))\nX_train = np.array([[1, 2], [2, 3], [3, 3]])\ny_train = np.array([1, 1, -1])"}
{"task_id": 1, "completion_id": 9, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples = X_train.shape[0]\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    K = X_train @ X_train.T\n    update_count = 0\n    i = 0\n    while update_count < n_iter:\n        activation = 0.0\n        for j in range(n_samples):\n            activation += alpha[j] * y_train[j] * K[j, i]\n        margin = y_train[i] * (activation + b)\n        if margin <= 0:\n            alpha[i] += eta\n            b += eta * y_train[i]\n            update_count += 1\n            i = 0\n        else:\n            i += 1\n            if i == n_samples:\n                break\n    w = np.sum(alpha[:, np.newaxis] * y_train[:, np.newaxis] * X_train, axis=0)\n    w = [round(x, 4) for x in w]\n    b = round(b, 4)\n    return (w, b)\nX_train = np.array([[1, 2], [2, 3], [3, 3]])\ny_train = np.array([1, 1, -1])"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    return {'identity': {'link': lambda mu: mu.astype(float), 'inv_link': lambda eta: eta.astype(float), 'dlink_dmu': lambda mu: np.ones_like(mu).astype(float)}, 'log': {'link': lambda mu: np.log(mu), 'inv_link': lambda eta: np.exp(eta), 'dlink_dmu': lambda mu: 1.0 / mu}, 'logit': {'link': lambda mu: np.log(mu / (1.0 - mu)), 'inv_link': lambda eta: 1.0 / (1.0 + np.exp(-eta)), 'dlink_dmu': lambda mu: 1.0 / (mu * (1.0 - mu))}}"}
{"task_id": 2, "completion_id": 1, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    return {'identity': {'link': lambda mu: np.array(mu, dtype=float), 'inv_link': lambda eta: np.array(eta, dtype=float), 'derivative': lambda mu: np.ones_like(mu, dtype=float)}, 'log': {'link': lambda mu: np.log(mu), 'inv_link': lambda eta: np.exp(eta), 'derivative': lambda mu: 1 / mu}, 'logit': {'link': lambda mu: np.log(mu / (1 - mu)), 'inv_link': lambda eta: 1 / (1 + np.exp(-eta)), 'derivative': lambda mu: 1 / (mu * (1 - mu))}}"}
{"task_id": 2, "completion_id": 2, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return np.asarray(mu)\n\n    def identity_inv(eta):\n        return np.asarray(eta)\n\n    def identity_deriv(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(np.asarray(mu))\n\n    def log_inv(eta):\n        return np.exp(np.asarray(eta))\n\n    def log_deriv(mu):\n        mu_arr = np.asarray(mu)\n        return 1.0 / mu_arr\n\n    def logit_link(mu):\n        mu_arr = np.asarray(mu)\n        return np.log(mu_arr / (1 - mu_arr))\n\n    def logit_inv(eta):\n        eta_arr = np.asarray(eta)\n        return 1.0 / (1.0 + np.exp(-eta_arr))\n\n    def logit_deriv(mu):\n        mu_arr = np.asarray(mu)\n        return 1.0 / (mu_arr * (1 - mu_arr))\n    return {'identity': {'link': identity_link, 'inv_link': identity_inv, 'deriv': identity_deriv}, 'log': {'link': log_link, 'inv_link': log_inv, 'deriv': log_deriv}, 'logit': {'link': logit_link, 'inv_link': logit_inv, 'deriv': logit_deriv}}"}
{"task_id": 2, "completion_id": 3, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def id_link(mu):\n        return mu\n\n    def inv_id_link(eta):\n        return eta\n\n    def deriv_id_link(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def inv_log_link(eta):\n        return np.exp(eta)\n\n    def deriv_log_link(mu):\n        return 1.0 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def inv_logit_link(eta):\n        return 1.0 / (1 + np.exp(-eta))\n\n    def deriv_logit_link(mu):\n        return 1.0 / (mu * (1 - mu))\n    return {'identity': {'link': id_link, 'inv_link': inv_id_link, 'deriv': deriv_id_link}, 'log': {'link': log_link, 'inv_link': inv_log_link, 'deriv': deriv_log_link}, 'logit': {'link': logit_link, 'inv_link': inv_logit_link, 'deriv': deriv_logit_link}}"}
{"task_id": 2, "completion_id": 4, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity(mu):\n        return mu\n\n    def inv_identity(eta):\n        return eta\n\n    def deriv_identity(mu):\n        return np.ones_like(mu)\n\n    def log(mu):\n        return np.log(mu)\n\n    def inv_log(eta):\n        return np.exp(eta)\n\n    def deriv_log(mu):\n        return 1 / mu\n\n    def logit(mu):\n        return np.log(mu / (1 - mu))\n\n    def inv_logit(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def deriv_logit(mu):\n        return 1 / (mu * (1 - mu))\n    return {'identity': {'link': identity, 'inv_link': inv_identity, 'derivative': deriv_identity}, 'log': {'link': log, 'inv_link': inv_log, 'derivative': deriv_log}, 'logit': {'link': logit, 'inv_link': inv_logit, 'derivative': deriv_logit}}"}
{"task_id": 2, "completion_id": 5, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    return {'identity': {'link': lambda mu: mu, 'inv_link': lambda eta: eta, 'derivative': lambda mu: np.ones_like(mu)}, 'log': {'link': lambda mu: np.log(mu), 'inv_link': lambda eta: np.exp(eta), 'derivative': lambda mu: 1.0 / mu}, 'logit': {'link': lambda mu: np.log(mu / (1 - mu)), 'inv_link': lambda eta: 1.0 / (1.0 + np.exp(-eta)), 'derivative': lambda mu: 1.0 / (mu * (1 - mu))}}"}
{"task_id": 2, "completion_id": 6, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    links = {}\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_deriv(mu):\n        return np.ones_like(mu)\n    links['identity'] = {'link': identity_link, 'inv_link': identity_inv_link, 'deriv': identity_deriv}\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_deriv(mu):\n        return 1.0 / mu\n    links['log'] = {'link': log_link, 'inv_link': log_inv_link, 'deriv': log_deriv}\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1.0 / (1.0 + np.exp(-eta))\n\n    def logit_deriv(mu):\n        return 1.0 / (mu * (1 - mu))\n    links['logit'] = {'link': logit_link, 'inv_link': logit_inv_link, 'deriv': logit_deriv}\n    return links"}
{"task_id": 2, "completion_id": 7, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"\n    Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse, and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    return {'identity': {'link': lambda mu: mu, 'inv_link': lambda eta: eta, 'deriv': lambda mu: np.ones_like(mu)}, 'log': {'link': np.log, 'inv_link': np.exp, 'deriv': lambda mu: 1.0 / mu}, 'logit': {'link': lambda mu: np.log(mu / (1.0 - mu)), 'inv_link': lambda eta: 1.0 / (1.0 + np.exp(-eta)), 'deriv': lambda mu: 1.0 / (mu * (1.0 - mu))}}"}
{"task_id": 2, "completion_id": 8, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    return {'identity': {'link': lambda mu: mu, 'inv_link': lambda eta: eta, 'derivative': lambda mu: mu * 0 + 1}, 'log': {'link': lambda mu: np.log(mu), 'inv_link': lambda eta: np.exp(eta), 'derivative': lambda mu: 1 / mu}, 'logit': {'link': lambda mu: np.log(mu / (1 - mu)), 'inv_link': lambda eta: 1 / (1 + np.exp(-eta)), 'derivative': lambda mu: 1 / (mu * (1 - mu))}}"}
{"task_id": 2, "completion_id": 9, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    links = {}\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n    links['identity'] = {'link': identity_link, 'inv_link': identity_inv_link, 'derivative': identity_derivative}\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1.0 / mu\n    links['log'] = {'link': log_link, 'inv_link': log_inv_link, 'derivative': log_derivative}\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1.0 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1.0 / (mu * (1 - mu))\n    links['logit'] = {'link': logit_link, 'inv_link': logit_inv_link, 'derivative': logit_derivative}\n    return links"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\nimport numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    n_samples = data.shape[0]\n    depth_result = [0] * n_samples\n\n    class Node:\n\n        def __init__(self, indices, depth=0, left=None, right=None):\n            self.indices = indices\n            self.depth = depth\n            self.left = left\n            self.right = right\n            self.is_leaf = False\n\n    def build_tree(node):\n        indices = node.indices\n        if len(indices) < 3:\n            node.is_leaf = True\n            return\n        f = np.random.randint(data.shape[1])\n        min_val = data[indices, f].min()\n        max_val = data[indices, f].max()\n        if min_val == max_val:\n            node.is_leaf = True\n            return\n        v = np.random.uniform(min_val, max_val)\n        left_indices = [i for i in indices if data[i, f] <= v]\n        right_indices = [i for i in indices if data[i, f] > v]\n        node.left = Node(left_indices, depth=node.depth + 1)\n        node.right = Node(right_indices, depth=node.depth + 1)\n        build_tree(node.left)\n        build_tree(node.right)\n\n    def record_leaf_depths(node):\n        if node.is_leaf:\n            for idx in node.indices:\n                depth_result[idx] = node.depth\n        else:\n            if node.left:\n                record_leaf_depths(node.left)\n            if node.right:\n                record_leaf_depths(node.right)\n    root = Node(list(range(n_samples)))\n    build_tree(root)\n    record_leaf_depths(root)\n    return depth_result\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 1, "solution": "import numpy as np\nfrom collections import deque\nimport numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    (n_samples, n_features) = data.shape\n\n    class Node:\n\n        def __init__(self, indices):\n            self.indices = indices\n            self.left = None\n            self.right = None\n            self.feature = None\n            self.value = None\n            self.depth = None\n    root = Node(np.arange(n_samples))\n    nodes_queue = deque([root])\n    while nodes_queue:\n        node = nodes_queue.popleft()\n        indices = node.indices\n        n_current = len(indices)\n        if n_current < 3:\n            continue\n        f = np.random.randint(n_features)\n        min_val = np.min(data[indices, f])\n        max_val = np.max(data[indices, f])\n        v = np.random.uniform(min_val, max_val)\n        left_indices = indices[data[indices, f] <= v]\n        right_indices = indices[data[indices, f] > v]\n        node.feature = f\n        node.value = v\n        node.left = Node(left_indices)\n        node.right = Node(right_indices)\n        nodes_queue.append(node.left)\n        nodes_queue.append(node.right)\n    depths = [0] * n_samples\n\n    def traverse(node, depth):\n        indices = node.indices\n        if node.left is None and node.right is None:\n            for idx in indices:\n                depths[idx] = depth\n            return\n        if node.left:\n            traverse(node.left, depth + 1)\n        if node.right:\n            traverse(node.right, depth + 1)\n    traverse(root, 0)\n    return depths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 2, "solution": "import numpy as np\nfrom collections import deque\nimport numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    (n_samples, n_features) = data.shape\n    depths = [0] * n_samples\n\n    class Node:\n\n        def __init__(self, indices, depth):\n            self.indices = indices\n            self.left = None\n            self.right = None\n            self.depth = depth\n            if len(indices) < 3:\n                self.leaf = True\n                for idx in indices:\n                    depths[idx] = depth\n            else:\n                self.leaf = False\n                self.split_feature = np.random.randint(0, n_features)\n                col = data[indices, self.split_feature]\n                self.split_value = np.random.uniform(np.min(col), np.max(col))\n                left_indices = []\n                right_indices = []\n                for idx in indices:\n                    if data[idx, self.split_feature] <= self.split_value:\n                        left_indices.append(idx)\n                    else:\n                        right_indices.append(idx)\n                self.left = Node(left_indices, depth + 1)\n                self.right = Node(right_indices, depth + 1)\n    root_indices = list(range(n_samples))\n    Node(root_indices, 0)\n    return depths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 3, "solution": "import numpy as np\nimport numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    (n_samples, n_features) = data.shape\n    path_lengths = [0] * n_samples\n\n    def build_tree(indices, depth):\n        if len(indices) < 3:\n            for idx in indices:\n                path_lengths[idx] = depth\n            return\n        f = np.random.choice(n_features)\n        min_f = np.min(data[indices, f])\n        max_f = np.max(data[indices, f])\n        if min_f == max_f:\n            for idx in indices:\n                path_lengths[idx] = depth\n            return\n        v = np.random.uniform(min_f, max_f)\n        left_indices = [i for i in indices if data[i, f] <= v]\n        right_indices = [i for i in indices if data[i, f] > v]\n        build_tree(left_indices, depth + 1)\n        build_tree(right_indices, depth + 1)\n    build_tree(list(range(n_samples)), 0)\n    return path_lengths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 4, "solution": "import numpy as np\nfrom collections import deque\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    (n_samples, n_features) = data.shape\n    depths = [0] * n_samples\n\n    class Node:\n\n        def __init__(self, indices, depth=0, left=None, right=None, feature=None, split_value=None):\n            self.indices = indices\n            self.depth = depth\n            self.left = left\n            self.right = right\n            self.feature = feature\n            self.split_value = split_value\n\n    def build_tree(node):\n        if len(node.indices) < 3:\n            return\n        f = np.random.randint(n_features)\n        min_val = np.min(data[node.indices, f])\n        max_val = np.max(data[node.indices, f])\n        split_value = np.random.uniform(min_val, max_val)\n        left_indices = [idx for idx in node.indices if data[idx, f] <= split_value]\n        right_indices = [idx for idx in node.indices if data[idx, f] > split_value]\n        node.left = Node(left_indices, depth=node.depth + 1)\n        node.right = Node(right_indices, depth=node.depth + 1)\n        node.feature = f\n        node.split_value = split_value\n        build_tree(node.left)\n        build_tree(node.right)\n\n    def record_leaf_depths(node):\n        if not node.left and (not node.right):\n            for idx in node.indices:\n                depths[idx] = node.depth\n        else:\n            record_leaf_depths(node.left)\n            record_leaf_depths(node.right)\n    root = Node(list(range(n_samples)), depth=0)\n    build_tree(root)\n    record_leaf_depths(root)\n    return depths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 5, "solution": "import numpy as np\nfrom collections import deque\nimport numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the random seed is set to 0 for reproducibility.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    n_samples = data.shape[0]\n    tree = []\n    root_index = 0\n    build_queue = deque()\n    tree.append(None)\n    build_queue.append((0, np.arange(n_samples)))\n    while build_queue:\n        (node_idx, indices) = build_queue.popleft()\n        n = indices.size\n        if n < 3:\n            tree[node_idx] = (indices.tolist(),)\n        else:\n            feature_idx = np.random.randint(data.shape[1])\n            min_val = data[indices, feature_idx].min()\n            max_val = data[indices, feature_idx].max()\n            v = np.random.uniform(min_val, max_val)\n            left_mask = data[indices, feature_idx] <= v\n            left_indices = indices[left_mask]\n            right_indices = indices[~left_mask]\n            left_idx = len(tree)\n            right_idx = left_idx + 1\n            tree.append(None)\n            tree.append(None)\n            tree[node_idx] = (feature_idx, v, left_idx, right_idx)\n            build_queue.append((left_idx, left_indices))\n            build_queue.append((right_idx, right_indices))\n    depths = [0] * n_samples\n    traversal_queue = deque()\n    traversal_queue.append((root_index, 0))\n    while traversal_queue:\n        (node_idx, depth) = traversal_queue.popleft()\n        node = tree[node_idx]\n        if isinstance(node[0], list):\n            for idx in node[0]:\n                depths[idx] = depth\n        else:\n            (_, split_value, left_idx, right_idx) = node\n            traversal_queue.append((left_idx, depth + 1))\n            traversal_queue.append((right_idx, depth + 1))\n    return depths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 6, "solution": "import numpy as np\nfrom collections import deque\nimport numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    (n_samples, n_features) = data.shape\n    path_lengths = [-1] * n_samples\n\n    class Node:\n\n        def __init__(self, indices):\n            self.indices = indices\n            self.left = None\n            self.right = None\n            self.feature = None\n            self.value = None\n\n    def build_tree(node, depth=0):\n        if len(node.indices) < 3:\n            for idx in node.indices:\n                path_lengths[idx] = depth\n            return\n        f = np.random.randint(0, n_features)\n        min_val = np.min(data[node.indices, f])\n        max_val = np.max(data[node.indices, f])\n        v = np.random.uniform(min_val, max_val)\n        left_indices = []\n        right_indices = []\n        for idx in node.indices:\n            if data[idx, f] <= v:\n                left_indices.append(idx)\n            else:\n                right_indices.append(idx)\n        node.feature = f\n        node.value = v\n        node.left = Node(left_indices)\n        node.right = Node(right_indices)\n        build_tree(node.left, depth + 1)\n        build_tree(node.right, depth + 1)\n    root = Node(np.arange(n_samples))\n    build_tree(root)\n    return path_lengths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 7, "solution": "import numpy as np\nfrom collections import deque\nimport numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    n_samples = data.shape[0]\n    depths = [0] * n_samples\n\n    class Node:\n        \"\"\"Class to represent a node in the isolation tree.\"\"\"\n\n        def __init__(self, indices):\n            self.indices = indices\n            self.left = None\n            self.right = None\n            self.feature = None\n            self.split_value = None\n            self.is_leaf = True\n            self.leaf_indices = None\n\n        def build(self):\n            \"\"\"Build the tree starting from this node.\"\"\"\n            n = len(self.indices)\n            if n < 3:\n                self.is_leaf = True\n                self.leaf_indices = self.indices\n                return\n            else:\n                self.is_leaf = False\n                n_features = data.shape[1]\n                self.feature = np.random.randint(n_features)\n                f = self.feature\n                min_val = np.min(data[self.indices, f])\n                max_val = np.max(data[self.indices, f])\n                self.split_value = np.random.uniform(min_val, max_val)\n                left_indices = []\n                right_indices = []\n                for idx in self.indices:\n                    if data[idx, f] <= self.split_value:\n                        left_indices.append(idx)\n                    else:\n                        right_indices.append(idx)\n                if len(left_indices) == 0 or len(right_indices) == 0:\n                    self.build()\n                else:\n                    self.left = Node(left_indices)\n                    self.right = Node(right_indices)\n                    self.left.build()\n                    self.right.build()\n    root = Node(list(range(n_samples)))\n    root.build()\n\n    def traverse(node, depth):\n        if node.is_leaf:\n            for idx in node.leaf_indices:\n                depths[idx] = depth\n        else:\n            traverse(node.left, depth + 1)\n            traverse(node.right, depth + 1)\n    traverse(root, 0)\n    return depths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 8, "solution": "import numpy as np\nfrom collections import deque\nimport numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    n_samples = data.shape[0]\n    depths = [-1] * n_samples\n\n    class Node:\n\n        def __init__(self):\n            self.indexes = list(range(n_samples))\n            self.left = None\n            self.right = None\n            self.feature = None\n            self.value = None\n            self.depth = 0\n    root = Node()\n\n    def build_tree(node, depth):\n        if len(node.indexes) < 3:\n            return\n        feature = np.random.randint(data.shape[1])\n        min_val = np.min(data[node.indexes, feature])\n        max_val = np.max(data[node.indexes, feature])\n        value = np.random.uniform(min_val, max_val)\n        node.feature = feature\n        node.value = value\n        node.depth = depth\n        left = Node()\n        right = Node()\n        left.indexes = [i for i in node.indexes if data[i, feature] <= value]\n        right.indexes = [i for i in node.indexes if data[i, feature] > value]\n        node.left = left\n        node.right = right\n        build_tree(node.left, depth + 1)\n        build_tree(node.right, depth + 1)\n    build_tree(root, 0)\n\n    def traverse(node):\n        if not node.left and (not node.right):\n            for idx in node.indexes:\n                depths[idx] = node.depth\n        else:\n            traverse(node.left)\n            traverse(node.right)\n    traverse(root)\n    return depths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 9, "solution": "import numpy as np\nfrom collections import deque\nimport numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"\n    Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    (n_samples, n_features) = data.shape\n    depths = [-1] * n_samples\n    indices = np.arange(n_samples)\n\n    class Node:\n\n        def __init__(self):\n            self.indices = None\n            self.feature = None\n            self.value = None\n            self.left = None\n            self.right = None\n            self.depth = 0\n\n        def build(self, indices, depth=0):\n            self.indices = indices\n            if len(indices) < 3:\n                for idx in indices:\n                    depths[idx] = depth\n                return\n            f = np.random.randint(n_features)\n            (down, up) = (data[indices, f].min(), data[indices, f].max())\n            v = np.random.uniform(down, up)\n            self.feature = f\n            self.value = v\n            left_idx = indices[data[indices, f] <= v]\n            right_idx = indices[data[indices, f] > v]\n            self.left = Node()\n            self.right = Node()\n            self.left.build(left_idx, depth + 1)\n            self.right.build(right_idx, depth + 1)\n    root = Node()\n    root.build(indices)\n    return depths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemsets (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    threshold = math.ceil(minsup * N)\n    transaction_sets = [frozenset(t) for t in transactions]\n    L1 = Counter()\n    for t in transaction_sets:\n        for item in t:\n            L1[tuple([item])] += 1\n    frequent_1_itemsets = {item: count for (item, count) in L1.items() if count >= threshold}\n    if not frequent_1_itemsets:\n        return {}\n    candidates_2_itemsets = set()\n    items_list = list(frequent_1_itemsets.keys())\n    for i in range(len(items_list)):\n        for j in range(i + 1, len(items_list)):\n            a = items_list[i]\n            b = items_list[j]\n            candidate = tuple(sorted(a + b))\n            candidates_2_itemsets.add(candidate)\n    L2 = Counter()\n    for candidate in candidates_2_itemsets:\n        for t in transaction_sets:\n            if set(candidate).issubset(t):\n                L2[candidate] += 1\n    frequent_2_itemsets = {item: count for (item, count) in L2.items() if count >= threshold}\n    result = frequent_1_itemsets.copy()\n    result.update(frequent_2_itemsets)\n    return result\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 1, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    trans_sets = [set(t) for t in transactions]\n    item_counts = Counter()\n    for t in trans_sets:\n        for item in t:\n            item_counts[frozenset([item])] += 1\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_support_count}\n    sorted_trans = [tuple(sorted(t)) for t in trans_sets]\n    result = {}\n    for items in frequent_items:\n        key = tuple(sorted(items))\n        result[key] = sum((1 for t in trans_sets if items.issubset(t)))\n    candidates = list(frequent_items.keys())\n    k = 2\n    while candidates:\n        new_frequent = {}\n        for candidate in candidates:\n            count = sum((1 for t in sorted_trans if set(candidate).issubset(set(t))))\n            if count >= min_support_count:\n                sorted_candidate = tuple(sorted(candidate))\n                result[sorted_candidate] = count\n                new_frequent[candidate] = count\n        k += 1\n        new_candidates = set()\n        for a in new_frequent:\n            for b in new_frequent:\n                a_list = sorted(list(a))\n                b_list = sorted(list(b))\n                if a_list[:-1] == b_list[:-1] and a_list[-1] < b_list[-1]:\n                    new_candidate = frozenset(a | b)\n                    if all((frozenset(subset) in new_frequent for subset in combinations(new_candidate, k - 1))):\n                        new_candidates.add(new_candidate)\n        candidates = list(new_candidates)\n    return result\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 2, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemsets (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold, returns an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    threshold = math.ceil(minsup * N)\n    trans_sets = [frozenset(t) for t in transactions]\n    items = set()\n    for t in trans_sets:\n        items.update(t)\n    item_counts = Counter()\n    for t in trans_sets:\n        for item in t:\n            item_counts[tuple([item])] += 1\n    frequent_itemsets = {}\n    for (item, count) in item_counts.items():\n        if count >= threshold:\n            frequent_itemsets[item] = count\n    k = 1\n    current_frequent = list(frequent_itemsets.keys())\n    while current_frequent:\n        candidates = set()\n        for i in range(len(current_frequent)):\n            for j in range(i + 1, len(current_frequent)):\n                a = current_frequent[i]\n                b = current_frequent[j]\n                if a[:-1] == b[:-1]:\n                    c = tuple(sorted(set(a) | set(b)))\n                    candidates.add(c)\n        candidate_counts = Counter()\n        for t in trans_sets:\n            for c in candidates:\n                if set(c).issubset(t):\n                    candidate_counts[c] += 1\n        for (c, count) in candidate_counts.items():\n            if count >= threshold:\n                frequent_itemsets[tuple(c)] = count\n        current_frequent = [c for c in candidates if candidate_counts[c] >= threshold]\n        k += 1\n    return frequent_itemsets\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 3, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    if N == 0:\n        return {}\n    trans_frozensets = [frozenset(tx) for tx in transactions]\n    single_items = Counter()\n    for tx in trans_frozensets:\n        for item in tx:\n            single_items[frozenset([item])] += 1\n    threshold = math.ceil(minsup * N)\n    frequent_itemsets = {}\n    current_frequent = [frozenset(items) for (items, count) in single_items.items() if count >= threshold]\n    for items in current_frequent:\n        sorted_items = tuple(sorted(items))\n        frequent_itemsets[sorted_items] = single_items[frozenset(items)]\n    k = 2\n    while current_frequent:\n        candidates = set()\n        for a in current_frequent:\n            for b in current_frequent:\n                if len(a.symmetric_difference(b)) == 2:\n                    candidate = a.union(b)\n                    if len(candidate) == k:\n                        candidates.add(candidate)\n        pruned_candidates = []\n        for candidate in candidates:\n            for subset in combinations(candidate, k - 1):\n                if frozenset(subset) not in current_frequent:\n                    break\n            else:\n                pruned_candidates.append(candidate)\n        candidate_support = Counter()\n        for tx in trans_frozensets:\n            for candidate in pruned_candidates:\n                if candidate.issubset(tx):\n                    candidate_support[candidate] += 1\n        next_frequent = [c for c in candidate_support if candidate_support[c] >= threshold]\n        for items in next_frequent:\n            sorted_items = tuple(sorted(items))\n            frequent_itemsets[sorted_items] = candidate_support[items]\n        current_frequent = next_frequent\n        k += 1\n    return frequent_itemsets\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 4, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    threshold = math.ceil(minsup * N)\n    trans_set = [frozenset(t) for t in transactions]\n    C1 = Counter()\n    for t in trans_set:\n        for item in t:\n            C1[frozenset([item])] += 1\n    L = {}\n    L1 = {item: count for (item, count) in C1.items() if count >= threshold}\n    L[1] = L1\n    if not L1:\n        return {}\n    result = {}\n    for itemset in L1:\n        result[tuple(sorted(itemset))] = L1[itemset]\n    k = 2\n    while L[k - 1]:\n        Ck = generate_candidate_itemsets(L[k - 1])\n        for t in trans_set:\n            for c in Ck:\n                if c.issubset(t):\n                    C1[c] += 1\n        Lk = prune_infrequent(C1, threshold)\n        if not Lk:\n            break\n        L[k] = Lk\n        for itemset in Lk:\n            result[tuple(sorted(itemset))] = Lk[itemset]\n        k += 1\n    return result\ndef generate_candidate_itemsets(Lkminus1: Dict[frozenset, int]) -> Dict[frozenset, int]:\n    \"\"\"Join frequent (k-1)-itemsets to generate candidate k-itemsets.\"\"\"\n    candidates = set()\n    itemsets = list(Lkminus1.keys())\n    for i in range(len(itemsets)):\n        for j in range(i + 1, len(itemsets)):\n            a = itemsets[i]\n            b = itemsets[j]\n            if a.union(b) not in candidates and a <= b:\n                a_union_b = a.union(b)\n                if all((frozenset(subset) in Lkminus1 for subset in combinations(a_union_b, len(a)))):\n                    candidates.add(a_union_b)\n    return Counter(candidates)\ndef prune_infrequent(Ck: Counter, threshold: int) -> Counter:\n    \"\"\"Filter out infrequent candidate itemsets based on support threshold.\"\"\"\n    return {itemset: count for (itemset, count) in Ck.items() if count >= threshold}\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6\nresult = find_frequent_itemsets(transactions, minsup)"}
{"task_id": 7, "completion_id": 5, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemsets to their support count.\n    \"\"\"\n    N = len(transactions)\n    if N == 0:\n        return {}\n    transaction_sets = [set(t) for t in transactions]\n    result: Dict[Tuple[Hashable, ...], int] = {}\n    all_items = set()\n    for t in transaction_sets:\n        for item in t:\n            all_items.add(item)\n\n    def count_support(itemset: Tuple[Hashable, ...]) -> int:\n        return sum((1 for t in transaction_sets if set(itemset).issubset(t)))\n    min_count = math.ceil(minsup * N)\n    candidates = [tuple([item]) for item in sorted(list(all_items))]\n    while candidates:\n        next_candidates = []\n        for candidate in candidates:\n            result[candidate] = result.get(candidate, 0) + count_support(candidate)\n        frequent = [c for c in candidates if result[c] >= min_count]\n        if len(frequent[0]) < len(candidates[0]):\n            frequent.sort()\n            for i in range(len(frequent)):\n                for j in range(i + 1, len(frequent)):\n                    if len(set(frequent[i]) & set(frequent[j])) == len(frequent[i]) - 1:\n                        next_candidate = tuple(sorted(set(frequent[i]) | set(frequent[j])))\n                        next_candidates.append(next_candidate)\n        candidates = next_candidates\n    return result"}
{"task_id": 7, "completion_id": 6, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    threshold = math.ceil(minsup * N)\n    if N == 0:\n        return {}\n    transaction_sets = [set(transaction) for transaction in transactions]\n    item_counts = Counter()\n    for items in transaction_sets:\n        for item in items:\n            item_counts[item] += 1\n    frequent_items = {item for (item, count) in item_counts.items() if count >= threshold}\n    if not frequent_items:\n        return {}\n    result = {}\n    current_candidates = {tuple([item]) for item in frequent_items}\n    k = 2\n    while current_candidates:\n        itemset_counts = Counter()\n        for itemset in current_candidates:\n            for t in transaction_sets:\n                if set(itemset).issubset(t):\n                    itemset_counts[itemset] += 1\n        frequent_itemsets = {itemset for (itemset, count) in itemset_counts.items() if count >= threshold}\n        for itemset in frequent_itemsets:\n            result[itemset] = itemset_counts[itemset]\n        if not frequent_itemsets:\n            break\n        new_candidates = set()\n        freq_list = list(frequent_itemsets)\n        for i in range(len(freq_list)):\n            for j in range(i + 1, len(freq_list)):\n                a = freq_list[i]\n                b = freq_list[j]\n                if a[:-1] == b[:-1] and a[-1] < b[-1]:\n                    new_candidate = a + (b[-1],)\n                    is_valid = True\n                    for i in range(len(new_candidate)):\n                        subset = tuple(sorted(new_candidate[:i] + new_candidate[i + 1:]))\n                        if subset not in frequent_itemsets:\n                            is_valid = False\n                            break\n                    if is_valid:\n                        new_candidates.add(new_candidate)\n        current_candidates = new_candidates\n        k += 1\n    return result\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6\nresult = find_frequent_itemsets(transactions, minsup)"}
{"task_id": 7, "completion_id": 7, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    if N == 0:\n        return {}\n    trans_fs = [frozenset(tx) for tx in transactions]\n    threshold = math.ceil(minsup * N)\n    freq = Counter()\n    for tx in trans_fs:\n        for item in tx:\n            freq[item] += 1\n    freq = {item: count for (item, count) in freq.items() if count >= threshold}\n    if not freq:\n        return {}\n    freq_itemsets = {tuple([k]): v for (k, v) in freq.items()}\n    k = 2\n    while True:\n        candidates = set()\n        items = list(freq_itemsets.keys())\n        for i in range(len(items)):\n            for j in range(i + 1, len(items)):\n                i1 = set(items[i])\n                i2 = set(items[j])\n                if len(i1.union(i2)) == k:\n                    candidate = tuple(sorted(i1.union(i2)))\n                    candidates.add(candidate)\n        if not candidates:\n            break\n        candidate_support = Counter()\n        for c in candidates:\n            c_set = frozenset(c)\n            count = sum((1 for tx in trans_fs if c_set.issubset(tx)))\n            if count >= threshold:\n                candidate_support[c] = count\n        if not candidate_support:\n            break\n        freq_itemsets.update(candidate_support)\n        k += 1\n    return freq_itemsets\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 8, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count. If no itemset reaches the\n        threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    trans_sets = [set(transaction) for transaction in transactions]\n    item_counts = Counter()\n    for t in trans_sets:\n        for item in t:\n            item_counts[frozenset({item})] += 1\n    frequent = {frozenset(item): count for (item, count) in item_counts.items() if count >= min_support_count}\n    result = {}\n    for itemset in frequent:\n        item = tuple(sorted(itemset))\n        result[item] = frequent[itemset]\n    k = 2\n    while frequent:\n        candidates = generate_candidates(frequent)\n        item_counts = Counter()\n        for candidate in candidates:\n            for t in trans_sets:\n                if candidate.issubset(t):\n                    item_counts[candidate] += 1\n        new_frequent = {itemset: count for (itemset, count) in item_counts.items() if count >= min_support_count}\n        for itemset in new_frequent:\n            result[tuple(sorted(itemset))] = new_frequent[itemset]\n        frequent = new_frequent\n        k += 1\n    return result\ndef generate_candidates(frequent_itemsets: Dict[frozenset, int]) -> List[frozenset]:\n    \"\"\"Generate candidate itemsets of size k from itemsets of size k-1.\"\"\"\n    items = list(frequent_itemsets.keys())\n    candidates = set()\n    for i in range(len(items)):\n        for j in range(i + 1, len(items)):\n            a = items[i]\n            b = items[j]\n            if len(set(a) & set(b)) == len(a) - 1:\n                candidate = a | b\n                is_valid = True\n                for subset in combinations(candidate, len(a)):\n                    if frozenset(subset) not in frequent_itemsets:\n                        is_valid = False\n                        break\n                if is_valid:\n                    candidates.add(candidate)\n    return list(candidates)\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6\nresult = find_frequent_itemsets(transactions, minsup)"}
{"task_id": 7, "completion_id": 9, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    transaction_set = [frozenset(t) for t in transactions]\n    result = {}\n    candidates = Counter()\n    for t in transaction_set:\n        for item in t:\n            candidates[frozenset([item])] += 1\n    current_cands = {frozenset([item]) for (item, count) in candidates.items() if count >= min_support_count}\n    for size in range(1, len(max(transaction_set, key=len)) + 1):\n        if size == 1:\n            for itemset in current_cands:\n                key_tuple = tuple(sorted(itemset))\n                result[key_tuple] = candidates[itemset]\n        else:\n            candidates = set()\n            for i in current_cands:\n                for j in current_cands:\n                    if len(i) == size - 1 and i.union(j) not in candidates and all((c in i for c in j[:-1])):\n                        if not i - j or not j - i:\n                            continue\n                        cand = i.union(j)\n                        if all((subset in current_cands for subset in combinations(cand, size - 1))):\n                            candidates.add(cand)\n            frequent = set()\n            for cand in candidates:\n                support = sum((1 for t in transaction_set if cand.issubset(t)))\n                if support >= min_support_count:\n                    freq_tuple = tuple(sorted(cand))\n                    result[freq_tuple] = support\n                    frequent.add(cand)\n            current_cands = frequent\n            if not current_cands:\n                break\n    return result\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"\n    Cluster *data* into *k* groups using the K-Means algorithm.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centroids = data[:k].copy()\n    prev_centroids = np.zeros_like(centroids)\n    for iteration in range(max_iter):\n        labels = []\n        for sample in data:\n            distances = np.sum((sample - centroids) ** 2, axis=1)\n            label = np.argmin(distances)\n            labels.append(label)\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(k)\n        for (i, label) in enumerate(labels):\n            new_centroids[label] += data[i]\n            counts[label] += 1\n        for j in range(k):\n            if counts[j] > 0:\n                new_centroids[j] /= counts[j]\n            else:\n                idx = np.random.randint(n_samples)\n                new_centroids[j] = data[idx]\n        max_change = np.max(np.sum((new_centroids - centroids) ** 2, axis=1))\n        if max_change < epsilon:\n            break\n        centroids = new_centroids\n    rounded_centroids = [list(map(lambda x: round(x, 4), centroid)) for centroid in centroids]\n    return (rounded_centroids, labels)"}
{"task_id": 11, "completion_id": 1, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of:\n        \u2022 a list with *k* centres (each rounded to 4 decimals)\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centres = data[:k].copy()\n    for _ in range(max_iter):\n        labels = []\n        for sample in data:\n            distances = [(np.sum((sample - centre) ** 2), i) for (i, centre) in enumerate(centres)]\n            nearest = min(distances, key=lambda x: x[0])[1]\n            labels.append(nearest)\n        labels = np.array(labels)\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n        for i in range(n_samples):\n            cluster = labels[i]\n            new_centres[cluster] += data[i]\n            counts[cluster] += 1\n        empty_clusters = np.where(counts == 0)[0]\n        if len(empty_clusters) > 0:\n            for cluster in empty_clusters:\n                rand_idx = np.random.randint(n_samples)\n                new_centres[cluster] = data[rand_idx]\n            centres = new_centres\n            continue\n        for i in range(k):\n            new_centres[i] = new_centres[i] / counts[i]\n        max_change = np.max(np.sqrt(np.sum((new_centres - centres) ** 2, axis=1)))\n        if max_change < epsilon:\n            break\n        centres = new_centres\n    centres = [[round(coord, 4) for coord in centre] for centre in centres]\n    return (centres, labels.tolist())"}
{"task_id": 11, "completion_id": 2, "solution": "import numpy as np\nimport numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of:\n        \u2022 a list with *k* centres (each rounded to 4 decimals)\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centres = data[:k, :].copy()\n    prev_centres = np.zeros_like(centres)\n    for _ in range(max_iter):\n        labels = []\n        distances = np.zeros(k)\n        for i in range(n_samples):\n            for j in range(k):\n                distances[j] = np.sum((data[i, :] - centres[j, :]) ** 2)\n            labels.append(np.argmin(distances))\n        labels = np.array(labels)\n        new_centres = np.zeros_like(centres)\n        new_centres_count = np.zeros(k, dtype=int)\n        for i in range(n_samples):\n            cluster_id = labels[i]\n            new_centres[cluster_id] += data[i, :]\n            new_centres_count[cluster_id] += 1\n        for j in range(k):\n            if new_centres_count[j] == 0:\n                idx = np.random.randint(n_samples)\n                new_centres[j, :] = data[idx, :].copy()\n            else:\n                new_centres[j, :] /= new_centres_count[j]\n        max_move = np.max(np.sqrt(np.sum((new_centres - centres) ** 2, axis=1)))\n        if max_move < epsilon:\n            centres = new_centres\n            break\n        centres = new_centres\n    centres = [list(map(lambda x: round(x, 4), centre)) for centre in centres]\n    labels = labels.tolist()\n    return (centres, labels)"}
{"task_id": 11, "completion_id": 3, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centers = data[:k].copy()\n    for _ in range(max_iter):\n        labels = []\n        for sample in data:\n            distances = [(i, np.sum((sample - center) ** 2)) for (i, center) in enumerate(centers)]\n            labels.append(min(distances, key=lambda x: x[1])[0])\n        cluster_indices = np.unique(labels)\n        if len(cluster_indices) < k:\n            for i in range(k):\n                if i not in cluster_indices:\n                    rand_idx = np.random.randint(n_samples)\n                    centers[i] = data[rand_idx]\n                    labels = []\n                    for sample in data:\n                        distances = [(j, np.sum((sample - center) ** 2)) for (j, center) in enumerate(centers)]\n                        labels.append(min(distances, key=lambda x: x[1])[0])\n                    break\n        old_centers = centers.copy()\n        for i in range(k):\n            points_in_cluster = data[np.array(labels) == i]\n            if len(points_in_cluster) > 0:\n                centers[i] = np.mean(points_in_cluster, axis=0)\n        max_change = np.max(np.sqrt(np.sum((centers - old_centers) ** 2, axis=1)))\n        if max_change < epsilon:\n            break\n    rounded_centers = [np.round(center, 4).tolist() for center in centers]\n    return (rounded_centers, labels)"}
{"task_id": 11, "completion_id": 4, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    centers = data[:k].copy()\n    (n_samples, n_features) = data.shape\n    for _ in range(max_iter):\n        labels = []\n        for sample in data:\n            distances = [(np.sum((sample - center) ** 2), i) for (i, center) in enumerate(centers)]\n            labels.append(min(distances)[1])\n        new_centers = np.copy(centers)\n        for i in range(k):\n            cluster_points = data[np.array(labels) == i]\n            if cluster_points.size == 0:\n                rand_index = np.random.randint(n_samples)\n                new_centers[i] = data[rand_index]\n            else:\n                new_centers[i] = np.mean(cluster_points, axis=0)\n        max_change = np.max(np.sqrt(np.sum((new_centers - centers) ** 2, axis=1)))\n        if max_change < epsilon:\n            break\n        centers = new_centers\n    rounded_centers = [[round(val, 4) for val in center] for center in centers]\n    return (rounded_centers, labels)"}
{"task_id": 11, "completion_id": 5, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centers = data[:k].copy()\n    for _ in range(max_iter):\n        labels = []\n        squared_distances = np.zeros(k)\n        for i in range(n_samples):\n            for j in range(k):\n                squared_distances[j] = np.sum((data[i] - centers[j]) ** 2)\n            labels.append(np.argmin(squared_distances))\n        new_centers = np.copy(centers)\n        for j in range(k):\n            cluster_points = data[np.array(labels) == j]\n            if len(cluster_points) == 0:\n                random_index = np.random.randint(n_samples)\n                new_centers[j] = data[random_index]\n            else:\n                new_centers[j] = np.mean(cluster_points, axis=0)\n        center_shifts = np.sqrt(np.sum((new_centers - centers) ** 2, axis=1))\n        max_shift = np.max(center_shifts)\n        if max_shift < epsilon:\n            break\n        centers = new_centers\n    rounded_centers = [list(map(lambda x: round(x, 4), center)) for center in centers]\n    return (rounded_centers, labels)"}
{"task_id": 11, "completion_id": 6, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n    \n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n    \n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centers = data[:k].copy()\n    prev_centers = np.zeros_like(centers)\n    labels = np.zeros(n_samples, dtype=int)\n    for iteration in range(max_iter):\n        for i in range(n_samples):\n            sample = data[i]\n            min_dist = float('inf')\n            for j in range(k):\n                dist = np.sum((sample - centers[j]) ** 2)\n                if dist < min_dist:\n                    min_dist = dist\n                    labels[i] = j\n        new_centers = np.zeros_like(centers)\n        counts = np.zeros(k, dtype=int)\n        for i in range(n_samples):\n            idx = labels[i]\n            new_centers[idx] += data[i]\n            counts[idx] += 1\n        empty_clusters = []\n        for j in range(k):\n            if counts[j] == 0:\n                empty_clusters.append(j)\n        if empty_clusters:\n            for j in empty_clusters:\n                rand_idx = np.random.randint(n_samples)\n                new_centers[j] = data[rand_idx]\n        for j in range(k):\n            if counts[j] > 0:\n                new_centers[j] /= counts[j]\n        movement = np.sqrt(np.sum((new_centers - centers) ** 2, axis=1))\n        if np.max(movement) < epsilon:\n            centers = new_centers\n            break\n        centers = new_centers\n    centers = np.round(centers, 4).tolist()\n    return (centers, labels.tolist())\ndata = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])"}
{"task_id": 11, "completion_id": 7, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centers = data[:k].copy()\n    for _ in range(max_iter):\n        labels = []\n        for sample in data:\n            distances = [(i, np.sum((sample - center) ** 2)) for (i, center) in enumerate(centers)]\n            labels.append(min(distances, key=lambda x: x[1])[0])\n        clusters = {i: [] for i in range(k)}\n        for (i, label) in enumerate(labels):\n            clusters[label].append(data[i])\n        new_centers = centers.copy()\n        for i in range(k):\n            if len(clusters[i]) == 0:\n                random_idx = np.random.randint(n_samples)\n                new_centers[i] = data[random_idx]\n            else:\n                new_centers[i] = np.mean(clusters[i], axis=0)\n        max_change = np.max(np.sqrt(np.sum((new_centers - centers) ** 2, axis=1)))\n        if max_change < epsilon:\n            break\n        centers = new_centers\n    rounded_centers = [[round(coord, 4) for coord in center] for center in centers]\n    return (rounded_centers, labels)"}
{"task_id": 11, "completion_id": 8, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n    \n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n    \n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centres = data[:k].copy()\n    for _ in range(max_iter):\n        labels = []\n        for sample in data:\n            distances = [(np.sum((sample - centre) ** 2), idx) for (idx, centre) in enumerate(centres)]\n            labels.append(min(distances)[1])\n        labels = np.array(labels)\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n        for (idx, label) in enumerate(labels):\n            new_centres[label] += data[idx]\n            counts[label] += 1\n        empty_clusters = np.where(counts == 0)[0]\n        if len(empty_clusters) > 0:\n            for cluster_idx in empty_clusters:\n                random_idx = np.random.randint(n_samples)\n                new_centres[cluster_idx] = data[random_idx]\n                counts[cluster_idx] = 1\n        for i in range(k):\n            new_centres[i] /= counts[i]\n        max_movement = np.max(np.sum((new_centres - centres) ** 2, axis=1))\n        centres_rounded = np.round(centres, 4)\n        new_centres_rounded = np.round(new_centres, 4)\n        if max_movement < epsilon and np.array_equal(centres_rounded, new_centres_rounded):\n            centres = new_centres\n            break\n        centres = new_centres\n    centres_list = [list(np.round(centre, 4)) for centre in centres]\n    labels_list = labels.tolist()\n    return (centres_list, labels_list)"}
{"task_id": 11, "completion_id": 9, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n    \n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n    \n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    centers = data[:k].copy()\n    (n_samples, n_features) = data.shape\n    labels = [0] * n_samples\n    for iteration in range(max_iter):\n        old_labels = labels.copy()\n        for i in range(n_samples):\n            distances = [(np.sum((data[i] - centers[j]) ** 2), j) for j in range(k)]\n            labels[i] = min(distances)[1]\n        if labels == old_labels:\n            break\n        new_centers = centers.copy()\n        for j in range(k):\n            cluster_samples = data[np.array(labels) == j]\n            if len(cluster_samples) == 0:\n                random_index = np.random.randint(0, n_samples)\n                new_centers[j] = data[random_index]\n            else:\n                new_centers[j] = np.mean(cluster_samples, axis=0)\n        max_change = np.max(np.sqrt(np.sum((new_centers - centers) ** 2, axis=1)))\n        centers = new_centers\n        if max_change < epsilon:\n            break\n    rounded_centers = [list(np.round(center, 4)) for center in centers]\n    return (rounded_centers, labels)"}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            common_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(common_users) == 0:\n                S[i, j] = S[j, i] = 0\n            else:\n                ratings_i = data[common_users, i]\n                ratings_j = data[common_users, j]\n                if criterion == 'cosine':\n                    mean_center = True if np.std(ratings_i) > 0.001 else False\n                    rating_i = ratings_i - np.mean(ratings_i) if mean_center else ratings_i\n                    rating_j = ratings_j - np.mean(ratings_j) if mean_center else ratings_j\n                    dot_product = np.dot(rating_i, rating_j)\n                    norm_i = np.sqrt(np.sum(rating_i ** 2))\n                    norm_j = np.sqrt(np.sum(rating_j ** 2))\n                    if norm_i == 0 or norm_j == 0:\n                        similarity = 0\n                    else:\n                        similarity = dot_product / (norm_i * norm_j)\n                    S[i, j] = similarity\n                    S[j, i] = similarity\n                elif criterion == 'pearson':\n                    pearson_corr = np.corrcoef(ratings_i, ratings_j)[0, 1]\n                    S[i, j] = pearson_corr\n                    S[j, i] = pearson_corr\n    user_ratings = data[user_ind, :]\n    rated_items = [i for (i, r) in enumerate(user_ratings) if r > 0]\n    if not rated_items:\n        return []\n    unrated_items = [i for i in range(n_item) if user_ratings[i] == 0]\n    if not unrated_items:\n        return []\n    scores = defaultdict(float)\n    for t in unrated_items:\n        numerator = 0\n        denominator = 0\n        for i in rated_items:\n            sim = S[t, i]\n            if abs(sim) < 1e-10:\n                continue\n            numerator += user_ratings[i] * sim\n            denominator += abs(sim)\n        if denominator > 0:\n            scores[t] = numerator / denominator\n        else:\n            scores[t] = 0\n    sorted_items = sorted(scores.items(), key=lambda x: (-x[1], x[0]))\n    top_k_indices = [item[0] for item in sorted_items[:k]]\n    return top_k_indices\ndata = np.array([[5, 3, 0, 1, 4], [4, 0, 0, 2, 5], [1, 0, 4, 4, 0]])"}
{"task_id": 13, "completion_id": 1, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function builds an item\u2013item similarity matrix and predicts\n    the attractiveness of every yet unrated item for the specified user.  It\n    returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            common_users = [u for u in range(n_user) if data[u, i] > 0 and data[u, j] > 0]\n            if not common_users:\n                S[i, j] = S[j, i] = 0\n            else:\n                v1 = data[common_users, i]\n                v2 = data[common_users, j]\n                if criterion == 'cosine':\n                    v1_mean = np.mean(v1)\n                    v2_mean = np.mean(v2)\n                    if np.std(v1) > 0.001:\n                        v1 = v1 - v1_mean\n                    if np.std(v2) > 0.001:\n                        v2 = v2 - v2_mean\n                    sim = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                    if np.isnan(sim):\n                        sim = 0\n                elif criterion == 'pearson':\n                    corr = np.corrcoef(v1, v2)[0, 1]\n                    sim = corr\n                S[i, j] = S[j, i] = sim\n    user_ratings = data[user_ind, :]\n    rated_mask = user_ratings > 0\n    rated_indices = np.where(rated_mask)[0]\n    unrated_indices = np.where(~rated_mask)[0]\n    if len(unrated_indices) == 0:\n        return []\n    r = user_ratings[rated_mask]\n    scores = {}\n    for t in unrated_indices:\n        Idx_rated = rated_indices\n        sim_values = S[t, Idx_rated]\n        rvalues = data[user_ind, Idx_rated]\n        numerator = np.sum(rvalues * sim_values)\n        denominator = np.sum(np.abs(sim_values))\n        if denominator == 0:\n            scores[t] = 0.0\n        else:\n            scores[t] = numerator / denominator\n    sorted_items = sorted(scores.items(), key=lambda x: (-x[1], x[0]))\n    top_k_indices = [t for (t, _) in sorted_items][:k]\n    return top_k_indices"}
{"task_id": 13, "completion_id": 2, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"\n    Item-based k-NN collaborative filtering recommender.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i, n_item):\n            common_users = []\n            for u in range(n_user):\n                if data[u][i] > 0 and data[u][j] > 0:\n                    common_users.append(u)\n            if not common_users:\n                S[i, j] = 0\n                S[j, i] = 0\n                continue\n            v1 = [data[u][i] for u in common_users]\n            v2 = [data[u][j] for u in common_users]\n            v1 = np.array(v1)\n            v2 = np.array(v2)\n            if criterion == 'cosine':\n                mean1 = np.mean(v1)\n                mean2 = np.mean(v2)\n                if np.std(v1) > 0.001:\n                    v1 -= mean1\n                if np.std(v2) > 0.001:\n                    v2 -= mean2\n                dot = np.dot(v1, v2)\n                norm1 = np.linalg.norm(v1)\n                norm2 = np.linalg.norm(v2)\n                if norm1 == 0 or norm2 == 0:\n                    sim = 0.0\n                else:\n                    sim = dot / (norm1 * norm2)\n            elif criterion == 'pearson':\n                sim = np.corrcoef(v1, v2)[0, 1]\n            else:\n                raise ValueError('Unsupported criterion: %s' % criterion)\n            S[i, j] = sim\n            S[j, i] = sim\n    rated_items = [i for i in range(n_item) if data[user_ind, i] > 0]\n    r = np.array([data[user_ind, i] for i in rated_items])\n    scores = {}\n    for t in range(n_item):\n        if data[user_ind, t] > 0:\n            continue\n        num = 0.0\n        denom = 0.0\n        for (idx, i) in enumerate(rated_items):\n            sim = S[t, i]\n            num += r[idx] * sim\n            denom += abs(sim)\n        if denom > 0:\n            score = num / denom\n        else:\n            score = 0.0\n        scores[t] = score\n    if not scores:\n        return []\n    recommended = sorted(scores.items(), key=lambda x: (-x[1], x[0]))\n    return [item for (item, score) in recommended[:k]]\ndata = np.array([[3, 0, 4, 0, 5], [1, 5, 3, 4, 0], [0, 4, 5, 0, 2], [5, 0, 1, 2, 4], [1, 2, 3, 4, 5]], dtype=np.int64)"}
{"task_id": 13, "completion_id": 3, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"\n    Item-based k-NN collaborative filtering recommender.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i, n_item):\n            common_indices = [u for u in range(n_user) if data[u, i] > 0 and data[u, j] > 0]\n            if not common_indices:\n                S[i, j] = S[j, i] = 0\n                continue\n            v1 = np.array([data[u, i] for u in common_indices])\n            v2 = np.array([data[u, j] for u in common_indices])\n            if criterion == 'cosine':\n                if v1.std() > 0.001:\n                    v1 -= v1.mean()\n                if v2.std() > 0.001:\n                    v2 -= v2.mean()\n                dot_product = np.dot(v1, v2)\n                norm_i = np.sqrt(np.dot(v1, v1))\n                norm_j = np.sqrt(np.dot(v2, v2))\n                if norm_i == 0 or norm_j == 0:\n                    sim = 0\n                else:\n                    sim = dot_product / (norm_i * norm_j)\n            elif criterion == 'pearson':\n                ratings_pair = np.column_stack((v1, v2))\n                corr_matrix = np.corrcoef(ratings_pair, rowvar=False)\n                sim = corr_matrix[0, 1]\n            else:\n                raise ValueError(f\"Unknown criterion: {criterion}. Should be 'cosine' or 'pearson'.\")\n            S[i, j] = S[j, i] = sim\n    rated_items = [i for i in range(n_item) if data[user_ind, i] > 0]\n    if len(rated_items) == 0:\n        return []\n    r = [data[user_ind, i] for i in rated_items]\n    unrated_items = [i for i in range(n_item) if data[user_ind, i] == 0]\n    if len(unrated_items) == 0:\n        return []\n    scores = {}\n    for t in unrated_items:\n        numer = 0\n        denom = 0\n        for i in rated_items:\n            sim = S[t, i]\n            numer += r[rated_items.index(i)] * sim\n            denom += abs(sim)\n        if denom == 0:\n            score = 0\n        else:\n            score = numer / denom\n        scores[t] = score\n    sorted_items = sorted(scores.items(), key=lambda x: (-x[1], x[0]))\n    recommended_indices = [item[0] for item in sorted_items[:k]]\n    return recommended_indices\ndata = np.array([[5, 3, 0, 1], [4, 0, 0, 1], [1, 1, 5, 5], [1, 0, 0, 5]])"}
{"task_id": 13, "completion_id": 4, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function builds an item\u2013item similarity matrix and then predicts\n    the attractiveness of every yet unrated item for the specified user.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            common_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(common_users) == 0:\n                S[i, j] = 0\n            else:\n                v1 = data[common_users, i]\n                v2 = data[common_users, j]\n                if criterion == 'cosine':\n                    if i != j:\n                        if np.std(v1) > 0.001:\n                            v1 -= np.mean(v1)\n                        if np.std(v2) > 0.001:\n                            v2 -= np.mean(v2)\n                    dot = np.dot(v1, v2)\n                    norm1 = np.linalg.norm(v1)\n                    norm2 = np.linalg.norm(v2)\n                    if norm1 == 0 or norm2 == 0:\n                        sim = 0\n                    else:\n                        sim = dot / (norm1 * norm2)\n                    S[i, j] = sim\n                elif criterion == 'pearson':\n                    corr = np.corrcoef(v1, v2)[0, 1]\n                    S[i, j] = corr\n                    S[j, i] = corr\n                else:\n                    raise ValueError(\"Criterion must be 'cosine' or 'pearson'\")\n        if criterion == 'cosine':\n            S[:, i] = S[i, :]\n    rated_items = np.where(data[user_ind] > 0)[0]\n    if len(rated_items) == n_item:\n        return []\n    user_ratings = data[user_ind, rated_items]\n    predicted_scores = {}\n    unrated_items = np.where(data[user_ind] == 0)[0]\n    for t in unrated_items:\n        numerator = 0\n        denominator = 0\n        for i in rated_items:\n            sim = S[t, i]\n            if not np.isnan(sim):\n                numerator += user_ratings[rated_items.tolist().index(i)] * sim\n                denominator += abs(sim)\n        if denominator == 0:\n            score = 0\n        else:\n            score = numerator / denominator\n        predicted_scores[t] = score\n    sorted_items = sorted(predicted_scores.items(), key=lambda x: (-x[1], x[0]))\n    return [item[0] for item in sorted_items[:k]]\ndata = np.array([[1, 2, 0, 4, 0], [0, 3, 4, 0, 5], [2, 0, 3, 0, 4]])\nk = 2"}
{"task_id": 13, "completion_id": 5, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    active_user_ratings = data[user_ind, :]\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i, n_item):\n            common_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(common_users) == 0:\n                S[i, j] = S[j, i] = 0.0\n                continue\n            v1 = data[common_users, i].ravel()\n            v2 = data[common_users, j].ravel()\n            if criterion == 'cosine':\n                has_high_variation = [np.std(vector) > 0.001 for vector in [v1, v2]]\n                if has_high_variation[0]:\n                    v1 = v1 - np.mean(v1)\n                if has_high_variation[1]:\n                    v2 = v2 - np.mean(v2)\n                norm1 = np.linalg.norm(v1)\n                norm2 = np.linalg.norm(v2)\n                if norm1 == 0 or norm2 == 0:\n                    sim = 0.0\n                else:\n                    sim = np.dot(v1, v2) / (norm1 * norm2)\n            elif criterion == 'pearson':\n                try:\n                    sim = np.corrcoef(v1, v2)[0, 1]\n                except np.linalg.LinAlgError:\n                    sim = 0.0\n            else:\n                raise ValueError('Unsupported similarity criterion')\n            S[i, j] = S[j, i] = sim\n    rated_indices = np.where(active_user_ratings > 0)[0]\n    if len(rated_indices) == 0:\n        return []\n    unrated_indices = np.where(active_user_ratings == 0)[0]\n    scores = {}\n    for t in unrated_indices:\n        score_numerator = 0.0\n        score_denominator = 0.0\n        for i in rated_indices:\n            similarity = S[t, i]\n            score_numerator += active_user_ratings[i] * similarity\n            score_denominator += abs(similarity)\n        scores[t] = score_numerator / score_denominator if score_denominator > 0 else 0.0\n    sorted_items = sorted(scores.items(), key=lambda x: x[1], reverse=True)\n    top_k_indices = [item[0] for item in sorted_items[:k]]\n    return top_k_indices"}
{"task_id": 13, "completion_id": 6, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i, n_item):\n            rated_i = np.where(data[:, i] > 0)[0]\n            rated_j = np.where(data[:, j] > 0)[0]\n            common_users = sorted(set(rated_i).intersection(rated_j))\n            if not common_users:\n                similarity = 0.0\n            else:\n                v1 = data[common_users, i].flatten()\n                v2 = data[common_users, j].flatten()\n                if criterion == 'cosine':\n                    std_v1 = np.std(v1)\n                    std_v2 = np.std(v2)\n                    if std_v1 > 0.001:\n                        v1 = v1 - np.mean(v1)\n                    if std_v2 > 0.001:\n                        v2 = v2 - np.mean(v2)\n                    dot_product = np.dot(v1, v2)\n                    norm1 = np.linalg.norm(v1)\n                    norm2 = np.linalg.norm(v2)\n                    if norm1 == 0 or norm2 == 0:\n                        similarity = 0.0\n                    else:\n                        similarity = dot_product / (norm1 * norm2)\n                elif criterion == 'pearson':\n                    similarity = np.corrcoef(v1, v2)[0, 1]\n                else:\n                    raise ValueError(f'Unsupported criterion: {criterion}')\n            S[i, j] = similarity\n            S[j, i] = similarity\n    rated_items_user = [i for i in range(n_item) if data[user_ind, i] > 0]\n    unrated_items_user = [i for i in range(n_item) if data[user_ind, i] == 0]\n    if not unrated_items_user:\n        return []\n    ratings_user = data[user_ind, rated_items_user]\n    scores = []\n    for t in unrated_items_user:\n        score_sum = 0.0\n        weight_sum = 0.0\n        for (i, r) in zip(rated_items_user, ratings_user):\n            sim = S[t, i]\n            if sim != 0:\n                score_sum += r * sim\n                weight_sum += abs(sim)\n        if weight_sum == 0:\n            predicted_score = 0.0\n        else:\n            predicted_score = score_sum / weight_sum\n        scores.append((t, predicted_score))\n    scores.sort(key=lambda x: (-x[1], x[0]))\n    return [t for (t, _) in scores[:k]]"}
{"task_id": 13, "completion_id": 7, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i, n_item):\n            if i == j:\n                S[i, j] = 1.0\n                continue\n            rated_both = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(rated_both) == 0:\n                S[i, j] = 0.0\n                S[j, i] = 0.0\n                continue\n            v1 = data[rated_both, i]\n            v2 = data[rated_both, j]\n            if criterion == 'cosine':\n                if np.std(v1) > 0.001:\n                    v1 = v1 - np.mean(v1)\n                if np.std(v2) > 0.001:\n                    v2 = v2 - np.mean(v2)\n                dot_product = np.dot(v1, v2)\n                norm1 = np.linalg.norm(v1)\n                norm2 = np.linalg.norm(v2)\n                if norm1 == 0 or norm2 == 0:\n                    sim = 0.0\n                else:\n                    sim = dot_product / (norm1 * norm2)\n            elif criterion == 'pearson':\n                sim_matrix = np.corrcoef(v1, v2)\n                sim = sim_matrix[0, 1]\n            else:\n                raise ValueError(f'Unknown criterion: {criterion}')\n            S[i, j] = sim\n            S[j, i] = sim\n    rated_items = np.where(data[user_ind, :] > 0)[0]\n    r = data[user_ind, rated_items]\n    if len(rated_items) == n_item:\n        return []\n    scores = {}\n    unrated_items = np.where(data[user_ind, :] == 0)[0]\n    for t in unrated_items:\n        numerator = 0.0\n        denominator = 0.0\n        for (i, r_i) in zip(rated_items, r):\n            sim = S[t, i]\n            numerator += r_i * sim\n            denominator += abs(sim)\n        if denominator == 0:\n            score = 0.0\n        else:\n            score = numerator / denominator\n        scores[t] = score\n    sorted_scores = sorted(scores.items(), key=lambda x: (-x[1], x[0]))\n    top_k = [item_id for (item_id, _) in sorted_scores[:k]]\n    return top_k"}
{"task_id": 13, "completion_id": 8, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_users, n_items) = data.shape\n    if np.count_nonzero(data[user_ind, :]) == n_items:\n        return []\n    S = np.zeros((n_items, n_items))\n    rated_item_indices = np.where(data.sum(axis=0) > 0)[0]\n    for i in rated_item_indices:\n        for j in rated_item_indices:\n            if i == j:\n                S[i, j] = 1.0\n                continue\n            common_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(common_users) == 0:\n                S[i, j] = 0.0\n                S[j, i] = 0.0\n                continue\n            v1 = data[common_users, i]\n            v2 = data[common_users, j]\n            if criterion == 'cosine':\n                if np.std(v1) > 0.001:\n                    v1 = v1 - np.mean(v1)\n                if np.std(v2) > 0.001:\n                    v2 = v2 - np.mean(v2)\n                dot_product = np.dot(v1, v2)\n                norm_v1 = np.linalg.norm(v1)\n                norm_v2 = np.linalg.norm(v2)\n                similarity = dot_product / (norm_v1 * norm_v2) if norm_v1 * norm_v2 > 0 else 0\n                S[i, j] = similarity\n                S[j, i] = similarity\n            elif criterion == 'pearson':\n                correlation = np.corrcoef(v1, v2)[0, 1]\n                S[i, j] = correlation\n                S[j, i] = correlation\n    rated_items = np.where(data[user_ind, :] > 0)[0]\n    ratings = data[user_ind, rated_items].astype(float)\n    unrated_items = np.where(data[user_ind, :] == 0)[0]\n    pred_scores = {}\n    for t in unrated_items:\n        numerator = 0.0\n        denominator = 0.0\n        for i in rated_items:\n            sim = S[t, i]\n            if sim == 0:\n                continue\n            numerator += ratings[rated_items.tolist().index(i)] * sim\n            denominator += abs(sim)\n        if denominator == 0:\n            score = 0.0\n        else:\n            score = numerator / denominator\n        pred_scores[t] = score\n    sorted_recommendations = sorted(pred_scores.items(), key=lambda x: (-x[1], x[0]))\n    return [item for (item, _) in sorted_recommendations[:k]]"}
{"task_id": 13, "completion_id": 9, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    rated_items = np.where(data[user_ind] > 0)[0]\n    if len(rated_items) == 0:\n        return []\n    if len(rated_items) == n_item:\n        return []\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i, n_item):\n            if i == j:\n                S[i, j] = 1.0\n                continue\n            both_rated_mask = np.all(data[:, [i, j]] > 0, axis=1)\n            users_both_rated = np.where(both_rated_mask)[0]\n            if len(users_both_rated) == 0:\n                S[i, j] = 0.0\n                S[j, i] = 0.0\n                continue\n            v1 = data[users_both_rated, i]\n            v2 = data[users_both_rated, j]\n            if criterion == 'cosine':\n                if np.std(v1) > 0.001:\n                    v1 -= np.mean(v1)\n                if np.std(v2) > 0.001:\n                    v2 -= np.mean(v2)\n                dot_product = np.dot(v1, v2)\n                norm_v1 = np.linalg.norm(v1)\n                norm_v2 = np.linalg.norm(v2)\n                if norm_v1 == 0 or norm_v2 == 0:\n                    similarity = 0.0\n                else:\n                    similarity = dot_product / (norm_v1 * norm_v2)\n            elif criterion == 'pearson':\n                corr_matrix = np.corrcoef(v1, v2)\n                similarity = corr_matrix[0, 1]\n            else:\n                similarity = 0.0\n            S[i, j] = similarity\n            S[j, i] = similarity\n    r = data[user_ind, rated_items]\n    unrated_items = np.where(data[user_ind] == 0)[0]\n    predicted_scores = {}\n    for t in unrated_items:\n        numerator = 0.0\n        denominator = 0.0\n        for (i, item_i) in enumerate(rated_items):\n            sim = S[t, item_i]\n            if sim == 0:\n                continue\n            numerator += r[i] * sim\n            denominator += abs(sim)\n        if denominator == 0:\n            score = 0.0\n        else:\n            score = numerator / denominator\n        predicted_scores[t] = score\n    sorted_items = sorted(predicted_scores.items(), key=lambda x: (-x[1], x[0]))\n    top_k = [item for (item, _) in sorted_items[:k]]\n    return top_k"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    total_g = np.sum(g)\n    total_h = np.sum(h)\n    parent_loss = -0.5 * total_g ** 2 / (total_h + lam) + gamma\n    best_gain = -np.inf\n    best_feature_index = -1\n    best_threshold = None\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        unique_values = np.unique(feature_values)\n        if len(unique_values) < 2:\n            continue\n        sort_idx = np.argsort(feature_values)\n        sorted_g = g[sort_idx]\n        sorted_h = h[sort_idx]\n        sorted_values = feature_values[sort_idx]\n        cumsum_g = np.cumsum(sorted_g)\n        cumsum_h = np.cumsum(sorted_h)\n        for i in range(1, n_samples - 1):\n            left_g = cumsum_g[i]\n            left_h = cumsum_h[i]\n            if i < n_samples - 1:\n                right_g = total_g - left_g\n                right_h = total_h - left_h\n            else:\n                continue\n            if i < 1 or i >= n_samples:\n                continue\n            left_loss = -0.5 * left_g ** 2 / (left_h + lam) + gamma\n            right_loss = -0.5 * right_g ** 2 / (right_h + lam) + gamma\n            gain = parent_loss - left_loss - right_loss\n            if gain > best_gain:\n                threshold = (sorted_values[i] + sorted_values[i - 1]) / 2\n                best_gain = gain\n                best_feature_index = feature_idx\n                best_threshold = threshold\n    if best_gain > 1e-10:\n        return (best_feature_index, best_threshold)\n    else:\n        return None"}
{"task_id": 19, "completion_id": 1, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    total_g = np.sum(g)\n    total_h = np.sum(h)\n    parent_loss = -0.5 * total_g ** 2 / (total_h + lam) + gamma\n    best_gain = -np.inf\n    best_split_result = None\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        sorted_indices = np.argsort(feature_values)\n        sorted_g = g[sorted_indices]\n        sorted_h = h[sorted_indices]\n        sorted_feature = feature_values[sorted_indices]\n        cum_g = np.cumsum(sorted_g)\n        cum_h = np.cumsum(sorted_h)\n        for i in range(1, n_samples - 1):\n            left_g = cum_g[i]\n            left_h = cum_h[i]\n            right_g = total_g - left_g\n            right_h = total_h - left_h\n            if i < 2 or n_samples - i < 2:\n                continue\n            left_loss = -0.5 * left_g ** 2 / (left_h + lam) + gamma\n            right_loss = -0.5 * right_g ** 2 / (right_h + lam) + gamma\n            gain = parent_loss - left_loss - right_loss\n            if gain > best_gain and gain > 0:\n                best_gain = gain\n                threshold = (sorted_feature[i - 1] + sorted_feature[i]) / 2\n                best_split_result = (feature_idx, threshold)\n    return best_split_result if best_gain > 0 else None"}
{"task_id": 19, "completion_id": 2, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    sum_g = np.sum(g)\n    sum_h = np.sum(h)\n    loss_parent = -0.5 * sum_g ** 2 / (sum_h + lam) + gamma\n    best_gain = -np.inf\n    best_split = None\n    for feature_index in range(n_features):\n        x_col = X[:, feature_index]\n        unique_thresholds = np.unique(x_col)\n        for threshold in unique_thresholds:\n            left_mask = x_col <= threshold\n            right_mask = x_col > threshold\n            n_left = np.sum(left_mask)\n            n_right = np.sum(right_mask)\n            if n_left < 2 or n_right < 2:\n                continue\n            sum_g_left = np.sum(g[left_mask])\n            sum_h_left = np.sum(h[left_mask])\n            loss_left = -0.5 * sum_g_left ** 2 / (sum_h_left + lam) + gamma\n            sum_g_right = np.sum(g[right_mask])\n            sum_h_right = np.sum(h[right_mask])\n            loss_right = -0.5 * sum_g_right ** 2 / (sum_h_right + lam) + gamma\n            gain = loss_parent - loss_left - loss_right\n            if gain > best_gain and gain > 1e-10:\n                best_gain = gain\n                best_split = (feature_index, threshold)\n    return best_split"}
{"task_id": 19, "completion_id": 3, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    sum_g_total = g.sum()\n    sum_h_total = h.sum()\n    loss_total = -0.5 * sum_g_total ** 2 / (sum_h_total + lam) + gamma\n    best_gain = 0.0\n    best_split = None\n    for feature_index in range(n_features):\n        unique_thresholds = np.unique(X[:, feature_index])\n        if len(unique_thresholds) <= 1:\n            continue\n        sorted_indices = X[np.argsort(X[:, feature_index])][:, feature_index]\n        sort_idx = np.argsort(X[:, feature_index])\n        cum_g = np.cumsum(g[sort_idx])\n        cum_h = np.cumsum(h[sort_idx])\n        for i in range(1, n_samples - 1):\n            sum_g_left = cum_g[i]\n            sum_h_left = cum_h[i]\n            if sum_h_left == 0:\n                continue\n            sum_g_right = cum_g[-1] - sum_g_left\n            sum_h_right = cum_h[-1] - sum_h_left\n            if sum_h_right == 0:\n                continue\n            threshold_left = X[sort_idx[i - 1], feature_index]\n            threshold_right = X[sort_idx[i], feature_index]\n            threshold = (threshold_left + threshold_right) / 2\n            loss_left = -0.5 * sum_g_left ** 2 / (sum_h_left + lam) + gamma\n            loss_right = -0.5 * sum_g_right ** 2 / (sum_h_right + lam) + gamma\n            gain = loss_total - loss_left - loss_right\n            if gain > best_gain and gain > 1e-10:\n                best_gain = gain\n                best_split = (feature_index, threshold)\n    if best_gain <= 0:\n        return None\n    else:\n        return best_split"}
{"task_id": 19, "completion_id": 4, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain,\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients.\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    sum_g = g.sum()\n    sum_h = h.sum()\n    root_loss = -0.5 * sum_g ** 2 / (sum_h + lam) + gamma\n    best_gain = -np.inf\n    best_split_info = None\n    for feature_idx in range(n_features):\n        feature = X[:, feature_idx]\n        unique_thresholds = np.unique(feature)\n        if len(unique_thresholds) < 2:\n            continue\n        sorted_indices = np.argsort(feature)\n        feature_sorted = feature[sorted_indices]\n        g_sorted = g[sorted_indices]\n        h_sorted = h[sorted_indices]\n        g_left = 0.0\n        h_left = 0.0\n        for i in range(1, n_samples - 1):\n            g_left += g_sorted[i - 1]\n            h_left += h_sorted[i - 1]\n            g_right = sum_g - g_left\n            h_right = sum_h - h_left\n            if i == n_samples:\n                break\n            try:\n                loss_L = -0.5 * g_left ** 2 / (h_left + lam) + gamma\n                loss_R = -0.5 * g_right ** 2 / (h_right + lam) + gamma\n                gain = root_loss - loss_L - loss_R\n                if gain > best_gain and gain > 0:\n                    best_gain = gain\n                    threshold = feature_sorted[i]\n                    best_split_info = (feature_idx, threshold)\n            except ZeroDivisionError:\n                continue\n    return best_split_info if best_gain > 0 else None"}
{"task_id": 19, "completion_id": 5, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    total_g = np.sum(g)\n    total_h = np.sum(h)\n    loss_total = -0.5 * total_g ** 2 / (total_h + lam) + gamma\n    best_gain = -np.inf\n    best_feature = -1\n    best_threshold = -1\n    for feature_idx in range(n_features):\n        feature_vals = X[:, feature_idx]\n        unique_thresholds = np.unique(feature_vals)\n        sorted_idx = np.argsort(feature_vals)\n        sorted_g = g[sorted_idx]\n        sorted_h = h[sorted_idx]\n        total_g_sorted = np.cumsum(sorted_g)\n        total_h_sorted = np.cumsum(sorted_h)\n        for i in range(1, n_samples - 1):\n            g_L = total_g_sorted[i]\n            h_L = total_h_sorted[i]\n            g_R = total_g - g_L\n            h_R = total_h - h_L\n            loss_L = -0.5 * g_L ** 2 / (h_L + lam) + gamma\n            loss_R = -0.5 * g_R ** 2 / (h_R + lam) + gamma\n            gain = loss_total - loss_L - loss_R\n            if gain > best_gain and gain > 1e-10:\n                best_gain = gain\n                best_threshold = (feature_vals[sorted_idx[i]] + feature_vals[sorted_idx[i - 1]]) / 2\n                best_feature = feature_idx\n    if best_gain <= 1e-10:\n        return None\n    else:\n        return (best_feature, best_threshold)"}
{"task_id": 19, "completion_id": 6, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_gain = -np.inf\n    best_split_threshold = None\n    best_split_feature = None\n    total_g = g.sum()\n    total_h = h.sum()\n    parent_loss = -0.5 * total_g ** 2 / (total_h + lam) + gamma\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        unique_sorted = np.sort(np.unique(feature_values))\n        if len(unique_sorted) < 2:\n            continue\n        threshold_candidates = []\n        for i in range(1, len(unique_sorted)):\n            threshold = (unique_sorted[i - 1] + unique_sorted[i]) / 2\n            threshold_candidates.append(threshold)\n        for threshold in threshold_candidates:\n            left_mask = feature_values <= threshold\n            left_indices = np.where(left_mask)[0]\n            right_indices = np.where(~left_mask)[0]\n            if len(left_indices) < 2 or len(right_indices) < 2:\n                continue\n            g_left = g[left_indices].sum()\n            h_left = h[left_indices].sum()\n            g_right = g[right_indices].sum()\n            h_right = h[right_indices].sum()\n            left_loss = -0.5 * g_left ** 2 / (h_left + lam) + gamma\n            right_loss = -0.5 * g_right ** 2 / (h_right + lam) + gamma\n            total_child_loss = left_loss + right_loss\n            gain = parent_loss - total_child_loss\n            if gain > best_gain:\n                best_gain = gain\n                best_split_threshold = threshold\n                best_split_feature = feature_idx\n    if best_gain <= 0:\n        return None\n    return (best_split_feature, best_split_threshold)"}
{"task_id": 19, "completion_id": 7, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    total_g = np.sum(g)\n    total_h = np.sum(h)\n    loss_parent = -0.5 * total_g ** 2 / (total_h + lam) + gamma\n    best_gain = -np.inf\n    best_feature = -1\n    best_threshold = -1\n    for feature in range(n_features):\n        data = np.column_stack((X[:, feature], g, h))\n        data = data[data[:, 0].argsort()]\n        feature_vals = data[:, 0]\n        grads = data[:, 1]\n        hessians = data[:, 2]\n        unique_vals = np.unique(feature_vals)\n        for threshold in unique_vals:\n            mask_left = feature_vals < threshold\n            mask_right = feature_vals > threshold\n            g_L = grads[mask_left]\n            h_L = hessians[mask_left]\n            g_R = grads[mask_right]\n            h_R = hessians[mask_right]\n            if len(g_L) < 2 or len(g_R) < 2:\n                continue\n            loss_L = -0.5 * np.sum(g_L) ** 2 / (np.sum(h_L) + lam) + gamma\n            loss_R = -0.5 * np.sum(g_R) ** 2 / (np.sum(h_R) + lam) + gamma\n            gain = loss_parent - loss_L - loss_R\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature\n                best_threshold = threshold\n    if best_gain > 0:\n        return (best_feature, best_threshold)\n    else:\n        return None"}
{"task_id": 19, "completion_id": 8, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    sum_g = np.sum(g)\n    sum_h = np.sum(h)\n    loss_node = -0.5 * sum_g ** 2 / (sum_h + lam) + gamma\n    best_gain = -np.inf\n    best_feature = -1\n    best_threshold = -np.inf\n    for feature_idx in range(n_features):\n        unique_values = np.sort(np.unique(X[:, feature_idx]))\n        if len(unique_values) < 2:\n            continue\n        for threshold in unique_values[:-1]:\n            left_mask = X[:, feature_idx] <= threshold\n            right_mask = X[:, feature_idx] > threshold\n            if np.sum(left_mask) < 2 or np.sum(right_mask) < 2:\n                continue\n            sum_g_left = np.sum(g[left_mask])\n            sum_h_left = np.sum(h[left_mask])\n            loss_left = -0.5 * sum_g_left ** 2 / (sum_h_left + lam) + gamma\n            sum_g_right = np.sum(g[right_mask])\n            sum_h_right = np.sum(h[right_mask])\n            loss_right = -0.5 * sum_g_right ** 2 / (sum_h_right + lam) + gamma\n            gain = loss_node - loss_left - loss_right\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_idx\n                best_threshold = threshold\n    if best_gain > 1e-10:\n        return (best_feature, best_threshold)\n    else:\n        return None"}
{"task_id": 19, "completion_id": 9, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    total_g = np.sum(g)\n    total_h = np.sum(h)\n    parent_loss = -(0.5 * total_g ** 2 / (total_h + lam)) + gamma\n    best_gain = 0.0\n    best_split = None\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        thresholds = np.sort(np.unique(feature_values))\n        indices = np.argsort(feature_values)\n        cum_g = np.cumsum(g[indices])\n        cum_h = np.cumsum(h[indices])\n        feature_sorted = feature_values[indices]\n        for i in range(1, n_samples - 1):\n            left_g = cum_g[i]\n            left_h = cum_h[i]\n            right_g = total_g - left_g\n            right_h = total_h - left_h\n            left_loss = -(0.5 * left_g ** 2 / (left_h + lam)) + gamma\n            right_loss = -(0.5 * right_g ** 2 / (right_h + lam)) + gamma\n            gain = parent_loss - left_loss - right_loss\n            if gain > best_gain:\n                threshold = feature_sorted[i]\n                best_gain = gain\n                best_split = (feature_idx, threshold)\n    return best_split if best_gain > 0 else None\nX = np.array([[1, 2], [2, 1], [3, 3]])\ng = np.array([0.5, -1.2, 0.7])\nh = np.array([0.2, 0.3, 0.1])\ngamma = 0.1\nlam = 0.01"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n\n    def sigmoid(x):\n        return 1 / (1 + np.exp(-x))\n\n    def gradient_sigmoid(x):\n        return x * (1 - x)\n    if isinstance(x, list):\n        x = np.array(x)\n    if np.isscalar(x):\n        sig = sigmoid(x)\n        grad = gradient_sigmoid(sig)\n        return (round(float(sig), 4), round(float(grad), 4))\n    else:\n        sig = sigmoid(x)\n        grad = gradient_sigmoid(sig)\n        sig_rounded = np.round(sig, 4).tolist()\n        grad_rounded = np.round(grad, 4).tolist()\n        return (sig_rounded, grad_rounded)"}
{"task_id": 20, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    x = np.array(x)\n    sigmoid = 1 / (1 + np.exp(-x))\n    gradient = sigmoid * (1 - sigmoid)\n    sigmoid_rounded = np.round(sigmoid, 4)\n    gradient_rounded = np.round(gradient, 4)\n    if x.ndim == 0:\n        return (float(sigmoid_rounded[()]), float(gradient_rounded[()]))\n    else:\n        return (sigmoid_rounded.tolist(), gradient_rounded.tolist())"}
{"task_id": 20, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    is_scalar = np.isscalar(x)\n    arr = np.array(x, dtype=float)\n    sigmoid = 1 / (1 + np.exp(-arr))\n    gradient = sigmoid * (1 - sigmoid)\n    sigmoid_rounded = np.round(sigmoid, 4)\n    gradient_rounded = np.round(gradient, 4)\n    if is_scalar:\n        return (float(sigmoid_rounded), float(gradient_rounded))\n    else:\n        return (sigmoid_rounded.tolist(), gradient_rounded.tolist())"}
{"task_id": 20, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a numpy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    is_scalar = np.isscalar(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    if is_scalar:\n        return (round(float(sigmoid_x), 4), round(float(gradient_x), 4))\n    else:\n\n        def round_to_4(x):\n            return np.round(x, 4).tolist()\n        return (round_to_4(sigmoid_x), round_to_4(gradient_x))"}
{"task_id": 20, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    is_scalar = np.isscalar(x)\n    if not is_scalar:\n        x = np.array(x)\n    exp_x = np.exp(-x)\n    sigmoid = 1 / (1 + exp_x)\n    gradient = sigmoid * (1 - sigmoid)\n    sigmoid_rounded = np.round(sigmoid, 4)\n    gradient_rounded = np.round(gradient, 4)\n    if is_scalar:\n        return (float(sigmoid_rounded), float(gradient_rounded))\n    else:\n        return (sigmoid_rounded.tolist(), gradient_rounded.tolist())"}
{"task_id": 20, "completion_id": 5, "solution": "import numpy as np\nimport numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, (int, float)):\n        x_array = np.array(x, dtype=float)\n        scalar_input = True\n    elif isinstance(x, list):\n        x_array = np.array(x, dtype=float)\n        scalar_input = False\n    elif isinstance(x, np.ndarray):\n        x_array = x.astype(float)\n        scalar_input = False\n    else:\n        raise TypeError('Unsupported input type. Expected int, float, list or numpy.ndarray.')\n    sigmoid_x = 1 / (1 + np.exp(-x_array))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    if scalar_input:\n        return (round(float(sigmoid_x), 4), round(float(gradient_x), 4))\n    else:\n        return ([round(val, 4) for val in sigmoid_x.tolist()], [round(val, 4) for val in gradient_x.tolist()])"}
{"task_id": 20, "completion_id": 6, "solution": "import numpy as np\nimport numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    is_scalar = np.isscalar(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    if is_scalar:\n        sig_rounded = round(float(sigmoid_x), 4)\n        grad_rounded = round(float(gradient_x), 4)\n        return (sig_rounded, grad_rounded)\n    else:\n        sig_rounded = np.round(sigmoid_x, 4).tolist()\n        grad_rounded = np.round(gradient_x, 4).tolist()\n        return (sig_rounded, grad_rounded)"}
{"task_id": 20, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, (list, np.ndarray)):\n        x = np.array(x)\n    else:\n        x = np.array([x])\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n    if x.ndim == 0:\n        return (float(sigmoid_x[()]), float(gradient_x[()]))\n    else:\n        return (sigmoid_x.tolist(), gradient_x.tolist())"}
{"task_id": 20, "completion_id": 8, "solution": "import numpy as np\nimport numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    is_scalar = np.isscalar(x)\n    x_array = np.array(x, dtype=np.float64) if not is_scalar else np.array([x], dtype=np.float64)\n    sigmoid_x = 1 / (1 + np.exp(-x_array))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n    if is_scalar:\n        return (float(sigmoid_x[0]), float(gradient_x[0]))\n    else:\n        return (sigmoid_x.tolist(), gradient_x.tolist())"}
{"task_id": 20, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, (int, float)):\n        is_scalar = True\n        np_x = np.array([x])\n    elif isinstance(x, (list, np.ndarray)):\n        is_scalar = False\n        np_x = np.array(x)\n    else:\n        raise ValueError('Unsupported input type. Input must be int, float, list, or numpy.ndarray.')\n    sigmoid_x = 1 / (1 + np.exp(-np_x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n\n    def round4(val):\n        return np.round(val, 4).tolist() if not isinstance(val, (int, float)) else round(val, 4)\n    if is_scalar:\n        return (round(sigmoid_x.item(), 4), round(gradient_x.item(), 4))\n    else:\n        return (round4(sigmoid_x), round4(gradient_x))"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_samples = len(x_train)\n    D = [1.0 / n_samples] * n_samples\n    ensemble = []\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    indices = np.argsort(x_train)\n    x_sorted = x_train[indices]\n    y_sorted = y_train[indices]\n    threshold_candidates = ((x_sorted[i] + x_sorted[i + 1]) / 2 for i in range(n_samples - 1))\n    while True:\n        best_error = float('inf')\n        best_stump = None\n        for theta in threshold_candidates:\n            for d in [0, 1]:\n                predictions = np.where(x_sorted <= theta, 1, -1) if d == 0 else np.where(x_sorted > theta, 1, -1)\n                predictions = predictions[np.argsort(indices)]\n                error = np.sum(D * (predictions != y_train))\n                if error < best_error:\n                    best_error = error\n                    best_stump = (d, theta)\n        if best_error >= 0.5 or (epsilon == 0.0 and best_error == 0.0):\n            break\n        err = best_error\n        alpha = 0.5 * math.log((1 - err) / err)\n        (d, theta) = best_stump\n        ensemble.append((d, theta, alpha))\n        d = best_stump[0]\n        theta = best_stump[1]\n        pred = np.where(x_train <= theta, 1, -1) if d == 0 else np.where(x_train > theta, 1, -1)\n        is_misclassified = pred != y_train\n        for i in range(n_samples):\n            D[i] *= np.exp(-alpha * y_train[i] * pred[i])\n        D = D / np.sum(D)\n        ensemble_pred = np.sign(np.sum([(1 if x <= theta and d == 0 or (x > theta and d == 1) else -1) * alpha for (d, theta, alpha) in ensemble]) + 1e-10)\n        train_error = np.mean(ensemble_pred != y_train)\n        if train_error <= epsilon:\n            break\n    predictions = []\n    for x in x_test:\n        h_sum = 0\n        for (d, theta, alpha) in ensemble:\n            if x <= theta and d == 0 or (x > theta and d == 1):\n                h_sum += alpha\n            else:\n                h_sum -= alpha\n        predictions.append(1 if h_sum > 0 else -1)\n    return predictions"}
{"task_id": 21, "completion_id": 1, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    ensemble = []\n    n = len(x_train)\n    D = np.full(n, 1.0 / n)\n    sorted_indices = np.argsort(x_train)\n    sorted_x = x_train[sorted_indices]\n    while True:\n        best_stump = None\n        best_error = float('inf')\n        for i in range(n - 1):\n            theta = (sorted_x[i] + sorted_x[i + 1]) / 2\n            for d in [0, 1]:\n                if d == 0:\n                    h = np.where(x_train <= theta, 1, -1)\n                else:\n                    h = np.where(x_train > theta, 1, -1)\n                error = np.sum(D[y_train != h])\n                if error < best_error:\n                    best_error = error\n                    best_stump = (theta, d, h)\n        if best_error == 0 and len(ensemble) > 0:\n            break\n        if best_error == 0:\n            alpha = float('inf')\n        else:\n            alpha = 0.5 * math.log((1 - best_error) / best_error)\n        (theta, d, h) = best_stump\n        ensemble.append((theta, d, alpha))\n        for i in range(n):\n            if y_train[i] == best_stump[2][i]:\n                D[i] *= math.exp(-alpha)\n            else:\n                D[i] *= math.exp(alpha)\n        D = D / np.sum(D)\n        predictions = np.zeros(n)\n        for (theta, d, alpha) in ensemble:\n            if d == 0:\n                predictions += np.where(x_train <= theta, 1, -1) * alpha\n            else:\n                predictions += np.where(x_train > theta, 1, -1) * alpha\n        training_error = np.mean(np.sign(predictions) != y_train)\n        if training_error <= epsilon or training_error == 0:\n            break\n    test_predictions = np.zeros(len(x_test))\n    for (theta, d, alpha) in ensemble:\n        if d == 0:\n            test_predictions += np.where(np.array(x_test) <= theta, 1, -1) * alpha\n        else:\n            test_predictions += np.where(np.array(x_test) > theta, 1, -1) * alpha\n    return list(np.sign(test_predictions))"}
{"task_id": 21, "completion_id": 2, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n = len(x_train)\n    train_data = list(zip(x_train, y_train))\n    D = np.full(n, 1.0 / n)\n    stumps = []\n    alphas = []\n    while True:\n        sorted_train = sorted(train_data, key=lambda x: x[0])\n        x_sorted = [x[0] for x in sorted_train]\n        y_sorted = [x[1] for x in sorted_train]\n        possible_thresholds = []\n        for i in range(n - 1):\n            midpoint = (x_sorted[i] + x_sorted[i + 1]) / 2\n            possible_thresholds.append(midpoint)\n        best_error = float('inf')\n        best_stump = None\n        for theta in possible_thresholds:\n            predictions_d0 = [1 if x <= theta else -1 for (x, _) in sorted_train]\n            error_d0 = sum((D[i] for i in range(n) if predictions_d0[i] != y_sorted[i]))\n            predictions_d1 = [1 if x > theta else -1 for (x, _) in sorted_train]\n            error_d1 = sum((D[i] for i in range(n) if predictions_d1[i] != y_sorted[i]))\n            for (d, predictions, error) in [(0, predictions_d0, error_d0), (1, predictions_d1, error_d1)]:\n                if error < best_error:\n                    best_error = error\n                    best_stump = (theta, d)\n        if best_error == 0:\n            break\n        (theta, d) = best_stump\n        error_rate = best_error\n        alpha = 0.5 * math.log((1 - error_rate) / error_rate)\n        for i in range(n):\n            x = x_train[i]\n            y = y_train[i]\n            h = 1 if d == 0 and x <= theta or (d == 1 and x > theta) else -1\n            if h != y:\n                D[i] *= math.exp(alpha)\n        D = D / np.sum(D)\n        stumps.append((theta, d))\n        alphas.append(alpha)\n        current_predictions = np.zeros(n)\n        for (alpha, (theta, d)) in zip(alphas, stumps):\n            for i in range(n):\n                x = x_train[i]\n                if d == 0 and x <= theta or (d == 1 and x > theta):\n                    current_predictions[i] += alpha\n                else:\n                    current_predictions[i] -= alpha\n        predictions = np.sign(current_predictions)\n        training_error = sum((1 for i in range(n) if predictions[i] != y_train[i])) / n\n        if training_error <= epsilon:\n            break\n    test_predictions = []\n    for x in x_test:\n        ensemble_sum = 0\n        for (alpha, (theta, d)) in zip(alphas, stumps):\n            h = 1 if d == 0 and x <= theta or (d == 1 and x > theta) else -1\n            ensemble_sum += alpha * h\n        test_predictions.append(1 if ensemble_sum > 0 else -1)\n    return test_predictions"}
{"task_id": 21, "completion_id": 3, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n = len(x_train)\n    D = np.ones(n) / n\n    zipped = list(zip(x_train, y_train))\n    zipped.sort()\n    (x_train, y_train) = zip(*zipped)\n    x_train = list(x_train)\n    y_train = list(y_train)\n    thresholds = []\n    for i in range(n - 1):\n        midpoint = (x_train[i] + x_train[i + 1]) / 2\n        thresholds.append(midpoint)\n    ensemble = []\n    while True:\n        best_error = float('inf')\n        best_d = -1\n        best_theta = None\n        for theta in thresholds:\n            for d in [0, 1]:\n                predicted = [1 if (x <= theta if d == 0 else x > theta) else -1 for x in x_train]\n                error = sum((D[i] for i in range(n) if predicted[i] != y_train[i]))\n                if error < best_error:\n                    best_error = error\n                    best_d = d\n                    best_theta = theta\n        if best_error >= 0.5:\n            break\n        err = max(best_error, 1e-12)\n        alpha = 0.5 * math.log((1 - err) / err)\n        ensemble.append((alpha, best_d, best_theta))\n        predicted = [1 if (x <= best_theta if best_d == 0 else x > best_theta) else -1 for x in x_train]\n        for i in range(n):\n            if predicted[i] == y_train[i]:\n                D[i] *= math.exp(-alpha)\n            else:\n                D[i] *= math.exp(alpha)\n        D = D / np.sum(D)\n        ensemble_predicted = [1 if sum((alpha * (1 if (x <= theta if d == 0 else x > theta) else -1) for (alpha, d, theta) in ensemble)) > 0 else -1 for x in x_train]\n        training_error = sum((1 for i in range(n) if ensemble_predicted[i] != y_train[i])) / n\n        if training_error <= epsilon:\n            break\n    y_pred = []\n    for x in x_test:\n        score = 0\n        for (alpha, d, theta) in ensemble:\n            if x <= theta if d == 0 else x > theta:\n                score += alpha\n            else:\n                score -= alpha\n        y_pred.append(1 if score > 0 else -1)\n    return y_pred"}
{"task_id": 21, "completion_id": 4, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n = len(x_train)\n    assert len(y_train) == n\n    D = np.full(n, 1.0 / n)\n    ensemble = []\n    while True:\n        best_error = float('inf')\n        best_stump = None\n        x_sorted = sorted(set(x_train))\n        thresholds = [(x_sorted[i] + x_sorted[i + 1]) / 2 for i in range(len(x_sorted) - 1)]\n        for theta in thresholds:\n            for d in [0, 1]:\n                h = np.array([1 if (x <= theta) != (d == 1) else -1 for x in x_train], dtype=np.float64)\n                err = np.sum(D[y_train != h])\n                if err < best_error:\n                    best_error = err\n                    best_stump = (theta, d)\n        y_pred_train = np.sign(sum((alpha * h(x_train, stumps[0], stumps[1]) for (stumps, alpha) in ensemble)))\n        train_error = np.mean(y_pred_train != np.array(y_train, dtype=np.float64))\n        if train_error <= epsilon:\n            break\n        err = best_error\n        if err == 0.0:\n            alpha = float('inf')\n        else:\n            alpha = 0.5 * math.log((1 - err) / err)\n        ensemble.append(((best_stump[0], best_stump[1]), alpha))\n        (theta, d) = best_stump\n        h = np.array([1 if (x <= theta) != (d == 1) else -1 for x in x_train], dtype=np.float64)\n        D *= np.exp(-alpha * y_train * h)\n        D /= np.sum(D)\n\n    def h(x, theta, d):\n        return 1 if (x <= theta) != (d == 1) else -1\n    predictions = []\n    for x in x_test:\n        score = 0.0\n        for ((theta, d), alpha) in ensemble:\n            score += alpha * h(x, theta, d)\n        predictions.append(1 if score > 0 else -1)\n    return predictions\nx_train = [1.0, 2.0, 3.0]\ny_train = [1, -1, 1]\nx_test = [1.5, 2.5, 3.5]\npredictions = adaboost_1d_predict(x_train, y_train, x_test, epsilon=0.0)"}
{"task_id": 21, "completion_id": 5, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error. Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_train = len(x_train)\n    weights = np.full(n_train, 1 / n_train)\n    ensemble = []\n    x_train_sorted = np.sort(x_train)\n    while True:\n        thresholds = []\n        for i in range(n_train - 1):\n            threshold = (x_train_sorted[i] + x_train_sorted[i + 1]) / 2\n            thresholds.append(threshold)\n        best_error = float('inf')\n        best_d = -1\n        best_theta = None\n        best_hypothesis = None\n        for d in [0, 1]:\n            for theta in thresholds:\n                y_pred = []\n                for x in x_train_sorted:\n                    if d == 0 and x <= theta:\n                        y_pred.append(1)\n                    elif d == 0 and x > theta:\n                        y_pred.append(-1)\n                    elif d == 1 and x > theta:\n                        y_pred.append(1)\n                    elif d == 1 and x <= theta:\n                        y_pred.append(-1)\n                error = sum((w * (1 - int(y_p == y)) for (w, y_p, y) in zip(weights, y_pred, y_train)))\n                if error < best_error:\n                    best_error = error\n                    best_d = d\n                    best_theta = theta\n                    best_hypothesis = y_pred\n        if epsilon == 0.0 or best_error >= 1 - 1e-08:\n            break\n        err_rate = best_error\n        alpha = 0.5 * math.log((1 - err_rate) / err_rate)\n        hypothesis = np.array(best_hypothesis)\n        weights *= np.exp(-alpha * np.array(y_train) * hypothesis)\n        weights /= np.sum(weights)\n        ensemble.append((best_d, best_theta, alpha))\n        total_predictions = np.array([0.0] * n_train)\n        for (d, theta, a) in ensemble:\n            y_pred = []\n            for x in x_train_sorted:\n                if d == 0 and x <= theta:\n                    y_pred.append(1)\n                elif d == 0 and x > theta:\n                    y_pred.append(-1)\n                elif d == 1 and x > theta:\n                    y_pred.append(1)\n                elif d == 1 and x <= theta:\n                    y_pred.append(-1)\n            total_predictions += a * np.array(y_pred)\n        predictions = np.sign(total_predictions)\n        training_error = sum((1 for i in range(n_train) if predictions[i] != y_train[i])) / n_train\n        if training_error <= epsilon:\n            break\n    test_results = []\n    for x in x_test:\n        total = 0.0\n        for (d, theta, alpha) in ensemble:\n            if d == 0:\n                if x <= theta:\n                    total += alpha\n                else:\n                    total -= alpha\n            elif d == 1:\n                if x > theta:\n                    total += alpha\n                else:\n                    total -= alpha\n        test_results.append(1 if total >= 0 else -1)\n    return test_results"}
{"task_id": 21, "completion_id": 6, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_samples = len(x_train)\n    ensemble = []\n    D = [1.0 / n_samples] * n_samples\n    while True:\n        best_stump = None\n        min_error = float('inf')\n        sorted_data = sorted(zip(x_train, y_train), key=lambda x: x[0])\n        threshold_values = []\n        for i in range(n_samples - 1):\n            (x1, _) = sorted_data[i]\n            (x2, _) = sorted_data[i + 1]\n            midpoint = (x1 + x2) / 2.0\n            threshold_values.append(midpoint)\n        for theta in threshold_values:\n            for d in [0, 1]:\n                error = 0.0\n                for i in range(n_samples):\n                    (x, y) = sorted_data[i]\n                    if d == 0:\n                        prediction = 1 if x <= theta else -1\n                    else:\n                        prediction = 1 if x > theta else -1\n                    if prediction != y:\n                        error += D[i]\n                if error < min_error:\n                    min_error = error\n                    best_stump = (d, theta)\n        if min_error >= 0.5 or min_error <= 0:\n            break\n        alpha = 0.5 * math.log((1 - min_error) / min_error)\n        for i in range(n_samples):\n            (x, y) = sorted_data[i]\n            (d, theta) = best_stump\n            if d == 0:\n                prediction = 1 if x <= theta else -1\n            else:\n                prediction = 1 if x > theta else -1\n            if prediction != y:\n                D[i] *= math.exp(alpha)\n        Z = sum(D)\n        D = [w / Z for w in D]\n        ensemble.append((alpha, *best_stump))\n        training_error = 0\n        for i in range(n_samples):\n            (x, y) = sorted_data[i]\n            total_sum = 0\n            for (alpha_val, d, theta) in ensemble:\n                if d == 0:\n                    pred = 1 if x <= theta else -1\n                else:\n                    pred = 1 if x > theta else -1\n                total_sum += alpha_val * pred\n            if np.sign(total_sum) != y:\n                training_error += 1\n        training_error /= n_samples\n        if training_error <= epsilon:\n            break\n    predictions = []\n    for x in x_test:\n        total_sum = 0\n        for (alpha_val, d, theta) in ensemble:\n            if d == 0:\n                pred = 1 if x <= theta else -1\n            else:\n                pred = 1 if x > theta else -1\n            total_sum += alpha_val * pred\n        predictions.append(np.sign(total_sum))\n    return predictions"}
{"task_id": 21, "completion_id": 7, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n = len(x_train)\n    D = np.array([1 / n] * n)\n    ensemble = []\n    sorted_indices = np.argsort(x_train)\n    sorted_x = [x_train[i] for i in sorted_indices]\n    sorted_y = [y_train[i] for i in sorted_indices]\n    while True:\n        thresholds = [(sorted_x[i] + sorted_x[i + 1]) / 2 for i in range(n - 1)]\n        best_error = float('inf')\n        best_stump = None\n        best_pred = None\n        for theta in thresholds:\n            for d in [0, 1]:\n                if d == 0:\n                    pred = [1 if x <= theta else -1 for x in sorted_x]\n                else:\n                    pred = [1 if x > theta else -1 for x in sorted_x]\n                error = sum((D[i] for i in range(n) if pred[i] != sorted_y[i]))\n                if error < best_error:\n                    best_error = error\n                    best_stump = (theta, d)\n                    best_pred = pred\n        if best_error >= 0.5:\n            break\n        err_rate = best_error\n        alpha = 0.5 * math.log((1 - err_rate) / err_rate)\n        ensemble.append((best_stump, alpha))\n        (theta, d) = best_stump\n        Z = 0\n        for i in range(n):\n            if d == 0:\n                h_i = 1 if sorted_x[i] <= theta else -1\n            else:\n                h_i = 1 if sorted_x[i] > theta else -1\n            if sorted_y[i] == h_i:\n                D[i] *= math.exp(-alpha)\n            else:\n                D[i] *= math.exp(alpha)\n            Z += D[i]\n        D /= Z\n        current_pred = np.zeros(n)\n        for (stump, alpha_val) in ensemble:\n            (theta, d) = stump\n            for i in range(n):\n                if d == 0:\n                    current_pred[i] += alpha_val * (1 if sorted_x[i] <= theta else -1)\n                else:\n                    current_pred[i] += alpha_val * (1 if sorted_x[i] > theta else -1)\n        training_error = sum((1 for i in range(n) if np.sign(current_pred[i]) != sorted_y[i])) / n\n        if epsilon == 0.0 or training_error <= epsilon:\n            break\n    test_predictions = []\n    for x in x_test:\n        vote = 0\n        for ((theta, d), alpha) in ensemble:\n            if d == 0:\n                vote += alpha * (1 if x <= theta else -1)\n            else:\n                vote += alpha * (1 if x > theta else -1)\n        test_predictions.append(1 if vote >= 0 else -1)\n    return test_predictions"}
{"task_id": 21, "completion_id": 8, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error. Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n = len(x_train)\n    D = [1.0 / n] * n\n    ensemble = []\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    while True:\n        best_error = float('inf')\n        best_stump = None\n        thresholds = []\n        sorted_idx = np.argsort(x_train)\n        sorted_x = x_train[sorted_idx]\n        for i in range(n - 1):\n            mid = (sorted_x[i] + sorted_x[i + 1]) / 2\n            thresholds.append(mid)\n        for theta in thresholds:\n            for d in [0, 1]:\n                predictions = np.where(x_train <= theta if d == 0 else x_train > theta, 1, -1)\n                error = np.sum([D[i] * (1 if predictions[i] != y_train[i] else 0) for i in range(n)])\n                if error >= 0.5:\n                    continue\n                if error < best_error:\n                    best_error = error\n                    best_stump = (d, theta)\n        if best_error >= 0.5:\n            break\n        if best_error < 1e-10 or abs(best_error) < 1e-10:\n            break\n        alpha = 0.5 * np.log((1 - best_error) / best_error)\n        (d_best, theta_best) = best_stump\n        ensemble.append((alpha, d_best, theta_best))\n        predictions = np.where(x_train <= theta_best if d_best == 0 else x_train > theta_best, 1, -1)\n        for i in range(n):\n            D[i] *= math.exp(-alpha * y_train[i] * predictions[i])\n        D = np.array(D) / np.sum(D)\n        current_prediction = np.zeros_like(y_train)\n        for (alpha, d, theta) in ensemble:\n            pred = np.where(x_train <= theta if d == 0 else x_train > theta, 1, -1)\n            current_prediction += alpha * pred\n        train_error = np.sum(np.sign(current_prediction) != y_train) / n\n        if train_error <= epsilon:\n            break\n    y_pred = np.zeros(len(x_test))\n    for (alpha, d, theta) in ensemble:\n        pred = np.where(np.array(x_test) <= theta if d == 0 else np.array(x_test) > theta, 1, -1)\n        y_pred += alpha * pred\n    return [int(np.sign(p)) for p in y_pred]"}
{"task_id": 21, "completion_id": 9, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\nfrom typing import List\ndef adaboost_1d_predict(x_train: List[float], y_train: List[int], x_test: List[float], epsilon: float=0.0) -> List[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n = len(x_train)\n    weights = np.full(n, 1 / n, dtype=np.float64)\n    ensemble = []\n    (x_train, y_train) = (np.array(x_train), np.array(y_train))\n    sorted_idx = np.argsort(x_train)\n    x_sorted = x_train[sorted_idx]\n    y_sorted = y_train[sorted_idx]\n    while True:\n        best_error = float('inf')\n        best_d = -1\n        best_theta = -1\n        best_hypothesis = None\n        thresholds = [0.5 * (x_sorted[i] + x_sorted[i + 1]) for i in range(n - 1)]\n        for theta in thresholds:\n            for d in [0, 1]:\n                predictions = np.where(x_sorted <= theta if d == 0 else x_sorted > theta, 1, -1)\n                error = weights @ (predictions != y_sorted).astype(np.float64)\n                if error < best_error:\n                    best_error = error\n                    best_d = d\n                    best_theta = theta\n                    best_hypothesis = (best_d, best_theta)\n        if best_error >= 0.5 or best_error == float('inf'):\n            break\n        err_rate = best_error\n        alpha = 0.5 * math.log((1 - err_rate) / err_rate)\n        predictions = np.where(x_sorted <= best_theta if best_d == 0 else x_sorted > best_theta, 1, -1)\n        weights *= np.exp(-alpha * y_sorted * predictions)\n        weights /= weights.sum()\n        ensemble.append((best_d, best_theta, alpha))\n        predictions = np.zeros(n)\n        for (d, theta, alpha) in ensemble:\n            pred = np.where(x_sorted <= theta if d == 0 else x_sorted > theta, 1, -1)\n            predictions += alpha * pred\n        final_predictions = np.sign(predictions)\n        training_error = (final_predictions != y_sorted).mean()\n        if epsilon >= 0 and training_error <= epsilon:\n            break\n    test_predictions = np.zeros(len(x_test))\n    for (d, theta, alpha) in ensemble:\n        pred = np.where(np.array(x_test) <= theta if d == 0 else np.array(x_test) > theta, 1, -1)\n        test_predictions += alpha * pred\n    return list(np.sign(test_predictions).astype(int))"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    x_train_sq = np.sum(X_train ** 2, axis=1).reshape(-1, 1)\n    x_test_sq = np.sum(X_test ** 2, axis=1).reshape(1, -1)\n    cross = X_train @ X_test.T\n    dist_sq = x_train_sq - 2 * cross + x_test_sq\n    kernel = np.exp(-gamma * dist_sq)\n    g = np.dot(alpha * y_train, kernel) + b\n    predictions = np.sign(g).flatten().tolist()\n    return [1 if x > 0 else -1 for x in predictions]"}
{"task_id": 25, "completion_id": 1, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    X_train = np.ascontiguousarray(X_train)\n    X_test = np.ascontiguousarray(X_test)\n    diff = X_train[:, np.newaxis, :] - X_test[np.newaxis, :, :]\n    squared_dist = np.sum(diff ** 2, axis=2)\n    rbf_kernel = np.exp(-gamma * squared_dist)\n    weighted_kernel = alpha * y_train\n    prediction = np.dot(weighted_kernel, rbf_kernel) + b\n    return [1 if p > 0 else -1 for p in prediction]"}
{"task_id": 25, "completion_id": 2, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    norm_train = np.sum(X_train ** 2, axis=1, keepdims=True)\n    norm_test = np.sum(X_test ** 2, axis=1)\n    cross = X_train @ X_test.T\n    distances_squared = norm_train + norm_test - 2 * cross\n    K = np.exp(-gamma * distances_squared)\n    scores = alpha * y_train @ K + b\n    predicted_labels = np.sign(scores).astype(int).tolist()\n    return predicted_labels\nX_train = np.array([[1, 2], [-1, -2]])\ny_train = np.array([1, -1])\nalpha = np.array([0.5, 0.5])\nb = 0.0\ngamma = 0.1\nX_test = np.array([[0, 0], [2, 2]])"}
{"task_id": 25, "completion_id": 3, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    diff = X_train[:, None, :] - X_test[None, :, :]\n    norms_squared = np.sum(diff ** 2, axis=2)\n    kernel_matrix = np.exp(-gamma * norms_squared)\n    decision_values = alpha * y_train @ kernel_matrix + b\n    predictions = np.sign(decision_values).astype(int).tolist()\n    return predictions"}
{"task_id": 25, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    dist_squared = np.sum(X_test ** 2, axis=1, keepdims=True) + np.sum(X_train ** 2, axis=1) - 2 * X_test @ X_train.T\n    kernel_matrix = np.exp(-gamma * dist_squared)\n    decision = np.dot(alpha * y_train, kernel_matrix) + b\n    preds = np.sign(decision).astype(int)\n    return preds.tolist()"}
{"task_id": 25, "completion_id": 5, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    norm_train = np.sum(X_train ** 2, axis=1, keepdims=True)\n    norm_test = np.sum(X_test ** 2, axis=1, keepdims=True)\n    dot_product = np.dot(X_train, X_test.T)\n    distances_sq = norm_train - 2 * dot_product + norm_test.T\n    kernel_matrix = np.exp(-gamma * distances_sq)\n    coefficients = alpha * y_train.reshape(-1, 1)\n    decision_function = np.dot(coefficients.T, kernel_matrix) + b\n    decision_scores = decision_function[0, :]\n    predicted_labels = np.sign(decision_scores).astype(int)\n    return predicted_labels.tolist()\nX_train = np.array([[1.0, 2.0], [2.0, 3.0], [3.0, 1.0]])\nalpha = np.array([0.5, 1.0, 0.3])\nb = 0.1\ngamma = 0.5\nX_test = np.array([[2.5, 2.0]])"}
{"task_id": 25, "completion_id": 6, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    train_sq = np.sum(X_train ** 2, axis=1)\n    test_sq = np.sum(X_test ** 2, axis=1)\n    cross = np.dot(X_test, X_train.T)\n    dist_sq = train_sq + test_sq[:, np.newaxis] - 2 * cross\n    K = np.exp(-gamma * dist_sq)\n    scores = np.dot(K, alpha * y_train) + b\n    y_pred = np.sign(scores)\n    return y_pred.astype(int).tolist()\nX_train = np.array([[0, 0], [1, 1], [2, 2]])\ny_train = np.array([-1, 1, 1])\nalpha = np.array([0.5, 0.5, 0.0])\nb = -0.5\ngamma = 0.5\nX_test = np.array([[0.5, 0.5], [2, 2]])"}
{"task_id": 25, "completion_id": 7, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    X_train_sq = np.sum(X_train ** 2, axis=1).reshape(-1, 1)\n    X_test_sq = np.sum(X_test ** 2, axis=1)\n    cross_product = X_train @ X_test.T\n    distances_sq = X_train_sq - 2 * cross_product + X_test_sq\n    kernel_values = np.exp(-gamma * distances_sq)\n    predictions = alpha * y_train @ kernel_values + b\n    return np.sign(predictions[0]).astype(int).tolist()"}
{"task_id": 25, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is either 1 or -1.\n    \"\"\"\n    inner_product = np.dot(X_test, X_train.T)\n    train_squares = np.sum(X_train ** 2, axis=1)\n    test_squares = np.sum(X_test ** 2, axis=1)[:, np.newaxis]\n    distances_squared = train_squares - 2 * inner_product + test_squares\n    K = np.exp(-gamma * distances_squared)\n    decision_function = np.dot(K, alpha * y_train) + b\n    y_pred = np.sign(decision_function).astype(int)\n    return y_pred.tolist()"}
{"task_id": 25, "completion_id": 9, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    test_norms = np.sum(X_test ** 2, axis=1, keepdims=True)\n    train_norms = np.sum(X_train ** 2, axis=1, keepdims=True)\n    inner_product = X_test @ X_train.T\n    distances_squared = test_norms - 2 * inner_product + train_norms.T\n    K = np.exp(-gamma * distances_squared)\n    weights = alpha * y_train\n    g = K @ weights + b\n    y_pred = np.sign(g).astype(int)\n    return y_pred.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n    (m, n) = X_np.shape\n    max_rank = min(m, n)\n    if k < 1 or k > max_rank:\n        return -1\n    (U, S, Vt) = np.linalg.svd(X_np, full_matrices=False)\n    U_k = U[:, :k]\n    S_k = np.diag(S[:k])\n    Vt_k = Vt[:k, :]\n    X_hat = U_k @ S_k @ Vt_k\n    mse = np.mean((X_np - X_hat) ** 2)\n    X_hat_rounded = [[round(val, 4) for val in row] for row in X_hat.tolist()]\n    mse_rounded = round(mse, 4)\n    return (X_hat_rounded, mse_rounded)\nX = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]\nk = 2"}
{"task_id": 28, "completion_id": 1, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error. Both are rounded to\n        four decimals. If `k` is invalid, the function returns -1.\n    \"\"\"\n    X = np.array(X, dtype=np.float64)\n    (m, n) = X.shape\n    min_dim = min(m, n)\n    if not 1 <= k <= min_dim:\n        return -1\n    (U, S, Vt) = np.linalg.svd(X, full_matrices=False)\n    U_k = U[:, :k]\n    S_k = np.diag(S[:k])\n    Vt_k = Vt[:k, :]\n    X_hat = U_k @ S_k @ Vt_k\n    mse = np.mean((X - X_hat) ** 2)\n    X_hat_rounded = np.round(X_hat, 4).tolist()\n    mse_rounded = round(mse, 4)\n    return (X_hat_rounded, mse_rounded)\nX = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk = 1"}
{"task_id": 28, "completion_id": 2, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X = np.array(X)\n    (m, n) = X.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, S, Vt) = np.linalg.svd(X, full_matrices=False)\n    U_k = U[:, :k]\n    S_k = np.diag(S[:k])\n    Vt_k = Vt[:k, :]\n    X_hat = U_k @ S_k @ Vt_k\n    mse = np.mean((X - X_hat) ** 2)\n    X_hat_rounded = [[round(value, 4) for value in row] for row in X_hat.tolist()]\n    mse_rounded = round(mse, 4)\n    return (X_hat_rounded, mse_rounded)"}
{"task_id": 28, "completion_id": 3, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error. Both are rounded to\n        four decimals. If `k` is invalid the function returns -1.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    (m, n) = X.shape\n    if not 1 <= k <= min(m, n):\n        return -1\n    (U, S, VT) = np.linalg.svd(X, full_matrices=False)\n    U_k = U[:, :k]\n    S_k = np.diag(S[:k])\n    VT_k = VT[:k, :]\n    X_hat = np.round(np.dot(U_k, np.dot(S_k, VT_k)), 4)\n    original = X.flat\n    reconstructed = X_hat.flat\n    mse = np.mean((original - reconstructed) ** 2)\n    mse = round(mse, 4)\n    X_hat_list = X_hat.tolist()\n    return (X_hat_list, mse)\nk = 2"}
{"task_id": 28, "completion_id": 4, "solution": "import numpy as np\nfrom typing import list, tuple\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    (m, n) = X.shape\n    if not 1 <= k <= min(m, n):\n        return -1\n    (U, S, Vt) = np.linalg.svd(X, full_matrices=False)\n    U_k = U[:, :k]\n    S_k = np.diag(S[:k])\n    Vt_k = Vt[:k, :]\n    X_hat = np.dot(U_k, np.dot(S_k, Vt_k))\n    mse = np.mean((X - X_hat) ** 2)\n    X_hat_rounded = [[round(cell, 4) for cell in row] for row in X_hat.tolist()]\n    mse_rounded = round(mse, 4)\n    return (X_hat_rounded, mse_rounded)\nk = 2"}
{"task_id": 28, "completion_id": 5, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X)\n    (m, n) = X_np.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, S, Vt) = np.linalg.svd(X_np, full_matrices=False)\n    U_k = U[:, :k]\n    S_k = np.diag(S[:k])\n    Vt_k = Vt[:k, :]\n    X_hat = U_k @ S_k @ Vt_k\n    mse = np.mean((X_np - X_hat) ** 2)\n    X_hat_rounded = [[round(val, 4) for val in row] for row in X_hat.tolist()]\n    return (X_hat_rounded, round(mse, 4))\nX = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk = 2"}
{"task_id": 28, "completion_id": 6, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n    (m, n) = X_np.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, S, VT) = np.linalg.svd(X_np, full_matrices=False)\n    U_k = U[:, :k]\n    S_k = np.diag(S[:k])\n    VT_k = VT[:k, :]\n    X_hat = np.dot(np.dot(U_k, S_k), VT_k)\n    mse = np.mean((X_np - X_hat) ** 2)\n    X_hat_rounded = [[round(val, 4) for val in row] for row in X_hat.tolist()]\n    mse_rounded = round(mse, 4)\n    return (X_hat_rounded, mse_rounded)"}
{"task_id": 28, "completion_id": 7, "solution": "import numpy as np\nfrom numpy.linalg import matrix_rank\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    (m, n) = X.shape\n    max_rank = min(m, n)\n    if not 1 <= k <= max_rank:\n        return -1\n    (U, S, Vt) = np.linalg.svd(X, full_matrices=False)\n    U_k = U[:, :k]\n    S_k = S[:k]\n    Vt_k = Vt[:k, :]\n    X_hat = U_k @ np.diag(S_k) @ Vt_k\n    mse = np.mean((X - X_hat) ** 2)\n    X_hat_rounded = [[round(value, 4) for value in row] for row in X_hat.tolist()]\n    mse_rounded = round(mse, 4)\n    return (X_hat_rounded, mse_rounded)"}
{"task_id": 28, "completion_id": 8, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X = np.array(X)\n    (m, n) = X.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, S, Vt) = np.linalg.svd(X, full_matrices=False)\n    U_k = U[:, :k]\n    S_k = np.diag(S[:k])\n    Vt_k = Vt[:k, :]\n    X_hat = U_k @ S_k @ Vt_k\n    mse = np.mean((X - X_hat) ** 2)\n    X_hat = [[round(val, 4) for val in row] for row in X_hat.tolist()]\n    mse = round(mse, 4)\n    return (X_hat, mse)"}
{"task_id": 28, "completion_id": 9, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X, dtype=np.float64)\n    (m, n) = X_np.shape\n    if not 1 <= k <= min(m, n):\n        return -1\n    (U, S, Vt) = np.linalg.svd(X_np, full_matrices=False)\n    U_k = U[:, :k]\n    S_k = S[:k]\n    Vt_k = Vt[:k, :]\n    X_hat = U_k @ np.diag(S_k) @ Vt_k\n    mse = np.mean((X_np - X_hat) ** 2)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    n = len(x_train)\n    indices = np.argsort(x_train)\n    x_train = x_train[indices]\n    y_train = y_train[indices]\n    current_pred = np.zeros(n)\n    residuals = y_train - current_pred\n    predictions = []\n    while True:\n        current_rss = np.sum(residuals ** 2)\n        if current_rss < epsilon:\n            break\n        mid_points = (x_train[1:] + x_train[:-1]) / 2\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        best_new_rss = np.inf\n        for s in mid_points:\n            left_mask = x_train <= s\n            right_mask = x_train > s\n            if np.any(left_mask):\n                c1 = np.mean(residuals[left_mask])\n            else:\n                c1 = 0\n            if np.any(right_mask):\n                c2 = np.mean(residuals[right_mask])\n            else:\n                c2 = 0\n            new_residuals = residuals - np.where(x_train <= s, c1, c2)\n            new_rss = np.sum(new_residuals ** 2)\n            if new_rss < best_new_rss:\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n                best_new_rss = new_rss\n        predictions.append((best_split, best_c1, best_c2))\n        current_pred += np.where(x_train <= best_split, best_c1, best_c2)\n        residuals = y_train - current_pred\n    yhat = 0\n    for (s, c1, c2) in predictions:\n        if x_query <= s:\n            yhat += c1\n        else:\n            yhat += c2\n    return round(yhat, 4)\nx_train = [1, 2, 3, 4, 5]\ny_train = [2, 4, 1, 3, 5]\nx_query = 3.5"}
{"task_id": 29, "completion_id": 1, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    ensemble = []\n    residuals = y_train.copy()\n    current_prediction = 0\n    while True:\n        n = len(x_train)\n        pred = np.zeros(n)\n        for (s, c1, c2) in ensemble:\n            pred += c1 * (x_train <= s) + c2 * (x_train > s)\n        current_rss = np.sum((y_train - pred) ** 2)\n        if current_rss < epsilon:\n            break\n        candidate_splits = (x_train[:-1] + x_train[1:]) / 2\n        best_rss = np.inf\n        best_s = None\n        best_c1 = None\n        best_c2 = None\n        for s in candidate_splits:\n            left_mask = x_train <= s\n            right_mask = x_train > s\n            c1 = np.mean(residuals[left_mask]) if np.sum(left_mask) > 0 else 0\n            c2 = np.mean(residuals[right_mask]) if np.sum(right_mask) > 0 else 0\n            pred_residuals = c1 * (x_train <= s) + c2 * (x_train > s)\n            rss = np.sum((residuals - pred_residuals) ** 2)\n            if rss < best_rss:\n                best_rss = rss\n                best_s = s\n                best_c1 = c1\n                best_c2 = c2\n        ensemble.append((best_s, best_c1, best_c2))\n        residuals -= best_c1 * (x_train <= best_s) + best_c2 * (x_train > best_s)\n    prediction = 0\n    for (s, c1, c2) in ensemble:\n        prediction += c1 if x_query <= s else c2\n    return round(prediction, 4)"}
{"task_id": 29, "completion_id": 2, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:\n    1. Determine all possible split points (mid-points between consecutive *x_train* values).\n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.\n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.\n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train, dtype=float)\n    y_train = np.array(y_train, dtype=float)\n    current_prediction = np.mean(y_train)\n    residuals = y_train - current_prediction\n    ensemble = []\n    sorted_indices = np.argsort(x_train)\n    x_sorted = x_train[sorted_indices]\n    y_sorted = y_train[sorted_indices]\n    residuals_sorted = residuals[sorted_indices]\n    split_points = (x_sorted[1:] + x_sorted[:-1]) / 2\n    while True:\n        best_split = None\n        best_c1 = 0.0\n        best_c2 = 0.0\n        best_rss = float('inf')\n        for s in split_points:\n            left_indices = np.where(x_sorted <= s)[0]\n            right_indices = np.where(x_sorted > s)[0]\n            if len(left_indices) == 0 or len(right_indices) == 0:\n                continue\n            c1 = np.mean(residuals_sorted[left_indices])\n            c2 = np.mean(residuals_sorted[right_indices])\n            pred = np.where(x_sorted <= s, c1, c2)\n            rss = np.sum((residuals_sorted - pred) ** 2)\n            if rss < best_rss:\n                best_rss = rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n        if best_split is None or best_rss <= epsilon:\n            break\n        ensemble.append((best_split, best_c1, best_c2))\n        residuals_sorted = residuals_sorted - np.where(x_sorted <= best_split, best_c1, best_c2)\n    final_prediction = current_prediction\n    for (s, c1, c2) in ensemble:\n        if x_query <= s:\n            final_prediction += c1\n        else:\n            final_prediction += c2\n    return round(final_prediction, 4)"}
{"task_id": 29, "completion_id": 3, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train, dtype=float)\n    y_train = np.array(y_train, dtype=float)\n    idx = np.argsort(x_train)\n    x_train = x_train[idx]\n    y_train = y_train[idx]\n    n = len(x_train)\n    predictions = np.full_like(y_train, np.mean(y_train))\n    residuals = y_train - predictions.copy()\n    current_rss = np.sum(residuals ** 2)\n    stumps = []\n    while current_rss > epsilon:\n        best_split = None\n        best_c1 = 0\n        best_c2 = 0\n        best_rss = float('inf')\n        midpoints = (x_train[1:] + x_train[:-1]) / 2.0\n        for s in midpoints:\n            idx_left = x_train <= s\n            idx_right = x_train > s\n            count_left = np.sum(idx_left)\n            count_right = np.sum(idx_right)\n            residual_left = residuals[idx_left]\n            residual_right = residuals[idx_right]\n            c1 = np.mean(residual_left) if count_left > 0 else 0\n            c2 = np.mean(residual_right) if count_right > 0 else 0\n            predicted_residuals = np.where(x_train <= s, c1, c2)\n            rss = np.sum((residuals - predicted_residuals) ** 2)\n            if rss < best_rss:\n                best_rss = rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n        stumps.append((best_split, best_c1, best_c2))\n        for (s, c1, c2) in stumps:\n            delta = np.where(x_train <= s, c1, c2)\n            predictions += delta\n        residuals = y_train - predictions\n        current_rss = np.sum(residuals ** 2)\n        if current_rss <= epsilon:\n            break\n    pred = 0\n    for (split, c1, c2) in stumps:\n        if x_query <= split:\n            pred += c1\n        else:\n            pred += c2\n    return round(pred, 4)\nx_train = [1.0, 2.0, 3.0, 4.0, 5.0]\ny_train = [2.0, 4.0, 6.0, 8.0, 10.0]\nx_query = 3.0"}
{"task_id": 29, "completion_id": 4, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n    \n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n    \n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sort_idx = np.argsort(x_train)\n    x_train_sorted = x_train[sort_idx]\n    y_train_sorted = y_train[sort_idx]\n    residuals = y_train_sorted.copy()\n    ensemble_splits = []\n    ensemble_c1 = []\n    ensemble_c2 = []\n    while True:\n        current_rss = np.sum(residuals ** 2)\n        if current_rss < epsilon:\n            break\n        best_rss = float('inf')\n        best_s = None\n        best_c1 = None\n        best_c2 = None\n        x_unique = np.unique(x_train_sorted)\n        unique_x_pairs = zip(x_unique[:-1], x_unique[1:])\n        for i in range(len(x_train_sorted) - 1):\n            if x_train_sorted[i] == x_train_sorted[i + 1]:\n                continue\n            s = (x_train_sorted[i] + x_train_sorted[i + 1]) / 2\n            c1 = np.mean(residuals[x_train_sorted <= s])\n            c2 = np.mean(residuals[x_train_sorted > s])\n            predicted = np.where(x_train_sorted <= s, c1, c2)\n            rss = np.sum((residuals - predicted) ** 2)\n            if rss < best_rss:\n                best_rss = rss\n                best_s = s\n                best_c1 = c1\n                best_c2 = c2\n        ensemble_splits.append(best_s)\n        ensemble_c1.append(best_c1)\n        ensemble_c2.append(best_c2)\n        for i in range(len(residuals)):\n            for (s, c1, c2) in zip(ensemble_splits, ensemble_c1, ensemble_c2):\n                if x_train_sorted[i] <= s:\n                    residuals[i] -= c1\n                else:\n                    residuals[i] -= c2\n    prediction = 0.0\n    for (s, c1, c2) in zip(ensemble_splits, ensemble_c1, ensemble_c2):\n        if x_query <= s:\n            prediction += c1\n        else:\n            prediction += c2\n    return round(prediction, 4)"}
{"task_id": 29, "completion_id": 5, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sorted_indices = np.argsort(x_train)\n    x_sorted = x_train[sorted_indices]\n    y_sorted = y_train[sorted_indices]\n    splits = (x_sorted[1:] + x_sorted[:-1]) / 2\n    residuals = y_sorted.copy()\n    ensemble = []\n    while True:\n        best_split = None\n        best_c1 = 0.0\n        best_c2 = 0.0\n        best_rss = float('inf')\n        for s in splits:\n            left_mask = x_sorted <= s\n            right_mask = x_sorted > s\n            c1 = np.mean(residuals[left_mask]) if left_mask.any() else 0\n            c2 = np.mean(residuals[right_mask]) if right_mask.any() else 0\n            pred = np.where(x_sorted <= s, c1, c2)\n            rss = np.sum((residuals - pred) ** 2)\n            if rss < best_rss:\n                best_rss = rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n        if best_rss < epsilon:\n            break\n        ensemble.append((best_split, best_c1, best_c2))\n        for (s, c1, c2) in ensemble:\n            residuals = residuals - np.where(x_sorted <= s, c1, c2)\n    prediction = 0.0\n    for (s, c1, c2) in ensemble:\n        if x_query <= s:\n            prediction += c1\n        else:\n            prediction += c2\n    return round(prediction, 4)"}
{"task_id": 29, "completion_id": 6, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train).flatten()\n    y_train = np.array(y_train).flatten()\n    sort_indices = np.argsort(x_train)\n    x_sorted = x_train[sort_indices]\n    y_sorted = y_train[sort_indices]\n    residuals = y_sorted.copy()\n    ensemble = []\n    while True:\n        n = len(x_sorted)\n        best_rss = float('inf')\n        best_stump = None\n        split_points = (x_sorted[:-1] + x_sorted[1:]) / 2\n        for s in split_points:\n            left_indices = x_sorted <= s\n            right_indices = x_sorted > s\n            c1 = np.mean(residuals[left_indices]) if np.sum(left_indices) > 0 else 0\n            c2 = np.mean(residuals[right_indices]) if np.sum(right_indices) > 0 else 0\n            pred_residuals = np.where(x_sorted <= s, c1, c2)\n            rss = np.sum((residuals - pred_residuals) ** 2)\n            if rss < best_rss:\n                best_rss = rss\n                best_stump = (s, c1, c2)\n        if best_rss <= epsilon:\n            break\n        ensemble.append(best_stump)\n        for (s, c1, c2) in ensemble:\n            residuals = residuals - np.where(x_sorted <= s, c1, c2)\n    prediction = 0.0\n    for (s, c1, c2) in ensemble:\n        if x_query <= s:\n            prediction += c1\n        else:\n            prediction += c2\n    return round(prediction, 4)\nx_train = [1, 2, 3, 4, 5]\ny_train = [1.1, 2.9, 3.1, 3.9, 4.8]\nx_query = 3.5"}
{"task_id": 29, "completion_id": 7, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total  \n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed  \n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train, dtype=float)\n    y_train = np.array(y_train, dtype=float)\n    data = np.column_stack((x_train, y_train))\n    data = data[data[:, 0].argsort()]\n    n = len(data)\n    residuals = np.zeros(n)\n    ensemble = []\n    current_pred = np.zeros(n)\n    residuals = y_train - current_pred\n    while True:\n        rss = np.sum(residuals ** 2)\n        if rss < epsilon:\n            break\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        best_rss = float('inf')\n        split_points = (data[:-1, 0] + data[1:, 0]) / 2\n        for s in split_points:\n            left_indices = data[:, 0] <= s\n            right_indices = data[:, 0] > s\n            c1 = np.mean(residuals[left_indices]) if np.any(left_indices) else 0\n            c2 = np.mean(residuals[right_indices]) if np.any(right_indices) else 0\n            y_pred = np.where(left_indices, c1, c2)\n            new_residuals = residuals - y_pred\n            new_rss = np.sum(new_residuals ** 2)\n            if new_rss < best_rss:\n                best_rss = new_rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n        if best_split is None:\n            break\n        residuals = residuals - np.where(data[:, 0] <= best_split, best_c1, best_c2)\n        ensemble.append((best_split, best_c1, best_c2))\n    y_pred = 0.0\n    x_query = float(x_query)\n    for (s, c1, c2) in ensemble:\n        if x_query <= s:\n            y_pred += c1\n        else:\n            y_pred += c2\n    return round(y_pred, 4)\nx_train = [1.0, 3.0, 2.0, 4.0]\ny_train = [2.0, 6.0, 4.0, 7.0]\nx_query = 2.5"}
{"task_id": 29, "completion_id": 8, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    N = len(x_train)\n    if N != len(y_train):\n        raise ValueError('x_train and y_train must be of the same length.')\n    indices = np.argsort(x_train)\n    x_train = x_train[indices]\n    y_train = y_train[indices]\n    residuals = y_train.astype(float)\n    ensemble = []\n    while True:\n        current_rss = np.sum(residuals ** 2)\n        if current_rss <= epsilon:\n            break\n        split_points = (x_train[1:] + x_train[:-1]) / 2\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        best_rss = float('inf')\n        for s in split_points:\n            left_mask = x_train <= s\n            right_mask = x_train > s\n            c1 = np.mean(residuals[left_mask]) if np.any(left_mask) else 0\n            c2 = np.mean(residuals[right_mask]) if np.any(right_mask) else 0\n            preds = np.where(x_train <= s, c1, c2)\n            rss = np.sum((residuals - preds) ** 2)\n            if rss < best_rss:\n                best_rss = rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n        ensemble.append((best_split, best_c1, best_c2))\n        preds = np.where(x_train <= best_split, best_c1, best_c2)\n        residuals -= preds\n    prediction = 0\n    for (s, c1, c2) in ensemble:\n        if x_query <= s:\n            prediction += c1\n        else:\n            prediction += c2\n    return round(prediction, 4)\nx_train = [1.0, 2.0, 3.0, 4.0]\ny_train = [2.0, 4.0, 3.0, 5.0]\nx_query = 3.5"}
{"task_id": 29, "completion_id": 9, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sort_idx = np.argsort(x_train)\n    x_train = x_train[sort_idx]\n    y_train = y_train[sort_idx]\n    n = len(x_train)\n    residuals = y_train.copy()\n    split_points = (x_train[1:] + x_train[:-1]) / 2\n    stumps = []\n    while True:\n        best_rss = np.inf\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        for s in split_points:\n            mask = x_train <= s\n            c1 = np.mean(residuals[mask])\n            c2 = np.mean(residuals[~mask])\n            pred = np.where(mask, c1, c2)\n            rss = np.sum((residuals - pred) ** 2)\n            if rss < best_rss:\n                best_rss = rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n        total_rss = best_rss\n        if total_rss <= epsilon:\n            break\n        stumps.append((best_split, best_c1, best_c2))\n        for (split, c1, c2) in stumps:\n            residuals -= np.where(x_train <= split, c1, c2)\n    prediction = 0.0\n    for (split, c1, c2) in stumps:\n        if x_query <= split:\n            prediction += c1\n        else:\n            prediction += c2\n    return round(prediction, 4)\nx_train = [1.0, 2.0, 3.0, 4.0, 5.0]\ny_train = [1.0, 2.1, 2.9, 4.0, 5.1]\nx_query = 3.5\nprediction = predict_boosting_tree(x_train, y_train, x_query)"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray:\n    \"\"\"\n    Generates a numpy array (tensor) of given shape filled with 0.0s and 1.0s.\n    \n    Each element is 1.0 with a probability of `sparsity` and 0.0 with probability\n    `1 - sparsity`.\n\n    Parameters:\n    -----------\n    shape : tuple[int, ...]\n        The shape of the output tensor.\n    sparsity : float, default=0.5\n        The probability that a given element is 1.0. Must be in [0, 1].\n    seed : int or None, default=None\n        Seed used to make results reproducible.\n\n    Returns:\n    --------\n    numpy.ndarray\n        A tensor with 0.0 and 1.0 values as float32 or float64.\n        Returns -1 if sparsity is out of bounds.\n    \"\"\"\n    if not 0.0 <= sparsity <= 1.0:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_array = np.random.rand(*shape)\n    threshold = 1.0 - sparsity\n    binary_tensor = (random_array >= threshold).astype(np.float64)\n    return binary_tensor\nshape = (2, 3)\nsparsity = 0.3\nseed = 42"}
{"task_id": 34, "completion_id": 1, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s of the specified shape,\n    with values 1.0 occurring with the given sparsity.\n\n    Parameters:\n    -----------\n    shape : tuple[int, ...]\n        The shape of the generated tensor.\n\n    sparsity : float, default=0.5\n        The probability of each element being 1.0. Must be in [0, 1].\n\n    seed : int or None, default=None\n        Optional seed for the random number generator for reproducibility.\n\n    Returns:\n    --------\n    numpy.ndarray\n        A NumPy array of the specified shape with float values 0.0 and 1.0.\n\n        Returns -1 if sparsity is out of the valid range [0, 1].\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_array = np.random.rand(*shape)\n    binary_tensor = np.where(random_array <= sparsity, 1.0, 0.0)\n    return binary_tensor.astype(float)\nshape = (2, 3)\nsparsity = 0.3\nseed = 42"}
{"task_id": 34, "completion_id": 2, "solution": "import numpy as np\nimport numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generate a binary tensor (0.0 and 1.0) with specified shape and sparsity.\n\n    Parameters:\n    ----------\n    shape : tuple of int\n        The desired shape of the output tensor (dimensions).\n    sparsity : float, optional, default=0.5\n        The desired probability of a 1.0 in the output tensor.\n        Must be in the range [0.0, 1.0].\n    seed : int or None, optional, default=None\n        A random seed to ensure deterministic results.\n\n    Returns:\n    -------\n    numpy.ndarray\n        A NumPy array of shape `shape` containing only float values (0.0 and 1.0).\n        Returns -1 if `sparsity` is not in the range [0.0, 1.0].\n\n    Example:\n    -------\n    >>> random_binary_tensor((2, 3), sparsity=0.3, seed=42)\n    [[0.0 1.0 1.0]\n     [0.0 0.0 0.0]]\n    \"\"\"\n    if not 0.0 <= sparsity <= 1.0:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_tensor = np.random.rand(*shape)\n    binary_tensor = (random_tensor <= sparsity).astype(np.float64)\n    return binary_tensor"}
{"task_id": 34, "completion_id": 3, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generates a random binary tensor filled with 0.0 and 1.0 values.\n\n    Parameters\n    ----------\n    shape : tuple of int\n        The desired shape of the output tensor.\n    sparsity : float, optional\n        The probability of generating a 1.0 in each position. Defaults to 0.5.\n        Must be in the interval [0.0, 1.0].\n    seed : int or None, optional\n        Seed for the random number generator to ensure reproducibility. Defaults to None.\n\n    Returns\n    -------\n    numpy.ndarray\n        A NumPy array of the given shape with float values 0.0 and 1.0.\n        Returns -1 if the sparsity is out of the allowed range.\n\n    Examples\n    --------\n    >>> np.random.seed(42)\n    >>> random_binary_tensor((2, 3), sparsity=0.3)\n    array([[0.0, 1.0, 1.0],\n           [0.0, 0.0, 0.0]])\n    \"\"\"\n    if not 0.0 <= sparsity <= 1.0:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    threshold = 1 - sparsity\n    tensor = np.random.rand(*shape)\n    tensor = (tensor >= threshold).astype(float)\n    return tensor"}
{"task_id": 34, "completion_id": 4, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray | int:\n    \"\"\"\n    Generate a binary NumPy tensor of given shape filled with 0.0 and 1.0 values.\n\n    The function creates a tensor where each entry is 1.0 with a probability equal to the given\n    sparsity value, and 0.0 otherwise. If a seed is provided, results are reproducible.\n\n    Parameters:\n    ----------\n    shape : tuple of ints\n        The shape of the output tensor.\n\n    sparsity : float, default=0.5\n        Probability of an element being 1.0 (i.e. the \"sparsity\").\n        Must be in the closed interval [0, 1].\n\n    seed : int or None, optional\n        Seed for random number generator. If provided, the output will be reproducible.\n\n    Returns:\n    -------\n    numpy.ndarray\n        A NumPy array of the given shape filled with float values 0.0 and 1.0.\n\n    If the sparsity is outside the legal range [0, 1], the function returns -1.\n\n    Example:\n    --------\n    >>> random_binary_tensor((2, 3), sparsity=0.3, seed=42)\n    array([[0.0, 1.0, 1.0],\n           [0.0, 0.0, 0.0]])\n    \"\"\"\n    if sparsity < 0.0 or sparsity > 1.0:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_tensor = np.random.rand(*shape)\n    binary_tensor = (random_tensor < sparsity).astype(float)\n    return binary_tensor"}
{"task_id": 34, "completion_id": 5, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generates a binary NumPy tensor with 0.0 and 1.0 values.\n\n    Parameters:\n    - shape (tuple of int): The desired shape of the output tensor.\n    - sparsity (float): The probability that any element is 1.0.\n                        Must be in the range [0, 1].\n    - seed (int or None): Optional seed for controlling randomness.\n\n    Returns:\n    - numpy.ndarray: A tensor of the given shape containing float values 0.0 and 1.0.\n                     Returns -1 if sparsity is not in [0,1].\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    threshold = 1.0 - sparsity\n    random_tensor = np.random.rand(*shape)\n    binary_tensor = (random_tensor >= threshold).astype(np.float64)\n    return binary_tensor"}
{"task_id": 34, "completion_id": 6, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generate a binary NumPy tensor of given shape, with entries 0.0 and 1.0.\n    \n    Parameters:\n    - shape (tuple of int): The dimensions of the output tensor.\n    - sparsity (float, optional): The probability that an entry is 1.0. Must be in [0, 1].\n    - seed (int or None, optional): Seed for random number generator for reproducibility.\n    \n    Returns:\n    - np.ndarray: A NumPy tensor of shape `shape` containing 0.0 and 1.0 values.\n    - int: -1 if sparsity is not in [0, 1].\n    \n    Example:\n    >>> random_binary_tensor((2, 3), 0.3, seed=42)\n    array([[0., 1., 1.],\n           [0., 0., 0.]])\n    \"\"\"\n    if not 0.0 <= sparsity <= 1.0:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_tensor = np.random.rand(*shape)\n    binary_tensor = np.where(random_tensor >= 1 - sparsity, 1.0, 0.0)\n    return binary_tensor.astype(np.float64)"}
{"task_id": 34, "completion_id": 7, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generates a NumPy tensor with the given shape filled with 0.0s and 1.0s.\n    Each element is 1.0 with probability 'sparsity', 0.0 otherwise.\n    \n    Parameters:\n    - shape (tuple of int): The shape of the output tensor.\n    - sparsity (float): Probability of generating a 1.0 (must be between 0.0 and 1.0).\n    - seed (int or None): Optional seed for random number generation to ensure reproducibility.\n\n    Returns:\n    - numpy.ndarray: A tensor of shape `shape` with float values 0.0 and 1.0.\n    - int: -1 if sparsity is outside [0.0, 1.0].\n    \"\"\"\n    if not 0.0 <= sparsity <= 1.0:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    threshold = 1.0 - sparsity\n    random_tensor = np.random.rand(*shape)\n    binary_tensor = np.where(random_tensor >= threshold, 1.0, 0.0)\n    return binary_tensor"}
{"task_id": 34, "completion_id": 8, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generate a random binary tensor filled with 0.0s and 1.0s.\n\n    Parameters:\n    -----------\n    shape : tuple of ints  \n        The desired shape of the output tensor.\n    sparsity : float, optional (default=0.5)  \n        The probability of generating a 1.0. Must be in the closed interval [0, 1].\n    seed : int or None, optional (default=None)  \n        Seed for random number generator to ensure reproducibility.\n\n    Returns:\n    --------\n    numpy.ndarray or int\n        - A NumPy array of the given shape with values 0.0 or 1.0 if sparsity is valid.\n        - Returns -1 if sparsity is not in the range [0, 1].\n\n    Examples:\n    ---------\n    >>> random_binary_tensor((2, 3), sparsity=0.3, seed=42)\n    array([[0.0, 1.0, 1.0],\n           [0.0, 0.0, 0.0]])\n    \"\"\"\n    if not 0.0 <= sparsity <= 1.0:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_tensor = np.random.rand(*shape)\n    threshold = 1.0 - sparsity\n    binary_tensor = np.where(random_tensor >= threshold, 1.0, 0.0).astype(np.float64)\n    return binary_tensor"}
{"task_id": 34, "completion_id": 9, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generate a NumPy tensor of given shape containing 0.0 and 1.0 values.\n    \n    Each value in the tensor is 1.0 with probability `sparsity` and 0.0 otherwise.\n    \n    Parameters:\n    -----------\n    shape : tuple[int, ...]\n        The desired shape of the output tensor.\n    sparsity : float, optional\n        A real number in [0, 1] indicating the probability of generating a 1.0\n        (default is 0.5).\n    seed : int or None, optional\n        Seed for random number generator for reproducibility (default is None).\n    \n    Returns:\n    --------\n    numpy.ndarray\n        A tensor of given shape with float values 0.0 and 1.0.\n        Returns -1 if sparsity is outside [0, 1].\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    threshold = 1.0 - sparsity\n    random_array = np.random.rand(*shape)\n    binary_tensor = (random_array >= threshold).astype(np.float64)\n    return binary_tensor"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n = data.shape[0]\n    col = data[:, d]\n    k = n // 2\n    pivot_idx = np.argpartition(col, kth=k)[k]\n    median_val = data[pivot_idx, d]\n    left = []\n    right = []\n    for i in range(n):\n        if i == pivot_idx:\n            continue\n        val = data[i, d]\n        if val < median_val:\n            left.append(i)\n        elif val > median_val:\n            right.append(i)\n    return (pivot_idx, sorted(left), sorted(right))"}
{"task_id": 39, "completion_id": 1, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    k = n_samples // 2\n    indices = np.argpartition(data[:, d], kth=k)\n    pivot_index = indices[k]\n    median_value = data[pivot_index, d]\n    left = indices[data[indices, d] < median_value]\n    right = indices[data[indices, d] > median_value]\n    return (int(pivot_index), sorted(left.tolist()), sorted(right.tolist()))"}
{"task_id": 39, "completion_id": 2, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    idx = np.argpartition(data[:, d], n_samples // 2)\n    pivot_idx = idx[n_samples // 2]\n    column_d = data[:, d]\n    left_mask = column_d < column_d[pivot_idx]\n    right_mask = column_d > column_d[pivot_idx]\n    left = sorted(idx[left_mask])\n    right = sorted(idx[right_mask])\n    return (pivot_idx, left, right)"}
{"task_id": 39, "completion_id": 3, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    kth = n_samples // 2\n    indices = np.argpartition(data[:, d], kth)\n    pivot = indices[kth]\n    median_val = data[pivot, d]\n    left = indices[data[indices, d] < median_val]\n    right = indices[data[indices, d] > median_val]\n    left_sorted = sorted(left)\n    right_sorted = sorted(right)\n    return (pivot, left_sorted, right_sorted)"}
{"task_id": 39, "completion_id": 4, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n = data.shape[0]\n    kth = n // 2\n    indices = np.argpartition(data[:, d], kth)\n    pivot = indices[kth]\n    left_indices = indices[:kth]\n    right_indices = indices[kth + 1:]\n    left = sorted(left_indices.tolist())\n    right = sorted(right_indices.tolist())\n    return (pivot, left, right)"}
{"task_id": 39, "completion_id": 5, "solution": "import numpy as np"}
{"task_id": 39, "completion_id": 6, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if d < 0 or d >= n_features:\n        raise ValueError('Column index is invalid.')\n    col = data[:, d]\n    partition_indices = np.argpartition(col, n_samples // 2)\n    median_index = partition_indices[n_samples // 2]\n    median_value = data[median_index, d]\n    left = []\n    right = []\n    for i in range(n_samples):\n        if i == median_index:\n            continue\n        val = data[i, d]\n        if val < median_value:\n            left.append(i)\n        elif val > median_value:\n            right.append(i)\n    return (median_index, sorted(left), sorted(right))\ndata = np.array([[3, 5], [1, 2], [4, 7], [2, 1], [5, 3], [7, 1]])"}
{"task_id": 39, "completion_id": 7, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n = data.shape[0]\n    col = data[:, d]\n    k = n // 2\n    partitioned_indices = np.argpartition(col, k)\n    pivot_index = partitioned_indices[k]\n    median_val = data[pivot_index, d]\n    left = []\n    right = []\n    for i in range(n):\n        if i == pivot_index:\n            continue\n        val = data[i, d]\n        if val < median_val:\n            left.append(i)\n        elif val > median_val:\n            right.append(i)\n    return (pivot_index, sorted(left), sorted(right))\ndata = np.array([[5, 3], [1, 9], [7, 2], [3, 5], [9, 4]])\nd = 0"}
{"task_id": 39, "completion_id": 8, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    k = n_samples // 2\n    indices = np.argpartition(data[:, d], k)\n    pivot = indices[k]\n    col = data[:, d]\n    left = indices[np.where(col[indices] < col[pivot])]\n    right = indices[np.where(col[indices] > col[pivot])]\n    left.sort()\n    right.sort()\n    return (pivot, left.tolist(), right.tolist())"}
{"task_id": 39, "completion_id": 9, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger values.\n    \"\"\"\n    n_samples = data.shape[0]\n    partitioned_indices = np.argpartition(data[:, d], n_samples // 2)\n    median_idx = partitioned_indices[n_samples // 2]\n    median_value = data[median_idx, d]\n    left = []\n    right = []\n    for idx in range(n_samples):\n        if idx == median_idx:\n            continue\n        if data[idx, d] < median_value:\n            left.append(idx)\n        elif data[idx, d] > median_value:\n            right.append(idx)\n    left.sort()\n    right.sort()\n    return (median_idx, left, right)\ndata = np.array([[5, 2], [3, 4], [2, 1], [1, 3], [4, 5]])\nd = 0"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\nimport numpy as np\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input signal must be one-dimensional.'\n    assert stride >= 1, 'Stride must be at least 1.'\n    assert len(x) >= frame_width, 'Signal length must be at least as long as frame_width.'\n    n_samples = len(x)\n    n_frames = (n_samples - frame_width) // stride + 1\n    itemsize = x.strides[0]\n    shape = (n_frames, frame_width)\n    strides = (itemsize * stride, itemsize)\n    framed = as_strided(x, shape=shape, strides=strides, writeable=writeable)\n    if not writeable:\n        framed.flags.writeable = False\n    elif writeable and (not x.flags.writeable):\n        framed.flags.writeable = False\n    return framed\nx = np.arange(10)\nframe_width = 4\nstride = 2"}
{"task_id": 40, "completion_id": 1, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input signal must be one-dimensional.'\n    assert stride > 0, 'Stride must be a positive integer.'\n    assert len(x) >= frame_width, 'Input signal must be at least as long as the frame width.'\n    n_samples = len(x)\n    n_frames = (n_samples - frame_width) // stride + 1\n    arr_shape = (n_frames, frame_width)\n    arr_strides = (stride * x.itemsize, x.itemsize)\n    framed = as_strided(x, shape=arr_shape, strides=arr_strides)\n    framed.flags.writeable = x.flags.writeable and writeable\n    return framed\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"}
{"task_id": 40, "completion_id": 2, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\nimport numpy as np\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input signal must be one-dimensional.'\n    assert stride >= 1, 'Stride must be at least 1.'\n    assert len(x) >= frame_width, f'Input signal length ({len(x)}) must be >= frame_width ({frame_width})'\n    n_frames = (len(x) - frame_width) // stride + 1\n    itemsize = x.itemsize\n    output_shape = (n_frames, frame_width)\n    output_strides = (stride * itemsize, itemsize)\n    framed = as_strided(x, shape=output_shape, strides=output_strides)\n    framed.flags.writeable = x.flags.writeable if writeable else False\n    return framed\nx = np.arange(10)"}
{"task_id": 40, "completion_id": 3, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input signal must be one-dimensional.'\n    assert stride > 0, 'Stride must be a positive integer.'\n    assert len(x) >= frame_width, 'Signal length must be at least as large as frame width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    frame_indexer = as_strided(x, shape=(n_frames, frame_width), strides=(x.strides[0] * stride, x.strides[0]), writeable=writeable)\n    return frame_indexer\nx = np.arange(10)"}
{"task_id": 40, "completion_id": 4, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input signal must be one-dimensional.'\n    assert stride >= 1, 'Hop length must be at least 1.'\n    assert len(x) >= frame_width, 'Input signal length must be >= frame_width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    return as_strided(x, shape=(n_frames, frame_width), strides=(stride * x.strides[0], x.strides[0]), writeable=writeable)"}
{"task_id": 40, "completion_id": 5, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input signal must be one-dimensional.'\n    assert stride >= 1, 'Stride must be a positive integer.'\n    assert len(x) >= frame_width, 'Signal length must be greater than or equal to frame width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    itemsize = x.itemsize\n    x_strides = x.strides[0]\n    new_strides = (stride * itemsize, itemsize)\n    framed_view = as_strided(x, shape=(n_frames, frame_width), strides=new_strides)\n    framed_view.flags.writeable = False\n    if writeable and x.flags.writeable:\n        framed_view.flags.writeable = True\n    return framed_view\nx = np.arange(10, dtype=np.float32)\nframe_width = 4\nstride = 2"}
{"task_id": 40, "completion_id": 6, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input signal must be 1-dimensional.'\n    assert stride >= 1, 'Stride must be at least 1.'\n    assert len(x) >= frame_width, 'Signal length must be at least frame_width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    assert (len(x) - frame_width) % stride <= 0, 'Trailing samples that cannot form a full frame are not allowed.'\n    arr = as_strided(x, shape=(n_frames, frame_width), strides=(x.strides[0] * stride, x.strides[0]), writeable=writeable)\n    arr.flags.writeable = writeable or x.flags.writeable\n    return arr"}
{"task_id": 40, "completion_id": 7, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input signal must be one-dimensional.'\n    assert stride > 0, 'Stride must be a positive integer.'\n    assert len(x) >= frame_width, 'Signal length must be at least frame_width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    shape = (n_frames, frame_width)\n    itemsize = x.itemsize\n    strides = (stride * itemsize, itemsize)\n    framed = as_strided(x, shape=shape, strides=strides)\n    framed.flags.writeable = x.flags.writeable if writeable else False\n    return framed"}
{"task_id": 40, "completion_id": 8, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input x must be one-dimensional.'\n    assert stride >= 1, 'Stride must be at least 1.'\n    assert len(x) >= frame_width, 'Input x must be at least as long as frame_width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    itemsize = x.itemsize\n    x_strides = x.strides[0]\n    frame_strides = (stride * itemsize, itemsize)\n    framed_view = as_strided(x, shape=(n_frames, frame_width), strides=frame_strides)\n    framed_view.flags.writeable = x.flags.writeable if writeable else False\n    return framed_view"}
{"task_id": 40, "completion_id": 9, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input signal `x` must be one-dimensional.'\n    assert stride > 0, 'Hop length `stride` must be a positive integer.'\n    assert len(x) >= frame_width, 'Input signal is too short for the given `frame_width`.'\n    n_samples = len(x)\n    n_frames = (n_samples - frame_width) // stride + 1\n    item_size = x.itemsize\n    x_strides = x.strides[0]\n    frame_strides = (stride * item_size, item_size)\n    framed_signal = as_strided(x, shape=(n_frames, frame_width), strides=frame_strides, writeable=writeable)\n    if not writeable:\n        framed_signal.flags.writeable = False\n    return framed_signal"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\nfrom typing import list\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.asarray(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    if not np.allclose(X.sum(axis=1), np.ones(X.shape[0]), atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 1, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.asarray(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    if not np.allclose(X.sum(axis=1), np.ones(X.shape[0]), atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 2, "solution": "import numpy as np\nfrom typing import list\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.asarray(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    if not np.allclose(X.sum(axis=1), np.ones(X.shape[0]), atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 3, "solution": "def is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    try:\n        X = np.asarray(X)\n    except:\n        return False\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0 - 1e-08) & (X <= 1 + 1e-08)):\n        return False\n    if not np.allclose(X.sum(axis=1), np.ones(X.shape[0]), atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 4, "solution": "def is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    try:\n        X = np.array(X)\n    except:\n        return False\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0.0) & (X <= 1.0)):\n        return False\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, np.ones(X.shape[0]), atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 5, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    try:\n        X = np.asarray(X)\n    except:\n        return False\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0 - 1e-08) & (X <= 1 + 1e-08)):\n        return False\n    if not np.allclose(X.sum(axis=1), np.ones(X.shape[0]), atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 6, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.asarray(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((0 <= X) & (X <= 1)):\n        return False\n    if not np.allclose(X.sum(axis=1), np.ones(X.shape[0]), atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 7, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.asarray(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    row_sums = X.sum(axis=1)\n    if not np.allclose(row_sums, np.ones_like(row_sums), atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 8, "solution": "def is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    try:\n        X = np.array(X)\n    except:\n        return False\n    if X.ndim != 2:\n        return False\n    if not np.all((0 <= X) & (X <= 1)):\n        return False\n    if not np.allclose(X.sum(axis=1), np.ones(X.shape[0]), atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 9, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.asarray(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((0 <= X) & (X <= 1)):\n        return False\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, 1, atol=1e-08):\n        return False\n    return True"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> List[float]:\n    \"\"\"\n    Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for _ in range(max_iter):\n        g_total = np.zeros(d)\n        num_samples = n\n        num_batches = num_samples // batch_size + (1 if num_samples % batch_size != 0 else 0)\n        for batch_idx in range(num_batches):\n            start = batch_idx * batch_size\n            end = min(start + batch_size, num_samples)\n            if end == num_samples and num_samples % batch_size != 0:\n                batch_X = np.vstack((X[start:end], X[0:batch_size - num_samples % batch_size]))\n                batch_y = np.hstack((y[start:end], y[0:batch_size - num_samples % batch_size]))\n            else:\n                batch_X = X[start:end]\n                batch_y = y[start:end]\n            preds = batch_X @ w\n            errors = preds - batch_y\n            g = 1 / n * batch_X.T @ errors\n            g_total += g\n            s = rho * s + (1 - rho) * g ** 2\n            w -= eta * g / np.sqrt(s + eps_station)\n        if np.linalg.norm(g_total) < epsilon:\n            break\n    return [round(wi, 4) for wi in w]"}
{"task_id": 55, "completion_id": 1, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for _ in range(max_iter):\n        indices = np.random.permutation(n)\n        X_shuffled = X[indices]\n        y_shuffled = y[indices]\n        for i in range(0, n, batch_size):\n            batch_end = min(i + batch_size, n)\n            X_batch = X_shuffled[i:batch_end]\n            y_batch = y_shuffled[i:batch_end]\n            pred = X_batch @ w\n            grad = 1 / n * X_batch.T @ (pred - y_batch)\n            s = rho * s + (1 - rho) * grad ** 2\n            w = w - eta * grad / (np.sqrt(s) + eps_station)\n        full_pred = X @ w\n        full_grad = 1 / n * X.T @ (full_pred - y)\n        if np.linalg.norm(full_grad) < epsilon:\n            break\n    return [round(float(wi), 4) for wi in w]"}
{"task_id": 55, "completion_id": 2, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for iter in range(max_iter):\n        indices = np.arange(n)\n        np.random.shuffle(indices)\n        for i in range(0, n, batch_size):\n            batch_indices = indices[i:i + batch_size]\n            X_batch = X[batch_indices]\n            y_batch = y[batch_indices]\n            y_pred = X_batch @ w\n            grad = 1 / n * X_batch.T @ (y_pred - y_batch)\n            s = rho * s + (1 - rho) * grad ** 2\n            w -= eta * grad / (np.sqrt(s) + eps_station)\n        y_pred = X @ w\n        full_grad = 1 / n * X.T @ (y_pred - y)\n        if np.linalg.norm(full_grad) < epsilon:\n            break\n    return [round(wi, 4) for wi in w.tolist()]"}
{"task_id": 55, "completion_id": 3, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for _ in range(max_iter):\n        indices = np.random.permutation(n)\n        for i in range(0, n, batch_size):\n            batch_indices = indices[i:i + batch_size]\n            if batch_indices.size == 0:\n                continue\n            X_batch = X[batch_indices]\n            y_batch = y[batch_indices]\n            prediction_error = X_batch @ w - y_batch\n            g = X_batch.T @ prediction_error / n\n            s = rho * s + (1 - rho) * g ** 2\n            w -= eta * g / np.sqrt(s + eps_station)\n        pred_error = X @ w - y\n        full_gradient = X.T @ pred_error / n\n        if np.linalg.norm(full_gradient) < epsilon:\n            break\n    return [round(wi, 4) for wi in w]"}
{"task_id": 55, "completion_id": 4, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for _ in range(max_iter):\n        indices = np.random.permutation(n)\n        X_shuffled = X[indices]\n        y_shuffled = y[indices]\n        for i in range(0, n, batch_size):\n            end = min(i + batch_size, n)\n            X_batch = X_shuffled[i:end]\n            y_batch = y_shuffled[i:end]\n            grad = 1 / n * X_batch.T @ (X_batch @ w - y_batch)\n            s = rho * s + (1 - rho) * grad ** 2\n            w = w - eta * grad / (np.sqrt(s) + eps_station)\n            if np.linalg.norm(grad) < epsilon:\n                break\n        full_grad = 1.0 / n * X.T @ (X @ w - y)\n        if np.linalg.norm(full_grad) < epsilon:\n            break\n    return [round(weight, 4) for weight in w.tolist()]\nX = np.random.rand(n, d)\ny = np.random.rand(n)"}
{"task_id": 55, "completion_id": 5, "solution": "import numpy as np\nimport numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    it = 0\n    for it in range(max_iter):\n        indices = np.random.permutation(n)\n        for i in range(0, n, batch_size):\n            batch_indices = indices[i:i + batch_size]\n            if len(batch_indices) == 0:\n                continue\n            X_batch = X[batch_indices]\n            y_batch = y[batch_indices]\n            pred = X_batch @ w\n            residual = pred - y_batch\n            g = 1 / n * X_batch.T @ residual\n            s = rho * s + (1 - rho) * g ** 2\n            w -= eta * g / (np.sqrt(s) + eps_station)\n            if np.linalg.norm(g) < epsilon:\n                break\n        else:\n            continue\n        break\n    return [round(float(val), 4) for val in w]\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([7, 11, 15])"}
{"task_id": 55, "completion_id": 6, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for _ in range(max_iter):\n        indices = np.random.permutation(n)\n        for i in range(0, n, batch_size):\n            batch_indices = indices[i:i + batch_size]\n            if len(batch_indices) == 0:\n                continue\n            X_batch = X[batch_indices]\n            y_batch = y[batch_indices]\n            y_pred = X_batch @ w\n            error = y_pred - y_batch\n            gradient = X_batch.T @ error / len(batch_indices)\n            s = rho * s + (1 - rho) * gradient ** 2\n            w = w - eta * gradient / (np.sqrt(s) + eps_station)\n        full_gradient = X.T @ (X @ w - y) / n\n        if np.linalg.norm(full_gradient) < epsilon:\n            break\n    return [round(weight, 4) for weight in w.tolist()]"}
{"task_id": 55, "completion_id": 7, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    w = np.zeros(n_features)\n    s = np.zeros(n_features)\n    for iter in range(max_iter):\n        idx = 0\n        while idx < n_samples:\n            end_idx = min(idx + batch_size, n_samples)\n            X_batch = X[idx:end_idx]\n            y_batch = y[idx:end_idx]\n            pred = X_batch @ w\n            error = pred - y_batch\n            g = X_batch.T @ error / n_samples\n            s = rho * s + (1 - rho) * g ** 2\n            w -= eta * g / (np.sqrt(s) + eps_station)\n            idx = end_idx\n        if np.linalg.norm(g) < epsilon:\n            break\n    return [round(w_i, 4) for w_i in w.tolist()]\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([3, 7, 11])"}
{"task_id": 55, "completion_id": 8, "solution": "import numpy as np\nimport numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for _ in range(max_iter):\n        indices = np.random.permutation(n)\n        X_shuffled = X[indices]\n        y_shuffled = y[indices]\n        for i in range(0, n, batch_size):\n            end = i + batch_size\n            X_batch = X_shuffled[i:end]\n            y_batch = y_shuffled[i:end]\n            y_pred = X_batch @ w\n            grad = 1 / n * X_batch.T @ (y_pred - y_batch)\n            s = rho * s + (1 - rho) * grad ** 2\n            w -= eta * grad / (np.sqrt(s) + eps_station)\n        grad_full = 1 / n * X.T @ (X @ w - y)\n        if np.linalg.norm(grad_full) < epsilon:\n            break\n    return [round(w_i, 4) for w_i in w.tolist()]\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([3, 7, 11])"}
{"task_id": 55, "completion_id": 9, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    X = X.astype(np.float64)\n    y = y.astype(np.float64)\n    n_samples = X.shape[0]\n    indices = np.arange(n_samples)\n    for iter in range(max_iter):\n        np.random.shuffle(indices)\n        X_shuffled = X[indices]\n        y_shuffled = y[indices]\n        for i in range(0, n_samples, batch_size):\n            batch_indices = indices[i:i + batch_size]\n            X_batch = X[batch_indices]\n            y_batch = y[batch_indices]\n            y_pred = X_batch @ w\n            error = y_pred - y_batch\n            grad = 1 / n_samples * X_batch.T @ error\n            s = rho * s + (1 - rho) * grad ** 2\n            w = w - eta * grad / (np.sqrt(s) + eps_station)\n            if np.linalg.norm(grad) < epsilon:\n                return np.round(w, 4).tolist()\n    return np.round(w, 4).tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"\n    Computes the SoftPlus activation function or its derivative (sigmoid).\n    \n    Parameters:\n    - x: A scalar, Python list, or NumPy array of real values.\n    - deriv: A boolean indicating whether to return the derivative (sigmoid).\n    \n    Returns:\n    - A Python list of computed values. If x is a scalar, returns a rounded float.\n    \"\"\"\n    if isinstance(x, (int, float)):\n        x = np.array([x])\n    else:\n        x = np.array(x)\n    if deriv:\n        sig = 1 / (1 + np.exp(-x))\n    else:\n        sig = 1 / (1 + np.exp(-x))\n        softplus_vals = np.where(x < -30, x, np.log1p(np.exp(-x)) + x)\n        softplus_vals = np.where(x > 30, x, softplus_vals)\n        sig = softplus_vals\n    result = np.round(sig, 4)\n    if result.size == 1:\n        return float(result[0])\n    else:\n        return result.tolist()"}
{"task_id": 56, "completion_id": 1, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute the SoftPlus activation function or its gradient (sigmoid).\n\n    Parameters:\n        x (scalar, list, or np.ndarray): Input values.\n        deriv (bool): If True, return gradient (sigmoid) instead of SoftPlus.\n\n    Returns:\n        list or float: The result as a Python list or scalar float.\n    \"\"\"\n    x_in = np.asarray(x)\n    if deriv:\n        sigmoid = 1.0 / (1.0 + np.exp(-x_in))\n        with np.errstate(over='ignore', under='ignore'):\n            mask = x_in < -30\n            sigmoid[mask] = np.exp(x_in[mask])\n        result = sigmoid\n    else:\n        mask = x_in >= 0\n        y = np.empty_like(x_in)\n        y[mask] = np.log1p(np.exp(-x_in[mask])) + x_in[mask]\n        y[~mask] = np.log1p(np.exp(x_in[~mask]))\n        result = y\n    rounded_result = np.round(result, 4)\n    if np.isscalar(x_in):\n        return float(rounded_result.flat[0])\n    else:\n        return rounded_result.tolist()"}
{"task_id": 56, "completion_id": 2, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"\n    Compute the SoftPlus activation or its derivative (sigmoid) for a scalar, list, or numpy array.\n\n    Parameters:\n        x (scalar, list, or np.ndarray): Input value(s)\n        deriv (bool): If True, return the derivative of SoftPlus (sigmoid), otherwise, return SoftPlus(x)\n\n    Returns:\n        float or list: The resulting value(s) rounded to 4 decimal places\n    \"\"\"\n    x = np.array(x, dtype=float)\n    if deriv:\n        result = 1.0 / (1.0 + np.exp(-x))\n    else:\n        result = np.where(x > 20, x, np.log1p(np.exp(-np.abs(x))) + np.clip(x, None, 20))\n    result = np.round(result, 4)\n    if np.isscalar(x):\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 56, "completion_id": 3, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Implements the SoftPlus activation and its derivative (sigmoid).\n    \n    Args:\n        x: A scalar, Python list, or NumPy array containing real values.\n        deriv: A boolean flag. If True, computes the derivative of SoftPlus (sigmoid).\n        \n    Returns:\n        A Python list with values rounded to 4 decimal places.\n    \"\"\"\n    x = np.asarray(x)\n    if deriv:\n        return np.round(1 / (1 + np.exp(-x)), 4).tolist()\n    else:\n        return np.round(np.where(x < -30, np.log1p(np.exp(x)), x + np.log1p(np.exp(-x))), 4).tolist()"}
{"task_id": 56, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute the SoftPlus activation or its derivative (sigmoid).\n    \n    Args:\n        x: Scalar, list, or NumPy array of real values.\n        deriv: If True, returns the derivative of SoftPlus (sigmoid).\n    \n    Returns:\n        A Python list of rounded results. If input is a scalar, returns a float.\n    \"\"\"\n    x = np.asarray(x)\n    if deriv:\n        with np.errstate(over='ignore'):\n            sig = 1.0 / (1.0 + np.exp(-x))\n        sig = np.where(x < -30, 0.0, sig)\n        sig = np.where(x > 30, 1.0, sig)\n        result = sig\n    else:\n        with np.errstate(over='ignore'):\n            result = np.where(x < -30, np.exp(x), np.log1p(np.exp(-abs(x))) + x)\n    result = np.round(result, 4)\n    if result.size == 1:\n        return float(result[0])\n    else:\n        return result.tolist()"}
{"task_id": 56, "completion_id": 5, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute the SoftPlus function or its derivative (grad) for input x.\n\n    Args:\n        x (int, float, list, or np.ndarray): Input data containing real values.\n        deriv (bool): If True, returns the gradient (sigmoid function). Defaults to False.\n\n    Returns:\n        float or list: A scalar when input is scalar, otherwise a list of rounded results.\n    \"\"\"\n    x = np.asarray(x, dtype=np.float64)\n    if deriv:\n        return list(1.0 / (1.0 + np.exp(-x)).round(4))\n    else:\n        mask = x > 20\n        if not np.any(mask):\n            return list(np.log1p(np.exp(x)).round(4))\n        else:\n            middle = np.log1p(np.exp(x)).round(4)\n            middle[mask] = x[mask].round(4)\n            return list(middle)\n    if np.isscalar(x):\n        return round(result_item, 4)"}
{"task_id": 56, "completion_id": 6, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute the SoftPlus activation or its derivative (sigmoid) for given input.\n\n    Parameters:\n        x (scalar, list, or numpy.ndarray): Input value(s).\n        deriv (bool): If True, compute the derivative (sigmoid), else compute SoftPlus.\n\n    Returns:\n        float or list: Computed values rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x, dtype=float)\n    if deriv:\n        x = np.clip(x, -88.7228, 88.7228)\n        return np.around(1 / (1 + np.exp(-x)), 4).tolist()\n    else:\n        condition = x >= 0\n        result = np.zeros_like(x)\n        result[condition] = np.log1p(np.exp(-x[condition])) + x[condition]\n        result[~condition] = np.log1p(np.exp(x[~condition]))\n        return np.around(result, 4).tolist()"}
{"task_id": 56, "completion_id": 7, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Computes the SoftPlus and its derivative (sigmoid) in a numerically stable manner.\n    \n    Args:\n        x: A scalar, list, or numpy array of real numbers.\n        deriv: If True, returns the derivative (sigmoid) instead of SoftPlus.\n    \n    Returns:\n        A value, list, or array with values rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x, dtype=np.float64)\n    if deriv:\n        sig = 1.0 / (1 + np.exp(-x))\n        result = np.round(sig, 4)\n    else:\n        result = np.where(x >= 0, np.log(1 + np.exp(-x)) + x, np.log1p(np.exp(x)))\n        result = np.round(result, 4)\n    if np.ndim(x) == 0:\n        return float(result.item())\n    else:\n        return result.tolist()"}
{"task_id": 56, "completion_id": 8, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute SoftPlus or its derivative (sigmoid) for a scalar, list, or NumPy array.\n\n    Args:\n        x: A scalar, list, or NumPy array of real numbers.\n        deriv: Whether to compute the derivative (sigmoid). Default is False.\n\n    Returns:\n        A Python list with elements rounded to 4 decimal places.\n        If the input is a scalar, returns a rounded float.\n    \"\"\"\n    x = np.array(x, dtype=np.float64)\n    if deriv:\n        x_sigmoid = 1 / (1 + np.exp(-x))\n    else:\n        mask = x < -30\n        softplus_vals = np.zeros_like(x)\n        softplus_vals[mask] = np.exp(x[mask])\n        softplus_vals[~mask] = np.log1p(np.exp(-x[~mask])) + x[~mask]\n    result = np.round(softplus_vals, decimals=4).tolist()\n    if np.isscalar(x):\n        return float(result)\n    return result"}
{"task_id": 56, "completion_id": 9, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute SoftPlus activation or its derivative (sigmoid) for input x.\n    \n    Args:\n        x: A scalar, list, or numpy array of real numbers.\n        deriv: If True, compute the derivative (the sigmoid function).\n    \n    Returns:\n        A Python list with results rounded to the nearest 4th decimal.\n        If x is a scalar, returns a float instead of a list.\n    \"\"\"\n    x = np.array(x, dtype=float)\n    if deriv:\n        with np.errstate(over='ignore'):\n            return np.round(1 / (1 + np.exp(-x)), 4).tolist()\n    else:\n        condition = x < -30\n        with np.errstate(over='ignore'):\n            result = np.where(condition, np.exp(x), np.log1p(np.exp(-x)) + x)\n        return np.round(result, 4).tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nfrom typing import List\ndef unsmoothed_ngram_log_prob(corpus: List[str], sequence: List[str], N: int) -> float:\n    \"\"\"\n    Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Parameters:\n        corpus: List[str]     - A list of words used to build the language model\n        sequence: List[str]   - Sequence of words to evaluate\n        N: int                - N-gram order\n\n    Returns:\n        float: Total log-probability of the sequence\n    \"\"\"\n    ngram_counts = {}\n    context_counts = {}\n\n    def get_ngrams(tokens, n):\n        for i in range(len(tokens) - n + 1):\n            yield tuple(tokens[i:i + n])\n    if N == 1:\n        ngram_counts = Counter(get_ngrams(corpus, N))\n        total_tokens = len(corpus)\n    else:\n        ngram_counts = Counter(get_ngrams(corpus, N))\n        context_counts = Counter(get_ngrams(corpus, N - 1))\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        if N == 1:\n            if ngram not in ngram_counts:\n                return float('-inf')\n            prob = ngram_counts[ngram] / len(corpus)\n        else:\n            context = tuple(sequence[i:i + N - 1])\n            if ngram not in ngram_counts or context not in context_counts:\n                return float('-inf')\n            prob = ngram_counts[ngram] / context_counts[context]\n        total_log_prob += np.log(prob)\n    return round(total_log_prob, 4)\ncorpus = ['the', 'cat', 'the', 'cat', 'sat', 'on', 'the', 'mat']\nsequence = ['the', 'cat', 'sat', 'on', 'the', 'mat']\nN = 2"}
{"task_id": 58, "completion_id": 1, "solution": "import numpy as np\nfrom collections import Counter\nfrom itertools import islice\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n    if N == 1:\n        ngram_counts = Counter(corpus)\n    else:\n        ngram_counts = Counter()\n        for i in range(len(corpus) - N + 1):\n            ngram = tuple(corpus[i:i + N])\n            ngram_counts[ngram] += 1\n        prefix_counts = Counter()\n        for i in range(len(corpus) - N + 1 + 1):\n            prefix = tuple(corpus[i:i + N - 1])\n            prefix_counts[prefix] += 1\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        if N == 1:\n            count_ngram = ngram_counts.get(ngram, 0)\n            total_corpus_count = len(corpus)\n            if count_ngram == 0 or total_corpus_count == 0:\n                return float('-inf')\n            prob = count_ngram / total_corpus_count\n        else:\n            prefix = tuple(sequence[i:i + N - 1])\n            count_ngram = ngram_counts.get(ngram, 0)\n            count_prefix = prefix_counts.get(prefix, 0)\n            if count_prefix == 0 or count_ngram == 0:\n                return float('-inf')\n            prob = count_ngram / count_prefix\n        total_log_prob += np.log(prob)\n    return round(total_log_prob, 4)\ncorpus = ['the', 'cat', 'in', 'the', 'hat']\nsequence = ['the', 'cat', 'in']\nN = 3"}
{"task_id": 58, "completion_id": 2, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\"\"\"\n    ngram_counts = Counter()\n    context_counts = Counter()\n    tagged_corpus = ['<s>'] * (N - 1) + corpus + ['</s>']\n    for i in range(len(tagged_corpus) - N + 1):\n        ngram = tuple(tagged_corpus[i:i + N])\n        context = tuple(tagged_corpus[i:i + N - 1]) if N > 1 else tuple()\n        ngram_counts[ngram] += 1\n        if N > 1:\n            context_counts[context] += 1\n    tagged_sequence = ['<s>'] * (N - 1) + sequence\n    total_log_prob = 0.0\n    for i in range(len(tagged_sequence) - N + 1):\n        ngram = tuple(tagged_sequence[i:i + N])\n        if N > 1:\n            context = tuple(tagged_sequence[i:i + N - 1])\n            count_ngram = ngram_counts.get(ngram, 0)\n            count_context = context_counts.get(context, 0)\n        else:\n            count_ngram = ngram_counts.get(ngram, 0)\n            count_context = len(tagged_corpus)\n        if count_ngram == 0 or count_context == 0:\n            return float('-inf')\n        prob = count_ngram / count_context\n        total_log_prob += np.log(prob)\n    return round(total_log_prob, 4)"}
{"task_id": 58, "completion_id": 3, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"\n    Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n    \n    Parameters:\n    - corpus: list of strings, the training corpus (list of word tokens).\n    - sequence: list of strings, the sequence to evaluate.\n    - N: int, the N-gram order (N \u2265 1).\n\n    Returns:\n    - Log-probability of the sequence under the N-gram model (natural log),\n      rounded to 4 decimal places. Returns float('-inf') if any count is zero.\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n    if N == 1:\n        ngram_count = Counter(corpus)\n        total_words = len(corpus)\n        if total_words == 0:\n            return float('-inf')\n        log_prob = 0.0\n        for word in sequence:\n            count = ngram_count.get(word, 0)\n            if count == 0:\n                return float('-inf')\n            log_prob += np.log(count / total_words)\n        return round(log_prob, 4)\n    ngram_counts = Counter()\n    context_counts = Counter()\n    for i in range(len(corpus) - N + 1):\n        ngram = tuple(corpus[i:i + N])\n        context = tuple(corpus[i:i + N - 1])\n        ngram_counts[ngram] += 1\n        context_counts[context] += 1\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        context = tuple(sequence[i:i + N - 1])\n        if ngram not in ngram_counts:\n            return float('-inf')\n        if context not in context_counts:\n            return float('-inf')\n        count_ngram = ngram_counts[ngram]\n        count_context = context_counts[context]\n        if count_ngram == 0 or count_context == 0:\n            return float('-inf')\n        log_prob += np.log(count_ngram / count_context)\n    return round(log_prob, 4)\ncorpus = ['the', 'cat', 'in', 'the', 'hat', 'the', 'cat', 'the', 'cat', 'and', 'the', 'dog']\nsequence = ['the', 'cat', 'and', 'the', 'dog']\nN = 2"}
{"task_id": 58, "completion_id": 4, "solution": "import numpy as np\nfrom collections import Counter\nfrom typing import List\ndef unsmoothed_ngram_log_prob(corpus: List[str], sequence: List[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    log_prob = 0.0\n    ngrams = Counter((tuple(corpus[i:i + N]) for i in range(len(corpus) - N + 1)))\n    if N > 1:\n        prefix_ngrams = Counter((tuple(corpus[i:i + N - 1]) for i in range(len(corpus) - N + 2)))\n    else:\n        prefix_ngrams = Counter()\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        if N > 1:\n            prefix = tuple(sequence[i:i + N - 1])\n            count_ngram = ngrams.get(ngram, 0)\n            count_prefix = prefix_ngrams.get(prefix, 0)\n        else:\n            count_ngram = ngrams.get(ngram, 0)\n            count_prefix = len(corpus)\n        if count_ngram == 0 or count_prefix == 0:\n            return float('-inf')\n        log_prob += np.log(count_ngram / count_prefix)\n    return round(log_prob, 4)"}
{"task_id": 58, "completion_id": 5, "solution": "import numpy as np\nfrom collections import Counter\nfrom typing import List\ndef unsmoothed_ngram_log_prob(corpus: List[str], sequence: List[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n\n    def get_ngrams(tokens, n):\n        return [tuple(tokens[i:i + n]) for i in range(len(tokens) - n + 1)]\n    ngram_counts = Counter(get_ngrams(corpus, N))\n    context_counts = Counter(get_ngrams(corpus, N - 1)) if N > 1 else Counter(corpus)\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        context = ngram[:N - 1] if N > 1 else None\n        if N == 1:\n            if ngram not in ngram_counts:\n                return float('-inf')\n            total_log_prob += np.log(ngram_counts[ngram])\n        else:\n            if ngram not in ngram_counts or context not in context_counts:\n                return float('-inf')\n            prob = ngram_counts[ngram] / context_counts[context]\n            total_log_prob += np.log(prob)\n    return round(total_log_prob, 4)\ncorpus = ['the', 'cat', 'in', 'the', 'hat', 'the', 'cat', 'run']\nsequence = ['the', 'cat', 'run']\nN = 2"}
{"task_id": 58, "completion_id": 6, "solution": "import numpy as np\nfrom collections import Counter\nfrom typing import List\ndef unsmoothed_ngram_log_prob(corpus: List[str], sequence: List[str], N: int) -> float:\n    \"\"\"\n    Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Parameters:\n    - corpus (List[str]): Training corpus, a list of word tokens.\n    - sequence (List[str]): Target sequence of word tokens to score.\n    - N (int): N-gram order (\u22651).\n\n    Returns:\n    float: Total log-probability (natural logarithm) of the sequence,\n           rounded to 4 decimal places. Return float('-inf') if any count is zero.\n    \"\"\"\n    ngram_counts = Counter((tuple(corpus[i:i + N]) for i in range(len(corpus) - N + 1)))\n    if N > 1:\n        prefix_counts = Counter((tuple(corpus[i:i + N - 1]) for i in range(len(corpus) - N + 2)))\n    else:\n        prefix_counts = Counter()\n        prefix_counts[()] = len(corpus)\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        prefix = tuple(sequence[i:i + N - 1]) if N > 1 else ()\n        ngram_count = ngram_counts.get(ngram, 0)\n        prefix_count = prefix_counts.get(prefix, 0)\n        if ngram_count == 0 or prefix_count == 0:\n            return float('-inf')\n        log_prob += np.log(ngram_count / prefix_count)\n    return round(log_prob, 4)\ncorpus = ['i', 'love', 'machine', 'learning', 'i', 'hate', 'math']\nsequence = ['i', 'hate', 'machine']\nN = 2"}
{"task_id": 58, "completion_id": 7, "solution": "import numpy as np\nfrom collections import Counter\nfrom typing import List\ndef unsmoothed_ngram_log_prob(corpus: List[str], sequence: List[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n    \n    Args:\n        corpus: A list of word tokens forming the training corpus.\n        sequence: A list of word tokens whose log-probability should be calculated.\n        N: The order of the n-gram model (1 for unigram, 2 for bigram, etc).\n        \n    Returns:\n        The total log-probability of the sequence under the N-gram language model\n        trained on the corpus.\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n    if len(sequence) < N:\n        return round(0.0, 4)\n    ngrams = [tuple(corpus[i:i + N]) for i in range(len(corpus) - N + 1)]\n    ngram_counts = Counter(ngrams)\n    if N > 1:\n        n_minus_1grams = [tuple(corpus[i:i + N - 1]) for i in range(len(corpus) - N + 2)]\n        n_minus_1gram_counts = Counter(n_minus_1grams)\n    else:\n        n_minus_1gram_counts = None\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        window = tuple(sequence[i:i + N])\n        if N == 1:\n            count_ngram = ngram_counts.get(window, 0)\n            total_count = len(corpus)\n        else:\n            prefix = window[:-1]\n            count_ngram = ngram_counts.get(window, 0)\n            count_prefix = n_minus_1gram_counts.get(prefix, 0)\n        if N == 1 and total_count == 0:\n            return float('-inf')\n        elif N > 1 and (count_ngram == 0 or count_prefix == 0):\n            return float('-inf')\n        if N == 1:\n            prob = count_ngram / total_count\n        else:\n            prob = count_ngram / count_prefix\n        total_log_prob += np.log(prob)\n    return round(total_log_prob, 4)"}
{"task_id": 58, "completion_id": 8, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n    \n    The function builds N-gram counts from the *corpus* and computes\n    the total log-probability of the *sequence* using unsmoothed MLE.\n    Returns the total log-probability, rounded to 4 decimal places.\n    If any required count is zero, returns float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n    if len(sequence) < N:\n        if N == 1:\n            pass\n        else:\n            return float('-inf')\n    counts = {}\n    for n in range(1, N + 1):\n        ngrams = [tuple(corpus[i:i + n]) for i in range(len(corpus) - n + 1)]\n        counts[n] = Counter(ngrams)\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        prefix = tuple(sequence[i:i + N - 1])\n        if N == 1:\n            count_ngram = counts[1][ngram]\n            total_count = len(corpus)\n            if count_ngram == 0:\n                return float('-inf')\n            prob = count_ngram / total_count\n        else:\n            count_ngram = counts[N][ngram]\n            count_prefix = counts[N - 1][prefix]\n            if count_ngram == 0 or count_prefix == 0:\n                return float('-inf')\n            prob = count_ngram / count_prefix\n        total_log_prob += np.log(prob)\n    return round(total_log_prob, 4)\ncorpus = ['the', 'cat', 'in', 'the', 'hat']\nsequence = ['the', 'cat', 'in', 'the']\nN = 2"}
{"task_id": 58, "completion_id": 9, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\"\"\"\n    ngrams = Counter((tuple(corpus[i:i + N]) for i in range(len(corpus) - N + 1)))\n    if N > 1:\n        context_ngrams = Counter((tuple(corpus[i:i + N - 1]) for i in range(len(corpus) - N + 2)))\n    else:\n        context_ngrams = Counter()\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        if N > 1:\n            context = tuple(sequence[i:i + N - 1])\n            ngram_count = ngrams.get(ngram, 0)\n            context_count = context_ngrams.get(context, 0)\n            if context_count == 0 or ngram_count == 0:\n                return float('-inf')\n            prob = ngram_count / context_count\n        else:\n            ngram_count = ngrams.get(ngram, 0)\n            if ngram_count == 0:\n                return float('-inf')\n            prob = ngram_count / len(corpus)\n        total_log_prob += np.log(prob)\n    return round(total_log_prob, 4)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | np.ndarray, y: list[float] | np.ndarray, degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function builds polynomial features up to *degree*, optimises the\n    Lasso objective with coordinate descent, and returns the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two passes is smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, ..., w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X).ravel()\n    y = np.array(y).ravel()\n    m = X.size\n    n_features = degree + 1\n    X_poly = np.column_stack([X ** j for j in range(n_features)])\n    w = np.zeros(n_features)\n    max_change = float('inf')\n    for it in range(n_iterations):\n        if max_change < tol:\n            break\n        old_w = w.copy()\n        y_pred = X_poly @ w\n        residual = y - y_pred\n        w[0] = residual.mean()\n        for j in range(1, n_features):\n            xj = X_poly[:, j]\n            rho = xj @ (residual + w[j] * xj)\n            if reg_factor == 0:\n                w[j] = rho / (xj @ xj)\n            else:\n                sign_rho = np.sign(rho)\n                abs_rho = np.abs(rho)\n                soft_thresholded = sign_rho * max(abs_rho - reg_factor, 0)\n                w[j] = soft_thresholded / (xj @ xj)\n        y_pred = X_poly @ w\n        residual = y - y_pred\n        max_change = np.max(np.abs(w - old_w))\n    return [round(w_j, 4) for w_j in w]\nX = [1, 2, 3, 4]\ny = [1, 4, 9, 16]\ndegree = 2\nreg_factor = 0.1"}
{"task_id": 62, "completion_id": 1, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    m = len(y)\n    n_features = degree + 1\n    A = np.column_stack([X ** i for i in range(0, degree + 1)])\n    w = np.zeros(n_features)\n    max_weight_change = np.inf\n    for iteration in range(n_iterations):\n        if max_weight_change < tol:\n            break\n        predictions = A @ w\n        residuals = y - predictions\n        w_new = w.copy()\n        w_new[0] = residuals.mean()\n        for j in range(1, n_features):\n            rho = A[:, j].T @ (residuals + w[j] * A[:, j])\n            if rho > reg_factor:\n                w_new[j] = (rho - reg_factor) / (A[:, j].T @ A[:, j])\n            elif rho < -reg_factor:\n                w_new[j] = (rho + reg_factor) / (A[:, j].T @ A[:, j])\n            else:\n                w_new[j] = 0.0\n        max_weight_change = np.max(np.abs(w_new - w))\n        w = w_new\n    return [round(w_j, 4) for w_j in w]"}
{"task_id": 62, "completion_id": 2, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.asarray(X).ravel()\n    y = np.asarray(y).ravel()\n    m = len(X)\n    Phi = np.vander(X, N=degree + 1, increasing=True)\n    Phi = np.hstack([np.ones((m, 1)), Phi[:, 1:]])\n    n_features = degree + 1\n    w = np.zeros(n_features)\n    max_weights_change = np.inf\n    for iter in range(n_iterations):\n        if max_weights_change < tol:\n            break\n        w_prev = np.copy(w)\n        residuals = y - Phi @ w\n        w[0] = np.mean(residuals)\n        for j in range(1, n_features):\n            x_j = Phi[:, j]\n            y_tilde = y - Phi @ w + w[j] * x_j\n            rho = x_j @ y_tilde\n            if rho < -reg_factor:\n                w[j] = (rho + reg_factor) / (x_j @ x_j)\n            elif rho > reg_factor:\n                w[j] = (rho - reg_factor) / (x_j @ x_j)\n            else:\n                w[j] = 0.0\n        max_weights_change = np.max(np.abs(w - w_prev))\n    return [round(float(wk), 4) for wk in w]"}
{"task_id": 62, "completion_id": 3, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | np.ndarray, y: list[float] | np.ndarray, degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X).flatten()\n    y = np.array(y).flatten()\n    m = len(X)\n\n    def create_design_matrix(X, degree):\n        n = len(X)\n        A = np.ones((n, 1))\n        for j in range(1, degree + 1):\n            A = np.hstack((A, X[:, np.newaxis] ** j))\n        return A\n    A = create_design_matrix(X, degree)\n    n_features = A.shape[1]\n    weights = np.zeros(n_features)\n    max_change = float('inf')\n    iter_count = 0\n    while iter_count < n_iterations and max_change > tol:\n        residual = y - A @ weights\n        weights[0] = np.mean(residual)\n        for j in range(1, n_features):\n            rho = A[:, j] @ residual + weights[j] * (A[:, j] @ A[:, j])\n            rho_abs = abs(rho)\n            if rho_abs <= reg_factor:\n                new_weight = 0.0\n            else:\n                new_weight = (rho - np.sign(rho) * reg_factor) / (A[:, j] @ A[:, j])\n            max_change = max(max_change, abs(new_weight - weights[j]))\n            weights[j] = new_weight\n        max_change = 0\n        iter_count += 1\n    return [round(w, 4) for w in weights]"}
{"task_id": 62, "completion_id": 4, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model with polynomial features.\n    \n    The function uses coordinate descent to minimize the Lasso objective function.\n    \n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Degree of the polynomial features to include.\n    reg_factor : float\n        Regularization strength \u03bb.\n    n_iterations : int, optional\n        Maximum number of iterations of coordinate descent.\n    tol : float, optional\n        Tolerance for early stopping.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, ..., w_d] rounded to four decimal places.\n    \"\"\"\n    X = np.array(X, dtype=np.float64).flatten()\n    y = np.array(y, dtype=np.float64).flatten()\n    m = len(X)\n    Phi = np.column_stack([X ** i for i in range(degree + 1)])\n    w = np.zeros(degree + 1)\n    best_w = w.copy()\n    max_weight_change = np.inf\n    best_max_weight_change = np.inf\n    iters = 0\n    while iters < n_iterations and (iters == 0 or max_weight_change > tol):\n        residuals = y - np.dot(Phi, w)\n        w[0] = np.mean(residuals)\n        max_weight_change = 0\n        for j in range(1, degree + 1):\n            rho = np.dot(Phi[:, j], residuals + w[j] * Phi[:, j])\n            abs_rho = np.abs(rho)\n            if abs_rho > reg_factor:\n                w_j_new = (rho - np.sign(rho) * reg_factor) / np.dot(Phi[:, j], Phi[:, j])\n            else:\n                w_j_new = 0.0\n            delta = abs(w[j] - w_j_new)\n            w[j] = w_j_new\n            if delta > max_weight_change:\n                max_weight_change = delta\n        if max_weight_change < best_max_weight_change:\n            best_max_weight_change = max_weight_change\n            best_w = w.copy()\n        iters += 1\n    return [round(coef, 4) for coef in best_w]\nX = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\ndegree = 1\nreg_factor = 0.1"}
{"task_id": 62, "completion_id": 5, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | np.ndarray, y: list[float] | np.ndarray, degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X).flatten()\n    y = np.array(y).flatten()\n    m = len(X)\n    Phi = np.vander(X, N=degree + 1, increasing=True)\n    Phi = np.fliplr(Phi)\n    w = np.zeros(degree + 1)\n    for iter in range(n_iterations):\n        residuals = y - Phi @ w\n        w_new = w.copy()\n        w_new[0] = residuals.mean()\n        for j in range(1, degree + 1):\n            rho = Phi[:, j].T @ (residuals + w[j] * Phi[:, j])\n            if rho > reg_factor:\n                w_new[j] = (rho - reg_factor) / (Phi[:, j].T @ Phi[:, j])\n            elif rho < -reg_factor:\n                w_new[j] = (rho + reg_factor) / (Phi[:, j].T @ Phi[:, j])\n            else:\n                w_new[j] = 0.0\n        max_change = np.max(np.abs(w_new - w))\n        if max_change < tol:\n            break\n        w = w_new\n    return [round(w_j, 4) for w_j in w]"}
{"task_id": 62, "completion_id": 6, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | np.ndarray, y: list[float] | np.ndarray, degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    y = np.asarray(y, dtype=np.float64)\n    m = len(X)\n    n_features = degree + 1\n    X_poly = np.column_stack([X ** i for i in range(n_features)])\n    if X_poly.shape[1] == 0 or X_poly[0, 0] != 1.0:\n        X_poly = np.c_[np.ones(m), X_poly]\n    else:\n        X_poly[:, 0] = 1.0\n    w = np.zeros(n_features)\n    for iter in range(n_iterations):\n        residuals = y - X_poly @ w\n        max_change = 0.0\n        w_new = w.copy()\n        w_new[0] = np.mean(residuals)\n        for j in range(1, n_features):\n            xj = X_poly[:, j]\n            rho = xj @ (residuals + w[j] * xj)\n            slope_j = xj @ xj\n            if reg_factor == 0:\n                new_wj = rho / slope_j\n            elif rho > reg_factor:\n                new_wj = (rho - reg_factor) / slope_j\n            elif rho < -reg_factor:\n                new_wj = (rho + reg_factor) / slope_j\n            else:\n                new_wj = 0.0\n            w_new[j] = new_wj\n            max_change = max(max_change, abs(new_wj - w[j]))\n        w = w_new\n        if max_change < tol:\n            break\n    return [round(wi, 4) for wi in w]\nX = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\ndegree = 1\nreg_factor = 0.1"}
{"task_id": 62, "completion_id": 7, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    m = len(X)\n    X_poly = np.column_stack([X ** j for j in range(degree + 1)])\n    w = np.zeros(degree + 1)\n    for iter in range(n_iterations):\n        old_weights = w.copy()\n        residuals = y - X_poly @ w\n        w[0] = np.mean(residuals)\n        for j in range(1, degree + 1):\n            x_j = X_poly[:, j]\n            y_hat_without_j = X_poly @ w - x_j * w[j]\n            rho = x_j @ (y - y_hat_without_j)\n            if rho > reg_factor:\n                w_j_new = (rho - reg_factor) / (x_j @ x_j)\n            elif rho < -reg_factor:\n                w_j_new = (rho + reg_factor) / (x_j @ x_j)\n            else:\n                w_j_new = 0.0\n            w[j] = w_j_new\n        max_change = np.max(np.abs(w - old_weights))\n        if max_change < tol:\n            break\n    return [round(w_j, 4) for w_j in w.tolist()]"}
{"task_id": 62, "completion_id": 8, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    m = len(X)\n    X_poly = np.column_stack([X ** j for j in range(degree + 1)])\n    w = np.zeros(degree + 1)\n    xtx = np.array([np.dot(X_poly[:, j], X_poly[:, j]) for j in range(degree + 1)])\n    max_change = np.inf\n    for iteration in range(n_iterations):\n        residuals = y - np.dot(X_poly, w)\n        w_prev = w.copy()\n        w[0] = np.mean(residuals)\n        residuals += np.dot(X_poly[:, 0], w_prev[0])\n        for j in range(1, degree + 1):\n            rho = np.dot(X_poly[:, j], residuals + w[j] * X_poly[:, j])\n            if rho > reg_factor:\n                w_j = (rho - reg_factor) / xtx[j]\n            elif rho < -reg_factor:\n                w_j = (rho + reg_factor) / xtx[j]\n            else:\n                w_j = 0.0\n            delta = w_j - w[j]\n            w[j] = w_j\n            residuals -= delta * X_poly[:, j]\n        max_change = np.max(np.abs(w - w_prev))\n        if max_change < tol:\n            break\n    return [round(w_j, 4) for w_j in w]"}
{"task_id": 62, "completion_id": 9, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | np.ndarray, y: list[float] | np.ndarray, degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function builds polynomial features up to *degree*, optimises the\n    Lasso objective with coordinate descent, and returns the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X, dtype=np.float64).flatten()\n    y = np.array(y, dtype=np.float64).flatten()\n    m = X.shape[0]\n    Phi = np.ones((m, degree + 1))\n    for j in range(1, degree + 1):\n        Phi[:, j] = X ** j\n    w = np.zeros(degree + 1)\n    max_change = np.inf\n    for iteration in range(n_iterations):\n        old_w = w.copy()\n        y_hat = Phi @ w\n        res = y - y_hat\n        w[0] = res.mean()\n        for j in range(1, degree + 1):\n            xj = Phi[:, j]\n            rho = xj @ (y - (y_hat - w[j] * xj))\n            if rho < -reg_factor:\n                w[j] = (rho + reg_factor) / (xj @ xj)\n            elif rho > reg_factor:\n                w[j] = (rho - reg_factor) / (xj @ xj)\n            else:\n                w[j] = 0.0\n        max_change = np.max(np.abs(w - old_w))\n        if max_change < tol:\n            break\n    return [round(w_j, 4) for w_j in w]"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the backward probability vector \u03b2_t for a Hidden Markov Model (HMM).\n    \n    Parameters:\n        A (list of list of float): Transition probability matrix. A[i][j] = P(state_j | state_i)\n        B (list of list of float): Emission probability matrix. B[i][k] = P(observation_k | state_i)\n        obs (list of int): List of observation indices (length T)\n        t (int): Time index (0 <= t < T) for which to compute \u03b2_t\n\n    Returns:\n        list of float: Backward probability vector at time t, rounded to 4 decimal places\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    T = len(obs)\n    N = len(A)\n    beta = [0.0] * N\n    beta_current = [1.0] * N\n    for time in range(T - 2, t - 1, -1):\n        beta_current = [0.0] * N\n        for i in range(N):\n            for j in range(N):\n                obs_index = obs[time + 1]\n                beta_current[i] += A[i][j] * B[j][obs_index] * beta[j]\n        beta_current = beta_current / np.sum(beta_current)\n        if time == t:\n            beta = beta_current\n    return [round(val, 4) for val in beta]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.5], [0.1, 0.9]]\nobs = [1, 0, 2, 1]\nt = 1"}
{"task_id": 63, "completion_id": 1, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the backward probability vector beta_t for a given time step t in an HMM.\n    \n    Parameters:\n    A (list of list of float): Transition probability matrix of shape (N, N)\n    B (list of list of float): Emission probability matrix of shape (N, M)\n    obs (list of int): Observation sequence of length T with indices from 0 to M-1\n    t (int): Time index (0 \u2264 t < T)\n\n    Returns:\n    list of float: Backward probability vector at time t, rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    T = len(obs)\n    N = A.shape[0]\n    beta = np.ones(N)\n    for time in range(T - 2, t, -1):\n        for i in range(N):\n            beta[i] = 0.0\n            for j in range(N):\n                beta[i] += A[i][j] * B[j][obs[time + 1]] * beta[j]\n    return [round(prob, 4) for prob in beta.tolist()]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.6, 0.4], [0.3, 0.7]]\nobs = [0, 1, 0]\nt = 0"}
{"task_id": 63, "completion_id": 2, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the backward probabilities beta_t for a Hidden Markov Model (HMM).\n    \n    Parameters:\n    - A: list of lists of floats\n        Transition probability matrix of shape (N, N), where A[i][j] is the\n        probability of transitioning from state i to state j.\n    - B: list of lists of floats\n        Emission probability matrix of shape (N, M), where B[i][k] is the\n        probability of emitting observation k when in state i.\n    - obs: list of integers\n        Observation sequence of length T.\n    - t: int\n        The time step to compute the backward probabilities for (0 \u2264 t < T).\n    \n    Returns:\n    - list of floats\n        The backward probability vector \u03b2_t of size N, with probabilities rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1] = [1.0] * N\n    for time in range(T - 2, t - 1, -1):\n        for i in range(N):\n            beta[time][i] = 0.0\n            for j in range(N):\n                observation = obs[time + 1]\n                beta[time][i] += A[i][j] * B[j][observation] * beta[time + 1][j]\n    return [round(prob, 4) for prob in beta[t]]"}
{"task_id": 63, "completion_id": 3, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the backward probability vector \u03b2_t for a given time index t in an HMM.\n\n    Parameters:\n        A (list[list[float]]): Transition probability matrix of shape (N, N).\n        B (list[list[float]]): Emission probability matrix of shape (N, M).\n        obs (list[int]): List of observation indices with length T.\n        t (int): Time index (0 \u2264 t < T).\n\n    Returns:\n        list[float]: A list of N backward probabilities \u03b2_t(i) rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    N = A.shape[0]\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for t_index in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t_index, i] = 0.0\n            for j in range(N):\n                obs_index = obs[t_index + 1]\n                beta[t_index, i] += A[i, j] * B[j, obs_index] * beta[t_index + 1, j]\n    return [round(prob, 4) for prob in beta[t]]"}
{"task_id": 63, "completion_id": 4, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Computes the backward probability vector beta_t for a given time index t\n    in a Hidden Markov Model.\n\n    Parameters:\n    - A (List[List[float]]): Transition probability matrix of shape (N, N)\n    - B (List[List[float]]): Emission probability matrix of shape (N, M)\n    - obs (List[int]): Observation sequence of length T (list of observation indices)\n    - t (int): Time index (0 \u2264 t < T)\n\n    Returns:\n    - List[float]: Backward probability vector beta_t(i) for each state i, \n                   rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    T = len(obs)\n    N = A.shape[0]\n    beta = [1.0] * N\n    for time in range(T - 2, t - 1, -1):\n        next_beta = beta\n        current_obs_index = obs[time + 1]\n        beta = [0.0] * N\n        for i in range(N):\n            for j in range(N):\n                beta[i] += A[i][j] * B[j][current_obs_index] * next_beta[j]\n        beta = [round(x, 4) for x in beta]\n    return beta\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.6, 0.4], [0.5, 0.5]]\nobs = [1, 0, 1]\nt = 0"}
{"task_id": 63, "completion_id": 5, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Computes the backward probability vector beta_t for a given time index t\n    in a discrete Hidden Markov Model.\n\n    Parameters:\n    A (list of list of float): Transition matrix of shape (N, N).\n                              A[i][j] is the probability of transitioning from state i to state j.\n    B (list of list of float): Emission matrix of shape (N, M).\n                              B[i][k] is the probability of observing symbol k from state i.\n    obs (list of int): A list of T observation indices (0-based).\n    t (int): Time index (0-based) for which to compute the beta probabilities.\n\n    Returns:\n    A list of N backward probabilities (beta_t), rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)\n    T = len(obs)\n    A = np.array(A)\n    B = np.array(B)\n    B_symbol = B[:, obs]\n    beta = np.ones(N)\n    for time in range(T - 2, t - 1, -1):\n        current_obs = obs[time + 1]\n        beta = np.dot(A, B[:, current_obs] * beta)\n    return [round(beta[i], 4) for i in range(N)]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.6, 0.4], [0.5, 0.5]]\nobs = [0, 1, 0]\nt = 0"}
{"task_id": 63, "completion_id": 6, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the backward probability vector beta_t for a given time index t\n    in a discrete Hidden Markov Model (HMM).\n\n    Parameters:\n    - A: list of lists representing the transition probability matrix of shape (N, N),\n         where A[i][j] is the probability of transitioning from state i to state j.\n    - B: list of lists representing the emission probability matrix of shape (N, M),\n         where B[i][k] is the probability of emitting observation k from state i.\n    - obs: list of integers representing the sequence of observed symbols (0-indexed).\n    - t: integer time index (0 <= t < T)\n\n    Returns:\n    - A list of N backward probabilities beta_t[i] rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)\n    T = len(obs)\n    A = np.array(A)\n    B = np.array(B)\n    beta = [np.ones(N)]\n    for time in range(T - 2, t - 1, -1):\n        current_obs = obs[time + 1]\n        beta_t = np.dot(A, B[:, current_obs] * beta[-1])\n        beta.append(beta_t)\n    beta.reverse()\n    return [round(prob, 4) for prob in beta[0]]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.6, 0.4], [0.1, 0.9]]\nobs = [0, 1, 0]\nt = 0"}
{"task_id": 63, "completion_id": 7, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the backward probability vector \u03b2_t for a Hidden Markov Model (HMM).\n    \n    Parameters:\n    - A (list of list of float): Transition matrix, A[i][j] = probability of transitioning from state i to j.\n    - B (list of list of float): Emission matrix, B[i][o] = probability of observing o in state i.\n    - obs (list of int): Observation sequence, where each element is the index of the observed symbol.\n    - t (int): Time index (0 \u2264 t < T) for which to compute the backward probabilities.\n\n    Returns:\n    - \u03b2_t (list of float): Backward probability vector at time t. Rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)\n    T = len(obs)\n    A = np.array(A)\n    B = np.array(B)\n    beta = [0.0] * N\n    for i in range(N):\n        beta[i] = 1.0\n    for current_t in range(T - 2, t - 1, -1):\n        next_t_observation = obs[current_t + 1]\n        beta_new = [0.0] * N\n        for i in range(N):\n            for j in range(N):\n                beta_new[i] += A[i][j] * B[j][next_t_observation] * beta[j]\n        beta = beta_new\n    return [round(prob, 4) for prob in beta]"}
{"task_id": 63, "completion_id": 8, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the backward probability vector beta_t for a given time index t\n    in a discrete Hidden Markov Model (HMM).\n\n    Parameters:\n    - A : list[list[float]] of shape (N, N)\n        Transition probability matrix, A[i][j] = a_ij = P(q_t+1 = j | q_t = i).\n    - B : list[list[float]] of shape (N, M)\n        Emission probability matrix, B[i][k] = b_i(k) = P(o_t = k | q_t = i).\n    - obs : list[int]\n        List of observation indices (length T).\n    - t : int\n        Current time index (0 \u2264 t < T).\n\n    Returns:\n    - list[float]\n        List of N backward probabilities beta_t[i] rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    N = A.shape[0]\n    T = len(obs)\n    beta = [1.0] * N\n    for time in range(T - 2, t - 1, -1):\n        new_beta = [0.0] * N\n        for i in range(N):\n            for j in range(N):\n                obs_index = obs[time + 1]\n                new_beta[i] += A[i][j] * B[j][obs_index] * beta[j]\n        beta = new_beta\n    return [round(prob, 4) for prob in beta]"}
{"task_id": 63, "completion_id": 9, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Computes the backward probability vector \u03b2_t for a given time index t\n    in a Hidden Markov Model (HMM) with discrete observations.\n\n    Parameters:\n        A (list[list[float]]): Transition probability matrix of shape (N, N).\n        B (list[list[float]]): Emission probability matrix of shape (N, M).\n        obs (list[int]): Observation sequence as list of indices (length T).\n        t (int): Time index (0 <= t < T).\n\n    Returns:\n        list[float]: Backward probability vector \u03b2_t of length N, rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    N = A.shape[0]\n    T = len(obs)\n    beta = [0.0] * T\n    beta[T - 1] = [1.0] * N\n    for idx in reversed(range(t, T - 1)):\n        beta[idx] = []\n        for i in range(N):\n            val = 0.0\n            for j in range(N):\n                obs_idx = obs[idx + 1]\n                val += A[i][j] * B[j][obs_idx] * beta[idx + 1][j]\n            beta[idx].append(val)\n    return [round(prob, 4) for prob in beta[t]]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.6, 0.4], [0.1, 0.9]]\nobs = [0, 1, 0]\nt = 0"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    T = len(obs)\n    N = len(A)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for t in reversed(range(T - 1)):\n        for i in range(N):\n            beta[t, i] = 0.0\n            for j in range(N):\n                beta[t, i] += A[i][j] * B[j][obs[t + 1]] * beta[t + 1, j]\n    prob = 0.0\n    for i in range(N):\n        prob += pi[i] * B[i][obs[0]] * beta[0, i]\n    return round(prob, 6)"}
{"task_id": 65, "completion_id": 1, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(A)\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            for j in range(N):\n                beta[t, i] += A[i][j] * B[j][obs[t + 1]] * beta[t + 1, j]\n    prob = 0.0\n    for i in range(N):\n        prob += pi[i] * B[i][obs[0]] * beta[0, i]\n    return round(prob, 6)\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.8, 0.2], [0.1, 0.9]]\npi = [0.4, 0.6]\nobs = [0, 1, 0]"}
{"task_id": 65, "completion_id": 2, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n    \n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    T = len(obs)\n    N = len(A)\n    beta = [1.0 for _ in range(N)]\n    for t in reversed(range(T - 1)):\n        for i in range(N):\n            beta_i = 0.0\n            for j in range(N):\n                o = obs[t + 1]\n                beta_i += A[i][j] * B[j][o] * beta[j]\n            beta[i] = beta_i\n    prob = 0.0\n    for i in range(N):\n        obs0 = obs[0]\n        prob += pi[i] * B[i][obs0] * beta[i]\n    return round(prob, 6)"}
{"task_id": 65, "completion_id": 3, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(A)\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for t in reversed(range(T - 1)):\n        for i in range(N):\n            beta_t_i = 0.0\n            for j in range(N):\n                obs_t_plus_1 = obs[t + 1]\n                beta_t_i += A[i][j] * B[j][obs_t_plus_1] * beta[t + 1, j]\n            beta[t, i] = beta_t_i\n    prob = 0.0\n    obs_0 = obs[0]\n    for i in range(N):\n        prob += pi[i] * B[i][obs_0] * beta[0, i]\n    return round(prob, 6)"}
{"task_id": 65, "completion_id": 4, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(A)\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1] = np.ones(N)\n    for t in reversed(range(T - 1)):\n        for i in range(N):\n            beta[t][i] = 0.0\n            for j in range(N):\n                emission = B[j][obs[t + 1]]\n                beta[t][i] += A[i][j] * emission * beta[t + 1][j]\n    obs0 = obs[0]\n    prob = 0.0\n    for i in range(N):\n        prob += pi[i] * B[i][obs0] * beta[0][i]\n    return round(prob, 6)"}
{"task_id": 65, "completion_id": 5, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    T = len(obs)\n    if T == 0:\n        return 0.0\n    N = len(pi)\n    beta = np.zeros((T, N))\n    beta[T - 1] = np.ones(N)\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t][i] = sum((A[i][j] * B[j][obs[t + 1]] * beta[t + 1][j] for j in range(N)))\n    prob = sum((pi[i] * B[i][obs[0]] * beta[0][i] for i in range(N)))\n    return round(prob, 6)"}
{"task_id": 65, "completion_id": 6, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    T = len(obs)\n    N = len(A)\n    beta = np.zeros((T, N))\n    for i in range(N):\n        beta[T - 1, i] = 1.0\n    for t in reversed(range(T - 1)):\n        for i in range(N):\n            for j in range(N):\n                beta[t, i] += A[i][j] * B[j][obs[t + 1]] * beta[t + 1][j]\n    prob = 0.0\n    for i in range(N):\n        prob += pi[i] * B[i][obs[0]] * beta[0][i]\n    return round(prob, 6)"}
{"task_id": 65, "completion_id": 7, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(A)\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = 0.0\n            for j in range(N):\n                obs_t1 = obs[t + 1]\n                beta[t, i] += A[i][j] * B[j][obs_t1] * beta[t + 1, j]\n    o0 = obs[0]\n    prob = 0.0\n    for i in range(N):\n        prob += pi[i] * B[i][o0] * beta[0, i]\n    return round(prob, 6)\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\npi = [0.5, 0.5]\nobs = [0, 1, 2]"}
{"task_id": 65, "completion_id": 8, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    T = len(obs)\n    N = len(A)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for t in reversed(range(T - 1)):\n        for i in range(N):\n            beta[t, i] = sum((A[i][j] * B[j][obs[t + 1]] * beta[t + 1, j] for j in range(N)))\n    result = sum((pi[i] * B[i][obs[0]] * beta[0][i] for i in range(N)))\n    return round(result, 6)\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.6, 0.4], [0.3, 0.7]]\npi = [0.5, 0.5]\nobs = [0, 1, 0, 1]"}
{"task_id": 65, "completion_id": 9, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    T = len(obs)\n    N = len(pi)\n    beta = [1.0 for _ in range(N)]\n    for t in reversed(range(T - 1)):\n        for i in range(N):\n            beta_i = 0.0\n            for j in range(N):\n                obs_t_plus_1 = obs[t + 1]\n                beta_i += A[i][j] * B[j][obs_t_plus_1] * beta[j]\n            beta[i] = beta_i\n    prob = 0.0\n    for i in range(N):\n        prob += pi[i] * B[i][obs[0]] * beta[i]\n    return round(prob, 6)\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\npi = [0.5, 0.5]\nobs = [2, 1, 0]"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    if not observations:\n        return -1\n    n = len(S)\n    if n == 0:\n        return -1\n    m = len(B[0]) if B else 0\n    if not (all((len(row) == n for row in A)) and all((len(row) == m for row in B))):\n        return -1\n    if not (len(A) == n and len(B) == n and (len(S) == n)):\n        return -1\n    if any((0 > obs or obs >= m for obs in observations)):\n        return -1\n    T = len(observations)\n    forward = np.zeros((n, T))\n    for i in range(n):\n        forward[i][0] = S[i] * B[i][observations[0]]\n    for t in range(1, T):\n        for i in range(n):\n            sum_val = sum((forward[j][t - 1] * A[j][i] for j in range(n)))\n            forward[i][t] = sum_val * B[i][observations[t]]\n    prob = sum((forward[i][T - 1] for i in range(n)))\n    return round(prob, 4)"}
{"task_id": 69, "completion_id": 1, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    if n == 0:\n        return -1\n    if len(A) != n or any((len(row) != n for row in A)):\n        return -1\n    if len(B) != n or any((len(row) == 0 for row in B)) or any((len(row) != len(B[0]) for row in B)):\n        return -1\n    m = len(B[0])\n    if m == 0:\n        return -1\n    if not observations:\n        return -1\n    for obs in observations:\n        if not 0 <= obs < m:\n            return -1\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    for i in range(n):\n        alpha[0][i] = S[i] * B[i][observations[0]]\n    for t in range(1, T):\n        for j in range(n):\n            alpha[t][j] = B[j][observations[t]] * sum((alpha[t - 1][i] * A[i][j] for i in range(n)))\n    result = sum((alpha[T - 1][i] for i in range(n)))\n    return round(result, 4)"}
{"task_id": 69, "completion_id": 2, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]]: Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    if not observations:\n        return -1\n    n = len(S)\n    m = len(B[0]) if B and B[0] else 0\n    if len(A) != n or any((len(row) != n for row in A)):\n        return -1\n    if len(B) != n or any((len(row) != m for row in B)):\n        return -1\n    if len(S) != n:\n        return -1\n    if any((k < 0 or k >= m for k in observations)):\n        return -1\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    for i in range(n):\n        alpha[0][i] = S[i] * B[i][observations[0]]\n    for t in range(1, T):\n        for j in range(n):\n            alpha[t][j] = sum((alpha[t - 1][i] * A[i][j] for i in range(n))) * B[j][observations[t]]\n    final_prob = sum((alpha[-1][i] for i in range(n)))\n    return round(final_prob, 4)\nS = [0.5, 0.5]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.9, 0.0], [0.8, 0.0, 0.2]]\nobservations = [1, 2]"}
{"task_id": 69, "completion_id": 3, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]]: Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    m = len(B[0])\n    if not observations:\n        return -1\n    if any((obs < 0 or obs >= m for obs in observations)):\n        return -1\n    if not (isinstance(S, list) and len(S) == n and all((isinstance(p, (int, float)) for p in S)) and (abs(sum(S) - 1.0) > 1e-09)):\n        return -1\n    if not (isinstance(A, list) and all((len(row) == n for row in A)) and all((all((isinstance(v, (int, float)) for v in row)) for row in A))):\n        return -1\n    if not (isinstance(B, list) and all((len(row) == m for row in B)) and all((all((isinstance(v, (int, float)) for v in row)) for row in B))):\n        return -1\n    alpha = np.zeros((n, len(observations)))\n    for i in range(n):\n        alpha[i, 0] = S[i] * B[i][observations[0]]\n    for t in range(1, len(observations)):\n        for j in range(n):\n            alpha[j, t] = sum((alpha[i, t - 1] * A[i][j] for i in range(n))) * B[j][observations[t]]\n    likelihood = np.sum(alpha[:, -1])\n    return round(likelihood, 4)\nS = [0.6, 0.4]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\nobservations = [0, 1, 2]"}
{"task_id": 69, "completion_id": 4, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]]: Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    if not S or not A or (not B) or (not observations):\n        return -1\n    if len(A) != n or len(A[0]) != n:\n        return -1\n    if len(B) != n or not B[0]:\n        return -1\n    m = len(B[0])\n    for row in B:\n        if len(row) != m:\n            return -1\n    for obs in observations:\n        if not 0 <= obs < m:\n            return -1\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    for i in range(n):\n        alpha[0][i] = S[i] * B[i][observations[0]]\n    for t in range(1, T):\n        for j in range(n):\n            alpha[t][j] = sum((alpha[t - 1][i] * A[i][j] for i in range(n))) * B[j][observations[t]]\n    likelihood = sum((alpha[T - 1][i] for i in range(n)))\n    return round(likelihood, 4)\nS = [0.6, 0.4]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.4, 0.1], [0.1, 0.3, 0.6]]\nobservations = [2, 1, 2]"}
{"task_id": 69, "completion_id": 5, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    m = len(B[0]) if n > 0 and B[0] else 0\n    if not observations or not S or (not A) or (not B):\n        return -1\n    if len(S) != n or len(A) != n or any((len(row) != n for row in A)):\n        return -1\n    if any((len(row) != m for row in B)):\n        return -1\n    if any((i < 0 or i >= m for i in observations)):\n        return -1\n    T = len(observations)\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n    alpha = np.zeros((T, n))\n    for i in range(n):\n        alpha[0][i] = S[i] * B[i][observations[0]]\n    for t in range(1, T):\n        for i in range(n):\n            alpha[t][i] = np.sum(alpha[t - 1] * A[:, i]) * B[i][observations[t]]\n    likelihood = np.sum(alpha[-1])\n    return round(likelihood, 4)"}
{"task_id": 69, "completion_id": 6, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    if not observations:\n        return -1\n    n = len(S)\n    if n == 0:\n        return -1\n    if len(A) != n or any((len(row) != n for row in A)):\n        return -1\n    m = len(B[0]) if B else 0\n    if len(B) != n or not all((len(row) == m for row in B)):\n        return -1\n    if not all((0 <= obs < m for obs in observations)):\n        return -1\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    for i in range(n):\n        alpha[0, i] = S[i] * B[i][observations[0]]\n    for t in range(1, T):\n        for i in range(n):\n            alpha[t, i] = sum((alpha[t - 1, j] * A[j][i] for j in range(n))) * B[i][observations[t]]\n    likelihood = sum(alpha[T - 1])\n    return round(likelihood, 4)"}
{"task_id": 69, "completion_id": 7, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]]: Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or -1 on invalid input.\n    \"\"\"\n    n = len(S)\n    m = len(B[0]) if B and B[0] else 0\n    T = len(observations)\n    if T == 0:\n        return -1\n    if n == 0 or any((len(row) != n for row in A)):\n        return -1\n    if any((len(row) != n for row in B)) or any((len(row) != m for row in B)):\n        return -1\n    if any((len(row) != n for row in A)):\n        return -1\n    if any((obs < 0 or obs >= m for obs in observations)):\n        return -1\n    alpha = np.zeros((T, n))\n    for i in range(n):\n        alpha[0][i] = S[i] * B[i][observations[0]]\n    for t in range(1, T):\n        for j in range(n):\n            alpha[t][j] = sum((alpha[t - 1][i] * A[i][j] for i in range(n))) * B[j][observations[t]]\n    total_prob = sum(alpha[T - 1])\n    return round(total_prob, 4)"}
{"task_id": 69, "completion_id": 8, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    if n == 0:\n        return -1\n    if not (isinstance(A, list) and len(A) == n and all((len(row) == n for row in A))):\n        return -1\n    if not (isinstance(B, list) and len(B) == n and all((isinstance(row, list) for row in B))):\n        return -1\n    m = len(B[0]) if B else 0\n    if not all((len(row) == m for row in B)):\n        return -1\n    if not observations:\n        return -1\n    for obs in observations:\n        if not 0 <= obs < m:\n            return -1\n    T = len(observations)\n    alpha = np.zeros((n, T))\n    for i in range(n):\n        alpha[i, 0] = S[i] * B[i][observations[0]]\n    for t in range(1, T):\n        for i in range(n):\n            alpha[i, t] = sum((alpha[j, t - 1] * A[j][i] for j in range(n))) * B[i][observations[t]]\n    result = sum((alpha[i, T - 1] for i in range(n)))\n    return round(result, 4)"}
{"task_id": 69, "completion_id": 9, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    if n == 0:\n        return -1\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    if A.shape[0] != n or A.shape[1] != n:\n        return -1\n    if B.shape[0] != n:\n        return -1\n    m = B.shape[1]\n    for obs in observations:\n        if not 0 <= obs < m:\n            return -1\n    if not observations:\n        return -1\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    for i in range(n):\n        alpha[0, i] = S[i] * B[i][observations[0]]\n    for t in range(1, T):\n        for i in range(n):\n            temp_sum = 0.0\n            for j in range(n):\n                temp_sum += alpha[t - 1, j] * A[j][i]\n            alpha[t, i] = temp_sum * B[i][observations[t]]\n    result = np.sum(alpha[T - 1])\n    return round(result, 4)\nS = [0.5, 0.5]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\nobs = [0, 1, 0]"}
{"task_id": 70, "completion_id": 0, "solution": "from collections import Counter, defaultdict\nfrom typing import List, Set, DefaultDict, Tuple, Optional\nclass FPNode:\n\n    def __init__(self, item: str=None, count: int=0, parent: 'FPNode'=None):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children: dict[str, FPNode] = {}\n        self.link: Optional['FPNode'] = None\n\n    def has_child(self, item: str) -> bool:\n        return item in self.children\n\n    def get_child(self, item: str) -> 'FPNode':\n        return self.children[item]\n\n    def add_child(self, item: str) -> 'FPNode':\n        new_child = FPNode(item=item, count=0, parent=self)\n        self.children[item] = new_child\n        return new_child\ndef build_fp_tree(transactions: List[List[str]], min_support: int, item_counts: Counter) -> Tuple[FPNode, DefaultDict[str, FPNode]]:\n    \"\"\"Build an FP-tree from transactions and return the root node.\"\"\"\n    header_table: DefaultDict[str, FPNode] = defaultdict(lambda : None)\n    root = FPNode()\n    for (item, count) in item_counts.items():\n        if count >= min_support:\n            node = FPNode(item=item, count=0)\n            node.link = header_table[item]\n            header_table[item] = node\n    filtered_transactions = []\n    for transaction in transactions:\n        filtered_transaction = [item for item in transaction if item_counts[item] >= min_support]\n        if filtered_transaction:\n            filtered_transaction.sort(key=lambda x: (-item_counts[x], x))\n            filtered_transactions.append(filtered_transaction)\n    for transaction in filtered_transactions:\n        current_node = root\n        for item in transaction:\n            if current_node.has_child(item):\n                current_node = current_node.get_child(item)\n                current_node.count += 1\n            else:\n                child = current_node.add_child(item)\n                child.count = 1\n                current_node = child\n            if header_table[item] is None:\n                header_table[item] = current_node\n            else:\n                node_point = header_table[item]\n                while node_point.link is not None:\n                    node_point = node_point.link\n                node_point.link = current_node\n    return (root, header_table)\ndef find_frequent_itemsets(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n    if not [item for (item, count) in item_counts.items() if count >= min_support]:\n        return []\n    (root, header_table) = build_fp_tree(transactions, min_support, item_counts)\n    frequent_itemsets = []\n    for item in sorted(header_table.keys()):\n        node = header_table[item]\n        conditional_pattern_bases = []\n        while node is not None:\n            path = []\n            count = node.count\n            current_node = node.parent\n            while current_node is not None and current_node.item is not None:\n                path.append((current_node.item, count))\n                current_node = current_node.parent\n            path.reverse()\n            if path:\n                conditional_pattern_bases.append((item, path))\n            node = node.link\n        conditional_database = []\n        for (base, prefix) in conditional_pattern_bases:\n            conditional_transaction = [item for (item, count) in prefix]\n            if conditional_transaction:\n                conditional_database.append(conditional_transaction)\n        if conditional_database:\n            conditional_frequent_itemsets = find_frequent_itemsets(conditional_database, min_support)\n            for itemset in conditional_frequent_itemsets:\n                itemset.append(base)\n                sorted_itemset = sorted(itemset)\n                if sorted_itemset not in frequent_itemsets:\n                    frequent_itemsets.append(sorted_itemset)\n        if [base] not in frequent_itemsets:\n            frequent_itemsets.append([base])\n    return frequent_itemsets\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\"\"\"\n    if not transactions or not any(transactions):\n        return []\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n    frequent_singles = [item for (item, count) in item_counts.items() if count >= min_support]\n    if not frequent_singles:\n        return []\n    frequent_itemsets = find_frequent_itemsets(transactions, min_support)\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 70, "completion_id": 1, "solution": "from collections import Counter, defaultdict\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions:\n        return []\n    item_counts = Counter()\n    for transaction in transactions:\n        item_counts.update(transaction)\n    freq_items = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    if not freq_items:\n        return []\n    sorted_items = sorted(freq_items.keys(), key=lambda x: (-freq_items[x], x))\n    item_map = {item: idx for (idx, item) in enumerate(sorted_items)}\n    item_header = sorted_items\n\n    def reorder(transaction: list[str]) -> list[str]:\n        return sorted([item for item in transaction if item in freq_items], key=lambda x: item_map[x], reverse=True)\n    filtered_transactions = [reorder(tx) for tx in transactions if reorder(tx)]\n    root = FPNode(None, 0, None)\n    header_table = {item: [] for item in item_header}\n    for trans in filtered_transactions:\n        if not trans:\n            continue\n        update_tree(trans, root, header_table, freq_items)\n    frequent_itemsets = []\n\n    def mine_tree(header_table, prefix, freq_items):\n        item_list = sorted(header_table.keys(), key=lambda x: item_map[x])\n        for item in item_list:\n            new_freq_set = prefix.copy()\n            new_freq_set.add(item)\n            new_freq_set_ordered = sorted(new_freq_set)\n            frequent_itemsets.append(new_freq_set_ordered)\n            cond_patterns = []\n            cond_support = {}\n            node = header_table[item]\n            while node.parent is not None:\n                cond_pattern = []\n                parent = node.parent\n                while parent.item != None:\n                    cond_pattern.append(parent.item)\n                    parent = parent.parent\n                cond_patterns.append((list(reversed(cond_pattern)), node.count))\n                node = node.link\n            if cond_patterns:\n                cond_trans = []\n                for (pattern, count) in cond_patterns:\n                    freq = Counter(pattern)\n                    if pattern:\n                        cond_trans.extend([pattern] * count)\n                if cond_trans:\n                    sub_freq = Counter()\n                    for p in cond_trans:\n                        sub_freq.update(p)\n                    sub_freq = {k: v for (k, v) in sub_freq.items() if v >= min_support}\n                    if sub_freq:\n                        sorted_subitems = sorted(sub_freq.keys(), key=lambda x: (-sub_freq[x], x))\n                        sub_freq_items = dict(sub_freq)\n                        sub_header_table = {item: [] for item in sorted_subitems}\n                        new_root = FPNode(None, 0, None)\n                        for t in cond_trans:\n                            if t:\n                                t_sorted = sorted(t, key=lambda x: (-sub_freq_items.get(x, 0), x))\n                                t_filtered = [x for x in t_sorted if x in sub_freq_items]\n                                if t_filtered:\n                                    update_tree(t_filtered, new_root, sub_header_table, sub_freq_items)\n                        mine_tree(sub_header_table, new_freq_set, sub_freq_items)\n    mine_tree(header_table, set(), freq_items)\n    unique_frequent = []\n    seen = set()\n    for itemset in frequent_itemsets:\n        t_tuple = tuple(itemset)\n        if t_tuple not in seen:\n            seen.add(t_tuple)\n            unique_frequent.append(itemset)\n    unique_frequent.sort(key=lambda x: (len(x), x))\n    return unique_frequent\nclass FPNode:\n\n    def __init__(self, item: str, count: int, parent):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.link = None\n\n    def has_child(self, item):\n        return item in self.children\n\n    def get_child(self, item):\n        return self.children.get(item, None)\n\n    def add_child(self, item):\n        new_node = FPNode(item, 1, self)\n        self.children[item] = new_node\n        return new_node\ndef update_tree(items, node, header_table, freq_items):\n    \"\"\"Update FP-Tree with one transaction (list of items).\"\"\"\n    if items[0] in node.children:\n        update_node(node.children[items[0]], items[1:], freq_items)\n    else:\n        new_node = node.add_child(items[0])\n        new_node.count += 1\n        update_header(items[0], new_node, header_table)\n        if len(items) > 1:\n            update_tree(items[1:], new_node, header_table, freq_items)\n    return\ndef update_node(node, items, freq_items):\n    \"\"\"Update existing node and continue down the tree.\"\"\"\n    node.count += 1\n    if items and items[0] in node.children:\n        update_node(node.children[items[0]], items[1:], freq_items)\n    elif items:\n        node.children[items[0]] = FPNode(items[0], 1, node)\n        update_header(items[0], node.children[items[0]], header_table)\n        update_tree(items[1:], node.children[items[0]], header_table, freq_items)\n    return\ntransactions = [['milk', 'bread', 'butter'], ['bread', 'butter'], ['milk', 'bread'], ['bread', 'butter'], ['milk', 'butter']]\nmin_support = 2"}
{"task_id": 70, "completion_id": 2, "solution": "from collections import Counter, defaultdict\nfrom typing import List, Dict, Set, Tuple\nclass FPNODE:\n\n    def __init__(self, name: str, count: int, parent):\n        self.name = name\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.link = None\n\n    def increment(self, count: int):\n        self.count += count\ndef buildFPtree(transactions: List[Dict[str, int]], min_support: int, header_table: Dict[str, int]) -> Tuple[FPNODE, Dict[str, FPNODE]]:\n    root = FPNODE(None, 1, None)\n    for trans in transactions:\n        items = [item for item in trans if trans[item] >= min_support]\n        if len(items) > 0:\n            ordered_items = sorted(items, key=lambda item: header_table[item], reverse=True)\n            update_tree(ordered_items, root, header_table, min_support)\n    return (root, header_table)\ndef update_tree(items: List[str], node: FPNODE, header_table: Dict[str, int], min_support: int):\n    if not items:\n        return\n    first = items[0]\n    second = items[1:]\n    if first in node.children:\n        node.children[first].increment(1)\n    else:\n        node.children[first] = FPNODE(first, 1, node)\n        if not header_table[first]:\n            header_table[first] = node.children[first]\n        else:\n            while header_table[first].link:\n                header_table[first] = header_table[first].link\n            header_table[first].link = node.children[first]\n    update_tree(second, node.children[first], header_table, min_support)\ndef mine_tree(node: FPNODE, prefix: List[str], freq_itemsets: List[List[str]], min_support: int):\n    if node.link is None:\n        return\n    cond_patterns_base = []\n    current = node.link\n    while current:\n        path = []\n        ascend_tree(current, path)\n        prefix_path = path[::-1]\n        if len(prefix_path) > 1:\n            prefix_count = current.count\n            cond_patterns_base.append((prefix_path, prefix_count))\n        current = current.link\n    if cond_patterns_base:\n        (cond_tree, _) = buildFPtree([(Counter(pattern), count)] if isinstance(pattern, list) else (pattern, count), min_support, defaultdict(lambda : None))\n        local_items = {(node.name, count) for node in _ if node.name}\n        if not local_items:\n            return\n        for (item, count) in local_items:\n            new_prefix = prefix.copy()\n            new_prefix.append(item)\n            new_prefix = sorted(set(new_prefix))\n            while new_prefix.count(item) > 1:\n                new_prefix.remove(item)\n            if len(new_prefix) != len(set(new_prefix)):\n                continue\n            if count >= min_support:\n                freq_itemsets.append(new_prefix)\n                if new_prefix.count(item) == 1:\n                    mine_tree(node.children.get(item), new_prefix, freq_itemsets, min_support)\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n    \n    Returns all frequent item-sets sorted by (len, lexicographic) order.\n    \"\"\"\n    if not transactions:\n        return []\n    header_table = {}\n    for trans in transactions:\n        for item in trans:\n            header_table[item] = header_table.get(item, 0) + 1\n    freq_items = {k for (k, v) in header_table.items() if v >= min_support}\n    if not freq_items:\n        return []\n    freq_items_counter = {k: v for (k, v) in header_table.items() if v >= min_support}\n    for (k, v) in sorted(freq_items_counter.items(), key=lambda x: x[1], reverse=True):\n        header_table[k] = v\n    filtered_transactions = []\n    for trans in transactions:\n        filtered = {item: trans.count(item) for item in freq_items if item in trans}\n        if filtered:\n            filtered_transactions.append(filtered)\n    if not filtered_transactions:\n        return []\n    (root, _) = buildFPtree(filtered_transactions, min_support, header_table)\n    freq_itemsets: List[List[str]] = []\n    ordered_frequent_items = sorted((name for name in header_table if header_table[name] >= min_support), key=lambda x: x)\n    for item in ordered_frequent_items:\n        if header_table[item] is not None:\n            freq_itemsets.append([item])\n            mine_tree(header_table[item], [item], freq_itemsets, min_support)\n    unique_itemsets = []\n    for itemset in freq_itemsets:\n        sorted_itemset = sorted(itemset)\n        if sorted_itemset not in unique_itemsets:\n            unique_itemsets.append(sorted_itemset)\n    unique_itemsets.sort(key=lambda x: (len(x), x))\n    return unique_itemsets\ntransactions = [['milk', 'bread', 'butter'], ['bread', 'butter'], ['milk', 'bread', 'butter', 'beer'], ['milk', 'bread', 'beer'], ['bread', 'butter', 'beer']]\nmin_support = 2"}
{"task_id": 70, "completion_id": 3, "solution": "from collections import Counter, defaultdict, deque\nfrom typing import List\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions:\n        return []\n    freq = Counter()\n    for t in transactions:\n        freq.update(t)\n    freq = {item: count for (item, count) in freq.items() if count >= min_support}\n    frequent_items = list(freq.keys())\n    frequent_items.sort()\n    if not frequent_items:\n        return []\n\n    def filter_and_sort(txn):\n        return [item for item in txn if item in freq]\n    freq_items_counter = Counter(freq)\n\n    def sort_key(item):\n        return (-freq_items_counter[item], item)\n    filtered_transactions = []\n    for t in transactions:\n        filtered = filter_and_sort(t)\n        if filtered:\n            filtered.sort(key=sort_key)\n            filtered_transactions.append(filtered)\n\n    class Tree:\n\n        def __init__(self):\n            self.root = Node(None, 0)\n            self.header_table = defaultdict(list)\n\n        def add_transaction(self, transaction):\n            node = self.root\n            for item in transaction:\n                next_node = node.get_child(item) or Node(item, 0)\n                next_node.count += 1\n                if item in self.header_table:\n                    self.header_table[item].append(next_node)\n                else:\n                    self.header_table[item] = [next_node]\n                node = next_node\n\n        def find_conditionals(self):\n            conditionals = defaultdict(list)\n            for (item, nodes) in self.header_table.items():\n                conditional_pattern_bases = []\n                for node in nodes:\n                    path = []\n                    count = node.count\n                    curr = node\n                    while curr.parent is not None:\n                        path.append((curr.parent.item, count))\n                        curr = curr.parent\n                    path.reverse()\n                    items = [x[0] for x in path]\n                    if items:\n                        if item in items:\n                            items = items[:items.index(item)]\n                        pattern = tuple(sorted(items))\n                        conditionals[pattern].append(item)\n                conditional_pattern_bases.append((pattern, item, count))\n            return conditionals\n\n    class Node:\n\n        def __init__(self, item, count):\n            self.item = item\n            self.count = count\n            self.children = {}\n            self.parent = None\n\n        def get_child(self, item):\n            return self.children.get(item)\n\n        def add_child(self, item):\n            if item not in self.children:\n                self.children[item] = Node(item, 0)\n                self.children[item].parent = self\n    tree = Tree()\n    for t in filtered_transactions:\n        tree.add_transaction(t)\n\n    def mine_tree(tree, items, patterns):\n        conditionals = tree.find_conditionals()\n        for (pattern, item, count) in conditionals:\n            new_pattern = list(set(pattern) | {item})\n            new_pattern.sort()\n            if freq[', '.join(new_pattern)] >= min_support:\n                patterns.append(new_pattern)\n            conditional_pattern_base = Counter()\n            for (base, base_item, count) in conditionals:\n                if base_item == item:\n                    conditional_pattern_base[tuple(sorted(base))] += count\n            if conditional_pattern_base:\n                sub_tree = Tree()\n                for (base, count) in conditional_pattern_base.items():\n                    sub_tree.add_transaction(list(base))\n                if sub_tree.header_table:\n                    mine_tree(sub_tree, [item], patterns)\n    patterns = []\n    mine_tree(tree, [], patterns)\n    for (item, count) in freq.items():\n        if count >= min_support:\n            patterns.append([item])\n    result = []\n    for pattern in patterns:\n        if sorted(pattern) not in result:\n            result.append(sorted(pattern))\n    return sorted(result, key=lambda x: (len(x), x))\ntransactions = [['a', 'b', 'c', 'd'], ['b', 'c', 'e'], ['a', 'b', 'd'], ['a', 'c', 'd'], ['b', 'c', 'e']]\nmin_support = 2"}
{"task_id": 70, "completion_id": 4, "solution": "from collections import Counter, defaultdict\nclass FPNode:\n\n    def __init__(self, item: str, count: int, parent):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.node_links = None\ndef build_fp_tree(transactions: list[list[str]], min_support: int):\n    \"\"\"Build the FP-tree from the transactions.\"\"\"\n    item_counts = Counter()\n    for transaction in transactions:\n        local_counts = Counter(transaction)\n        for (item, count) in local_counts.items():\n            item_counts[item] += count\n    frequent_items = {item for (item, count) in item_counts.items() if count >= min_support}\n    if not frequent_items:\n        return (None, None, None)\n    sorted_items = sorted(frequent_items, key=lambda x: item_counts[x], reverse=True)\n    item_index = {item: idx for (idx, item) in enumerate(sorted_items)}\n    filtered_transactions = []\n    for transaction in transactions:\n        filtered = [item for item in transaction if item in frequent_items]\n        if filtered:\n            filtered.sort(key=lambda x: item_index[x], reverse=True)\n            filtered_transactions.append(filtered)\n    root = FPNode(None, 1, None)\n    for transaction in filtered_transactions:\n        insert_transaction(root, transaction)\n    header_table = {}\n    for item in sorted_items:\n        header_table[item] = {'count': item_counts[item], 'node': None}\n    for item in sorted_items:\n        nodes = []\n        traverse_tree(root, item, nodes)\n        if nodes:\n            header_table[item]['node'] = nodes\n    return (root, header_table, item_counts)\ndef mine_patterns(header_table, min_support, frequent_itemsets):\n    sorted_items = sorted(header_table.keys())\n    for item in sorted_items:\n        patterns = [[item]]\n        conditional_patterns = get_conditional_patterns(header_table[item]['node'], item)\n        conditional_tree = build_conditional_tree(conditional_patterns, min_support)\n        if conditional_tree:\n            mine_conditional(conditional_tree[0], conditional_tree[1], patterns, [item], frequent_itemsets, min_support)\n    return frequent_itemsets\ndef get_conditional_patterns(nodes):\n    conditional_patterns = Counter()\n    for node in nodes:\n        prefix_path = []\n        ascend_tree(node, prefix_path)\n        if prefix_path:\n            key = tuple(prefix_path)\n            conditional_patterns[key] += node.count\n    return conditional_patterns\ndef build_conditional_tree(conditional_patterns: Counter, min_support: int):\n    items = set()\n    for itemset in conditional_patterns:\n        for item in itemset:\n            items.add(item)\n    frequent_items = {item for item in items if sum((count for (pat, count) in conditional_patterns.items() if item in pat)) >= min_support}\n    if not frequent_items:\n        return None\n    filtered_patterns = {}\n    for (itemset, count) in conditional_patterns.items():\n        filtered = [item for item in itemset if item in frequent_items]\n        if filtered:\n            filtered.sort(reverse=True)\n            if tuple(filtered) in filtered_patterns:\n                filtered_patterns[tuple(filtered)] += count\n            else:\n                filtered_patterns[tuple(filtered)] = count\n    root = FPNode(None, 1, None)\n    header_table = {}\n    for (transaction, count) in filtered_patterns.items():\n        for _ in range(count):\n            current = root\n            for item in transaction:\n                if item in current.children:\n                    current = current.children[item]\n                    current.count += 1\n                else:\n                    new_node = FPNode(item, 1, current)\n                    current.children[item] = new_node\n                    if item not in header_table:\n                        header_table[item] = [new_node]\n                    else:\n                        header_table[item].append(new_node)\n                    current = new_node\n    if not header_table:\n        return None\n    return (root, header_table)\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\"\"\"\n    if not transactions:\n        return []\n    (root, header_table, item_counts) = build_fp_tree(transactions, min_support)\n    if not header_table:\n        return []\n    frequent_itemsets = []\n    mine_patterns(header_table, min_support, frequent_itemsets)\n    for itemset in frequent_itemsets:\n        itemset.sort()\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\ntransactions = [['milk', 'bread', 'butter'], ['cake', 'bread', 'milk'], ['butter', 'beer'], ['bread', 'butter'], ['milk', 'butter']]\nmin_support = 2"}
{"task_id": 70, "completion_id": 5, "solution": "from collections import Counter, defaultdict\nfrom typing import List\nclass FPNode:\n\n    def __init__(self, name: str, count: int, parent):\n        self.name = name\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.next = None\n\n    def increment(self, amount: int):\n        self.count += amount\nclass FPTree:\n\n    def __init__(self):\n        self.root = FPNode('*', 1, None)\n        self.header_table = defaultdict(list)\n\n    def add_transaction(self, transaction: List[str], count: int=1):\n        node = self.root\n        for item in transaction:\n            if item in node.children:\n                node.children[item].increment(count)\n            else:\n                new_node = FPNode(item, count, node)\n                node.children[item] = new_node\n                self.header_table[item].append(new_node)\n            node = node.children[item]\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions:\n        return []\n    item_count = Counter()\n    for trans in transactions:\n        for item in trans:\n            item_count[item] += 1\n    freq_items = {item for (item, count) in item_count.items() if count >= min_support}\n    if not freq_items:\n        return []\n    freq_transactions = []\n    for trans in transactions:\n        filtered = [item for item in trans if item in freq_items]\n        filtered.sort()\n        if filtered:\n            freq_transactions.append(filtered)\n    fp_tree = FPTree()\n    for trans in freq_transactions:\n        fp_tree.add_transaction(trans)\n    freq_itemsets = []\n\n    def conditional_pattern_base(item: str) -> List[List[str]]:\n        \"\"\"Generate conditional pattern base for a given item.\"\"\"\n        pattern_base = []\n        nodes = fp_tree.header_table[item]\n        for node in nodes:\n            path = []\n            current = node\n            while current.name != '*' and current.parent is not None:\n                if current.parent.name != '*':\n                    path.append((current.parent.name, current.count))\n                current = current.parent\n            if path:\n                pattern_base.append(path)\n        return pattern_base\n\n    def mine_conditional_tree(item: str, freq_prefix: List[str]):\n        \"\"\"Recursively mine the conditional FP-tree for item.\"\"\"\n        pattern_base = conditional_pattern_base(item)\n        if not pattern_base:\n            return\n        conditional_items = Counter()\n        for (base, count) in pattern_base:\n            for (prefix, _) in base:\n                conditional_items[prefix] += count\n                if [prefix] not in freq_itemsets:\n                    freq_itemsets.append([prefix])\n        freq_cond = {i for (i, c) in conditional_items.items() if c >= min_support}\n        cond_trans = []\n        for (base, count) in pattern_base:\n            cond_trans.append([item for (item, _) in base + [(item, count)]])\n        freq_cond_sorted = sorted(freq_cond, key=lambda x: item_count[x], reverse=True)\n        for item in freq_cond_sorted:\n            new_trans = [t for t in cond_trans if item in [x[0] for x in t]]\n            new_trans = [[i for (i, _) in t if i != item] for t in new_trans]\n            freq_itemsets.append(sorted(freq_prefix + [item]))\n            mine_conditional_tree(item, freq_prefix + [item])\n    frequent_items_sorted = sorted(freq_items, key=lambda x: item_count[x], reverse=False)\n    for item in frequent_items_sorted:\n        freq_itemsets.append([item])\n        mine_conditional_tree(item, [item])\n    output = []\n    for itemset in freq_itemsets:\n        sorted_itemset = sorted(itemset)\n        if [itemset] not in output:\n            output.append(sorted_itemset)\n    output.sort(key=lambda x: (len(x), x))\n    return output\ntransactions = [['apple', 'beer', 'bread'], ['apple', 'banana', 'beer'], ['apple', 'beer', 'bread'], ['banana', 'bread'], ['beer', 'bread']]\nmin_support = 2"}
{"task_id": 70, "completion_id": 6, "solution": "from collections import Counter, defaultdict\nclass FPTreeNode:\n\n    def __init__(self, name=None, count=1, parent=None):\n        self.name = name\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.link = None\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\"\"\"\n    if not transactions:\n        return []\n    header_table = defaultdict(int)\n    for transaction in transactions:\n        for item in transaction:\n            header_table[item] += 1\n    header_table = {item: count for (item, count) in header_table.items() if count >= min_support}\n    if not header_table:\n        return []\n    header_table_sorted = dict(sorted(header_table.items(), key=lambda x: x[0]))\n    header_table_sorted_items = sorted(header_table.items(), key=lambda x: (-x[1], x[0]))\n    header_table = dict(header_table_sorted)\n    frequent_items = list(header_table_sorted.keys())\n\n    def build_fp_tree(data, min_support):\n        root = FPTreeNode()\n        node_links = {item: None for item in frequent_items}\n        for transaction in data:\n            filtered_transaction = [item for item in transaction if item in header_table]\n            filtered_transaction.sort(key=lambda x: (-header_table[x], x))\n            if not filtered_transaction:\n                continue\n            add_to_tree(root, node_links, filtered_transaction)\n        return (root, node_links)\n\n    def add_to_tree(root, node_links, transaction):\n        current = root\n        for item in transaction:\n            next_node = current.children.get(item)\n            if next_node:\n                next_node.count += 1\n            else:\n                next_node = FPTreeNode(name=item, parent=current)\n                current.children[item] = next_node\n                update_node_links(node_links, item, next_node)\n            current = next_node\n\n    def update_node_links(node_links, item, node):\n        if node_links[item] is None:\n            node_links[item] = node\n        else:\n            temp = node_links[item]\n            while temp.link is not None:\n                temp = temp.link\n            temp.link = node\n    (fp_tree, node_links) = build_fp_tree(transactions, min_support)\n    frequent_itemsets = []\n\n    def mine_tree(node_links, min_support, prefix, frequent_set):\n        for (item, node) in sorted(node_links.items(), key=lambda x: x[0]):\n            new_prefix = prefix.copy()\n            new_prefix.add(item)\n            frequent_set.append(sorted(list(new_prefix)))\n            conditional_pattern_base = []\n            while node is not None:\n                path = []\n                current = node\n                while current.parent is not None:\n                    path.append((current.parent.name, current.count))\n                    current = current.parent\n                cond_path = []\n                for (item_name, count) in reversed(path):\n                    if item_name in header_table:\n                        cond_path.append((item_name, count))\n                conditional_pattern_base.append((cond_path, node.count))\n                node = node.link\n            if conditional_pattern_base:\n                (cond_tree, cond_node_links) = build_cond_tree(conditional_pattern_base, min_support)\n                if cond_tree and cond_node_links:\n                    mine_tree(cond_node_links, min_support, new_prefix, frequent_set)\n\n    def build_cond_tree(pattern_base, min_support):\n        freq_table = Counter()\n        all_paths = []\n        for (path, count) in pattern_base:\n            freq_table.update((item for (item, _) in path))\n            all_paths.append((path, count))\n        cond_freq_items = [item for (item, freq) in freq_table.items() if freq >= min_support]\n        if not cond_freq_items:\n            return (None, None)\n        cond_data = []\n        for (path, count) in all_paths:\n            filtered_path = [item for (item, _) in path if item in cond_freq_items]\n            if not filtered_path:\n                continue\n            if len(filtered_path) == 1:\n                cond_data.append([filtered_path[0]] * count)\n            else:\n                cond_data.extend([filtered_path] * count)\n        cond_freq_table = Counter()\n        for path in cond_data:\n            for item in path:\n                cond_freq_table[item] += 1\n        cond_freq_items = [item for (item, freq) in cond_freq_table.items() if freq >= min_support]\n        if not cond_freq_items:\n            return (None, None)\n        (cond_tree, cond_node_links) = build_fp_tree(cond_data, min_support)\n        return (cond_tree, cond_node_links)\n    mine_tree(node_links, min_support, set(), frequent_itemsets)\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 70, "completion_id": 7, "solution": "from collections import Counter, defaultdict\nfrom typing import List\nclass FPTreeNode:\n\n    def __init__(self, name: str, count: int, parent):\n        self.name = name\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.node_links = None\n\n    def increment(self, count):\n        self.count += count\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\"\"\"\n    if not transactions:\n        return []\n    header_table = Counter()\n    for transaction in transactions:\n        header_table.update(transaction)\n    header_table = {item: count for (item, count) in header_table.items() if count >= min_support}\n    if not header_table:\n        return []\n    sorted_items = sorted(header_table.keys(), key=lambda k: (-header_table[k], k))\n    processed_transactions = []\n    for transaction in transactions:\n        filtered = [item for item in transaction if header_table.get(item, 0) >= min_support]\n        if filtered:\n            processed_transactions.append(sorted(filtered, key=lambda x: (-header_table[x], x)))\n    root = FPTreeNode('Null', 1, None)\n    buildFPtree(root, processed_transactions, header_table)\n    freq_itemsets = []\n    for item in sorted(header_table.keys()):\n        cond_patterns = conditional_pattern_base(item, header_table, root)\n        if cond_patterns:\n            freq_itemsets.extend([sorted([item] + pattern) for pattern in cond_patterns])\n    mine_tree(header_table, root, min_support, [item for item in sorted(header_table.keys())], freq_itemsets)\n    frequent_itemsets = []\n    for itemset in freq_itemsets:\n        frequent_itemsets.append(sorted(itemset))\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\ndef conditional_pattern_base(item: str, header_table: dict, root: FPTreeNode) -> List[List[str]]:\n    \"\"\"Generate the conditional pattern base for a given item.\"\"\"\n    conditional_pattern_base = []\n    node = header_table[item]\n    while node:\n        prefix_path = []\n        collect_prefix_path(node, prefix_path)\n        if len(prefix_path) > 1:\n            conditional_pattern_base.append(prefix_path[1:])\n        node = node.node_links\n    return conditional_pattern_base"}
{"task_id": 70, "completion_id": 8, "solution": "from collections import Counter, defaultdict\nfrom itertools import permutations\nclass FPTreeNode:\n\n    def __init__(self, name: str=None, count: int=0, parent=None):\n        self.name = name\n        self.count = count\n        self.parent = parent\n        self.children = dict()\n        self.node_link = None\n\n    def increment(self, amount: int):\n        self.count += amount\ndef construct_fp_tree(transactions, min_support, header_table=None):\n    if header_table is None:\n        item_counter = Counter()\n        for transaction in transactions:\n            item_counter.update(frozenset(transaction))\n        header_table = dict(((item, count) for (item, count) in item_counter.items() if count >= min_support))\n        if not header_table:\n            return (None, None)\n        sorted_items = sorted(header_table.keys(), key=lambda x: x)\n    root = FPTreeNode()\n    temp_header_table = {item: [0, None] for item in header_table}\n    for transaction in transactions:\n        t = [item for item in transaction if item in header_table]\n        if t:\n            t.sort(key=lambda x: x)\n            update_tree(t, root, temp_header_table)\n    header_table = temp_header_table\n    return (root, header_table)\ndef update_tree(items, node, header_table):\n    if not items:\n        return\n    item = items[0]\n    if item in node.children:\n        node.children[item].increment(1)\n    else:\n        node.children[item] = FPTreeNode(item, 1, node)\n        if header_table[item][1] is None:\n            header_table[item][1] = node.children[item]\n        else:\n            update_header(header_table[item][1], node.children[item])\n    update_tree(items[1:], node.children[item], header_table)\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\"\"\"\n    if not transactions:\n        return []\n    item_counter = Counter()\n    for transaction in transactions:\n        item_counter.update(frozenset(transaction))\n    frequent_items = {item: count for (item, count) in item_counter.items() if count >= min_support}\n    if not frequent_items:\n        return []\n    (root, header_table) = construct_fp_tree(transactions, min_support)\n    if not root or not header_table:\n        return []\n    freq_itemsets = []\n    mine_tree(header_table, set(), freq_itemsets, min_support, transactions)\n    freq_itemsets.sort(key=lambda x: (len(x), x))\n    return freq_itemsets\ntransactions = [['milk', 'bread', 'butter'], ['bread', 'butter'], ['butter', 'milk'], ['bread', 'milk'], ['bread', 'butter', 'milk', 'beer']]\nmin_support = 2"}
{"task_id": 70, "completion_id": 9, "solution": "from collections import Counter, defaultdict\nclass FPNODE:\n\n    def __init__(self, item, count, parent):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.link = None\n\n    def inc(self, count):\n        self.count += count\ndef build_path(node):\n    \"\"\"Generate the path to the root for a given node.\"\"\"\n    path = []\n    while node.item is not None:\n        path.append((node.item, node.count))\n        node = node.parent\n    path.reverse()\n    return path[:-1]\ndef conditional_pattern_base(head_link, item_counts):\n    \"\"\"Build conditional pattern base from head node links.\"\"\"\n    cb = []\n    current = head_link\n    while current:\n        path = build_path(current)\n        conditional_transaction = [item for (item, cnt) in path]\n        cb.append(conditional_transaction * current.count)\n        current = current.link\n    return cb\ndef conditional_trees(cpbase, min_support, item_counts):\n    \"\"\"Recursively build conditional FP-Tree and mine frequent patterns.\"\"\"\n    freq = Counter()\n    conditional = defaultdict(list)\n    for transaction in cpbase:\n        for item in transaction:\n            freq[item] += 1\n    for (item, count) in freq.items():\n        if count >= min_support and item in item_counts and (item_counts[item] >= min_support):\n            item_conditional_patterns = defaultdict(int)\n            for trans in cpbase:\n                if item in trans:\n                    pattern = [x for x in trans if x != item]\n                    if pattern:\n                        pattern.sort()\n                        pattern_str = tuple(pattern)\n                        item_conditional_patterns[pattern_str] += 1\n            conditional[item] = list(item_conditional_patterns.items())\n    patterns = []\n    for (item, patterns_list) in conditional.items():\n        for (pat, sup) in patterns_list:\n            if sup >= min_support:\n                pattern = list(pat)\n                pattern.append(item)\n                pattern.sort()\n                patterns.append((pattern, sup))\n                if len(pat) > 0:\n                    cbase_for_item = [tuple((p for x in cpbase if set(x) == set(pat) and item not in x))]\n                    if cbase_for_item:\n                        item_count_copy = item_counts.copy()\n                        new_cpbase = [list(x) for y in cbase_for_item for x in [[x[0]] * sup for x in [(list(y), sup) for y in cbase_for_item if set(y) == set(x)]]]\n                        (cpatterns, _) = conditional_trees(new_cpbase, min_support, item_counts)\n                        for cp in cpatterns:\n                            if cp[0] not in patterns:\n                                patterns.append(cp)\n    return (patterns, conditional)\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions:\n        return []\n    item_counts = Counter()\n    for transaction in transactions:\n        item_counts.update(transaction)\n    frequent_items = set((item for (item, count) in item_counts.items() if count >= min_support))\n    if not frequent_items:\n        return []\n    filtered_transactions = []\n    for transaction in transactions:\n        filtered_transaction = sorted([item for item in transaction if item in frequent_items], key=lambda x: item_counts[x], reverse=True)\n        if filtered_transaction:\n            filtered_transactions.append(filtered_transaction)\n    root = FPNODE(None, 0, None)\n    head_table = defaultdict(lambda : None)\n    build_fptree(filtered_transactions, min_support, item_counts, root)\n    patterns = []\n    for (item, head) in head_table.items():\n        cpbase = conditional_pattern_base(head, item_counts)\n        (cond_patterns, _) = conditional_trees(cpbase, min_support, item_counts)\n        for (pattern, count) in cond_patterns:\n            if count >= min_support:\n                patterns.append(sorted(pattern))\n        patterns.append([item])\n    patterns = [list(set(x)) for x in patterns]\n    unique_patterns = [list(x) for x in set((tuple(x) for x in patterns))]\n\n    def is_subpattern(p1, p2):\n        return all((x in p2 for x in p1))\n    final_patterns = []\n    for pattern in unique_patterns:\n        if not any((is_subpattern(pattern, p) for p in final_patterns if tuple(pattern) != tuple(p))):\n            final_patterns.append(sorted(pattern))\n    final_patterns.sort(key=lambda x: (len(x), x))\n    return final_patterns\ntransactions = [['milk', 'bread', 'butter'], ['milk', 'butter'], ['bread', 'butter'], ['milk', 'bread'], ['butter']]\nmin_support = 2"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef knn_predict(X_train: List[List[float]], y_train: List[int], X_test: List[List[float]], k: int) -> List[int]:\n    \"\"\"\n    Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    n_train = len(X_train)\n    n_test = len(X_test)\n    if not isinstance(k, int) or k < 1 or k > n_train:\n        return -1\n    predictions = []\n    for test_sample in X_test:\n        distances = [(np.sum((np.array(train) - np.array(test_sample)) ** 2), label) for (train, label) in zip(X_train, y_train)]\n        distances.sort()\n        k_nearest_labels = [label for (dist, label) in distances[:k]]\n        from collections import Counter\n        label_counts = Counter(k_nearest_labels)\n        most_common = label_counts.most_common(1)[0][1]\n        tied_labels = [label for (label, count) in label_counts.items() if count == most_common]\n        predicted_label = min(tied_labels)\n        predictions.append(predicted_label)\n    return predictions\nX_train = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0]]\ny_train = [0, 0, 1]\nX_test = [[2.5, 3.5]]\nk = 3"}
{"task_id": 75, "completion_id": 1, "solution": "import numpy as np\nfrom typing import List\ndef knn_predict(X_train: List[List[float]], y_train: List[int], X_test: List[List[float]], k: int) -> List[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    n_train = len(X_train)\n    n_test = len(X_test)\n    if not isinstance(k, int) or k <= 0 or k > n_train:\n        return [-1]\n    predictions = []\n    for x in X_test:\n        distances = [sum(((x_i - x_j) ** 2 for (x_i, x_j) in zip(x, train_x))) for train_x in X_train]\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = [y_train[i] for i in nearest_indices]\n        vote_counts = {}\n        for label in nearest_labels:\n            vote_counts[label] = vote_counts.get(label, 0) + 1\n        max_votes = max(vote_counts.values())\n        tied_labels = [label for (label, votes) in vote_counts.items() if votes == max_votes]\n        predicted_label = min(tied_labels)\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 75, "completion_id": 2, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    n_train = len(X_train)\n    if not isinstance(k, int) or k <= 0 or k > n_train:\n        return -1\n    predictions = []\n    for test_point in X_test:\n        dists = [sum(((x_train_i - x_test_i) ** 2 for (x_train_i, x_test_i) in zip(x_train, test_point))) for x_train in X_train]\n        nearest_indices = np.argsort(dists)[:k]\n        k_labels = [y_train[i] for i in nearest_indices]\n        label_counts = {}\n        for label in k_labels:\n            label_counts[label] = label_counts.get(label, 0) + 1\n        max_votes = max(label_counts.values())\n        candidates = [label for (label, votes) in label_counts.items() if votes == max_votes]\n        predictions.append(min(candidates))\n    return predictions"}
{"task_id": 75, "completion_id": 3, "solution": "import numpy as np\nfrom typing import List\ndef knn_predict(X_train: List[List[float]], y_train: List[int], X_test: List[List[float]], k: int) -> List[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    n_train = len(X_train)\n    if not isinstance(k, int) or k < 1 or k > n_train:\n        return [-1]\n    n_test = len(X_test)\n    predictions = []\n    for test_sample in X_test:\n        distances = [sum(((test_sample[i] - train_sample[i]) ** 2 for i in range(len(test_sample)))) for train_sample in X_train]\n        neighbor_indices = np.argsort(distances)\n        k_nearest_labels = [y_train[i] for i in neighbor_indices[:k]]\n        from collections import Counter\n        label_counts = Counter(k_nearest_labels)\n        most_common = label_counts.most_common()\n        max_votes = most_common[0][1]\n        tied_labels = [label for (label, count) in most_common if count == max_votes]\n        predicted_label = min(tied_labels)\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 75, "completion_id": 4, "solution": "import numpy as np\nfrom typing import list\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not isinstance(k, int) or k <= 0 or k > len(X_train):\n        return -1\n    predictions = []\n    for x_test in X_test:\n        distances = [sum(((x_train_point[i] - x_test[i]) ** 2 for i in range(len(x_test)))) for x_train_point in X_train]\n        k_indices = np.argsort(distances)[:k]\n        k_labels = [y_train[i] for i in k_indices]\n        from collections import Counter\n        label_counts = Counter(k_labels)\n        sorted_labels = sorted(label_counts.items(), key=lambda item: (-item[1], item[0]))\n        predicted_label = sorted_labels[0][0]\n        predictions.append(predicted_label)\n    return predictions\nX_train = [[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0]]\ny_train = [0, 0, 1, 1]\nX_test = [[1.0, 1.8], [3.0, 4.0]]"}
{"task_id": 75, "completion_id": 5, "solution": "import numpy as np\nfrom typing import List\ndef knn_predict(X_train: List[List[float]], y_train: List[int], X_test: List[List[float]], k: int) -> List[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    n_samples_train = len(X_train)\n    n_samples_test = len(X_test)\n    if not isinstance(k, int) or k <= 0 or k > n_samples_train:\n        return [-1]\n    predictions = []\n    for test_sample in X_test:\n        distances = [(np.sum((np.array(x) - np.array(test_sample)) ** 2), y) for (x, y) in zip(X_train, y_train)]\n        distances.sort()\n        k_nearest_labels = [label for (_, label) in distances[:k]]\n        from collections import defaultdict\n        vote_counts = defaultdict(int)\n        for label in k_nearest_labels:\n            vote_counts[label] += 1\n        best_label = min(vote_counts.items(), key=lambda item: (-item[1], item[0]))[0]\n        predictions.append(best_label)\n    return predictions"}
{"task_id": 75, "completion_id": 6, "solution": "import numpy as np\nfrom typing import List\ndef knn_predict(X_train: List[List[float]], y_train: List[int], X_test: List[List[float]], k: int) -> List[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : List[List[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : List[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : List[List[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    List[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    n_train = len(X_train)\n    if not isinstance(k, int) or k < 1 or k > n_train:\n        return [-1]\n    n_test = len(X_test)\n    predictions = []\n    for test_sample in X_test:\n        distances = [sum(((x_tr - x_te) ** 2 for (x_tr, x_te) in zip(X_train[i], test_sample))) for i in range(n_train)]\n        k_indices = np.argpartition(distances, k - 1)[:k]\n        k_classes = [y_train[i] for i in k_indices]\n        class_counts = {}\n        for cls in k_classes:\n            if cls in class_counts:\n                class_counts[cls] += 1\n            else:\n                class_counts[cls] = 1\n        max_votes = max(class_counts.values())\n        candidates = [cls for (cls, count) in class_counts.items() if count == max_votes]\n        predicted_class = min(candidates)\n        predictions.append(predicted_class)\n    return predictions"}
{"task_id": 75, "completion_id": 7, "solution": "import numpy as np\nfrom typing import List\ndef knn_predict(X_train: List[List[float]], y_train: List[int], X_test: List[List[float]], k: int) -> List[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    n_train = len(X_train)\n    if not isinstance(k, int) or k < 1 or k > n_train:\n        return [-1]\n\n    def euclidean_squared(x1: List[float], x2: List[float]) -> float:\n        \"\"\"Compute squared Euclidean distance between two vectors.\"\"\"\n        return sum(((a - b) ** 2 for (a, b) in zip(x1, x2)))\n    predictions = []\n    for x in X_test:\n        distances = []\n        for (i, x_train) in enumerate(X_train):\n            dist = euclidean_squared(x, x_train)\n            distances.append((dist, y_train[i]))\n        distances.sort()\n        k_nearest = [y for (_, y) in distances[:k]]\n        from collections import Counter\n        vote_counts = Counter(k_nearest)\n        max_votes = max(vote_counts.values())\n        candidates = [cls for (cls, count) in vote_counts.items() if count == max_votes]\n        predictions.append(min(candidates))\n    return predictions"}
{"task_id": 75, "completion_id": 8, "solution": "import numpy as np\nfrom typing import List\ndef knn_predict(X_train: List[List[float]], y_train: List[int], X_test: List[List[float]], k: int) -> List[int]:\n    \"\"\"\n    Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n    \n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    n_train = len(X_train)\n    if not (isinstance(k, int) and 1 <= k <= n_train):\n        return -1\n    predictions = []\n    for test_point in X_test:\n        distances = [sum(((x_tr[i] - test_point[i]) ** 2 for i in range(len(test_point)))) for x_tr in X_train]\n        neighbors = list(zip(distances, y_train))\n        neighbors.sort()\n        k_neighbors = neighbors[:k]\n        votes = [label for (dist, label) in k_neighbors]\n        vote_count = {}\n        for label in votes:\n            vote_count[label] = vote_count.get(label, 0) + 1\n        max_votes = max(vote_count.values())\n        candidates = [label for (label, count) in vote_count.items() if count == max_votes]\n        predicted_label = min(candidates)\n        predictions.append(predicted_label)\n    return predictions\nX_train = [[1.0, 2.0], [2.0, 3.0], [3.0, 3.0], [6.0, 6.0]]\ny_train = [0, 0, 1, 1]\nX_test = [[2.5, 2.5], [4.5, 4.5]]\nk = 3"}
{"task_id": 75, "completion_id": 9, "solution": "def knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not isinstance(k, int) or k < 1 or k > len(X_train):\n        return -1\n    predictions = []\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    n_test_samples = X_test.shape[0]\n    for i in range(n_test_samples):\n        test_point = X_test[i]\n        distances = np.sum((X_train - test_point) ** 2, axis=1)\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = y_train[nearest_indices]\n        vote_counts = {}\n        for label in nearest_labels:\n            if label in vote_counts:\n                vote_counts[label] += 1\n            else:\n                vote_counts[label] = 1\n        max_votes = -1\n        predicted_label = None\n        for (label, count) in vote_counts.items():\n            if count > max_votes or (count == max_votes and label < predicted_label):\n                max_votes = count\n                predicted_label = label\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    y_pred_safe = y_pred + epsilon\n    log_probs = np.log(y_pred_safe)\n    loss = -np.sum(y * log_probs)\n    return round(loss, 4)"}
{"task_id": 76, "completion_id": 1, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(float(loss), 4)"}
{"task_id": 76, "completion_id": 2, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | np.ndarray, y_pred: list | np.ndarray) -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y, dtype=np.float64)\n    y_pred = np.array(y_pred, dtype=np.float64)\n    eps = np.finfo(np.float64).eps\n    y_pred_safe = y_pred + eps\n    log_probs = np.log(y_pred_safe)\n    cross_entropy = -np.sum(y * log_probs)\n    return float(np.round(cross_entropy, 4))\ny_pred = [[0.9, 0.05, 0.05], [0.1, 0.8, 0.1], [0.1, 0.2, 0.7]]"}
{"task_id": 76, "completion_id": 3, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | np.ndarray, y_pred: list | np.ndarray) -> float:\n    \"\"\"\n    Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    log_pred = np.log(y_pred + epsilon)\n    loss = -np.sum(y * log_pred)\n    return round(float(loss), 4)\ny = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\ny_pred = [[0.9, 0.05, 0.05], [0.1, 0.8, 0.1], [0.1, 0.1, 0.8]]\nloss = cross_entropy_loss(y, y_pred)"}
{"task_id": 76, "completion_id": 4, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = y_pred + epsilon\n    loss = -np.sum(y * np.log(y_pred_clipped))\n    return float(np.round(loss, 4))"}
{"task_id": 76, "completion_id": 5, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    y_pred_with_epsilon = y_pred + epsilon\n    log_y_pred = np.log(y_pred_with_epsilon)\n    loss = -np.sum(y * log_y_pred)\n    return round(loss, 4)"}
{"task_id": 76, "completion_id": 6, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    loss = -np.sum(y * np.log(y_pred_clipped))\n    return float(np.round(loss, 4))\ny_true = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\ny_pred = [[0.7, 0.2, 0.1], [0.1, 0.8, 0.1], [0.2, 0.3, 0.5]]\nloss = cross_entropy_loss(y_true, y_pred)"}
{"task_id": 76, "completion_id": 7, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | np.ndarray, y_pred: list | np.ndarray) -> float:\n    \"\"\"\n    Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(np.float32).eps\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return float(np.round(loss, 4))"}
{"task_id": 76, "completion_id": 8, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    y_pred = y_pred + epsilon\n    loss = -np.sum(y * np.log(y_pred))\n    return float(np.round(loss, 4))"}
{"task_id": 76, "completion_id": 9, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    loss = -np.sum(y * np.log(y_pred_clipped))\n    return round(loss, 4)"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimal places and converted to a \n        plain Python list. The shape is (1, m).\n    \"\"\"\n    A = X\n    L = len([key for key in parameters if key.startswith('W')])\n    caches = []\n    for l in range(1, L):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A) + b\n        A = np.maximum(0, Z)\n        caches.append((A, Z, W))\n    WL = parameters[f'W{L}']\n    bL = parameters[f'b{L}']\n    ZL = np.dot(WL, A) + bL\n    AL = 1 / (1 + np.exp(-ZL))\n    caches.append((AL, ZL, WL))\n    AL_list = AL.round(4).tolist()\n    return AL_list"}
{"task_id": 77, "completion_id": 1, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimal places and converted to a\n        plain Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len([k for k in parameters if k.startswith('W')])\n    for l in range(1, L):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A) + b\n        A = np.maximum(0, Z)\n        caches.append((A, W, b, Z))\n    W = parameters[f'W{L}']\n    b = parameters[f'b{L}']\n    Z = np.dot(W, A) + b\n    A = 1 / (1 + np.exp(-Z))\n    caches.append((A, W, b, Z))\n    AL = np.around(A, decimals=4).tolist()\n    return AL"}
{"task_id": 77, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid(Z):\n    A = 1 / (1 + np.exp(-Z))\n    return A\ndef relu(Z):\n    A = np.maximum(0, Z)\n    return A\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimal places and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A) + b\n        A = relu(Z)\n        caches.append((A, W, b, Z))\n    W = parameters[f'W{L}']\n    b = parameters[f'b{L}']\n    Z = np.dot(W, A) + b\n    AL = sigmoid(Z)\n    caches.append((AL, W, b, Z))\n    return np.round(AL, 4).tolist()\nX = np.random.rand(3, 2)\nparameters = {'W1': np.random.rand(4, 3), 'b1': np.random.rand(4, 1), 'W2': np.random.rand(1, 4), 'b2': np.random.rand(1, 1)}"}
{"task_id": 77, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute the sigmoid of Z.\n    \n    Parameters\n    ----------\n    Z : np.ndarray\n        Input array of shape (n, m).\n\n    Returns\n    -------\n    np.ndarray\n        Output after applying the sigmoid function.\n    \"\"\"\n    A = 1 / (1 + np.exp(-Z))\n    return A\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute the ReLU of Z.\n    \n    Parameters\n    ----------\n    Z : np.ndarray\n        Input array of shape (n, m).\n\n    Returns\n    -------\n    np.ndarray\n        Output after applying the ReLU function.\n    \"\"\"\n    A = np.maximum(0, Z)\n    return A\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimal places and converted to a list.\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A) + b\n        A = relu(Z)\n        caches.append((A, W, b, Z))\n    W = parameters[f'W{L}']\n    b = parameters[f'b{L}']\n    Z = np.dot(W, A) + b\n    A = sigmoid(Z)\n    caches.append((A, W, b, Z))\n    AL = np.round(A, 4).tolist()\n    return AL"}
{"task_id": 77, "completion_id": 4, "solution": "import numpy as np\ndef relu(Z):\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\ndef sigmoid(Z):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimal places and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    A = X\n    L = len([key for key in parameters if key.startswith('W')])\n    caches = []\n    for l in range(1, L):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A) + b\n        A = relu(Z)\n        caches.append((A, W, b, Z))\n    W = parameters[f'W{L}']\n    b = parameters[f'b{L}']\n    Z = np.dot(W, A) + b\n    A = sigmoid(Z)\n    caches.append((A, W, b, Z))\n    AL = A.round(4).tolist()\n    return AL"}
{"task_id": 77, "completion_id": 5, "solution": "import numpy as np\ndef relu(Z):\n    \"\"\"ReLu activation function.\n\n    Parameters\n    ----------\n    Z : np.ndarray\n        Input of shape (n, m)\n\n    Returns\n    -------\n    A : np.ndarray\n        Output of ReLu, same shape as Z.\n    \"\"\"\n    return np.maximum(0, Z)\ndef sigmoid(Z):\n    \"\"\"Sigmoid activation function.\n\n    Parameters\n    ----------\n    Z : np.ndarray\n        Input of shape (n, m)\n\n    Returns\n    -------\n    A : np.ndarray\n        Output of sigmoid, same shape as Z.\n    \"\"\"\n    return 1 / (1 + np.exp(-Z))\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimal places and converted to a regular\n        Python list. The shape is (1, m).\n    \"\"\"\n    A = X\n    L = len(parameters) // 2\n    caches = []\n    for l in range(1, L):\n        Wl = parameters[f'W{l}']\n        bl = parameters[f'b{l}']\n        Zl = np.dot(Wl, A) + bl\n        Al = relu(Zl)\n        caches.append((A, Wl, bl, Zl))\n        A = Al\n    WL = parameters[f'W{L}']\n    bL = parameters[f'b{L}']\n    ZL = np.dot(WL, A) + bL\n    AL = sigmoid(ZL)\n    caches.append((A, WL, bL, ZL))\n    return (AL.round(4).tolist(), caches)\nparameters = {'W1': np.array([[1, 2], [3, 4]]), 'b1': np.array([[1], [1]]), 'W2': np.array([[1, 1]]), 'b2': np.array([[0.5]])}\nX = np.array([[1, 2], [3, 4]])"}
{"task_id": 77, "completion_id": 6, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    A_prev = X\n    caches = []\n    L = len([k for k in parameters if k.startswith('W')])\n    for l in range(1, L):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A_prev) + b\n        A = np.maximum(0, Z)\n        caches.append((A_prev, W, b, Z))\n        A_prev = A\n    W = parameters[f'W{L}']\n    b = parameters[f'b{L}']\n    Z = np.dot(W, A_prev) + b\n    A = 1 / (1 + np.exp(-Z))\n    caches.append((A_prev, W, b, Z))\n    AL = A.round(4).tolist()\n    return AL"}
{"task_id": 77, "completion_id": 7, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimal places and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A) + b\n        A = np.maximum(0, Z)\n        caches.append((A, W, b, Z))\n    W = parameters[f'W{L}']\n    b = parameters[f'b{L}']\n    Z = np.dot(W, A) + b\n    A = 1 / (1 + np.exp(-Z))\n    caches.append((A, W, b, Z))\n    AL = np.around(A, decimals=4).tolist()\n    return (AL, caches)"}
{"task_id": 77, "completion_id": 8, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimal places and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len([key for key in parameters if key.startswith('W')])\n    for l in range(1, L):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A) + b\n        A = np.maximum(0, Z)\n        caches.append((A, W, b, Z))\n    W = parameters[f'W{L}']\n    b = parameters[f'b{L}']\n    Z = np.dot(W, A) + b\n    A = 1 / (1 + np.exp(-Z))\n    caches.append((A, W, b, Z))\n    AL = np.round(A, 4).tolist()\n    return AL"}
{"task_id": 77, "completion_id": 9, "solution": "import numpy as np\ndef relu(Z):\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\ndef sigmoid(Z):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU...ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimal places and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A) + b\n        A = relu(Z)\n        caches.append((A, W, b, Z))\n    W = parameters[f'W{L}']\n    b = parameters[f'b{L}']\n    Z = np.dot(W, A) + b\n    A = sigmoid(Z)\n    caches.append((A, W, b, Z))\n    AL = (A * 10000).round() / 10000\n    return AL.tolist()\nparameters = {'W1': np.array([[1.0, 2.0], [3.0, 4.0]]), 'b1': np.array([[0.1], [0.2]]), 'W2': np.array([[5.0, 6.0]]), 'b2': np.array([[0.3]])}\nX = np.array([[1.0, 2.0], [3.0, 4.0]])"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    A2 = A2.reshape(-1)\n    Y = Y.reshape(-1)\n    if A2.shape != Y.shape:\n        raise ValueError('A2 and Y must have the same shape.')\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    m = Y.shape[0]\n    cost = -1.0 / m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return round(float(cost), 6)"}
{"task_id": 81, "completion_id": 1, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    A2 = np.asarray(A2).flatten()\n    Y = np.asarray(Y).flatten()\n    if A2.shape != Y.shape:\n        raise ValueError('A2 and Y must have the same shape.')\n    m = Y.shape[0]\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    cost = -np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped)) / m\n    return round(float(cost), 6)"}
{"task_id": 81, "completion_id": 2, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    m = Y.shape[0]\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    cost = -1 / m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return round(float(cost), 6)"}
{"task_id": 81, "completion_id": 3, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    m = Y.shape[0]\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    cost = -(1 / m) * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return round(float(cost), 6)"}
{"task_id": 81, "completion_id": 4, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    m = Y.shape[0]\n    cost = -np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped)) / m\n    return round(float(cost), 6)\nA2 = np.array([[0.9, 0.1, 0.8, 0.2]])\nY = np.array([[1, 0, 1, 0]])\ncost = compute_cost(A2, Y)"}
{"task_id": 81, "completion_id": 5, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    A2 = np.array(A2).ravel()\n    Y = np.array(Y).ravel()\n    m = Y.shape[0]\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    cost = -(1 / m) * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return round(float(cost), 6)\nA2 = np.array([0.9, 0.5, 0.2])\nY = np.array([1, 0, 1])"}
{"task_id": 81, "completion_id": 6, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    m = Y.shape[0]\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    cost = -1 / m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return round(float(cost), 6)\nA2 = np.array([0.9, 0.1, 0.3])\nY = np.array([1, 0, 0])\ncost = compute_cost(A2, Y)"}
{"task_id": 81, "completion_id": 7, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    m = Y.shape[0]\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    cost = -np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped)) / m\n    return round(float(cost), 6)\nA2 = np.array([0.9, 0.1, 0.8, 0.4])\nY = np.array([1, 0, 1, 1])"}
{"task_id": 81, "completion_id": 8, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    m = Y.shape[0]\n    cost = -(1 / m) * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return round(float(cost), 6)"}
{"task_id": 81, "completion_id": 9, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    m = Y.shape[0]\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    cost = -1.0 / m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return round(float(cost), 6)\nA2 = np.array([0.9, 0.1, 0.8])\nY = np.array([1, 0, 1])"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    epsilon = float(epsilon)\n    max_index = 0\n    max_q = -np.inf\n    for i in range(n):\n        if Q[i] > max_q:\n            max_q = Q[i]\n            max_index = i\n    base_prob = epsilon / n\n    greedy_prob = 1.0 - epsilon + base_prob\n    probs = [base_prob] * n\n    probs[max_index] = greedy_prob\n    probs = [round(p, 4) for p in probs]\n    assert abs(sum(probs) - 1.0) <= 1e-12, 'Probabilities do not sum to 1.'\n    return probs\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 1, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | np.ndarray, epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.asarray(Q)\n    n = len(Q)\n    a_star = np.argmax(Q)\n    base = epsilon / n\n    probs = np.full(n, base, dtype=np.float64)\n    probs[a_star] = 1 - epsilon + base\n    probs = np.round(probs, 4)\n    assert abs(np.sum(probs) - 1.0) < 1e-12, 'Probabilities do not sum to 1 within tolerance.'\n    return probs.tolist()"}
{"task_id": 82, "completion_id": 2, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.asarray(Q)\n    n = Q.shape[0]\n    a_star = np.argmax(Q)\n    base_prob = epsilon / n\n    probs = np.full(n, base_prob, dtype=float)\n    probs[a_star] = 1 - epsilon + base_prob\n    probs = np.round(probs, 4)\n    sum_error = np.sum(probs) - 1.0\n    if abs(sum_error) > 1e-12:\n        raise ValueError(f'Probabilities sum to {np.sum(probs):.18f}, but should be 1.0 within 1e-12')\n    return probs.tolist()\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 3, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_index = np.argmax(Q)\n    base_prob = epsilon / n\n    probs = np.full(n, base_prob)\n    probs[greedy_index] += 1 - epsilon\n    probs = np.round(probs, 4)\n    probs = probs / probs.sum()\n    probs = np.round(probs, 4)\n    return probs.tolist()"}
{"task_id": 82, "completion_id": 4, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | np.ndarray, epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_index = np.argmax(Q)\n    base = epsilon / n\n    probabilities = np.full(n, base, dtype=float)\n    probabilities[greedy_index] = 1 - epsilon + base\n    probabilities = np.round(probabilities, 4)\n    probabilities /= probabilities.sum()\n    probabilities = np.round(probabilities, 4)\n    return probabilities.tolist()"}
{"task_id": 82, "completion_id": 5, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_index = np.nanargmax(Q)\n    base = epsilon / n\n    greedy_prob = 1.0 - epsilon + base\n    probs = np.full(n, base, dtype=float)\n    probs[greedy_index] = greedy_prob\n    probs = probs / probs.sum()\n    return [round(p, 4) for p in probs]\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 6, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = Q.size\n    a_star = np.argmax(Q)\n    base_prob = epsilon / n\n    probs = np.full(n, base_prob)\n    probs[a_star] = 1 - epsilon + base_prob\n    probs_rounded = np.round(probs, 4).tolist()\n    assert abs(sum(probs_rounded) - 1.0) <= 1e-12, f'Sum of probabilities is {sum(probs_rounded)}'\n    return probs_rounded"}
{"task_id": 82, "completion_id": 7, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(Q, np.ndarray):\n        Q = np.array(Q)\n    n = Q.shape[0]\n    a_star = np.argmax(Q)\n    base = epsilon / n\n    probs = np.full_like(Q, base, dtype=float)\n    probs[a_star] = 1 - epsilon + base\n    probs = np.round(probs, 4)\n    if not np.isclose(np.sum(probs), 1.0, atol=1e-12):\n        raise ValueError('Probabilities do not sum to 1 within acceptable tolerance.')\n    return probs.tolist()"}
{"task_id": 82, "completion_id": 8, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(Q, np.ndarray):\n        Q = np.array(Q)\n    n = len(Q)\n    greedy_index = np.nanargmax(Q)\n    base = epsilon / n\n    prob = np.full(n, base, dtype=float)\n    prob[greedy_index] = 1 - epsilon + base\n    assert np.abs(np.sum(prob) - 1) <= 1e-12, 'Probabilities do not sum to 1'\n    return [round(p, 4) for p in prob.tolist()]\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 9, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_index = np.argwhere(Q == Q.max()).min()\n    base_prob = epsilon / n\n    probabilities = np.full(n, base_prob)\n    probabilities[greedy_index] = 1 - epsilon + base_prob\n    probabilities = np.round(probabilities, 4)\n    adjustment = 1.0 - probabilities.sum()\n    if abs(adjustment) > 1e-12:\n        probabilities[0] += adjustment\n    return probabilities.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import list, Union\ndef aggregate_random_forest_votes(predictions: list[list[Union[int, float, str]]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[Union[int, float, str]]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    num_trees = len(predictions)\n    final_predictions = []\n    for i in range(num_samples):\n        votes = []\n        for j in range(num_trees):\n            votes.append(predictions[j][i])\n        vote_counter = Counter(votes)\n        sorted_votes = sorted(vote_counter.items(), key=lambda x: (-x[1], x[0]))\n        final_predictions.append(sorted_votes[0][0])\n    return final_predictions"}
{"task_id": 86, "completion_id": 1, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    final_predictions = []\n    for sample_votes in zip(*predictions):\n        vote_counter = Counter(sample_votes)\n        sorted_votes = sorted(vote_counter.items(), key=lambda x: (-x[1], x[0]))\n        winning_label = sorted_votes[0][0]\n        final_predictions.append(winning_label)\n    return final_predictions"}
{"task_id": 86, "completion_id": 2, "solution": "from collections import Counter\nfrom typing import list, Union\ndef aggregate_random_forest_votes(predictions: list[list[Union[int, float, str]]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    aggregated = []\n    for i in range(num_samples):\n        sample_votes = [predictions[j][i] for j in range(len(predictions))]\n        vote_counts = Counter(sample_votes)\n        sorted_votes = sorted(vote_counts.items(), key=lambda x: (-x[1], x[0]))\n        aggregated.append(sorted_votes[0][0])\n    return aggregated\npredictions = [[0, 1, 0], [1, 1, 0], [0, 1, 1], [0, 1, 0]]"}
{"task_id": 86, "completion_id": 3, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    result = []\n    for sample_idx in range(num_samples):\n        votes = [predictions[tree_idx][sample_idx] for tree_idx in range(len(predictions))]\n        vote_counter = Counter(votes)\n        max_votes = max(vote_counter.values())\n        candidates = [label for (label, count) in vote_counter.items() if count == max_votes]\n        final_prediction = min(candidates)\n        result.append(final_prediction)\n    return result\npredictions = [[0, 1, 0, 1], [0, 0, 1, 1], [1, 0, 0, 1], [0, 1, 0, 0]]"}
{"task_id": 86, "completion_id": 4, "solution": "from collections import Counter\nfrom typing import list, TypeVar\nT = TypeVar('T', int, float, str)\ndef aggregate_random_forest_votes(predictions: list[list[T]]) -> list[T]:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    aggregated_predictions = []\n    for sample_idx in range(num_samples):\n        votes = [predictions[tree_idx][sample_idx] for tree_idx in range(len(predictions))]\n        vote_counter = Counter(votes)\n        sorted_votes = sorted(vote_counter.items(), key=lambda x: (-x[1], x[0]))\n        aggregated_predictions.append(sorted_votes[0][0])\n    return aggregated_predictions"}
{"task_id": 86, "completion_id": 5, "solution": "from collections import Counter\nfrom typing import list, Union\ndef aggregate_random_forest_votes(predictions: list[list[Union[int, float, str]]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[Union[int, float, str]]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    result = []\n    for sample_idx in range(num_samples):\n        votes = []\n        for tree_idx in range(len(predictions)):\n            votes.append(predictions[tree_idx][sample_idx])\n        vote_counts = Counter(votes)\n        max_votes = max(vote_counts.values())\n        candidates = [label for (label, count) in vote_counts.items() if count == max_votes]\n        best_label = min(candidates)\n        result.append(best_label)\n    return result"}
{"task_id": 86, "completion_id": 6, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    result = []\n    for sample_idx in range(num_samples):\n        votes = []\n        for tree_prediction in predictions:\n            votes.append(tree_prediction[sample_idx])\n        vote_counts = Counter(votes)\n        max_votes = max(vote_counts.values())\n        candidates = [label for (label, count) in vote_counts.items() if count == max_votes]\n        chosen_label = min(candidates)\n        result.append(chosen_label)\n    return result\npredictions = [[0, 1, 0, 1], [1, 1, 0, 0], [0, 0, 0, 1]]"}
{"task_id": 86, "completion_id": 7, "solution": "from collections import Counter\nfrom typing import list, Union\ndef aggregate_random_forest_votes(predictions: list[list[Union[int, float, str]]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[Union[int, float, str]]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    aggregated = []\n    for sample_idx in range(num_samples):\n        votes = [predictions[tree_idx][sample_idx] for tree_idx in range(len(predictions))]\n        vote_counts = Counter(votes)\n        max_votes = max(vote_counts.values())\n        tied_labels = [label for (label, count) in vote_counts.items() if count == max_votes]\n        final_label = min(tied_labels)\n        aggregated.append(final_label)\n    return aggregated"}
{"task_id": 86, "completion_id": 8, "solution": "from collections import Counter\nfrom typing import list, TypeVar\nT = TypeVar('T', int, float, str)\ndef aggregate_random_forest_votes(predictions: list[list[T]]) -> list[T]:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    forest_predictions = []\n    for sample_index in range(num_samples):\n        sample_votes = [predictions[tree_index][sample_index] for tree_index in range(len(predictions))]\n        vote_counter = Counter(sample_votes)\n        sorted_votes = sorted(vote_counter.items(), key=lambda x: (-x[1], x[0]))\n        winning_label = sorted_votes[0][0]\n        forest_predictions.append(winning_label)\n    return forest_predictions\ntree1 = [0, 1, 0, 1]\ntree2 = [0, 0, 1, 1]\ntree3 = [1, 0, 1, 1]\npredictions = [tree1, tree2, tree3]"}
{"task_id": 86, "completion_id": 9, "solution": "from collections import Counter\nfrom typing import Union, List\ndef aggregate_random_forest_votes(predictions: list[list[Union[int, float, str]]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[Union[int, float, str]]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    if not predictions:\n        return []\n    num_samples = len(predictions[0])\n    result = []\n    for sample_idx in range(num_samples):\n        votes = []\n        for tree_idx in range(len(predictions)):\n            votes.append(predictions[tree_idx][sample_idx])\n        vote_counts = Counter(votes)\n        max_count = max(vote_counts.values())\n        candidates = [label for (label, count) in vote_counts.items() if count == max_count]\n        selected_label = min(candidates)\n        result.append(selected_label)\n    return result"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n\n    def compute(z_input):\n        return np.logaddexp(0.0, z_input)\n    z_array = np.asarray(z)\n    result = compute(z_array)\n    result = np.round(result, 4)\n    if isinstance(z, (np.ndarray, list)):\n        return result.tolist()\n    else:\n        return float(result)\nz = np.array([-1000, 0, 3])"}
{"task_id": 88, "completion_id": 1, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_array = np.array(z, dtype=np.float64)\n    result_array = np.logaddexp(0.0, z_array)\n    result_array = np.round(result_array, 4)\n    if isinstance(z, (np.ndarray, list)):\n        return result_array.tolist()\n    else:\n        return float(result_array)"}
{"task_id": 88, "completion_id": 2, "solution": "import numpy as np\nimport numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_array = np.asarray(z)\n    result = np.logaddexp(0.0, z_array)\n    result_rounded = np.round(result, 4)\n    if np.isscalar(z_array):\n        return float(result_rounded)\n    else:\n        return result_rounded.tolist()\nz = np.array([-1000, 0, 3])"}
{"task_id": 88, "completion_id": 3, "solution": "import numpy as np\nimport numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_array = np.array(z, dtype=float)\n    result = np.logaddexp(0.0, z_array)\n    result_rounded = np.round(result, 4)\n    if z_array.ndim == 0:\n        return float(result_rounded.flat[0])\n    else:\n        return result_rounded.tolist()\nz = np.array([-1000, 0, 3])"}
{"task_id": 88, "completion_id": 4, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_arr = np.array(z, dtype=np.float64)\n    result = np.logaddexp(0.0, z_arr)\n    result = np.round(result, 4)\n    if isinstance(z, (int, float)):\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 88, "completion_id": 5, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_array = np.array(z, dtype=np.float64)\n    result = np.logaddexp(0.0, z_array)\n    result = np.round(result, 4)\n    if np.isscalar(z):\n        return float(result.item())\n    else:\n        return result.tolist()"}
{"task_id": 88, "completion_id": 6, "solution": "import numpy as np\nimport numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_arr = np.array(z, dtype=np.float64)\n    result = np.logaddexp(0.0, z_arr)\n    result = np.round(result, 4)\n    if z_arr.ndim == 0:\n        return float(result)\n    else:\n        return result.tolist()\nz = np.array([-1000, 0, 3])"}
{"task_id": 88, "completion_id": 7, "solution": "import numpy as np\nimport numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z = np.asarray(z)\n    result = np.logaddexp(0.0, z)\n    rounded_result = np.round(result, decimals=4)\n    if np.isscalar(result):\n        return float(rounded_result)\n    else:\n        return rounded_result.tolist()\nz = np.array([-1000, 0, 3])"}
{"task_id": 88, "completion_id": 8, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_array = np.array(z, dtype=float)\n    result_array = np.logaddexp(0.0, z_array)\n    result_array = np.round(result_array, 4)\n    if isinstance(z, (np.ndarray, list)):\n        return result_array.tolist()\n    else:\n        return float(result_array.item())"}
{"task_id": 88, "completion_id": 9, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_array = np.array(z, dtype=np.float64)\n    result = np.logaddexp(0.0, z_array)\n    result_rounded = np.round(result, 4)\n    if isinstance(z, (int, float)):\n        return float(result_rounded)\n    else:\n        return result_rounded.tolist()\nz = np.array([-1000, 0, 3])"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or policy.ev_estimates is None or len(policy.ev_estimates) == 0:\n        return np.nan\n    true_values = bandit.arm_evs\n    estimated_values = [policy.ev_estimates[i] for i in sorted(policy.ev_estimates.keys())]\n    if len(estimated_values) != len(true_values):\n        raise ValueError('Number of estimated arms does not match the number of true arms.')\n    squared_errors = [(est - true) ** 2 for (est, true) in zip(estimated_values, true_values)]\n    mean_squared_error = np.mean(squared_errors)\n    return round(mean_squared_error, 4)"}
{"task_id": 90, "completion_id": 1, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    sorted_arms = sorted(policy.ev_estimates.keys())\n    true_values = bandit.arm_evs\n    if len(true_values) != len(sorted_arms):\n        return np.nan\n    squared_errors = [(policy.ev_estimates[arm] - true_values[arm]) ** 2 for arm in sorted_arms]\n    mean_squared_error = sum(squared_errors) / len(squared_errors)\n    return round(mean_squared_error, 4)\nclass Policy:\n\n    def __init__(self, ev_estimates):\n        self.ev_estimates = ev_estimates\npolicy = Policy({0: 0.4, 1: 0.25, 2: 0.8})"}
{"task_id": 90, "completion_id": 2, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    ev_estimates = policy.get('ev_estimates', None)\n    if not ev_estimates or not ev_estimates.items():\n        return np.nan\n    sorted_arms = sorted(ev_estimates.keys)\n    estimated_values = [ev_estimates[arm] for arm in sorted_arms]\n    true_values = bandit['arm_evs']\n    squared_errors = [(e - t) ** 2 for (e, t) in zip(estimated_values, true_values)]\n    mean_squared_error = np.mean(squared_errors)\n    return round(mean_squared_error, 4)\nbandit = {'arm_evs': [0.5, 0.2, 0.9]}"}
{"task_id": 90, "completion_id": 3, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    arm_indices = sorted(policy.ev_estimates.keys())\n    true_evs = [bandit.arm_evs[i] for i in arm_indices]\n    estimated_evs = [policy.ev_estimates[i] for i in arm_indices]\n    squared_errors = [(t - e) ** 2 for (t, e) in zip(true_evs, estimated_evs)]\n    mean_squared_error = np.mean(squared_errors)\n    return round(mean_squared_error, 4)\nclass Policy:\n\n    def __init__(self, ev_estimates):\n        self.ev_estimates = ev_estimates\npolicy = Policy({})"}
{"task_id": 90, "completion_id": 4, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or len(policy.ev_estimates) == 0:\n        return np.nan\n    true_evs = bandit.arm_evs\n    arm_indices = sorted(policy.ev_estimates.keys())\n    estimated_evs = [policy.ev_estimates[i] for i in arm_indices]\n    if len(estimated_evs) != len(true_evs):\n        return np.nan\n    squared_errors = [(t - e) ** 2 for (t, e) in zip(true_evs, estimated_evs)]\n    mean_squared_error = np.mean(squared_errors)\n    return round(mean_squared_error, 4)\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 90, "completion_id": 5, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or policy.ev_estimates is None or len(policy.ev_estimates) == 0:\n        return np.nan\n    sorted_arms = sorted(policy.ev_estimates.keys())\n    true_values = [bandit.arm_evs[i] for i in sorted_arms]\n    estimated_values = [policy.ev_estimates[i] for i in sorted_arms]\n    errors = [(e - t) ** 2 for (e, t) in zip(estimated_values, true_values)]\n    mean_squared_error = sum(errors) / len(errors)\n    return round(mean_squared_error, 4)"}
{"task_id": 90, "completion_id": 6, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or policy.ev_estimates is None or len(policy.ev_estimates) == 0:\n        return np.nan\n    sorted_arm_indices = sorted(policy.ev_estimates.keys())\n    true_values = bandit.arm_evs\n    squared_errors = []\n    for idx in sorted_arm_indices:\n        true_value = true_values[idx]\n        estimated_value = policy.ev_estimates[idx]\n        squared_errors.append((estimated_value - true_value) ** 2)\n    mean_squared_error = np.mean(squared_errors)\n    return round(mean_squared_error, 4)\nclass Policy:\n\n    def __init__(self, ev_estimates):\n        self.ev_estimates = ev_estimates\npolicy = Policy({0: 0.4, 1: 0.25, 2: 0.8})"}
{"task_id": 90, "completion_id": 7, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    true_evs = bandit.arm_evs\n    sorted_arm_indices = sorted(policy.ev_estimates.keys())\n    estimated_evs = [policy.ev_estimates[arm] for arm in sorted_arm_indices]\n    squared_errors = [(true - estimated) ** 2 for (true, estimated) in zip(true_evs, estimated_evs)]\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 90, "completion_id": 8, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    arm_evs = bandit.arm_evs\n    sorted_arm_indices = sorted(policy.ev_estimates.keys())\n    policy_estimates = [policy.ev_estimates[i] for i in sorted_arm_indices]\n    min_len = min(len(arm_evs), len(policy_estimates))\n    if min_len == 0:\n        return np.nan\n    squared_errors = [(policy_estimates[i] - arm_evs[i]) ** 2 for i in range(min_len)]\n    mean_squared_error = sum(squared_errors) / min_len\n    return round(mean_squared_error, 4)"}
{"task_id": 90, "completion_id": 9, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates, the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    arm_indices = sorted(policy.ev_estimates.keys())\n    true_evs = bandit.arm_evs\n    estimated_evs = [policy.ev_estimates[i] for i in arm_indices]\n    valid_arm_indices = [i for i in arm_indices if i < len(true_evs)]\n    if not valid_arm_indices:\n        return np.nan\n    squared_errors = [(policy.ev_estimates[i] - true_evs[i]) ** 2 for i in valid_arm_indices]\n    mean_squared_error = sum(squared_errors) / len(valid_arm_indices)\n    return round(mean_squared_error, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List, Tuple, Dict"}
{"task_id": 96, "completion_id": 1, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    all_words = [word for sentence in corpus for word in sentence.split()]\n    vocab = set(all_words)\n    vocab.add('<UNK>')\n    vocab_size = len(vocab)\n    ngrams = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        for i in range(len(words)):\n            for n in range(1, N + 1):\n                if i + 1 >= n:\n                    context = words[i - n + 1:i]\n                    if n == 1:\n                        context = []\n                    current_word = words[i]\n                    ngrams[n][tuple(context) + (current_word,)] += 1\n                    ngrams[n][tuple(context)] += 1\n    words = sequence.split()\n    if len(words) < N:\n        return 0.0\n    for i in range(len(words)):\n        if words[i] not in vocab:\n            words[i] = '<UNK>'\n    total_log_prob = 0.0\n    for i in range(N - 1, len(words)):\n        context = words[i - N + 1:i]\n        current_word = words[i]\n        ngram = tuple(context) + (current_word,)\n        context_key = tuple(context)\n        ngram_count = ngrams[N].get(ngram, 0)\n        context_count = ngrams[N].get(context_key, 0)\n        prob = (ngram_count + K) / (context_count + K * vocab_size)\n        total_log_prob += math.log(prob)\n    return round(total_log_prob, 4)"}
{"task_id": 96, "completion_id": 2, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List, Tuple, Dict, Set\ndef additive_ngram_log_prob(corpus: List[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (whitespace separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    if N <= 0:\n        return 0.0\n    words_by_sentence = [sentence.split() for sentence in corpus]\n    vocabulary = set()\n    for sentence in words_by_sentence:\n        vocabulary.update(sentence)\n    vocabulary.add('<UNK>')\n    vocab_size = len(vocabulary)\n    ngram_counts = defaultdict(Counter)\n    context_counts = Counter()\n    for sentence in words_by_sentence:\n        padded_sentence = ['<START>'] * (N - 1) + sentence + ['<END>']\n        for i in range(N - 1, len(padded_sentence)):\n            context = tuple(padded_sentence[i - N + 1:i])\n            word = padded_sentence[i]\n            ngram_counts[context][word] += 1\n            context_counts[context] += 1\n    words = sequence.split()\n    if len(words) < N:\n        return 0.0\n    padded_sequence = ['<START>'] * (N - 1) + words + ['<END>']\n    log_prob = 0.0\n    for i in range(N - 1, len(padded_sequence)):\n        context = tuple(padded_sequence[i - N + 1:i])\n        word = padded_sequence[i]\n        if word not in vocabulary:\n            word = '<UNK>'\n        count_ngram = ngram_counts[context].get(word, 0)\n        count_context = context_counts.get(context, 0)\n        numerator = count_ngram + K\n        denominator = count_context + K * vocab_size\n        if numerator <= 0:\n            word_prob = 0.0\n        elif denominator <= 0:\n            word_prob = 0.0\n        else:\n            word_prob = numerator / denominator\n        if word_prob > 0:\n            log_prob += math.log(word_prob)\n        else:\n            log_prob = float('-inf')\n            break\n    return round(log_prob, 4)"}
{"task_id": 96, "completion_id": 3, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List, Tuple, Dict"}
{"task_id": 96, "completion_id": 4, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    words = [word for sent in corpus for word in sent.split()]\n    vocab = set(words)\n    vocab.add('<UNK>')\n    word2idx = {word: i for (i, word) in enumerate(vocab)}\n    vocab_size = len(vocab)\n    tokens = sequence.split()\n    if len(tokens) < N:\n        return 0.0\n    ngram_counts = defaultdict(Counter)\n    for sent in corpus:\n        for i in range(len(sent.split()) - N + 1):\n            context = tuple(sent.split()[i:i + N - 1])\n            word = sent.split()[i + N - 1]\n            ngram_counts[context][word] += 1\n    log_prob_sum = 0.0\n    for i in range(len(tokens) - N + 1):\n        context = tuple(tokens[i:i + N - 1])\n        word = tokens[i + N - 1]\n        context_tokens = [token if token in vocab else '<UNK>' for token in context]\n        word = word if word in vocab else '<UNK>'\n        context = tuple(context_tokens)\n        if context in ngram_counts:\n            word_count = ngram_counts[context].get(word, 0)\n            total_context_count = sum(ngram_counts[context].values())\n            prob = (word_count + K) / (total_context_count + K * vocab_size)\n            log_prob_sum += math.log(prob)\n        else:\n            prob = K / (0 + K * vocab_size)\n            log_prob_sum += math.log(prob)\n    return round(log_prob_sum, 4)\ncorpus = ['the cat sat on the mat', 'the cat in the hat', 'a cat and a hat']"}
{"task_id": 96, "completion_id": 5, "solution": "import math\nfrom collections import Counter, defaultdict"}
{"task_id": 96, "completion_id": 6, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    if N == 1:\n        sequence_words = sequence.split()\n        if len(sequence_words) < 1:\n            return 0.0\n        vocab = set()\n        for s in corpus:\n            vocab.update(s.split())\n        unk_words = [w for w in sequence_words if w not in vocab]\n        augmented_vocab = vocab | {'<UNK>'}\n        vocab_size = len(augmented_vocab)\n        sequence_words = [w if w in vocab else '<UNK>' for w in sequence_words]\n        unigram_counts = Counter()\n        for s in corpus:\n            unigram_counts.update(s.split())\n        log_prob = 0.0\n        for word in sequence_words:\n            total = sum(unigram_counts.values())\n            word_count = unigram_counts.get(word, 0)\n            prob = (word_count + K) / (total + K * vocab_size)\n            log_prob += math.log(prob)\n        return round(log_prob, 4)\n    else:\n        vocab = set()\n        for s in corpus:\n            vocab.update(s.split())\n        vocab.add('<UNK>')\n        vocab_size = len(vocab)\n        sentence_words = [w if w in vocab else '<UNK>' for w in sequence.split()]\n        if len(sentence_words) < N:\n            return 0.0\n        ngrams = defaultdict(Counter)\n        for sentence in corpus:\n            words = ['<s>'] + sentence.split() + ['</s>']\n            for i in range(len(words) + 1 - N):\n                context = tuple(words[i:i + N - 1])\n                target = words[i + N - 1]\n                ngrams[tuple(('word' for _ in range(N - 1)))][context]\n                ngrams[tuple(words[i:i + N - 1])][target] += 1\n        log_prob = 0.0\n        padded_sequence = ['<s>'] * (N - 1) + sentence_words + ['</s>']\n        for i in range(len(padded_sequence) - N + 1):\n            context = tuple(padded_sequence[i:i + N - 1])\n            word = padded_sequence[i + N - 1]\n            context_count = sum(ngrams[context].values())\n            word_count = ngrams[context].get(word, 0)\n            prob = (word_count + K) / (context_count + K * vocab_size)\n            log_prob += math.log(prob)\n        return round(log_prob, 4)"}
{"task_id": 96, "completion_id": 7, "solution": "import math\nfrom collections import Counter, defaultdict"}
{"task_id": 96, "completion_id": 8, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List, Tuple\ndef additive_ngram_log_prob(corpus: List[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n\n    def add_boundary_tokens(text: str) -> str:\n        words = text.strip().split()\n        return ['<S>'] * (N - 1) + words + ['</S>'] * (N - 1)\n    tagged_corpus = [add_boundary_tokens(s) for s in corpus]\n    target = add_boundary_tokens(sequence)\n    vocab = set()\n    word_counts = Counter()\n    for sentence in tagged_corpus:\n        word_counts.update(sentence)\n        vocab.update(sentence)\n    if len(target) < N:\n        return 0.0\n    unk_words = set()\n    for word in target:\n        if word not in vocab:\n            unk_words.add(word)\n    if unk_words:\n        vocab.add('<UNK>')\n    else:\n        vocab.add('<UNK>')\n    target_with_unk = [w if w in vocab else '<UNK>' for w in target]\n    ngram_counts = defaultdict(Counter)\n    for sentence in tagged_corpus:\n        sentence_with_unk = [w if w in vocab else '<UNK>' for w in sentence]\n        for i in range(len(sentence_with_unk) - N + 1):\n            context = tuple(sentence_with_unk[i:i + N - 1])\n            word = sentence_with_unk[i + N - 1]\n            ngram_counts[context][word] += 1\n    log_prob = 0.0\n    total_log_prob = 0.0\n    for i in range(len(target_with_unk) - N + 1):\n        context = tuple(target_with_unk[i:i + N - 1])\n        word = target_with_unk[i + N - 1]\n        count_context_word = ngram_counts[context].get(word, 0)\n        count_context = sum(ngram_counts[context].values())\n        vocab_size = len(vocab)\n        prob = (count_context_word + K) / (count_context + K * vocab_size)\n        log_prob = math.log(prob)\n        total_log_prob += log_prob\n    return round(total_log_prob, 4)\ncorpus = ['the cat sat on the mat', 'the cat played all day']\nsequence = 'the cat sat on the mat'"}
{"task_id": 96, "completion_id": 9, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    all_words = []\n    for sentence in corpus:\n        words = sentence.split()\n        all_words.extend(words)\n    vocab_counts = Counter(all_words)\n    vocab = set(vocab_counts.keys())\n    vocab.add('<UNK>')\n    vocab_size = len(vocab)\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        for i in range(len(words) - N + 1):\n            context = tuple(words[i:i + N - 1])\n            w_i = words[i + N - 1]\n            ngram_counts[context][w_i] += 1\n    sequence_words = sequence.split()\n    if len(sequence_words) < N:\n        return 0.0\n    context_counts = Counter()\n    for context in ngram_counts:\n        total_words = sum(ngram_counts[context].values())\n        context_counts[context] = total_words\n    total_log_prob = 0.0\n    for i in range(len(sequence_words) - N + 1):\n        context = tuple(sequence_words[i:i + N - 1])\n        resolved_context = tuple((word if word in vocab else '<UNK>' for word in context))\n        w_i = sequence_words[i + N - 1]\n        word = w_i if w_i in vocab else '<UNK>'\n        count_ngram = ngram_counts.get(resolved_context, Counter()).get(word, 0)\n        count_context = context_counts.get(resolved_context, N - 1)\n        numerator = count_ngram + K\n        denominator = count_context + K * vocab_size\n        prob = numerator / denominator\n        total_log_prob += math.log(prob)\n    return round(total_log_prob, 4)\ncorpus = ['the cat sat on the mat', 'the dog sat on the log']"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    for iteration in range(max_iter):\n        A = H @ H.T + alpha * np.eye(K)\n        A_inv = np.linalg.inv(A)\n        W = X @ H.T @ A_inv\n        B = W.T @ W + alpha * np.eye(K)\n        B_inv = np.linalg.inv(B)\n        H = W.T @ X @ B_inv\n        X_hat = W @ H\n        loss = np.linalg.norm(X - X_hat) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n        if loss < tol:\n            break\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 1, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    x_frobenius_sq = np.sum(X ** 2)\n    for iteration in range(max_iter):\n        W_prev = W.copy()\n        H_prev = H.copy()\n        A = np.dot(H, H.T) + alpha / N * np.eye(K)\n        B = np.dot(H, X.T)\n        W = np.linalg.solve(A, B).T\n        C = np.dot(W.T, W) + alpha / M * np.eye(K)\n        D = np.dot(W.T, X)\n        H = np.linalg.solve(C, D)\n        X_hat = np.dot(W, H)\n        frob_W = np.sum(W ** 2)\n        frob_H = np.sum(H ** 2)\n        reconstruction_error = np.sum((X - X_hat) ** 2)\n        regularisation_term = alpha * (frob_W + frob_H)\n        loss = reconstruction_error + regularisation_term\n        if loss < tol:\n            break\n    return X_hat.round(4).tolist()\nX = np.array([[5, 3, 0, 1], [4, 0, 0, 1], [1, 1, 0, 5], [1, 0, 0, 4], [0, 1, 5, 4]])"}
{"task_id": 108, "completion_id": 2, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"\n    Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    for iteration in range(max_iter):\n        for i in range(N):\n            A = np.dot(H, H.T) + alpha / N * np.eye(K)\n            B = np.dot(H, X[i, :].T)\n            W[i, :] = np.linalg.solve(A, B)\n        for j in range(M):\n            A = np.dot(W.T, W) + alpha / M * np.eye(K)\n            B = np.dot(W.T, X[:, j])\n            H[:, j] = np.linalg.solve(A, B)\n        X_hat = np.dot(W, H)\n        error = X - X_hat\n        loss = np.sum(error ** 2) + alpha * (np.sum(W ** 2) + np.sum(H ** 2))\n        if loss < tol:\n            break\n    return np.round(np.dot(W, H), 4).tolist()"}
{"task_id": 108, "completion_id": 3, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    for _ in range(max_iter):\n        A = H @ H.T + alpha * np.eye(K)\n        B = X @ H.T\n        W = np.linalg.solve(A, B.T).T\n        A = W.T @ W + alpha * np.eye(K)\n        B = W.T @ X\n        H = np.linalg.solve(A, B)\n        loss = np.sum((X - W @ H) ** 2) + alpha * (np.sum(W ** 2) + np.sum(H ** 2))\n        if loss < tol:\n            break\n    X_hat = W @ H\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 4, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    X_T = X.T\n    for _ in range(max_iter):\n        for i in range(N):\n            H_HT = H @ H.T\n            right_side = X[i, :] @ H.T + alpha * W[i, :]\n            W[i, :] = np.linalg.solve(H_HT + alpha * np.eye(K), right_side)\n        for j in range(M):\n            W_WT = W.T @ W\n            right_side = W.T @ X[:, j] + alpha * H[:, j]\n            H[:, j] = np.linalg.solve(W_WT + alpha * np.eye(K), right_side)\n        reconstruction_loss = np.linalg.norm(X - W @ H) ** 2\n        regularisation_loss_W = alpha * np.linalg.norm(W) ** 2\n        regularisation_loss_H = alpha * np.linalg.norm(H) ** 2\n        total_loss = reconstruction_loss + regularisation_loss_W + regularisation_loss_H\n        if total_loss < tol:\n            break\n    X_hat = W @ H\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 5, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    prev_loss = float('inf')\n    for iteration in range(max_iter):\n        A = np.dot(H, H.T) + alpha / N * np.eye(K)\n        B = np.dot(H, X.T)\n        W = np.linalg.solve(A, B).T\n        A = np.dot(W.T, W) + alpha / M * np.eye(K)\n        B = np.dot(W.T, X)\n        H = np.linalg.solve(A, B)\n        reconstruction = np.dot(W, H)\n        loss = np.linalg.norm(X - reconstruction, 'fro') ** 2 + alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n        if abs(prev_loss - loss) < tol:\n            break\n        prev_loss = loss\n    X_hat = np.dot(W, H).round(4).tolist()\n    return X_hat"}
{"task_id": 108, "completion_id": 6, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    for iter in range(max_iter):\n        A = H @ H.T + alpha * np.eye(K)\n        W = X @ H.T @ np.linalg.inv(A)\n        B = W.T @ W + alpha * np.eye(K)\n        H = np.linalg.inv(B) @ (W.T @ X)\n        X_hat = W @ H\n        loss = np.linalg.norm(X - X_hat, 'fro') ** 2 + alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n        if loss < tol:\n            break\n    X_hat = W @ H\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 7, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    for iteration in range(max_iter):\n        Ht_H = H @ H.T + alpha * np.eye(K)\n        W = np.linalg.solve(Ht_H, X @ H.T + alpha * W).T\n        Wt_W = W.T @ W + alpha * np.eye(K)\n        H = np.linalg.solve(Wt_W, W.T @ X + alpha * H)\n        X_hat = W @ H\n        loss = np.linalg.norm(X - X_hat) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n        if loss < tol:\n            break\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 8, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    for _ in range(max_iter):\n        Ht = H.T\n        A = H @ Ht + alpha / N * np.eye(K)\n        W_new = np.linalg.solve(A, X @ Ht)\n        Wt = W_new.T\n        B = Wt @ W_new + alpha / M * np.eye(K)\n        H_new = np.linalg.solve(B, Wt @ X)\n        X_hat = W_new @ H_new\n        loss = np.sum((X - X_hat) ** 2) + alpha * (np.sum(W_new ** 2) + np.sum(H_new ** 2))\n        if loss < tol:\n            break\n        W = W_new\n        H = H_new\n    return (W @ H).round(4).tolist()"}
{"task_id": 108, "completion_id": 9, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    X_hat = W @ H\n    loss = np.linalg.norm(X - X_hat) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n    for iteration in range(max_iter):\n        Ht = H.T\n        reg_diag = np.eye(K) * alpha\n        W = np.linalg.solve(H @ Ht + reg_diag, X @ Ht).T\n        Wt = W.T\n        reg_diag = np.eye(K) * alpha\n        H = np.linalg.solve(Wt @ W + reg_diag, Wt @ X)\n        X_hat = W @ H\n        new_loss = np.linalg.norm(X - X_hat) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n        if abs(loss - new_loss) < tol:\n            break\n        loss = new_loss\n    return X_hat.round(4).tolist()"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"\n    Perform K-Means clustering with K-Means++ initialization.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where `m` is the number of samples\n        and `n` is the number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's random and NumPy's RNG to make the result\n        reproducible.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to four decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    (m, n) = X.shape\n    centroids = []\n    distances = np.full(m, np.inf)\n    centroids.append(X[np.random.randint(m)])\n    for _ in range(1, K):\n        for (i, x) in enumerate(X):\n            dist = min([np.linalg.norm(x - c) for c in centroids])\n            distances[i] = dist\n        prob = distances ** 2\n        prob /= prob.sum()\n        next_centroid = X[np.random.choice(m, p=prob)]\n        centroids.append(next_centroid)\n    prev_assignments = np.empty(m, dtype=int)\n    for _ in range(max_iter):\n        assignments = np.array([np.argmin([np.linalg.norm(x - c) for c in centroids]) for x in X])\n        if np.array_equal(assignments, prev_assignments):\n            break\n        prev_assignments = assignments\n        for i in range(K):\n            cluster_points = X[assignments == i]\n            if cluster_points.size > 0:\n                centroids[i] = cluster_points.mean(axis=0)\n    rounded_centroids = [list(np.round(c, 4)) for c in centroids]\n    rounded_centroids.sort(key=lambda x: (x[0], tuple(x)))\n    return rounded_centroids\nX = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6]])\nK = 2"}
{"task_id": 109, "completion_id": 1, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    (m, n) = X.shape\n    centroids = [X[random.randint(0, m - 1)].copy()]\n    for _ in range(1, K):\n        distances = np.array([min([np.linalg.norm(x - c) for c in centroids]) for x in X])\n        probabilities = distances ** 2\n        probabilities /= probabilities.sum()\n        cumulative_prob = np.cumsum(probabilities)\n        r = random.random()\n        for (j, prob) in enumerate(cumulative_prob):\n            if r < prob:\n                centroids.append(X[j].copy())\n                break\n    centroids = np.array(centroids)\n    for _ in range(max_iter):\n        cluster_assignments = np.array([np.argmin([np.linalg.norm(x - c) for c in centroids]) for x in X])\n        if hasattr(kmeans, 'prev_assignments') and np.array_equal(cluster_assignments, kmeans.prev_assignments):\n            break\n        kmeans.prev_assignments = cluster_assignments.copy()\n        new_centroids = []\n        for i in range(K):\n            cluster_points = X[cluster_assignments == i]\n            if len(cluster_points) == 0:\n                new_centroids.append(centroids[i])\n            else:\n                new_centroids.append(np.mean(cluster_points, axis=0))\n        centroids = np.array(new_centroids)\n    centroids = np.round(centroids, 4)\n    centroids = sorted(centroids, key=lambda x: (x[0], x.tolist()))\n    return [list(map(float, centroid)) for centroid in centroids]"}
{"task_id": 109, "completion_id": 2, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    (n_samples, n_features) = X.shape\n    centroids = [X[0]]\n    for _ in range(1, K):\n        distances = np.array([np.min([np.sum((x - c) ** 2) for c in centroids]) for x in X])\n        probabilities = distances / distances.sum()\n        cum_prob = np.cumsum(probabilities)\n        r = np.random.rand()\n        for (idx, p) in enumerate(cum_prob):\n            if p >= r:\n                centroids.append(X[idx])\n                break\n        while distances[idx] != min(distances):\n            idx -= 1\n    centroids = np.array(centroids)\n    prev_labels = None\n    for _ in range(max_iter):\n        distances = np.sum((X[:, np.newaxis, :] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        if prev_labels is not None and np.array_equal(labels, prev_labels):\n            break\n        prev_labels = labels\n        for i in range(K):\n            cluster_points = X[labels == i]\n            if len(cluster_points) > 0:\n                centroids[i] = np.mean(cluster_points, axis=0)\n            else:\n                pass\n    rounded_centroids = [list(np.round(centroid, 4)) for centroid in centroids]\n    rounded_centroids.sort(key=lambda x: (x[0], x))\n    return rounded_centroids"}
{"task_id": 109, "completion_id": 3, "solution": "import numpy as np\nimport random\nfrom typing import list, Any\nimport numpy as np\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    (m, n) = X.shape\n    centroids = []\n    centroids.append(X[random.randint(0, m - 1)].copy())\n    for _ in range(1, K):\n        distances = np.array([min([np.linalg.norm(x - c) for c in centroids]) for x in X])\n        probabilities = distances ** 2\n        probabilities /= probabilities.sum()\n        cumulative_prob = np.cumsum(probabilities)\n        r = random.random()\n        idx = np.searchsorted(cumulative_prob, r)\n        centroids.append(X[idx].copy())\n    centroids = np.array(centroids)\n    for _ in range(max_iter):\n        old_centroids = centroids.copy()\n        labels = np.argmin(np.array([[np.linalg.norm(x - c) for c in centroids] for x in X]), axis=1)\n        new_centroids = []\n        for i in range(K):\n            cluster_points = X[labels == i]\n            if cluster_points.shape[0] == 0:\n                new_centroids.append(old_centroids[i].copy())\n            else:\n                new_centroids.append(np.mean(cluster_points, axis=0))\n        centroids = np.array(new_centroids)\n        if np.all(old_centroids == centroids):\n            break\n    centroids = [list(np.round(centroid, 4)) for centroid in centroids]\n    centroids.sort(key=lambda x: (x[0], x))\n    return centroids\nX = np.array([[1.0, 1.0], [1.5, 2.0], [3.0, 4.0], [5.0, 7.0], [3.5, 5.0], [4.5, 5.0], [3.5, 4.5]])"}
{"task_id": 109, "completion_id": 4, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    (m, n) = X.shape\n    centroids = [X[random.randint(0, m - 1)]]\n    for _ in range(1, K):\n        distances = np.zeros(m)\n        for i in range(m):\n            distances[i] = min((np.sum((X[i] - c) ** 2) for c in centroids))\n        total_distance = distances.sum()\n        probabilities = distances / total_distance\n        cumulative_prob = np.cumsum(probabilities)\n        r = np.random.rand()\n        idx = np.searchsorted(cumulative_prob, r)\n        centroids.append(X[idx])\n    centroids = np.array(centroids)\n    for _ in range(max_iter):\n        distances = np.array([[np.sum((x - c) ** 2) for c in centroids] for x in X])\n        labels = [np.argmin(d) for d in distances]\n        new_centroids = np.copy(centroids)\n        counts = np.zeros(K, dtype=int)\n        for (i, label) in enumerate(labels):\n            if not np.isnan(centroids[label]).any():\n                new_centroids[label] = np.add(new_centroids[label], X[i])\n                counts[label] += 1\n        for j in range(K):\n            if counts[j] > 0:\n                centroids[j] = new_centroids[j] / counts[j]\n        if np.allclose(centroids, new_centroids):\n            break\n    centroids = sorted(centroids.tolist(), key=lambda x: (x[0], x))\n    final_centroids = [[round(v, 4) for v in point] for point in centroids]\n    return final_centroids"}
{"task_id": 109, "completion_id": 5, "solution": "import numpy as np\nimport random\nimport numpy as np\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    (m, n) = X.shape\n    centroids = [X[random.randint(0, m - 1)]]\n    distances = np.zeros((m, 1))\n    for _ in range(1, K):\n        dists = np.array([min([np.sum((x - c) ** 2) for c in centroids]) for x in X])\n        dists = dists.reshape((m, 1))\n        probabilities = dists / dists.sum()\n        cum_probs = np.cumsum(probabilities)\n        r = np.random.rand()\n        index = min(np.where(cum_probs >= r)[0])\n        centroids.append(X[index])\n    centroids = np.array(centroids)\n    prev_assignments = None\n    for _ in range(max_iter):\n        distances = np.array([[np.sum((x - c) ** 2) for c in centroids] for x in X])\n        assignments = np.argmin(distances, axis=1)\n        if prev_assignments is not None and np.array_equal(assignments, prev_assignments):\n            break\n        prev_assignments = assignments\n        for i in range(K):\n            points_in_cluster = X[assignments == i]\n            if len(points_in_cluster) == 0:\n                continue\n            centroids[i] = np.mean(points_in_cluster, axis=0)\n    centroids_list = [list(centroid) for centroid in centroids]\n    return sorted(centroids_list, key=lambda centroid: (centroid[0], tuple(centroid)))\nX = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6]])"}
{"task_id": 109, "completion_id": 6, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    (m, n) = X.shape\n    centroids = []\n    idx = random.randint(0, m - 1)\n    centroids = [X[idx]]\n    for _ in range(1, K):\n        distances = np.array([min((np.sum((x - c) ** 2) for c in centroids)) for x in X])\n        probs = distances / distances.sum()\n        cum_probs = np.cumsum(probs)\n        r = np.random.rand()\n        idx = np.where(cum_probs >= r)[0][0]\n        centroids.append(X[idx])\n    centroids = np.array(centroids)\n    for _ in range(max_iter):\n        distances = np.array([[np.sum((x - c) ** 2) for c in centroids] for x in X])\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.copy(centroids)\n        for i in range(K):\n            points_in_cluster = X[labels == i]\n            if points_in_cluster.shape[0] > 0:\n                new_centroids[i] = np.mean(points_in_cluster, axis=0)\n        if np.allclose(new_centroids, centroids):\n            break\n        centroids = new_centroids\n    centroids = [list(np.round(c, 4)) for c in centroids]\n    centroids.sort(key=lambda x: (x[0], x))\n    return centroids"}
{"task_id": 109, "completion_id": 7, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    (m, n) = X.shape\n    centroids = [X[random.randint(0, m - 1)].copy()]\n    distances = np.inf * np.ones(m)\n    for _ in range(1, K):\n        for (i, x) in enumerate(X):\n            min_dist = min((np.sum((x - c) ** 2) for c in centroids))\n            distances[i] = min_dist\n        probs = distances / distances.sum()\n        r = random.random()\n        cumulative = 0.0\n        new_centroid_idx = -1\n        for i in range(m):\n            cumulative += probs[i]\n            if cumulative >= r:\n                new_centroid_idx = i\n                break\n        centroids.append(X[new_centroid_idx].copy())\n    centroids = np.array(centroids)\n    for _ in range(max_iter):\n        cluster_indices = np.argmin(np.sum((X[:, np.newaxis, :] - centroids) ** 2, axis=2), axis=1)\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(K, dtype=int)\n        for i in range(m):\n            cluster = cluster_indices[i]\n            new_centroids[cluster] += X[i]\n            counts[cluster] += 1\n        for j in range(K):\n            if counts[j] > 0:\n                centroids[j] = new_centroids[j] / counts[j]\n        new_cluster_indices = np.argmin(np.sum((X[:, np.newaxis, :] - centroids) ** 2, axis=2), axis=1)\n        if np.array_equal(cluster_indices, new_cluster_indices):\n            break\n    centroids_rounded = [np.round(centroid.tolist(), 4) for centroid in centroids]\n    centroids_rounded.sort(key=lambda x: (x[0], x))\n    return centroids_rounded"}
{"task_id": 109, "completion_id": 8, "solution": "import numpy as np\nimport random\nimport numpy as np\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    (m, n) = X.shape\n    centroids = [X[random.randint(0, m - 1)]]\n    distances = np.full(m, np.inf)\n    for _ in range(1, K):\n        for (i, x) in enumerate(X):\n            dists = [np.sum((x - c) ** 2) for c in centroids]\n            distances[i] = min(dists)\n        total = np.sum(distances)\n        probs = distances / total\n        cum_probs = np.cumsum(probs)\n        r = np.random.rand()\n        for (idx, p) in enumerate(cum_probs):\n            if r < p and idx not in [np.where((X == c).all(axis=1))[0][0] for c in centroids]:\n                centroids.append(X[idx])\n                break\n    centroids = np.array(centroids)\n    for _ in range(max_iter):\n        labels = np.argmin(np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2), axis=1)\n        new_centroids = np.copy(centroids)\n        for k in range(K):\n            mask = labels == k\n            cluster_points = X[mask]\n            if len(cluster_points) == 0:\n                continue\n            new_centroids[k] = np.mean(cluster_points, axis=0)\n        if np.allclose(centroids, new_centroids):\n            centroids = new_centroids\n            break\n        centroids = new_centroids\n    rounded_centroids = [list(np.round(centroid, 4)) for centroid in centroids.tolist()]\n    rounded_centroids.sort(key=lambda x: (x[0], x))\n    return rounded_centroids\nX = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\nK = 2\ncentroids = kmeans(X, K, random_state=42)"}
{"task_id": 109, "completion_id": 9, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n    \n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n    \n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    (m, n) = X.shape\n    centroids = np.zeros((K, n))\n    idx = random.randint(0, m - 1)\n    centroids[0] = X[idx]\n    for i in range(1, K):\n        D2 = np.min(([np.sum((x - c) ** 2) for c in centroids] for x in X))\n        probabilities = D2 / D2.sum()\n        cumulative_probabilities = np.cumsum(probabilities)\n        r = np.random.rand()\n        for (j, p) in enumerate(cumulative_probabilities):\n            if r < p:\n                centroids[i] = X[j]\n                break\n    for _ in range(max_iter):\n        labels = []\n        for x in X:\n            distances = [np.sum((x - c) ** 2) for c in centroids]\n            labels.append(np.argmin(distances))\n        if hasattr(kmeans, 'prev_labels'):\n            if labels == kmeans.prev_labels:\n                break\n        kmeans.prev_labels = labels\n        for i in range(K):\n            cluster_points = X[np.array(labels) == i]\n            if len(cluster_points) > 0:\n                centroids[i] = np.mean(cluster_points, axis=0)\n    result = [list(centroid.round(4)) for centroid in centroids]\n    result.sort(key=lambda x: (x[0], tuple(x)))\n    return result"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Convert a string to a fixed-length list of integer token ids.\n    \n    Args:\n        text: The input string to convert\n        time_steps: The fixed length of the output sequence\n        vocabulary: A dictionary mapping characters to integers\n    \n    Returns:\n        A list of integers representing the encoded string with fixed length\n    \"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    if len(encoded) > time_steps:\n        encoded = encoded[:time_steps]\n    elif len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Convert a list or array of integer ids back to text.\n    \n    Args:\n        indices: A list or array containing integer token ids\n        inverse_vocab: A dictionary mapping integers back to characters\n    \n    Returns:\n        The decoded human-readable string\n    \"\"\"\n    return ''.join((inverse_vocab[i] for i in indices if i != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encode, predict, and decode a text sample using a model.\n    \n    Args:\n        model: A neural network model that can make predictions\n        input_vocabulary: Dictionary mapping input characters to integers\n        inv_output_vocabulary: Dictionary mapping output integers to characters\n        text: The input text to encode and process\n        \n    Returns:\n        The decoded prediction string\n    \"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    batch = np.array([encoded])\n    predictions = model.predict(batch)\n    predicted_indices = np.argmax(predictions, axis=-1)\n    predicted_indices = predicted_indices[0]\n    decoded = int_to_string(predicted_indices, inv_output_vocabulary)\n    return decoded"}
{"task_id": 111, "completion_id": 1, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encodes a string to a fixed-length list of integers using a vocabulary.\n    Padding token is 0. Unknown characters are also encoded as 0.\n    \"\"\"\n    encoded = []\n    for char in text:\n        if char in vocabulary:\n            encoded.append(vocabulary[char])\n        else:\n            encoded.append(0)\n        if len(encoded) == time_steps:\n            break\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    return encoded\ndef int_to_string(indices: list[int], inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Decodes a list of integer indices back into a string using inverse vocabulary.\n    Padding tokens (0) are omitted.\n    \"\"\"\n    return ''.join([inverse_vocab[i] for i in indices if i != 0])\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Encodes the input text, performs model inference, and decodes the result.\n    \"\"\"\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_input_np = np.array(encoded_input).reshape(1, -1)\n    prediction = model.predict(encoded_input_np)\n    predicted_indices = np.argmax(prediction, axis=-1).flatten().tolist()\n    decoded_output = int_to_string(predicted_indices, inv_output_vocabulary)\n    return decoded_output"}
{"task_id": 111, "completion_id": 2, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Converts a text string to a fixed-length sequence of integers using the provided vocabulary.\n    Unknown characters and padding are encoded as 0.\n    \n    Args:\n        text: Input string to encode\n        time_steps: Fixed length of the output sequence\n        vocabulary: Mapping from characters to integer ids\n    \n    Returns:\n        List of integers representing the encoded text\n    \"\"\"\n    encoded = []\n    for char in text:\n        if char in vocabulary:\n            encoded.append(vocabulary[char])\n        else:\n            encoded.append(0)\n    if len(encoded) >= time_steps:\n        return encoded[:time_steps]\n    else:\n        return encoded + [0] * (time_steps - len(encoded))\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Converts a list of integer ids back to a text string using the provided inverse vocabulary.\n    Padding tokens (0) are ignored.\n    \n    Args:\n        indices: List of integer ids representing the encoded text\n        inverse_vocab: Mapping from integer ids to characters\n    \n    Returns:\n        Decoded text string\n    \"\"\"\n    return ''.join([inverse_vocab[i] for i in indices if i != 0])\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Encodes the input text, feeds it to a model, decodes the prediction, and returns the result.\n    \n    Args:\n        model: A machine learning model with a predict method\n        input_vocabulary: Vocabulary for encoding input text\n        inv_output_vocabulary: Inverse vocabulary for decoding predictions\n        text: Input text string\n    \n    Returns:\n        Decoded prediction string\n    \"\"\"\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    input_array = np.array([encoded_input])\n    predictions = model.predict(input_array)\n    predicted_ids = np.argmax(predictions, axis=-1).flatten().tolist()\n    return int_to_string(predicted_ids, inv_output_vocabulary)"}
{"task_id": 111, "completion_id": 3, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Converts a string to a fixed-length list of integers using the provided vocabulary.\n    \n    Parameters:\n        text (str): The input string.\n        time_steps (int): The fixed length of the output list.\n        vocabulary (dict[str, int]): Mapping from characters to integer token ids.\n    \n    Returns:\n        list[int]: The fixed-length encoded list of token ids.\n    \"\"\"\n    encoded = []\n    for char in text:\n        if char in vocabulary:\n            encoded.append(vocabulary[char])\n        else:\n            encoded.append(0)\n    if len(encoded) > time_steps:\n        encoded = encoded[:time_steps]\n    else:\n        encoded += [0] * (time_steps - len(encoded))\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Converts a list of integer token ids back into a string using the inverse vocabulary.\n    \n    Parameters:\n        indices (list[int] or np.ndarray): List of integer token ids.\n        inverse_vocab (dict[int, str]): Mapping from integer token ids to characters.\n    \n    Returns:\n        str: The decoded string (excluding padding tokens).\n    \"\"\"\n    return ''.join((inverse_vocab[i] for i in indices if i != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Process an input string through a trained model and return the decoded output.\n    \n    Parameters:\n        model: A trained model with a predict function.\n        input_vocabulary (dict[str, int]): Mapping from input characters to integers.\n        inv_output_vocabulary (dict[int, str]): Mapping from output integers to characters.\n        text (str): The input string to encode and predict on.\n    \n    Returns:\n        str: The decoded string predicted by the model.\n    \"\"\"\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    model_input = np.array([encoded_input])\n    model_output = model.predict(model_input)\n    predicted_indices = np.argmax(model_output, axis=-1)[0]\n    decoded_output = int_to_string(predicted_indices, inv_output_vocabulary)\n    return decoded_output"}
{"task_id": 111, "completion_id": 4, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Converts a string to a fixed-length list of integers using the provided vocabulary.\"\"\"\n    encoded = []\n    for char in text:\n        if char in vocabulary:\n            encoded.append(vocabulary[char])\n        else:\n            encoded.append(0)\n    if len(encoded) >= time_steps:\n        return encoded[:time_steps]\n    else:\n        return encoded + [0] * (time_steps - len(encoded))\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list of integers to a string using the inverse vocabulary.\"\"\"\n    return ''.join((inverse_vocab[idx] for idx in indices if idx != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes text, predicts with model, and decodes the output to a string.\"\"\"\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    batch = np.array([encoded_text])\n    predictions = model.predict(batch)\n    predicted_ids = np.argmax(predictions, axis=-1).flatten()\n    prediction_str = int_to_string(predicted_ids, inv_output_vocabulary)\n    return prediction_str"}
{"task_id": 111, "completion_id": 5, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Converts the input string to a fixed-length sequence of integer IDs.\n    \n    Args:\n        text: The input string to be encoded.\n        time_steps: The fixed length of the output sequence.\n        vocabulary: A dictionary mapping characters to integers.\n        \n    Returns:\n        A list of integer IDs representing the encoded string with fixed length.\n    \"\"\"\n    encoded = []\n    for char in text:\n        if char in vocabulary:\n            encoded.append(vocabulary[char])\n        else:\n            encoded.append(0)\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Converts a list of integer IDs back to a string.\n    \n    Args:\n        indices: A list of integer IDs to be converted.\n        inverse_vocab: A dictionary mapping integers to characters.\n        \n    Returns:\n        A string reconstructed from the integer IDs, ignoring padding tokens (0).\n    \"\"\"\n    return ''.join((inverse_vocab.get(idx, '') for idx in indices if idx != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Encodes text to integers, feeds it to the model, and decodes the prediction.\n    \n    Args:\n        model: A model with a predict method.\n        input_vocabulary: A dictionary mapping input characters to integers.\n        inv_output_vocabulary: A dictionary mapping output integers to characters.\n        text: The input string to process.\n        \n    Returns:\n        The decoded prediction string from the model.\n    \"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    input_batch = np.array([encoded])\n    predictions = model.predict(input_batch)\n    predicted_ids = np.argmax(predictions, axis=-1).flatten()\n    predicted_text = int_to_string(predicted_ids, inv_output_vocabulary)\n    return predicted_text"}
{"task_id": 111, "completion_id": 6, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Converts a text string to a fixed-length list of integer token ids.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list/array of integer ids back to text, ignoring padding tokens (0).\"\"\"\n    return ''.join((inverse_vocab[i] for i in indices if i != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes text, runs through model, and decodes the prediction.\"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_array = np.array([encoded])\n    prediction = model.predict(encoded_array)\n    predicted_indices = np.argmax(prediction, axis=-1)\n    prediction_string = int_to_string(predicted_indices[0], inv_output_vocabulary)\n    return prediction_string"}
{"task_id": 111, "completion_id": 7, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Converts a string to a fixed-length list of integers using the provided vocabulary.\n    \n    Args:\n        text (str): Input string to encode.\n        time_steps (int): Fixed length of the output list.\n        vocabulary (dict[str, int]): Mapping from characters to integers.\n        \n    Returns:\n        list[int]: Encoded list with fixed length.\n    \"\"\"\n    encoded = []\n    for char in text:\n        if char in vocabulary:\n            encoded.append(vocabulary[char])\n        else:\n            encoded.append(0)\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list of integers back into a string using the inverse vocabulary.\n    \n    Args:\n        indices (list[int] or np.ndarray): List of integer token IDs.\n        inverse_vocab (dict[int, str]): Mapping from integers to characters.\n        \n    Returns:\n        str: Decoded string.\n    \"\"\"\n    return ''.join([inverse_vocab[i] for i in indices if i != 0])\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Puts encoder, model prediction and decoder together.\n    \n    Args:\n        model: A model with a predict method.\n        input_vocabulary (dict[str, int]): Input vocabulary for encoding.\n        inv_output_vocabulary (dict[int, str]): Output inverse vocabulary for decoding.\n        text (str): The input string to process.\n    \n    Returns:\n        str: Final decoded prediction string.\n    \"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded = np.array(encoded).reshape(1, TIME_STEPS)\n    prediction = model.predict(encoded)\n    predicted_ids = np.argmax(prediction, axis=-1).flatten().tolist()\n    decoded = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded\nclass DummyModel:\n\n    def predict(self, x):\n        return np.random.rand(*x.shape, 100)\ninput_vocabulary = {chr(c): c - ord('a') + 1 for c in range(ord('a'), ord('z') + 1)}\ninv_output_vocabulary = {v: k for (k, v) in input_vocabulary.items()}\nmodel = DummyModel()\ntext = 'hello world'\nprediction = run_example(model, input_vocabulary, inv_output_vocabulary, text)"}
{"task_id": 111, "completion_id": 8, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Converts input string to fixed-length list of integers using the given vocabulary.\n    \n    Args:\n        text: Input string to be encoded.\n        time_steps: The fixed length of the output list.\n        vocabulary: A dictionary mapping characters to integers.\n    \n    Returns:\n        A list of integers of length `time_steps`.\n    \"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Converts a list of integer ids to a string using the inverse vocabulary.\n    \n    Args:\n        indices: A list or numpy array of integer token ids.\n        inverse_vocab: A dictionary mapping integers back to characters.\n    \n    Returns:\n        The decoded string, with padding tokens (0) stripped.\n    \"\"\"\n    filtered_indices = [idx for idx in indices if idx != 0]\n    return ''.join([inverse_vocab[idx] for idx in filtered_indices])\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Encodes the input string, runs the model, and decodes the prediction back to text.\n    \n    Args:\n        model: A model object with a `predict` method.\n        input_vocabulary: Mapping from input characters to integers.\n        inv_output_vocabulary: Mapping from output integer ids to characters.\n        text: Input text string to be processed.\n    \n    Returns:\n        Decoded string predicted by the model.\n    \"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    input_array = np.array([encoded])\n    predictions = model.predict(input_array)\n    predicted_ids = np.argmax(predictions, axis=-1).flatten()\n    decoded_string = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_string"}
{"task_id": 111, "completion_id": 9, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Converts a string to a fixed-length list of integer token ids.\n    \n    If the string is shorter than TIME_STEPS, pads with 0s on the right.\n    If the string is longer than TIME_STEPS, truncates to the first TIME_STEPS characters.\n    Characters not found in the vocabulary are encoded as 0.\n    \"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text[:time_steps]]\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Converts a list of character indices back to a string.\n    Padding tokens (id 0) are ignored.\n    \"\"\"\n    return ''.join((inverse_vocab[index] for index in indices if index != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Encodes a text string using input_vocabulary, makes a prediction with the model,\n    and decodes the result using inv_output_vocabulary.\n    Returns the predicted string.\n    \"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    batch = np.array([encoded])\n    prediction = model.predict(batch)\n    predicted_ids = np.argmax(prediction, axis=-1).flatten()\n    return int_to_string(predicted_ids, inv_output_vocabulary)"}
{"task_id": 113, "completion_id": 0, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        global EXAMPLES\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        predicted_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(predicted_chars)\n        print(f'input:  {example}')\n        print(f'output: {predicted_string}')\n        predictions.append(predicted_string)\n    return predictions"}
{"task_id": 113, "completion_id": 1, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        predicted_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(predicted_chars)\n        print(f'input:  {example}')\n        print(f'output: {predicted_string}')\n        predictions.append(predicted_string)\n    return predictions"}
{"task_id": 113, "completion_id": 2, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        global EXAMPLES\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        predicted_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(predicted_chars)\n        print(f'input:  {example}')\n        print(f'output: {predicted_string}')\n        predictions.append(predicted_string)\n    return predictions"}
{"task_id": 113, "completion_id": 3, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    examples = examples if examples is not None else EXAMPLES\n    predictions = []\n    for example in examples:\n        character_output = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(character_output)\n        print(f'input:  {example}')\n        print(f'output: {predicted_string}\\n')\n        predictions.append(predicted_string)\n    return predictions"}
{"task_id": 113, "completion_id": 4, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        char_output = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(char_output)\n        print(f'input:  {example}')\n        print(f'output: {predicted_string}')\n        predictions.append(predicted_string)\n    return predictions"}
{"task_id": 113, "completion_id": 5, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        predicted_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_str = ''.join(predicted_chars)\n        print(f'input:  {example}')\n        print(f'output: {predicted_str}')\n        predictions.append(predicted_str)\n    return predictions"}
{"task_id": 113, "completion_id": 6, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        global EXAMPLES\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        prediction = ''.join(chars)\n        print(f'input:  {example}')\n        print(f'output: {prediction}')\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 113, "completion_id": 7, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        predicted_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_str = ''.join(predicted_chars)\n        print(f'input:  {example}')\n        print(f'output: {predicted_str}')\n        predictions.append(predicted_str)\n    return predictions"}
{"task_id": 113, "completion_id": 8, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        char_predictions = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(char_predictions)\n        print(f'input:  {example}')\n        print(f'output: {predicted_string}\\n')\n        predictions.append(predicted_string)\n    return predictions"}
{"task_id": 113, "completion_id": 9, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        prediction_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        prediction_str = ''.join(prediction_chars)\n        print(f'input:  {example}')\n        print(f'output: {prediction_str}')\n        predictions.append(prediction_str)\n    return predictions"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    (m, n) = X.shape\n    if y.ndim == 1:\n        y = y.reshape(-1, 1)\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss_rounded = round(float(loss), 4)\n    gradient = X.T @ (p - y) / m\n    gradient_rounded = np.round(gradient, 4).tolist()\n    return (loss_rounded, gradient_rounded)"}
{"task_id": 115, "completion_id": 1, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    (m, n) = X.shape\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    eps = 1e-20\n    p = np.clip(p, eps, 1 - eps)\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = round(loss, 4)\n    gradient = X.T @ (p - y) / m\n    gradient = np.round(gradient, 4)\n    return (loss, gradient.tolist())"}
{"task_id": 115, "completion_id": 2, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    (m, n) = X.shape\n    if y.ndim == 1:\n        y = y.reshape(-1, 1)\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = round(loss, 4)\n    gradient = X.T @ (p - y) / m\n    gradient = [[round(g, 4)] for g in gradient]\n    return (loss, gradient)"}
{"task_id": 115, "completion_id": 3, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    (m, n) = X.shape\n    if y.ndim == 2:\n        y = y.ravel()\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = round(loss, 4)\n    gradient = X.T @ (p - y) / m\n    gradient = np.round(gradient, 4)\n    gradient = gradient.tolist()\n    return (loss, gradient)\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([0, 1, 1])\nw = np.array([0.1, -0.2])"}
{"task_id": 115, "completion_id": 4, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    (m, n) = X.shape\n    y = y.ravel()\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = X.T @ (p - y) / m\n    gradient = gradient.reshape(-1, 1)\n    loss_rounded = round(loss, 4)\n    gradient_rounded = np.round(gradient, 4).tolist()\n    return (loss_rounded, gradient_rounded)"}
{"task_id": 115, "completion_id": 5, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    (m, n) = X.shape\n    y = y.reshape(-1, 1)\n    w = w.reshape(-1, 1)\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = X.T @ (p - y) / m\n    loss_rounded = round(loss, 4)\n    gradient_rounded = np.round(gradient, 4).tolist()\n    return (loss_rounded, gradient_rounded)"}
{"task_id": 115, "completion_id": 6, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"\n    Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    y = y.ravel()\n    X = X.astype(float)\n    w = w.astype(float)\n    z = X @ w\n    p = 1.0 / (1.0 + np.exp(-z))\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1.0 - epsilon)\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    m = X.shape[0]\n    gradient = X.T @ (p - y) / m\n    loss = round(loss, 4)\n    gradient = np.round(gradient, 4).tolist()\n    return (loss, gradient)"}
{"task_id": 115, "completion_id": 7, "solution": "import numpy as np\nimport numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    (m, n) = X.shape\n    y = y.ravel()\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    eps = 1e-20\n    p[p == 0] = eps\n    p[p == 1] = 1 - eps\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    grad = X.T @ (p - y) / m\n    grad = grad.reshape(-1, 1)\n    return (round(loss, 4), np.round(grad, 4).tolist())\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([[0], [0], [1], [1]])\nw = np.array([[0.5], [0.5]])"}
{"task_id": 115, "completion_id": 8, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    (m, _) = X.shape\n    if w.ndim == 1:\n        w = w.reshape(-1, 1)\n    if y.ndim == 1:\n        y = y.reshape(-1, 1)\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    eps = 1e-20\n    p = np.clip(p, eps, 1 - eps)\n    loss = -(1 / m) * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = round(loss, 4)\n    gradient = 1 / m * X.T @ (p - y)\n    gradient = np.round(gradient, 4).tolist()\n    return (loss, gradient)"}
{"task_id": 115, "completion_id": 9, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    (m, n) = X.shape\n    y = y.reshape(-1, 1)\n    w = w.reshape(-1, 1)\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    eps = 1e-20\n    p = np.clip(p, eps, 1 - eps)\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = round(loss, 4)\n    gradient = X.T @ (p - y) / m\n    gradient = np.round(gradient, 4)\n    gradient = gradient.tolist()\n    return (loss, gradient)\nX = np.array([[1, 2], [2, 3], [3, 4]])\ny = np.array([0, 1, 1])\nw = np.array([0.5, -0.5])"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> List[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf: Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the predicted class for the corresponding row in X_test.\n    \"\"\"\n    n_clf = max(1, n_clf)\n    (m, n) = X_train.shape\n    k = X_test.shape[0]\n    weights = np.ones(m) / m\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        for feature_idx in range(n):\n            for threshold in [X_train[:, feature_idx].min(), X_train[:, feature_idx].max()]:\n                for comparison in ['<', '>']:\n                    predictions = np.ones(m)\n                    if comparison == '<':\n                        predictions[X_train[:, feature_idx] >= threshold] = -1\n                    else:\n                        predictions[X_train[:, feature_idx] <= threshold] = -1\n                    error = np.sum(weights[y_train != predictions])\n                    if error == 0:\n                        alpha = float('inf')\n                    else:\n                        alpha = 0.5 * np.log((1 - error) / error)\n                    if error < best_error:\n                        best_error = error\n                        best_stump = {'feature': feature_idx, 'threshold': threshold, 'comparison': comparison}\n                        best_alpha = alpha\n        if best_error >= 0.5:\n            break\n        stumps.append(best_stump)\n        alphas.append(best_alpha)\n        predictions = np.ones(m)\n        feature = best_stump['feature']\n        threshold = best_stump['threshold']\n        comparison = best_stump['comparison']\n        if comparison == '<':\n            predictions[X_train[:, feature] >= threshold] = -1\n        else:\n            predictions[X_train[:, feature] <= threshold] = -1\n        weights *= np.exp(-best_alpha * y_train * predictions)\n        weights /= np.sum(weights)\n    predictions_test = np.zeros(k)\n    for (stump, alpha) in zip(stumps, alphas):\n        feature = stump['feature']\n        threshold = stump['threshold']\n        comparison = stump['comparison']\n        pred = np.ones(k)\n        if comparison == '<':\n            pred[X_test[:, feature] >= threshold] = -1\n        else:\n            pred[X_test[:, feature] <= threshold] = -1\n        predictions_test += alpha * pred\n    final_pred = np.sign(predictions_test)\n    return final_pred.astype(int).tolist()\nX_train = np.array([[1, 2], [2, 3], [3, 1], [4, 4]])\ny_train = np.array([1, -1, -1, 1])\nX_test = np.array([[2, 2], [3, 3]])\npredictions = adaboost_predict(X_train, y_train, X_test, n_clf=5)"}
{"task_id": 118, "completion_id": 1, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    k = X_test.shape[0]\n    D = np.full(m, 1 / m)\n    weak_classifiers = []\n    alphas = []\n    for t in range(n_clf):\n        best_error = float('inf')\n        best_rule = None\n        for feature_i in range(n):\n            for direction in [1, -1]:\n                thresholds = np.unique(X_train[:, feature_i])\n                for threshold in thresholds:\n                    predictions = np.where(X_train[:, feature_i] >= threshold, direction, -direction)\n                    error = np.dot(D, predictions != y_train)\n                    if error < best_error:\n                        best_error = error\n                        best_rule = {'feature': feature_i, 'threshold': threshold, 'direction': direction}\n            if best_error > 0.5:\n                best_error = best_error - 1\n        if best_error < 0.5:\n            epsilon = best_error\n            alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n            alphas.append(alpha)\n            weak_classifiers.append(best_rule)\n            predictions = np.where(X_train[:, best_rule['feature']] >= best_rule['threshold'], best_rule['direction'], -best_rule['direction'])\n            error_mask = predictions != y_train\n            D *= np.exp(-alpha * y_train * predictions)\n            D /= np.sum(D)\n        else:\n            break\n    predictions = np.zeros(k)\n    for i in range(len(alphas)):\n        rule = weak_classifiers[i]\n        alpha = alphas[i]\n        feature_i = rule['feature']\n        threshold = rule['threshold']\n        direction = rule['direction']\n        feat_col = X_test[:, feature_i]\n        stump_pred = np.where(feat_col >= threshold, direction, -direction)\n        predictions += alpha * stump_pred\n    final_labels = np.sign(predictions)\n    return list(final_labels.astype(int))\nX_train = np.array([[1], [2], [3], [4], [5]])\ny_train = np.array([1, 1, -1, -1, -1])\nX_test = np.array([[2.5], [3.5]])"}
{"task_id": 118, "completion_id": 2, "solution": "import numpy as np\nimport numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    k = X_test.shape[0]\n    n_clf = max(n_clf, 1)\n    weights = np.full(m, 1 / m)\n    weak_classifiers = []\n    alpha_vals = []\n    for t in range(n_clf):\n        best_error = float('inf')\n        best_stump = {}\n        best_predictions = np.zeros(m)\n        for i in range(n):\n            unique_vals = np.unique(X_train[:, i])\n            unique_vals.sort()\n            thresholds = 0.5 * (unique_vals[:-1] + unique_vals[1:])\n            for threshold in thresholds:\n                for direction in [-1, 1]:\n                    prediction = np.where(X_train[:, i] < threshold, direction, -direction)\n                    weighted_error = np.sum(weights[y_train != prediction])\n                    if weighted_error < best_error:\n                        best_error = weighted_error\n                        best_stump = {'feature': i, 'threshold': threshold, 'direction': direction}\n                        best_predictions = prediction.copy()\n        if best_error >= 0.5:\n            return [1] * k\n        epsilon = best_error\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        alpha_vals.append(alpha)\n        prediction = best_predictions\n        weights *= np.exp(-alpha * y_train * prediction)\n        weights /= np.sum(weights)\n        weak_classifiers.append(best_stump)\n    test_predictions = np.zeros((k, n_clf))\n    for i in range(n_clf):\n        feature = weak_classifiers[i]['feature']\n        threshold = weak_classifiers[i]['threshold']\n        direction = weak_classifiers[i]['direction']\n        pred = np.where(X_test[:, feature] < threshold, direction, -direction)\n        test_predictions[:, i] = alpha_vals[i] * pred\n    final_prediction = np.sign(np.sum(test_predictions, axis=1))\n    return [int(pred) for pred in final_prediction]\nX_train = np.array([[1, 2], [2, 3], [3, 1], [4, 3]])\ny_train = np.array([1, 1, -1, -1])\nX_test = np.array([[1.5, 2.5], [3.5, 2]])"}
{"task_id": 118, "completion_id": 3, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m_train, n) = X_train.shape\n    n_test = X_test.shape[0]\n    n_clf = max(1, n_clf)\n    D = np.ones(m_train) / m_train\n    stumps = []\n    alphas = []\n    for t in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        best_prediction = None\n        for feature_idx in range(n):\n            unique_vals = np.unique(X_train[:, feature_idx])\n            for threshold in unique_vals:\n                for direction in [-1, 1]:\n                    prediction = np.ones(m_train) * direction\n                    prediction[X_train[:, feature_idx] < threshold] = -direction\n                    error = np.dot(D, (prediction != y_train).astype(float))\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_idx, threshold, direction)\n                        best_prediction = prediction\n        if best_error == 0:\n            best_error = 1e-10\n        elif best_error >= 1:\n            best_error = 1 - 1e-10\n        alpha = 0.5 * np.log((1 - best_error) / best_error)\n        stumps.append(best_stump)\n        alphas.append(alpha)\n        prediction = best_prediction\n        D *= np.exp(-alpha * y_train * prediction)\n        D /= np.sum(D)\n    final_predictions = np.zeros(n_test)\n    for (alpha, (feature_idx, threshold, direction)) in zip(alphas, stumps):\n        prediction = np.ones(n_test) * direction\n        prediction[X_test[:, feature_idx] < threshold] = -direction\n        final_predictions += alpha * prediction\n    return list(np.sign(final_predictions).astype(int))"}
{"task_id": 118, "completion_id": 4, "solution": "import numpy as np\nfrom typing import List\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> List[int]:\n    \"\"\"\n    Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_clf = max(1, n_clf)\n    m = len(y_train)\n    num_features = X_train.shape[1]\n    D = np.full(m, fill_value=1 / m)\n    weak_learners = []\n    alphas = []\n    for t in range(n_clf):\n        best_stump = None\n        best_error = float('inf')\n        best_prediction = None\n        for feature_idx in range(num_features):\n            unique_values = np.unique(X_train[:, feature_idx])\n            candidate_thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n            for threshold in candidate_thresholds:\n                pred = np.where(X_train[:, feature_idx] <= threshold, 1, -1)\n                error = np.sum(D[y_train != pred])\n                if error < best_error:\n                    best_error = error\n                    best_stump = ('<=', feature_idx, threshold)\n                    best_prediction = pred\n                pred = np.where(X_train[:, feature_idx] > threshold, 1, -1)\n                error = np.sum(D[y_train != pred])\n                if error < best_error:\n                    best_error = error\n                    best_stump = ('>', feature_idx, threshold)\n                    best_prediction = pred\n        if best_error >= 0.5:\n            break\n        epsilon_t = best_error\n        alpha_t = 0.5 * np.log((1 - epsilon_t) / epsilon_t)\n        alphas.append(alpha_t)\n        weak_learners.append(best_stump)\n        y_pred = best_prediction\n        D *= np.exp(-alpha_t * y_train * y_pred)\n        D /= np.sum(D)\n    predictions = np.zeros(X_test.shape[0])\n    for ((condition, feature_idx, threshold), alpha) in zip(weak_learners, alphas):\n        if condition == '<=':\n            pred = np.where(X_test[:, feature_idx] <= threshold, 1, -1)\n        else:\n            pred = np.where(X_test[:, feature_idx] > threshold, 1, -1)\n        predictions += alpha * pred\n    return list(np.sign(predictions))"}
{"task_id": 118, "completion_id": 5, "solution": "import numpy as np\ndef find_best_stump(X, y, weights):\n    \"\"\"Find the best decision stump and its parameters (feature, threshold, direction)\"\"\"\n    (m, n) = X.shape\n    best_error = np.inf\n    best_stump = None\n    best_prediction = None\n    for i in range(n):\n        unique_vals = np.unique(X[:, i])\n        thresholds = (unique_vals[:-1] + unique_vals[1:]) / 2\n        for threshold in thresholds:\n            for direction in [1, -1]:\n                prediction = np.ones(m)\n                if direction == 1:\n                    prediction[X[:, i] <= threshold] = -1\n                else:\n                    prediction[X[:, i] > threshold] = -1\n                error = np.sum(weights[y != prediction])\n                if error < best_error:\n                    best_error = error\n                    best_stump = (i, threshold, direction)\n                    best_prediction = prediction\n    return {'feature': best_stump[0], 'threshold': best_stump[1], 'direction': best_stump[2], 'prediction': best_prediction, 'error': best_error}\ndef predict_stump(X, feature, threshold, direction):\n    \"\"\"Make prediction using a single decision stump\"\"\"\n    pred = np.ones(X.shape[0])\n    if direction == 1:\n        pred[X[:, feature] <= threshold] = -1\n    else:\n        pred[X[:, feature] > threshold] = -1\n    return pred\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\"\"\"\n    m = X_train.shape[0]\n    n_clf = max(1, n_clf)\n    w = np.ones(m) / m\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        best_stump_info = find_best_stump(X_train, y_train, w)\n        pred = best_stump_info['prediction']\n        error = best_stump_info['error']\n        if error == 0:\n            error = 1e-10\n        elif error >= 0.5:\n            break\n        alpha = 0.5 * np.log((1 - error) / error)\n        alphas.append(alpha)\n        w *= np.exp(-alpha * y_train * pred)\n        w /= np.sum(w)\n        stumps.append(best_stump_info)\n    k = X_test.shape[0]\n    final_predictions = np.zeros(k)\n    for (idx, stump) in enumerate(stumps):\n        pred = predict_stump(X_test, stump['feature'], stump['threshold'], stump['direction'])\n        final_predictions += alphas[idx] * pred\n    return [1 if p > 0 else -1 for p in final_predictions]\nX_train = np.array([[1, 2], [2, 3], [3, 1], [4, 4]])\ny_train = np.array([1, 1, -1, -1])\nX_test = np.array([[2, 2], [3, 2]])"}
{"task_id": 118, "completion_id": 6, "solution": "import numpy as np\nclass DecisionStump:\n\n    def __init__(self):\n        self.feature_idx = 0\n        self.threshold = 0\n        self.direction = 1\n\n    def fit(self, X, y, sample_weights):\n        (m, n) = X.shape\n        min_error = float('inf')\n        best_stump = None\n        for feat_idx in range(n):\n            feature_vals = X[:, feat_idx]\n            unique_vals = np.unique(feature_vals)\n            for threshold in unique_vals:\n                for direction in [1, -1]:\n                    y_pred = np.ones(m)\n                    if direction == 1:\n                        y_pred[feature_vals < threshold] = -1\n                    else:\n                        y_pred[feature_vals >= threshold] = -1\n                    error = np.sum(sample_weights[y_pred != y])\n                    if error < min_error:\n                        min_error = error\n                        self.feature_idx = feat_idx\n                        self.threshold = threshold\n                        self.direction = direction\n        return min_error\n\n    def predict(self, X):\n        feature_vals = X[:, self.feature_idx]\n        y_pred = np.ones(X.shape[0])\n        if self.direction == 1:\n            y_pred[feature_vals < self.threshold] = -1\n        else:\n            y_pred[feature_vals >= self.threshold] = -1\n        return y_pred\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, _) = X_train.shape\n    sample_weights = np.full(m, 1 / m)\n    stumps = []\n    alphas = []\n    n_clf = max(1, n_clf)\n    for _ in range(n_clf):\n        stump = DecisionStump()\n        epsilon = stump.fit(X_train, y_train, sample_weights)\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        alphas.append(alpha)\n        stumps.append(stump)\n        y_pred = stump.predict(X_train)\n        sample_weights *= np.exp(-alpha * y_train * y_pred)\n        sample_weights /= np.sum(sample_weights)\n    k = X_test.shape[0]\n    predictions = np.zeros(k)\n    for (alpha, stump) in zip(alphas, stumps):\n        predictions += alpha * stump.predict(X_test)\n    return [1 if pred > 0 else -1 for pred in predictions]"}
{"task_id": 118, "completion_id": 7, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n    \n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    k = X_test.shape[0]\n    if n_clf < 1:\n        n_clf = 1\n    D = np.full(m, 1 / m)\n    stumps = []\n    alphas = []\n    for t in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        best_pred = None\n        for feature_idx in range(n):\n            unique_vals = np.unique(X_train[:, feature_idx])\n            thresholds = unique_vals[:-1] + np.diff(unique_vals) / 2\n            for th in thresholds:\n                for direction in [-1, 1]:\n                    pred = direction * np.where(X_train[:, feature_idx] <= th, 1, -1)\n                    error = np.sum(D * (pred != y_train))\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_idx, th, direction)\n                        best_pred = pred\n        eps = max(best_error, 1e-10)\n        alpha = 0.5 * np.log((1 - eps) / eps)\n        alphas.append(alpha)\n        for i in range(m):\n            D[i] *= np.exp(-alpha * y_train[i] * best_pred[i])\n        D /= np.sum(D)\n        stumps.append(best_stump)\n    predictions = np.zeros(k)\n    for ((feature_idx, th, direction), alpha) in zip(stumps, alphas):\n        column_vals = X_test[:, feature_idx]\n        stump_pred = direction * np.where(column_vals <= th, 1, -1)\n        predictions += alpha * stump_pred\n    return list(np.sign(predictions).astype(int))\nX_train = np.array([[1.0], [2.0], [3.0], [4.0]])\ny_train = np.array([1, -1, -1, 1])\nX_test = np.array([[1.5], [2.5], [3.5]])"}
{"task_id": 118, "completion_id": 8, "solution": "import numpy as np\nimport numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    D = np.ones(m) / m\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        best_dim = None\n        best_threshold = None\n        best_direction = None\n        for feature in range(n):\n            feature_values = X_train[:, feature]\n            thresholds = np.unique(feature_values)\n            for threshold in thresholds:\n                for direction in [1, -1]:\n                    predictions = np.ones(m)\n                    if direction == 1:\n                        predictions[X_train[:, feature] <= threshold] = -1\n                    else:\n                        predictions[X_train[:, feature] > threshold] = -1\n                    error = np.dot(D, predictions != y_train)\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature, threshold, direction)\n                        best_dim = feature\n                        best_threshold = threshold\n                        best_direction = direction\n        if best_error == 0:\n            best_error = 1e-10\n        elif best_error >= 1:\n            best_error = 1 - 1e-10\n        alpha = 0.5 * np.log((1 - best_error) / best_error)\n        alphas.append(alpha)\n        stumps.append(best_stump)\n        predictions = np.zeros(m)\n        (feature, threshold, direction) = best_stump\n        if direction == 1:\n            predictions[X_train[:, feature] <= threshold] = -1\n        else:\n            predictions[X_train[:, feature] > threshold] = -1\n        predictions = np.where(predictions == 0, 1, predictions)\n        D *= np.exp(-alpha * y_train * predictions)\n        D /= np.sum(D)\n    k = X_test.shape[0]\n    y_pred = np.zeros(k)\n    for (alpha, (feature, threshold, direction)) in zip(alphas, stumps):\n        stump_pred = np.ones(k)\n        if direction == 1:\n            stump_pred[X_test[:, feature] <= threshold] = -1\n        else:\n            stump_pred[X_test[:, feature] > threshold] = -1\n        y_pred += alpha * stump_pred\n    return list(np.sign(y_pred).astype(int))\nX_train = np.array([[1, 2], [2, 3], [3, 1], [4, 4], [5, 5]])\ny_train = np.array([1, 1, -1, -1, 1])\nX_test = np.array([[2, 2], [4, 5]])\npredictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)"}
{"task_id": 118, "completion_id": 9, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    k = X_test.shape[0]\n    n_clf = max(1, n_clf)\n    w = np.ones(m) / m\n    classifiers = []\n    alphas = []\n    for t in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        for feature_idx in range(n):\n            unique_vals = np.unique(X_train[:, feature_idx])\n            candidates = [(unique_vals[i] + unique_vals[i + 1]) / 2 for i in range(len(unique_vals) - 1)]\n            candidates.append(-np.inf)\n            candidates.append(np.inf)\n            for threshold in candidates:\n                for direction in [-1, 1]:\n                    y_pred = np.where(X_train[:, feature_idx] <= threshold, direction, -direction)\n                    error = np.sum(w[y_pred != y_train])\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_idx, threshold, direction)\n        epsilon = best_error\n        if epsilon == 0:\n            epsilon = 1e-10\n        elif epsilon == 1:\n            break\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        alphas.append(alpha)\n        classifiers.append(best_stump)\n        y_pred_best = np.where(X_train[:, best_stump[0]] <= best_stump[1], best_stump[2], -best_stump[2])\n        w *= np.exp(-alpha * y_train * y_pred_best)\n        w /= np.sum(w)\n    prediction = np.zeros(k)\n    for ((feature_idx, threshold, direction), alpha) in zip(classifiers, alphas):\n        y_pred = np.where(X_test[:, feature_idx] <= threshold, direction, -direction)\n        prediction += alpha * y_pred\n    return [1 if p > 0 else -1 for p in prediction]\nX_train = np.array([[2, 3], [5, 4], [1, 1], [4, 2], [0, 5]])\ny_train = np.array([1, -1, 1, -1, 1])\nX_test = np.array([[1, 2], [3, 5]])"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    unique_classes = np.unique(y)\n    n_classes = len(unique_classes)\n    if n_components <= 0:\n        return []\n    if n_components > n_features:\n        n_components = n_features\n    global_mean = np.mean(X, axis=0)\n    S_W = np.zeros((n_features, n_features))\n    for c in unique_classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        deviations = X_c - mean_c\n        S_W += deviations.T @ deviations\n    S_B = np.zeros((n_features, n_features))\n    for c in unique_classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        N_c = X_c.shape[0]\n        mean_diff = mean_c - global_mean\n        S_B += N_c * np.outer(mean_diff, mean_diff)\n    A = np.linalg.pinv(S_W) @ S_B\n    (eigen_values, eigen_vectors) = np.linalg.eigh(A)\n    idx = np.argsort(eigen_values)[::-1]\n    eigen_values = eigen_values[idx]\n    eigen_vectors = eigen_vectors[:, idx]\n    W = eigen_vectors[:, :n_components]\n    for i in range(W.shape[1]):\n        vec = W[:, i]\n        nonzeros = vec[vec != 0]\n        if nonzeros[0] < 0:\n            W[:, i] = -vec\n    projected_data = X @ W\n    return [[round(val, 4) for val in sample] for sample in projected_data.tolist()]\nX = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\nn_components = 1"}
{"task_id": 128, "completion_id": 1, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    if n_components <= 0:\n        return []\n    (n_samples, d) = X.shape\n    mu = np.mean(X, axis=0)\n    S_W = np.zeros((d, d))\n    for c in np.unique(y):\n        X_c = X[y == c]\n        mu_c = np.mean(X_c, axis=0)\n        dev_from_mean = X_c - mu_c\n        S_W += np.dot(dev_from_mean.T, dev_from_mean)\n    S_B = np.zeros((d, d))\n    for c in np.unique(y):\n        X_c = X[y == c]\n        mu_c = np.mean(X_c, axis=0)\n        N_c = X_c.shape[0]\n        dev = (mu_c - mu).reshape(-1, 1)\n        S_B += N_c * np.dot(dev, dev.T)\n    S_W_inv = np.linalg.pinv(S_W)\n    A = np.dot(S_W_inv, S_B)\n    (eig_vals, eig_vecs) = np.linalg.eigh(A)\n    idx = np.argsort(eig_vals)[::-1]\n    eig_vals = eig_vals[idx]\n    eig_vecs = eig_vecs[:, idx]\n    for i in range(eig_vecs.shape[1]):\n        first_non_zero_index = np.abs(eig_vecs[:, i]).argmax()\n        if eig_vecs[first_non_zero_index, i] < 0:\n            eig_vecs[:, i] *= -1\n    W = eig_vecs[:, :n_components]\n    X_projected = np.dot(X, W).round(4)\n    return X_projected.tolist()"}
{"task_id": 128, "completion_id": 2, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    if n_components == 0:\n        return []\n    (n_samples, n_features) = X.shape\n    class_labels = np.unique(y)\n    S_W = np.zeros((n_features, n_features))\n    for c in class_labels:\n        X_c = X[y == c]\n        mu_c = np.mean(X_c, axis=0)\n        X_c_centered = X_c - mu_c\n        S_W += X_c_centered.T @ X_c_centered\n    mu = np.mean(X, axis=0)\n    S_B = np.zeros((n_features, n_features))\n    for c in class_labels:\n        X_c = X[y == c]\n        N_c = X_c.shape[0]\n        mu_c = np.mean(X_c, axis=0)\n        diff = mu_c - mu\n        S_B += N_c * np.outer(diff, diff)\n    A = np.linalg.pinv(S_W) @ S_B\n    (eigen_values, eigen_vectors) = np.linalg.eigh(A)\n    idx = np.argsort(eigen_values)[::-1]\n    eigen_values = eigen_values[idx]\n    eigen_vectors = eigen_vectors[:, idx]\n    for i in range(eigen_vectors.shape[1]):\n        for j in range(eigen_vectors.shape[0]):\n            if abs(eigen_vectors[j, i]) > 1e-10:\n                if eigen_vectors[j, i] < 0:\n                    eigen_vectors[:, i] = -eigen_vectors[:, i]\n                break\n    W = eigen_vectors[:, :n_components]\n    X_projected = X @ W\n    X_projected = np.round(X_projected, 4)\n    return X_projected.tolist()"}
{"task_id": 128, "completion_id": 3, "solution": "import numpy as np\nimport numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    mean_total = np.mean(X, axis=0)\n    classes = np.unique(y)\n    S_W = np.zeros((n_features, n_features))\n    for c in classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        dev_c = X_c - mean_c\n        S_W += dev_c.T @ dev_c\n    S_B = np.zeros((n_features, n_features))\n    for c in classes:\n        X_c = X[y == c]\n        N_c = X_c.shape[0]\n        mean_c = np.mean(X_c, axis=0)\n        dev_bc = (mean_c - mean_total).reshape(-1, 1)\n        S_B += N_c * (dev_bc @ dev_bc.T)\n    A = np.linalg.pinv(S_W) @ S_B\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    for i in range(eigenvectors.shape[1]):\n        vec = eigenvectors[:, i]\n        first_nonzero = next((i for (i, val) in enumerate(vec) if abs(val) > 1e-10), None)\n        if first_nonzero is not None and vec[first_nonzero] < 0:\n            eigenvectors[:, i] = -vec\n    if n_components == 0 or n_components > n_features:\n        return []\n    W = eigenvectors[:, :n_components]\n    X_projected = X @ W\n    X_projected_rounded = np.round(X_projected, 4)\n    return X_projected_rounded.tolist()\nX = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\nn_components = 1"}
{"task_id": 128, "completion_id": 4, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    class_labels = np.unique(y)\n    mean_global = np.mean(X, axis=0)\n    S_W = np.zeros((n_features, n_features))\n    for c in class_labels:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        n_c = X_c.shape[0]\n        S_W += np.dot((X_c - mean_c).T, X_c - mean_c)\n    S_B = np.zeros((n_features, n_features))\n    for c in class_labels:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        n_c = X_c.shape[0]\n        mean_diff = (mean_c - mean_global).reshape(n_features, 1)\n        S_B += n_c * np.dot(mean_diff, mean_diff.T)\n    S_W_inv = np.linalg.pinv(S_W)\n    A = np.dot(S_W_inv, S_B)\n    (eigen_values, eigen_vectors) = np.linalg.eigh(A)\n    idx = np.argsort(eigen_values)[::-1]\n    eigen_values = eigen_values[idx]\n    eigen_vectors = eigen_vectors[:, idx]\n    for i in range(eigen_vectors.shape[1]):\n        first_non_zero = next((j for j in range(n_features) if abs(eigen_vectors[j, i]) > 1e-10), None)\n        if first_non_zero is not None and eigen_vectors[first_non_zero, i] < 0:\n            eigen_vectors[:, i] *= -1\n    W = eigen_vectors[:, :n_components]\n    X_projected = np.dot(X, W)\n    X_projected = np.around(X_projected, decimals=4)\n    return X_projected.tolist()"}
{"task_id": 128, "completion_id": 5, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    unique_classes = np.unique(y)\n    n_classes = len(unique_classes)\n    if n_components == 0:\n        return []\n    global_mean = np.mean(X, axis=0)\n    S_W = np.zeros((n_features, n_features))\n    for c in unique_classes:\n        class_samples = X[y == c]\n        class_mean = np.mean(class_samples, axis=0)\n        deviances = class_samples - class_mean\n        S_W += np.dot(deviances.T, deviances)\n    S_B = np.zeros((n_features, n_features))\n    for c in unique_classes:\n        class_samples = X[y == c]\n        N_c = class_samples.shape[0]\n        class_mean = np.mean(class_samples, axis=0)\n        deviation = (class_mean - global_mean).reshape(-1, 1)\n        S_B += N_c * np.dot(deviation, deviation.T)\n    A = np.linalg.pinv(S_W) @ S_B\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    for i in range(eigenvectors.shape[1]):\n        first_non_zero = np.argwhere(eigenvectors[:, i] != 0).flatten()[0]\n        if eigenvectors[first_non_zero, i] < 0:\n            eigenvectors[:, i] *= -1\n    W = eigenvectors[:, :n_components]\n    projected = np.dot(X, W)\n    projected = np.round(projected, 4).tolist()\n    return projected"}
{"task_id": 128, "completion_id": 6, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    class_labels = np.unique(y)\n    S_W = np.zeros((n_features, n_features))\n    for label in class_labels:\n        X_c = X[y == label]\n        mu_c = np.mean(X_c, axis=0)\n        S_c = np.zeros((n_features, n_features))\n        for x in X_c:\n            diff = x - mu_c\n            S_c += np.outer(diff, diff)\n        S_W += S_c\n    global_mean = np.mean(X, axis=0)\n    S_B = np.zeros((n_features, n_features))\n    for label in class_labels:\n        X_c = X[y == label]\n        mu_c = np.mean(X_c, axis=0)\n        N_c = X_c.shape[0]\n        diff = mu_c - global_mean\n        S_B += N_c * np.outer(diff, diff)\n    A = np.linalg.pinv(S_W) @ S_B\n    (eigen_values, eigen_vectors) = np.linalg.eigh(A)\n    sorted_indices = np.argsort(eigen_values)[::-1]\n    eigen_values = eigen_values[sorted_indices]\n    eigen_vectors = eigen_vectors[:, sorted_indices]\n    for i in range(eigen_vectors.shape[1]):\n        first_nonzero_index = np.argmax(np.abs(eigen_vectors[:, i]) > 1e-10)\n        if first_nonzero_index < eigen_vectors.shape[0]:\n            if eigen_vectors[first_nonzero_index, i] < 0:\n                eigen_vectors[:, i] *= -1\n    W = eigen_vectors[:, :n_components]\n    X_projected = X @ W\n    X_projected = np.round(X_projected, 4).tolist()\n    return X_projected"}
{"task_id": 128, "completion_id": 7, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    if n_components == 0:\n        return []\n    (n_samples, d_features) = X.shape\n    unique_labels = np.unique(y)\n    class_means = {}\n    S_W = np.zeros((d_features, d_features))\n    for label in unique_labels:\n        class_data = X[y == label]\n        class_mean = np.mean(class_data, axis=0)\n        class_means[label] = class_mean\n        deviations = class_data - class_mean\n        S_W += deviations.T @ deviations\n    global_mean = np.mean(X, axis=0)\n    S_B = np.zeros((d_features, d_features))\n    for label in unique_labels:\n        class_mean = class_means[label]\n        N_c = len(X[y == label])\n        deviation = class_mean - global_mean\n        S_B += N_c * np.outer(deviation, deviation)\n    S_W_pinv = np.linalg.pinv(S_W)\n    A = S_W_pinv @ S_B\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    for i in range(eigenvectors.shape[1]):\n        first_non_zero = np.abs(eigenvectors[:, i]).argmax()\n        if eigenvectors[first_non_zero, i] < 0:\n            eigenvectors[:, i] *= -1\n    if n_components > eigenvectors.shape[1]:\n        n_components = eigenvectors.shape[1]\n    W = eigenvectors[:, :n_components]\n    X_projected = X @ W\n    X_projected = np.round(X_projected, 4).tolist()\n    return X_projected"}
{"task_id": 128, "completion_id": 8, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    (n_samples, d) = X.shape\n    if n_components == 0:\n        return []\n    mu = np.mean(X, axis=0)\n    S_W = np.zeros((d, d))\n    for c in np.unique(y):\n        X_c = X[y == c]\n        mu_c = np.mean(X_c, axis=0)\n        X_c_centered = X_c - mu_c\n        S_W += np.dot(X_c_centered.T, X_c_centered)\n    S_B = np.zeros((d, d))\n    for c in np.unique(y):\n        X_c = X[y == c]\n        N_c = X_c.shape[0]\n        mu_c = np.mean(X_c, axis=0)\n        vec = (mu_c - mu).reshape(-1, 1)\n        S_B += N_c * np.dot(vec, vec.T)\n    A = np.linalg.pinv(S_W) @ S_B\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    for i in range(eigenvectors.shape[1]):\n        first_non_zero = np.abs(eigenvectors[:, i]).argmax()\n        if eigenvectors[first_non_zero, i] < 0:\n            eigenvectors[:, i] *= -1\n    W = eigenvectors[:, :n_components]\n    X_projected = np.dot(X, W)\n    X_projected = np.round(X_projected, 4)\n    return X_projected.tolist()"}
{"task_id": 128, "completion_id": 9, "solution": "import numpy as np\nimport numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    if n_components == 0:\n        return []\n    if n_components > n_features:\n        n_components = n_features\n    classes = np.unique(y)\n    n_classes = len(classes)\n    global_mean = np.mean(X, axis=0)\n    S_W = np.zeros((n_features, n_features))\n    for c in classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        dev_c = X_c - mean_c\n        S_c = dev_c.T @ dev_c\n        S_W += S_c\n    S_B = np.zeros((n_features, n_features))\n    for c in classes:\n        X_c = X[y == c]\n        N_c = X_c.shape[0]\n        mean_c = np.mean(X_c, axis=0)\n        dev = mean_c - global_mean\n        S_B += N_c * (dev.reshape(-1, 1) @ dev.reshape(1, -1))\n    A = np.linalg.pinv(S_W) @ S_B\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    for i in range(eigenvectors.shape[1]):\n        for j in range(n_features):\n            if abs(eigenvectors[j, i]) > 1e-10:\n                if eigenvectors[j, i] < 0:\n                    eigenvectors[:, i] *= -1\n                break\n    W = eigenvectors[:, :n_components]\n    X_projected = X @ W\n    X_projected_rounded = np.around(X_projected, decimals=4).tolist()\n    return X_projected_rounded\nX = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\nn_components = 1"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 1:\n        if grid[0][0] == '.':\n            return 0\n        else:\n            return -1\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    fire_time = [[math.inf for _ in range(n)] for _ in range(n)]\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                fire_queue.append((i, j))\n    while fire_queue:\n        (r, c) = fire_queue.popleft()\n        for (dr, dc) in directions:\n            (nr, nc) = (r + dr, c + dc)\n            if 0 <= nr < n and 0 <= nc < n and (grid[nr][nc] == '.'):\n                if fire_time[nr][nc] > fire_time[r][c] + 1:\n                    fire_time[nr][nc] = fire_time[r][c] + 1\n                    fire_queue.append((nr, nc))\n    agent_queue = deque()\n    agent_time = [[math.inf for _ in range(n)] for _ in range(n)]\n    if fire_time[0][0] == 0 or grid[0][0] == '#':\n        return -1\n    agent_queue.append((0, 0, 0))\n    agent_time[0][0] = 0\n    while agent_queue:\n        (r, c, t) = agent_queue.popleft()\n        for (dr, dc) in directions:\n            (nr, nc) = (r + dr, c + dc)\n            if 0 <= nr < n and 0 <= nc < n and (grid[nr][nc] != '#'):\n                if agent_time[nr][nc] == math.inf and t + 1 < fire_time[nr][nc]:\n                    agent_time[nr][nc] = t + 1\n                    agent_queue.append((nr, nc, t + 1))\n                    if nr == n - 1 and nc == n - 1:\n                        return t + 1\n    return -1 if agent_time[n - 1][n - 1] == math.inf else agent_time[n - 1][n - 1]\ngrid = ['F..', '.#.F', '..F.']"}
{"task_id": 140, "completion_id": 1, "solution": "from collections import deque\nimport sys\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 1:\n        return 0 if grid[0][0] == '.' else -1\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    fire_time = [[math.inf] * n for _ in range(n)]\n    fire_q = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_q.append((i, j, 0))\n                fire_time[i][j] = 0\n    while fire_q:\n        (x, y, t) = fire_q.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.') and (fire_time[nx][ny] == math.inf):\n                fire_time[nx][ny] = t + 1\n                fire_q.append((nx, ny, t + 1))\n    if grid[0][0] == 'F' or fire_time[0][0] == 0 or grid[n - 1][n - 1] == '#' or (fire_time[n - 1][n - 1] == 0):\n        return -1\n    visited = [[False] * n for _ in range(n)]\n    q = deque()\n    q.append((0, 0, 0))\n    visited[0][0] = True\n    while q:\n        (x, y, t) = q.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (not visited[nx][ny]):\n                if t + 1 < fire_time[nx][ny]:\n                    if nx == n - 1 and ny == n - 1:\n                        return t + 1\n                    visited[nx][ny] = True\n                    q.append((nx, ny, t + 1))\n    return -1"}
{"task_id": 140, "completion_id": 2, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 1:\n        return 0 if grid[0][0] == '.' else -1\n    fire_time = [[math.inf for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j))\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while fire_queue:\n        (x, y) = fire_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                if grid[nx][ny] == '.' and fire_time[nx][ny] == math.inf:\n                    fire_time[nx][ny] = fire_time[x][y] + 1\n                    fire_queue.append((nx, ny))\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    if fire_time[0][0] == 0 or fire_time[n - 1][n - 1] == 0:\n        return -1\n    agent_visited = [[False for _ in range(n)] for _ in range(n)]\n    agent_queue = deque()\n    agent_queue.append((0, 0, 0))\n    agent_visited[0][0] = True\n    while agent_queue:\n        (x, y, t) = agent_queue.popleft()\n        if (x, y) == (n - 1, n - 1):\n            return t\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.') and (not agent_visited[nx][ny]):\n                if fire_time[nx][ny] > t + 1:\n                    agent_visited[nx][ny] = True\n                    agent_queue.append((nx, ny, t + 1))\n    return -1"}
{"task_id": 140, "completion_id": 3, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'. The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1). Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute. The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 1:\n        if grid[0][0] == '.':\n            return 0\n        else:\n            return -1\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    fire_time = [[math.inf for _ in range(n)] for _ in range(n)]\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                fire_queue.append((i, j))\n    while fire_queue:\n        (x, y) = fire_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.') and (fire_time[nx][ny] == math.inf):\n                fire_time[nx][ny] = fire_time[x][y] + 1\n                fire_queue.append((nx, ny))\n    if fire_time[0][0] == 0 or fire_time[n - 1][n - 1] == 0:\n        return -1\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    q = deque()\n    q.append((0, 0, 0))\n    visited[0][0] = True\n    while q:\n        (x, y, t) = q.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (not visited[nx][ny]):\n                next_time = t + 1\n                if next_time < fire_time[nx][ny]:\n                    if nx == n - 1 and ny == n - 1:\n                        return next_time\n                    visited[nx][ny] = True\n                    q.append((nx, ny, next_time))\n    return -1"}
{"task_id": 140, "completion_id": 4, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 1:\n        return 0 if grid[0][0] == '.' else -1\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    fire_time = [[math.inf for _ in range(n)] for _ in range(n)]\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                fire_queue.append((i, j))\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while fire_queue:\n        (x, y) = fire_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.') and (fire_time[nx][ny] == math.inf):\n                fire_time[nx][ny] = fire_time[x][y] + 1\n                fire_queue.append((nx, ny))\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    agent_queue = deque()\n    agent_queue.append((0, 0, 0))\n    visited[0][0] = True\n    while agent_queue:\n        (x, y, time) = agent_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (not visited[nx][ny]) and (grid[nx][ny] != '#'):\n                if fire_time[nx][ny] > time + 1 or fire_time[nx][ny] == math.inf:\n                    if (nx, ny) == (n - 1, n - 1):\n                        return time + 1\n                    visited[nx][ny] = True\n                    agent_queue.append((nx, ny, time + 1))\n    return -1\ngrid = ['F..', '.#.', '.#.']"}
{"task_id": 140, "completion_id": 5, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 1:\n        if grid[0][0] == '.' or grid[0][0] == 'F':\n            return 0 if grid[0][0] == '.' else -1\n        return -1\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    board = [[grid[i][j] for j in range(n)] for i in range(n)]\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    fire_time = [[math.inf] * n for _ in range(n)]\n    q = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                q.append((i, j))\n    while q:\n        (x, y) = q.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                if fire_time[nx][ny] == math.inf and board[nx][ny] == '.':\n                    fire_time[nx][ny] = fire_time[x][y] + 1\n                    q.append((nx, ny))\n    visited = [[False] * n for _ in range(n)]\n    agent_q = deque()\n    agent_q.append((0, 0, 0))\n    visited[0][0] = True\n    while agent_q:\n        (x, y, t) = agent_q.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (not visited[nx][ny]) and (board[nx][ny] != '#'):\n                if fire_time[nx][ny] > t + 1:\n                    if (nx, ny) == (n - 1, n - 1):\n                        return t + 1\n                    visited[nx][ny] = True\n                    agent_q.append((nx, ny, t + 1))\n    return -1\ngrid = ['.F.', '.#.', '...']"}
{"task_id": 140, "completion_id": 6, "solution": "from collections import deque\nfrom math import inf\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    ----------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 1:\n        return 0 if grid[0][0] == '.' else -1\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    fire_time = [[inf] * n for _ in range(n)]\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                fire_queue.append((i, j))\n    while fire_queue:\n        (fx, fy) = fire_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (fx + dx, fy + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (fire_time[nx][ny] == inf):\n                fire_time[nx][ny] = fire_time[fx][fy] + 1\n                fire_queue.append((nx, ny))\n    if fire_time[n - 1][n - 1] == 0 or grid[n - 1][n - 1] == 'F':\n        return -1\n    visited = [[False] * n for _ in range(n)]\n    queue = deque()\n    queue.append((0, 0, 0))\n    visited[0][0] = True\n    while queue:\n        (x, y, t) = queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (not visited[nx][ny]) and (grid[nx][ny] != '#'):\n                if fire_time[nx][ny] > t + 1:\n                    if (nx, ny) == (n - 1, n - 1):\n                        return t + 1\n                    visited[nx][ny] = True\n                    queue.append((nx, ny, t + 1))\n    return -1\ngrid = ['F.#', '.#.', '.#.']"}
{"task_id": 140, "completion_id": 7, "solution": "from collections import deque\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 1:\n        return 0 if grid[0][0] == '.' else -1\n    fire_time = [[math.inf] * n for _ in range(n)]\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j, 0))\n                fire_time[i][j] = 0\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while fire_queue:\n        (i, j, t) = fire_queue.popleft()\n        for (di, dj) in directions:\n            (ni, nj) = (i + di, j + dj)\n            if 0 <= ni < n and 0 <= nj < n and (grid[ni][nj] == '.') and (fire_time[ni][nj] > t + 1):\n                fire_time[ni][nj] = t + 1\n                fire_queue.append((ni, nj, t + 1))\n    if fire_time[0][0] == 0 or fire_time[n - 1][n - 1] == 0:\n        return -1\n    agent_queue = deque()\n    agent_queue.append((0, 0, 0))\n    visited = [[False] * n for _ in range(n)]\n    visited[0][0] = True\n    while agent_queue:\n        (i, j, t) = agent_queue.popleft()\n        for (di, dj) in directions:\n            (ni, nj) = (i + di, j + dj)\n            if 0 <= ni < n and 0 <= nj < n and (grid[ni][nj] != '#') and (not visited[ni][nj]):\n                if fire_time[ni][nj] > t + 1:\n                    if ni == n - 1 and nj == n - 1:\n                        return t + 1\n                    visited[ni][nj] = True\n                    agent_queue.append((ni, nj, t + 1))\n    return -1"}
{"task_id": 140, "completion_id": 8, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 1:\n        if grid[0][0] == '.':\n            return 0\n        else:\n            return -1\n    fire_time = [[math.inf for _ in range(n)] for _ in range(n)]\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                fire_queue.append((i, j))\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while fire_queue:\n        (x, y) = fire_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                if grid[nx][ny] == '.' and fire_time[nx][ny] == math.inf:\n                    fire_time[nx][ny] = fire_time[x][y] + 1\n                    fire_queue.append((nx, ny))\n    if fire_time[n - 1][n - 1] == 0:\n        return -1\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    agent_queue = deque()\n    agent_queue.append((0, 0, 0))\n    visited[0][0] = True\n    while agent_queue:\n        (x, y, time) = agent_queue.popleft()\n        if x == n - 1 and y == n - 1:\n            return time\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (not visited[nx][ny]) and (grid[nx][ny] != '#'):\n                if fire_time[nx][ny] > time + 1:\n                    visited[nx][ny] = True\n                    agent_queue.append((nx, ny, time + 1))\n    return -1"}
{"task_id": 140, "completion_id": 9, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 1:\n        return 0 if grid[0][0] == '.' else -1\n    fire_time = [[math.inf for _ in range(n)] for _ in range(n)]\n    q = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                q.append((i, j))\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while q:\n        (x, y) = q.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.') and (fire_time[nx][ny] == math.inf):\n                fire_time[nx][ny] = fire_time[x][y] + 1\n                q.append((nx, ny))\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    start_q = deque()\n    start_q.append((0, 0, 0))\n    while start_q:\n        (x, y, t) = start_q.popleft()\n        if (x, y) == (n - 1, n - 1):\n            return t\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (not visited[nx][ny]) and (grid[nx][ny] == '.'):\n                if fire_time[nx][ny] > t + 1:\n                    visited[nx][ny] = True\n                    start_q.append((nx, ny, t + 1))\n    return -1\ngrid = ['F...F', '.###.', '.#.#.', '.###.', 'F...F']"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    Predict labels for test samples using the k-Nearest Neighbors classifier.\n\n    Parameters:\n    ----------\n    X_train : np.ndarray\n        Training data, with shape (n_samples, n_features)\n    y_train : np.ndarray\n        Target labels for training data, with shape (n_samples,)\n    X_test : np.ndarray\n        Test data to predict labels for, with shape (m_samples, n_features)\n    k : int\n        The number of nearest neighbors to vote on\n    metric : str, optional\n        The distance metric to use ('euclidean', 'manhattan', 'cosine'), default is 'euclidean'\n\n    Returns:\n    -------\n    np.ndarray\n        Predicted labels for the test set, with shape (m_samples,)\n    \"\"\"\n    n_test_samples = X_test.shape[0]\n    predictions = np.zeros(n_test_samples, dtype=y_train.dtype)\n    for i in range(n_test_samples):\n        test_sample = X_test[i]\n        if metric == 'euclidean':\n            distances = np.linalg.norm(X_train - test_sample, axis=1)\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X_train - test_sample), axis=1)\n        elif metric == 'cosine':\n            dot_product = np.dot(X_train, test_sample)\n            norm_train = np.linalg.norm(X_train, axis=1)\n            norm_test = np.linalg.norm(test_sample)\n            with np.errstate(divide='ignore', invalid='ignore'):\n                cosine_similarity = dot_product / (norm_train * norm_test)\n                cosine_similarity = np.nan_to_num(cosine_similarity)\n            distances = 1 - cosine_similarity\n        else:\n            distances = np.linalg.norm(X_train - test_sample, axis=1)\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = y_train[nearest_indices]\n        counts = np.unique(nearest_labels, return_counts=True)\n        (labels, votes) = (counts[0], counts[1])\n        winner_indices = np.where(votes == np.max(votes))[0]\n        winner_label = labels[np.min(winner_indices)]\n        predictions[i] = winner_label\n    return predictions\nX_train = np.array([[1, 2], [2, 3], [3, 1]])\ny_train = np.array([0, 0, 1])\nX_test = np.array([[1, 1], [3, 3]])\nk = 3"}
{"task_id": 141, "completion_id": 1, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    k-Nearest Neighbors classifier implementation.\n    \n    Parameters:\n    - X_train: np.ndarray, shape (n_samples, n_features), training data\n    - y_train: np.ndarray, shape (n_samples,), training labels\n    - X_test: np.ndarray, shape (m_samples, n_features), test data\n    - k: int, number of neighbors\n    - metric: str, distance metric ('euclidean', 'manhattan', 'cosine')\n\n    Returns:\n    - np.ndarray: 1-D array of predicted labels for each test sample\n    \"\"\"\n    n_test_samples = X_test.shape[0]\n    predictions = np.zeros(n_test_samples, dtype=int)\n    for i in range(n_test_samples):\n        test_sample = X_test[i]\n        if metric == 'euclidean':\n            distances = np.sqrt(np.sum((X_train - test_sample) ** 2, axis=1))\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X_train - test_sample), axis=1)\n        elif metric == 'cosine':\n            dot_product = np.dot(X_train, test_sample)\n            norm_train = np.linalg.norm(X_train, axis=1)\n            norm_test = np.linalg.norm(test_sample)\n            cosine_sim = dot_product / np.maximum(norm_train * norm_test, 1e-10)\n            distances = 1 - cosine_sim\n        else:\n            distances = np.sqrt(np.sum((X_train - test_sample) ** 2, axis=1))\n        sorted_indices = np.argsort(distances)\n        nearest_labels = y_train[sorted_indices][:k]\n        (unique_labels, counts) = np.unique(nearest_labels, return_counts=True)\n        max_count = np.max(counts)\n        tied_labels = unique_labels[counts == max_count]\n        predictions[i] = np.min(tied_labels)\n    return predictions"}
{"task_id": 141, "completion_id": 2, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    Predict class labels using k-Nearest Neighbors algorithm.\n\n    Parameters:\n        X_train: Training data, shape (n_samples, n_features)\n        y_train: Target labels, shape (n_samples,)\n        X_test: Test data, shape (m_samples, n_features)\n        k: Number of nearest neighbors to consider\n        metric: Distance metric to use (default: 'euclidean')\n\n    Returns:\n        Predicted labels for test data, shape (m_samples,)\n    \"\"\"\n\n    def euclidean(x, y):\n        return np.sqrt(np.sum((x - y) ** 2, axis=1))\n\n    def manhattan(x, y):\n        return np.sum(np.abs(x - y), axis=1)\n\n    def cosine(x, y):\n        dot_product = np.dot(x, y.T)\n        norm_x = np.linalg.norm(x, axis=1)\n        norm_y = np.linalg.norm(y, axis=1)\n        similarity = dot_product / (norm_x[:, np.newaxis] * norm_y)\n        return 1 - similarity\n    if metric == 'euclidean':\n        distance_func = euclidean\n    elif metric == 'manhattan':\n        distance_func = manhattan\n    elif metric == 'cosine':\n        distance_func = cosine\n    else:\n        distance_func = euclidean\n    num_test_samples = X_test.shape[0]\n    predictions = []\n    for test_idx in range(num_test_samples):\n        distances = distance_func(X_test[test_idx:test_idx + 1, :], X_train)\n        nearest_indices = np.argsort(distances, axis=1)[:, :k]\n        nearest_labels = y_train[nearest_indices].flatten()\n        (unique_labels, counts) = np.unique(nearest_labels, return_counts=True)\n        best_label_indices = np.argsort(-counts)\n        candidate_labels = unique_labels[best_label_indices]\n        label_with_priority = candidate_labels[np.nonzero(candidate_labels == np.min(candidate_labels))[0][0]]\n        predictions.append(label_with_priority)\n    return np.array(predictions)"}
{"task_id": 141, "completion_id": 3, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    Predict class labels for test samples using k-NN classification.\n    \n    Parameters:\n    X_train (np.ndarray): Training data, shape (n_samples_train, n_features)\n    y_train (np.ndarray): Training labels, shape (n_samples_train,)\n    X_test (np.ndarray): Test data, shape (n_samples_test, n_features)\n    k (int): Number of nearest neighbors to consider\n    metric (str): Distance metric ('euclidean', 'manhattan', 'cosine')\n    \n    Returns:\n    np.ndarray: Predicted labels for test samples, shape (n_samples_test,)\n    \"\"\"\n    n_test = X_test.shape[0]\n    predictions = np.zeros(n_test, dtype=int)\n    for i in range(n_test):\n        test_point = X_test[i]\n        if metric == 'euclidean':\n            distances = np.sqrt(np.sum((X_train - test_point) ** 2, axis=1))\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X_train - test_point), axis=1)\n        elif metric == 'cosine':\n            dot_product = np.dot(X_train, test_point)\n            norm_X_train = np.sqrt(np.sum(X_train ** 2, axis=1))\n            norm_X_test = np.sqrt(np.sum(test_point ** 2))\n            with np.errstate(divide='ignore', invalid='ignore'):\n                cosine_sim = dot_product / (norm_X_train * norm_X_test)\n                cosine_sim = np.nan_to_num(cosine_sim)\n            distances = 1 - cosine_sim\n        else:\n            distances = np.sqrt(np.sum((X_train - test_point) ** 2, axis=1))\n        indices = np.argsort(distances)[:k]\n        nearest_labels = y_train[indices]\n        (unique_labels, counts) = np.unique(nearest_labels, return_counts=True)\n        max_votecount = np.max(counts)\n        candidates = unique_labels[counts == max_votecount]\n        predictions[i] = np.min(candidates)\n    return predictions\nX_train = np.array([[1, 2], [2, 3], [3, 1], [6, 5], [7, 7], [8, 6]])\ny_train = np.array([0, 0, 0, 1, 1, 1])\nX_test = np.array([[5, 4], [1, 1]])"}
{"task_id": 141, "completion_id": 4, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    Predict labels for test data using the k-Nearest Neighbors algorithm.\n    \n    Parameters:\n    -----------\n    X_train : np.ndarray\n        Training input samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Training labels of shape (n_samples,).\n    X_test : np.ndarray\n        Test input samples of shape (n_samples, n_features).\n    k : int\n        Number of nearest neighbors to consider.\n    metric : str, optional (default='euclidean')\n        Distance metric to use. Supported: 'euclidean', 'manhattan', 'cosine'.\n    \n    Returns:\n    --------\n    np.ndarray\n        1-D array of predicted labels for the test samples.\n    \"\"\"\n    n_test = X_test.shape[0]\n    y_pred = np.zeros(n_test, dtype=int)\n    for i in range(n_test):\n        test_point = X_test[i]\n        if metric == 'euclidean' or metric not in ['manhattan', 'cosine']:\n            distances = np.linalg.norm(X_train - test_point, axis=1)\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X_train - test_point), axis=1)\n        elif metric == 'cosine':\n            train_norm = np.linalg.norm(X_train, axis=1)\n            test_norm = np.linalg.norm(test_point)\n            dot_product = np.dot(X_train, test_point)\n            cosine_sim = dot_product / (train_norm * test_norm + 1e-10)\n            distances = 1 - cosine_sim\n        labelled_distances = np.column_stack((distances, y_train))\n        labelled_distances = labelled_distances[labelled_distances[:, 0].argsort()]\n        k_nearest_labels = labelled_distances[:k, 1]\n        (unique, counts) = np.unique(k_nearest_labels, return_counts=True)\n        max_vote = max(counts)\n        candidates = unique[counts == max_vote]\n        y_pred[i] = np.min(candidates)\n    return y_pred"}
{"task_id": 141, "completion_id": 5, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    Predict class labels for test samples using k-Nearest Neighbors algorithm.\n    \n    Parameters:\n    - X_train: Training data, shape (n_samples, n_features)\n    - y_train: Training labels, shape (n_samples,)\n    - X_test: Test data, shape (m_samples, n_features)\n    - k: Number of neighbors to consider\n    - metric: One of 'euclidean', 'manhattan', 'cosine'; defaults to 'euclidean'\n    \n    Returns:\n    - y_pred: Predicted labels for test samples, shape (m_samples,)\n    \"\"\"\n    m_samples = X_test.shape[0]\n    y_pred = np.zeros(m_samples, dtype=int)\n    for i in range(m_samples):\n        x_test = X_test[i]\n        if metric == 'euclidean':\n            dists = np.sqrt(np.sum((X_train - x_test) ** 2, axis=1))\n        elif metric == 'manhattan':\n            dists = np.sum(np.abs(X_train - x_test), axis=1)\n        elif metric == 'cosine':\n            dot_product = np.dot(X_train, x_test)\n            norm_x_test = np.linalg.norm(x_test)\n            norm_x_train = np.linalg.norm(X_train, axis=1)\n            cosine_sim = dot_product / (norm_x_train * norm_x_test + 1e-10)\n            dists = 1 - cosine_sim\n        else:\n            dists = np.sqrt(np.sum((X_train - x_test) ** 2, axis=1))\n        idxs = np.argsort(dists)[:k]\n        y_knn = y_train[idxs]\n        counts = np.bincount(y_knn)\n        y_pred[i] = np.argmax(counts)\n    return y_pred"}
{"task_id": 141, "completion_id": 6, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    Predict class labels for each test sample using the k-Nearest Neighbors algorithm.\n\n    Parameters:\n    - X_train: np.ndarray of shape (n_samples_train, n_features)\n    - y_train: np.ndarray of shape (n_samples_train,)\n    - X_test: np.ndarray of shape (n_samples_test, n_features)\n    - k: Number of neighbors to consider\n    - metric: Distance metric to use (default is 'euclidean')\n\n    Returns:\n    - np.ndarray of shape (n_samples_test,): Predicted class labels\n    \"\"\"\n    n_test_samples = X_test.shape[0]\n    predictions = np.zeros(n_test_samples, dtype=y_train.dtype)\n    for i in range(n_test_samples):\n        x_test = X_test[i]\n        if metric == 'euclidean':\n            distances = np.sqrt(np.sum((X_train - x_test) ** 2, axis=1))\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X_train - x_test), axis=1)\n        elif metric == 'cosine':\n            dot_product = np.dot(X_train, x_test)\n            norm_x_test = np.linalg.norm(x_test)\n            norm_x_train = np.linalg.norm(X_train, axis=1)\n            cosine_similarities = dot_product / (norm_x_train * norm_x_test + 1e-10)\n            distances = 1 - cosine_similarities\n        else:\n            distances = np.sqrt(np.sum((X_train - x_test) ** 2, axis=1))\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = y_train[nearest_indices]\n        (unique_labels, counts) = np.unique(nearest_labels, return_counts=True)\n        best_index = np.argmin(unique_labels[np.flatnonzero(counts == np.max(counts))])\n        predicted_label = unique_labels[np.flatnonzero(counts == np.max(counts))[best_index]]\n        predictions[i] = predicted_label\n    return predictions"}
{"task_id": 141, "completion_id": 7, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Predict labels for test data using k-Nearest Neighbors algorithm.\"\"\"\n    n_test_samples = X_test.shape[0]\n    predictions = np.zeros(n_test_samples, dtype=int)\n    if metric not in ['euclidean', 'manhattan', 'cosine']:\n        metric = 'euclidean'\n    for i in range(n_test_samples):\n        test_point = X_test[i]\n        if metric == 'euclidean':\n            distances = np.sqrt(np.sum((X_train - test_point) ** 2, axis=1))\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X_train - test_point), axis=1)\n        elif metric == 'cosine':\n            dot_product = np.dot(X_train, test_point)\n            norm_train = np.linalg.norm(X_train, axis=1)\n            norm_test = np.linalg.norm(test_point)\n            cosine_similarity = dot_product / (norm_train * norm_test + 1e-10)\n            distances = 1 - cosine_similarity\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = y_train[nearest_indices]\n        label_counts = {}\n        for label in nearest_labels:\n            if label in label_counts:\n                label_counts[label] += 1\n            else:\n                label_counts[label] = 1\n        unique_labels = list(label_counts.keys())\n        unique_labels.sort(key=lambda x: (-label_counts[x], x))\n        predictions[i] = unique_labels[0]\n    return predictions"}
{"task_id": 141, "completion_id": 8, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    Perform k-Nearest Neighbors classification on the test data.\n    \n    Parameters:\n    -----------\n    X_train : np.ndarray\n        Training data of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Training labels of shape (n_samples,).\n    X_test : np.ndarray\n        Test data of shape (m_samples, n_features).\n    k : int\n        Number of neighbors to consider.\n    metric : str, optional\n        Distance metric to use ('euclidean', 'manhattan', or 'cosine').\n    \n    Returns:\n    --------\n    np.ndarray\n        Predicted labels for the test data.\n    \"\"\"\n    n_test_samples = X_test.shape[0]\n    predictions = np.zeros(n_test_samples, dtype=y_train.dtype)\n    if metric not in ['euclidean', 'manhattan', 'cosine']:\n        metric = 'euclidean'\n    for i in range(n_test_samples):\n        x_test = X_test[i]\n        if metric == 'euclidean':\n            distances = np.sqrt(np.sum((X_train - x_test) ** 2, axis=1))\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X_train - x_test), axis=1)\n        elif metric == 'cosine':\n            dot_product = np.dot(X_train, x_test)\n            norm_train = np.linalg.norm(X_train, axis=1)\n            norm_test = np.linalg.norm(x_test)\n            cosine_sim = dot_product / (norm_train * norm_test + 1e-10)\n            distances = 1 - cosine_sim\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = y_train[nearest_indices]\n        (unique_labels, counts) = np.unique(nearest_labels, return_counts=True)\n        winner_idx = np.argmax(counts)\n        predicted_label = unique_labels[winner_idx]\n        if np.any(counts[winner_idx] == counts):\n            predicted_label = unique_labels[np.argmin(unique_labels[counts == counts[winner_idx]])]\n        predictions[i] = predicted_label\n    return predictions"}
{"task_id": 141, "completion_id": 9, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Perform k-Nearest Neighbors classification.\n\n    Parameters:\n    - X_train: np.ndarray of shape (n_samples, n_features)\n    - y_train: np.ndarray of shape (n_samples,)\n    - X_test: np.ndarray of shape (m_samples, n_features)\n    - k: int, number of neighbors to consider\n    - metric: str, distance metric to use. One of 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n    - np.ndarray of shape (m_samples,)\n    \"\"\"\n    n_test = X_test.shape[0]\n    y_pred = np.zeros(n_test, dtype=int)\n    for i in range(n_test):\n        x_test = X_test[i]\n        if metric == 'euclidean':\n            distances = np.sum((X_train - x_test) ** 2, axis=1)\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X_train - x_test), axis=1)\n        elif metric == 'cosine':\n            dot_product = np.dot(X_train, x_test)\n            norm_train = np.linalg.norm(X_train, axis=1)\n            norm_test = np.linalg.norm(x_test)\n            distances = 1 - dot_product / (norm_train * norm_test)\n        else:\n            distances = np.sum((X_train - x_test) ** 2, axis=1)\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = y_train[nearest_indices]\n        (unique_labels, counts) = np.unique(nearest_labels, return_counts=True)\n        label_indices = np.lexsort((-counts, unique_labels))\n        y_pred[i] = unique_labels[label_indices[0]]\n    return y_pred"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def distance(x1, x2, metric):\n        if metric == 'euclidean':\n            return np.sqrt(np.sum((x1 - x2) ** 2, axis=-1))\n        elif metric == 'manhattan':\n            return np.sum(np.abs(x1 - x2), axis=-1)\n        elif metric == 'cosine':\n            dot = np.sum(x1 * x2, axis=-1)\n            norm1 = np.sqrt(np.sum(x1 ** 2, axis=-1)) + 1e-12\n            norm2 = np.sqrt(np.sum(x2 ** 2, axis=-1)) + 1e-12\n            return 1 - dot / (norm1 * norm2)\n        else:\n            raise ValueError(f'Unknown metric: {metric}')\n    n_train = X.shape[0]\n    k = min(k, n_train)\n    predictions = []\n    for test_sample in X_test:\n        distances = distance(test_sample, X, metric)\n        indices = np.arange(n_train)\n        distances_with_labels = np.column_stack((distances, indices))\n        distances_with_labels.sort(kind='mergesort')\n        k_indices = distances_with_labels[:k, 1].astype(int)\n        k_labels = y[k_indices]\n        counts = np.bincount(k_labels)\n        predicted_label = np.argmin(np.argsort(counts)[::-1]) if len(counts) > 1 else 0\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 146, "completion_id": 1, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def euclidean(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2))\n\n    def manhattan(x1, x2):\n        return np.sum(np.abs(x1 - x2))\n\n    def cosine(x1, x2):\n        eps = 1e-12\n        dot = np.dot(x1, x2)\n        norm1 = np.linalg.norm(x1) + eps\n        norm2 = np.linalg.norm(x2) + eps\n        return 1.0 - dot / (norm1 * norm2)\n    if metric == 'euclidean':\n        dist_func = euclidean\n    elif metric == 'manhattan':\n        dist_func = manhattan\n    elif metric == 'cosine':\n        dist_func = cosine\n    else:\n        raise ValueError(f'Unsupported distance metric: {metric}')\n    predictions = []\n    for test_sample in X_test:\n        distances = np.array([dist_func(test_sample, train_sample) for train_sample in X])\n        k = min(k, X.shape[0])\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = y[nearest_indices]\n        (unique_labels, counts) = np.unique(nearest_labels, return_counts=True)\n        max_count = np.max(counts)\n        tied_labels = unique_labels[counts == max_count]\n        predicted_label = int(np.min(tied_labels))\n        predictions.append(predicted_label)\n    return predictions.tolist()"}
{"task_id": 146, "completion_id": 2, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"\n    Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n    \n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test samples.\n        k: Number of neighbours to consider (default: 3).\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n    \n    Returns:\n        A Python list containing the predicted label for each test sample.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    (m_samples, _) = X_test.shape\n    k = min(k, n_samples)\n\n    def euclidean(x1: np.ndarray, x2: np.ndarray) -> float:\n        return np.sqrt(np.sum((x1 - x2) ** 2))\n\n    def manhattan(x1: np.ndarray, x2: np.ndarray) -> float:\n        return np.sum(np.abs(x1 - x2))\n\n    def cosine(x1: np.ndarray, x2: np.ndarray) -> float:\n        dot = np.dot(x1, x2)\n        norm1 = np.linalg.norm(x1)\n        norm2 = np.linalg.norm(x2)\n        return 1.0 - dot / (norm1 * norm2 + 1e-12)\n    distance_functions = {'euclidean': euclidean, 'manhattan': manhattan, 'cosine': cosine}\n    if metric not in distance_functions:\n        raise ValueError(f\"Unknown metric '{metric}'. Supported metrics are 'euclidean', 'manhattan', and 'cosine'.\")\n    compute_distance = distance_functions[metric]\n    predictions = []\n    for test_idx in range(m_samples):\n        test_sample = X_test[test_idx]\n        distances = []\n        for train_idx in range(n_samples):\n            train_sample = X[train_idx]\n            distance = compute_distance(test_sample, train_sample)\n            distances.append((distance, y[train_idx]))\n        distances.sort(key=lambda x: x[0])\n        k_nearest = distances[:k]\n        k_labels = [label for (_, label) in k_nearest]\n        label_counts = {}\n        for label in k_labels:\n            label_counts[label] = label_counts.get(label, 0) + 1\n        sorted_labels = sorted(label_counts.items(), key=lambda item: (-item[1], item[0]))\n        predicted_label = sorted_labels[0][0]\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 146, "completion_id": 3, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    m_samples = X_test.shape[0]\n    k = min(k, n_samples)\n    predictions = []\n\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2))\n\n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2))\n\n    def cosine_distance(x1, x2):\n        dot_product = np.dot(x1, x2)\n        norm_x1 = np.linalg.norm(x1)\n        norm_x2 = np.linalg.norm(x2)\n        return 1.0 - dot_product / (norm_x1 * norm_x2 + 1e-12)\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError(f\"Unknown metric: {metric}. Supported metrics are 'euclidean', 'manhattan', and 'cosine'.\")\n    for i in range(m_samples):\n        test_sample = X_test[i, :]\n        distances = []\n        for j in range(n_samples):\n            train_sample = X[j, :]\n            distance = distance_func(test_sample, train_sample)\n            distances.append((distance, y[j]))\n        distances.sort(key=lambda x: x[0])\n        k_nearest = distances[:k]\n        k_labels = [d[1] for d in k_nearest]\n        (unique_labels, counts) = np.unique(k_labels, return_counts=True)\n        max_count = np.max(counts)\n        candidates = unique_labels[counts == max_count]\n        predicted_label = np.min(candidates)\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 146, "completion_id": 4, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    m_samples = X_test.shape[0]\n    predictions = []\n    k = min(k, n_samples)\n    for i in range(m_samples):\n        test_sample = X_test[i]\n        if metric == 'euclidean':\n            distances = np.sqrt(np.sum((X - test_sample) ** 2, axis=1))\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X - test_sample), axis=1)\n        elif metric == 'cosine':\n            dot_product = np.dot(X, test_sample)\n            norm_x = np.sqrt(np.sum(X ** 2, axis=1))\n            norm_test = np.sqrt(np.sum(test_sample ** 2))\n            epsilon = 1e-12\n            norm_test = max(norm_test, epsilon)\n            cosine_similarities = dot_product / (norm_x * norm_test + epsilon)\n            distances = 1 - cosine_similarities\n        else:\n            raise ValueError(f'Unknown distance metric: {metric}')\n        labelled_distances = np.column_stack((distances, y))\n        labelled_distances = labelled_distances[labelled_distances[:, 0].argsort()]\n        k_nearest = labelled_distances[:k, 1]\n        (unique_labels, counts) = np.unique(k_nearest, return_counts=True)\n        label_counts = np.column_stack((unique_labels, counts))\n        label_counts = label_counts[label_counts[:, 0].argsort()]\n        predicted_label = label_counts[0, 0]\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 146, "completion_id": 5, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    (n_train, n_features) = X.shape\n    n_test = X_test.shape[0]\n    y_pred = []\n    k = min(k, n_train)\n    for i in range(n_test):\n        test_sample = X_test[i]\n        if metric == 'euclidean':\n            distances = np.sqrt(np.sum((X - test_sample) ** 2, axis=1))\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X - test_sample), axis=1)\n        elif metric == 'cosine':\n            dot_product = np.dot(X, test_sample)\n            norm_X = np.linalg.norm(X, axis=1)\n            norm_test = np.linalg.norm(test_sample)\n            denominator = norm_X * norm_test + 1e-12\n            distances = 1 - dot_product / denominator\n        else:\n            raise ValueError(f'Unsupported distance metric: {metric}')\n        sorted_indices = np.argsort(distances)\n        k_nearest_labels = y[sorted_indices[:k]]\n        label_counts = {}\n        for label in k_nearest_labels:\n            label_counts[label] = label_counts.get(label, 0) + 1\n        max_count = -1\n        selected_label = None\n        for (label, count) in sorted(label_counts.items()):\n            if count > max_count:\n                max_count = count\n                selected_label = label\n        y_pred.append(selected_label)\n    return y_pred.tolist()\nX = np.array([[1, 2], [2, 3], [3, 1]])\ny = np.array([0, 1, 0])\nX_test = np.array([[2, 2]])"}
{"task_id": 146, "completion_id": 6, "solution": "import numpy as np\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    n_train_samples = X.shape[0]\n    k = min(k, n_train_samples)\n    predictions = []\n\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2, axis=1))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b), axis=1)\n\n    def cosine_distance(a, b):\n        dot_product = np.sum(a * b, axis=1)\n        norm_a = np.sqrt(np.sum(a ** 2, axis=1))\n        norm_b = np.sqrt(np.sum(b ** 2, axis=1))\n        dot_product = np.clip(dot_product, -1.0, 1.0)\n        eps = 1e-12\n        cos_sim = dot_product / (norm_a * norm_b + eps)\n        return 1 - cos_sim\n    metrics = {'euclidean': euclidean_distance, 'manhattan': manhattan_distance, 'cosine': cosine_distance}\n    if metric not in metrics:\n        raise ValueError(f'Unsupported distance metric: {metric}')\n    distance_func = metrics[metric]\n    for x_test in X_test:\n        distances = distance_func(X, x_test)\n        sorted_indices = np.argsort(distances)\n        neighbors_labels = y[sorted_indices[:k]]\n        label_counts = {}\n        for label in neighbors_labels:\n            label_counts[label] = label_counts.get(label, 0) + 1\n        sorted_labels = sorted(label_counts.items(), key=lambda x: (-x[1], x[0]))\n        predictions.append(sorted_labels[0][0])\n    return predictions"}
{"task_id": 146, "completion_id": 7, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    (n_train_samples, n_features) = X.shape\n    n_test_samples = X_test.shape[0]\n    k = min(k, n_train_samples)\n    predictions = []\n    for test_sample in X_test:\n        distances = []\n        for i in range(n_train_samples):\n            train_sample = X[i]\n            label = y[i]\n            if metric == 'euclidean':\n                distance = np.sqrt(np.sum((test_sample - train_sample) ** 2))\n            elif metric == 'manhattan':\n                distance = np.sum(np.abs(test_sample - train_sample))\n            elif metric == 'cosine':\n                dot_product = np.dot(test_sample, train_sample)\n                norm_test = np.linalg.norm(test_sample)\n                norm_train = np.linalg.norm(train_sample)\n                epsilon = 1e-12\n                if norm_test < epsilon or norm_train < epsilon:\n                    distance = 0.0\n                else:\n                    distance = 1 - dot_product / (norm_test * norm_train + epsilon)\n            else:\n                raise ValueError(f'Unsupported distance metric: {metric}')\n            distances.append((distance, label))\n        distances.sort(key=lambda x: x[0])\n        nearest_neighbors = distances[:k]\n        labels = [label for (_, label) in nearest_neighbors]\n        from collections import Counter\n        counter = Counter(labels)\n        (most_common_label, _) = counter.most_common(1)[0]\n        prediction = min([label for (label, count) in counter.items() if count == counter[most_common_label]])\n        predictions.append(prediction)\n    return predictions\nX = np.array([[1, 2], [2, 3], [3, 4], [6, 7]])\ny = np.array([0, 0, 1, 1])\nX_test = np.array([[2, 2], [5, 5]])"}
{"task_id": 146, "completion_id": 8, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test samples.\n        k: Number of neighbours to consider (default: 3).\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample.\n    \"\"\"\n    n_samples = X.shape[0]\n    k = min(k, n_samples)\n    predictions = []\n    for x in X_test:\n        distances = []\n        for i in range(n_samples):\n            x_train = X[i]\n            if metric == 'euclidean':\n                dist = np.sqrt(np.sum((x - x_train) ** 2))\n            elif metric == 'manhattan':\n                dist = np.sum(np.abs(x - x_train))\n            elif metric == 'cosine':\n                dot_product = np.dot(x, x_train)\n                norm_x = np.sqrt(np.sum(x ** 2))\n                norm_x_train = np.sqrt(np.sum(x_train ** 2))\n                norm_product = norm_x * norm_x_train\n                norm_product = max(norm_product, 1e-12)\n                dist = 1 - dot_product / norm_product\n            else:\n                raise ValueError(f'Unsupported distance metric: {metric}')\n            distances.append((dist, y[i]))\n        distances.sort(key=lambda x: x[0])\n        k_nearest = distances[:k]\n        votes = {}\n        for (d, label) in k_nearest:\n            if label in votes:\n                votes[label] += 1\n            else:\n                votes[label] = 1\n        max_votes = max(votes.values())\n        candidates = [label for (label, count) in votes.items() if count == max_votes]\n        predicted_label = min(candidates)\n        predictions.append(predicted_label)\n    return predictions\nX = np.array([[1, 2], [2, 3], [3, 4], [6, 7], [7, 8]])\ny = np.array(['A', 'A', 'B', 'B', 'B'])\nX_test = np.array([[2.5, 3.5], [5, 6]])\npredictions = knn_predict(X, y, X_test, k=3, metric='euclidean')"}
{"task_id": 146, "completion_id": 9, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    m_samples = X_test.shape[0]\n    k = min(k, n_samples)\n    predictions = []\n    for i in range(m_samples):\n        x_test = X_test[i]\n        distances = []\n        for j in range(n_samples):\n            x_train = X[j]\n            if metric == 'euclidean':\n                dist = np.sqrt(np.sum((x_test - x_train) ** 2))\n            elif metric == 'manhattan':\n                dist = np.sum(np.abs(x_test - x_train))\n            elif metric == 'cosine':\n                dot_product = np.dot(x_test, x_train)\n                norm_test = np.linalg.norm(x_test, 2)\n                norm_train = np.linalg.norm(x_train, 2)\n                eps = 1e-12\n                dist = 1 - dot_product / ((norm_test + eps) * (norm_train + eps))\n            distances.append((dist, y[j]))\n        distances.sort(key=lambda x: x[0])\n        nearest_labels = [label for (dist, label) in distances[:k]]\n        label_counts = {}\n        for label in nearest_labels:\n            label_counts[label] = label_counts.get(label, 0) + 1\n        sorted_labels = sorted(label_counts.items(), key=lambda x: (-x[1], x[0]))\n        predictions.append(int(sorted_labels[0][0]))\n    return predictions.tolist()\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([0, 1, 0])\nX_test = np.array([[3, 3], [2, 5]])"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state, dtype=np.float64)\n    hidden1 = np.dot(state, weights['W1']) + weights['b1']\n    hidden1 = np.maximum(0, hidden1)\n    hidden2 = np.dot(hidden1, weights['W2']) + weights['b2']\n    hidden2 = np.maximum(0, hidden2)\n    action = np.dot(hidden2, weights['W3']) + weights['b3']\n    action = np.tanh(action)\n    return [float(np.round(x, 4)) for x in action]\nstate = [0.5, -1.2, 2.3]\nweights = {'W1': np.array([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]), 'b1': np.array([0.1, -0.2]), 'W2': np.array([[0.5, -1.5], [0.8, -0.3]]), 'b2': np.array([0.5, 0.2]), 'W3': np.array([[0.9], [-1.1]]), 'b3': np.array([0.3])}"}
{"task_id": 155, "completion_id": 1, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state, dtype=np.float64)\n    layer1 = np.dot(state, weights['W1']) + weights['b1']\n    layer1 = np.maximum(0, layer1)\n    layer2 = np.dot(layer1, weights['W2']) + weights['b2']\n    layer2 = np.maximum(0, layer2)\n    action = np.dot(layer2, weights['W3']) + weights['b3']\n    action = np.tanh(action)\n    return [round(x, 4) for x in action.tolist()]\nstate = [0.1, -0.5, 1.2]\nweights = {'W1': np.random.rand(3, 4), 'b1': np.random.rand(4), 'W2': np.random.rand(4, 5), 'b2': np.random.rand(5), 'W3': np.random.rand(5, 2), 'b3': np.random.rand(2)}\naction = actor_forward(state, weights)"}
{"task_id": 155, "completion_id": 2, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state, dtype=np.float32).flatten()\n    layer1 = np.dot(state, weights['W1']) + weights['b1']\n    layer1_relu = np.maximum(0, layer1)\n    layer2 = np.dot(layer1_relu, weights['W2']) + weights['b2']\n    layer2_relu = np.maximum(0, layer2)\n    output = np.dot(layer2_relu, weights['W3']) + weights['b3']\n    final_output = np.tanh(output)\n    return [round(float(x), 4) for x in final_output]\nstate = [1.0, -0.5, 2.0]\nweights = {'W1': np.array([[2, -1], [0, 1], [1, 0]]), 'b1': np.array([0.1, -0.2]), 'W2': np.array([[0.5, -0.5], [1, 0]]), 'b2': np.array([0.5, -0.1]), 'W3': np.array([[1], [-1]]), 'b3': np.array([0.0])}"}
{"task_id": 155, "completion_id": 3, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state, dtype=np.float64)\n    z1 = np.dot(state, weights['W1']) + weights['b1']\n    h1 = np.maximum(0, z1)\n    z2 = np.dot(h1, weights['W2']) + weights['b2']\n    h2 = np.maximum(0, z2)\n    z3 = np.dot(h2, weights['W3']) + weights['b3']\n    action = np.tanh(z3)\n    return [round(x, 4) for x in action.tolist()]"}
{"task_id": 155, "completion_id": 4, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    hidden1 = np.dot(state, weights['W1']) + weights['b1']\n    hidden1 = np.maximum(0, hidden1)\n    hidden2 = np.dot(hidden1, weights['W2']) + weights['b2']\n    hidden2 = np.maximum(0, hidden2)\n    action = np.dot(hidden2, weights['W3']) + weights['b3']\n    action = np.tanh(action)\n    return [round(x, 4) for x in action]"}
{"task_id": 155, "completion_id": 5, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state, dtype=np.float64)\n    affine1 = np.dot(state, weights['W1']) + weights['b1']\n    hidden1 = np.maximum(0.0, affine1)\n    affine2 = np.dot(hidden1, weights['W2']) + weights['b2']\n    hidden2 = np.maximum(0.0, affine2)\n    affine3 = np.dot(hidden2, weights['b3']) + weights['W3']\n    output = affine2 @ weights['W3'] + weights['b3']\n    action = np.tanh(output)\n    return [round(x, 4) for x in action.tolist()]"}
{"task_id": 155, "completion_id": 6, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state, dtype=np.float64)\n    h1 = np.dot(state, weights['W1']) + weights['b1']\n    h1 = np.maximum(0, h1)\n    h2 = np.dot(h1, weights['W2']) + weights['b2']\n    h2 = np.maximum(0, h2)\n    action = np.dot(h2, weights['W3']) + weights['b3']\n    action = np.tanh(action)\n    return [round(float(x), 4) for x in action]\nstate = [0.1, -0.5, 0.3]\nweights = {'W1': np.random.rand(3, 4), 'b1': np.random.rand(4), 'W2': np.random.rand(4, 5), 'b2': np.random.rand(5), 'W3': np.random.rand(5, 2), 'b3': np.random.rand(2)}\naction = actor_forward(state, weights)"}
{"task_id": 155, "completion_id": 7, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state, dtype=np.float64)\n    h1 = np.dot(state, weights['W1']) + weights['b1']\n    h1 = np.maximum(0, h1)\n    h2 = np.dot(h1, weights['W2']) + weights['b2']\n    h2 = np.maximum(0, h2)\n    action = np.dot(h2, weights['W3']) + weights['b3']\n    action = np.tanh(action)\n    return [round(x, 4) for x in action.tolist()]"}
{"task_id": 155, "completion_id": 8, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state, dtype=np.float64)\n    z1 = np.dot(state, weights['W1']) + weights['b1']\n    a1 = np.maximum(0, z1)\n    z2 = np.dot(a1, weights['W2']) + weights['b2']\n    a2 = np.maximum(0, z2)\n    z3 = np.dot(a2, weights['W3']) + weights['b3']\n    action = np.tanh(z3)\n    return [round(a, 4) for a in action.tolist()]"}
{"task_id": 155, "completion_id": 9, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state, dtype=np.float64)\n    z1 = np.dot(state, weights['W1']) + weights['b1']\n    a1 = np.maximum(0, z1)\n    z2 = np.dot(a1, weights['W2']) + weights['b2']\n    a2 = np.maximum(0, z2)\n    z3 = np.dot(a2, weights['W3']) + weights['b3']\n    action = np.tanh(z3)\n    return [round(x, 4) for x in action.tolist()]"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n    \n    The function learns a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm using coordinate descent.\n    \n    Args:\n        X: 2-D array of shape (m, n) \u2013 feature matrix.\n        y: 1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n    \n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack((np.ones((m, 1)), X))\n        intercept_index = 0\n    else:\n        X = np.hstack((np.zeros((m, 1)), X))\n        intercept_index = None\n    w = np.zeros(n + 1)\n    for _ in range(max_iters):\n        for j in range(1 if fit_intercept else 0, w.size):\n            if j == intercept_index:\n                w[intercept_index] = np.mean(y - np.dot(X, w) + w[intercept_index])\n                continue\n            r = y - np.dot(X, w)\n            r_j = r + w[j] * X[:, j]\n            correlation = np.dot(X[:, j], r_j)\n            x_j_squared = np.dot(X[:, j], X[:, j])\n            if x_j_squared == 0:\n                w_j_new = 0\n            else:\n                alpha = correlation / x_j_squared\n                threshold = lambda_param * 2\n                if alpha < -threshold:\n                    w_j_new = alpha + threshold\n                elif alpha > threshold:\n                    w_j_new = alpha - threshold\n                else:\n                    w_j_new = 0\n            w[j] = w_j_new\n    if fit_intercept:\n        bias = round(float(w[0]), 4)\n        weights_list = [round(float(w[i]), 4) for i in range(1, w.size)]\n    else:\n        bias = round(float(0.0), 4)\n        weights_list = [round(float(w[i]), 4) for i in range(1, w.size)]\n    return (weights_list, bias)"}
{"task_id": 160, "completion_id": 1, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n        intercept_idx = 0\n        weights = np.zeros(n + 1)\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n        weights = np.zeros(n + 1)\n\n    def soft_threshold(a: float, tau: float) -> float:\n        if a > tau:\n            return a - tau\n        elif a < -tau:\n            return a + tau\n        else:\n            return 0.0\n    for _ in range(max_iters):\n        for j in range(1, n + 1):\n            w_neg_j = weights.copy()\n            w_neg_j[j] = 0\n            y_pred = X @ w_neg_j\n            r_j = y - y_pred\n            x_j = X[:, j]\n            if np.all(x_j == 0):\n                weights[j] = 0\n                continue\n            dot = x_j @ r_j\n            norm_sq = x_j @ x_j\n            tau = lambda_param * m\n            weights[j] = soft_threshold(dot, tau) / norm_sq\n        if fit_intercept:\n            weights[intercept_idx] = np.mean(y - X[:, 1:] @ weights[1:])\n    weights_list = [round(w, 4) for w in weights]\n    bias = round(weights[0], 4)\n    return (weights_list[1:], bias)"}
{"task_id": 160, "completion_id": 2, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.\n\n    Args:\n        X: 2-D array of shape (m, n) - feature matrix.\n        y: 1-D array of length m - target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack((np.ones((m, 1)), X))\n    else:\n        X = np.hstack((np.zeros((m, 1)), X))\n    w = np.zeros(n + 1)\n    for _ in range(max_iters):\n        for j in range(1, n + 1):\n            w_j_old = w[j]\n            w[j] = 0\n            r_j = y - X @ w\n            correlation = X[:, j] @ r_j\n            x_j_sq_sum = X[:, j] @ X[:, j]\n            if x_j_sq_sum == 0:\n                new_weight = 0.0\n            else:\n                threshold = lambda_param * m\n                if correlation < -threshold:\n                    new_weight = (correlation + threshold) / x_j_sq_sum\n                elif correlation > threshold:\n                    new_weight = (correlation - threshold) / x_j_sq_sum\n                else:\n                    new_weight = 0.0\n            w[j] = new_weight\n        if fit_intercept:\n            residual = y - X @ w\n            w[0] = residual.mean()\n    weights_list = [round(w_i, 4) for w_i in w[1:]]\n    bias = round(w[0], 4)\n    return (weights_list, bias)"}
{"task_id": 160, "completion_id": 3, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    X_with_intercept = np.hstack([np.ones((m, 1)), X]) if fit_intercept else X\n    (_, n_with_intercept) = X_with_intercept.shape\n    weights = np.zeros(n_with_intercept)\n    for _ in range(max_iters):\n        for j in range(1 if fit_intercept else 0, n_with_intercept):\n            w_neg_j = weights.copy()\n            w_neg_j[j] = 0.0\n            predictions = X_with_intercept @ w_neg_j\n            residuals = y - predictions\n            rho_j = X_with_intercept[:, j] @ residuals\n            xj_squared_sum = X_with_intercept[:, j] @ X_with_intercept[:, j]\n            if j == 0:\n                weights[j] = np.mean(residuals)\n            else:\n                alpha = lambda_param * m\n                if rho_j < -alpha:\n                    weights[j] = (rho_j + alpha) / xj_squared_sum\n                elif rho_j > alpha:\n                    weights[j] = (rho_j - alpha) / xj_squared_sum\n                else:\n                    weights[j] = 0.0\n    weights_rounded = [round(w, 4) for w in weights[1:]]\n    bias = round(weights[0], 4) if fit_intercept else 0.0\n    return (weights_rounded, bias)"}
{"task_id": 160, "completion_id": 4, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack((np.ones((m, 1)), X))\n        intercept_index = 0\n    else:\n        X = np.hstack((np.zeros((m, 1)), X))\n    (m, n) = X.shape\n    w = np.zeros(n)\n    for _ in range(max_iters):\n        if fit_intercept:\n            residuals = y - np.dot(X, w)\n            new_intercept = residuals.mean()\n            w[intercept_index] = new_intercept\n        for j in range(1 if fit_intercept else 0, n):\n            x_j = X[:, j]\n            w_neg_j = w.copy()\n            w_neg_j[j] = 0\n            r_j = y - np.dot(X, w_neg_j)\n            rho_j = np.dot(x_j, r_j)\n            z_j = np.dot(x_j, x_j)\n            if z_j == 0:\n                continue\n            if fit_intercept and j == 0:\n                continue\n            if rho_j < -lambda_param * m / 2:\n                w_j = (rho_j + lambda_param * m / 2) / z_j\n            elif rho_j > lambda_param * m / 2:\n                w_j = (rho_j - lambda_param * m / 2) / z_j\n            else:\n                w_j = 0\n            w[j] = w_j\n    weights = w[1:].tolist() if fit_intercept else w.tolist()\n    bias = round(float(w[0]), 4) if fit_intercept else 0.0\n    weights = [round(w_j, 4) for w_j in weights]\n    return (weights, bias)"}
{"task_id": 160, "completion_id": 5, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function learns a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm using coordinate descent.\n\n    Args:\n        X: 2-D array of shape (m, n) \u2013 feature matrix.\n        y: 1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights_list, bias) where weights_list is a list of length n,\n        and bias is a float.  All returned numbers are rounded to 4 decimals.\n    \"\"\"\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    if fit_intercept:\n        X = np.hstack((np.ones((m, 1)), X))\n        intercept_idx = 0\n    else:\n        X = np.hstack((np.zeros((m, 1)), X))\n        intercept_idx = 0\n    weights = np.zeros(X.shape[1])\n    for _ in range(max_iters):\n        if fit_intercept:\n            residual = y - X @ weights\n            weights[intercept_idx] = np.mean(residual)\n        for j in range(1, X.shape[1]):\n            if j == intercept_idx:\n                continue\n            xj = X[:, j]\n            wj = weights[j]\n            w_negj = weights.copy()\n            w_negj[j] = 0.0\n            predictions = X @ w_negj\n            residual = y - predictions\n            rho = xj @ residual\n            norm_sqr_xj = xj @ xj\n            threshold = lambda_param * m\n            if rho < -threshold:\n                w_new = (rho + threshold) / norm_sqr_xj\n            elif rho > threshold:\n                w_new = (rho - threshold) / norm_sqr_xj\n            else:\n                w_new = 0.0\n            weights[j] = w_new\n    bias = round(weights[intercept_idx], 4)\n    weights_list = [round(w, 4) for w in weights[1:]]\n    return (weights_list, bias)\nX = np.array([[1.0, 2.0], [2.0, 4.0], [3.0, 6.0]])\ny = np.array([3.0, 6.0, 9.0])"}
{"task_id": 160, "completion_id": 6, "solution": "import numpy as np\nimport numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X: 2-D array of shape (m, n) \u2013 feature matrix.\n        y: 1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n        intercept_index = 0\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n        intercept_index = 0\n    w = np.zeros(n + 1)\n    y = y.copy()\n    for _ in range(max_iters):\n        for j in range(1, n + 1):\n            x_j = X[:, j]\n            w_j_tilde = w.copy()\n            w_j_tilde[j] = 0\n            r_j = y - X @ w_j_tilde\n            rho_j = x_j @ r_j\n            if lambda_param * m >= abs(rho_j):\n                w[j] = 0.0\n            else:\n                w[j] = (rho_j - np.sign(rho_j) * lambda_param * m) / (x_j @ x_j)\n        if fit_intercept:\n            intercept = np.mean(y - X[:, 1:] @ w[1:])\n            w[intercept_index] = intercept\n    weights_list = [round(w[i], 4) for i in range(1, n + 1)]\n    bias = round(w[intercept_index], 4)\n    return (weights_list, bias)\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([2, 3, 4, 5])"}
{"task_id": 160, "completion_id": 7, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"\n    Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    Args:\n        X: 2-D array of shape (m, n) \u2013 feature matrix.\n        y: 1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float. All returned numbers are rounded to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    intercept_col = np.ones(m) if fit_intercept else np.zeros(m)\n    X_with_intercept = np.column_stack((intercept_col, X))\n    w = np.zeros(n + 1)\n    for _ in range(max_iters):\n        for j in range(1, n + 1):\n            w_j_zero = w.copy()\n            w_j_zero[j] = 0\n            y_pred = X_with_intercept @ w_j_zero\n            r = y - y_pred\n            x_j = X_with_intercept[:, j]\n            numerator = x_j @ r\n            denom = x_j @ x_j\n            if denom == 0:\n                w_j = 0\n            else:\n                a = numerator / denom\n                tau = lambda_param * m\n                if a < -tau:\n                    w[j] = (a + tau) / 1.0\n                elif a > tau:\n                    w[j] = (a - tau) / 1.0\n                else:\n                    w[j] = 0.0\n        if fit_intercept:\n            w_local = w.copy()\n            w_local[0] = 0\n            w_no_intercept = w_local[1:]\n            w_no_intercept = w_no_intercept.reshape(-1, 1)\n            if X_with_intercept[:, 1:].shape[1] == 0:\n                y_pred = np.zeros(m)\n            else:\n                y_pred = X_with_intercept[:, 1:] @ w_no_intercept\n            mean_residual = np.mean(y - y_pred)\n            w[0] = mean_residual\n    weights_list = [round(wj, 4) for wj in w[1:]]\n    bias_float = round(w[0], 4)\n    return (weights_list, bias_float)\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([3, 5, 7])"}
{"task_id": 160, "completion_id": 8, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n        intercept_idx = 0\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n        intercept_idx = 0\n    w = np.zeros(n + 1)\n    for _ in range(max_iters):\n        for j in range(1, n + 1):\n            w[j] = 0.0\n            r_j = y - X @ w\n            w[j] = w[j]\n            x_j = X[:, j]\n            rho_j = x_j @ r_j\n            x_j_squared_sum = np.sum(x_j ** 2)\n            if rho_j > lambda_param * m / 2:\n                w_j = (rho_j - lambda_param * m / 2) / x_j_squared_sum\n            elif rho_j < -lambda_param * m / 2:\n                w_j = (rho_j + lambda_param * m / 2) / x_j_squared_sum\n            else:\n                w_j = 0.0\n            w[j] = w_j\n        if fit_intercept:\n            residual = y - X @ w\n            w[intercept_idx] = np.mean(residual)\n    bias = round(float(w[intercept_idx]), 4)\n    weights_list = [round(float(wi), 4) for wi in w[1:]]\n    return (weights_list, bias)"}
{"task_id": 160, "completion_id": 9, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n        intercept_index = 0\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n    w = np.zeros(n + 1)\n    for _ in range(max_iters):\n        for j in range(1, n + 1):\n            if fit_intercept:\n                w[intercept_index] = np.mean(y - np.dot(X[:, 1:], w[1:]))\n            r = y - X[:, j] * w[j]\n            for idx in range(n + 1):\n                if idx != j:\n                    r -= X[:, idx] * w[idx]\n            xj_dot_r = np.dot(X[:, j], r)\n            xj_squared = np.dot(X[:, j], X[:, j])\n            sigma = lambda_param * m\n            if xj_dot_r < -sigma:\n                w_j = (xj_dot_r + sigma) / xj_squared\n            elif xj_dot_r > sigma:\n                w_j = (xj_dot_r - sigma) / xj_squared\n            else:\n                w_j = 0\n            w[j] = w_j\n    weights = [round(w_j, 4) for w_j in w[1:]]\n    bias = round(w[0], 4) if fit_intercept else 0.0\n    return (weights, bias)"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    x_arr = np.array(x) if isinstance(x, list) else x\n    y_arr = np.array(y) if isinstance(y, list) else y\n    if x_arr.ndim != 1 or y_arr.ndim != 1 or x_arr.shape[0] != y_arr.shape[0]:\n        return -1\n    distance = np.mean(x_arr != y_arr)\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 1, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    x_np = np.asarray(x)\n    y_np = np.asarray(y)\n    if x_np.ndim != 1 or y_np.ndim != 1 or x_np.shape[0] != y_np.shape[0]:\n        return -1\n    diff_count = np.not_equal(x_np, y_np).sum()\n    n = x_np.shape[0]\n    distance = diff_count / n\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 2, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    x = np.array(x) if isinstance(x, list) else x\n    y = np.array(y) if isinstance(y, list) else y\n    if x.ndim != 1 or y.ndim != 1 or len(x) != len(y):\n        return -1\n    diff = x != y\n    distance = np.mean(diff)\n    return round(float(distance), 4)"}
{"task_id": 165, "completion_id": 3, "solution": "import numpy as np\nfrom typing import list as List, Union\ndef hamming_distance(x: Union[List[int], 'np.ndarray'], y: Union[List[int], 'np.ndarray']) -> Union[float, int]:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if x.ndim != 1 or y.ndim != 1 or x.shape[0] != y.shape[0]:\n        return -1\n    diff_count = np.sum(x != y)\n    N = x.shape[0]\n    distance = diff_count / N\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 4, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    if not (isinstance(x, (list, np.ndarray)) and isinstance(y, (list, np.ndarray))):\n        raise TypeError('Input must be either a list or a NumPy array')\n    x = np.array(x)\n    y = np.array(y)\n    if x.ndim != 1 or y.ndim != 1:\n        raise ValueError('Input vectors must be 1-dimensional')\n    if x.shape[0] != y.shape[0]:\n        return -1\n    n = x.shape[0]\n    diff = (x != y).sum()\n    distance = diff / n\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 5, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if x.ndim != 1 or y.ndim != 1:\n        raise ValueError('Both input vectors must be 1-dimensional.')\n    if len(x) != len(y):\n        return -1\n    distance = np.mean(x != y)\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 6, "solution": "import numpy as np\nfrom typing import list as list_type\ndef hamming_distance(x: list_type[int] | 'np.ndarray', y: list_type[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if x.ndim != 1 or y.ndim != 1 or len(x) != len(y):\n        return -1\n    distance = np.mean(x != y)\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 7, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    x = np.asarray(x)\n    y = np.asarray(y)\n    if x.ndim != 1 or y.ndim != 1:\n        raise ValueError('Inputs must be 1-dimensional vectors.')\n    if x.shape[0] != y.shape[0]:\n        return -1\n    differing_elements = np.sum(x != y)\n    n = x.shape[0]\n    distance = differing_elements / n\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 8, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    a = np.array(x)\n    b = np.array(y)\n    if a.shape != b.shape:\n        return -1\n    distance = np.mean(a != b)\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 9, "solution": "import numpy as np\nfrom typing import list, Union\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return\\u202f-1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or\\u202f-1 if the inputs have different lengths.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if x.shape[0] != y.shape[0]:\n        return -1\n    distance = np.mean(x != y)\n    return round(distance, 4)"}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer')\n    if N == 1:\n        return [1.0]\n    if window not in ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']:\n        raise ValueError(f'Unsupported window type: {window}')\n    if window == 'generalized_cosine' and coefficients is None:\n        raise ValueError(\"Coefficients must be provided for 'generalized_cosine' window\")\n    window_coeffs = []\n    for n in range(N):\n        if window == 'hamming':\n            coeff = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n        elif window == 'hann':\n            coeff = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n        elif window == 'blackman_harris':\n            a0 = 0.35875\n            a1 = 0.48829\n            a2 = 0.14128\n            a3 = 0.01168\n            coeff = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n        elif window == 'generalized_cosine':\n            coeff = coefficients[0]\n            for k in range(1, len(coefficients)):\n                coeff += coefficients[k] * np.cos(2 * np.pi * k * n / (N - 1))\n        else:\n            raise ValueError(f'Unsupported window type: {window}')\n        window_coeffs.append(round(coeff, 4))\n    return window_coeffs"}
{"task_id": 169, "completion_id": 1, "solution": "import numpy as np\nimport math\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer')\n    if N == 1:\n        return [1.0]\n    supported_windows = ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']\n    if window not in supported_windows:\n        raise ValueError(f'Unsupported window type: {window}')\n    if window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Coefficients must be provided for generalized cosine window')\n        M = len(coefficients)\n    else:\n        coefficients = None\n    window_values = []\n    for n in range(N):\n        if window == 'hamming':\n            term = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n        elif window == 'hann':\n            term = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n        elif window == 'blackman_harris':\n            a0 = 0.35875\n            a1 = 0.48829\n            a2 = 0.14128\n            a3 = 0.01168\n            term = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n        elif window == 'generalized_cosine':\n            term = 0.0\n            for k in range(M):\n                term += coefficients[k] * np.cos(2 * np.pi * k * n / (N - 1))\n        window_values.append(round(term, 4))\n    return window_values"}
{"task_id": 169, "completion_id": 2, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer')\n    if N == 1:\n        return [1.0]\n    valid_windows = ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']\n    if window not in valid_windows:\n        raise ValueError(f'Unknown window type: {window}. Supported types are {valid_windows}')\n    if window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError(\"For 'generalized_cosine' window, coefficients must be provided\")\n    window_coeffs = []\n    for n in range(N):\n        if window == 'hamming':\n            term = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n            window_coeffs.append(term)\n        elif window == 'hann':\n            term = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n            window_coeffs.append(term)\n        elif window == 'blackman_harris':\n            a0 = 0.35875\n            a1 = 0.48829\n            a2 = 0.14128\n            a3 = 0.01168\n            term = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n            window_coeffs.append(term)\n        elif window == 'generalized_cosine':\n            term = 0.0\n            for (k, ak) in enumerate(coefficients):\n                term += ak * np.cos(2 * np.pi * k * n / (N - 1))\n            window_coeffs.append(term)\n    return [round(val, 4) for val in window_coeffs]"}
{"task_id": 169, "completion_id": 3, "solution": "import numpy as np\nfrom math import cos, pi\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if N == 1:\n        return [1.0]\n    window = window.lower()\n    window_types = ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']\n    if window not in window_types:\n        raise ValueError(f'Unknown window: {window}. Use one of {window_types}.')\n\n    def compute_coefficient(i):\n        n = float(i)\n        if window == 'hamming':\n            return 0.54 - 0.46 * cos(2 * pi * n / (N - 1))\n        elif window == 'hann':\n            return 0.5 - 0.5 * cos(2 * pi * n / (N - 1))\n        elif window == 'blackman_harris':\n            a0 = 0.35875\n            a1 = 0.48829\n            a2 = 0.14128\n            a3 = 0.01168\n            return a0 - a1 * cos(2 * pi * n / (N - 1)) + a2 * cos(4 * pi * n / (N - 1)) - a3 * cos(6 * pi * n / (N - 1))\n        elif window == 'generalized_cosine':\n            if coefficients is None:\n                raise ValueError('Coefficients must be provided for generalized_cosine window.')\n            return sum((ak * cos(2 * pi * k * n / (N - 1)) for (k, ak) in enumerate(coefficients)))\n        else:\n            raise ValueError(f'Unknown window: {window}')\n    return [round(compute_coefficient(i), 4) for i in range(N)]"}
{"task_id": 169, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if N == 1:\n        return [1.0]\n    valid_windows = ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']\n    if window not in valid_windows:\n        raise ValueError(f\"Unknown window name '{window}'. Supported values are {valid_windows}\")\n    window_func = []\n    if window == 'hamming':\n        for n in range(N):\n            w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n            window_func.append(round(w, 4))\n    elif window == 'hann':\n        for n in range(N):\n            w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n            window_func.append(round(w, 4))\n    elif window == 'blackman_harris':\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        for n in range(N):\n            w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n            window_func.append(round(w, 4))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for 'generalized_cosine' window.\")\n        M = len(coefficients)\n        for n in range(N):\n            w = 0.0\n            for k in range(M):\n                w += coefficients[k] * np.cos(2 * np.pi * k * n / (N - 1))\n            window_func.append(round(w, 4))\n    return window_func"}
{"task_id": 169, "completion_id": 5, "solution": "import numpy as np\nfrom math import pi, cos\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N < 1:\n        raise ValueError('N must be a positive integer.')\n    if N == 1:\n        return [1.0]\n    if window not in ('hamming', 'hann', 'blackman_harris', 'generalized_cosine'):\n        raise ValueError('Unknown window type.')\n    if window == 'generalized_cosine' and coefficients is None:\n        raise ValueError(\"'coefficients' must be provided for generalized cosine window.\")\n    window_coeffs = []\n    for n in range(N):\n        if window == 'hamming':\n            coeff = 0.54 - 0.46 * cos(2 * pi * n / (N - 1))\n        elif window == 'hann':\n            coeff = 0.5 - 0.5 * cos(2 * pi * n / (N - 1))\n        elif window == 'blackman_harris':\n            a0 = 0.35875\n            a1 = 0.48829\n            a2 = 0.14128\n            a3 = 0.01168\n            coeff = a0 - a1 * cos(2 * pi * n / (N - 1)) + a2 * cos(4 * pi * n / (N - 1)) - a3 * cos(6 * pi * n / (N - 1))\n        elif window == 'generalized_cosine':\n            total = 0.0\n            for (k, ak) in enumerate(coefficients):\n                total += ak * cos(2 * pi * k * n / (N - 1))\n            coeff = total\n        window_coeffs.append(round(coeff, 4))\n    return window_coeffs"}
{"task_id": 169, "completion_id": 6, "solution": "import numpy as np\nimport math\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer')\n    if N == 1:\n        return [1.0]\n    valid_windows = ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']\n    if window not in valid_windows:\n        raise ValueError(f'Unknown window: {window}. Valid options: {valid_windows}')\n    if window == 'generalized_cosine' and (coefficients is None or not isinstance(coefficients, list)):\n        raise ValueError(\"For generalized_cosine window, 'coefficients' must be a non-null list\")\n    window_coeffs = []\n    for n in range(N):\n        if window == 'hamming':\n            term = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n        elif window == 'hann':\n            term = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n        elif window == 'blackman_harris':\n            a0 = 0.35875\n            a1 = 0.48829\n            a2 = 0.14128\n            a3 = 0.01168\n            term = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n        elif window == 'generalized_cosine':\n            term = 0.0\n            for (k, ak) in enumerate(coefficients):\n                term += ak * np.cos(2 * np.pi * k * n / (N - 1))\n        window_coeffs.append(round(term, 4))\n    return window_coeffs"}
{"task_id": 169, "completion_id": 7, "solution": "import numpy as np\nimport math\nfrom typing import list, Optional\ndef generate_window(window: str, N: int, coefficients: Optional[list[float]]=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\", and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if N == 1:\n        return [1.0]\n    n = np.arange(N)\n    if N == 1:\n        norm = 1\n    else:\n        norm = N - 1\n    if window == 'hamming':\n        return [round(0.54 - 0.46 * np.cos(2 * np.pi * num / norm), 4) for num in n]\n    elif window == 'hann':\n        return [round(0.5 - 0.5 * np.cos(2 * np.pi * num / norm), 4) for num in n]\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        result = [round(a0 - a1 * np.cos(2 * np.pi * num / norm) + a2 * np.cos(4 * np.pi * num / norm) - a3 * np.cos(6 * np.pi * num / norm), 4) for num in n]\n        return result\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('For generalized_cosine, the coefficients argument must be provided.')\n        result = [round(sum((ak * np.cos(2 * np.pi * k * num / norm) for (k, ak) in enumerate(coefficients))), 4) for num in n]\n        return result\n    else:\n        raise ValueError(f'Unknown window type: {window}')"}
{"task_id": 169, "completion_id": 8, "solution": "import numpy as np\nfrom math import cos, pi\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer')\n    if N == 1:\n        return [1.0]\n    denom = N - 1\n    if denom == 0:\n        return [1.0]\n    results = []\n    if window == 'hamming':\n        for n in range(N):\n            val = 0.54 - 0.46 * cos(2 * pi * n / denom)\n            results.append(val)\n    elif window == 'hann':\n        for n in range(N):\n            val = 0.5 - 0.5 * cos(2 * pi * n / denom)\n            results.append(val)\n    elif window == 'blackman_harris':\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        for n in range(N):\n            val = a0 - a1 * cos(2 * pi * n / denom) + a2 * cos(4 * pi * n / denom) - a3 * cos(6 * pi * n / denom)\n            results.append(val)\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('For generalized_cosine window, coefficients must be provided')\n        M = len(coefficients)\n        for n in range(N):\n            val = 0.0\n            for k in range(M):\n                val += coefficients[k] * cos(2 * pi * k * n / denom)\n            results.append(val)\n    else:\n        raise ValueError(f'Unknown window type: {window}')\n    return [round(val, 4) for val in results]"}
{"task_id": 169, "completion_id": 9, "solution": "import numpy as np\nfrom math import cos, pi\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if N == 1:\n        return [1.0]\n    if window not in {'hamming', 'hann', 'blackman_harris', 'generalized_cosine'}:\n        raise ValueError(f\"Unknown window type: {window}. Supported types: 'hamming', 'hann', 'blackman_harris', 'generalized_cosine'.\")\n    window_func = []\n    if window == 'hamming':\n        for n in range(N):\n            w = 0.54 - 0.46 * cos(2 * pi * n / (N - 1))\n            window_func.append(round(w, 4))\n    elif window == 'hann':\n        for n in range(N):\n            w = 0.5 - 0.5 * cos(2 * pi * n / (N - 1))\n            window_func.append(round(w, 4))\n    elif window == 'blackman_harris':\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        for n in range(N):\n            w = a0 - a1 * cos(2 * pi * n / (N - 1)) + a2 * cos(4 * pi * n / (N - 1)) - a3 * cos(6 * pi * n / (N - 1))\n            window_func.append(round(w, 4))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for 'generalized_cosine' window.\")\n        if not isinstance(coefficients, list) or not all((isinstance(a, (float, int)) for a in coefficients)):\n            raise ValueError(\"Coefficients must be a list of floats or integers for 'generalized_cosine' window.\")\n        K = len(coefficients)\n        for n in range(N):\n            w = 0.0\n            for k in range(K):\n                w += coefficients[k] * cos(2 * pi * k * n / (N - 1))\n            window_func.append(round(w, 4))\n    return window_func"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef logistic_regression_train_predict(X_train: List[List[float]], y_train: List[int], X_test: List[List[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> List[int]:\n    \"\"\"\n    Train a binary Logistic Regression classifier using mini-batch Gradient \n    Descent and return predictions for the provided test set.\n    \n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n    \n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train, dtype=float)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test, dtype=float)\n    X_train = np.hstack([X_train, np.ones((X_train.shape[0], 1))])\n    X_test = np.hstack([X_test, np.ones((X_test.shape[0], 1))])\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return list(unique_labels[0] * np.ones(len(X_test), dtype=int))\n    original_labels = unique_labels\n    (label0, label1) = sorted(original_labels)\n    y_train_binary = np.where(y_train == label0, 0, 1)\n    weights = np.random.randn(X_train.shape[1])\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z.clip(-500, 500)))\n    n_samples = X_train.shape[0]\n    for _ in range(epochs):\n        indices = np.random.permutation(n_samples)\n        X_shuffled = X_train[indices]\n        y_shuffled = y_train_binary[indices]\n        for start_idx in range(0, n_samples, batch_size):\n            end_idx = min(start_idx + batch_size, n_samples)\n            X_batch = X_shuffled[start_idx:end_idx]\n            y_batch = y_shuffled[start_idx:end_idx]\n            z = X_batch @ weights\n            y_pred = sigmoid(z)\n            gradient = X_batch.T @ (y_pred - y_batch) / batch_size\n            weights -= learning_rate * gradient\n    z_test = X_test @ weights\n    y_pred_prob = sigmoid(z_test)\n    y_pred_binary = (y_pred_prob >= 0.5).astype(int)\n    y_pred_original = np.where(y_pred_binary == 0, label0, label1)\n    return list(y_pred_original.astype(int))"}
{"task_id": 171, "completion_id": 1, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    X_train = np.hstack([X_train, np.ones((X_train.shape[0], 1))])\n    X_test = np.hstack([X_test, np.ones((X_test.shape[0], 1))])\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    pos_label = max(set(unique_labels), key=y_train.tolist().count)\n    neg_label = min(set(unique_labels), key=y_train.tolist().count)\n    y_train_internal = np.where(y_train == pos_label, 1, 0)\n    weights = np.zeros(X_train.shape[1])\n    n_samples = X_train.shape[0]\n    n_batches = n_samples // batch_size\n\n    def sigmoid(z):\n        return 1.0 / (1 + np.exp(-z))\n    for epoch in range(epochs):\n        permutation = np.random.permutation(n_samples)\n        X_shuffled = X_train[permutation]\n        y_shuffled = y_train_internal[permutation]\n        for i in range(n_batches):\n            X_batch = X_shuffled[i * batch_size:(i + 1) * batch_size]\n            y_batch = y_shuffled[i * batch_size:(i + 1) * batch_size]\n            z = np.dot(X_batch, weights)\n            y_pred = sigmoid(z)\n            gradient = np.dot(X_batch.T, y_pred - y_batch) / batch_size\n            weights -= learning_rate * gradient\n    z_test = np.dot(X_test, weights)\n    y_test_pred_prob = sigmoid(z_test)\n    y_test_pred_internal = np.where(y_test_pred_prob > 0.5, 1, 0)\n    y_test_pred = np.where(y_test_pred_internal == 1, pos_label, neg_label)\n    return y_test_pred.tolist()\nX_train = [[0.1, 0.5], [1.2, 2.3], [2.1, 1.8]]\ny_train = [0, 1, 1]\nX_test = [[0.3, 0.4], [2.0, 2.0]]"}
{"task_id": 171, "completion_id": 2, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) != 2:\n        raise ValueError('y_train must contain exactly two distinct labels.')\n    (label_0, label_1) = sorted(unique_labels)\n    y_train_mapped = np.where(y_train == label_0, 0, 1)\n    if np.all(y_train_mapped == 0):\n        return [label_0] * len(X_test)\n    if np.all(y_train_mapped == 1):\n        return [label_1] * len(X_test)\n    X_train = np.c_[np.ones(X_train.shape[0]), X_train]\n    X_test = np.c_[np.ones(len(X_test)), np.array(X_test)]\n    weights = np.zeros(X_train.shape[1])\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z.clip(-500, 500)))\n    for epoch in range(epochs):\n        indices = np.random.permutation(X_train.shape[0])\n        for i in range(0, X_train.shape[0], batch_size):\n            batch_indices = indices[i:i + batch_size]\n            X_batch = X_train[batch_indices]\n            y_batch = y_train_mapped[batch_indices]\n            z = X_batch @ weights\n            predictions = sigmoid(z)\n            error = predictions - y_batch\n            gradient = X_batch.T @ error\n            weights -= learning_rate * gradient\n    z_test = X_test @ weights\n    probabilities = sigmoid(z_test)\n    predictions_mapped = np.where(probabilities > 0.5, label_1, label_0)\n    return predictions_mapped.tolist()\nX_train = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [4.0, 5.0]]\ny_train = [0, 0, 1, 1]\nX_test = [[2.0, 3.0], [3.0, 4.0]]\npredictions = logistic_regression_train_predict(X_train, y_train, X_test)"}
{"task_id": 171, "completion_id": 3, "solution": "import numpy as np\nfrom typing import List\ndef logistic_regression_train_predict(X_train: List[List[float]], y_train: List[int], X_test: List[List[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> List[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    X_train_b = np.c_[X_train, np.ones(X_train.shape[0])]\n    X_test_b = np.c_[X_test, np.ones(X_test.shape[0])]\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * X_test_b.shape[0]\n    (pos_label, neg_label) = (max(unique_labels), min(unique_labels))\n    y_mapped = np.where(y_train == pos_label, 1, 0)\n    weights = np.random.randn(X_train_b.shape[1])\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    n_samples = X_train_b.shape[0]\n    for epoch in range(epochs):\n        indices = np.random.permutation(n_samples)\n        X_shuffled = X_train_b[indices]\n        y_shuffled = y_mapped[indices]\n        for i in range(0, n_samples, batch_size):\n            X_batch = X_shuffled[i:i + batch_size]\n            y_batch = y_shuffled[i:i + batch_size]\n            z = np.dot(X_batch, weights)\n            y_hat = sigmoid(z)\n            gradient = np.dot(X_batch.T, y_hat - y_batch)\n            weights -= learning_rate * gradient\n    z = np.dot(X_test_b, weights)\n    y_proba = sigmoid(z)\n    y_pred_binary = (y_proba >= 0.5).astype(int)\n    y_pred = [pos_label if p == 1 else neg_label for p in y_pred_binary]\n    return y_pred\nX_train = [[1.2, -2.3], [0.5, 2.1], [-0.5, -0.5]]\ny_train = [0, 1, 0]\nX_test = [[0.8, -2.0], [-0.2, 1.0]]"}
{"task_id": 171, "completion_id": 4, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n    \n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n    \n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    unique_classes = np.unique(y_train)\n    if len(unique_classes) != 2:\n        raise ValueError('y_train must contain exactly two unique class labels')\n    (class_0, class_1) = unique_classes\n    y_train_bin = np.where(y_train == class_1, 1, 0)\n    X_train = np.hstack([X_train, np.ones((X_train.shape[0], 1))])\n    X_test = np.hstack([X_test, np.ones((X_test.shape[0], 1))])\n    if len(np.unique(y_train)) == 1:\n        return [class_0 if class_0 == class_1 else class_1 if class_1 == class_1 else class_0] * X_test.shape[0]\n    n_features = X_train.shape[1]\n    weights = np.zeros(n_features)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    n_samples = X_train.shape[0]\n    iteration = 0\n    for epoch in range(epochs):\n        indices = np.random.permutation(n_samples)\n        X_shuffled = X_train[indices]\n        y_shuffled = y_train_bin[indices]\n        for i in range(0, n_samples, batch_size):\n            X_batch = X_shuffled[i:i + batch_size]\n            y_batch = y_shuffled[i:i + batch_size]\n            z = X_batch @ weights\n            y_pred = sigmoid(z)\n            gradient = X_batch.T @ (y_pred - y_batch) / batch_size\n            weights -= learning_rate * gradient\n    z_test = X_test @ weights\n    y_prob_test = sigmoid(z_test)\n    y_pred_test_bin = (y_prob_test >= 0.5).astype(int)\n    y_pred_test = np.where(y_pred_test_bin == 0, class_0, class_1)\n    return y_pred_test.tolist()"}
{"task_id": 171, "completion_id": 5, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train, dtype=np.float64)\n    y_train = np.array(y_train, dtype=np.int64)\n    X_test = np.array(X_test, dtype=np.float64)\n    unique_labels = np.sort(np.unique(y_train))\n    if len(unique_labels) != 2:\n        raise ValueError('y_train must contain exactly two distinct classes.')\n    if unique_labels[0] == unique_labels[1]:\n        return list(np.repeat(unique_labels[0], len(X_test)))\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_encoded = np.vectorize(label_map.get)(y_train)\n    X_train = np.c_[np.ones(X_train.shape[0]), X_train]\n    X_test = np.c_[np.ones(X_test.shape[0]), X_test]\n    (n_samples, n_features) = X_train.shape\n    weights = np.zeros(n_features)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    for _ in range(epochs):\n        permutation = np.random.permutation(n_samples)\n        X_shuffled = X_train[permutation]\n        y_shuffled = y_train_encoded[permutation]\n        for i in range(0, n_samples, batch_size):\n            X_batch = X_shuffled[i:i + batch_size]\n            y_batch = y_shuffled[i:i + batch_size]\n            z = np.dot(X_batch, weights)\n            h = sigmoid(z)\n            gradient = np.dot(X_batch.T, h - y_batch) / batch_size\n            weights -= learning_rate * gradient\n    z = np.dot(X_test, weights)\n    probabilities = sigmoid(z)\n    y_pred_encoded = (probabilities >= 0.5).astype(int)\n    label_map_reversed = {v: k for (k, v) in label_map.items()}\n    y_pred = np.vectorize(label_map_reversed.get)(y_pred_encoded)\n    return list(y_pred)"}
{"task_id": 171, "completion_id": 6, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n    \n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n    \n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) > 2:\n        raise ValueError('y_train must contain exactly two distinct labels')\n    if len(unique_labels) == 1:\n        return [int(unique_labels[0])] * len(X_test)\n    label_0 = unique_labels[0]\n    label_1 = unique_labels[1]\n    y_train = np.where(y_train == label_0, 0, 1)\n    X_train = np.hstack([X_train, np.ones((X_train.shape[0], 1))])\n    X_test = np.hstack([X_test, np.ones((X_test.shape[0], 1))])\n    weights = np.zeros(X_train.shape[1])\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    n_samples = X_train.shape[0]\n    n_batches = n_samples // batch_size + (1 if n_samples % batch_size > 0 else 0)\n    losses = []\n    for epoch in range(epochs):\n        permutation = np.random.permutation(n_samples)\n        X_shuffled = X_train[permutation]\n        y_shuffled = y_train[permutation]\n        for i in range(n_batches):\n            start = i * batch_size\n            end = min((i + 1) * batch_size, n_samples)\n            X_batch = X_shuffled[start:end]\n            y_batch = y_shuffled[start:end]\n            z = X_batch @ weights\n            predictions = sigmoid(z)\n            error = predictions - y_batch\n            gradient = X_batch.T @ error / batch_size\n            weights -= learning_rate * gradient\n    z = X_test @ weights\n    probabilities = sigmoid(z)\n    y_pred_internal = (probabilities >= 0.5).astype(int)\n    y_pred = np.where(y_pred_internal == 0, label_0, label_1)\n    return y_pred.tolist()"}
{"task_id": 171, "completion_id": 7, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train, dtype=float)\n    y_train = np.array(y_train, dtype=int)\n    X_test = np.array(X_test, dtype=float)\n    X_train = np.c_[X_train, np.ones(X_train.shape[0])]\n    X_test = np.c_[X_test, np.ones(X_test.shape[0])]\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * X_test.shape[0]\n    (pos_label, neg_label) = sorted(unique_labels)\n    y_mapped = (y_train == pos_label).astype(float)\n    weights = np.zeros(X_train.shape[1])\n\n    def sigmoid(z):\n        return 1.0 / (1.0 + np.exp(-z))\n    n_samples = X_train.shape[0]\n    for _ in range(epochs):\n        indices = np.random.permutation(n_samples)\n        for i in range(0, n_samples, batch_size):\n            batch_indices = indices[i:i + batch_size]\n            X_batch = X_train[batch_indices]\n            y_batch = y_mapped[batch_indices]\n            z = X_batch @ weights\n            p = sigmoid(z)\n            grad = (p - y_batch)[:, None] * X_batch\n            grad = grad.mean(axis=0)\n            weights -= learning_rate * grad\n    z_test = X_test @ weights\n    p_test = sigmoid(z_test)\n    y_pred_mapped = (p_test >= 0.5).astype(int)\n    y_pred = np.where(y_pred_mapped == 1, pos_label, neg_label)\n    return y_pred.tolist()\nX_train = [[1, 2], [3, 4], [5, 6]]\ny_train = [3, 7, 7]\nX_test = [[2, 3], [4, 5]]"}
{"task_id": 171, "completion_id": 8, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) != 2:\n        raise ValueError('Exactly two distinct labels are required in y_train')\n    if len(y_train) == 0:\n        raise ValueError('y_train must not be empty')\n    if unique_labels[0] == unique_labels[1]:\n        return [unique_labels[0]] * len(X_test)\n    old_pos_label = unique_labels[1]\n    y_train_internal = (y_train == old_pos_label).astype(int)\n    X_train_with_bias = np.c_[np.ones(X_train.shape[0]), X_train]\n    X_test_with_bias = np.c_[np.ones(X_test.shape[0]), X_test]\n    n_features = X_train_with_bias.shape[1]\n    weights = np.random.randn(n_features)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z.clip(-500, 500)))\n    for epoch in range(epochs):\n        indices = np.random.permutation(X_train_with_bias.shape[0])\n        X_shuffled = X_train_with_bias[indices]\n        y_shuffled = y_train_internal[indices]\n        for i in range(0, X_train_with_bias.shape[0], batch_size):\n            X_batch = X_shuffled[i:i + batch_size]\n            y_batch = y_shuffled[i:i + batch_size]\n            z = X_batch @ weights\n            y_pred = sigmoid(z)\n            gradient = X_batch.T @ (y_pred - y_batch) / batch_size\n            weights -= learning_rate * gradient\n    z_test = X_test_with_bias @ weights\n    y_test_prob = sigmoid(z_test)\n    y_test_pred_internal = (y_test_prob >= 0.5).astype(int)\n    y_test_pred = [unique_labels[0] if label == 0 else old_pos_label for label in y_test_pred_internal]\n    return y_test_pred"}
{"task_id": 171, "completion_id": 9, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    from collections import Counter\n    np_X_train = np.array(X_train)\n    np_y_train = np.array(y_train)\n    np_X_train = np.c_[np_X_train, np.ones(np_X_train.shape[0])]\n    if len(set(y_train)) == 1:\n        class_to_predict = y_train[0]\n        return [class_to_predict] * len(X_test)\n    labels = sorted(set(y_train))\n    (label_0, label_1) = labels\n    mapped_y_train = [1 if y == label_1 else 0 for y in y_train]\n    y = np.array(mapped_y_train)\n    X = np_X_train\n    (n_samples, n_features) = X.shape\n    weights = np.random.randn(n_features) * 0.01\n    for _ in range(epochs):\n        permutation = np.random.permutation(n_samples)\n        X_shuffled = X[permutation]\n        y_shuffled = y[permutation]\n        for i in range(0, n_samples, batch_size):\n            X_batch = X_shuffled[i:i + batch_size]\n            y_batch = y_shuffled[i:i + batch_size]\n            z = X_batch @ weights\n            predictions = 1 / (1 + np.exp(-z))\n            gradient = X_batch.T @ (predictions - y_batch) / batch_size\n            weights -= learning_rate * gradient\n    np_X_test = np.array(X_test)\n    np_X_test = np.c_[np_X_test, np.ones(np_X_test.shape[0])]\n    z = np_X_test @ weights\n    predicted_probabilities = 1 / (1 + np.exp(-z))\n    predicted_classes_0_1 = (predicted_probabilities >= 0.5).astype(int)\n    predicted_labels = [label_1 if p == 1 else label_0 for p in predicted_classes_0_1]\n    return predicted_labels\nX_train = [[1, 2], [2, 3], [3, 4], [6, 7], [7, 8], [8, 9]]\ny_train = [0, 0, 0, 1, 1, 1]\nX_test = [[5, 5], [1.5, 2.5]]\npredictions = logistic_regression_train_predict(X_train, y_train, X_test)"}
{"task_id": 176, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef adaboost_predict(X_train: List[List[int | float]], y_train: List[int], X_test: List[List[int | float]], n_estimators: int=10) -> List[int]:\n    \"\"\"Trains an AdaBoost ensemble using decision stumps and makes predictions on test data.\n\n    Args:\n        X_train: Training features as a list of lists.\n        y_train: Training labels as a list of 0s and 1s.\n        X_test: Test features as a list of lists.\n        n_estimators: Maximum number of decision stumps to train.\n\n    Returns:\n        Predictions for X_test as a list of 0s and 1s.\n    \"\"\"\n    X_train = np.array(X_train, dtype=float)\n    y_train = np.array(y_train, dtype=int)\n    X_test = np.array(X_test, dtype=float)\n    y_train = 2 * y_train - 1\n    n_samples = X_train.shape[0]\n    weights = np.ones(n_samples) / n_samples\n    n_features = X_train.shape[1]\n    stumps = []\n    for _ in range(n_estimators):\n        best_error = float('inf')\n        best_stump = None\n        best_pred = None\n        for feature_idx in range(n_features):\n            feature = X_train[:, feature_idx]\n            unique_thresholds = np.unique(feature)\n            for threshold in unique_thresholds:\n                for polarity in [1, -1]:\n                    prediction = np.ones(n_samples) * polarity\n                    left_mask = X_train[:, feature_idx] <= threshold\n                    if polarity == -1:\n                        prediction[left_mask] = 1\n                        prediction[~left_mask] = -1\n                    else:\n                        prediction[left_mask] = -1\n                        prediction[~left_mask] = 1\n                    weighted_error = np.sum(weights * (prediction != y_train))\n                    if weighted_error < best_error:\n                        best_error = weighted_error\n                        best_stump = (feature_idx, threshold, polarity)\n                        best_pred = prediction.copy()\n                    elif weighted_error == best_error:\n                        (_, current_threshold, current_polarity) = best_stump\n                        if feature_idx < best_stump[0] or (feature_idx == best_stump[0] and threshold < current_threshold) or (feature_idx == best_stump[0] and threshold == current_threshold and (polarity == 1) and (current_polarity == -1)):\n                            best_error = weighted_error\n                            best_stump = (feature_idx, threshold, polarity)\n                            best_pred = prediction.copy()\n        if best_error <= 1e-10:\n            break\n        epsilon = best_error + 1e-10\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        stumps.append((best_stump, alpha))\n        y_train_long = y_train.reshape(-1, 1)\n        prediction = best_pred.reshape(-1, 1)\n        weights *= np.exp(-alpha * y_train_long * prediction)\n        weights /= np.sum(weights)\n    n_test_samples = X_test.shape[0]\n    final_prediction = np.zeros(n_test_samples)\n    for ((feature_idx, threshold, polarity), alpha) in stumps:\n        test_feature = X_test[:, feature_idx]\n        prediction = np.ones(n_test_samples) * 1\n        left_mask = test_feature <= threshold\n        if polarity == -1:\n            prediction[left_mask] = 1\n            prediction[~left_mask] = -1\n        else:\n            prediction[left_mask] = -1\n            prediction[~left_mask] = 1\n        final_prediction += alpha * prediction\n    return [1 if x >= 0 else 0 for x in final_prediction]\nX_train = [[1, 2], [2, 1], [3, 3], [4, 4]]\ny_train = [0, 0, 1, 1]\nX_test = [[2, 2], [4, 3]]"}
{"task_id": 176, "completion_id": 1, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"\n    Trains AdaBoost with decision stumps as weak learners on the training set and returns predictions\n    for the test set.\n    \n    Parameters:\n    - X_train: Training feature matrix as list of lists.\n    - y_train: Training labels as list of integers (0 or 1).\n    - X_test: Test feature matrix as list of lists.\n    - n_estimators: Number of decision stumps to train.\n    \n    Returns:\n    - List of test set class predictions (0 or 1) as Python int.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    (n_samples, n_features) = X_train.shape\n    n_test_samples = X_test.shape[0]\n    y_train_boost = 2 * y_train - 1\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    stump_weights = []\n    for _ in range(n_estimators):\n        best_error = float('inf')\n        best_stump = None\n        for feature_idx in range(n_features):\n            unique_vals = np.unique(X_train[:, feature_idx])\n            for threshold in unique_vals:\n                for polarity in [1, -1]:\n                    predictions = np.where(X_train[:, feature_idx] < threshold, 1 * polarity, -1 * polarity)\n                    predictions = np.clip(predictions, -1, 1)\n                    error = np.sum(sample_weights * (y_train_boost != predictions))\n                    if error < best_error:\n                        best_error = error\n                        best_stump = {'feature_index': feature_idx, 'threshold': threshold, 'polarity': polarity}\n        if best_error == 0:\n            break\n        epsilon = max(best_error, 1e-10)\n        alpha = 0.5 * np.log((1 - epsilon) / (epsilon + 1e-10))\n        predictions = np.where(X_train[:, best_stump['feature_index']] < best_stump['threshold'], 1 * best_stump['polarity'], -1 * best_stump['polarity'])\n        predictions = np.clip(predictions, -1, 1)\n        sample_weights *= np.exp(-alpha * y_train_boost * predictions)\n        sample_weights /= np.sum(sample_weights)\n        stumps.append(best_stump)\n        stump_weights.append(alpha)\n    y_pred = np.zeros(n_test_samples)\n    for (stump, weight) in zip(stumps, stump_weights):\n        feature_idx = stump['feature_index']\n        threshold = stump['threshold']\n        polarity = stump['polarity']\n        pred = np.where(X_test[:, feature_idx] < threshold, 1 * polarity, -1 * polarity)\n        pred = np.clip(pred, -1, 1)\n        y_pred += weight * pred\n    y_pred = np.where(y_pred >= 0, 1, 0).astype(int)\n    return y_pred.tolist()\nX_train = [[1, 2], [2, 3], [3, 4], [4, 5]]\ny_train = [0, 0, 1, 1]\nX_test = [[1, 3], [5, 6]]"}
{"task_id": 176, "completion_id": 2, "solution": "import numpy as np\nfrom typing import List, Tuple, Dict, Any\ndef adaboost_predict(X_train: List[List[float]], y_train: List[int], X_test: List[List[float]], n_estimators: int=10) -> List[int]:\n    \"\"\"\n    AdaBoost with decision stumps (1-level decision trees) as weak learners.\n\n    Parameters:\n    - X_train: list of training feature vectors\n    - y_train: list of training class labels (0 or 1)\n    - X_test: list of test feature vectors\n    - n_estimators: number of weak learners\n\n    Returns:\n    - List of predicted class labels (0 or 1) for X_test\n    \"\"\"\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n    y_train_np = 2 * y_train_np - 1\n    n_samples = len(y_train)\n    sample_weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    for _ in range(n_estimators):\n        (best_stump, best_error) = build_weighted_stump(X_train, y_train, sample_weights)\n        if best_error == 0:\n            break\n        error_rate = best_error / n_samples\n        alpha = 0.5 * np.log((1 - error_rate) / (error_rate + 1e-10))\n        alphas.append(alpha)\n        y_pred = [predict_single_stump(x, best_stump) for x in X_train]\n        y_pred = 2 * np.array(y_pred) - 1\n        sample_weights *= np.exp(-alpha * y_train_np * y_pred)\n        sample_weights /= np.sum(sample_weights)\n        stumps.append(best_stump)\n    y_pred_test = []\n    for x in X_test_np:\n        total_vote = 0\n        for (alpha, stump) in zip(alphas, stumps):\n            pred = predict_single_stump(x, stump)\n            total_vote += alpha * (2 * pred - 1)\n        final_pred = 1 if total_vote > 0 else 0\n        y_pred_test.append(final_pred)\n    return y_pred_test\ndef build_weighted_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> Tuple[Dict[str, Any], float]:\n    \"\"\"\n    Build the best decision stump (1-level decision tree) with minimum weighted error.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_error = float('inf')\n    best_stump = {}\n    for feature_index in range(n_features):\n        sorted_indices = np.argsort(X[:, feature_index])\n        sorted_X = X[sorted_indices, feature_index]\n        sorted_y = y[sorted_indices]\n        sorted_weights = sample_weights[sorted_indices]\n        thresholds = (sorted_X[1:] + sorted_X[:-1]) / 2\n        for (idx, threshold) in enumerate(thresholds):\n            predictions = np.where(X[:, feature_index] < threshold, 1, 0)\n            weighted_error = weighted_error_func(y, predictions, sample_weights)\n            if weighted_error < best_error:\n                best_error = weighted_error\n                best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': 1}\n            predictions = np.where(X[:, feature_index] >= threshold, 1, 0)\n            weighted_error = weighted_error_func(y, predictions, sample_weights)\n            if weighted_error < best_error:\n                best_error = weighted_error\n                best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': -1}\n    return (best_stump, best_error)\ndef weighted_error_func(y_true: np.ndarray, y_pred: np.ndarray, sample_weights: np.ndarray) -> float:\n    \"\"\"\n    Compute the weighted classification error.\n    \"\"\"\n    return np.sum(sample_weights[y_true != y_pred])\ndef predict_single_stump(x, stump):\n    \"\"\"\n    Predict the class of a single instance using a stump.\n    \"\"\"\n    feature_index = stump['feature_index']\n    threshold = stump['threshold']\n    polarity = stump['polarity']\n    if x[feature_index] < threshold and polarity == 1 or (x[feature_index] >= threshold and polarity == -1):\n        return 1\n    return 0\nX_train = [[1.5], [2.3], [3.4], [4.5], [5.0]]\ny_train = [0, 0, 0, 1, 1]\nX_test = [[2.0], [4.0]]\npredictions = adaboost_predict(X_train, y_train, X_test, n_estimators=3)"}
{"task_id": 176, "completion_id": 3, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef adaboost_predict(X_train: List[List[int | float]], y_train: List[int], X_test: List[List[int | float]], n_estimators: int=10) -> List[int]:\n    \"\"\"\n    Trains an AdaBoost classifier using decision stumps as weak learners and\n    produces class predictions for a test set.\n\n    Parameters:\n    - X_train (List[List[int | float]]): Training features.\n    - y_train (List[int]): Training labels (0 and 1).\n    - X_test (List[List[int | float]]): Test features.\n    - n_estimators (int): Maximum number of weak learners to train.\n\n    Returns:\n    - List[int]: Predicted class labels (0 or 1) for X_test.\n    \"\"\"\n    (n_samples, n_features) = (len(X_train), len(X_train[0]))\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    y_train_biased = np.where(y_train == 0, -1, 1)\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    alpha_stumps = []\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_stump = None\n        for feature_index in range(n_features):\n            feature_values = X_train[:, feature_index]\n            unique_thresholds = np.unique(feature_values)\n            for threshold in unique_thresholds:\n                predictions = np.where(X_train[:, feature_index] < threshold, 1, -1)\n                error = np.sum(np.abs(y_train_biased - predictions) / 2 * sample_weights)\n                if error < min_error:\n                    min_error = error\n                    best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': 1}\n                predictions = np.where(X_train[:, feature_index] >= threshold, 1, -1)\n                error = np.sum(np.abs(y_train_biased - predictions) / 2 * sample_weights)\n                if error < min_error:\n                    min_error = error\n                    best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': -1}\n        if min_error == 0:\n            if n_estimators > 1:\n                print('Perfect classifier found before maximum iterations')\n            break\n        epsilon = 1e-10\n        error_rate = min_error / (1 - min_error + epsilon)\n        alpha = 0.5 * np.log((1 - min_error + epsilon) / (min_error + epsilon))\n        stumps.append(best_stump)\n        alpha_stumps.append(alpha)\n        predictions = np.array([1 if X[i][best_stump['feature_index']] < best_stump['threshold'] else -1 if best_stump['polarity'] == 1 else 1 if X[i][best_stump['feature_index']] >= best_stump['threshold'] else -1 for i in range(n_samples)])\n        sample_weights *= np.exp(-alpha * y_train_biased * predictions)\n        sample_weights = sample_weights / (np.sum(sample_weights) + 1e-10)\n    predictions = np.zeros((len(X_test),))\n    for (i, x) in enumerate(X_test):\n        total_vote = 0\n        for (alpha, stump) in zip(alpha_stumps, stumps):\n            feature_index = stump['feature_index']\n            threshold = stump['threshold']\n            polarity = stump['polarity']\n            if x[feature_index] < threshold and polarity == 1 or (x[feature_index] >= threshold and polarity == -1):\n                total_vote += alpha\n            else:\n                total_vote -= alpha\n        prediction = 1 if total_vote > 0 else 0\n        predictions[i] = prediction\n    return predictions.astype(int).tolist()"}
{"task_id": 176, "completion_id": 4, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"\n    Trains AdaBoost with decision stumps as weak learners and makes predictions on the test set.\n    \n    Args:\n        X_train: List of lists containing training feature vectors.\n        y_train: List of training class labels (0 or 1).\n        X_test: List of lists containing test feature vectors.\n        n_estimators: Number of weak learners to train.\n    \n    Returns:\n        A list of predicted class labels (0 or 1) for the test set.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    y_train = np.where(y_train == 1, 1, -1)\n    (n_samples, n_features) = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    weak_learners = []\n    for _ in range(n_estimators):\n        best_error = 1.0\n        best_stump = None\n        best_prediction = None\n        for feature_index in range(n_features):\n            feature_values = X_train[:, feature_index]\n            unique_thresholds = np.unique(feature_values)\n            for threshold in sorted(unique_thresholds):\n                for polarity in [1, -1]:\n                    prediction = np.where(X_train[:, feature_index] < threshold, polarity, -polarity)\n                    error = weights[y_train != prediction].sum()\n                    if error < best_error:\n                        best_error = error\n                        best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n                        best_prediction = prediction\n        if best_error <= 1e-10:\n            break\n        error_t = best_error\n        epsilon = 1e-10\n        alpha_t = 0.5 * np.log((1 - error_t) / (error_t + epsilon))\n        weak_learners.append((best_stump, alpha_t))\n        y_train_array = y_train\n        h_t = best_prediction\n        weights *= np.exp(-alpha_t * y_train_array * h_t)\n        weights /= np.sum(weights)\n    test_predictions = np.zeros(X_test.shape[0])\n    for (stump, alpha) in weak_learners:\n        feature_index = stump['feature_index']\n        threshold = stump['threshold']\n        polarity = stump['polarity']\n        h_t = np.where(X_test[:, feature_index] < threshold, 1, -1) * polarity\n        test_predictions += alpha * h_t\n    return [1 if pred > 0 else 0 for pred in test_predictions]"}
{"task_id": 176, "completion_id": 5, "solution": "import numpy as np\nfrom typing import List, Tuple\nclass DecisionStump:\n\n    def __init__(self):\n        self.feature_index = 0\n        self.threshold = 0\n        self.polarity = 1\n        self.error = float('inf')\n\n    def predict(self, x: List[int | float]) -> int:\n        if self.polarity * (x[self.feature_index] - self.threshold) >= 0:\n            return 1\n        else:\n            return 0\ndef adaboost_predict(X_train: List[List[int | float]], y_train: List[int], X_test: List[List[int | float]], n_estimators: int=10) -> List[int]:\n    \"\"\"Implementation of AdaBoost with Decision Stumps from scratch.\"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array([[1 if y == 1 else -1 for y in y_train]]).T\n    X_test = np.array(X_test)\n    m = X_train.shape[0]\n    sample_weights = np.ones(m) / m\n    weak_learners = []\n    alpha_vals = []\n    y_train_labels = [0 if y == -1 else 1 for y in y_train.ravel()]\n    for _ in range(n_estimators):\n        best_stump = None\n        min_error = float('inf')\n        for feature_index in range(X_train.shape[1]):\n            values = np.unique(X_train[:, feature_index])\n            for threshold in values:\n                for polarity in [1, -1]:\n                    predictions = np.where(X_train[:, feature_index] < threshold, 1, 0)\n                    if polarity == -1:\n                        predictions = np.where(predictions == 1, 0, 1)\n                    stump_output = np.where(predictions == 1, 1, -1)\n                    weighted_error = np.sum(sample_weights * (stump_output != y_train))\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = DecisionStump()\n                        best_stump.feature_index = feature_index\n                        best_stump.threshold = threshold\n                        best_stump.polarity = polarity\n                        best_stump.error = min_error\n                    elif abs(min_error - weighted_error) < 1e-09:\n                        if feature_index < best_stump.feature_index:\n                            min_error = weighted_error\n                            best_stump = DecisionStump()\n                            best_stump.feature_index = feature_index\n                            best_stump.threshold = threshold\n                            best_stump.polarity = polarity\n                            best_stump.error = min_error\n                        elif feature_index == best_stump.feature_index:\n                            if threshold < best_stump.threshold:\n                                min_error = weighted_error\n                                best_stump = DecisionStump()\n                                best_stump.feature_index = feature_index\n                                best_stump.threshold = threshold\n                                best_stump.polarity = polarity\n                                best_stump.error = min_error\n                            elif threshold == best_stump.threshold:\n                                if polarity == 1:\n                                    min_error = weighted_error\n                                    best_stump = DecisionStump()\n                                    best_stump.feature_index = feature_index\n                                    best_stump.threshold = threshold\n                                    best_stump.polarity = polarity\n                                    best_stump.error = min_error\n        if best_stump.error == 0:\n            break\n        weak_learners.append(best_stump)\n        error = best_stump.error\n        alpha = 0.5 * np.log((1 - error + 1e-10) / (error + 1e-10))\n        alpha_vals.append(alpha)\n        predictions = np.array([best_stump.predict(x) for x in X_train])\n        predictions_binary = np.where(predictions == 1, 1, -1)\n        sample_weights *= np.exp(-alpha * y_train.ravel() * predictions_binary)\n        sample_weights /= np.sum(sample_weights)\n    final_predictions = np.zeros(len(X_test))\n    for (alpha, stump) in zip(alpha_vals, weak_learners):\n        stump_predictions = [1 if stump.predict(x) == 1 else -1 for x in X_test]\n        final_predictions += alpha * np.array(stump_predictions)\n    final_labels = np.where(final_predictions >= 0, 1, 0)\n    return list(final_labels.astype(int))"}
{"task_id": 176, "completion_id": 6, "solution": "import numpy as np\nfrom typing import List, Tuple, Dict\nclass DecisionStump:\n\n    def __init__(self):\n        self.feature_index = 0\n        self.threshold = 0\n        self.polarity = 1\n        self.error = 1.0\n        self.alpha = 0.0\n\n    def fit(self, X: List[List[float]], y: List[int], weights: np.ndarray):\n        (n_samples, n_features) = (len(X), len(X[0]))\n        best_error = float('inf')\n        X_arr = np.array(X)\n        y_arr = np.array(y)\n        for feature_idx in range(n_features):\n            feature_values = X_arr[:, feature_idx]\n            unique_thresholds = np.unique(feature_values)\n            for threshold in sorted(unique_thresholds):\n                for polarity in [1, -1]:\n                    predictions = np.where(feature_values < threshold if polarity == 1 else feature_values >= threshold, 1, -1)\n                    error = np.sum(weights * (predictions != y_arr))\n                    if error < best_error:\n                        self.feature_index = feature_idx\n                        self.threshold = threshold\n                        self.polarity = polarity\n                        best_error = error\n        self.error = best_error\n        return self\n\n    def predict(self, X: List[List[float]]) -> List[int]:\n        predictions = []\n        for x in X:\n            feature_value = x[self.feature_index]\n            if self.polarity == 1 and feature_value < self.threshold or (self.polarity == -1 and feature_value >= self.threshold):\n                predictions.append(1)\n            else:\n                predictions.append(-1)\n        return predictions\ndef adaboost_predict(X_train: List[List[int | float]], y_train: List[int], X_test: List[List[int | float]], n_estimators: int=10) -> List[int]:\n    y_train = [1 if y == 1 else -1 for y in y_train]\n    n_samples = len(X_train)\n    sample_weights = np.ones(n_samples) / n_samples\n    stumps = []\n    for _ in range(n_estimators):\n        stump = DecisionStump()\n        stump.fit(X_train, y_train, sample_weights)\n        if stump.error == 0:\n            stump.alpha = 100\n            stumps.append(stump)\n            break\n        epsilon = stump.error\n        alpha = 0.5 * np.log((1 - epsilon + 1e-10) / (epsilon + 1e-10))\n        stump.alpha = alpha\n        stumps.append(stump)\n        y_pred = stump.predict(X_train)\n        y_pred = np.array(y_pred)\n        y_true = np.array(y_train)\n        sample_weights *= np.exp(-alpha * y_true * y_pred)\n        sample_weights /= np.sum(sample_weights)\n    y_test_pred = []\n    for x in X_test:\n        weighted_votes = 0\n        for stump in stumps:\n            feature_value = x[stump.feature_index]\n            if stump.polarity == 1 and feature_value < stump.threshold or (stump.polarity == -1 and feature_value >= stump.threshold):\n                weighted_votes += stump.alpha\n            else:\n                weighted_votes -= stump.alpha\n        y_test_pred.append(0 if weighted_votes <= 0 else 1)\n    return y_test_pred"}
{"task_id": 176, "completion_id": 7, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"\n    Train AdaBoost using decision stumps as weak learners and make predictions on test data.\n    \n    Parameters:\n    - X_train: Training feature matrix as list of lists\n    - y_train: Training labels as list (0 for negative class, 1 for positive class)\n    - X_test: Test feature matrix as list of lists\n    - n_estimators: Maximum number of weak learners to train\n    \n    Returns:\n    - List of predicted class labels for test data (0 or 1)\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    y_train_binary = 2 * y_train - 1\n    n_samples = X_train.shape[0]\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n    for _ in range(n_estimators):\n        best_error = float('inf')\n        best_stump = None\n        for feature_idx in range(X_train.shape[1]):\n            unique_vals = np.unique(X_train[:, feature_idx])\n            thresholds = (unique_vals[:-1] + unique_vals[1:]) / 2 if len(unique_vals) > 1 else unique_vals\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[X_train[:, feature_idx] >= threshold] = -1\n                    else:\n                        predictions[X_train[:, feature_idx] < threshold] = -1\n                    error = weights[y_train_binary != predictions].sum()\n                    if error < best_error:\n                        best_error = error\n                        best_stump = {'feature_idx': feature_idx, 'threshold': threshold, 'polarity': polarity}\n        if best_error <= 1e-10:\n            break\n        if best_error == 0:\n            error_t = 1e-10\n        else:\n            error_t = best_error\n        alpha = 0.5 * np.log((1 - error_t + 1e-10) / (error_t + 1e-10))\n        stumps.append(best_stump)\n        alphas.append(alpha)\n        y_pred = np.ones(n_samples)\n        feature_idx = best_stump['feature_idx']\n        threshold = best_stump['threshold']\n        polarity = best_stump['polarity']\n        if polarity == 1:\n            y_pred[X_train[:, feature_idx] >= threshold] = -1\n        else:\n            y_pred[X_train[:, feature_idx] < threshold] = -1\n        weights *= np.exp(-alpha * y_train_binary * y_pred)\n        weights /= weights.sum()\n    test_predictions = np.zeros(X_test.shape[0])\n    for (alpha, stump) in zip(alphas, stumps):\n        feature_idx = stump['feature_idx']\n        threshold = stump['threshold']\n        polarity = stump['polarity']\n        stump_pred = np.ones(X_test.shape[0])\n        if polarity == 1:\n            stump_pred[X_test[:, feature_idx] >= threshold] = -1\n        else:\n            stump_pred[X_test[:, feature_idx] < threshold] = -1\n        test_predictions += alpha * stump_pred\n    final_predictions = np.where(test_predictions >= 0, 1, 0)\n    return final_predictions.tolist()"}
{"task_id": 176, "completion_id": 8, "solution": "import numpy as np\nfrom typing import List, Tuple, Dict\ndef adaboost_predict(X_train: List[List[int | float]], y_train: List[int], X_test: List[List[int | float]], n_estimators: int=10) -> List[int]:\n    \"\"\"\n    Implements AdaBoost from scratch using decision stumps.\n    Returns class predictions on X_test.\n    \n    Args:\n        X_train (List[List[int | float]]): Training feature matrix\n        y_train (List[int]): Training label vector (0 or 1)\n        X_test (List[List[int | float]]): Test feature matrix\n        n_estimators (int): Number of boosting rounds\n    \n    Returns:\n        List[int]: Predicted class labels for X_test (0 or 1)\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train) * 2 - 1\n    X_test = np.array(X_test)\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    weak_learners = []\n    for _ in range(n_estimators):\n        best_error = float('inf')\n        best_stump = None\n        for feature_index in range(n_features):\n            unique_values = np.unique(X_train[:, feature_index])\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.where(X_train[:, feature_index] < threshold if polarity == 1 else X_train[:, feature_index] >= threshold, 1, -1)\n                    error = np.sum(sample_weights * (predictions != y_train))\n                    if error < best_error:\n                        best_error = error\n                        best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n        if best_error <= 0:\n            break\n        epsilon = best_error + 1e-10\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        weak_learners.append((best_stump, alpha))\n        (stump, alpha_t) = weak_learners[-1]\n        predictions = np.where(X_train[:, stump['feature_index']] < stump['threshold'] if stump['polarity'] == 1 else X_train[:, stump['feature_index']] >= stump['threshold'], 1, -1)\n        sample_weights *= np.exp(-alpha_t * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n    test_predictions = np.zeros(X_test.shape[0])\n    for (stump, alpha) in weak_learners:\n        predictions = np.where(X_test[:, stump['feature_index']] < stump['threshold'] if stump['polarity'] == 1 else X_test[:, stump['feature_index']] >= stump['threshold'], 1, -1)\n        test_predictions += alpha * predictions\n    return [1 if p > 0 else 0 for p in test_predictions]\nX_train = [[1, 2], [2, 0], [3, 1], [4, 2]]\ny_train = [0, 1, 0, 1]\nX_test = [[3, 1.5], [4.5, 2]]"}
{"task_id": 176, "completion_id": 9, "solution": "import numpy as np\nfrom typing import List\nclass DecisionStump:\n\n    def __init__(self):\n        self.feature_index = None\n        self.threshold = None\n        self.polarity = None\n        self.alpha = None\n\n    def predict(self, X):\n        \"\"\"Predict using this decision stump.\"\"\"\n        if self.polarity == 1:\n            return [1 if x[i] < self.threshold else 0 for (i, x) in enumerate(X)]\n        else:\n            return [1 if x[i] >= self.threshold else 0 for (i, x) in enumerate(X)]\ndef adaboost_predict(X_train: List[List[int | float]], y_train: List[int], X_test: List[List[int | float]], n_estimators: int=10) -> List[int]:\n    y_train_bin = np.array([-1 if y == 0 else 1 for y in y_train])\n    n_samples = len(y_train)\n    w = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    for _ in range(n_estimators):\n        best_error = np.inf\n        best_stump = DecisionStump()\n        n_features = len(X_train[0])\n        for feature_index in range(n_features):\n            unique_vals = sorted(set((x[feature_index] for x in X_train)))\n            thresholds = [(unique_vals[i] + unique_vals[i + 1]) / 2 for i in range(len(unique_vals) - 1)]\n            thresholds.extend(unique_vals)\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions_train = [1 if x[feature_index] < threshold else -1 for x in X_train]\n                    if polarity == -1:\n                        predictions_train = [-p for p in predictions_train]\n                    error = 0\n                    for i in range(n_samples):\n                        if predictions_train[i] != y_train_bin[i]:\n                            error += w[i]\n                    if error < best_error:\n                        best_error = error\n                        best_stump.feature_index = feature_index\n                        best_stump.threshold = threshold\n                        best_stump.polarity = 1 if polarity == 1 else -1\n        if best_error == 0:\n            break\n        error_t = best_error\n        epsilon = 1e-10\n        alpha_t = 0.5 * np.log((1 - error_t) / (error_t + epsilon))\n        best_stump.alpha = alpha_t\n        stumps.append(best_stump)\n        predictions_best = [1 if X_train[i][best_stump.feature_index] < best_stump.threshold else -1 for i in range(n_samples)]\n        if best_stump.polarity == -1:\n            predictions_best = [-p for p in predictions_best]\n        new_weights = []\n        for i in range(n_samples):\n            if predictions_best[i] == y_train_bin[i]:\n                weight = w[i] * np.exp(-alpha_t)\n            else:\n                weight = w[i] * np.exp(alpha_t)\n            new_weights.append(weight)\n        w = np.array(new_weights)\n        w /= np.sum(w)\n    y_test_pred = []\n    for x in X_test:\n        score = 0\n        for stump in stumps:\n            if x[stump.feature_index] < stump.threshold:\n                prediction = 1\n            else:\n                prediction = -1\n            if stump.polarity == -1:\n                prediction = -prediction\n            score += stump.alpha * prediction\n        y_test_pred.append(0 if score <= 0 else 1)\n    return y_test_pred"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    positions = rng.uniform(low=-1.0, high=1.0, size=(num_particles, n_dims))\n    velocities = rng.uniform(low=-0.1, high=0.1, size=(num_particles, n_dims))\n    personal_best_positions = positions.copy()\n    personal_best_values = np.sum(positions ** 2, axis=1)\n    global_best_idx = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_idx]\n    global_best_value = personal_best_values[global_best_idx]\n    for _ in range(num_iterations):\n        r1 = rng.uniform(size=(num_particles, n_dims))\n        r2 = rng.uniform(size=(num_particles, n_dims))\n        velocities = w * velocities + c1 * r1 * (personal_best_positions - positions) + c2 * r2 * (global_best_position - positions)\n        positions = np.clip(positions + velocities, -1.0, 1.0)\n        current_values = np.sum(positions ** 2, axis=1)\n        improved = current_values < personal_best_values\n        personal_best_positions[improved] = positions[improved]\n        personal_best_values[improved] = current_values[improved]\n        current_global_best_idx = np.argmin(personal_best_values)\n        if personal_best_values[current_global_best_idx] < global_best_value:\n            global_best_position = personal_best_positions[current_global_best_idx]\n            global_best_value = personal_best_values[current_global_best_idx]\n    return round(global_best_value, 4)"}
{"task_id": 178, "completion_id": 1, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1.0\n    upper_bound = 1.0\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = rng.uniform(-0.1, 0.1, (num_particles, n_dims))\n    personal_best_positions = np.copy(positions)\n    personal_best_values = np.sum(positions ** 2, axis=1)\n    global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n    global_best_value = np.min(personal_best_values)\n    for _ in range(num_iterations):\n        r1 = rng.uniform(size=(num_particles, n_dims))\n        r2 = rng.uniform(size=(num_particles, n_dims))\n        velocities = w * velocities + c1 * r1 * (personal_best_positions - positions) + c2 * r2 * (global_best_position - positions)\n        positions += velocities\n        positions = np.clip(positions, lower_bound, upper_bound)\n        current_values = np.sum(positions ** 2, axis=1)\n        improved = current_values < personal_best_values\n        personal_best_positions[improved] = positions[improved]\n        personal_best_values[improved] = current_values[improved]\n        current_global_best_value = np.min(personal_best_values)\n        if current_global_best_value < global_best_value:\n            global_best_value = current_global_best_value\n            global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n    return round(global_best_value, 4)"}
{"task_id": 178, "completion_id": 2, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lb = -1.0\n    ub = 1.0\n    positions = lb + (ub - lb) * rng.random((num_particles, n_dims))\n    velocities = (ub - lb) * rng.random((num_particles, n_dims)) / 5\n    personal_best_positions = positions.copy()\n    personal_best_values = np.sum(positions ** 2, axis=1)\n    global_best_idx = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_idx]\n    global_best_value = personal_best_values[global_best_idx]\n    for _ in range(num_iterations):\n        r1 = rng.random((num_particles, n_dims))\n        r2 = rng.random((num_particles, n_dims))\n        velocities = w * velocities + c1 * r1 * (personal_best_positions - positions) + c2 * r2 * (global_best_position - positions)\n        positions = np.clip(positions + velocities, lb, ub)\n        current_values = np.sum(positions ** 2, axis=1)\n        better_mask = current_values < personal_best_values\n        personal_best_values[better_mask] = current_values[better_mask]\n        personal_best_positions[better_mask] = positions[better_mask]\n        current_best_idx = np.argmin(personal_best_values)\n        if personal_best_values[current_best_idx] < global_best_value:\n            global_best_value = personal_best_values[current_best_idx]\n            global_best_position = personal_best_positions[current_best_idx]\n    return round(global_best_value, 4)"}
{"task_id": 178, "completion_id": 3, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1\n    upper_bound = 1\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = rng.uniform(-0.1, 0.1, (num_particles, n_dims))\n    personal_best_positions = positions.copy()\n    personal_best_values = np.sum(positions ** 2, axis=1)\n    global_best_index = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_index]\n    global_best_value = personal_best_values[global_best_index]\n    for _ in range(num_iterations):\n        r1 = rng.uniform(size=(num_particles, n_dims))\n        r2 = rng.uniform(size=(num_particles, n_dims))\n        velocities = w * velocities + c1 * r1 * (personal_best_positions - positions) + c2 * r2 * (global_best_position - positions)\n        positions += velocities\n        positions = np.clip(positions, lower_bound, upper_bound)\n        current_values = np.sum(positions ** 2, axis=1)\n        improved = current_values < personal_best_values\n        personal_best_positions[improved] = positions[improved]\n        personal_best_values[improved] = current_values[improved]\n        current_global_best_index = np.argmin(personal_best_values)\n        if personal_best_values[current_global_best_index] < global_best_value:\n            global_best_value = personal_best_values[current_global_best_index]\n            global_best_position = personal_best_positions[current_global_best_index]\n    return round(float(global_best_value), 4)"}
{"task_id": 178, "completion_id": 4, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1\n    upper_bound = 1\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = rng.uniform(-0.1, 0.1, (num_particles, n_dims))\n    personal_best_positions = positions.copy()\n    personal_best_values = np.sum(positions ** 2, axis=1)\n    global_best_idx = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_idx].copy()\n    global_best_value = personal_best_values[global_best_idx]\n    for _ in range(num_iterations):\n        r1 = rng.uniform(size=(num_particles, n_dims))\n        r2 = rng.uniform(size=(num_particles, n_dims))\n        velocities = w * velocities + c1 * r1 * (personal_best_positions - positions) + c2 * r2 * (global_best_position - positions)\n        positions = np.clip(positions + velocities, lower_bound, upper_bound)\n        current_values = np.sum(positions ** 2, axis=1)\n        improved = current_values < personal_best_values\n        personal_best_values[improved] = current_values[improved]\n        personal_best_positions[improved] = positions[improved]\n        current_global_best_idx = np.argmin(personal_best_values)\n        if personal_best_values[current_global_best_idx] < global_best_value:\n            global_best_value = personal_best_values[current_global_best_idx]\n            global_best_position = personal_best_positions[current_global_best_idx].copy()\n    return round(global_best_value, 4)"}
{"task_id": 178, "completion_id": 5, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1.0\n    lower_bound = -1.0\n    upper_bound = 1.0\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    rng = np.random.default_rng(seed=seed)\n    x = rng.uniform(lower_bound, upper_bound, size=(num_particles, n_dims))\n    v = np.zeros_like(x)\n    p_best = x.copy()\n    p_best_values = np.sum(x ** 2, axis=1)\n    g_best = p_best[np.argmin(p_best_values)]\n    g_best_value = np.min(p_best_values)\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            r1 = rng.uniform()\n            r2 = rng.uniform()\n            v[i] = w * v[i] + c1 * r1 * (p_best[i] - x[i]) + c2 * r2 * (g_best - x[i])\n            x[i] = np.clip(x[i] + v[i], lower_bound, upper_bound)\n            current_value = np.sum(x[i] ** 2)\n            if current_value < p_best_values[i]:\n                p_best[i] = x[i].copy()\n                p_best_values[i] = current_value\n                if current_value < g_best_value:\n                    g_best = x[i].copy()\n                    g_best_value = current_value\n    return round(g_best_value, 4)"}
{"task_id": 178, "completion_id": 6, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1.0\n    upper_bound = 1.0\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = rng.uniform(-0.1, 0.1, (num_particles, n_dims))\n    personal_best_positions = positions.copy()\n    personal_best_values = np.array([np.sum(p ** 2) for p in positions])\n    global_best_idx = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_idx]\n    global_best_value = personal_best_values[global_best_idx]\n    for _ in range(num_iterations):\n        r1 = rng.uniform(size=(num_particles, n_dims))\n        r2 = rng.uniform(size=(num_particles, n_dims))\n        velocities = w * velocities + c1 * r1 * (personal_best_positions - positions) + c2 * r2 * (global_best_position - positions)\n        positions += velocities\n        positions = np.clip(positions, lower_bound, upper_bound)\n        current_values = np.array([np.sum(p ** 2) for p in positions])\n        improved = current_values < personal_best_values\n        personal_best_positions[improved] = positions[improved]\n        personal_best_values[improved] = current_values[improved]\n        current_global_best_idx = np.argmin(personal_best_values)\n        if personal_best_values[current_global_best_idx] < global_best_value:\n            global_best_value = personal_best_values[current_global_best_idx]\n            global_best_position = personal_best_positions[current_global_best_idx]\n    return round(global_best_value, 4)"}
{"task_id": 178, "completion_id": 7, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1.0\n    upper_bound = 1.0\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = rng.uniform(-0.1, 0.1, (num_particles, n_dims))\n    personal_best_positions = positions.copy()\n    personal_best_values = np.sum(positions ** 2, axis=1)\n    global_best_index = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_index]\n    best_value = personal_best_values[global_best_index]\n    for _ in range(num_iterations):\n        r1 = rng.uniform(size=(num_particles, n_dims))\n        r2 = rng.uniform(size=(num_particles, n_dims))\n        velocities = w * velocities + c1 * r1 * (personal_best_positions - positions) + c2 * r2 * (global_best_position - positions)\n        positions = np.clip(positions + velocities, lower_bound, upper_bound)\n        current_values = np.sum(positions ** 2, axis=1)\n        improved = current_values < personal_best_values\n        personal_best_positions[improved] = positions[improved]\n        personal_best_values[improved] = current_values[improved]\n        current_global_best_index = np.argmin(personal_best_values)\n        if personal_best_values[current_global_best_index] < best_value:\n            global_best_position = personal_best_positions[current_global_best_index]\n            best_value = personal_best_values[current_global_best_index]\n    return round(best_value, 4)"}
{"task_id": 178, "completion_id": 8, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1.0\n    upper_bound = 1.0\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = rng.uniform(-1.0, 1.0, (num_particles, n_dims))\n    obj_values = np.sum(positions ** 2, axis=1)\n    personal_best_positions = positions.copy()\n    personal_best_values = obj_values.copy()\n    global_best_idx = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_idx].copy()\n    global_best_value = personal_best_values[global_best_idx]\n    for _ in range(num_iterations):\n        r1 = rng.uniform(size=(num_particles, n_dims))\n        r2 = rng.uniform(size=(num_particles, n_dims))\n        velocities = w * velocities + c1 * r1 * (personal_best_positions - positions) + c2 * r2 * (global_best_position - positions)\n        positions = np.clip(positions + velocities, lower_bound, upper_bound)\n        obj_values = np.sum(positions ** 2, axis=1)\n        improved = obj_values < personal_best_values\n        personal_best_positions[improved] = positions[improved]\n        personal_best_values[improved] = obj_values[improved]\n        current_best_idx = np.argmin(personal_best_values)\n        if personal_best_values[current_best_idx] < global_best_value:\n            global_best_position = personal_best_positions[current_best_idx].copy()\n            global_best_value = personal_best_values[current_best_idx]\n    return round(float(global_best_value), 4)"}
{"task_id": 178, "completion_id": 9, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    (lower_bound, upper_bound) = (-1.0, 1.0)\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(lower_bound, upper_bound, size=(num_particles, n_dims))\n    velocities = np.zeros((num_particles, n_dims))\n\n    def sphere(x):\n        return np.sum(x ** 2, axis=1)\n    personal_best_positions = positions.copy()\n    personal_best_scores = sphere(positions)\n    global_best_idx = np.argmin(personal_best_scores)\n    global_best_position = personal_best_positions[global_best_idx]\n    global_best_score = personal_best_scores[global_best_idx]\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            (r1, r2) = rng.random(2)\n            velocities[i] = w * velocities[i] + c1 * r1 * (personal_best_positions[i] - positions[i]) + c2 * r2 * (global_best_position - positions[i])\n            positions[i] += velocities[i]\n            positions[i] = np.clip(positions[i], lower_bound, upper_bound)\n            current_score = sphere(positions[[i]])\n            if current_score < personal_best_scores[i]:\n                personal_best_positions[i] = positions[i].copy()\n                personal_best_scores[i] = current_score\n                if current_score < global_best_score:\n                    global_best_position = positions[i].copy()\n                    global_best_score = current_score\n    return round(global_best_score, 4)"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"\n    k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with X_train.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in X_test.\n    \"\"\"\n    n_train = len(X_train)\n    if k == 0 or k > n_train:\n        k = n_train\n    predictions = []\n    for x_test in X_test:\n        distances = [(np.linalg.norm(np.array(x_train_i) - np.array(x_test)), y_train_i) for (x_train_i, y_train_i) in zip(X_train, y_train)]\n        distances.sort()\n        k_neighbors = distances[:k]\n        (_, y_neighbors) = zip(*k_neighbors)\n        if task == 'classification':\n            counter = Counter(y_neighbors)\n            prediction = min(counter.most_common(1)[0][0]) if not isinstance(counter.most_common(1)[0][0], (int, float)) else counter.most_common(1)[0][0]\n        elif task == 'regression':\n            prediction = round(np.mean(y_neighbors), 4)\n        else:\n            raise ValueError(f\"Unknown task '{task}'; must be either 'classification' or 'regression'.\")\n        predictions.append(prediction)\n    return predictions\nX_train = [[2, 3], [4, 5], [5, 6], [7, 8]]\ny_train = [1, 0, 0, 1]\nX_test = [[3, 4], [6, 7]]"}
{"task_id": 180, "completion_id": 1, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((np.array(x1) - np.array(x2)) ** 2))\n    n_samples = len(X_train)\n    k = min(k, n_samples)\n    predictions = []\n    for test_point in X_test:\n        distances = []\n        for (i, train_point) in enumerate(X_train):\n            dist = euclidean_distance(test_point, train_point)\n            distances.append((dist, y_train[i]))\n        distances.sort()\n        k_nearest = distances[:k]\n        if task == 'classification':\n            labels = [label for (dist, label) in k_nearest]\n            counter = Counter(labels)\n            prediction = min(counter.most_common(1)[0][0])\n        elif task == 'regression':\n            targets = [label for (dist, label) in k_nearest]\n            prediction = round(np.mean(targets), 4)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 180, "completion_id": 2, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    n_train = len(X_train)\n    if k <= 0 or k > n_train:\n        k = n_train\n    predictions = []\n    for test_point in X_test:\n        distances = []\n        for (i, train_point) in enumerate(X_train):\n            dist = np.sqrt(sum(((x1 - x2) ** 2 for (x1, x2) in zip(test_point, train_point))))\n            distances.append((dist, i))\n        distances.sort()\n        k_neighbors = [y_train[distances[i][1]] for i in range(k)]\n        if task == 'classification':\n            counter = Counter(k_neighbors)\n            most_common = counter.most_common()\n            max_count = most_common[0][1]\n            candidates = [label for (label, count) in most_common if count == max_count]\n            predictions.append(min(candidates))\n        elif task == 'regression':\n            mean_value = sum(k_neighbors) / k\n            mean_value_rounded = round(mean_value, 4)\n            predictions.append(mean_value_rounded)\n    return predictions\nX_train = [[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0]]\ny_train = [1.5, 2.0, 8.0, 9.5]\nX_test = [[2.0, 2.0], [7.0, 7.0]]"}
{"task_id": 180, "completion_id": 3, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    n_train = len(X_train)\n    if k == 0 or k > n_train:\n        k = n_train\n    predictions = []\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    for x_test in X_test:\n        x_test_np = np.array(x_test)\n        distances = np.sqrt(np.sum((X_train_np - x_test_np) ** 2, axis=1))\n        indexed_distances = list(zip(distances, y_train_np))\n        indexed_distances.sort(key=lambda x: x[0])\n        k_nearest = indexed_distances[:k]\n        if task == 'classification':\n            label_counts = Counter((label for (_, label) in k_nearest))\n            sorted_labels = sorted(label_counts.items(), key=lambda x: (x[1], x[0]))\n            prediction = sorted_labels[-1][0]\n        elif task == 'regression':\n            avg = np.mean([label for (_, label) in k_nearest])\n            prediction = round(avg, 4)\n        else:\n            raise ValueError(\"Task must be either 'classification' or 'regression'.\")\n        predictions.append(prediction)\n    return predictions\nX_train = [[1, 2], [2, 3], [3, 1], [6, 5], [7, 7], [8, 6]]\ny_train = [0, 0, 0, 1, 1, 1]\nX_test = [[5, 5]]"}
{"task_id": 180, "completion_id": 4, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n\n    def euclidean_distance(a: list[float], b: list[float]) -> float:\n        return np.sqrt(np.sum([(ai - bi) ** 2 for (ai, bi) in zip(a, b)]))\n    n_train = len(X_train)\n    k = min(k, n_train) if k > 0 else n_train\n    predictions = []\n    for test_point in X_test:\n        distances = []\n        for (i, train_point) in enumerate(X_train):\n            dist = euclidean_distance(test_point, train_point)\n            distances.append((dist, y_train[i]))\n        distances.sort(key=lambda x: x[0])\n        neighbors = distances[:k]\n        neighbor_labels = [label for (_, label) in neighbors]\n        if task == 'classification':\n            label_counts = Counter(neighbor_labels)\n            most_common = label_counts.most_common(1)[0][0]\n            predicted = min((label for (label, count) in label_counts.items() if count == label_counts[most_common]))\n            predictions.append(predicted)\n        elif task == 'regression':\n            avg = np.mean(neighbor_labels)\n            rounded_avg = round(avg, 4)\n            predictions.append(rounded_avg)\n        else:\n            raise ValueError(f\"Unknown task type: {task}. Must be either 'classification' or 'regression'.\")\n    return predictions"}
{"task_id": 180, "completion_id": 5, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    n_train = len(X_train)\n    k = min(k, n_train)\n\n    def euclidean_distance(x1, x2):\n        return sum(((a - b) ** 2 for (a, b) in zip(x1, x2))) ** 0.5\n\n    def predict_one(x_test):\n        distances = [(euclidean_distance(x_test, x_train), y) for (x_train, y) in zip(X_train, y_train)]\n        distances.sort()\n        k_neighbors = distances[:k]\n        if task == 'classification':\n            k_labels = [label for (_, label) in k_neighbors]\n            label_counts = Counter(k_labels)\n            most_common = label_counts.most_common()\n            return max((label for (label, count) in most_common if count == most_common[0][1]), default=None)\n        elif task == 'regression':\n            k_targets = [target for (_, target) in k_neighbors]\n            return round(np.mean(k_targets), 4)\n        else:\n            raise ValueError(\"Task must be either 'classification' or 'regression'\")\n    return [predict_one(x_test) for x_test in X_test]\nX_train = [[1.0, 2.0], [2.0, 3.0], [3.0, 2.0], [5.0, 5.0]]\ny_train = [0, 0, 1, 1]\nX_test = [[1.5, 2.5], [4.5, 4.5]]"}
{"task_id": 180, "completion_id": 6, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    n_train = len(X_train)\n    k = min(k, n_train) if k != 0 and k <= n_train else n_train\n    predictions = []\n    for x in X_test:\n        distances = []\n        for (idx, x_train) in enumerate(X_train):\n            dist = np.sqrt(sum(((a - b) ** 2 for (a, b) in zip(x, x_train))))\n            distances.append((dist, y_train[idx]))\n        distances.sort(key=lambda t: t[0])\n        k_nearest = distances[:k]\n        k_labels = [label for (_, label) in k_nearest]\n        if task == 'classification':\n            counter = Counter(k_labels)\n            most_common = max(counter.items(), key=lambda item: (item[1], -item[0]))\n            predictions.append(most_common[0])\n        elif task == 'regression':\n            mean = round(sum(k_labels) / len(k_labels), 4)\n            predictions.append(mean)\n    return predictions\nX_train = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0]]\ny_train = [0, 1, 0]\nX_test = [[2.5, 3.5]]"}
{"task_id": 180, "completion_id": 7, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n\n    def euclidean_distance(a: list[float], b: list[float]) -> float:\n        return np.sqrt(sum(((x - y) ** 2 for (x, y) in zip(a, b))))\n    n_train_samples = len(X_train)\n    if k <= 0 or k > n_train_samples:\n        k = n_train_samples\n    predictions = []\n    for test_instance in X_test:\n        distances = []\n        for (i, train_instance) in enumerate(X_train):\n            dist = euclidean_distance(test_instance, train_instance)\n            distances.append((dist, y_train[i]))\n        distances.sort(key=lambda x: x[0])\n        neighbors = distances[:k]\n        neighbor_labels = [label for (_, label) in neighbors]\n        if task == 'classification':\n            counter = Counter(neighbor_labels)\n            most_common = counter.most_common()\n            max_freq = most_common[0][1]\n            candidates = [label for (label, freq) in most_common if freq == max_freq]\n            predictions.append(min(candidates))\n        elif task == 'regression':\n            mean_value = np.mean(neighbor_labels)\n            predictions.append(round(mean_value, 4))\n        else:\n            raise ValueError(\"Task must be 'classification' or 'regression'.\")\n    return predictions\nX_train = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0]]\ny_train = [0, 1, 0]\nX_test = [[2.5, 3.5]]"}
{"task_id": 180, "completion_id": 8, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n\n    def euclidean_distance(x1, x2):\n        return sum(((a - b) ** 2 for (a, b) in zip(x1, x2))) ** 0.5\n    n_samples_train = len(X_train)\n    if k == 0 or k > n_samples_train:\n        k = n_samples_train\n    predictions = []\n    for test_sample in X_test:\n        distances = []\n        for (i, train_sample) in enumerate(X_train):\n            dist = euclidean_distance(test_sample, train_sample)\n            distances.append((dist, y_train[i]))\n        distances.sort()\n        k_nearest = distances[:k]\n        if task == 'classification':\n            k_labels = [label for (_, label) in k_nearest]\n            label_counts = Counter(k_labels)\n            label_list = sorted(label_counts.items(), key=lambda x: (-x[1], x[0]))\n            predictions.append(label_list[0][0])\n        elif task == 'regression':\n            k_labels = [label for (_, label) in k_nearest]\n            prediction = round(sum(k_labels) / k, 4)\n            predictions.append(prediction)\n    return predictions"}
{"task_id": 180, "completion_id": 9, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    n_train = len(X_train)\n    if k == 0 or k > n_train:\n        k = n_train\n    predictions = []\n\n    def euclidean_distance(x1, x2):\n        return np.sqrt(sum(((a - b) ** 2 for (a, b) in zip(x1, x2))))\n    for test_instance in X_test:\n        distances = []\n        for (i, train_instance) in enumerate(X_train):\n            dist = euclidean_distance(test_instance, train_instance)\n            distances.append((dist, y_train[i]))\n        distances.sort()\n        k_nearest = distances[:k]\n        k_labels = [label for (dist, label) in k_nearest]\n        if task == 'classification':\n            label_counts = Counter(k_labels)\n            most_common = label_counts.most_common()\n            max_count = most_common[0][1]\n            candidates = [label for (label, count) in most_common if count == max_count]\n            predictions.append(min(candidates))\n        elif task == 'regression':\n            prediction = sum(k_labels) / len(k_labels)\n            predictions.append(round(prediction, 4))\n    return predictions"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    class DecisionTreeNode:\n\n        def __init__(self, feature=None, threshold=None, left=None, right=None, label=None, depth=0):\n            self.feature = feature\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.label = label\n            self.depth = depth\n\n    def gini(y):\n        \"\"\"Calculate Gini Impurity for a list of class labels.\"\"\"\n        counts = np.bincount(y)\n        probabilities = counts / len(y)\n        return 1 - np.sum(probabilities ** 2)\n\n    def best_split(X, y):\n        \"\"\"Find the best split (feature, threshold) using Gini gain.\"\"\"\n        best_gain = -1\n        best_feature = None\n        best_threshold = None\n        (n_samples, n_features) = X.shape\n        for feature in range(n_features):\n            unique_vals = np.sort(np.unique(X[:, feature]))\n            thresholds = []\n            for i in range(1, len(unique_vals)):\n                if unique_vals[i - 1] != unique_vals[i]:\n                    thresholds.append((unique_vals[i - 1] + unique_vals[i]) / 2)\n            for threshold in thresholds:\n                left_indices = X[:, feature] < threshold\n                right_indices = X[:, feature] >= threshold\n                if np.all(left_indices == right_indices) or np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                    continue\n                left_gini = gini(y[left_indices])\n                right_gini = gini(y[right_indices])\n                gain = gini(y) - (np.sum(left_indices) / n_samples * left_gini + np.sum(right_indices) / n_samples * right_gini)\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = feature\n                    best_threshold = threshold\n        return (best_feature, best_threshold)\n\n    def build_tree(X, y, depth=0):\n        \"\"\"Recursively build a binary decision tree.\"\"\"\n        labels = np.unique(y)\n        if len(labels) == 1:\n            return DecisionTreeNode(label=labels[0], depth=depth)\n        if max_depth is not None and depth >= max_depth:\n            return DecisionTreeNode(label=majority_class(y), depth=depth)\n        (feature, threshold) = best_split(X, y)\n        if feature is None:\n            return DecisionTreeNode(label=majority_class(y), depth=depth)\n        left_indices = X[:, feature] < threshold\n        right_indices = X[:, feature] >= threshold\n        if np.sum(left_indices) == 0:\n            return DecisionTreeNode(label=majority_class(y), depth=depth)\n        if np.sum(right_indices) == 0:\n            return DecisionTreeNode(label=majority_class(y), depth=depth)\n        node = DecisionTreeNode(feature=feature, threshold=threshold, left=build_tree(X[left_indices], y[left_indices], depth + 1), right=build_tree(X[right_indices], y[right_indices], depth + 1), depth=depth)\n        return node\n\n    def majority_class(y):\n        \"\"\"Find the majority class in a node.\"\"\"\n        counts = np.bincount(y)\n        return np.argmax(counts)\n\n    def predict(row, node):\n        \"\"\"Predict class label for a single sample using the tree.\"\"\"\n        if node.label is not None:\n            return node.label\n        if row[node.feature] < node.threshold:\n            return predict(row, node.left)\n        else:\n            return predict(row, node.right)\n    root = build_tree(X_train, y_train)\n    return [predict(X_test[i, :], root) for i in range(X_test.shape[0])]"}
{"task_id": 184, "completion_id": 1, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n\n    class DecisionNode:\n\n        def __init__(self, feature=-1, threshold=-1.0, left=None, right=None, is_leaf=False, predicted_class=-1, depth=0):\n            self.feature = feature\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.is_leaf = is_leaf\n            self.predicted_class = predicted_class\n            self.depth = depth\n\n        def predict(self, sample):\n            \"\"\"Predict the class label for a single sample.\"\"\"\n            if self.is_leaf:\n                return self.predicted_class\n            if sample[self.feature] <= self.threshold:\n                return self.left.predict(sample)\n            else:\n                return self.right.predict(sample)\n\n    def gini_impurity(labels):\n        \"\"\"Compute the Gini impurity for a list of class labels.\"\"\"\n        counts = np.bincount(labels)\n        total = len(labels)\n        impurity = 1.0\n        for count in counts:\n            if count > 0:\n                prob = count / total\n                impurity -= prob * prob\n        return impurity\n\n    def build_tree(X, y, current_depth=0):\n        \"\"\"Recursively build the decision tree.\"\"\"\n        if np.all(y == y[0]):\n            return DecisionNode(is_leaf=True, predicted_class=y[0], depth=current_depth)\n        if max_depth is not None and current_depth >= max_depth:\n            return DecisionNode(is_leaf=True, predicted_class=majority_class(y), depth=current_depth)\n        best_gini = float('inf')\n        best_feature = -1\n        best_threshold = -1.0\n        for feature_idx in range(X.shape[1]):\n            sorted_indices = np.argsort(X[:, feature_idx])\n            sorted_values = X[sorted_indices, feature_idx]\n            sorted_labels = y[sorted_indices]\n            for i in range(1, len(sorted_values)):\n                if sorted_values[i] != sorted_values[i - 1]:\n                    threshold = (sorted_values[i - 1] + sorted_values[i]) / 2\n                    mask = X[:, feature_idx] <= threshold\n                    left_y = y[mask]\n                    right_y = y[~mask]\n                    if len(left_y) == 0 or len(right_y) == 0:\n                        continue\n                    gini_parent = gini_impurity(y)\n                    gini_left = gini_impurity(left_y)\n                    gini_right = gini_impurity(right_y)\n                    size_left = len(left_y) / len(y)\n                    size_right = len(right_y) / len(y)\n                    gini_children = size_left * gini_left + size_right * gini_right\n                    gain = gini_parent - gini_children\n                    if gain < best_gini:\n                        best_gini = gain\n                        best_feature = feature_idx\n                        best_threshold = threshold\n        if best_gini <= 0:\n            return DecisionNode(is_leaf=True, predicted_class=majority_class(y), depth=current_depth)\n        mask = X[:, best_feature] <= best_threshold\n        left_X = X[mask]\n        left_y = y[mask]\n        right_X = X[~mask]\n        right_y = y[~mask]\n        left_child = build_tree(left_X, left_y, current_depth + 1)\n        right_child = build_tree(right_X, right_y, current_depth + 1)\n        return DecisionNode(feature=best_feature, threshold=best_threshold, left=left_child, right=right_child, depth=current_depth)\n\n    def majority_class(labels):\n        \"\"\"Return the majority class in the labels.\"\"\"\n        return int(np.bincount(labels).argmax())\n    tree = build_tree(X_train, y_train)\n    predictions = [tree.predict(test_sample) for test_sample in X_test]\n    return predictions"}
{"task_id": 184, "completion_id": 2, "solution": "import numpy as np\nfrom typing import Optional, List, Tuple, Union\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: Optional[int]=None) -> List[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n    \n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    class DecisionTreeNode:\n\n        def __init__(self):\n            self.feature_index = None\n            self.threshold = None\n            self.left = None\n            self.right = None\n            self.label = None\n\n        def is_leaf_node(self):\n            return self.left is None and self.right is None\n\n    def gini_impurity(class_counts: np.ndarray) -> float:\n        \"\"\"Calculate Gini impurity of a node.\"\"\"\n        total = np.sum(class_counts)\n        if total == 0:\n            return 0.0\n        probabilities = class_counts / total\n        return 1 - np.sum(probabilities ** 2)\n\n    def find_best_split(X: np.ndarray, y: np.ndarray) -> Tuple[bool, int, float]:\n        \"\"\"Find best feature and threshold to split on, based on Gini gain.\"\"\"\n        n_features = X.shape[1]\n        best_gain = -1\n        best_feature = -1\n        best_threshold = -1\n        for feature_index in range(n_features):\n            sorted_indices = np.argsort(X[:, feature_index])\n            sorted_X = X[sorted_indices, feature_index]\n            sorted_y = y[sorted_indices]\n            unique_values = np.unique(sorted_X)\n            for i in range(len(unique_values) - 1):\n                threshold = (unique_values[i] + unique_values[i + 1]) / 2\n                left_mask = sorted_X < threshold\n                right_mask = sorted_X >= threshold\n                if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                    continue\n                parent_gini = gini_impurity(np.bincount(sorted_y, minlength=np.max(y) + 1))\n                left_gini = gini_impurity(np.bincount(sorted_y[left_mask], minlength=np.max(y) + 1))\n                right_gini = gini_impurity(np.bincount(sorted_y[right_mask], minlength=np.max(y) + 1))\n                gain = parent_gini - (np.sum(left_mask) / len(sorted_y) * left_gini + np.sum(right_mask) / len(sorted_y) * right_gini)\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = feature_index\n                    best_threshold = threshold\n        return (best_gain > 1e-07, best_feature, best_threshold)\n\n    def build_tree(X: np.ndarray, y: np.ndarray, depth: int, max_depth: Optional[int], node: DecisionTreeNode):\n        \"\"\"Recursively build decision tree.\"\"\"\n        if len(np.unique(y)) == 1:\n            node.label = int(y[0])\n            return\n        if max_depth is not None and depth >= max_depth:\n            node.label = majority_class(y)\n            return\n        (is_split, feature_index, threshold) = find_best_split(X, y)\n        if not is_split:\n            node.label = majority_class(y)\n            return\n        node.feature_index = feature_index\n        node.threshold = threshold\n        node.left = DecisionTreeNode()\n        node.right = DecisionTreeNode()\n        left_mask = X[:, feature_index] < threshold\n        right_mask = X[:, feature_index] >= threshold\n        build_tree(X[left_mask], y[left_mask], depth + 1, max_depth, node.left)\n        build_tree(X[right_mask], y[right_mask], depth + 1, max_depth, node.right)\n\n    def majority_class(y: np.ndarray) -> int:\n        \"\"\"Return the majority class label.\"\"\"\n        counts = np.bincount(y)\n        return np.argmax(counts)\n\n    def predict_tree(node: DecisionTreeNode, x: np.ndarray) -> int:\n        \"\"\"Predict class label for a single sample.\"\"\"\n        if node.is_leaf_node():\n            return node.label\n        if x[node.feature_index] < node.threshold:\n            return predict_tree(node.left, x)\n        else:\n            return predict_tree(node.right, x)\n    root = DecisionTreeNode()\n    build_tree(X_train, y_train, 0, max_depth, root)\n    predictions = [predict_tree(root, x) for x in X_test]\n    return predictions"}
{"task_id": 184, "completion_id": 3, "solution": "import numpy as np\nfrom typing import Optional, List, Tuple, Any\nfrom sklearn.datasets import make_classification\nclass DecisionTreeNode:\n\n    def __init__(self):\n        self.feature_index: Optional[int] = None\n        self.threshold: Optional[float] = None\n        self.left: Optional['DecisionTreeNode'] = None\n        self.right: Optional['DecisionTreeNode'] = None\n        self.label: Optional[int] = None\n        self.depth: int = 0\ndef gini_impurity(labels: np.ndarray) -> float:\n    \"\"\"\n    Calculate the Gini impurity of a list of class labels.\n    \"\"\"\n    p = np.bincount(labels)\n    p = p / p.sum()\n    return 1 - np.sum(p ** 2)\ndef best_split(X: np.ndarray, y: np.ndarray) -> Optional[Tuple[int, float]]:\n    \"\"\"Find the best feature and threshold to split on, maximizing Gini gain.\"\"\"\n    (n_samples, n_features) = X.shape\n    parent_gini = gini_impurity(y)\n    best_gain = 0\n    best_feature_index = None\n    best_threshold = None\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        indices = np.argsort(feature_values)\n        sorted_feature = feature_values[indices]\n        sorted_labels = y[indices]\n        split_thresholds = []\n        for i in range(len(sorted_labels) - 1):\n            if sorted_labels[i] != sorted_labels[i + 1]:\n                split_thresholds.append((sorted_feature[i] + sorted_feature[i + 1]) / 2)\n        for threshold in split_thresholds:\n            left_mask = feature_values <= threshold\n            right_mask = feature_values > threshold\n            left_y = y[left_mask]\n            right_y = y[right_mask]\n            if len(left_y) == 0 or len(right_y) == 0:\n                continue\n            gain = parent_gini - (len(left_y) / n_samples * gini_impurity(left_y) + len(right_y) / n_samples * gini_impurity(right_y))\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = feature_index\n                best_threshold = threshold\n    if best_gain > 0:\n        return (best_feature_index, best_threshold)\n    else:\n        return None\ndef build_tree(X: np.ndarray, y: np.ndarray, max_depth: Optional[int], depth: int=0) -> DecisionTreeNode:\n    \"\"\"Recursively build the decision tree.\"\"\"\n    node = DecisionTreeNode()\n    node.depth = depth\n    if np.unique(y).size == 1:\n        node.label = int(y[0])\n        return node\n    if max_depth is not None and depth >= max_depth:\n        node.label = int(np.bincount(y).argmax())\n        return node\n    split_info = best_split(X, y)\n    if split_info is None:\n        node.label = int(np.bincount(y).argmax())\n        return node\n    (best_feature, best_threshold) = split_info\n    node.feature_index = best_feature\n    node.threshold = best_threshold\n    left_mask = X[:, best_feature] <= best_threshold\n    right_mask = ~left_mask\n    node.left = build_tree(X[left_mask], y[left_mask], max_depth, depth + 1)\n    node.right = build_tree(X[right_mask], y[right_mask], max_depth, depth + 1)\n    return node\ndef predict_tree(tree: DecisionTreeNode, x: np.ndarray) -> int:\n    \"\"\"Predict the class label of a single example.\"\"\"\n    if tree.label is not None:\n        return tree.label\n    if x[tree.feature_index] <= tree.threshold:\n        return predict_tree(tree.root, x)\n    else:\n        return predict_tree(tree.root_right, x)\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: Optional[int]=None) -> List[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    root = build_tree(X_train, y_train, max_depth)\n\n    def predict(x):\n        return predict_tree(root, x)\n    return [predict(x) for x in X_test]"}
{"task_id": 184, "completion_id": 4, "solution": "import numpy as np\nfrom typing import Optional, List, Dict, Tuple, Any\nimport numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: Optional[int]=None) -> List[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    class _Node:\n\n        def __init__(self, feature_idx: int=-1, threshold: float=0.0, left: Any=None, right: Any=None, label: int=-1):\n            self.feature_idx = feature_idx\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.label = label\n\n    def gini_impurity(labels: np.ndarray) -> float:\n        \"\"\"Calculate Gini impurity for an array of class labels.\"\"\"\n        counts = np.bincount(labels)\n        probabilities = counts / len(labels)\n        return 1 - np.sum(probabilities ** 2)\n\n    def find_best_split(X: np.ndarray, y: np.ndarray) -> Tuple[bool, int, float]:\n        \"\"\"Find the best split (feature, threshold) for the current node.\"\"\"\n        (n_samples, n_features) = X.shape\n        best_gini_gain = -1\n        (best_idx, best_threshold) = (-1, -1)\n        parent_gini = gini_impurity(y)\n        for idx in range(n_features):\n            sorted_indices = np.argsort(X[:, idx])\n            sorted_X = X[sorted_indices, idx]\n            sorted_y = y[sorted_indices]\n            unique_vals = np.unique(sorted_X)\n            for i in range(len(unique_vals) - 1):\n                mid_point = (unique_vals[i] + unique_vals[i + 1]) / 2\n                left_y = sorted_y[sorted_X < mid_point]\n                right_y = sorted_y[sorted_X >= mid_point]\n                if len(left_y) == 0 or len(right_y) == 0:\n                    continue\n                gini_left = gini_impurity(left_y)\n                gini_right = gini_impurity(right_y)\n                weighted_gini = len(left_y) / n_samples * gini_left + len(right_y) / n_samples * gini_right\n                gini_gain = parent_gini - weighted_gini\n                if gini_gain > best_gini_gain:\n                    best_gini_gain = gini_gain\n                    best_idx = idx\n                    best_threshold = mid_point\n        if best_gini_gain > 0:\n            return (True, best_idx, best_threshold)\n        else:\n            return (False, -1, -1)\n\n    def build_tree(X: np.ndarray, y: np.ndarray, depth: int, max_depth: Optional[int]) -> _Node:\n        \"\"\"Recursively build the decision tree from the current node.\"\"\"\n        labels = y\n        if np.all(labels == labels[0]):\n            return _Node(label=int(labels[0]))\n        if max_depth is not None and depth == max_depth:\n            most_common = np.argmax(np.bincount(labels))\n            return _Node(label=int(most_common))\n        (improved, feature_index, threshold) = find_best_split(X, y)\n        if not improved:\n            most_common = np.argmax(np.bincount(labels))\n            return _Node(label=int(most_common))\n        left_mask = X[:, feature_index] < threshold\n        right_mask = X[:, feature_index] >= threshold\n        if np.all(~left_mask) or np.all(~right_mask):\n            most_common = np.argmax(np.bincount(labels))\n            return _Node(label=int(most_common))\n        left = build_tree(X[left_mask], y[left_mask], depth + 1, max_depth)\n        right = build_tree(X[right_mask], y[right_mask], depth + 1, max_depth)\n        return _Node(feature_idx=feature_index, threshold=threshold, left=left, right=right)\n\n    def predict_single(tree: _Node, sample: np.ndarray) -> int:\n        \"\"\"Predict the class label for a single sample.\"\"\"\n        while tree.label == -1:\n            if sample[tree.feature_idx] < tree.threshold:\n                tree = tree.root if hasattr(tree, 'root') else tree.left\n            else:\n                tree = tree.right\n        return tree.label\n    root = build_tree(X_train, y_train, 0, max_depth)\n    predictions = []\n    for i in range(X_test.shape[0]):\n        predictions.append(predict_single(root, X_test[i]))\n    return predictions\nX_train = np.array([[2.0, 1], [1.5, 0], [5.0, 1], [3.0, 0], [4.5, 1]])\ny_train = np.array([0, 0, 1, 0, 1])\nX_test = np.array([[2.0, 1], [5.0, 1]])"}
{"task_id": 184, "completion_id": 5, "solution": "import numpy as np\nfrom typing import Optional, Tuple, List\nclass DecisionTreeNode:\n\n    def __init__(self):\n        self.feature_index = None\n        self.threshold = None\n        self.left = None\n        self.right = None\n        self.predicted_class = None\n        self.depth = 0\ndef gini_impurity(y: np.ndarray) -> float:\n    \"\"\"Calculate the Gini impurity of a set of class labels.\"\"\"\n    if len(y) == 0:\n        return 0.0\n    counts = np.unique(y, return_counts=True)[1]\n    probabilities = counts / len(y)\n    return 1.0 - np.sum(probabilities ** 2)\ndef get_best_split(X: np.ndarray, y: np.ndarray, depth: int, max_depth: Optional[int]=None) -> Tuple[bool, float, int, float]:\n    \"\"\"Find the best split for the current node.\"\"\"\n    (n_samples, n_features) = X.shape\n    best_gain = -1.0\n    best_feature_index = 0\n    best_threshold = 0\n    current_gini = gini_impurity(y)\n    if len(np.unique(y)) == 1:\n        return (True, float(current_gini), -1, -1)\n    if max_depth is not None and depth == max_depth:\n        return (True, float(current_gini), -1, -1)\n    for feature_idx in range(n_features):\n        unique_vals = np.unique(X[:, feature_idx])\n        sorted_features = np.sort(unique_vals)\n        for i in range(len(sorted_features) - 1):\n            threshold = (sorted_features[i] + sorted_features[i + 1]) / 2\n            left_mask = X[:, feature_idx] <= threshold\n            right_mask = X[:, feature_idx] > threshold\n            left_y = y[left_mask]\n            right_y = y[right_mask]\n            if len(left_y) == 0 or len(right_y) == 0:\n                continue\n            weight_left = len(left_y) / n_samples\n            weight_right = len(right_y) / n_samples\n            gain = current_gini - (weight_left * gini_impurity(left_y) + weight_right * gini_impurity(right_y))\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = feature_idx\n                best_threshold = threshold\n    if best_gain <= 0:\n        return (True, float(current_gini), -1, -1)\n    return (False, best_gain, best_feature_index, best_threshold)\ndef build_tree(X: np.ndarray, y: np.ndarray, depth: int, max_depth: Optional[int]=None) -> DecisionTreeNode:\n    \"\"\"Recursively build the decision tree.\"\"\"\n    node = DecisionTreeNode()\n    node.depth = depth\n    (is_leaf, _, _, _) = get_best_split(X, y, depth, max_depth)\n    if is_leaf:\n        node.predicted_class = int(majority_class(y))\n        return node\n    (_, _, best_feature_index, best_threshold) = get_best_split(X, y, depth, max_depth)\n    node.feature_index = best_feature_index\n    node.threshold = best_threshold\n    left_mask = X[:, best_feature_index] <= best_threshold\n    right_mask = X[:, best_feature_index] > best_threshold\n    (X_left, y_left) = (X[left_mask], y[left_mask])\n    node.left = build_tree(X_left, y_left, depth + 1, max_depth)\n    (X_right, y_right) = (X[right_mask], y[right_mask])\n    node.right = build_tree(X_right, y_right, depth + 1, max_depth)\n    return node\ndef majority_class(y: np.ndarray) -> int:\n    \"\"\"Find the majority class in the labels.\"\"\"\n    (values, counts) = np.unique(y, return_counts=True)\n    return values[np.argmax(counts)]\ndef predict_tree(node: DecisionTreeNode, x: np.ndarray) -> int:\n    \"\"\"Make a prediction for a single sample.\"\"\"\n    if node.predicted_class is not None:\n        return node.predicted_class\n    if x[node.feature_index] <= node.threshold:\n        return predict_tree(node.left, x)\n    else:\n        return predict_tree(node.right, x)\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: Optional[int]=None) -> List[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    tree = build_tree(X_train, y_train, depth=0, max_depth=max_depth)\n    predictions = []\n    for x in X_test:\n        predictions.append(predict_tree(tree, x))\n    return predictions"}
{"task_id": 184, "completion_id": 6, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    def gini_impurity(y):\n        if len(y) == 0:\n            return 0\n        (_, counts) = np.unique(y, return_counts=True)\n        return 1 - np.sum((counts / len(y)) ** 2)\n\n    def find_best_split(X, y):\n        best_gain = 0\n        best_idx = -1\n        best_threshold = None\n        for idx in range(X.shape[1]):\n            feature = X[:, idx]\n            sorted_indices = np.argsort(feature)\n            sorted_y = y[sorted_indices]\n            sorted_feat = feature[sorted_indices]\n            unique_thresholds = np.unique(sorted_feat)\n            for i in range(1, len(sorted_feat)):\n                if sorted_feat[i - 1] != sorted_feat[i]:\n                    threshold = (sorted_feat[i - 1] + sorted_feat[i]) / 2\n                    idx_left = sorted_feat <= threshold\n                    idx_right = sorted_feat > threshold\n                    y_left = sorted_y[idx_left]\n                    y_right = sorted_y[idx_right]\n                    if len(y_left) == 0 or len(y_right) == 0:\n                        continue\n                    impurity_parent = gini_impurity(sorted_y)\n                    impurity_left = gini_impurity(y_left)\n                    impurity_right = gini_impurity(y_right)\n                    gain = impurity_parent - (len(y_left) / len(sorted_y) * impurity_left + len(y_right) / len(sorted_y) * impurity_right)\n                    if gain > best_gain:\n                        best_gain = gain\n                        best_idx = idx\n                        best_threshold = threshold\n        if best_gain == 0:\n            return None\n        return {'feature': best_idx, 'threshold': best_threshold}\n\n    class Node:\n\n        def __init__(self, feature=None, threshold=None, left=None, right=None, label=None, depth=0):\n            self.feature = feature\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.label = label\n            self.depth = depth\n\n    def build_tree(X, y, depth=0):\n        if max_depth is not None and depth >= max_depth:\n            return Node(label=int(mode(y)))\n        if np.all(y == y[0]):\n            return Node(label=y[0], depth=depth)\n        split = find_best_split(X, y)\n        if split is None:\n            return Node(label=int(mode(y)), depth=depth)\n        idx_left = X[:, split['feature']] <= split['threshold']\n        (X_left, y_left) = (X[idx_left], y[idx_left])\n        (X_right, y_right) = (X[~idx_left], y[~idx_left])\n        left = build_tree(X_left, y_left, depth + 1)\n        right = build_tree(X_right, y_right, depth + 1)\n        return Node(feature=split['feature'], threshold=split['threshold'], left=left, right=right, depth=depth)\n\n    def predict_sample(x, node):\n        if node.label is not None:\n            return node.label\n        if x[node.feature] <= node.threshold:\n            return predict_sample(x, node.left)\n        else:\n            return predict_sample(x, node.right)\n\n    def mode(arr):\n        if len(arr) == 0:\n            return None\n        (vals, counts) = np.unique(arr, return_counts=True)\n        return vals[np.argmax(counts)]\n    root = build_tree(X_train, y_train)\n    predictions = []\n    for x in X_test:\n        pred = predict_sample(x, root)\n        predictions.append(pred)\n    return predictions\nX_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny_train = np.array([0, 0, 1, 1])\nX_test = np.array([[1.5, 2.5], [3.5, 4.5]])"}
{"task_id": 184, "completion_id": 7, "solution": "import numpy as np\nfrom typing import Optional, List, Tuple, Dict, Any\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: Optional[int]=None) -> List[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n    \n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n    \n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    class Node:\n\n        def __init__(self, feature_index=None, threshold=None, left=None, right=None, label=None, depth=0):\n            self.feature_index = feature_index\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.label = label\n            self.depth = depth\n\n    def gini_impurity(labels: np.ndarray) -> float:\n        \"\"\"Compute Gini impurity for a set of labels.\"\"\"\n        counts = np.bincount(labels)\n        return 1 - np.sum((counts / len(labels)) ** 2)\n\n    def get_best_split(X: np.ndarray, y: np.ndarray) -> Tuple[int, float, float]:\n        \"\"\"Get the best split for the current node based on Gini impurity.\"\"\"\n        (n_samples, n_features) = X.shape\n        best_gini_gain = -1\n        best_feature = None\n        best_threshold = None\n        for feature_idx in range(n_features):\n            sorted_indices = np.argsort(X[:, feature_idx])\n            sorted_X = X[sorted_indices, feature_idx]\n            sorted_y = y[sorted_indices]\n            thresholds = []\n            prev = None\n            for i in range(1, len(sorted_X)):\n                x1 = sorted_X[i - 1]\n                x2 = sorted_X[i]\n                if x1 != x2:\n                    if prev is None or abs((x1 + x2) / 2 - prev) > 1e-06:\n                        thresholds.append((x1 + x2) / 2)\n                        prev = (x1 + x2) / 2\n            for threshold in thresholds:\n                left_mask = sorted_X < threshold\n                right_mask = sorted_X >= threshold\n                if np.all(~left_mask) or np.all(~right_mask):\n                    continue\n                left_gini = gini_impurity(sorted_y[left_mask])\n                right_gini = gini_impurity(sorted_y[right_mask])\n                weighted_gini = len(sorted_y[left_mask]) / n_samples * left_gini + len(sorted_y[right_mask]) / n_samples * right_gini\n                gini_gain = gini_impurity(sorted_y) - weighted_gini\n                if gini_gain > best_gini_gain:\n                    best_gini_gain = gini_gain\n                    best_feature = feature_idx\n                    best_threshold = threshold\n        return (best_feature, best_threshold, best_gini_gain)\n\n    def construct_tree(X: np.ndarray, y: np.ndarray, depth: int=0) -> Node:\n        node = Node(depth=depth)\n        if np.all(y == y[0]):\n            node.label = y[0]\n            return node\n        if max_depth is not None and depth >= max_depth:\n            node.label = int(np.bincount(y).argmax())\n            return node\n        (feature_idx, threshold, gini_gain) = get_best_split(X, y)\n        if feature_idx is None:\n            node.label = int(np.bincount(y).argmax())\n            return node\n        left_mask = X[:, feature_idx] < threshold\n        right_mask = X[:, feature_idx] >= threshold\n        (left_X, left_y) = (X[left_mask], y[left_mask])\n        (right_X, right_y) = (X[right_mask], y[right_mask])\n        if left_X.shape[0] == 0 or right_X.shape[0] == 0:\n            node.label = int(np.bincount(y).argmax())\n            return node\n        node.feature_index = feature_idx\n        node.threshold = threshold\n        node.left = construct_tree(left_X, left_y, depth + 1)\n        node.right = construct_tree(right_X, right_y, depth + 1)\n        return node\n\n    def predict_sample(tree: Node, x: np.ndarray) -> int:\n        while tree.label is None:\n            if x[tree.feature_index] < tree.threshold:\n                tree = tree.right\n            else:\n                tree = tree.right\n        return tree.label\n\n    def build_tree(X, y):\n        return construct_tree(X, y)\n\n    def predict(X, tree):\n        return [predict_sample(tree, x) for x in X]\n    tree = build_tree(X_train, y_train)\n    return predict(X_test, tree)"}
{"task_id": 184, "completion_id": 8, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n    \n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n    \n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    class DecisionNode:\n\n        def __init__(self, feature_idx=None, threshold=None, left=None, right=None, value=None, depth=0):\n            self.feature_idx = feature_idx\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.value = value\n            self.depth = depth\n\n    def gini_impurity(y):\n        \"\"\"Calculate Gini impurity for the given array of class labels.\"\"\"\n        if len(y) == 0:\n            return 0\n        (_, counts) = np.unique(y, return_counts=True)\n        probabilities = counts / len(y)\n        return 1 - np.sum(probabilities ** 2)\n\n    def best_split(X, y):\n        \"\"\"Find the best split for a node using Gini impurity.\n        \n        Returns (feature_idx, threshold) for the split with maximum gain, or None if no good split exists.\n        \"\"\"\n        (n_samples, n_features) = X.shape\n        best_gain = -1\n        best_feature_idx = None\n        best_threshold = None\n        parent_gini = gini_impurity(y)\n        for feature_idx in range(n_features):\n            unique_values = np.unique(X[:, feature_idx])\n            sorted_indices = np.argsort(X[:, feature_idx])\n            sorted_X = X[sorted_indices, feature_idx]\n            sorted_y = y[sorted_indices]\n            thresholds = []\n            prev_value = None\n            for val in sorted_X:\n                if val != prev_value and val != sorted_X[0]:\n                    thresholds.append((prev_value + val) / 2)\n                prev_value = val\n            for threshold in thresholds:\n                mask = X[:, feature_idx] < threshold\n                left_y = y[mask]\n                left_gini = gini_impurity(left_y)\n                right_y = y[~mask]\n                right_gini = gini_impurity(right_y)\n                n_left = len(left_y)\n                n_right = len(right_y)\n                weighted_gini = n_left / n_samples * left_gini + n_right / n_samples * right_gini\n                gain = parent_gini - weighted_gini\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature_idx = feature_idx\n                    best_threshold = threshold\n        if best_gain <= 0:\n            return (None, None)\n        return (best_feature_idx, best_threshold)\n\n    def build_tree(X, y, depth=0):\n        \"\"\"Recursively build the decision tree.\"\"\"\n        if len(np.unique(y)) == 1:\n            return DecisionNode(value=y[0], depth=depth)\n        if max_depth is not None and depth >= max_depth:\n            return DecisionNode(value=np.argmax(np.bincount(y)), depth=depth)\n        (feature_idx, threshold) = best_split(X, y)\n        if feature_idx is None:\n            return DecisionNode(value=np.argmax(np.bincount(y)), depth=depth)\n        mask = X[:, feature_idx] < threshold\n        if np.sum(mask) == 0 or np.sum(~mask) == 0:\n            return DecisionNode(value=np.argmax(np.bincount(y)), depth=depth)\n        left = build_tree(X[mask], y[mask], depth + 1)\n        right = build_tree(X[~mask], y[~mask], depth + 1)\n        return DecisionNode(feature_idx=feature_idx, threshold=threshold, left=left, right=right, depth=depth)\n\n    def predict_tree(tree, x):\n        \"\"\"Predict label for a single sample using the decision tree.\"\"\"\n        while tree.left is not None and tree.right is not None:\n            if x[tree.feature_idx] < tree.threshold:\n                tree = tree.root.left\n            else:\n                tree = tree.root.right\n        return tree.value\n\n    class DecisionTree:\n\n        def __init__(self):\n            self.root = None\n\n        def fit(self, X, y):\n            self.root = build_tree(X, y)\n\n        def predict(self, X):\n            return [predict_tree(self, x) for x in X]\n    tree = DecisionTree()\n    tree.fit(X_train, y_train)\n    return tree.predict(X_test)"}
{"task_id": 184, "completion_id": 9, "solution": "import numpy as np\nfrom typing import Optional, List, Tuple, Any\ndef calculate_gini(labels: np.ndarray) -> float:\n    \"\"\"Calculate Gini impurity for a set of labels.\"\"\"\n    if len(labels) == 0:\n        return 0.0\n    (_, counts) = np.unique(labels, return_counts=True)\n    probabilities = counts / len(labels)\n    return 1.0 - np.sum(probabilities ** 2)\ndef find_best_split(X: np.ndarray, y: np.ndarray) -> Tuple[Optional[int], Optional[float], float]:\n    \"\"\"\n    Find the best feature and threshold to split on maximizing Gini gain.\n    \n    Returns:\n        (best_feature_index, best_threshold, best_gain)\n    \"\"\"\n    n_features = X.shape[1]\n    best_gain = 0\n    best_feature = None\n    best_threshold = None\n    for feature_idx in range(n_features):\n        values = X[:, feature_idx]\n        indices = np.argsort(values)\n        sorted_values = values[indices]\n        sorted_labels = y[indices]\n        unique_values = np.unique(sorted_values)\n        if len(unique_values) == 1:\n            continue\n        for i in range(1, len(sorted_values)):\n            if sorted_values[i - 1] < sorted_values[i]:\n                threshold = (sorted_values[i - 1] + sorted_values[i]) / 2\n                left_mask = sorted_values <= threshold\n                left_labels = sorted_labels[left_mask]\n                right_labels = sorted_labels[~left_mask]\n                if len(left_labels) == 0 or len(right_labels) == 0:\n                    continue\n                gini_left = calculate_gini(left_labels)\n                gini_right = calculate_gini(right_labels)\n                gini_split = len(left_labels) / len(sorted_labels) * gini_left + len(right_labels) / len(sorted_labels) * gini_right\n                parent_gini = calculate_gini(sorted_labels)\n                gain = parent_gini - gini_split\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = feature_idx\n                    best_threshold = threshold\n    return (best_feature, best_threshold, best_gain)\nclass DecisionNode:\n\n    def __init__(self, feature: Optional[int]=None, threshold: Optional[float]=None, left: Optional['DecisionNode']=None, right: Optional['DecisionNode']=None, prediction: Optional[int]=None, depth: int=0):\n        self.feature = feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.prediction = prediction\n        self.depth = depth\n\n    def predict(self, x: np.ndarray) -> int:\n        if self.prediction is not None:\n            return self.prediction\n        if x[self.feature] <= self.threshold:\n            return self.left.predict(x)\n        else:\n            return self.right.predict(x)\ndef build_tree(X: np.ndarray, y: np.ndarray, depth: int=0, max_depth: Optional[int]=None) -> DecisionNode:\n    \"\"\"\n    Recursively build the decision tree until stopping criteria are met.\n    \"\"\"\n    if np.all(y == y[0]):\n        return DecisionNode(prediction=y[0], depth=depth)\n    if max_depth is not None and depth >= max_depth:\n        return DecisionNode(prediction=np.argmax(np.bincount(y)), depth=depth)\n    (best_feature, best_threshold, best_gain) = find_best_split(X, y)\n    if best_gain == 0:\n        return DecisionNode(prediction=np.argmax(np.bincount(y)), depth=depth)\n    left_mask = X[:, best_feature] <= best_threshold\n    (X_left, y_left) = (X[left_mask], y[left_mask])\n    (X_right, y_right) = (X[~left_mask], y[~left_mask])\n    if len(y_left) == 0 or len(y_right) == 0:\n        return DecisionNode(prediction=np.argmax(np.bincount(y)), depth=depth)\n    left = build_tree(X_left, y_left, depth + 1, max_depth)\n    right = build_tree(X_right, y_right, depth + 1, max_depth)\n    return DecisionNode(feature=best_feature, threshold=best_threshold, left=left, right=right, depth=depth)\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: Optional[int]=None) -> List[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    root = build_tree(X_train, y_train, max_depth=max_depth)\n    predictions = [root.predict(x) for x in X_test]\n    return predictions"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y)\n    (n_samples, n_features) = X.shape\n    n_total = n_samples\n    class_counts = np.bincount(y)\n    total = len(y)\n    prob_class = class_counts / total\n    G_whole_dataset = 1 - np.sum(prob_class ** 2)\n    best_gini = G_whole_dataset\n    best_feature_index = -1\n    best_threshold_value = None\n    for feature_index in range(n_features):\n        x = X[:, feature_index]\n        unique_thresholds = np.sort(np.unique(x))\n        for threshold in unique_thresholds:\n            mask_left = x <= threshold\n            mask_right = x > threshold\n            n_left = np.sum(mask_left)\n            n_right = np.sum(mask_right)\n            if n_left == 0 or n_right == 0:\n                continue\n            y_left = y[mask_left]\n            y_right = y[mask_right]\n            class_counts_left = np.bincount(y_left)\n            prob_left = class_counts_left / n_left\n            g_left = 1 - np.sum(prob_left ** 2)\n            class_counts_right = np.bincount(y_right)\n            prob_right = class_counts_right / n_right\n            g_right = 1 - np.sum(prob_right ** 2)\n            g_split = n_left / n_total * g_left + n_right / n_total * g_right\n            if abs(g_split - best_gini) < 1e-12 and feature_index == best_feature_index and (threshold < best_threshold_value):\n                continue\n            if g_split < best_gini - 1e-12:\n                best_gini = g_split\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n            elif abs(g_split - best_gini) < 1e-12:\n                if feature_index < best_feature_index:\n                    best_gini = g_split\n                    best_feature_index = feature_index\n                    best_threshold_value = threshold\n                elif feature_index == best_feature_index and threshold < best_threshold_value:\n                    best_threshold_value = threshold\n    best_gini_rounded = round(best_gini, 4)\n    return (best_feature_index, best_threshold_value, best_gini_rounded)\nX = [[1, 2], [2, 3], [3, 4], [4, 5]]\ny = [0, 0, 1, 1]"}
{"task_id": 190, "completion_id": 1, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"\n    Find the best binary split to minimize the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple (best_feature_index, best_threshold_value, best_gini) where\n        best_gini is rounded to 4 decimal places. If no valid split exists,\n        returns (-1, None, round(G_whole_dataset, 4)).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=int)\n    n_samples = X.shape[0]\n    n_features = X.shape[1]\n    if n_samples == 0:\n        return (-1, None, 0.0)\n    class_counts = np.bincount(y)\n    prob = class_counts / n_samples\n    gini_whole = 1 - np.sum(prob ** 2)\n    gini_whole_rounded = round(gini_whole, 4)\n    if len(np.unique(y)) == 1:\n        return (-1, None, gini_whole_rounded)\n    best_gini = gini_whole\n    best_threshold = None\n    best_feature = -1\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_thresholds = np.unique(feature_values)\n        for threshold in unique_thresholds:\n            left_mask = feature_values <= threshold\n            right_mask = feature_values > threshold\n            y_left = y[left_mask]\n            y_right = y[right_mask]\n            if len(y_left) == 0 or len(y_right) == 0:\n                continue\n            left_class_counts = np.bincount(y_left, minlength=np.max(y) + 1)\n            left_prob = left_class_counts / len(y_left)\n            gini_left = 1 - np.sum(left_prob ** 2)\n            right_class_counts = np.bincount(y_right, minlength=np.max(y) + 1)\n            right_prob = right_class_counts / len(y_right)\n            gini_right = 1 - np.sum(right_prob ** 2)\n            gini_split = len(y_left) / n_samples * gini_left + len(y_right) / n_samples * gini_right\n            if abs(gini_split - best_gini) > 1e-12:\n                best_gini = gini_split\n                best_threshold = threshold\n                best_feature = feature_index\n            elif abs(gini_split - best_gini) <= 1e-12:\n                if feature_index < best_feature:\n                    best_gini = gini_split\n                    best_threshold = threshold\n                    best_feature = feature_index\n                elif feature_index == best_feature:\n                    if threshold < best_threshold:\n                        best_threshold = threshold\n    if best_gini == gini_whole:\n        return (-1, None, gini_whole_rounded)\n    best_gini_rounded = round(best_gini, 4)\n    return (best_feature, best_threshold, best_gini_rounded)\nX = [[1.0, 2.0], [2.0, 2.0], [3.0, 1.0], [2.0, 3.0]]\ny = [0, 1, 1, 0]"}
{"task_id": 190, "completion_id": 2, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"\n    Find the best feature index and threshold that minimize the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows of X.\n\n    Returns\n    -------\n    tuple\n        A tuple (best_feature_index, best_threshold_value, best_gini) where\n        `best_gini` is rounded to 4 decimal places. If no valid split exists,\n        return (-1, None, round(G_whole_dataset, 4)).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    n_total = float(n_samples)\n    class_counts = np.bincount(y)\n    if len(class_counts) <= 1:\n        total_proba = class_counts / n_total\n        G_whole_dataset = 1 - np.sum(total_proba ** 2)\n        return (-1, None, round(G_whole_dataset, 4))\n    best_gini = np.inf\n    best_feature_index = -1\n    best_threshold_value = None\n    for j in range(n_features):\n        unique_vals = np.unique(X[:, j])\n        for v in unique_vals:\n            left_mask = X[:, j] <= v\n            right_mask = ~left_mask\n            n_left = np.sum(left_mask)\n            n_right = n_total - n_left\n            if n_left == 0 or n_right == 0:\n                continue\n            left_classes = y[left_mask]\n            left_proba = np.bincount(left_classes, minlength=len(class_counts)) / n_left\n            gini_left = 1 - np.sum(left_proba ** 2)\n            right_classes = y[right_mask]\n            right_proba = np.bincount(right_classes, minlength=len(class_counts)) / n_right\n            gini_right = 1 - np.sum(right_proba ** 2)\n            g_split = n_left / n_total * gini_left + n_right / n_total * gini_right\n            if abs(g_split - best_gini) > 1e-12 and g_split < best_gini or (abs(g_split - best_gini) < 1e-12 and j < best_feature_index) or (abs(g_split - best_gini) < 1e-12 and j == best_feature_index and (v < best_threshold_value)):\n                best_gini = g_split\n                best_feature_index = j\n                best_threshold_value = v\n    total_proba = class_counts / n_total\n    G_whole_dataset = 1 - np.sum(total_proba ** 2)\n    if best_gini == np.inf:\n        return (-1, None, round(G_whole_dataset, 4))\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))\nX = [[1.2, 0.5], [2.3, 0.4], [1.1, 0.8], [0.9, 1.0]]\ny = [0, 1, 0, 1]"}
{"task_id": 190, "completion_id": 3, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    if len(np.unique(y)) == 1:\n        gini_whole = 0.0\n        return (-1, None, round(gini_whole, 4))\n    class_counts = np.bincount(y)\n    total = len(y)\n    gini_whole = 1.0 - np.sum((class_counts / total) ** 2)\n    best_gini = gini_whole\n    best_feature_index = -1\n    best_threshold_value = None\n    for feature_idx in range(n_features):\n        unique_values = np.unique(X[:, feature_idx])\n        for threshold in unique_values:\n            left_mask = X[:, feature_idx] <= threshold\n            right_mask = X[:, feature_idx] > threshold\n            n_left = np.sum(left_mask)\n            n_right = np.sum(right_mask)\n            if n_left == 0 or n_right == 0:\n                continue\n            class_counts_left = np.bincount(y[left_mask])\n            gini_left = 1.0 - np.sum((class_counts_left / n_left) ** 2)\n            class_counts_right = np.bincount(y[right_mask])\n            gini_right = 1.0 - np.sum((class_counts_right / n_right) ** 2)\n            gini_split = n_left / total * gini_left + n_right / total * gini_right\n            if gini_split < best_gini or (abs(gini_split - best_gini) < 1e-12 and feature_idx < best_feature_index) or (abs(gini_split - best_gini) < 1e-12 and feature_idx == best_feature_index and (threshold < best_threshold_value)):\n                best_gini = gini_split\n                best_feature_index = feature_idx\n                best_threshold_value = threshold\n    if best_gini == gini_whole:\n        return (-1, None, round(gini_whole, 4))\n    else:\n        return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 190, "completion_id": 4, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    n_total = n_samples\n    (classes, counts) = np.unique(y, return_counts=True)\n    if len(classes) == 1:\n        return (-1, None, 0.0)\n    p_total = counts / n_total\n    G_whole = 1.0 - np.sum(p_total ** 2)\n    best_gini = G_whole\n    best_feature_index = -1\n    best_threshold_value = None\n    for feature_index in range(n_features):\n        feature = X[:, feature_index]\n        unique_values = np.unique(feature)\n        for threshold in unique_values:\n            left_mask = feature <= threshold\n            right_mask = feature > threshold\n            if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                continue\n            y_left = y[left_mask]\n            y_right = y[right_mask]\n            (classes_left, counts_left) = np.unique(y_left, return_counts=True)\n            p_left = counts_left / np.sum(counts_left)\n            G_left = 1.0 - np.sum(p_left ** 2)\n            (classes_right, counts_right) = np.unique(y_right, return_counts=True)\n            p_right = counts_right / np.sum(counts_right)\n            G_right = 1.0 - np.sum(p_right ** 2)\n            n_left = len(y_left)\n            n_right = len(y_right)\n            G_split = n_left / n_total * G_left + n_right / n_total * G_right\n            if abs(G_split - best_gini) >= 1e-12 and G_split < best_gini or (abs(G_split - best_gini) < 1e-12 and feature_index < best_feature_index) or (abs(G_split - best_gini) < 1e-12 and feature_index == best_feature_index and (threshold < best_threshold_value)):\n                best_gini = G_split\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n    if best_gini == G_whole:\n        return (-1, None, round(G_whole, 4))\n    else:\n        return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 190, "completion_id": 5, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples = len(y)\n    n_total = n_samples\n    (classes, counts) = np.unique(y, return_counts=True)\n    if len(classes) == 1:\n        whole_gini = 0.0\n    else:\n        whole_gini = 1.0 - np.sum((counts / n_total) ** 2)\n    best_gini = np.inf\n    best_threshold = None\n    best_feature_index = -1\n    for feature_idx in range(X.shape[1]):\n        x = X[:, feature_idx]\n        unique_values = np.unique(x)\n        unique_values.sort()\n        for v in unique_values:\n            left_mask = x <= v\n            right_mask = x > v\n            n_left = np.sum(left_mask)\n            n_right = np.sum(right_mask)\n            if n_left == 0 or n_right == 0:\n                continue\n            y_left = y[left_mask]\n            y_right = y[right_mask]\n            (counts_left, _) = np.histogram(y_left, bins=np.arange(classes.min(), classes.max() + 2))\n            (counts_right, _) = np.histogram(y_right, bins=np.arange(classes.min(), classes.max() + 2))\n            g_left = 1.0 - np.sum((counts_left / n_left) ** 2)\n            g_right = 1.0 - np.sum((counts_right / n_right) ** 2)\n            g_split = n_left / n_total * g_left + n_right / n_total * g_right\n            if abs(g_split - best_gini) < 1e-12:\n                if feature_idx == best_feature_index and v < best_threshold:\n                    best_threshold = v\n                    best_gini = g_split\n            elif g_split < best_gini:\n                best_gini = g_split\n                best_threshold = v\n                best_feature_index = feature_idx\n    if np.isinf(best_gini):\n        return (-1, None, round(whole_gini, 4))\n    else:\n        return (best_feature_index, best_threshold, round(best_gini, 4))"}
{"task_id": 190, "completion_id": 6, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    class_counts = np.unique(y, return_counts=True)[1]\n    total = len(y)\n    p = class_counts / total\n    G_whole_dataset = 1 - np.sum(p ** 2)\n    if len(class_counts) <= 1:\n        return (-1, None, round(G_whole_dataset, 4))\n    best_gini = float('inf')\n    best_feature_index = -1\n    best_threshold_value = None\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        for threshold in unique_values:\n            left_mask = X[:, feature_index] <= threshold\n            right_mask = X[:, feature_index] > threshold\n            left_y = y[left_mask]\n            right_y = y[right_mask]\n            if len(left_y) == 0 or len(right_y) == 0:\n                continue\n            left_counts = np.unique(left_y, return_counts=True)[1]\n            right_counts = np.unique(right_y, return_counts=True)[1]\n            p_left = left_counts / len(left_y)\n            p_right = right_counts / len(right_y)\n            gini_left = 1 - np.sum(p_left ** 2)\n            gini_right = 1 - np.sum(p_right ** 2)\n            gini_split = len(left_y) / total * gini_left + len(right_y) / total * gini_right\n            if abs(gini_split - best_gini) > 1e-12:\n                if gini_split < best_gini:\n                    best_gini = gini_split\n                    best_feature_index = feature_index\n                    best_threshold_value = threshold\n            elif feature_index < best_feature_index:\n                best_gini = gini_split\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n            elif feature_index == best_feature_index:\n                if threshold < best_threshold_value:\n                    best_gini = gini_split\n                    best_threshold_value = threshold\n    if best_gini == float('inf'):\n        return (-1, None, round(G_whole_dataset, 4))\n    else:\n        best_gini_rounded = round(best_gini, 4)\n        return (best_feature_index, best_threshold_value, best_gini_rounded)"}
{"task_id": 190, "completion_id": 7, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    n_total = n_samples\n    (unique_labels, counts) = np.unique(y, return_counts=True)\n    p = counts / n_total\n    G_whole_dataset = 1 - np.sum(p ** 2)\n    if len(unique_labels) <= 1 or n_samples < 2:\n        return (-1, None, round(G_whole_dataset, 4))\n    best_gini = G_whole_dataset\n    best_feature_index = -1\n    best_threshold_value = None\n    for feature_idx in range(n_features):\n        feature_values = np.unique(X[:, feature_idx])\n        for threshold in feature_values:\n            left_indices = X[:, feature_idx] <= threshold\n            right_indices = X[:, feature_idx] > threshold\n            n_left = np.sum(left_indices)\n            n_right = np.sum(right_indices)\n            if n_left == 0 or n_right == 0:\n                continue\n            y_left = y[left_indices]\n            y_right = y[right_indices]\n            (unique_labels_left, counts_left) = np.unique(y_left, return_counts=True)\n            p_left = counts_left / n_left\n            gini_left = 1 - np.sum(p_left ** 2)\n            (unique_labels_right, counts_right) = np.unique(y_right, return_counts=True)\n            p_right = counts_right / n_right\n            gini_right = 1 - np.sum(p_right ** 2)\n            G_split = n_left / n_total * gini_left + n_right / n_total * gini_right\n            if abs(G_split - best_gini) >= 1e-12 and G_split < best_gini or (abs(G_split - best_gini) < 1e-12 and (feature_idx < best_feature_index or (feature_idx == best_feature_index and threshold < best_threshold_value))):\n                best_gini = G_split\n                best_feature_index = feature_idx\n                best_threshold_value = threshold\n    if best_gini == G_whole_dataset and best_feature_index == -1:\n        return (-1, None, round(G_whole_dataset, 4))\n    else:\n        return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 190, "completion_id": 8, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"\n    Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    if n_samples == 0:\n        return (-1, None, 0.0)\n    (unique_classes, counts) = np.unique(y, return_counts=True)\n    total = n_samples\n    prob = counts / total\n    gini_whole = 1 - np.sum(prob ** 2)\n    best_gini = gini_whole\n    best_feature = -1\n    best_threshold = None\n    total_samples = n_samples\n    for feature_idx in range(n_features):\n        feature = X[:, feature_idx]\n        unique_vals = np.unique(feature)\n        if len(unique_vals) <= 1:\n            continue\n        for threshold in unique_vals:\n            left_mask = feature <= threshold\n            right_mask = feature > threshold\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            y_left = y[left_mask]\n            y_right = y[right_mask]\n\n            def gini_impurity(labels):\n                if len(labels) == 0:\n                    return 0.0\n                class_counts = np.bincount(labels)\n                prob = class_counts / len(labels)\n                return 1 - np.sum(prob ** 2)\n            gini_left = gini_impurity(y_left)\n            gini_right = gini_impurity(y_right)\n            n_left = len(y_left)\n            n_right = len(y_right)\n            weighted_gini = n_left / total_samples * gini_left + n_right / total_samples * gini_right\n            if abs(weighted_gini - best_gini) >= 1e-12 and weighted_gini < best_gini or (abs(weighted_gini - best_gini) < 1e-12 and feature_idx < best_feature) or (abs(weighted_gini - best_gini) < 1e-12 and feature_idx == best_feature and (threshold < best_threshold)):\n                best_gini = weighted_gini\n                best_feature = feature_idx\n                best_threshold = threshold\n    if best_feature == -1:\n        return (-1, None, round(gini_whole, 4))\n    else:\n        return (best_feature, best_threshold, round(best_gini, 4))\nX = [[2.0, 0.5], [3.0, 1.0], [4.0, 0.5], [5.0, 1.0]]\ny = [0, 0, 1, 1]"}
{"task_id": 190, "completion_id": 9, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"\n    Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    n_total = n_samples\n    (_, class_counts) = np.unique(y, return_counts=True)\n    p = class_counts / n_total\n    gini_whole = 1.0 - np.sum(p ** 2)\n    best_gini = np.inf\n    best_feature_index = -1\n    best_threshold_value = None\n    for feature_idx in range(n_features):\n        feature = X[:, feature_idx]\n        if np.all(feature[0] == feature):\n            continue\n        sorted_indices = np.argsort(feature)\n        sorted_feature = feature[sorted_indices]\n        sorted_labels = y[sorted_indices]\n        seen_values = set()\n        prev_label = None\n        for i in range(1, n_samples):\n            if sorted_labels[i - 1] != sorted_labels[i]:\n                threshold = (sorted_feature[i - 1] + sorted_feature[i]) / 2\n                if threshold in seen_values:\n                    continue\n                seen_values.add(threshold)\n                left_indices = sorted_indices[:i]\n                right_indices = sorted_indices[i:]\n                left_labels = sorted_labels[:i]\n                right_labels = sorted_labels[i:]\n                if len(left_indices) == 0 or len(right_indices) == 0:\n                    continue\n                for (labels, n) in ((left_labels, len(left_indices)), (right_labels, len(right_indices))):\n                    (_, counts) = np.unique(labels, return_counts=True)\n                    p = counts / n\n                    gini = 1.0 - np.sum(p ** 2)\n                    weighted_gini = n / n_total * gini\n                g_split = len(left_indices) / n_total * gini_left + len(right_indices) / n_total * gini_right\n                if g_split < best_gini - 1e-12:\n                    best_gini = g_split\n                    best_feature_index = feature_idx\n                    best_threshold_value = threshold\n                elif abs(g_split - best_gini) < 1e-12:\n                    if feature_idx < best_feature_index:\n                        best_gini = g_split\n                        best_feature_index = feature_idx\n                        best_threshold_value = threshold\n                    elif feature_idx == best_feature_index and threshold < best_threshold_value:\n                        best_threshold_value = threshold\n    if best_gini == np.inf:\n        return (-1, None, round(gini_whole, 4))\n    else:\n        return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\nfrom numbers import Number\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    supported_metrics = ['euclidean', 'manhattan', 'chebyshev', 'cosine']\n\n    def _validate_vecs(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return False\n        try:\n            x = np.array(x, dtype=np.float64)\n            y = np.array(y, dtype=np.float64)\n        except (ValueError, TypeError):\n            return False\n        if x.ndim != 1 or y.ndim != 1:\n            return False\n        if len(x) == 0 or len(y) == 0 or len(x) != len(y):\n            return False\n        if name == 'cosine' and (np.linalg.norm(x) == 0 or np.linalg.norm(y) == 0):\n            return False\n        return (x, y)\n\n    def d(x, y):\n        if name not in supported_metrics:\n            return -1\n        valid = _validate_vecs(x, y)\n        if valid is False:\n            return -1\n        (x_vec, y_vec) = valid\n        if name == 'euclidean':\n            result = np.sqrt(np.sum((x_vec - y_vec) ** 2))\n        elif name == 'manhattan':\n            result = np.sum(np.abs(x_vec - y_vec))\n        elif name == 'chebyshev':\n            result = np.max(np.abs(x_vec - y_vec))\n        elif name == 'cosine':\n            dot_product = np.dot(x_vec, y_vec)\n            norm_product = np.linalg.norm(x_vec) * np.linalg.norm(y_vec)\n            result = 1 - dot_product / norm_product\n        return round(result, 4)\n    return d"}
{"task_id": 191, "completion_id": 1, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    if name not in ['euclidean', 'manhattan', 'chebyshev', 'cosine']:\n        return lambda x, y: -1\n\n    def validate(v):\n        if not isinstance(v, (list, tuple, np.ndarray)):\n            return False\n        try:\n            arr = np.array(v, dtype=float)\n            if arr.ndim != 1 or len(arr) == 0:\n                return False\n            return arr\n        except:\n            return False\n\n    def compute(x, y):\n        arr_x = validate(x)\n        arr_y = validate(y)\n        if not arr_x or not arr_y or len(arr_x) != len(arr_y):\n            return -1\n        if name == 'euclidean':\n            dist = np.sqrt(np.sum((arr_x - arr_y) ** 2))\n        elif name == 'manhattan':\n            dist = np.sum(np.abs(arr_x - arr_y))\n        elif name == 'chebyshev':\n            dist = np.max(np.abs(arr_x - arr_y))\n        elif name == 'cosine':\n            norm_x = np.linalg.norm(arr_x)\n            norm_y = np.linalg.norm(arr_y)\n            if norm_x == 0 or norm_y == 0:\n                return -1\n            cosine_sim = np.dot(arr_x, arr_y) / (norm_x * norm_y)\n            dist = 1 - cosine_sim\n        return round(dist, 4)\n    return compute"}
{"task_id": 191, "completion_id": 2, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def validate(v):\n        \"\"\"Validates the vector input.\"\"\"\n        try:\n            if isinstance(v, (list, tuple)):\n                if not v:\n                    return False\n                v = np.array(v, dtype=float)\n            elif isinstance(v, np.ndarray):\n                if v.ndim != 1 or v.size == 0:\n                    return False\n                v = v.astype(float)\n            else:\n                return False\n            return v\n        except (TypeError, ValueError):\n            return False\n\n    def euclidean(x, y):\n        return np.sqrt(np.sum((x - y) ** 2))\n\n    def manhattan(x, y):\n        return np.sum(np.abs(x - y))\n\n    def chebyshev(x, y):\n        return np.max(np.abs(x - y))\n\n    def cosine(x, y):\n        dot_product = np.dot(x, y)\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return 1 - dot_product / (norm_x * norm_y)\n    supported_metrics = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n    if name not in supported_metrics:\n        return lambda x, y: -1\n\n    def distance(x, y):\n        x_val = validate(x)\n        y_val = validate(y)\n        if x_val is False or y_val is False:\n            return -1\n        if x_val.shape != y_val.shape:\n            return -1\n        if name == 'cosine':\n            norm_x = np.linalg.norm(x_val)\n            norm_y = np.linalg.norm(y_val)\n            if norm_x == 0 or norm_y == 0:\n                return -1\n        try:\n            result = supported_metrics[name](x_val, y_val)\n            return round(float(result), 4)\n        except:\n            return -1\n    return distance"}
{"task_id": 191, "completion_id": 3, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def validate_vectors(x, y):\n        \"\"\"Helper function to validate the input vectors.\"\"\"\n        try:\n            x = np.array(x, dtype=float).ravel()\n            y = np.array(y, dtype=float).ravel()\n        except (TypeError, ValueError):\n            return (None, None, -1)\n        if len(x.shape) != 1 or len(y.shape) != 1:\n            return (None, None, -1)\n        if len(x) == 0 or len(y) == 0:\n            return (None, None, -1)\n        if len(x) != len(y):\n            return (None, None, -1)\n        if name == 'cosine':\n            norm_x = np.linalg.norm(x)\n            norm_y = np.linalg.norm(y)\n            if norm_x == 0 or norm_y == 0:\n                return (None, None, -1)\n        return (x, y, 0)\n\n    def euclidean(x, y):\n        (x, y, valid) = validate_vectors(x, y)\n        if valid != 0:\n            return -1\n        return round(np.sqrt(np.sum((x - y) ** 2)), 4)\n\n    def manhattan(x, y):\n        (x, y, valid) = validate_vectors(x, y)\n        if valid != 0:\n            return -1\n        return round(np.sum(np.abs(x - y)), 4)\n\n    def chebyshev(x, y):\n        (x, y, valid) = validate_vectors(x, y)\n        if valid != 0:\n            return -1\n        return round(np.max(np.abs(x - y)), 4)\n\n    def cosine(x, y):\n        (x, y, valid) = validate_vectors(x, y)\n        if valid != 0:\n            return -1\n        dot_product = np.dot(x, y)\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        return round(1 - dot_product / (norm_x * norm_y), 4)\n    metrics = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n    if name not in metrics:\n        return lambda x, y: -1\n    return metrics[name]"}
{"task_id": 191, "completion_id": 4, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    supported_metrics = {'euclidean', 'manhattan', 'chebyshev', 'cosine'}\n    name = name.lower()\n\n    def is_valid_input(vec):\n        if isinstance(vec, (list, tuple, np.ndarray)):\n            try:\n                if isinstance(vec, np.ndarray) and vec.ndim != 1:\n                    return False\n                if len(vec) == 0:\n                    return False\n                return True\n            except TypeError:\n                return False\n        return False\n\n    def try_convert_to_float(vec):\n        try:\n            if isinstance(vec, (list, tuple)):\n                return np.array(vec, dtype=float)\n            elif isinstance(vec, np.ndarray):\n                return vec.astype(float)\n            else:\n                return np.array(list(vec), dtype=float)\n        except (TypeError, ValueError):\n            return None\n\n    def distance(x, y):\n        if not is_valid_input(x) or not is_valid_input(y):\n            return -1\n        x_np = try_convert_to_float(x)\n        y_np = try_convert_to_float(y)\n        if x_np is None or y_np is None:\n            return -1\n        if x_np.shape != y_np.shape:\n            return -1\n        if name not in supported_metrics:\n            return -1\n        if name == 'euclidean':\n            result = np.sqrt(np.sum((x_np - y_np) ** 2))\n        elif name == 'manhattan':\n            result = np.sum(np.abs(x_np - y_np))\n        elif name == 'chebyshev':\n            result = np.max(np.abs(x_np - y_np))\n        elif name == 'cosine':\n            dot_prod = np.dot(x_np, y_np)\n            norm_x = np.linalg.norm(x_np)\n            norm_y = np.linalg.norm(y_np)\n            if norm_x == 0 or norm_y == 0:\n                return -1\n            result = 1 - dot_prod / (norm_x * norm_y)\n        return round(float(result), 4)\n    return distance"}
{"task_id": 191, "completion_id": 5, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    supported_metrics = {'euclidean': lambda x, y: np.sqrt(np.sum((x - y) ** 2)), 'manhattan': lambda x, y: np.sum(np.abs(x - y)), 'chebyshev': lambda x, y: np.max(np.abs(x - y)), 'cosine': lambda x, y: 1 - np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y))}\n    if name not in supported_metrics:\n        return lambda x, y: -1\n\n    def computed_distance(x, y):\n        \"\"\"\n        The distance function with input validation.\n        Checks for correct format, dimension, length, and non-zero norms for cosine.\n        Returns computed distance or -1 on failure.\n        \"\"\"\n        try:\n            x = np.array(x).astype(np.float64)\n            y = np.array(y).astype(np.float64)\n            if not (isinstance(x, np.ndarray) and isinstance(y, np.ndarray)):\n                return -1\n            if x.ndim != 1 or y.ndim != 1 or len(x) == 0 or (len(y) == 0) or (len(x) != len(y)):\n                return -1\n            if name == 'cosine':\n                norm_x = np.linalg.norm(x)\n                norm_y = np.linalg.norm(y)\n                if np.isclose(norm_x, 0) or np.isclose(norm_y, 0):\n                    return -1\n            distance = supported_metrics[name](x, y)\n            return round(float(distance), 4)\n        except:\n            return -1\n    return computed_distance"}
{"task_id": 191, "completion_id": 6, "solution": "import numpy as np\nfrom typing import Iterable, Union, List, Tuple\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable `d` that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors. All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length iterable\n      objects.\n    * Both vectors must be convertible to float.\n    * Metric `name` must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, `d` returns -1.\n\n    Args:\n        name (str): Desired distance metric name.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: Distance function with\n        validation.\n    \"\"\"\n    VALID_METRICS = {'euclidean': lambda x, y: np.sqrt(np.sum((x - y) ** 2)), 'manhattan': lambda x, y: np.sum(np.abs(x - y)), 'chebyshev': lambda x, y: np.max(np.abs(x - y)), 'cosine': lambda x, y: 1.0 - np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y))}\n    if name not in VALID_METRICS:\n        return lambda *_, **__: -1\n\n    def distance_callable(v1: Union[List[float], Tuple[float], np.ndarray], v2: Union[List[float], Tuple[float], np.ndarray]) -> float:\n        try:\n            x = np.array(v1, dtype=float)\n            y = np.array(v2, dtype=float)\n        except (ValueError, TypeError):\n            return -1\n        if not (isinstance(v1, (list, tuple, np.ndarray)) and isinstance(v2, (list, tuple, np.ndarray))):\n            return -1\n        if x.ndim != 1 or y.ndim != 1:\n            return -1\n        if len(x) == 0 or len(y) == 0:\n            return -1\n        if len(x) != len(y):\n            return -1\n        if name == 'cosine':\n            norm_x = np.linalg.norm(x)\n            norm_y = np.linalg.norm(y)\n            if norm_x == 0 or norm_y == 0:\n                return -1\n        try:\n            result = VALID_METRICS[name](x, y)\n            return round(float(result), 4)\n        except Exception:\n            return -1\n    return distance_callable"}
{"task_id": 191, "completion_id": 7, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    supported_metrics = ['euclidean', 'manhattan', 'chebyshev', 'cosine']\n\n    def _validate(x, y):\n        if name not in supported_metrics:\n            return (False, -1)\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except:\n            return (False, -1)\n        if x.ndim != 1 or y.ndim != 1:\n            return (False, -1)\n        if x.size == 0 or y.size == 0 or x.shape[0] != y.shape[0]:\n            return (False, -1)\n        if name == 'cosine':\n            norm_x = np.linalg.norm(x)\n            norm_y = np.linalg.norm(y)\n            if norm_x == 0 or norm_y == 0:\n                return (False, -1)\n        return (True, (x, y))\n\n    def distance(x, y):\n        (valid, result) = _validate(x, y)\n        if not valid:\n            return result\n        (x_vec, y_vec) = result\n        if name == 'euclidean':\n            dis = np.sqrt(np.sum((x_vec - y_vec) ** 2))\n        elif name == 'manhattan':\n            dis = np.sum(np.abs(x_vec - y_vec))\n        elif name == 'chebyshev':\n            dis = np.max(np.abs(x_vec - y_vec))\n        elif name == 'cosine':\n            dot_product = np.dot(x_vec, y_vec)\n            norm_product = np.linalg.norm(x_vec) * np.linalg.norm(y_vec)\n            dis = 1 - dot_product / norm_product\n        else:\n            return -1\n        return round(dis, 4)\n    return distance"}
{"task_id": 191, "completion_id": 8, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def validate(vec1, vec2):\n        supported_types = (list, tuple, np.ndarray)\n        if not (isinstance(vec1, supported_types) and isinstance(vec2, supported_types)):\n            return False\n        try:\n            vec1 = np.array(vec1, dtype=float)\n            vec2 = np.array(vec2, dtype=float)\n        except (ValueError, TypeError):\n            return False\n        if vec1.ndim != 1 or vec2.ndim != 1:\n            return False\n        if len(vec1) == 0 or len(vec2) == 0:\n            return False\n        if len(vec1) != len(vec2):\n            return False\n        if name == 'cosine' and (np.linalg.norm(vec1) == 0 or np.linalg.norm(vec2) == 0):\n            return False\n        return (vec1, vec2)\n\n    def euclidean(x, y):\n        return round(np.sqrt(np.sum((x - y) ** 2)), 4)\n\n    def manhattan(x, y):\n        return round(np.sum(np.abs(x - y)), 4)\n\n    def chebyshev(x, y):\n        return round(np.max(np.abs(x - y)), 4)\n\n    def cosine(x, y):\n        dot_product = np.dot(x, y)\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        similarity = dot_product / (norm_x * norm_y)\n        distance = 1 - similarity\n        return round(distance, 4)\n    supported_metrics = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n    if name not in supported_metrics:\n        return lambda x, y: -1\n\n    def d(x, y):\n        validated = validate(x, y)\n        if not isinstance(validated, tuple):\n            return -1\n        (x_valid, y_valid) = validated\n        return supported_metrics[name](x_valid, y_valid)\n    return d"}
{"task_id": 191, "completion_id": 9, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    metrics = {'euclidean': lambda x, y: np.sqrt(np.sum((x - y) ** 2)), 'manhattan': lambda x, y: np.sum(np.abs(x - y)), 'chebyshev': lambda x, y: np.max(np.abs(x - y)), 'cosine': lambda x, y: 1 - np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y))}\n\n    def validate_vectors(x, y):\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except (ValueError, TypeError):\n            return (False, x, y)\n        if x.ndim != 1 or y.ndim != 1:\n            return (False, x, y)\n        if len(x) == 0 or len(y) == 0:\n            return (False, x, y)\n        if len(x) != len(y):\n            return (False, x, y)\n        if name == 'cosine':\n            if np.isclose(np.linalg.norm(x), 0) or np.isclose(np.linalg.norm(y), 0):\n                return (False, x, y)\n        return (True, x, y)\n    if name not in metrics:\n        return lambda x, y: -1\n\n    def distance(x, y):\n        (is_valid, x_vec, y_vec) = validate_vectors(x, y)\n        if not is_valid:\n            return -1\n        result = metrics[name](x_vec, y_vec)\n        return round(result, 4)\n    return distance"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = []\n    if md_action:\n        action_space = env.action_space.spaces\n        action_dim = len(action_space)\n        for space in action_space:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n                action_ids.append(list(range(space.n)))\n            else:\n                n_actions_per_dim.append(np.inf)\n                action_ids.append([])\n        if np.inf in n_actions_per_dim:\n            action_ids = None\n        else:\n            action_ids = list(product(*action_ids))\n    else:\n        action_dim = 1\n        if hasattr(env.action_space, 'n'):\n            n_actions_per_dim.append(env.action_space.n)\n            action_ids = list(range(env.action_space.n))\n        else:\n            n_actions_per_dim.append(np.inf)\n            action_ids = None\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 1, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = []\n    if md_action:\n        for sub_space in env.action_space.spaces:\n            if hasattr(sub_space, 'n'):\n                n_actions_per_dim.append(sub_space.n)\n            elif hasattr(sub_space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n            else:\n                raise ValueError('Unknown type of sub-space in the multi-dimensional action space')\n    elif cont_action:\n        if hasattr(env.action_space, 'shape'):\n            n_actions_per_dim.append(np.inf)\n        else:\n            raise ValueError(\"Continuous action space must have a 'shape' attribute\")\n    elif hasattr(env.action_space, 'n'):\n        n_actions_per_dim.append(env.action_space.n)\n    else:\n        raise ValueError(\"Discrete action space must have an 'n' attribute\")\n    action_dim = len(n_actions_per_dim)\n    if all((isinstance(n, int) for n in n_actions_per_dim)):\n        ranges = [range(n) for n in n_actions_per_dim]\n        action_ids = list(product(*ranges))\n    else:\n        action_ids = None\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 2, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    if md_action:\n        spaces = env.action_space.spaces\n        for sub_space in spaces:\n            if hasattr(sub_space, 'n'):\n                n_actions_per_dim.append(sub_space.n)\n            elif hasattr(sub_space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n    elif cont_action:\n        n_actions_per_dim.append(np.inf)\n    else:\n        n_actions_per_dim.append(env.action_space.n)\n    if np.isinf(np.array(n_actions_per_dim)).any():\n        action_ids = None\n    else:\n        ranges = [range(n) for n in n_actions_per_dim]\n        action_ids = list(product(*ranges))\n    action_dim = len(n_actions_per_dim)\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 3, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute.\n        md_action: True if the action space is multi-dimensional.\n        cont_action: True if the action space is continuous.\n\n    Returns:\n        A tuple (n_actions_per_dim, action_ids, action_dim) where\n            - n_actions_per_dim: list with the number of actions in every dimension\n                                  (np.inf for continuous ones),\n            - action_ids: list of all discrete actions (cartesian product) or None if\n                           any dimension is continuous,\n            - action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = []\n    if hasattr(env.action_space, 'spaces') and md_action:\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.extend([np.inf] * space.shape[0])\n        action_dim = len(n_actions_per_dim)\n        if all((isinstance(n, int) for n in n_actions_per_dim)):\n            action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n        else:\n            action_ids = None\n    elif hasattr(env.action_space, 'n') and (not md_action) and (not cont_action):\n        n_actions_per_dim = [env.action_space.n]\n        action_ids = list(range(env.action_space.n))\n        action_dim = 1\n    elif hasattr(env.action_space, 'shape') and (not md_action):\n        shape = env.action_space.shape[0]\n        n_actions_per_dim = [np.inf] * shape\n        action_ids = None\n        action_dim = shape\n    else:\n        raise ValueError('Unsupported or unrecognized action space format.')\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 4, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n    \n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n    \n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    if md_action:\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n            else:\n                raise AttributeError(\"Action space sub-space must have either 'n' or 'shape' attribute\")\n        action_dim = len(n_actions_per_dim)\n        has_continuous = any((isinstance(n, float) and np.isinf(n) for n in n_actions_per_dim))\n        action_ids = None if has_continuous else list(product(*[range(n) for n in n_actions_per_dim]))\n    elif cont_action:\n        n_actions_per_dim.append(np.inf)\n        action_dim = 1\n        action_ids = None\n    else:\n        n_actions_per_dim.append(env.action_space.n)\n        action_dim = 1\n        action_ids = list(range(env.action_space.n))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 5, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    if md_action:\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n            else:\n                raise ValueError('Unrecognized action sub-space type.')\n        action_dim = len(env.action_space.spaces)\n    elif cont_action:\n        n_actions_per_dim.append(np.inf)\n        action_dim = 1\n    elif hasattr(env.action_space, 'n'):\n        n_actions_per_dim.append(env.action_space.n)\n        action_dim = 1\n    else:\n        raise ValueError('Unrecognized action space type.')\n    if np.isinf(np.array(n_actions_per_dim)).any():\n        action_ids = None\n    else:\n        ranges = [range(n) for n in n_actions_per_dim]\n        action_ids = list(product(*ranges))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 6, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_dim = 0\n    if md_action:\n        action_dim = len(env.action_space.spaces)\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n            else:\n                raise ValueError(\"Action space must have either 'n' (discrete) or 'shape' (continuous).\")\n    else:\n        action_dim = 1\n        if cont_action:\n            n_actions_per_dim.append(np.inf)\n        else:\n            n_actions_per_dim.append(env.action_space.n)\n    if all((isinstance(n, int) and n < np.inf for n in n_actions_per_dim)):\n        ranges = [range(n) for n in n_actions_per_dim]\n        action_ids = list(product(*ranges))\n    else:\n        action_ids = None\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 7, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    if md_action:\n        for sub_space in env.action_space.spaces:\n            if hasattr(sub_space, 'n'):\n                n_actions_per_dim.append(sub_space.n)\n            elif hasattr(sub_space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n            else:\n                raise ValueError('Unknown type of sub-space.')\n        action_dim = len(n_actions_per_dim)\n    elif cont_action:\n        n_actions_per_dim.append(np.inf)\n        action_dim = 1\n    else:\n        n_actions_per_dim.append(env.action_space.n)\n        action_dim = 1\n    if np.inf in n_actions_per_dim:\n        action_ids = None\n    else:\n        ranges = [range(n) for n in n_actions_per_dim]\n        action_ids = list(product(*ranges))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 8, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                          any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    if md_action:\n        action_dim = len(env.action_space.spaces)\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n            else:\n                raise ValueError('Unsupported action space type.')\n    else:\n        action_dim = 1\n        if not cont_action and hasattr(env.action_space, 'n'):\n            n_actions_per_dim.append(env.action_space.n)\n        elif cont_action and hasattr(env.action_space, 'shape'):\n            n_actions_per_dim.append(np.inf)\n        else:\n            raise ValueError('Unsupported action space type.')\n    if np.inf in n_actions_per_dim:\n        action_ids = None\n    else:\n        ranges = [range(n) for n in n_actions_per_dim]\n        action_ids = list(product(*ranges))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 9, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    if md_action:\n        for sub_space in env.action_space.spaces:\n            if hasattr(sub_space, 'n'):\n                n_actions_per_dim.append(sub_space.n)\n            elif hasattr(sub_space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n    elif cont_action:\n        n_actions_per_dim.append(np.inf)\n    else:\n        n_actions_per_dim.append(env.action_space.n)\n    action_dim = len(n_actions_per_dim)\n    is_continuous = np.inf in n_actions_per_dim\n    if is_continuous:\n        action_ids = None\n    else:\n        action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for d in range(len(phi)):\n        document_phi = phi[d]\n        document_words = corpus[d]\n        for (n, word_idx) in enumerate(document_words):\n            if 0 <= word_idx < V:\n                beta[word_idx, :] += document_phi[n, :]\n    epsilon = 1e-10\n    beta += epsilon\n    beta = beta / beta.sum(axis=0)\n    beta_rounded = np.round(beta, 4)\n    beta_list = beta_rounded.tolist()\n    return beta_list\nphi = [np.array([[0.2, 0.8], [0.4, 0.6]]), np.array([[0.6, 0.4], [0.3, 0.7]])]\ncorpus = [[0, 1], [1, 0]]\nV = 2"}
{"task_id": 198, "completion_id": 1, "solution": "import numpy as np\nimport numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    from collections import defaultdict\n    T = phi[0].shape[1]\n    beta_counts = defaultdict(lambda : np.zeros(T))\n    for d in range(len(phi)):\n        doc_phi = phi[d]\n        doc_words = corpus[d]\n        assert len(doc_phi) == len(doc_words), 'Length of phi and document tokens must match'\n        for n in range(len(doc_phi)):\n            word = doc_words[n]\n            if 0 <= word < V:\n                phi_n = doc_phi[n]\n                beta_counts[word] += phi_n\n    beta = []\n    for v in range(V):\n        row = beta_counts[v].tolist()\n        beta.append(row)\n    beta = np.array(beta)\n    for t in range(beta.shape[1]):\n        col_sum = np.sum(beta[:, t])\n        if col_sum > 0:\n            beta[:, t] = beta[:, t] / col_sum\n    beta = np.round(beta, 4).tolist()\n    return beta\nphi = [np.array([[0.6, 0.4], [0.3, 0.7]]), np.array([[0.1, 0.9], [0.5, 0.5], [0.7, 0.3]])]\ncorpus = [[1, 2], [0, 1, 1]]\nV = 3\nbeta = update_beta(phi, corpus, V)"}
{"task_id": 198, "completion_id": 2, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for doc_idx in range(len(phi)):\n        doc_phi = phi[doc_idx]\n        doc_words = corpus[doc_idx]\n        for n in range(len(doc_words)):\n            word_idx = doc_words[n]\n            phi_nt = doc_phi[n, :]\n            beta[word_idx, :] += phi_nt\n    for t in range(T):\n        column_sum = beta[:, t].sum()\n        if column_sum > 0:\n            beta[:, t] /= column_sum\n    beta_list = [[round(val, 4) for val in row] for row in beta]\n    return beta_list"}
{"task_id": 198, "completion_id": 3, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for d in range(len(corpus)):\n        phi_d = phi[d]\n        words_d = corpus[d]\n        for n in range(len(words_d)):\n            w = words_d[n]\n            phi_values = phi_d[n, :]\n            beta[w, :] += phi_values\n    for t in range(T):\n        col_sum = np.sum(beta[:, t])\n        if col_sum > 0:\n            beta[:, t] /= col_sum\n    for v in range(V):\n        if np.all(beta[v, :] == 0):\n            beta[v, :] = 0\n    beta_list = [[round(float(beta[v, t]), 4) for t in range(beta.shape[1])] for v in range(beta.shape[0])]\n    return beta_list"}
{"task_id": 198, "completion_id": 4, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document.\n    corpus : list[list[int]]\n        Tokenised corpus.\n    V : int\n        Vocabulary size.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for d in range(len(phi)):\n        doc_phi = phi[d]\n        document = corpus[d]\n        for (n, word_index) in enumerate(document):\n            if word_index < V:\n                beta[word_index, :] += doc_phi[n, :]\n    for t in range(T):\n        col_sum = beta[:, t].sum()\n        if col_sum > 0:\n            beta[:, t] /= col_sum\n    for v in range(V):\n        row_sum = beta[v, :].sum()\n        if row_sum == 0:\n            beta[v, :] = 1.0 / T\n    beta_rounded = [[round(val, 4) for val in row] for row in beta]\n    return beta_rounded"}
{"task_id": 198, "completion_id": 5, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for d in range(len(phi)):\n        document_phi = phi[d]\n        words = corpus[d]\n        for n in range(len(words)):\n            word_index = words[n]\n            phi_nt = document_phi[n, :]\n            beta[word_index, :] += phi_nt\n    for t in range(T):\n        column_sum = np.sum(beta[:, t])\n        if column_sum > 0:\n            beta[:, t] = beta[:, t] / column_sum\n    beta_list = [[round(prob, 4) for prob in beta[v, :]] for v in range(V)]\n    return beta_list"}
{"task_id": 198, "completion_id": 6, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    counts = np.zeros((V, T))\n    for doc_idx in range(len(corpus)):\n        doc_phi = phi[doc_idx]\n        words = corpus[doc_idx]\n        for n in range(len(words)):\n            word = words[n]\n            topic_weights = doc_phi[n]\n            counts[word, :] += topic_weights\n    col_sums = counts.sum(axis=0)\n    col_sums[col_sums == 0] = 1\n    beta = counts / col_sums\n    beta_list = [[round(beta[v, t], 4) for t in range(T)] for v in range(V)]\n    for t in range(T):\n        col_total = sum((beta_list[v][t] for v in range(V)))\n        if abs(col_total - 1.0) > 0.001:\n            scale = 1.0 / col_total if abs(col_total) > 1e-10 else 1.0\n            for v in range(V):\n                beta_list[v][t] = round(beta_list[v][t] * scale, 4)\n    return beta_list"}
{"task_id": 198, "completion_id": 7, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for d in range(len(phi)):\n        doc_phi = phi[d]\n        words = corpus[d]\n        for n in range(len(words)):\n            word_index = words[n]\n            topic_dist = doc_phi[n, :]\n            beta[word_index, :] += topic_dist\n    column_sums = beta.sum(axis=0)\n    column_sums[column_sums == 0] = 1.0\n    beta = beta / column_sums\n    beta = beta[:V]\n    beta_list = [[round(beta[v, t], 4) for t in range(beta.shape[1])] for v in range(beta.shape[0])]\n    return beta_list"}
{"task_id": 198, "completion_id": 8, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    if not phi:\n        return [[0.0] for _ in range(V)]\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for d in range(len(phi)):\n        doc_phi = phi[d]\n        doc_words = corpus[d]\n        for n in range(doc_phi.shape[0]):\n            word_id = doc_words[n]\n            if 0 <= word_id < V:\n                beta[word_id] += doc_phi[n]\n    column_sums = beta.sum(axis=0)\n    column_sums[column_sums == 0] = 1\n    beta = beta / column_sums\n    for v in range(V):\n        if np.sum(beta[v]) == 0:\n            beta[v] = 0\n    beta_list = [[round(float(value), 4) for value in row] for row in beta]\n    return beta_list"}
{"task_id": 198, "completion_id": 9, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T), dtype=np.float64)\n    for d in range(len(corpus)):\n        word_indices = np.array(corpus[d])\n        phi_d = phi[d]\n        for n in range(len(word_indices)):\n            v = word_indices[n]\n            beta[v, :] += phi_d[n, :]\n    for t in range(T):\n        col = beta[:, t]\n        col_sum = np.sum(col)\n        if col_sum > 0:\n            beta[:, t] = col / col_sum\n    beta_list = [[round(beta[v, t], 4) for t in range(T)] for v in range(V)]\n    return beta_list"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n = X.shape[0]\n    medoids = list(range(k))\n    improved = True\n    while improved:\n        improved = False\n        labels = []\n        total_cost = 0.0\n        clusters = [[] for _ in range(k)]\n        for i in range(n):\n            min_dist = float('inf')\n            closest_medoid_idx = 0\n            for (m_idx, medoid_idx) in enumerate(medoids):\n                dist = np.linalg.norm(X[i] - X[medoid_idx])\n                if dist < min_dist:\n                    min_dist = dist\n                    closest_medoid_idx = m_idx\n            labels.append(closest_medoid_idx)\n            clusters[closest_medoid_idx].append(i)\n            total_cost += min_dist\n        best_swap = None\n        best_cost = total_cost\n        for (m_idx, medoid_idx) in enumerate(medoids):\n            for o_idx in range(n):\n                if o_idx in medoids:\n                    continue\n                new_medoids = medoids.copy()\n                new_medoids[m_idx] = o_idx\n                new_labels = []\n                new_total_cost = 0.0\n                new_clusters = [[] for _ in range(k)]\n                for i in range(n):\n                    min_dist = float('inf')\n                    closest_medoid_idx = 0\n                    for (nm_idx, new_medoid_idx) in enumerate(new_medoids):\n                        dist = np.linalg.norm(X[i] - X[new_medoid_idx])\n                        if dist < min_dist:\n                            min_dist = dist\n                            closest_medoid_idx = nm_idx\n                    new_labels.append(closest_medoid_idx)\n                    new_clusters[closest_medoid_idx].append(i)\n                    new_total_cost += min_dist\n                if new_total_cost < best_cost - 1e-09:\n                    best_cost = new_total_cost\n                    best_swap = (m_idx, o_idx)\n        if best_swap is not None:\n            medoids[best_swap[0]] = best_swap[1]\n            improved = True\n    final_labels = []\n    for i in range(n):\n        min_dist = float('inf')\n        closest_medoid_idx = 0\n        for (m_idx, medoid_idx) in enumerate(medoids):\n            dist = np.linalg.norm(X[i] - X[medoid_idx])\n            if dist < min_dist:\n                min_dist = dist\n                closest_medoid_idx = m_idx\n        final_labels.append(closest_medoid_idx)\n    return final_labels"}
{"task_id": 202, "completion_id": 1, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"\n    Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    medoids = list(range(k))\n    current_cost = None\n    while True:\n        total_cost = 0.0\n        labels = np.zeros(n_samples, dtype=int)\n        for i in range(n_samples):\n            min_dist = float('inf')\n            cluster_label = 0\n            for (m, medoid_idx) in enumerate(medoids):\n                dist = np.linalg.norm(X[i] - X[medoid_idx])\n                if dist < min_dist:\n                    min_dist = dist\n                    cluster_label = m\n            labels[i] = cluster_label\n            total_cost += min_dist\n        best_imp = 0.0\n        best_swap = None\n        for m_idx in range(k):\n            medoid_idx = medoids[m_idx]\n            for s_idx in range(n_samples):\n                if s_idx in medoids:\n                    continue\n                old_cost = 0.0\n                new_cost = 0.0\n                for i in range(n_samples):\n                    if labels[i] == m_idx:\n                        old_cost += np.linalg.norm(X[i] - X[medoid_idx])\n                    else:\n                        min_dist = float('inf')\n                        for (m, medoid_j) in enumerate(medoids):\n                            if m != m_idx:\n                                dist = np.linalg.norm(X[i] - X[medoid_j])\n                                if dist < min_dist:\n                                    min_dist = dist\n                        old_cost += min_dist\n                    if np.linalg.norm(X[i] - X[s_idx]) < np.linalg.norm(X[i] - X[medoid_idx]):\n                        new_cost += np.linalg.norm(X[i] - X[s_idx])\n                    else:\n                        new_cost += min_dist\n                cost_diff = total_cost - new_cost\n                if cost_diff > best_imp:\n                    best_imp = cost_diff\n                    best_swap = (m_idx, s_idx)\n        if best_imp <= 0:\n            break\n        (m_idx, s_idx) = best_swap\n        medoids[m_idx] = s_idx\n    final_labels = []\n    for i in range(n_samples):\n        min_idx = -1\n        min_dist = float('inf')\n        for (m, medoid_idx) in enumerate(medoids):\n            dist = np.linalg.norm(X[i] - X[medoid_idx])\n            if dist < min_dist or (dist == min_dist and m < min_idx if min_idx != -1 else True):\n                min_dist = dist\n                min_idx = m\n        final_labels.append(min_idx)\n    return final_labels"}
{"task_id": 202, "completion_id": 2, "solution": "import numpy as np\nfrom typing import List, Tuple\nimport numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> List[int]:\n    \"\"\"\n    Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    (n_samples, _) = X.shape\n    medoids = list(range(k))\n    best_medoids = medoids[:]\n    total_cost = float('inf')\n\n    def compute_total_cost(current_medoids: List[int]) -> float:\n        \"\"\"\n        Compute the total cost of the current clustering configuration.\n        \"\"\"\n        cost = 0.0\n        for i in range(n_samples):\n            distances = [np.linalg.norm(X[i] - X[m]) for m in current_medoids]\n            closest = np.argmin(distances)\n            cost += distances[closest]\n        return cost\n    total_cost = compute_total_cost(medoids)\n    while True:\n        best_swap = None\n        best_new_cost = total_cost\n        for m in range(k):\n            for o in range(n_samples):\n                if o not in medoids:\n                    medoids_candidate = medoids[:]\n                    medoids_candidate[m] = o\n                    new_cost = compute_total_cost(medoids_candidate)\n                    if new_cost < best_new_cost:\n                        best_new_cost = new_cost\n                        best_swap = (m, o)\n        if best_swap is None or best_new_cost >= total_cost:\n            break\n        (m_idx, new_m_idx) = best_swap\n        medoids[m_idx] = new_m_idx\n        total_cost = best_new_cost\n    labels = []\n    for i in range(n_samples):\n        distances = [np.linalg.norm(X[i] - X[m]) for m in medoids]\n        closest = np.argmin(distances)\n        labels.append(closest)\n    return labels\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 202, "completion_id": 3, "solution": "import numpy as np\nfrom typing import List\ndef pam_clustering(X: np.ndarray, k: int) -> List[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-medoid,\n       accepting the swap that strictly reduces the total cost the most.\n       Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    (n_samples, d_features) = X.shape\n    current_medoids = list(range(k))\n    improvement = True\n\n    def euclidean(x1, x2):\n        return np.sum((x1 - x2) ** 2, axis=1) ** 0.5\n\n    def compute_cost(medoids):\n        cost = 0\n        for i in range(n_samples):\n            distances = [np.linalg.norm(X[i] - X[m]) for m in medoids]\n            min_index = np.argmin(distances)\n            cost += distances[min_index]\n        return cost\n    total_cost = compute_cost(current_medoids)\n    while improvement:\n        improvement = False\n        best_swap = None\n        best_cost = total_cost\n        for m in current_medoids:\n            for o in range(n_samples):\n                if o not in current_medoids:\n                    candidate_medoids = current_medoids.copy()\n                    candidate_medoids.remove(m)\n                    candidate_medoids.append(o)\n                    candidate_medoids.sort()\n                    candidate_cost = 0\n                    cost_only_for_m = 0\n                    affected_points = set()\n                    for i in range(n_samples):\n                        distances = np.array([np.linalg.norm(X[i] - X[med]) for med in current_medoids])\n                        if current_medoids[np.argmin(distances)] == m:\n                            affected_points.add(i)\n                            cost_only_for_m += distances.min()\n                    candidate_cost = 0\n                    for i in affected_points:\n                        dists = [np.linalg.norm(X[i] - X[med]) for med in candidate_medoids]\n                        candidate_cost += min(dists)\n                    full_candidate_cost = total_cost - cost_only_for_m + candidate_cost\n                    if full_candidate_cost < best_cost:\n                        best_cost = full_candidate_cost\n                        best_swap = (m, o)\n                        improvement = True\n        if improvement:\n            (m, o) = best_swap\n            current_medoids.remove(m)\n            current_medoids.append(o)\n            total_cost = best_cost\n    labels = []\n    for i in range(n_samples):\n        distances = [np.linalg.norm(X[i] - X[m]) for m in current_medoids]\n        min_index = np.argmin(distances)\n        for idx in range(len(distances)):\n            if distances[idx] == distances[min_index]:\n                min_index = idx\n                break\n        labels.append(min_index)\n    return labels\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nlabels = pam_clustering(X, k=2)"}
{"task_id": 202, "completion_id": 4, "solution": "import numpy as np\nfrom typing import List\ndef pam_clustering(X: np.ndarray, k: int) -> List[int]:\n    \"\"\"\n    Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function follows the rules for initialization, swap optimization, \n    and label assignment as specified.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n = X.shape[0]\n    medoids = list(range(k))\n    while True:\n        current_cost = 0\n        cluster_assignments = []\n        for i in range(n):\n            distances = [np.linalg.norm(X[i] - X[m]) for m in medoids]\n            closest_medoid_index = np.argmin(distances)\n            cluster_assignments.append(closest_medoid_index)\n            current_cost += distances[closest_medoid_index]\n        best_swap = None\n        best_cost = current_cost\n        for (m_index, medoid) in enumerate(medoids):\n            for (o_index, other) in enumerate(range(n)):\n                if other != medoid:\n                    if other in medoids:\n                        continue\n                    temp_medoids = medoids.copy()\n                    temp_medoids[m_index] = other\n                    temp_cost = 0\n                    for i in range(n):\n                        distances = [np.linalg.norm(X[i] - X[m]) for m in temp_medoids]\n                        closest_medoid_index = np.argmin(distances)\n                        temp_cost += distances[closest_medoid_index]\n                    if temp_cost < best_cost:\n                        best_cost = temp_cost\n                        best_swap = (m_index, other)\n        if best_swap:\n            (m_index_to_remove, new_medoid) = best_swap\n            medoids[m_index_to_remove] = new_medoid\n        else:\n            break\n    final_labels = []\n    for i in range(n):\n        distances = [np.linalg.norm(X[i] - X[m]) for m in medoids]\n        closest_medoid_index = np.argmin(distances)\n        final_labels.append(closest_medoid_index)\n    return final_labels\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 202, "completion_id": 5, "solution": "import numpy as np\nfrom typing import List\ndef pam_clustering(X: np.ndarray, k: int) -> List[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n = X.shape[0]\n    medoids = list(range(k))\n    total_cost = float('inf')\n    improved = True\n\n    def euclidean_distance(p1, p2):\n        return np.sum((p1 - p2) ** 2, axis=-1) ** 0.5\n\n    def compute_total_cost(_medoids):\n        costs = 0\n        for i in range(n):\n            distances = [euclidean_distance(X[i], X[j]) for j in _medoids]\n            costs += min(distances)\n        return costs\n\n    def get_labels(_medoids):\n        labels = []\n        for i in range(n):\n            distances = [euclidean_distance(X[i], X[j]) for j in _medoids]\n            idx = np.argmin(distances)\n            min_distance = min(distances)\n            for j in range(len(distances)):\n                if distances[j] == min_distance:\n                    idx = j\n                    break\n            labels.append(idx)\n        return labels\n    while improved:\n        improved = False\n        best_swap = None\n        best_gain = 0\n        current_cost = compute_total_cost(medoids)\n        for m in medoids:\n            for o in range(n):\n                if o in medoids:\n                    continue\n                new_medoids = medoids[:]\n                new_medoids[new_medoids.index(m)] = o\n                new_cost = compute_total_cost(new_medoids)\n                gain = current_cost - new_cost\n                if gain > best_gain + 1e-09:\n                    best_swap = (m, o)\n                    best_gain = gain\n                    improved = True\n        if improved:\n            (m, o) = best_swap\n            medoids[medoids.index(m)] = o\n    return get_labels(medoids)"}
{"task_id": 202, "completion_id": 6, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    (n_samples, _) = X.shape\n    medoids_indices = list(range(k))\n\n    def compute_total_cost(medoids_indices):\n        medoids = X[medoids_indices]\n        distances = np.linalg.norm(X[:, np.newaxis, :] - medoids[np.newaxis, :, :], axis=2)\n        labels = np.argmin(distances, axis=1)\n        return (np.sum(np.min(distances, axis=1)), labels.tolist())\n    (total_cost, labels) = compute_total_cost(medoids_indices)\n    while True:\n        best_total_cost = total_cost\n        best_medoids_indices = medoids_indices.copy()\n        best_swap = None\n        for (i, medoid_idx) in enumerate(medoids_indices):\n            for j in range(n_samples):\n                if j in medoids_indices:\n                    continue\n                new_medoids = medoids_indices.copy()\n                new_medoids[i] = j\n                (new_cost, new_labels) = compute_total_cost(new_medoids)\n                if new_cost < best_total_cost:\n                    best_total_cost = new_cost\n                    best_medoids_indices = new_medoids\n                    best_swap = (i, j)\n        if best_total_cost < total_cost:\n            total_cost = best_total_cost\n            medoids_indices = best_medoids_indices\n        else:\n            break\n    (_, labels) = compute_total_cost(medoids_indices)\n    return labels"}
{"task_id": 202, "completion_id": 7, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef pam_clustering(X: np.ndarray, k: int) -> List[int]:\n    \"\"\"\n    Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-medoid,\n       accepting the swap that strictly reduces the total cost the most.\n       Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the closest\n       medoid (ties are broken by the medoid that appears first in the current list).\n    \n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    medoid_indices = list(range(k))\n    medoids = X[medoid_indices]\n\n    def compute_cost():\n        total_cost = 0.0\n        for i in range(n_samples):\n            if i in medoid_indices:\n                continue\n            sample = X[i]\n            min_dist = np.inf\n            for m_idx in medoid_indices:\n                dist = np.linalg.norm(sample - X[m_idx])\n                if dist < min_dist:\n                    min_dist = dist\n            total_cost += min_dist\n        return total_cost\n\n    def assign_labels_to_samples():\n        labels = []\n        for i in range(n_samples):\n            sample = X[i]\n            min_dist = np.inf\n            closest_medoid_idx = -1\n            for (m_idx, medoid_idx) in enumerate(medoid_indices):\n                dist = np.linalg.norm(sample - X[medoid_idx])\n                if dist < min_dist:\n                    min_dist = dist\n                    closest_medoid_idx = m_idx\n            labels.append(closest_medoid_idx)\n        return labels\n    current_cost = compute_cost()\n    improved = True\n    while improved:\n        improved = False\n        best_cost = np.inf\n        best_swap = None\n        for m_idx in range(len(medoid_indices)):\n            for o_idx in range(n_samples):\n                if o_idx in medoid_indices:\n                    continue\n                potential_medoid_indices = medoid_indices.copy()\n                potential_medoid_indices[m_idx] = o_idx\n                new_cost = 0.0\n                for i in range(n_samples):\n                    if i in potential_medoid_indices:\n                        continue\n                    sample = X[i]\n                    min_dist = np.inf\n                    for m in potential_medoid_indices:\n                        dist = np.linalg.norm(sample - X[m])\n                        if dist < min_dist:\n                            min_dist = dist\n                    new_cost += min_dist\n                if new_cost < best_cost:\n                    best_cost = new_cost\n                    best_swap = (m_idx, o_idx)\n        if best_cost < current_cost:\n            (m_to_swap, o_to_swap) = best_swap\n            medoid_indices[m_to_swap] = o_to_swap\n            current_cost = best_cost\n            improved = True\n    return assign_labels_to_samples()\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2\nlabels = pam_clustering(X, k)"}
{"task_id": 202, "completion_id": 8, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef pam_clustering(X: np.ndarray, k: int) -> List[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    (n_samples, _) = X.shape\n    medoids = [i for i in range(k)]\n\n    def compute_total_cost(X: np.ndarray, medoids: List[int]) -> float:\n        \"\"\"Compute the total clustering cost (sum of distances from samples to their medoids).\"\"\"\n        cost = 0.0\n        medoid_points = X[medoids]\n        for i in range(n_samples):\n            distances = np.linalg.norm(X[i] - medoid_points, axis=1)\n            min_idx = np.argmin(distances)\n            cost += distances[min_idx]\n        return cost\n\n    def assign_labels(X: np.ndarray, medoids: List[int]) -> List[int]:\n        \"\"\"Assign each sample to the closest medoid (labels 0 to k-1).\"\"\"\n        medoid_points = X[medoids]\n        labels = []\n        for i in range(n_samples):\n            distances = np.linalg.norm(X[i] - medoid_points, axis=1)\n            min_idx = np.argmin(distances)\n            labels.append(min_idx)\n        return labels\n    total_cost = float('inf')\n    new_cost = compute_total_cost(X, medoids)\n    while new_cost < total_cost:\n        total_cost = new_cost\n        best_swap = None\n        best_improvement = 0.0\n        for m in range(len(medoids)):\n            for o in range(n_samples):\n                if o not in medoids:\n                    new_medoids = medoids.copy()\n                    new_medoids[m] = o\n                    proposed_cost = compute_total_cost(X, new_medoids)\n                    improvement = total_cost - proposed_cost\n                    if improvement > best_improvement:\n                        best_improvement = improvement\n                        best_swap = (m, o)\n        if best_improvement > 1e-10:\n            (m, o) = best_swap\n            medoids[m] = o\n            new_cost = compute_total_cost(X, medoids)\n        else:\n            break\n    return assign_labels(X, medoids)"}
{"task_id": 202, "completion_id": 9, "solution": "import numpy as np\nimport numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    medoids = list(range(k))\n\n    def compute_total_cost(medoids):\n        \"\"\"Compute the sum of distances from each sample to its closest medoid.\"\"\"\n        total_cost = 0\n        for i in range(n_samples):\n            distances = np.array([np.sqrt(np.sum((X[i] - X[m]) ** 2)) for m in medoids])\n            min_idx = np.argmin(distances)\n            total_cost += distances[min_idx]\n        return total_cost\n\n    def assign_labels(medoids):\n        labels = []\n        for i in range(n_samples):\n            distances = np.array([np.sqrt(np.sum((X[i] - X[m]) ** 2)) for m in medoids])\n            min_idx = np.argmin(distances)\n            labels.append(min_idx)\n        return labels\n    current_cost = compute_total_cost(medoids)\n    while True:\n        best_swap = None\n        best_cost_reduction = 0\n        for m in range(len(medoids)):\n            medoid_idx = medoids[m]\n            for s in range(n_samples):\n                if s != medoid_idx and s not in medoids:\n                    new_medoids = medoids.copy()\n                    new_medoids[m] = s\n                    new_cost = compute_total_cost(new_medoids)\n                    if current_cost - new_cost > best_cost_reduction:\n                        best_cost_reduction = current_cost - new_cost\n                        best_swap = (m, s)\n        if best_swap is None:\n            break\n        (m_idx, s_idx) = best_swap\n        medoids[m_idx] = s_idx\n        current_cost -= best_cost_reduction\n    return assign_labels(medoids)\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nlabels = pam_clustering(X, 2)"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\"\"\"\n    x_train = np.array(x_train, dtype=float)\n    y_train = np.array(y_train, dtype=float)\n    x_test = np.array(x_test, dtype=float)\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n\n    def create_polynomial_features(X, degree):\n        (n_samples, n_features) = X.shape\n        if degree == 1:\n            return X\n        poly_features = []\n        for d in range(1, degree + 1):\n            poly_features.append(X ** d)\n        return np.hstack(tuple(poly_features))\n    X_train_poly = create_polynomial_features(x_train, degree)\n    X_test_poly = create_polynomial_features(x_test, degree)\n    X_train_poly = np.hstack([np.ones((X_train_poly.shape[0], 1)), X_train_poly])\n    X_test_poly = np.hstack([np.ones((X_test_poly.shape[0], 1)), X_test_poly])\n    (n_samples, n_features) = X_train_poly.shape\n    means = X_train_poly[:, 1:].mean(axis=0)\n    stds = X_train_poly[:, 1:].std(axis=0)\n    X_train_poly[:, 1:] = (X_train_poly[:, 1:] - means) / (stds + 1e-08)\n    X_test_poly[:, 1:] = (X_test_poly[:, 1:] - means) / (stds + 1e-08)\n    weights = np.zeros(n_features)\n    for _ in range(n_iterations):\n        predictions = X_train_poly @ weights\n        errors = predictions - y_train\n        gradient = X_train_poly.T @ errors / n_samples\n        gradient[1:] += reg_factor * ((1 - l1_ratio) * weights[1:] + l1_ratio * np.sign(weights[1:]))\n        weights -= learning_rate * gradient\n    predictions = X_test_poly @ weights\n    return np.round(predictions, 4).tolist()"}
{"task_id": 216, "completion_id": 1, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    try:\n        x_train = np.array(x_train, dtype=np.float64)\n        y_train = np.array(y_train, dtype=np.float64).flatten()\n        x_test = np.array(x_test, dtype=np.float64)\n        if n_iterations < 1 or x_train.shape[1] != x_test.shape[1]:\n            return -1\n        if degree > 1:\n            (n_samples, n_features) = x_train.shape\n            poly_x_train = np.zeros((n_samples, n_features * degree))\n            for d in range(1, degree + 1):\n                powers = np.power(x_train, d)\n                for i in range(powers.shape[1]):\n                    feature_idx = n_features * (d - 1) + i\n                    poly_x_train[:, feature_idx] = powers[:, i]\n            poly_x_test = np.zeros((x_test.shape[0], x_test.shape[1] * degree))\n            for d in range(1, degree + 1):\n                powers = np.power(x_test, d)\n                for i in range(powers.shape[1]):\n                    feature_idx = n_features * (d - 1) + i\n                    poly_x_test[:, feature_idx] = powers[:, i]\n            x_train = poly_x_train\n            x_test = poly_x_test\n        else:\n            x_train = x_train.copy()\n            x_test = x_test.copy()\n        n_features = x_train.shape[1]\n        if n_features > 0:\n            mean = np.mean(x_train, axis=0)\n            std = np.std(x_train, axis=0)\n            x_train[:, 1:] = (x_train[:, 1:] - mean[1:]) / std[1:]\n            x_test[:, 1:] = (x_test[:, 1:] - mean[1:]) / std[1:]\n        x_train = np.hstack((np.ones((x_train.shape[0], 1)), x_train))\n        x_test = np.hstack((np.ones((x_test.shape[0], 1)), x_test))\n        weights = np.zeros(x_train.shape[1])\n        l1_weight = l1_ratio\n        l2_weight = 1 - l1_ratio\n        for _ in range(n_iterations):\n            y_pred = x_train @ weights\n            error = y_pred - y_train\n            derivative = 2 / y_train.shape[0] * (x_train.T @ error)\n            derivative[1:] += reg_factor * (2 * l2_weight * weights[1:])\n            derivative[1:] += reg_factor * l1_weight * np.sign(weights[1:])\n            weights -= learning_rate * derivative\n        predictions = x_test @ weights\n        return np.round(predictions, 4).tolist()\n    except Exception:\n        return -1"}
{"task_id": 216, "completion_id": 2, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n    \n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    x_train = np.array(x_train, dtype=float)\n    y_train = np.array(y_train, dtype=float)\n    x_test = np.array(x_test, dtype=float)\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    (n_samples, n_features) = x_train.shape\n\n    def generate_polynomial_features(x, degree):\n        if degree == 1:\n            return x\n        poly_features = x.copy()\n        for d in range(2, degree + 1):\n            poly_features = np.hstack((poly_features, x ** d))\n        return poly_features\n    x_train_poly = generate_polynomial_features(x_train, degree)\n    x_test_poly = generate_polynomial_features(x_test, degree)\n    means = np.mean(x_train_poly, axis=0)\n    stds = np.std(x_train_poly, axis=0)\n    stds[stds == 0] = 1.0\n    x_train_poly = (x_train_poly - means) / stds\n    x_test_poly = (x_test_poly - means) / stds\n    x_train_poly = np.hstack([np.ones((n_samples, 1)), x_train_poly])\n    x_test_poly = np.hstack([np.ones((x_test_poly.shape[0], 1)), x_test_poly])\n    n_features_with_bias = x_train_poly.shape[1]\n    weights = np.zeros(n_features_with_bias)\n    for _ in range(n_iterations):\n        predictions = np.dot(x_train_poly, weights)\n        errors = predictions - y_train\n        gradient = 2 / n_samples * np.dot(x_train_poly.T, errors)\n        for j in range(1, n_features_with_bias):\n            l1_contribution = reg_factor * l1_ratio * np.sign(weights[j])\n            l2_contribution = reg_factor * (1 - l1_ratio) * weights[j]\n            gradient[j] += l1_contribution + l2_contribution\n        weights -= learning_rate * gradient\n    predictions = np.dot(x_test_poly, weights)\n    return np.round(predictions, 4).tolist()"}
{"task_id": 216, "completion_id": 3, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    x_train = np.array(x_train, dtype=float)\n    y_train = np.array(y_train, dtype=float)\n    x_test = np.array(x_test, dtype=float)\n    if x_train.ndim != 2 or x_test.ndim != 2:\n        return -1\n    if x_train.shape[1] != x_test.shape[1]:\n        return -1\n    if n_iterations < 1:\n        return -1\n\n    def build_polynomial_features(X, degree):\n        if degree < 1:\n            return X\n        new_features = []\n        for col in range(X.shape[1]):\n            for deg in range(1, degree + 1):\n                new_features.append(X[:, col] ** deg)\n        return np.column_stack(new_features)\n    X_poly_train = build_polynomial_features(x_train, degree)\n    X_poly_test = build_polynomial_features(x_test, degree)\n\n    def standardize(X):\n        means = np.mean(X, axis=0)\n        stds = np.std(X, axis=0)\n        X_std = (X - means) / stds\n        return (X_std, means, stds)\n    (X_poly_train, means_train, stds_train) = standardize(X_poly_train)\n    X_poly_test = (X_poly_test - means_train) / stds_train\n    X_train_with_bias = np.c_[np.ones(X_poly_train.shape[0]), X_poly_train]\n    X_test_with_bias = np.c_[np.ones(X_poly_test.shape[0]), X_poly_test]\n    n_features = X_train_with_bias.shape[1]\n    weights = np.random.randn(n_features) * 0.01\n    for _ in range(n_iterations):\n        predictions = X_train_with_bias @ weights\n        errors = predictions - y_train\n        grad_mse = 2 / len(y_train) * X_train_with_bias.T @ errors\n        l1 = reg_factor * l1_ratio * np.sign(weights[1:])\n        l2 = reg_factor * (1 - l1_ratio) * weights[1:]\n        grad_reg = np.zeros(n_features)\n        grad_reg[1:] = l1 + l2\n        grad_total = grad_mse + grad_reg\n        weights -= learning_rate * grad_total\n    predictions = X_test_with_bias @ weights\n    return np.round(predictions, 4).tolist()"}
{"task_id": 216, "completion_id": 4, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"\n    Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals.\n        Returns `-1` if the inputs are invalid.\n    \"\"\"\n    x_train = np.array(x_train, dtype=float)\n    y_train = np.array(y_train, dtype=float)\n    x_test = np.array(x_test, dtype=float)\n    if x_train.shape[1] != x_test.shape[1]:\n        return -1\n    if n_iterations < 1:\n        return -1\n\n    def expand_features(x, degree):\n        (n_samples, n_features) = x.shape\n        expanded = np.ones((n_samples, 1))\n        for d in range(1, degree + 1):\n            for j in range(n_features):\n                expanded = np.hstack((expanded, x[:, j:j + 1] ** d))\n        return expanded\n    X_train = expand_features(x_train, degree)\n    X_test = expand_features(x_test, degree)\n    means = X_train[:, 1:].mean(axis=0)\n    stds = X_train[:, 1:].std(axis=0)\n    X_train[:, 1:] = (X_train[:, 1:] - means) / (stds + 1e-08)\n    X_test[:, 1:] = (X_test[:, 1:] - means) / (stds + 1e-08)\n    (n_samples, n_features) = X_train.shape\n    w = np.zeros(n_features)\n    for _ in range(n_iterations):\n        predictions = X_train @ w\n        error = predictions - y_train\n        gradient = X_train.T @ error / n_samples\n        l1_penalty = reg_factor * l1_ratio * np.sign(w[1:])\n        l2_penalty = reg_factor * (1 - l1_ratio) * w[1:]\n        regularized_gradient = gradient\n        regularized_gradient[1:] += l1_penalty + l2_penalty\n        w -= learning_rate * regularized_gradient\n    predictions = X_test @ w\n    return np.round(predictions, 4).tolist()\nX_train = [[1, 2], [3, 4]]\ny_train = [3, 7]\nX_test = [[2, 3]]\npredictions = elastic_net_regression(X_train, y_train, X_test, degree=2)"}
{"task_id": 216, "completion_id": 5, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"\n    Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    x_train = np.array(x_train, dtype=float)\n    y_train = np.array(y_train, dtype=float)\n    x_test = np.array(x_test, dtype=float)\n    if x_train.shape[1] != x_test.shape[1]:\n        return -1\n    if n_iterations < 1:\n        return -1\n\n    def standardize(data):\n        mean = np.mean(data, axis=0)\n        std = np.std(data, axis=0)\n        std[std == 0] = 1\n        return (data - mean) / std\n    x_train_standardized = standardize(x_train)\n    x_test_standardized = standardize(x_test)\n\n    def add_polynomial_features(X, degree):\n        (n_samples, n_features) = X.shape\n        for d in range(2, degree + 1):\n            X = np.hstack((X, X ** d))\n        return X\n    x_train_poly = add_polynomial_features(x_train_standardized, degree)\n    x_test_poly = add_polynomial_features(x_test_standardized, degree)\n    x_train_with_bias = np.hstack((np.ones((x_train_poly.shape[0], 1)), x_train_poly))\n    x_test_with_bias = np.hstack((np.ones((x_test_poly.shape[0], 1)), x_test_poly))\n    n_weights = x_train_with_bias.shape[1]\n    weights = np.zeros(n_weights, dtype=float)\n    for _ in range(n_iterations):\n        y_pred = np.dot(x_train_with_bias, weights)\n        error = y_pred - y_train\n        d_cost = 2 / x_train.shape[0] * np.dot(x_train_with_bias.T, error)\n        l1_sign = np.sign(weights)\n        l1_sign[0] = 0\n        gradient = d_cost + reg_factor * (l1_ratio * l1_sign + (1 - l1_ratio) * 2 * weights)\n        weights -= learning_rate * gradient\n    predictions = np.dot(x_test_with_bias, weights)\n    return np.round(predictions, 4).tolist()\nx_train = [[1, 2], [2, 3], [3, 4]]\ny_train = [3, 5, 7]\nx_test = [[4, 5]]"}
{"task_id": 216, "completion_id": 6, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    x_train = np.array(x_train, dtype=float)\n    y_train = np.array(y_train, dtype=float)\n    x_test = np.array(x_test, dtype=float)\n    (n_samples_train, n_features_train) = x_train.shape\n    (n_samples_test, n_features_test) = x_test.shape\n    if n_iterations < 1 or n_features_train != n_features_test:\n        return -1\n\n    def generate_polynomial_features(X):\n        (n_samples, n_features) = X.shape\n        extended_features = []\n        for d in range(1, degree + 1):\n            if d == 1:\n                extended_features.append(X)\n            else:\n                extended_features.append(X ** d)\n        extended_features = np.hstack(extended_features)\n        return extended_features\n    X_train_poly = generate_polynomial_features(x_train)\n    X_test_poly = generate_polynomial_features(x_test)\n\n    def standardize(X):\n        means = np.mean(X, axis=0)\n        stds = np.std(X, axis=0)\n        return ((X - means) / stds, means, stds)\n    n_polynomial_features = X_train_poly.shape[1]\n    X_train_poly = np.hstack([np.ones([n_samples_train, 1]), X_train_poly])\n    X_test_poly = np.hstack([np.ones([n_samples_test, 1]), X_test_poly])\n    standardized_X_train = standardize(X_train_poly[:, 1:])\n    standardized_X_train = np.hstack([np.ones([n_samples_train, 1]), standardized_X_train[0]])\n    standardized_X_test = standardize(X_test_poly[:, 1:])\n    standardized_X_test = np.hstack([np.ones([n_samples_test, 1]), standardized_X_test[0]])\n    weights = np.random.randn(standardized_X_train.shape[1]) * 0.1\n    for _ in range(n_iterations):\n        predictions = standardized_X_train @ weights\n        errors = predictions - y_train\n        gradients = np.zeros(weights.shape)\n        gradients[0] = 2 / n_samples_train * standardized_X_train[:, 0] @ errors\n        for j in range(1, len(weights)):\n            l1_pen = reg_factor * l1_ratio * np.sign(weights[j])\n            l2_pen = 2 * reg_factor * (1 - l1_ratio) * weights[j]\n            gradients[j] = 2 / n_samples_train * standardized_X_train[:, j] @ errors + l1_pen + l2_pen\n        weights -= learning_rate * gradients\n    predictions = standardized_X_test @ weights\n    return np.round(predictions, 4).tolist()"}
{"task_id": 216, "completion_id": 7, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    x_train = np.array(x_train, dtype=float)\n    y_train = np.array(y_train, dtype=float)\n    x_test = np.array(x_test, dtype=float)\n    if x_train.shape[1] != x_test.shape[1]:\n        return -1\n    if n_iterations < 1:\n        return -1\n    (n_train, n_features) = x_train.shape\n    n_test = x_test.shape[0]\n\n    def build_features(X):\n        poly_features = []\n        for d in range(1, degree + 1):\n            poly_features.append(np.power(X, d))\n        result = np.hstack(poly_features) if degree > 1 else X\n        return result\n    x_train_poly = build_features(x_train)\n    x_test_poly = build_features(x_test)\n\n    def standardize(X_poly):\n        means = np.mean(X_poly, axis=0)\n        stds = np.std(X_poly, axis=0)\n        X_std = (X_poly - means) / (stds + 1e-08)\n        return (X_std, means, stds)\n    (X_train_std, train_means, train_stds) = standardize(x_train_poly)\n    (X_test_std, _, _) = standardize(x_test_poly)\n    X_train = np.hstack([np.ones((n_train, 1)), X_train_std])\n    X_test = np.hstack([np.ones((n_test, 1)), X_test_std])\n    n_weights = X_train.shape[1]\n    weights = np.zeros(n_weights)\n    for _ in range(n_iterations):\n        y_pred = np.dot(X_train, weights)\n        error = y_pred - y_train\n        m = len(y_train)\n        grad = 1.0 / m * np.dot(X_train.T, error)\n        l1_grad = reg_factor * l1_ratio * np.sign(weights[1:])\n        l2_grad = reg_factor * (1 - l1_ratio) * weights[1:]\n        grad[1:] += l1_grad + l2_grad\n        weights -= learning_rate * grad\n    y_pred = np.dot(X_test, weights)\n    return np.round(y_pred, 4).tolist()\nx_train = [[1, 2], [2, 3], [3, 6], [4, 7]]\ny_train = [3, 5, 9, 11]\nx_test = [[5, 8], [6, 9]]"}
{"task_id": 216, "completion_id": 8, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n    \n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n    \n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    (n_samples_train, n_features) = x_train.shape\n    (n_samples_test, _) = x_test.shape\n\n    def generate_polynomial_features(x, degree):\n        (n_samples, n_features) = x.shape\n        result = np.ones((n_samples, 1))\n        for d in range(1, degree + 1):\n            for i in range(n_features):\n                result = np.hstack((result, x[:, i:i + 1] ** d))\n        return result\n    x_poly_train = generate_polynomial_features(x_train, degree)\n    x_poly_test = generate_polynomial_features(x_test, degree)\n    for j in range(1, x_poly_train.shape[1]):\n        mean = np.mean(x_poly_train[:, j])\n        std = np.std(x_poly_train[:, j])\n        x_poly_train[:, j] = (x_poly_train[:, j] - mean) / std\n        x_poly_test[:, j] = (x_poly_test[:, j] - mean) / std\n    n_weights = x_poly_train.shape[1]\n    weights = np.zeros(n_weights)\n    for _ in range(n_iterations):\n        y_pred = np.dot(x_poly_train, weights)\n        error = y_pred - y_train\n        gradients = np.zeros(n_weights)\n        gradients[0] = 2 / n_samples_train * np.dot(error, x_poly_train[:, 0])\n        for j in range(1, n_weights):\n            grad_mse = 2 / n_samples_train * np.dot(error, x_poly_train[:, j])\n            grad_l1 = reg_factor * l1_ratio * np.sign(weights[j])\n            grad_l2 = reg_factor * (1 - l1_ratio) * weights[j]\n            gradients[j] = grad_mse + grad_l1 + grad_l2\n        weights -= learning_rate * gradients\n    y_pred_test = np.dot(x_poly_test, weights)\n    return np.round(y_pred_test, 4).tolist()"}
{"task_id": 216, "completion_id": 9, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    (n_samples_train, n_features) = x_train.shape\n    (n_samples_test, _) = x_test.shape\n\n    def build_polynomial_features(X, degree):\n        if degree == 1:\n            return X\n        (n_samples, n_features) = X.shape\n        X_poly = np.ones((n_samples, 1))\n        for d in range(1, degree + 1):\n            for j in range(n_features):\n                X_poly = np.hstack([X_poly, X[:, j:j + 1] ** d])\n        return X_poly\n    X_train_poly = build_polynomial_features(x_train, degree)\n    X_test_poly = build_polynomial_features(x_test, degree)\n\n    def standard_score(X):\n        means = np.mean(X, axis=0)\n        stds = np.std(X, axis=0)\n        X_standard = np.zeros_like(X)\n        X_standard[:, 0] = X[:, 0]\n        for i in range(1, X.shape[1]):\n            X_standard[:, i] = (X[:, i] - means[i]) / stds[i] if stds[i] != 0 else X[:, i]\n        return X_standard\n    X_train_standard = standard_score(X_train_poly)\n    X_test_standard = standard_score(X_test_poly)\n    n_weights = X_train_standard.shape[1]\n    weights = np.zeros(n_weights)\n    for _ in range(n_iterations):\n        y_pred = X_train_standard @ weights\n        error = y_pred - y_train\n        gradient = 2 / n_samples_train * X_train_standard.T @ error\n        l1 = reg_factor * l1_ratio * np.sign(weights[1:])\n        l2 = reg_factor * (1 - l1_ratio) * weights[1:]\n        regularization = np.zeros(n_weights)\n        regularization[1:] = l1 + l2\n        weights = weights - learning_rate * (gradient + regularization)\n    predictions = X_test_standard @ weights\n    return np.round(predictions, 4).tolist()"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual_np = np.array(actual, dtype=np.float64)\n    predicted_np = np.array(predicted, dtype=np.float64)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    grad = actual_np * sigmoid(-actual_np * predicted_np)\n    sig_pred = sigmoid(predicted_np)\n    hess = sig_pred * (1 - sig_pred)\n    prob = sig_pred\n    grad_rounded = np.round(grad, 6)\n    hess_rounded = np.round(hess, 6)\n    prob_rounded = np.round(prob, 6)\n    gradient_list = grad_rounded.tolist()\n    hessian_list = hess_rounded.tolist()\n    probability_list = prob_rounded.tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 217, "completion_id": 1, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual_np = np.array(actual, dtype=np.float64)\n    predicted_np = np.array(predicted, dtype=np.float64)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    prob = sigmoid(predicted_np)\n    grad = actual_np * sigmoid(-actual_np * predicted_np)\n    hess = prob * (1 - prob)\n    grad_rounded = np.round(grad, 6)\n    hess_rounded = np.round(hess, 6)\n    prob_rounded = np.round(prob, 6)\n    gradient_list = grad_rounded.tolist()\n    hessian_list = hess_rounded.tolist()\n    probability_list = prob_rounded.tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 217, "completion_id": 2, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if len(actual) != len(predicted):\n        raise ValueError('actual and predicted must be of the same length.')\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    prob = sigmoid(predicted)\n    grad = actual * sigmoid(-actual * predicted)\n    hess = prob * (1 - prob)\n    gradient_list = list(np.round(grad, 6))\n    hessian_list = list(np.round(hess, 6))\n    probability_list = list(np.round(prob, 6))\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 217, "completion_id": 3, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual_np = np.array(actual, dtype=np.float64)\n    predicted_np = np.array(predicted, dtype=np.float64)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    probability = sigmoid(predicted_np)\n    grad = actual_np * sigmoid(-actual_np * predicted_np)\n    hess = probability * (1 - probability)\n    gradient_list = np.round(grad, 6).tolist()\n    hessian_list = np.round(hess, 6).tolist()\n    probability_list = np.round(probability, 6).tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 217, "completion_id": 4, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual_array = np.array(actual, dtype=float)\n    predicted_array = np.array(predicted, dtype=float)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    grad = actual_array * sigmoid(-actual_array * predicted_array)\n    hess = sigmoid(predicted_array) * (1 - sigmoid(predicted_array))\n    prob = sigmoid(predicted_array)\n    grad = np.round(grad, 6)\n    hess = np.round(hess, 6)\n    prob = np.round(prob, 6)\n    gradient_list = grad.tolist()\n    hessian_list = hess.tolist()\n    probability_list = prob.tolist()\n    return (gradient_list, hessian_list, probability_list)\nactual = [1, -1, 1, -1]\npredicted = [0.5, -0.5, 2.0, -2.0]"}
{"task_id": 217, "completion_id": 5, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual_np = np.array(actual, dtype=np.float64)\n    predicted_np = np.array(predicted, dtype=np.float64)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    prob = sigmoid(predicted_np)\n    grad = actual_np * sigmoid(-actual_np * predicted_np)\n    hess = prob * (1 - prob)\n    gradient_list = np.round(grad, 6).tolist()\n    hessian_list = np.round(hess, 6).tolist()\n    probability_list = np.round(prob, 6).tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 217, "completion_id": 6, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    prob_list = np.round(sigmoid(predicted), 6).tolist()\n    grad = actual * sigmoid(-actual * predicted)\n    grad_list = np.round(grad, 6).tolist()\n    hess_list = np.round(sigmoid(predicted) * (1 - sigmoid(predicted)), 6).tolist()\n    return (grad_list, hess_list, prob_list)"}
{"task_id": 217, "completion_id": 7, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual_np = np.array(actual, dtype=np.float64)\n    predicted_np = np.array(predicted, dtype=np.float64)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    prob_np = sigmoid(predicted_np)\n    grad_np = actual_np * sigmoid(-actual_np * predicted_np)\n    hess_np = prob_np * (1 - prob_np)\n    grad_np = np.round(grad_np, 6)\n    hess_np = np.round(hess_np, 6)\n    prob_np = np.round(prob_np, 6)\n    grad_list = grad_np.tolist()\n    hess_list = hess_np.tolist()\n    prob_list = prob_np.tolist()\n    return (grad_list, hess_list, prob_list)"}
{"task_id": 217, "completion_id": 8, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual, dtype=int)\n    predicted = np.array(predicted, dtype=float)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    probability = sigmoid(predicted)\n    grad = actual * sigmoid(-actual * predicted)\n    hess = probability * (1 - probability)\n    grad_list = [round(x, 6) for x in grad.tolist()]\n    hess_list = [round(x, 6) for x in hess.tolist()]\n    prob_list = [round(x, 6) for x in probability.tolist()]\n    return (grad_list, hess_list, prob_list)"}
{"task_id": 217, "completion_id": 9, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.asarray(actual)\n    predicted = np.asarray(predicted)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    probability = sigmoid(predicted)\n    grad = actual * sigmoid(-actual * predicted)\n    hess = probability * (1 - probability)\n    grad = np.round(grad, 6)\n    hess = np.round(hess, 6)\n    probability = np.round(probability, 6)\n    gradient_list = grad.tolist()\n    hessian_list = hess.tolist()\n    probability_list = probability.tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 218, "completion_id": 0, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_value(hand: list[int]) -> int:\n        aces = hand.count(1)\n        score = sum(hand)\n        while aces > 0 and score + 10 <= 21:\n            score += 10\n            aces -= 1\n        return score\n    player_score = hand_value(player)\n    dealer_score = hand_value(dealer)\n    player_bust = player_score > 21\n    dealer_bust = dealer_score > 21\n    if player_bust:\n        return -1.0\n    if dealer_bust:\n        return 1.0\n    if player_score > dealer_score:\n        result = 1.0\n    elif player_score < dealer_score:\n        result = -1.0\n    else:\n        result = 0.0\n    if len(player) == 2 and 1 in player and (10 in player):\n        result = max(result, 1.5)\n    return float(result)"}
{"task_id": 218, "completion_id": 1, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_score(cards: list[int]) -> int:\n        \"\"\"Calculate the optimal score of a hand, using usable Aces (1s) where appropriate.\"\"\"\n        score = sum(cards)\n        aces = cards.count(1)\n        while aces > 0 and score + 10 <= 21:\n            score += 10\n            aces -= 1\n        return score\n    player_score = hand_score(player)\n    dealer_score = hand_score(dealer)\n    if player_score > 21:\n        return -1.0\n    if dealer_score > 21:\n        return 1.0\n    if player_score > dealer_score:\n        if len(player) == 2 and {1, 10} == set(player):\n            return 1.5\n        return 1.0\n    elif player_score < dealer_score:\n        return -1.0\n    else:\n        return 0.0"}
{"task_id": 218, "completion_id": 2, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_score(hand: list[int]) -> int:\n        \"\"\"Calculate the score of a hand (with usable ace logic).\"\"\"\n        aces = hand.count(1)\n        total = sum(hand)\n        if aces and total + 10 <= 21:\n            total += 10\n        return total\n    player_score = hand_score(player)\n    dealer_score = hand_score(dealer)\n    if player_score > 21:\n        return -1.0\n    if dealer_score > 21:\n        return 1.0\n    if player_score > dealer_score:\n        result = 1.0\n    elif player_score < dealer_score:\n        result = -1.0\n    else:\n        result = 0.0\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        return len(hand) == 2 and hand.count(1) == 1 and (hand.count(10) == 1)\n    if result == 1.0 and is_natural_blackjack(player):\n        return 1.5\n    return float(result)"}
{"task_id": 218, "completion_id": 3, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_value(hand: list[int]) -> int:\n        \"\"\"Calculate the best score of a hand in Blackjack (\u226421 if possible).\"\"\"\n        total = sum(hand)\n        aces = hand.count(1)\n        while aces > 0 and total + 10 <= 21:\n            return total + 10\n            aces -= 1\n        return total\n    player_score = hand_value(player)\n    dealer_score = hand_value(dealer)\n    if player_score > 21:\n        return -1.0\n    if dealer_score > 21:\n        return 1.0\n    if player_score > dealer_score:\n        result = 1.0\n    elif player_score < dealer_score:\n        result = -1.0\n    else:\n        result = 0.0\n    if player_score == 21 and len(player) == 2 and (1 in player) and (10 in player):\n        result = 1.5\n    return result"}
{"task_id": 218, "completion_id": 4, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_score(hand: list[int]) -> int:\n        \"\"\"Calculate the best possible score for a hand in Blackjack.\"\"\"\n        score = sum(hand)\n        aces = hand.count(1)\n        while aces > 0 and score + 10 <= 21:\n            score += 10\n            aces -= 1\n        return score\n    player_score = hand_score(player)\n    dealer_score = hand_score(dealer)\n    if player_score > 21:\n        return -1.0\n    if dealer_score > 21:\n        return 1.0\n    if player_score > dealer_score:\n        player_blackjack = len(player) == 2 and player_score == 21\n        if player_blackjack:\n            return 1.5\n        else:\n            return 1.0\n    elif player_score < dealer_score:\n        return -1.0\n    else:\n        return 0.0"}
{"task_id": 218, "completion_id": 5, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def get_hand_value(hand: list[int]) -> int:\n        score = sum(hand)\n        num_aces = hand.count(1)\n        while num_aces > 0 and score + 10 <= 21:\n            score += 10\n            num_aces -= 1\n        return score\n    player_value = get_hand_value(player)\n    dealer_value = get_hand_value(dealer)\n    if player_value > 21:\n        return -1.0\n    if dealer_value > 21:\n        return 1.0\n    if player_value > dealer_value:\n        if len(player) == 2 and {1, 10} == set(player):\n            return 1.5\n        return 1.0\n    elif player_value < dealer_value:\n        return -1.0\n    else:\n        return 0.0"}
{"task_id": 218, "completion_id": 6, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def calculate_score(hand: list[int]) -> int:\n        total = sum(hand)\n        num_aces = hand.count(1)\n        while num_aces > 0 and total + 10 <= 21:\n            total += 10\n            num_aces -= 1\n        return total\n    player_score = calculate_score(player)\n    dealer_score = calculate_score(dealer)\n    if player_score > 21:\n        return -1.0\n    if dealer_score > 21:\n        return 1.0\n    if player_score > dealer_score:\n        if len(player) == 2 and player_score == 21:\n            return 1.5\n        else:\n            return 1.0\n    elif player_score == dealer_score:\n        return 0.0\n    else:\n        return -1.0"}
{"task_id": 218, "completion_id": 7, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_score(hand: list[int]) -> int:\n        \"\"\"Calculate the score of a hand with usable ace logic.\"\"\"\n        aces = hand.count(1)\n        score = sum(hand)\n        if aces > 0 and score + 10 <= 21:\n            score += 10\n        return score\n    player_score = hand_score(player)\n    dealer_score = hand_score(dealer)\n    if player_score > 21:\n        return -1\n    if dealer_score > 21:\n        return 1\n    if player_score > dealer_score:\n        if len(player) == 2 and 1 in player and (10 in player):\n            return 1.5\n        return 1\n    elif player_score < dealer_score:\n        return -1\n    else:\n        return 0"}
{"task_id": 218, "completion_id": 8, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_value(hand: list[int]) -> int:\n        aces = hand.count(1)\n        score = sum(hand)\n        if aces == 0:\n            return score\n        for _ in range(aces):\n            if score + 10 <= 21:\n                return score + 10\n            score -= 1\n        return score\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        return len(hand) == 2 and 1 in hand and (10 in hand)\n    player_score = hand_value(player)\n    dealer_score = hand_value(dealer)\n    player_bust = player_score > 21\n    dealer_bust = dealer_score > 21\n    if player_bust:\n        return -1.0\n    elif dealer_bust:\n        base_reward = 1.0\n    elif player_score > dealer_score:\n        base_reward = 1.0\n    elif player_score < dealer_score:\n        base_reward = -1.0\n    else:\n        base_reward = 0.0\n    if base_reward == 1.0 and is_natural_blackjack(player):\n        return 1.5\n    return base_reward"}
{"task_id": 218, "completion_id": 9, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_score(hand: list[int]) -> int:\n        score = sum(hand)\n        aces = hand.count(1)\n        while aces > 0 and score + 10 <= 21:\n            score += 10\n            aces -= 1\n        return score\n    player_score = hand_score(player)\n    dealer_score = hand_score(dealer)\n    if player_score > 21:\n        return -1.0\n    if dealer_score > 21:\n        return 1.0\n    if player_score > dealer_score:\n        if len(player) == 2 and player_score == 21:\n            return 1.5\n        return 1.0\n    elif player_score == dealer_score:\n        return 0.0\n    else:\n        return -1.0"}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values. All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values. Must be the same length as \n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals. If the inputs are invalid the \n        function returns -1.\n    \"\"\"\n    try:\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n        if actual.shape != predicted.shape:\n            return -1\n        if np.any(actual < 0) or np.any(predicted < 0):\n            return -1\n        errors = squared_log_error(actual, predicted)\n        msle = np.mean(errors)\n        return round(float(msle), 4)\n    except:\n        return -1"}
{"task_id": 221, "completion_id": 1, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Return element-wise squared logarithmic errors.\"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    try:\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n        if actual.shape != predicted.shape:\n            return -1\n        if np.any(actual < 0) or np.any(predicted < 0):\n            return -1\n        errors = squared_log_error(actual, predicted)\n        msle = np.mean(errors)\n        return round(msle, 4)\n    except Exception:\n        return -1"}
{"task_id": 221, "completion_id": 2, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Return element-wise squared logarithmic errors.\"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    try:\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n    except:\n        return -1\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    errors = squared_log_error(actual, predicted)\n    msle = np.mean(errors)\n    return round(msle, 4)"}
{"task_id": 221, "completion_id": 3, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Returns element-wise squared log errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    a = np.asarray(actual)\n    p = np.asarray(predicted)\n    if a.shape != p.shape:\n        return -1\n    if np.any(a < 0) or np.any(p < 0):\n        return -1\n    errors = squared_log_error(a, p)\n    return round(np.mean(errors), 4)"}
{"task_id": 221, "completion_id": 4, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Returns element-wise squared logarithmic errors.\"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    err = squared_log_error(actual, predicted)\n    if isinstance(err, int) and err == -1:\n        return -1\n    msle = np.mean(err)\n    return round(float(msle), 4)"}
{"task_id": 221, "completion_id": 5, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Return element-wise squared logarithmic errors.\"\"\"\n    a = np.array(actual)\n    p = np.array(predicted)\n    log_actual = np.log1p(a)\n    log_pred = np.log1p(p)\n    return (log_actual - log_pred) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values. All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values. Must be same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals. Returns -1 if inputs are invalid.\n    \"\"\"\n    a = np.array(actual)\n    p = np.array(predicted)\n    if a.shape != p.shape:\n        return -1\n    if np.any(a < 0) or np.any(p < 0):\n        return -1\n    errors = squared_log_error(a, p)\n    return float(np.round(np.mean(errors), 4))"}
{"task_id": 221, "completion_id": 6, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Returns element-wise squared log errors.\"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    try:\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n        if actual.shape != predicted.shape:\n            return -1\n        if np.any(actual < 0) or np.any(predicted < 0):\n            return -1\n        errors = squared_log_error(actual, predicted)\n        msle = np.mean(errors)\n        return round(msle, 4)\n    except:\n        return -1"}
{"task_id": 221, "completion_id": 7, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Returns element-wise squared logarithmic errors.\"\"\"\n    a = np.array(actual, dtype=float)\n    p = np.array(predicted, dtype=float)\n    return np.square(np.log1p(a) - np.log1p(p))\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    a = np.array(actual, dtype=float)\n    p = np.array(predicted, dtype=float)\n    if a.shape != p.shape:\n        return -1\n    if (a < 0).any() or (p < 0).any():\n        return -1\n    errors = squared_log_error(actual, predicted)\n    msle = np.mean(errors)\n    return round(float(msle), 4)"}
{"task_id": 221, "completion_id": 8, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Returns an array of element-wise squared logarithmic errors.\"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return np.array([])\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If inputs are invalid, returns \u20111.\n    \"\"\"\n    actual = np.asarray(actual)\n    predicted = np.asarray(predicted)\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    errors = squared_log_error(actual, predicted)\n    if errors.size == 0:\n        return -1\n    msle = np.mean(errors)\n    return round(msle, 4)"}
{"task_id": 221, "completion_id": 9, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Returns the element-wise squared logarithmic error.\"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return np.array([])\n    return np.log1p(actual) - np.log1p(predicted)\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    try:\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n        if actual.shape != predicted.shape:\n            return -1\n        if np.any(actual < 0) or np.any(predicted < 0):\n            return -1\n        errors = squared_log_error(actual, predicted)\n        msle = np.mean(errors ** 2)\n        return round(float(msle), 4)\n    except:\n        return -1"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    is_array = isinstance(z, (list, np.ndarray))\n    z_array = np.array(z, dtype=np.float64)\n    exp_z_neg_abs = np.exp(-np.abs(z_array))\n    positive_mask = z_array >= 0\n    sig = np.empty_like(z_array)\n    sig[positive_mask] = 1 / (1 + exp_z_neg_abs[positive_mask])\n    sig[~positive_mask] = exp_z_neg_abs[~positive_mask] / (1 + exp_z_neg_abs[~positive_mask])\n    sig = np.round(sig, 4)\n    if not is_array:\n        return float(sig)\n    else:\n        return sig.tolist()"}
{"task_id": 222, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    is_scalar = isinstance(z, (int, float))\n    is_list = isinstance(z, list)\n    z_array = np.array(z, dtype=np.float64) if not is_scalar else z\n    exp_vals = np.where(z_array >= 0, np.exp(-z_array), np.exp(z_array))\n    sig = np.where(z_array >= 0, 1 / (1 + exp_vals), exp_vals / (1 + exp_vals))\n    result = np.round(sig, 4)\n    if is_scalar:\n        return float(result)\n    elif is_list:\n        return result.tolist()\n    else:\n        return result.tolist()"}
{"task_id": 222, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    is_scalar = np.isscalar(z)\n    arr = np.array(z, dtype=float)\n    with np.errstate(over='ignore', under='ignore'):\n        neg = arr < 0\n        exp_vals = np.zeros_like(arr)\n        exp_vals[neg] = np.exp(arr[neg])\n        exp_vals[~neg] = np.exp(-arr[~neg])\n        result = np.zeros_like(arr)\n        result[neg] = exp_vals[neg] / (1 + exp_vals[neg])\n        result[~neg] = 1 / (1 + exp_vals[~neg])\n    result = np.round(result, 4)\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 222, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if not isinstance(z, np.ndarray):\n        z = np.array(z)\n    positive_mask = z >= 0\n    negative_mask = z < 0\n    sig = np.zeros_like(z)\n    sig[positive_mask] = 1.0 / (1 + np.exp(-z[positive_mask]))\n    sig[negative_mask] = np.exp(z[negative_mask]) / (1 + np.exp(z[negative_mask]))\n    sig_rounded = np.round(sig, 4)\n    if z.ndim == 0:\n        return float(sig_rounded.item())\n    else:\n        return sig_rounded.tolist()"}
{"task_id": 222, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z = np.asarray(z)\n    exp_val = np.exp(-z)\n    result = 1 / (1 + exp_val)\n    result[z < 0] = np.exp(z[z < 0]) / (1 + np.exp(z[z < 0]))\n    result = np.round(result, 4)\n    if np.isscalar(z):\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 222, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n\n    def _apply_sigmoid(x):\n        sign = np.where(x >= 0, 1, -1)\n        exp_val = np.exp(-sign * x)\n        return (1 / (1 + exp_val)).round(4)\n    islist = isinstance(z, list)\n    isnumpy = isinstance(z, np.ndarray)\n    is_scalar = np.isscalar(z)\n    if is_scalar:\n        z = np.array([z])\n    z_array = np.array(z, dtype=float)\n    output_array = _apply_sigmoid(z_array)\n    if is_scalar:\n        return float(output_array[0])\n    if islist:\n        return output_array.tolist()\n    return output_array.tolist()"}
{"task_id": 222, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z_array = np.array(z, dtype=float) if not isinstance(z, np.ndarray) else z\n    z_positive = z_array >= 0\n    result = np.empty_like(z_array)\n    result[z_positive] = 1 / (1 + np.exp(-z_array[z_positive]))\n    result[~z_positive] = np.exp(z_array[~z_positive]) / (1 + np.exp(z_array[~z_positive]))\n    rounded_result = np.round(result, 4)\n    if rounded_result.ndim == 0:\n        return float(rounded_result[()])\n    return rounded_result.tolist()"}
{"task_id": 222, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if isinstance(z, list):\n        z = np.array(z, dtype=np.float64)\n    elif isinstance(z, (int, float)):\n        z = np.array([z], dtype=np.float64)\n    exp_z = np.exp(-np.abs(z))\n    if np.any(z < 0):\n        exp_z[z < 0] = 1.0 / exp_z[z < 0]\n    sig = exp_z / (1.0 + exp_z)\n    sig_rounded = np.round(sig, 4)\n    if isinstance(z, np.ndarray) and z.ndim == 1:\n        return sig_rounded.tolist()\n    elif isinstance(z, np.ndarray) and z.ndim == 2:\n        return sig_rounded.tolist()\n    else:\n        return float(sig_rounded[0])"}
{"task_id": 222, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z = np.array(z, dtype=np.float64)\n    result = np.where(z >= 0, 1.0 / (1.0 + np.exp(-z)), np.exp(z) / (1.0 + np.exp(z)))\n    result = np.round(result, 4)\n    if z.ndim == 0:\n        return float(result.item())\n    else:\n        return result.tolist()"}
{"task_id": 222, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    is_scalar = np.isscalar(z)\n    arr = np.array(z) if not is_scalar else np.array([z])\n    result = np.where(arr >= 0, 1 / (1 + np.exp(-arr)), np.exp(arr) / (1 + np.exp(arr)))\n    result = np.around(result, decimals=4)\n    return float(result[0]) if is_scalar else result.tolist()"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n\n    def _leaky_relu_recursive(x, a):\n        if isinstance(x, list):\n            return [_leaky_relu_recursive(item, a) for item in x]\n        elif isinstance(x, np.ndarray):\n            activated = np.where(x >= 0, x, a * x)\n            return activated.tolist()\n        else:\n            return x if x >= 0 else a * x\n    return _leaky_relu_recursive(z, a)"}
{"task_id": 224, "completion_id": 1, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return z if z >= 0 else a * z\n    elif isinstance(z, np.ndarray):\n        return (z >= 0) * z + (z < 0) * a * z\n    elif isinstance(z, list):\n        return [leaky_relu(item, a) for item in z]\n    else:\n        raise TypeError('Input must be a scalar, list, or numpy.ndarray')"}
{"task_id": 224, "completion_id": 2, "solution": "import numpy as np\nimport numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n\n    def apply_activation(x):\n        if isinstance(x, list):\n            return [apply_activation(val) for val in x]\n        else:\n            return x if x >= 0 else a * x\n    if isinstance(z, np.ndarray):\n        return leaky_relu(z.tolist(), a)\n    elif isinstance(z, list):\n        return [leaky_relu(item, a) if isinstance(item, list) else leaky_relu([item], a)[0] if isinstance(item, (int, float)) else item for item in z]\n    else:\n        return z if z >= 0 else a * z"}
{"task_id": 224, "completion_id": 3, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    is_scalar = np.isscalar(z)\n    if is_scalar:\n        z = [z]\n    z_array = np.array(z)\n    result = np.where(z_array >= 0, z_array, a * z_array)\n\n    def to_list(arr):\n        if isinstance(arr, np.ndarray):\n            return [to_list(item) for item in arr]\n        else:\n            return arr\n    result_list = to_list(result)\n    if is_scalar:\n        return result_list[0]\n    return result_list"}
{"task_id": 224, "completion_id": 4, "solution": "import numpy as np\nimport numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    arr = np.array(z) if not isinstance(z, np.ndarray) else z\n    arr = np.where(arr >= 0, arr, a * arr)\n    return arr.tolist()\narr = np.array([[1, -0.5], [0, -10]])"}
{"task_id": 224, "completion_id": 5, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n\n    def apply_leaky_relu_recursive(x):\n        if isinstance(x, (int, float)):\n            return x if x >= 0 else a * x\n        elif isinstance(x, list):\n            return [apply_leaky_relu_recursive(el) for el in x]\n        elif isinstance(x, np.ndarray):\n            activated = np.where(x >= 0, x, a * x)\n            return activated.tolist()\n        else:\n            raise TypeError(f'Unsupported type {type(x)} in input')\n    return apply_leaky_relu_recursive(z)"}
{"task_id": 224, "completion_id": 6, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n\n    def apply_leaky_relu(x):\n        if isinstance(x, (float, int)):\n            return x if x >= 0 else a * x\n        elif isinstance(x, np.ndarray):\n            return np.where(x >= 0, x, a * x).tolist()\n        elif isinstance(x, list):\n            return [apply_leaky_relu(item) for item in x]\n        else:\n            raise TypeError('Unsupported input type: {}'.format(type(x)))\n    return apply_leaky_relu(z)"}
{"task_id": 224, "completion_id": 7, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been\n        transformed by the Leaky ReLU activation.\n    \"\"\"\n\n    def apply_leaky_relu(x):\n        if isinstance(x, (int, float)):\n            return x if x >= 0 else a * x\n        elif isinstance(x, list):\n            return [apply_leaky_relu(i) for i in x]\n        elif isinstance(x, np.ndarray):\n            return x * 0 + x * (x >= 0) + (a * x * (x < 0)).tolist()\n        else:\n            raise TypeError('Unsupported input type: {}'.format(type(x)))\n    return apply_leaky_relu(z)"}
{"task_id": 224, "completion_id": 8, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n\n    def apply_leaky_relu(x):\n        if x >= 0:\n            return x\n        else:\n            return a * x\n\n    def recursive_leaky_relu(item):\n        if isinstance(item, (list, np.ndarray)):\n            return type(item)([recursive_leaky_relu(subitem) for subitem in item])\n        else:\n            return apply_leaky_relu(item)\n    if isinstance(z, np.ndarray):\n        processed = recursive_leaky_relu(z)\n        return processed.tolist()\n    else:\n        return recursive_leaky_relu(z)"}
{"task_id": 224, "completion_id": 9, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    z_array = np.array(z, dtype=float)\n    activated = np.where(z_array >= 0, z_array, a * z_array)\n    return activated.tolist()"}
{"task_id": 226, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    alphas = []\n    stumps = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        for feature_idx in range(n_features):\n            thresholds = X_train[:, feature_idx]\n            unique_thresholds = np.unique(thresholds)\n            for threshold in unique_thresholds:\n                for polarity in (1, -1):\n                    predictions = polarity * np.sign(X_train[:, feature_idx] - threshold)\n                    error = np.sum(sample_weights[predictions != y_train])\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_idx, threshold, polarity)\n        error = max(1e-10, best_error)\n        alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        alphas.append(alpha)\n        stumps.append(best_stump)\n        predictions = polarity * np.sign(X_train[:, best_stump[0]] - best_stump[1])\n        update = sample_weights * np.exp(-alpha * y_train * predictions)\n        sample_weights = update / np.sum(update)\n    final_preds = np.zeros(X_test.shape[0])\n    for ((feature_idx, threshold, polarity), alpha) in zip(stumps, alphas):\n        predictions = alpha * polarity * np.sign(X_test[:, feature_idx] - threshold)\n        final_preds += predictions\n    return [int(np.sign(pred)) for pred in final_preds]"}
{"task_id": 226, "completion_id": 1, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    alphas = []\n    models = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        best_prediction = None\n        for feature_idx in range(n_features):\n            feature_vals = X_train[:, feature_idx]\n            thresholds = np.unique(feature_vals)\n            for polarity in [1, -1]:\n                for threshold in thresholds:\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[feature_vals < threshold] = -1\n                    else:\n                        predictions[feature_vals < threshold] = 1\n                    error = np.sum(sample_weights[y_train != predictions])\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_idx, threshold, polarity)\n                        best_prediction = predictions\n        if best_error == 0:\n            best_error = 1e-10\n        elif best_error >= 0.5:\n            break\n        alpha = 0.5 * np.log((1 - best_error) / (best_error + 1e-10))\n        alphas.append(alpha)\n        models.append(best_stump)\n        normalization = 2 * np.sqrt(best_error * (1 - best_error))\n        sample_weights *= np.exp(-alpha * y_train * best_prediction)\n        sample_weights /= np.sum(sample_weights)\n    n_test = X_test.shape[0]\n    predictions = np.zeros(n_test)\n    for (i, (feature_idx, threshold, polarity)) in enumerate(models):\n        alpha = alphas[i]\n        feature_vals = X_test[:, feature_idx]\n        stump_pred = np.ones(n_test)\n        if polarity == 1:\n            stump_pred[feature_vals < threshold] = -1\n        else:\n            stump_pred[feature_vals < threshold] = 1\n        predictions += alpha * stump_pred\n    return list(np.sign(predictions).astype(int))"}
{"task_id": 226, "completion_id": 2, "solution": "import numpy as np\nimport math\nfrom typing import List, Tuple\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> List[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in X_test. Each element must be either -1 or 1.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    w = np.full(n_samples, 1 / n_samples)\n    alphas = []\n    classifiers = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        best_prediction = None\n        for feature_idx in range(n_features):\n            for sample_idx in range(n_samples):\n                threshold = X_train[sample_idx, feature_idx]\n                for polarity in [1, -1]:\n                    prediction = np.where(X_train[:, feature_idx] < threshold, -1 if polarity == 1 else 1, 1 if polarity == 1 else -1)\n                    error = np.sum(w[y_train != prediction])\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_idx, threshold, polarity)\n                        best_prediction = prediction\n        error = best_error\n        error += 1e-10\n        alpha = 0.5 * np.log((1 - error) / error)\n        alphas.append(alpha)\n        classifiers.append(best_stump)\n        y_pred = best_prediction\n        w = w * np.exp(-alpha * y_train * y_pred)\n        w = w / np.sum(w)\n    n_test_samples = X_test.shape[0]\n    result = np.zeros(n_test_samples)\n    for (alpha, (feature_idx, threshold, polarity)) in zip(alphas, classifiers):\n        prediction = np.where(X_test[:, feature_idx] < threshold, -1 if polarity == 1 else 1, 1 if polarity == 1 else -1)\n        result += alpha * prediction\n    result = np.sign(result)\n    return result.tolist()"}
{"task_id": 226, "completion_id": 3, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    alphas = []\n    classifiers = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        for feature_index in range(n_features):\n            possible_thresholds = np.unique(X_train[:, feature_index])\n            thresholds = (possible_thresholds[:-1] + possible_thresholds[1:]) / 2.0\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.where((X_train[:, feature_index] < threshold) * polarity, -1, 1)\n                    error = np.sum(weights[y_train != predictions])\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_index, threshold, polarity)\n        error = max(best_error, 1e-10)\n        error = min(error, 1 - 1e-10)\n        alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        alphas.append(alpha)\n        classifiers.append(best_stump)\n        predictions = np.where((X_train[:, best_stump[0]] < best_stump[1]) * best_stump[2], -1, 1)\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n    n_test_samples = X_test.shape[0]\n    final_predictions = np.zeros(n_test_samples)\n    for (alpha, (feature_index, threshold, polarity)) in zip(alphas, classifiers):\n        predictions = np.where((X_test[:, feature_index] < threshold) * polarity, -1, 1)\n        final_predictions += alpha * predictions\n    return [int(np.sign(p)) for p in final_predictions]"}
{"task_id": 226, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    alphas = []\n    stumps = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        for feature_i in range(n_features):\n            unique_thresholds = np.unique(X_train[:, feature_i])\n            for threshold in unique_thresholds:\n                for polarity in [1, -1]:\n                    pred = polarity * np.where(X_train[:, feature_i] < threshold, -polarity, polarity)\n                    error = np.sum(sample_weights * (pred != y_train))\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_i, threshold, polarity)\n        error = max(1e-10, min(1 - 1e-10, best_error))\n        alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        alphas.append(alpha)\n        stumps.append(best_stump)\n        y_pred = polarity * np.where(X_train[:, best_stump[0]] < best_stump[1], -best_stump[2], best_stump[2])\n        sample_weights *= np.exp(-alpha * y_train * y_pred)\n        sample_weights /= np.sum(sample_weights)\n    y_test_preds = np.zeros(X_test.shape[0])\n    for (alpha, (feature_i, threshold, polarity)) in zip(alphas, stumps):\n        decision = np.where(X_test[:, feature_i] < threshold, -polarity, polarity)\n        y_test_preds += alpha * decision\n    return [int(np.sign(pred)) for pred in y_test_preds]"}
{"task_id": 226, "completion_id": 5, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    classifiers = []\n    for t in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        for feature_idx in range(n_features):\n            feature_values = X_train[:, feature_idx]\n            for threshold in np.unique(feature_values):\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples) * polarity * -1\n                    predictions[feature_values > threshold] = polarity\n                    errors = sample_weights[y_train != predictions]\n                    weighted_error = np.sum(errors)\n                    if weighted_error < best_error:\n                        best_error = weighted_error\n                        best_stump = (feature_idx, threshold, polarity)\n        error = max(best_error, 1e-10)\n        alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        (feature_idx, threshold, polarity) = best_stump\n        feature_values = X_train[:, feature_idx]\n        predictions = np.ones(n_samples) * polarity * -1\n        predictions[feature_values > threshold] = polarity\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n        classifiers.append((feature_idx, threshold, polarity, alpha))\n    predictions = np.zeros(X_test.shape[0])\n    for (feature_idx, threshold, polarity, alpha) in classifiers:\n        test_feature_values = X_test[:, feature_idx]\n        bin_pred = np.ones(X_test.shape[0]) * polarity * -1\n        bin_pred[test_feature_values > threshold] = polarity\n        predictions += alpha * bin_pred\n    final_predictions = np.sign(predictions)\n    return list(final_predictions.astype(int))\nX_train = np.array([[1], [2], [3], [4]])\ny_train = np.array([1, 1, -1, -1])\nX_test = np.array([[1.5], [3.5]])\npredictions = adaboost_predict(X_train, y_train, X_test, n_clf=5)"}
{"task_id": 226, "completion_id": 6, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    w = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        for feature_idx in range(n_features):\n            sorted_idx = np.argsort(X_train[:, feature_idx])\n            X_sorted = X_train[sorted_idx, feature_idx]\n            y_sorted = y_train[sorted_idx]\n            w_sorted = w[sorted_idx]\n            for i in range(n_samples - 1):\n                threshold = (X_sorted[i] + X_sorted[i + 1]) / 2\n                for polarity in [1, -1]:\n                    predictions = np.where(X_train[:, feature_idx] < threshold, polarity, -polarity)\n                    error = np.sum(w * (predictions != y_train))\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_idx, threshold, polarity)\n        if best_error == 0:\n            epsilon = 1e-10\n        else:\n            epsilon = best_error\n        epsilon = max(epsilon, 1e-10)\n        alpha = 0.5 * np.log((1 - epsilon) / (epsilon + 1e-10))\n        classifiers.append((best_stump[0], best_stump[1], best_stump[2], alpha))\n        (feature_idx, threshold, polarity) = best_stump\n        predictions = np.where(X_train[:, feature_idx] < threshold, polarity, -polarity)\n        w *= np.exp(-alpha * y_train * predictions)\n        w /= np.sum(w)\n    predictions = np.zeros(X_test.shape[0])\n    for (feature_idx, threshold, polarity, alpha) in classifiers:\n        pred = np.where(X_test[:, feature_idx] < threshold, polarity, -polarity)\n        predictions += alpha * pred\n    y_pred = np.sign(predictions).astype(int)\n    return y_pred.tolist()"}
{"task_id": 226, "completion_id": 7, "solution": "import numpy as np\nimport math\nimport numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    alphas = []\n    stumps = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        for feature_idx in range(n_features):\n            feature_values = X_train[:, feature_idx]\n            unique_values = np.unique(feature_values)\n            for threshold in unique_values:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[feature_values < threshold] = -1\n                    else:\n                        predictions[feature_values < threshold] = 1\n                    weighted_error = np.sum(sample_weights[y_train != predictions])\n                    if weighted_error < best_error:\n                        best_error = weighted_error\n                        best_stump = (feature_idx, threshold, polarity)\n        error = best_error\n        if error == 0:\n            alpha = 100\n        else:\n            alpha = 0.5 * math.log((1 - error) / (error + 1e-10))\n        stumps.append(best_stump)\n        alphas.append(alpha)\n        (feature_idx, threshold, polarity) = best_stump\n        feature_values = X_train[:, feature_idx]\n        predictions = np.ones(n_samples)\n        if polarity == 1:\n            predictions[feature_values < threshold] = -1\n        else:\n            predictions[feature_values < threshold] = 1\n        is_correct = y_train == predictions\n        sample_weights[is_correct] *= np.exp(-alpha)\n        sample_weights[~is_correct] *= np.exp(alpha)\n        sample_weights /= np.sum(sample_weights)\n    test_pred = np.zeros(X_test.shape[0])\n    for (alpha, (feature_idx, threshold, polarity)) in zip(alphas, stumps):\n        feature_values = X_test[:, feature_idx]\n        stump_pred = np.ones(X_test.shape[0])\n        if polarity == 1:\n            stump_pred[feature_values < threshold] = -1\n        else:\n            stump_pred[feature_values < threshold] = 1\n        test_pred += alpha * stump_pred\n    return [1 if pred > 0 else -1 for pred in test_pred]\nX_train = np.array([[1.0], [2.0], [3.0], [4.0], [5.0]])\ny_train = np.array([1, 1, -1, -1, -1])\nX_test = np.array([[1.0], [2.5], [4.0]])"}
{"task_id": 226, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        best_prediction = None\n        for feature_idx in range(n_features):\n            unique_vals = np.unique(X_train[:, feature_idx])\n            for threshold in unique_vals:\n                for polarity in [1, -1]:\n                    pred = np.ones(n_samples)\n                    if polarity == 1:\n                        pred[X_train[:, feature_idx] < threshold] = -1\n                    else:\n                        pred[X_train[:, feature_idx] < threshold] = 1\n                    error = np.sum(sample_weights[pred != y_train])\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_idx, threshold, polarity)\n                        best_prediction = pred\n        error = max(best_error, 1e-10)\n        error = min(error, 1 - 1e-10)\n        alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        alphas.append(alpha)\n        stumps.append(best_stump)\n        pred = best_prediction\n        sample_weights *= np.exp(-alpha * y_train * pred)\n        sample_weights /= np.sum(sample_weights)\n    y_pred = np.zeros(X_test.shape[0])\n    for ((feature_idx, threshold, polarity), alpha) in zip(stumps, alphas):\n        stump_pred = np.ones(X_test.shape[0])\n        if polarity == 1:\n            stump_pred[X_test[:, feature_idx] < threshold] = -1\n        else:\n            stump_pred[X_test[:, feature_idx] < threshold] = 1\n        y_pred += alpha * stump_pred\n    return [int(np.sign(y)) for y in y_pred]"}
{"task_id": 226, "completion_id": 9, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    alphas = []\n    stumps = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        for feature_idx in range(n_features):\n            feature_values = X_train[:, feature_idx]\n            thresholds = np.unique(feature_values)\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.where(X_train[:, feature_idx] < threshold, -polarity, polarity)\n                    error = np.sum(sample_weights * (predictions != y_train))\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_idx, threshold, polarity)\n        if best_error >= 0.5:\n            break\n        error_denominator = best_error + 1e-10\n        alpha = 0.5 * np.log((1 - best_error) / error_denominator)\n        alphas.append(alpha)\n        stumps.append(best_stump)\n        (feature_idx, threshold, polarity) = best_stump\n        predictions = np.where(X_train[:, feature_idx] < threshold, -polarity, polarity)\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n    n_test_samples = X_test.shape[0]\n    predictions = np.zeros(n_test_samples)\n    for (alpha, stump) in zip(alphas, stumps):\n        (feature_idx, threshold, polarity) = stump\n        stump_pred = np.where(X_test[:, feature_idx] < threshold, -polarity, polarity)\n        predictions += alpha * stump_pred\n    final_predictions = np.sign(predictions).astype(int)\n    return final_predictions.tolist()"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    dim_0 = shape[0]\n    rest_dims = 1\n    for d in shape[1:]:\n        rest_dims *= d\n    A = np.random.randn(dim_0, rest_dims)\n    (U, S, Vh) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vh\n    result = scale * Q.reshape(shape)\n    return result.tolist()"}
{"task_id": 241, "completion_id": 1, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    shape_0 = shape[0]\n    rest_shape = np.prod(shape[1:])\n    A = np.random.normal(size=(shape_0, rest_shape))\n    (U, S, Vt) = np.linalg.svd(A, full_matrices=False)\n    k = min(shape_0, rest_shape)\n    if shape_0 == k:\n        Q = U\n    else:\n        Q = Vt\n    orthogonal_matrix = Q.reshape(shape) * scale\n    return orthogonal_matrix.tolist()"}
{"task_id": 241, "completion_id": 2, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    d0 = shape[0]\n    d_rest = np.prod(shape[1:])\n    A = np.random.randn(d0, d_rest)\n    (U, S, Vt) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n    Q = Q.reshape(shape)\n    result = scale * Q\n    return result.tolist()"}
{"task_id": 241, "completion_id": 3, "solution": "import numpy as np\nfrom numpy.linalg import svd\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    (rows, cols) = (shape[0], np.prod(shape[1:]))\n    A = np.random.randn(rows, cols)\n    (U, S, Vt) = svd(A, full_matrices=False)\n    k = min(rows, cols)\n    if rows <= cols:\n        Q = U\n    else:\n        Q = Vt\n    result = scale * Q.reshape(shape)\n    return result.tolist()\nshape = (2, 2)\nscale = 0.5"}
{"task_id": 241, "completion_id": 4, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    d0 = shape[0]\n    rest_dim = np.prod(shape[1:])\n    A = np.random.randn(d0, rest_dim)\n    (U, _, Vt) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n    Q = Q.reshape(shape)\n    Q *= scale\n    return Q.tolist()"}
{"task_id": 241, "completion_id": 5, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    dim_0 = shape[0]\n    rest_dims_product = 1\n    for dim in shape[1:]:\n        rest_dims_product *= dim\n    A = np.random.randn(dim_0, rest_dims_product)\n    (U, S, Vt) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n    result = Q.reshape(shape)\n    result *= scale\n    return result.tolist()\nshape = (2, 2)\nscale = 0.5"}
{"task_id": 241, "completion_id": 6, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    dim_0 = shape[0]\n    dim_rest = np.prod(shape[1:])\n    flat_shape = (dim_0, dim_rest)\n    A = np.random.normal(size=flat_shape)\n    (U, _, Vt) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n    result = scale * Q.reshape(shape)\n    return result.tolist()"}
{"task_id": 241, "completion_id": 7, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    d0 = shape[0]\n    rest_dims = shape[1:]\n    total_rest = np.prod(rest_dims)\n    A = np.random.randn(d0, total_rest)\n    (U, _, Vh) = np.linalg.svd(A, full_matrices=False)\n    k = min(d0, total_rest)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vh\n    Q_reshaped = scale * Q.reshape(shape)\n    return Q_reshaped.tolist()"}
{"task_id": 241, "completion_id": 8, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers. Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix. Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor. If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    shape_2d = (shape[0], np.prod(shape[1:]))\n    A = np.random.randn(*shape_2d)\n    (U, _, Vt) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n    Q = Q.reshape(shape) * scale\n    return Q.tolist()"}
{"task_id": 241, "completion_id": 9, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    size = 1\n    for s in shape[1:]:\n        size *= s\n    A = np.random.normal(size=(shape[0], size))\n    (U, S, Vt) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n    result = scale * Q.reshape(shape)\n    return result.tolist()\nshape = (2, 2)\nscale = 0.5"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s = np.array(state)\n    z1 = np.maximum(0, s.sum())\n    z2 = 4 * z1\n    z3 = 4 * z2\n    logits = 4 * z3\n    action_probs = 1 / 3 * np.ones(3)\n    state_value = 4 * z3\n    action_probs_rounded = [round(p, 4) for p in action_probs.tolist()]\n    state_value_rounded = round(state_value.item(), 4)\n    return (action_probs_rounded, state_value_rounded)\nstate = [1.0, 2.0, 3.0]"}
{"task_id": 243, "completion_id": 1, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s = np.array(state, dtype=np.float64)\n    z1 = np.max([0, s.sum()])\n    z2 = 4 * z1\n    z3 = 4 * z2\n    logits = 4 * z3\n    action_probs = [1.0 / 3.0] * 3\n    state_value = 4 * z3\n    action_probs_rounded = [round(p, 4) for p in action_probs]\n    state_value_rounded = round(state_value, 4)\n    return (action_probs_rounded, state_value_rounded)"}
{"task_id": 243, "completion_id": 2, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s = np.array(state)\n    z1 = np.maximum(0, s.sum())\n    z1 = np.array([z1] * 4)\n    z2 = 4 * z1\n    z3 = 4 * z2\n    logits = 4 * z3\n    exp_logits = np.exp(logits)\n    action_probs = exp_logits / exp_logits.sum()\n    state_value = 4 * z3[0]\n    action_probs = [round(prob, 4) for prob in action_probs.tolist()]\n    state_value = round(float(state_value), 4)\n    return (action_probs, state_value)\nstate = [1.0, 2.0, 3.0]"}
{"task_id": 243, "completion_id": 3, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef actor_critic_forward(state: List[float]) -> Tuple[List[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s = np.array(state)\n    sum_s = s[0] + s[1] + s[2]\n    z1 = np.maximum(0, sum_s)\n    z2 = 4 * z1\n    z3 = 4 * z2\n    logits = 4 * z3\n    action_probs = np.full(3, logits / logits.sum())\n    state_value = 4 * z3\n    action_probs = [round(prob, 4) for prob in action_probs.tolist()]\n    state_value = round(float(state_value), 4)\n    return (action_probs, state_value)"}
{"task_id": 243, "completion_id": 4, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state, dtype=np.float64)\n    z1_sum = state.sum()\n    z1 = np.maximum(0.0, z1_sum)\n    z1_array = np.full(4, z1)\n    z2_sum = z1_array.sum()\n    z2 = np.maximum(0.0, z2_sum)\n    z2_array = np.full(4, z2)\n    z3_sum = z2_array.sum()\n    z3 = np.maximum(0.0, z3_sum)\n    z3_array = np.full(4, z3)\n    logits_sum = z3_array.sum()\n    logits = np.full(3, logits_sum)\n    exp_logits = np.exp(logits)\n    action_probs = exp_logits / exp_logits.sum()\n    action_probs = [round(p, 4) for p in action_probs.tolist()]\n    state_value = round(z3_array.sum(), 4)\n    return (action_probs, state_value)\nstate = [1.0, 2.0, 3.0]"}
{"task_id": 243, "completion_id": 5, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s = np.array(state).reshape(1, 3)\n    weights = [np.ones((3, 4)), np.ones((4, 4)), np.ones((4, 4))]\n    actor_weights = np.ones((4, 3))\n    critic_weights = np.ones((4, 1))\n    biases = [np.zeros(4), np.zeros(4), np.zeros(4)]\n    actor_bias = np.zeros(3)\n    critic_bias = np.zeros(1)\n    z1 = np.maximum(0, s @ weights[0] + biases[0])\n    z2 = np.maximum(0, z1 @ weights[1] + biases[1])\n    z3 = np.maximum(0, z2 @ weights[2] + biases[2])\n    logits = z3 @ actor_weights + actor_bias\n    exp_logits = np.exp(logits)\n    action_probs = exp_logits / np.sum(exp_logits, axis=1, keepdims=True)\n    state_value = (z3 @ critic_weights + critic_bias).ravel()[0]\n    action_probs_rounded = [round(prob, 4) for prob in action_probs.ravel().tolist()]\n    return (action_probs_rounded, round(state_value, 4))"}
{"task_id": 243, "completion_id": 6, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s = np.array(state, dtype=np.float32)\n    z1 = np.maximum(0, s.sum())\n    z1 = np.array([z1] * 4)\n    z2 = np.maximum(0, z1.sum())\n    z2 = np.array([z2] * 4)\n    z3 = np.maximum(0, z2.sum())\n    z3 = np.array([z3] * 4)\n    logits = z3.sum()\n    logits = np.array([logits] * 3)\n    exp_logits = np.exp(logits)\n    action_probs = exp_logits / exp_logits.sum()\n    action_probs = [round(prob, 4) for prob in action_probs]\n    state_value = z3.sum()\n    state_value = round(state_value, 4)\n    return (action_probs, state_value)\nstate = [1.0, 2.0, 3.0]"}
{"task_id": 243, "completion_id": 7, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s = np.array(state, dtype=np.float32)\n    z1 = np.max((s.sum(), 0.0))\n    z2 = 4 * z1\n    z3 = 4 * z2\n    logits = 4 * z3\n    action_probs = [1.0 / 3.0] * 3\n    state_value = 4 * z3\n    action_probs = [round(prob, 4) for prob in action_probs]\n    state_value = round(state_value, 4)\n    return (action_probs, state_value)"}
{"task_id": 243, "completion_id": 8, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s = np.array(state).reshape(1, -1)\n    z1 = np.maximum(0, np.sum(s))\n    z2 = np.maximum(0, 4 * z1)\n    z3 = np.maximum(0, 4 * z2)\n    logits = np.full(3, 4 * z3).flatten()\n    action_probs = [1 / 3 for _ in range(3)]\n    state_value = 4 * z3\n    action_probs = [round(prob, 4) for prob in action_probs]\n    state_value = round(float(state_value), 4)\n    return (action_probs, state_value)"}
{"task_id": 243, "completion_id": 9, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s = np.array(state, dtype=float)\n    input_sum = np.sum(s)\n    z1 = np.maximum(0, input_sum)\n    z2 = np.maximum(0, 4 * z1)\n    z3 = np.maximum(0, 4 * z2)\n    logits = 4 * z3\n    exp_logits = np.exp(logits)\n    action_probs = exp_logits / np.sum(exp_logits)\n    state_value = 4 * z3\n    action_probs_rounded = [round(p, 4) for p in action_probs.tolist()]\n    state_value_rounded = round(float(state_value), 4)\n    return (action_probs_rounded, state_value_rounded)\nstate = [1.0, 2.0, 3.0]"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n\n    def relu(x):\n        return np.maximum(0, x)\n\n    def softmax(x):\n        exps = np.exp(x - np.max(x))\n        return exps / np.sum(exps)\n    x = np.array(state, dtype=np.float32)\n    x = relu(np.dot(x, np.array(params['W1'])) + np.array(params['b1']))\n    x = relu(np.dot(x, np.array(params['W2'])) + np.array(params['b2']))\n    x = relu(np.dot(x, np.array(params['W3'])) + np.array(params['b3']))\n    actor_output = np.dot(x, np.array(params['Wa'])) + np.array(params['ba'])\n    probabilities = softmax(actor_output)\n    value = np.dot(x, np.array(params['Wc'])) + np.array(params['bc'])[0]\n    probabilities = np.round(probabilities, 4).tolist()\n    value = round(value, 4)\n    if abs(value - 1.0) < 0.0001:\n        value = 1.0\n    elif abs(value - 0.0) < 0.0001:\n        value = 0.0\n    return (probabilities, value)"}
{"task_id": 249, "completion_id": 1, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    x = np.array(state)\n    x = np.dot(x, np.array(params['W1'])) + np.array(params['b1'])\n    x = np.maximum(0, x)\n    x = np.dot(x, np.array(params['W2'])) + np.array(params['b2'])\n    x = np.maximum(0, x)\n    x = np.dot(x, np.array(params['W3'])) + np.array(params['b3'])\n    x = np.maximum(0, x)\n    raw_actor = np.dot(x, np.array(params['Wa'])) + np.array(params['ba'])\n    exp_scores = np.exp(raw_actor - np.max(raw_actor))\n    probabilities = exp_scores / np.sum(exp_scores)\n    value = np.dot(x, np.array(params['Wc'])) + np.array(params['bc'])\n    probabilities = [round(p, 4) if round(p, 4) % 1 != 0 else round(p, 1) for p in probabilities]\n    value = round(value[0], 4) if round(value[0], 4) % 1 != 0 else round(value[0], 1)\n    return (probabilities, value)"}
{"task_id": 249, "completion_id": 2, "solution": "import numpy as np\nfrom typing import list\nimport numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n    \n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n    \n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n    \n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    h = np.array(state, dtype=np.float64)\n    h = np.dot(h, params['W1']) + params['b1']\n    h = np.maximum(0, h)\n    h = np.dot(h, params['W2']) + params['b2']\n    h = np.maximum(0, h)\n    h = np.dot(h, params['W3']) + params['b3']\n    h = np.maximum(0, h)\n    scores = np.dot(h, params['Wa']) + params['ba']\n    exp_scores = np.exp(scores - np.max(scores))\n    probabilities = exp_scores / exp_scores.sum()\n    value = float(np.dot(h, params['Wc']) + params['bc'])\n    probabilities = list(map(round, probabilities, [4] * len(probabilities)))\n    value = round(value, 4)\n    if all((p in [0.0, 1.0] for p in probabilities)):\n        probabilities = [round(p, 1) for p in probabilities]\n    value = round(value, 1) if value == 0.0 or value == 1.0 else value\n    return (probabilities, value)\nstate = [1.0, 2.0]\nparams = {'W1': [[3.0, 4.0], [5.0, 6.0]], 'b1': [0.1, 0.2], 'W2': [[1.0, 2.0], [3.0, 4.0]], 'b2': [0.1, 0.2], 'W3': [[0.5, 0.5], [0.5, 0.5]], 'b3': [0.1, 0.1], 'Wa': [[1.0], [2.0]], 'ba': [0.5], 'Wc': [1.0, 1.0], 'bc': [0.1]}"}
{"task_id": 249, "completion_id": 3, "solution": "import numpy as np\nfrom typing import list, Tuple\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    x = np.array(state, dtype=np.float64)\n    z1 = np.dot(x, np.array(params['W1'])) + np.array(params['b1'])\n    h1 = np.maximum(0, z1)\n    z2 = np.dot(h1, np.array(params['W2'])) + np.array(params['b2'])\n    h2 = np.maximum(0, z2)\n    z3 = np.dot(h2, np.array(params['W3'])) + np.array(params['b3'])\n    h3 = np.maximum(0, z3)\n    z_a = np.dot(h3, np.array(params['Wa'])) + np.array(params['ba'])\n    exp_z_a = np.exp(z_a - np.max(z_a))\n    act_probs = exp_z_a / exp_z_a.sum()\n    val = np.dot(h3, np.array(params['Wc'])) + np.array(params['bc'])\n    act_probs_rounded = [round(p, 4) if not p in {0.0, 1.0} else float(p) for p in act_probs]\n    val_rounded = round(val[0], 4) if val[0] not in {0.0, 1.0} else float(val[0])\n    return (act_probs_rounded, val_rounded)"}
{"task_id": 249, "completion_id": 4, "solution": "import numpy as np\nfrom typing import List\ndef actor_critic_forward(state: List[float], params: dict) -> tuple[List[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state, dtype=np.float64)\n    h1 = np.dot(state, params['W1']) + params['b1']\n    h1 = np.maximum(0, h1)\n    h2 = np.dot(h1, params['W2']) + params['b2']\n    h2 = np.maximum(0, h2)\n    h3 = np.dot(h2, params['W3']) + params['b3']\n    h3 = np.maximum(0, h3)\n    a_out = np.dot(h3, params['Wa']) + params['ba']\n    exp_a = np.exp(a_out - np.max(a_out))\n    softmax = exp_a / np.sum(exp_a)\n    c_out = np.dot(h3, params['Wc']) + params['bc']\n    rounded_softmax = [round(prob, 4) if not (prob == 0.0 or prob == 1.0) else round(prob, 1) for prob in softmax]\n    rounded_value = round(c_out[0], 4) if not (c_out[0] == 0.0 or c_out[0] == 1.0) else round(c_out[0], 1)\n    return (rounded_softmax, rounded_value)"}
{"task_id": 249, "completion_id": 5, "solution": "import numpy as np\nfrom typing import List\ndef actor_critic_forward(state: List[float], params: dict) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    x = np.array(state)\n    x = np.dot(x, params['W1']) + params['b1']\n    x = np.maximum(0, x)\n    x = np.dot(x, params['W2']) + params['b2']\n    x = np.maximum(0, x)\n    x = np.dot(x, params['W3']) + params['b3']\n    x = np.maximum(0, x)\n    scores = np.dot(x, params['Wa']) + params['ba']\n    exp_scores = np.exp(scores - np.max(scores))\n    probs = exp_scores / exp_scores.sum()\n    value = np.dot(x, params['Wc']) + params['bc']\n    probs = [round(p, 4) for p in probs]\n    value = round(value[0], 4) if len(value.shape) > 0 else round(value, 4)\n    if probs and (abs(probs[0] - 1.0) < 1e-06 or abs(probs[0] - 0.0) < 1e-06):\n        probs = [round(p, 1) for p in probs]\n    if value == 1.0 or value == 0.0:\n        value = round(value, 1)\n    return (probs, value)"}
{"task_id": 249, "completion_id": 6, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state_vec = np.array(state, dtype=np.float64).reshape(-1, 1)\n    W1 = np.array(params['W1'], dtype=np.float64)\n    b1 = np.array(params['b1'], dtype=np.float64).reshape(-1, 1)\n    h1 = np.maximum(0, W1 @ state_vec + b1)\n    W2 = np.array(params['W2'], dtype=np.float64)\n    b2 = np.array(params['b2'], dtype=np.float64).reshape(-1, 1)\n    h2 = np.maximum(0, W2 @ h1 + b2)\n    W3 = np.array(params['W3'], dtype=np.float64)\n    b3 = np.array(params['b3'], dtype=np.float64).reshape(-1, 1)\n    hidden = np.maximum(0, W3 @ h2 + b3)\n    Wa = np.array(params['Wa'], dtype=np.float64)\n    ba = np.array(params['ba'], dtype=np.float64).reshape(-1, 1)\n    action_scores = Wa @ hidden + ba\n    exp_scores = np.exp(action_scores - np.max(action_scores))\n    probabilities = exp_scores / np.sum(exp_scores)\n    Wc = np.array(params['Wc'], dtype=np.float64)\n    bc = np.array(params['bc'], dtype=np.float64).reshape(-1, 1)\n    value = Wc @ hidden + bc\n    probabilities = [round(float(p), 1) if np.isclose(p, round(p, 1)) and round(p, 1) in (0.0, 1.0) else round(float(p), 4) for p in probabilities]\n    value_rounded = round(float(value), 1) if np.isclose(float(value), round(float(value), 1)) and round(float(value), 1) in (0.0, 1.0) else round(float(value), 4)\n    return (probabilities, value_rounded)"}
{"task_id": 249, "completion_id": 7, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    h1 = np.dot(state, np.array(params['W1'])) + np.array(params['b1'])\n    h1 = np.maximum(0, h1)\n    h2 = np.dot(h1, np.array(params['W2'])) + np.array(params['b2'])\n    h2 = np.maximum(0, h2)\n    h3 = np.dot(h2, np.array(params['W3'])) + np.array(params['b3'])\n    h3 = np.maximum(0, h3)\n    action_scores = np.dot(h3, np.array(params['Wa'])) + np.array(params['ba'])\n    exp_scores = np.exp(action_scores - np.max(action_scores))\n    probabilities = exp_scores / np.sum(exp_scores)\n    value = np.dot(h3, np.array(params['Wc'])) + np.array(params['bc'])\n    probabilities = [round(p, 4) for p in probabilities]\n    probabilities = [round(p, 1) if p in (0.0, 1.0) else round(p, 4) for p in probabilities]\n    value = round(float(value), 4)\n    value = round(value, 1) if value in (0.0, 1.0) else round(value, 4)\n    return (probabilities, value)"}
{"task_id": 249, "completion_id": 8, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n    \n    The network topology is:\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n    \n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n    \n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state, dtype='float64')\n\n    def affine_relu(W, b, x):\n        affine = np.dot(W, x) + b\n        return np.maximum(0, affine)\n    h1 = affine_relu(np.array(params['W1']), np.array(params['b1']), state)\n    h2 = affine_relu(np.array(params['W2']), np.array(params['b2']), h1)\n    h3 = affine_relu(np.array(params['W3']), np.array(params['b3']), h2)\n    actor_output = np.dot(np.array(params['Wa']), h3) + np.array(params['ba'])\n    softmax = np.exp(actor_output) / np.exp(actor_output).sum()\n    critic_output = np.dot(np.array(params['Wc']), h3) + np.array(params['bc']).item()\n    probabilities = [round(p, 4) if p != 0.0 and p != 1.0 else round(p, 1) for p in softmax.tolist()]\n    value = round(critic_output, 4) if critic_output != 0.0 and critic_output != 1.0 else round(critic_output, 1)\n    return (probabilities, value)\nstate = [0.1, -0.5, 0.3]\nparams = {'W1': [[1.0, 0.5], [0.7, -0.1], [0.2, -0.3]], 'b1': [0.1, -0.2, 0.3], 'W2': [[0.1, -0.4, 0.2], [-0.3, 0.5, -0.7]], 'b2': [0.1, -0.5], 'W3': [[0.05, -0.03], [0.04, 0.02]], 'b3': [-0.01, 0.005], 'Wa': [[0.5, 0.1], [0.3, -0.2], [0.1, 0.3]], 'ba': [0.1, 0.2, 0.3], 'Wc': [[0.2, -0.1]], 'bc': [0.5]}"}
{"task_id": 249, "completion_id": 9, "solution": "import numpy as np\nfrom typing import List, Dict, Tuple\ndef actor_critic_forward(state: List[float], params: Dict[str, List]) -> Tuple[List[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n    \n    The network topology is:\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head (Dense \u2192 softmax) \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)         \u2192 state value\n\n    Args:\n        state: 1-D list of floats or array containing the current environment state.\n        params: Dictionary with the network parameters:\n                'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                'Wa', 'ba'                      \u2013 actor head\n                'Wc', 'bc'                      \u2013 critic head\n        \n    Returns:\n        A tuple (probabilities, value)\n        probabilities: list of floats \u2013 soft-max of the actor head\n        value: float \u2013 scalar output of the critic head\n    \"\"\"\n\n    def to_array(key):\n        arr = np.array(params[key])\n        return (arr.dtype, arr.shape, arr)\n    (W1, b1) = (np.array(params['W1']), np.array(params['b1']))\n    (W2, b2) = (np.array(params['W2']), np.array(params['b2']))\n    (W3, b3) = (np.array(params['W3']), np.array(params['b3']))\n    (Wa, ba) = (np.array(params['Wa']), np.array(params['ba']))\n    (Wc, bc) = (np.array(params['Wc']), np.array(params['bc']))\n    h = np.array(state, dtype=np.float64)\n    h = np.dot(h, W1) + b1\n    h = np.maximum(0, h)\n    h = np.dot(h, W2) + b2\n    h = np.maximum(0, h)\n    h = np.dot(h, W3) + b3\n    h = np.maximum(0, h)\n    actor_logits = np.dot(h, Wa) + ba\n    probabilities = np.exp(actor_logits - np.max(actor_logits))\n    probabilities /= np.sum(probabilities)\n    value = np.dot(h, Wc) + bc\n    probabilities = [round(p, 4) for p in probabilities]\n    value = round(value.item(), 4)\n    probabilities = [round(f, 1) if f in [0.0, 1.0] else f for f in probabilities]\n    value = round(value, 1) if value in [0.0, 1.0] else value\n    return (probabilities, value)"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w, dtype=float)\n    if not gradient:\n        l1_norm = np.linalg.norm(w, ord=1)\n        l2_norm_squared = np.dot(w, w)\n        penalty = alpha * (l1_ratio * np.linalg.norm(w, ord=2) + (1 - l1_ratio) * 0.5 * l2_norm_squared)\n        return round(float(penalty), 4)\n    else:\n        sign_w = np.sign(w)\n        gradient_w = alpha * (l1_ratio * sign_w + (1 - l1_ratio) * w)\n        return [round(float(g), 4) for g in gradient_w]\nw = [1.0, -2.0, 0.0]"}
{"task_id": 253, "completion_id": 1, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.asarray(w)\n    if not gradient:\n        l1_term = l1_ratio * np.linalg.norm(w, ord=1)\n        l2_term = (1 - l1_ratio) * 0.5 * np.dot(w, w)\n        penalty = alpha * (l1_term + l2_term)\n        return round(float(penalty), 4)\n    else:\n        sign_w = np.sign(w)\n        l1_grad = l1_ratio * sign_w\n        l2_grad = (1 - l1_ratio) * w\n        grad = alpha * (l1_grad + l2_grad)\n        return [round(float(g), 4) for g in grad]"}
{"task_id": 253, "completion_id": 2, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w, dtype=np.float64)\n    if not gradient:\n        l1_term = l1_ratio * np.linalg.norm(w, 1)\n        l2_term = (1 - l1_ratio) * 0.5 * np.dot(w, w)\n        penalty = alpha * (l1_term + l2_term)\n        return round(float(penalty), 4)\n    else:\n        sign_w = np.sign(w)\n        grad_l1 = l1_ratio * sign_w\n        grad_l2 = (1 - l1_ratio) * w\n        gradient_value = alpha * (grad_l1 + grad_l2)\n        return [round(float(x), 4) for x in gradient_value]\nw = [0.5, -1.2, 3.0]\nalpha = 0.1\nl1_ratio = 0.5\npenalty = elastic_net_regularization(w, alpha, l1_ratio, gradient=False)"}
{"task_id": 253, "completion_id": 3, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.asarray(w).ravel()\n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return [round(x, 4) for x in grad]\n    else:\n        l1_term = l1_ratio * np.linalg.norm(w, ord=1)\n        l2_term = (1 - l1_ratio) * 0.5 * np.dot(w, w)\n        penalty = alpha * (l1_term + l2_term)\n        return round(float(penalty), 4)\nw = [1.0, -2.0, 3.0]\nalpha = 0.5\nl1_ratio = 0.7"}
{"task_id": 253, "completion_id": 4, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.asarray(w)\n    if gradient:\n        l1_part = l1_ratio * np.sign(w)\n        l2_part = (1 - l1_ratio) * w\n        gradient = alpha * (l1_part + l2_part)\n        return [round(g, 4) for g in gradient]\n    else:\n        l1_norm = l1_ratio * np.sum(np.abs(w))\n        l2_norm = (1 - l1_ratio) * 0.5 * np.sum(w ** 2)\n        penalty = alpha * (l1_norm + l2_norm)\n        return round(penalty, 4)"}
{"task_id": 253, "completion_id": 5, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.asarray(w)\n    if gradient:\n        l1_term = l1_ratio * np.sign(w)\n        l2_term = (1 - l1_ratio) * w\n        grad = alpha * (l1_term + l2_term)\n        return [float(np.round(g, 4)) for g in grad]\n    else:\n        l1_norm = l1_ratio * np.linalg.norm(w, 1)\n        l2_norm = (1 - l1_ratio) * 0.5 * np.dot(w, w)\n        penalty = alpha * (l1_norm + l2_norm)\n        return round(float(penalty), 4)\nw = [1.0, -2.0, 3.0]\nalpha = 0.1\nl1_ratio = 0.7"}
{"task_id": 253, "completion_id": 6, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w, dtype=float)\n    if not gradient:\n        l1_term = l1_ratio * np.linalg.norm(w, ord=1)\n        l2_term = (1 - l1_ratio) * 0.5 * np.dot(w, w)\n        penalty = alpha * (l1_term + l2_term)\n        return round(penalty, 4)\n    else:\n        sign_w = np.sign(w)\n        l1_gradient = l1_ratio * sign_w\n        l2_gradient = (1 - l1_ratio) * w\n        grad = alpha * (l1_gradient + l2_gradient)\n        return [round(x, 4) for x in grad]"}
{"task_id": 253, "completion_id": 7, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l1 = l1_ratio\n    l2 = 1 - l1_ratio\n    if not gradient:\n        l1_term = np.sum(np.abs(w))\n        l2_term = 0.5 * np.dot(w, w)\n        penalty = alpha * (l1 * l1_term + l2 * l2_term)\n        return round(penalty, 4)\n    else:\n        l1_grad = l1 * np.sign(w)\n        l2_grad = l2 * w\n        gradient = alpha * (l1_grad + l2_grad)\n        return [round(g, 4) for g in gradient]"}
{"task_id": 253, "completion_id": 8, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w, dtype=float)\n    if not gradient:\n        l1_term = l1_ratio * np.linalg.norm(w, 1)\n        l2_term = (1 - l1_ratio) * 0.5 * np.dot(w, w)\n        penalty = alpha * (l1_term + l2_term)\n        return round(float(penalty), 4)\n    else:\n        sign_w = np.sign(w)\n        l1_grad = l1_ratio * sign_w\n        l2_grad = (1 - l1_ratio) * w\n        gradient = alpha * (l1_grad + l2_grad)\n        return [round(float(g), 4) for g in gradient]"}
{"task_id": 253, "completion_id": 9, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w, dtype=float)\n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return [round(g, 4) for g in grad]\n    else:\n        l1_norm = np.sum(np.abs(w))\n        l2_norm_squared = np.dot(w, w)\n        penalty = alpha * (l1_ratio * l1_norm + (1 - l1_ratio) * 0.5 * l2_norm_squared)\n        return round(penalty, 4)\nalpha = 0.1\nl1_ratio = 0.7"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    if param_name not in model.parameters:\n        raise ValueError(f\"Parameter name '{param_name}' not found in model.parameters\")\n    param = model.parameters[param_name]\n    grads = np.zeros_like(param, dtype=np.float64)\n    (batch_size, input_dim) = (X.shape[0], X.shape[1])\n    for i in range(param.shape[0]):\n        for j in range(param.shape[1]):\n            original = param[i, j]\n            param[i, j] = original + epsilon\n            model.flush_gradients()\n            y_pred_plus = []\n            h = None\n            for t in range(n_t):\n                x_t = X[:, :, t]\n                (output, h) = model.forward(x_t, h)\n                y_pred_plus.append(output)\n            loss_plus = loss_func(y_pred_plus)\n            param[i, j] = original - epsilon\n            model.flush_gradients()\n            y_pred_minus = []\n            h = None\n            for t in range(n_t):\n                x_t = X[:, :, t]\n                (output, h) = model.forward(x_t, h)\n                y_pred_minus.append(output)\n            loss_minus = loss_func(y_pred_minus)\n            param[i, j] = original\n            grads[i, j] = (loss_plus - loss_minus) / (2 * epsilon)\n    return grads.T"}
{"task_id": 256, "completion_id": 1, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    param = model.parameters[param_name]\n    param_shape = param.shape\n    grads = np.zeros(param_shape, dtype=np.float64)\n    for i in range(param_shape[0]):\n        for j in range(param_shape[1]):\n            original_value = param[i, j]\n            param[i, j] = original_value + epsilon\n            model.flush_gradients()\n            predictions_pos = []\n            for t in range(n_t):\n                X_t = X[:, :, t]\n                pred = model.forward(X_t)\n                predictions_pos.append(pred)\n            loss_pos = loss_func(predictions_pos)\n            param[i, j] = original_value - epsilon\n            model.flush_gradients()\n            predictions_neg = []\n            for t in range(n_t):\n                X_t = X[:, :, t]\n                pred = model.forward(X_t)\n                predictions_neg.append(pred)\n            loss_neg = loss_func(predictions_neg)\n            grads[i, j] = (loss_pos - loss_neg) / (2 * epsilon)\n            param[i, j] = original_value\n    return grads.T"}
{"task_id": 256, "completion_id": 2, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names (e.g., \"X\" or \"y\").\n    \"\"\"\n    if param_name in ('X', 'y'):\n        return None\n    if param_name in ('Ba', 'Bx'):\n        param_name = param_name.lower()\n    if param_name not in model.parameters:\n        raise ValueError(f'Parameter {param_name} not found in model.parameters.')\n    param = model.parameters[param_name]\n    param_shape = param.shape\n    grads = np.zeros_like(param, dtype=np.float64)\n    param_copy = deepcopy(param)\n    (batch_size, input_dim) = (X.shape[0], X.shape[1])\n    for idx in np.ndindex(param_shape):\n        model.parameters[param_name] = deepcopy(param_copy)\n        model.parameters[param_name][idx] += epsilon\n        model.flush_gradients()\n        predictions_plus = []\n        h_t = None\n        for t in range(n_t):\n            x_t = X[:, :, t]\n            (h_t, y_t) = model.forward(x_t, h_t)\n            predictions_plus.append(y_t)\n        loss_plus = loss_func(predictions_plus)\n        model.parameters[param_name] = deepcopy(param_copy)\n        model.parameters[param_name][idx] -= epsilon\n        model.flush_gradients()\n        predictions_minus = []\n        h_t = None\n        for t in range(n_t):\n            x_t = X[:, :, t]\n            (h_t, y_t) = model.forward(x_t, h_t)\n            predictions_minus.append(y_t)\n        loss_minus = loss_func(predictions_minus)\n        grads[idx] = (loss_plus - loss_minus) / (2 * epsilon)\n    model.parameters[param_name] = param_copy\n    return grads.T"}
{"task_id": 256, "completion_id": 3, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n    \n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward`` \n                      method (single time-step) and a ``flush_gradients`` \n                      method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                      loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                      be redirected to the lower-case keys.  If the name is\n                      \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n    \n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ('X', 'y'):\n        return None\n    if param_name in ('Ba', 'Bx'):\n        param_name = param_name.lower()\n    param_shape = model.parameters[param_name].shape\n    grads = np.zeros(param_shape, dtype=np.float64)\n    original_param = model.parameters[param_name].astype(np.float64)\n    for i in range(param_shape[0]):\n        for j in range(param_shape[1]):\n            original_value = original_param[i, j]\n            model.parameters[param_name][i, j] = original_value + epsilon\n            model.flush_gradients()\n            forward_pass_plus = []\n            for t in range(n_t):\n                batch_input = X[:, :, t]\n                pred = model.forward(batch_input)\n                forward_pass_plus.append(pred)\n            loss_plus = loss_func(forward_pass_plus)\n            model.parameters[param_name][i, j] = original_value - epsilon\n            model.flush_gradients()\n            forward_pass_minus = []\n            for t in range(n_t):\n                batch_input = X[:, :, t]\n                pred = model.forward(batch_input)\n                forward_pass_minus.append(pred)\n            loss_minus = loss_func(forward_pass_minus)\n            model.parameters[param_name][i, j] = original_value\n            grads[i, j] = (loss_plus - loss_minus) / (2 * epsilon)\n    return grads.T"}
{"task_id": 256, "completion_id": 4, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    param = model.parameters[param_name]\n    grads = np.zeros_like(param, dtype=np.float64)\n    for i in range(param.shape[0]):\n        for j in range(param.shape[1]):\n            original_value = param[i, j]\n            param[i, j] = original_value + epsilon\n            model.parameters[param_name] = param\n            model.flush_gradients()\n            predictions_plus = []\n            for t in range(n_t):\n                x_t = X[:, :, t]\n                pred = model.forward(x_t)\n                predictions_plus.append(pred)\n            loss_plus = loss_func(predictions_plus)\n            param[i, j] = original_value - epsilon\n            model.parameters[param_name] = param\n            predictions_minus = []\n            for t in range(n_t):\n                x_t = X[:, :, t]\n                pred = model.forward(x_t)\n                predictions_minus.append(pred)\n            loss_minus = loss_func(predictions_minus)\n            param[i, j] = original_value\n            model.parameters[param_name] = param\n            grads[i, j] = (loss_plus - loss_minus) / (2 * epsilon)\n    return grads.T"}
{"task_id": 256, "completion_id": 5, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    if param_name not in model.parameters:\n        raise ValueError(f'Parameter {param_name} not found in model.parameters')\n    param = model.parameters[param_name]\n    grads = np.zeros_like(param, dtype=np.float64)\n    (batch, input_dim, _) = X.shape\n    for i in range(param.shape[0]):\n        for j in range(param.shape[1]):\n            original_value = param[i, j]\n            param[i, j] = original_value + epsilon\n            model.flush_gradients()\n            predictions_plus = []\n            h_t = None\n            for t in range(n_t):\n                x_t = X[:, :, t]\n                h_t = model.forward(x_t, h_t)\n                predictions_plus.append(h_t)\n            loss_plus = loss_func(predictions_plus)\n            param[i, j] = original_value - epsilon\n            model.flush_gradients()\n            predictions_minus = []\n            h_t = None\n            for t in range(n_t):\n                x_t = X[:, :, t]\n                h_t = model.forward(x_t, h_t)\n                predictions_minus.append(h_t)\n            loss_minus = loss_func(predictions_minus)\n            param[i, j] = original_value\n            grads[i, j] = (loss_plus - loss_minus) / (2 * epsilon)\n    return grads.T"}
{"task_id": 256, "completion_id": 6, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in {'X', 'y'}:\n        return None\n    if param_name in {'Ba', 'Bx'}:\n        param_name = param_name.lower()\n    if param_name not in model.parameters:\n        raise KeyError(f'Parameter {param_name} not found in the model.')\n    theta = model.parameters[param_name].copy().astype(np.float64)\n    if theta.ndim == 2:\n        shape = theta.shape\n        grads = np.zeros_like(theta, dtype=np.float64)\n        (batch, dim_in, _) = X.shape\n        model.flush_gradients()\n        for i in range(shape[0]):\n            for j in range(shape[1]):\n                theta_plus = theta.copy()\n                theta_minus = theta.copy()\n                theta_plus[i, j] += epsilon\n                theta_minus[i, j] -= epsilon\n                model.parameters[param_name][:] = theta_plus\n                model.flush_gradients()\n                y_plus = [model.forward(X[:, :, t]) for t in range(n_t)]\n                loss_plus = loss_func(y_plus)\n                model.parameters[param_name][:] = theta_minus\n                model.flush_gradients()\n                y_minus = [model.forward(X[:, :, t]) for t in range(n_t)]\n                loss_minus = loss_func(y_minus)\n                model.parameters[param_name][:] = theta\n                grads[i, j] = (loss_plus - loss_minus) / (2 * epsilon)\n        return grads.T\n    else:\n        raise ValueError(f'Currently only 2D parameters are supported. Got a parameter of shape {theta.shape} for {param_name}.')"}
{"task_id": 256, "completion_id": 7, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    param = model.parameters[param_name]\n    grads = np.zeros_like(param, dtype=np.float64)\n    for i in range(param.shape[0]):\n        for j in range(param.shape[1]):\n            original_value = param[i, j]\n            param[i, j] = original_value + epsilon\n            model.parameters[param_name] = param\n            predictions_plus = []\n            for t in range(n_t):\n                x_t = X[:, :, t]\n                out_t = model.forward(x_t)\n                predictions_plus.append(deepcopy(out_t))\n            loss_plus = loss_func(predictions_plus)\n            param[i, j] = original_value - epsilon\n            model.parameters[param_name] = param\n            predictions_minus = []\n            for t in range(n_t):\n                x_t = X[:, :, t]\n                out_t = model.forward(x_t)\n                predictions_minus.append(deepcopy(out_t))\n            loss_minus = loss_func(predictions_minus)\n            param[i, j] = original_value\n            model.parameters[param_name] = param\n            grads[i, j] = (loss_plus - loss_minus) / (2 * epsilon)\n            model.flush_gradients()\n    return grads.T"}
{"task_id": 256, "completion_id": 8, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``flush_gradients``\n                       method, and a ``forward`` method (single time-step).\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ('X', 'y'):\n        return None\n    if param_name in ('Ba', 'Bx'):\n        param_name = param_name.lower()\n    if param_name not in model.parameters:\n        return None\n    theta = model.parameters[param_name]\n    grads = np.zeros_like(theta.astype(np.float64))\n    for i in range(theta.shape[0]):\n        for j in range(theta.shape[1]):\n            theta_flat = theta[i, j]\n            model.parameters[param_name][i, j] = theta_flat + epsilon\n            model.flush_gradients()\n            preds_pos = []\n            for t in range(n_t):\n                x_t = X[:, :, t]\n                y_t = model.forward(x_t)\n                preds_pos.append(y_t)\n            loss_pos = loss_func(preds_pos)\n            model.parameters[param_name][i, j] = theta_flat - epsilon\n            model.flush_gradients()\n            preds_neg = []\n            for t in range(n_t):\n                x_t = X[:, :, t]\n                y_t = model.forward(x_t)\n                preds_neg.append(y_t)\n            loss_neg = loss_func(preds_neg)\n            model.parameters[param_name][i, j] = theta_flat\n            grads[i, j] = (loss_pos - loss_neg) / (2 * epsilon)\n    return grads.T.astype(np.float64)"}
{"task_id": 256, "completion_id": 9, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    elif param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    param = model.parameters[param_name]\n    grads = np.zeros_like(param, dtype=np.float64)\n    (batch_size, input_dim) = (X.shape[0], X.shape[1])\n    for i in range(param.shape[0]):\n        for j in range(param.shape[1]):\n            orig_val = param[i, j]\n            param[i, j] = orig_val + epsilon\n            model.parameters[param_name][i, j] = orig_val + epsilon\n            predictions_plus = []\n            model.flush_gradients()\n            for t in range(n_t):\n                x_t = X[:, :, t]\n                pred_t = model.forward(x_t)\n                predictions_plus.append(pred_t)\n            loss_plus = loss_func(predictions_plus)\n            param[i, j] = orig_val - epsilon\n            model.parameters[param_name][i, j] = orig_val - epsilon\n            predictions_minus = []\n            model.flush_gradients()\n            for t in range(n_t):\n                x_t = X[:, :, t]\n                pred_t = model.forward(x_t)\n                predictions_minus.append(pred_t)\n            loss_minus = loss_func(predictions_minus)\n            param[i, j] = orig_val\n            model.parameters[param_name][i, j] = orig_val\n            grads[i, j] = (loss_plus - loss_minus) / (2 * epsilon)\n    return grads.T"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\nclass DecisionStump:\n\n    def __init__(self):\n        self.feature_idx = 0\n        self.threshold = 0\n        self.polarity = 1\n\n    def predict(self, X: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Predict class based on the decision stump.\n        \"\"\"\n        if self.polarity == 1:\n            return np.where(X[:, self.feature_idx] >= self.threshold, 1, -1)\n        else:\n            return np.where(X[:, self.feature_idx] < self.threshold, 1, -1)\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> List[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    k = X_test.shape[0]\n    n_clf = max(1, n_clf)\n    w = np.full(m, 1 / m)\n    classifiers = []\n    alphas = []\n    for _ in range(n_clf):\n        best_stump = None\n        min_error = float('inf')\n        best_polarity = 1\n        best_threshold = 0\n        best_feature = 0\n        for feature in range(n):\n            unique_values = np.unique(X_train[:, feature])\n            for threshold in sorted(unique_values):\n                for polarity in [1, -1]:\n                    predictions = np.where(X_train[:, feature] >= threshold, 1, -1) if polarity == 1 else np.where(X_train[:, feature] < threshold, 1, -1)\n                    error = np.sum(w[y_train != predictions])\n                    if error < min_error:\n                        min_error = error\n                        best_stump = DecisionStump()\n                        best_stump.feature_idx = feature\n                        best_stump.threshold = threshold\n                        best_stump.polarity = polarity\n        if min_error == 0:\n            min_error = 1e-10\n        epsilon = min_error\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        predictions = best_stump.predict(X_train)\n        w *= np.exp(-alpha * y_train * predictions)\n        w /= np.sum(w)\n        classifiers.append(best_stump)\n        alphas.append(alpha)\n    final_predictions = np.zeros(k)\n    for (alpha, classifier) in zip(alphas, classifiers):\n        preds = classifier.predict(X_test)\n        final_predictions += alpha * preds\n    return [1 if pred > 0 else -1 for pred in np.sign(final_predictions)]"}
{"task_id": 257, "completion_id": 1, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"\n    Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    n_clf = max(1, n_clf)\n    D = np.ones(m) / m\n    classifiers = []\n    alphas = []\n    for t in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        for feature_idx in range(n):\n            unique_vals = np.unique(X_train[:, feature_idx])\n            for threshold in np.unique(X_train[:, feature_idx]):\n                for direction in [1, -1]:\n                    predictions = np.ones(m) * direction\n                    predictions[X_train[:, feature_idx] > threshold] *= -1\n                    error = np.sum(D[predictions != y_train])\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_idx, threshold, direction)\n        epsilon = max(best_error, 1e-10)\n        epsilon = min(epsilon, 1 - 1e-10)\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        alphas.append(alpha)\n        classifiers.append(best_stump)\n        (feature_idx, threshold, direction) = best_stump\n        predictions = np.ones(m) * direction\n        predictions[X_train[:, feature_idx] > threshold] *= -1\n        D *= np.exp(-alpha * y_train * predictions)\n        D /= np.sum(D)\n    preds = np.zeros(X_test.shape[0])\n    for ((feature_idx, threshold, direction), alpha) in zip(classifiers, alphas):\n        prediction = np.ones(X_test.shape[0]) * direction\n        prediction[X_test[:, feature_idx] > threshold] *= -1\n        preds += alpha * prediction\n    return [1 if p > 0 else -1 for p in preds]"}
{"task_id": 257, "completion_id": 2, "solution": "import numpy as np\nclass DecisionStump:\n\n    def __init__(self):\n        self.polarity = 1\n        self.threshold = 0\n        self.feature_index = 0\n        self.alpha = 0\n\n    def predict(self, X):\n        \"\"\"\n        Predict class label for sample X.\n        \"\"\"\n        n_samples = X.shape[0]\n        X_column = X[:, self.feature_index]\n        if self.polarity == 1:\n            pred = np.ones(n_samples)\n            pred[X_column < self.threshold] = -1\n        else:\n            pred = np.ones(n_samples)\n            pred[X_column > self.threshold] = -1\n        return pred\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n    \n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf: Number of weak classifiers (decision stumps) to build. Must be > 0.\n    \n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    n_clf = max(1, n_clf)\n    w = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        (stump, error) = find_best_stump(X_train, y_train, w)\n        eps = max(error, 1e-10)\n        alpha = 0.5 * np.log((1 - eps) / eps)\n        alphas.append(alpha)\n        stump.alpha = alpha\n        stumps.append(stump)\n        predictions = stump.predict(X_train)\n        w *= np.exp(-alpha * y_train * predictions)\n        w /= np.sum(w)\n    stump_predictions = [stump.predict(X_test) * stump.alpha for stump in stumps]\n    final_predictions = np.sum(stump_predictions, axis=0)\n    y_pred = np.sign(final_predictions)\n    return y_pred.tolist()\ndef find_best_stump(X, y, w):\n    \"\"\"\n    Find the best decision stump for the data\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_error = float('inf')\n    best_stump = DecisionStump()\n    for feature_idx in range(n_features):\n        X_column = X[:, feature_idx]\n        unique_values = np.unique(X_column)\n        for threshold in unique_values:\n            for polarity in [1, -1]:\n                predictions = np.ones(n_samples)\n                if polarity == 1:\n                    predictions[X_column < threshold] = -1\n                else:\n                    predictions[X_column > threshold] = -1\n                error = sum((w[i] for i in range(n_samples) if predictions[i] != y[i]))\n                if error < best_error:\n                    best_error = error\n                    best_stump.polarity = polarity\n                    best_stump.threshold = threshold\n                    best_stump.feature_index = feature_idx\n    return (best_stump, best_error)"}
{"task_id": 257, "completion_id": 3, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    k = X_test.shape[0]\n    n_clf = max(1, n_clf)\n    D = np.ones(m) / m\n    classifiers = []\n    alphas = []\n    for t in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        best_prediction = None\n        for feature_idx in range(n):\n            unique_values = np.unique(X_train[:, feature_idx])\n            for value in unique_values:\n                prediction = np.where(X_train[:, feature_idx] <= value, 1, -1)\n                error = np.sum(D[y_train != prediction])\n                if error > 0.5:\n                    prediction = np.where(prediction == 1, -1, 1)\n                    error = np.sum(D[y_train != prediction])\n                if error < best_error:\n                    best_error = error\n                    best_stump = ('<=', feature_idx, value)\n                    best_prediction = prediction\n        if best_error == 0:\n            best_error = 1e-10\n        alpha = 0.5 * np.log((1 - best_error) / best_error)\n        alphas.append(alpha)\n        epsilon = best_error\n        D *= np.exp(-alpha * y_train * best_prediction)\n        D /= np.sum(D)\n        classifiers.append(best_stump)\n    predictions = np.zeros(k)\n    for (idx, (op, feature_idx, value)) in enumerate(classifiers):\n        feature_values = X_test[:, feature_idx]\n        if op == '<=':\n            pred = np.where(feature_values <= value, 1, -1)\n        else:\n            pred = np.where(feature_values > value, 1, -1)\n        predictions += alphas[idx] * pred\n    final_predictions = np.sign(predictions).astype(int)\n    return final_predictions.tolist()"}
{"task_id": 257, "completion_id": 4, "solution": "import numpy as np\nfrom typing import List\nclass DecisionStump:\n\n    def __init__(self):\n        self.feature_idx = 0\n        self.threshold = 0\n        self.direction = 1\n\n    def predict(self, X):\n        if self.direction == 1:\n            return np.where(X[:, self.feature_idx] <= self.threshold, 1, -1)\n        else:\n            return np.where(X[:, self.feature_idx] > self.threshold, 1, -1)\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> List[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    k = X_test.shape[0]\n    n_clf = max(1, n_clf)\n    D = np.full(m, fill_value=1 / m)\n    stumps = []\n    alphas = []\n    for t in range(n_clf):\n        best_error = float('inf')\n        best_stump = DecisionStump()\n        for feature_idx in range(n):\n            unique_values = np.unique(X_train[:, feature_idx])\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n            for threshold in thresholds:\n                for direction in [1, -1]:\n                    stump = DecisionStump()\n                    stump.feature_idx = feature_idx\n                    stump.threshold = threshold\n                    stump.direction = direction\n                    predictions = stump.predict(X_train)\n                    weighted_error = np.sum(D[y_train != predictions])\n                    if weighted_error < best_error:\n                        best_error = weighted_error\n                        best_stump = stump\n        epsilon_t = max(best_error, 1e-10)\n        epsilon_t = min(epsilon_t, 1 - 1e-10)\n        alpha_t = 0.5 * np.log((1 - epsilon_t) / epsilon_t)\n        stumps.append(best_stump)\n        alphas.append(alpha_t)\n        predictions = best_stump.predict(X_train)\n        D *= np.exp(-alpha_t * y_train * predictions)\n        D /= np.sum(D)\n    test_predictions = np.zeros(k)\n    for (alpha, stump) in zip(alphas, stumps):\n        test_predictions += alpha * stump.predict(X_test)\n    return list(np.sign(test_predictions).astype(int))\nX_train = np.array([[1, 2], [2, 3], [3, 1], [6, 5], [7, 7], [5, 6]])\ny_train = np.array([1, 1, 1, -1, -1, -1])\nX_test = np.array([[2, 2], [6, 6]])\npredictions = adaboost_predict(X_train, y_train, X_test, n_clf=5)"}
{"task_id": 257, "completion_id": 5, "solution": "import numpy as np\nfrom typing import List\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> List[int]:\n    \"\"\"\n    Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\n        X_test:  2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    n_clf = max(n_clf, 1)\n    D = np.ones(m) / m\n    weak_classifiers = []\n    alphas = []\n    for t in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        best_pred = None\n        for feature_idx in range(n):\n            x_values = X_train[:, feature_idx]\n            unique_sorted = np.unique(np.sort(x_values))\n            thresholds = (unique_sorted[:-1] + unique_sorted[1:]) / 2\n            for threshold in thresholds:\n                for direction in [-1, 1]:\n                    pred = np.where(x_values < threshold, -1 * direction, direction)\n                    error = np.sum(D[y_train != pred])\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_idx, threshold, direction)\n                        best_pred = pred\n        if best_error <= 0:\n            break\n        if best_error >= 0.5:\n            epsilon = 0.5 - 0.1\n        else:\n            epsilon = best_error\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        alphas.append(alpha)\n        weak_classifiers.append(best_stump)\n        y_pred = np.zeros(m)\n        (feature_idx, threshold, direction) = best_stump\n        x_values = X_train[:, feature_idx]\n        for i in range(m):\n            y_pred[i] = -1 if x_values[i] < threshold else direction\n        y_pred = y_pred * direction\n        D *= np.exp(-alpha * y_train * y_pred)\n        D /= np.sum(D)\n    n_test = X_test.shape[0]\n    predictions = np.zeros(n_test)\n    for (alpha, (feature_idx, threshold, direction)) in zip(alphas, weak_classifiers):\n        x_values = X_test[:, feature_idx]\n        prediction = np.where(x_values < threshold, -1, direction)\n        predictions += alpha * prediction\n    final_predictions = np.sign(predictions)\n    return final_predictions.tolist()\nX_train = np.array([[0, 2], [1, 5], [2, 3], [3, 1], [4, 4]])\ny_train = np.array([1, 1, -1, -1, 1])\nX_test = np.array([[0, 3], [3, 2]])"}
{"task_id": 257, "completion_id": 6, "solution": "import numpy as np\ndef build_stump(X, y, weights):\n    \"\"\"\n    Build a decision stump by trying all thresholds for each feature\n    and choosing the one with minimum weighted error.\n    \n    Returns:\n        A stump represented as a dictionary with keys 'feature', 'threshold', 'direction',\n        and 'error'.\n    \"\"\"\n    (m, n) = X.shape\n    min_error = float('inf')\n    best_stump = {}\n    for feature in range(n):\n        unique_vals = np.unique(X[:, feature])\n        thresholds = (unique_vals[:-1] + unique_vals[1:]) / 2\n        for threshold in thresholds:\n            for direction in [-1, 1]:\n                predictions = np.where(X[:, feature] <= threshold, 1, -1)\n                if direction == -1:\n                    predictions *= -1\n                error = np.sum(weights[predictions != y])\n                if error < min_error:\n                    min_error = error\n                    best_stump = {'feature': feature, 'threshold': threshold, 'direction': direction, 'error': error}\n    return best_stump\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    m = X_train.shape[0]\n    k = X_test.shape[0]\n    if n_clf < 1:\n        n_clf = 1\n    weights = np.ones(m) / m\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        stump = build_stump(X_train, y_train, weights)\n        stumps.append(stump)\n        error = stump['error']\n        if error == 0:\n            alpha = 100\n        else:\n            alpha = 0.5 * np.log((1 - error) / error)\n        alphas.append(alpha)\n        predictions = np.ones(m)\n        for i in range(m):\n            if (X_train[i, stump['feature']] <= stump['threshold']) == (stump['direction'] == 1):\n                predictions[i] = 1\n            else:\n                predictions[i] = -1\n        predictions = np.where(predictions == 1, 1, -1)\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n    k = X_test.shape[0]\n    scores = np.zeros(k)\n    for (stump, alpha) in zip(stumps, alphas):\n        for i in range(k):\n            if (X_test[i, stump['feature']] <= stump['threshold']) == (stump['direction'] == 1):\n                scores[i] += alpha\n            else:\n                scores[i] -= alpha\n    predictions = np.sign(scores)\n    return predictions.tolist()\nX_train = np.array([[1, 2], [2, 3], [3, 1], [6, 5], [7, 7]])\ny_train = np.array([1, 1, 1, -1, -1])\nX_test = np.array([[4, 3], [5, 5]])"}
{"task_id": 257, "completion_id": 7, "solution": "import numpy as np\nfrom typing import List\nclass DecisionStump:\n\n    def __init__(self):\n        self.feature_idx = 0\n        self.threshold = 0\n        self.direction = 1\n\n    def fit(self, X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray):\n        (m, n) = X.shape\n        min_error = float('inf')\n        for i in range(n):\n            unique_values = np.unique(X[:, i])\n            for t in unique_values:\n                for d in [-1, 1]:\n                    prediction = np.ones_like(y)\n                    if d == -1:\n                        prediction[X[:, i] < t] = -1\n                    else:\n                        prediction[X[:, i] >= t] = -1\n                    error = np.sum(sample_weights[y != prediction])\n                    if error < min_error:\n                        min_error = error\n                        self.feature_idx = i\n                        self.threshold = t\n                        self.direction = d\n        return min_error\n\n    def predict(self, X: np.ndarray):\n        feature_values = X[:, self.feature_idx]\n        prediction = np.ones(X.shape[0])\n        if self.direction == -1:\n            prediction[feature_values < self.threshold] = -1\n        else:\n            prediction[feature_values >= self.threshold] = -1\n        return prediction\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> List[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test:  2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_clf = max(1, n_clf)\n    (m, n) = X_train.shape\n    k = X_test.shape[0]\n    weights = np.ones(m) / m\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        stump = DecisionStump()\n        error = stump.fit(X_train, y_train, weights)\n        if error == 0:\n            epsilon = 1e-10\n        elif error == 1:\n            epsilon = 1 - 1e-10\n        else:\n            epsilon = error\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        alphas.append(alpha)\n        predictions = stump.predict(X_train)\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        stumps.append(stump)\n    final_predictions = np.zeros(k)\n    for (alpha, stump) in zip(alphas, stumps):\n        final_predictions += alpha * stump.predict(X_test)\n    return [int(np.sign(p)) for p in final_predictions]"}
{"task_id": 257, "completion_id": 8, "solution": "import numpy as np\nclass DecisionStump:\n\n    def __init__(self):\n        self.feature_idx = 0\n        self.threshold = 0\n        self.polarity = 1\n\n    def predict(self, X: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Predicts the class for each row in X using the decision stump.\n        \n        Args:\n            X: 2-D NumPy array of shape (m, n)\n        Returns:\n            Predictions as a 1-D array of -1/1 values.\n        \"\"\"\n        if self.polarity == 1:\n            return np.where(X[:, self.feature_idx] > self.threshold, 1, -1)\n        else:\n            return np.where(X[:, self.feature_idx] <= self.threshold, 1, -1)\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test:  2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    k = X_test.shape[0]\n    n_clf = max(n_clf, 1)\n    weights = np.full(m, 1 / m)\n    stumps = []\n    stump_weights = []\n    for _ in range(n_clf):\n        (best_error, best_stump) = (float('inf'), None)\n        for feature_idx in range(n):\n            sorted_idx = np.argsort(X_train[:, feature_idx])\n            sorted_X = X_train[sorted_idx, feature_idx]\n            sorted_y = y_train[sorted_idx]\n            weights_sorted = weights[sorted_idx]\n            for i in range(m - 1):\n                threshold = (sorted_X[i] + sorted_X[i + 1]) / 2\n                for polarity in [1, -1]:\n                    stump = DecisionStump()\n                    stump.feature_idx = feature_idx\n                    stump.threshold = threshold\n                    stump.polarity = polarity\n                    predictions = stump.predict(X_train)\n                    weighted_error = np.sum(weights[predictions != y_train])\n                    if weighted_error < best_error:\n                        best_error = weighted_error\n                        best_stump = stump\n        if best_error == 0:\n            best_error = 1e-10\n        elif best_error >= 0.5:\n            break\n        stumps.append(best_stump)\n        alpha = 0.5 * np.log((1 - best_error) / best_error)\n        stump_weights.append(alpha)\n        predictions = best_stump.predict(X_train)\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n    final_predictions = np.zeros(k)\n    for (alpha, stump) in zip(stump_weights, stumps):\n        final_predictions += alpha * stump.predict(X_test)\n    return list(np.sign(final_predictions))"}
{"task_id": 257, "completion_id": 9, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    k = X_test.shape[0]\n    if n_clf < 1:\n        n_clf = 1\n    D = np.ones(m) / m\n    stumps = []\n    alphas = []\n    for t in range(n_clf):\n        best_error = float('inf')\n        best_feature = -1\n        best_threshold = 0\n        best_direction = 1\n        for feature in range(n):\n            unique_vals = np.unique(X_train[:, feature])\n            for threshold in np.unique(X_train[:, feature]):\n                for direction in [1, -1]:\n                    predictions = np.ones(m)\n                    if direction == 1:\n                        predictions[X_train[:, feature] <= threshold] = -1\n                    else:\n                        predictions[X_train[:, feature] > threshold] = -1\n                    error = np.sum(D[y_train != predictions])\n                    if error < best_error:\n                        best_error = error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_direction = direction\n        epsilon_t = best_error\n        if epsilon_t == 0:\n            epsilon_t = 1e-10\n        alpha_t = 0.5 * np.log((1 - epsilon_t) / epsilon_t)\n        alphas.append(alpha_t)\n        stumps.append({'feature': best_feature, 'threshold': best_threshold, 'direction': best_direction})\n        predictions = np.ones(m)\n        feature = stumps[-1]['feature']\n        threshold = stumps[-1]['threshold']\n        direction = stumps[-1]['direction']\n        if direction == 1:\n            predictions[X_train[:, feature] <= threshold] = -1\n        else:\n            predictions[X_train[:, feature] > threshold] = -1\n        D *= np.exp(-alpha_t * y_train * predictions)\n        D /= np.sum(D)\n    predictions = np.zeros(k)\n    for i in range(k):\n        vote = 0.0\n        for t in range(n_clf):\n            stump = stumps[t]\n            feature = stump['feature']\n            threshold = stump['threshold']\n            direction = stump['direction']\n            if direction == 1:\n                if X_test[i, feature] <= threshold:\n                    vote -= alphas[t]\n                else:\n                    vote += alphas[t]\n            elif X_test[i, feature] > threshold:\n                vote -= alphas[t]\n            else:\n                vote += alphas[t]\n        predictions[i] = -1 if vote <= 0 else 1\n    return list(predictions.astype(int))"}
{"task_id": 261, "completion_id": 0, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions.')\n    if len(shape) == 2:\n        (fan_in, fan_out) = shape\n    else:\n        in_channels = shape[1]\n        out_channels = shape[0]\n        receptive_field_size = 1\n        for dim in shape[2:]:\n            receptive_field_size *= dim\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    std = np.sqrt(2.0 / (fan_in + fan_out))\n    rng = np.random.Generator(np.random.PCG64())\n    return rng.normal(loc=0.0, scale=std, size=shape)"}
{"task_id": 261, "completion_id": 1, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape. Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions for Glorot initialisation.')\n    if len(shape) == 2:\n        (fan_in, fan_out) = shape\n    else:\n        (out_channels, in_channels) = (shape[0], shape[1])\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    std_dev = np.sqrt(2.0 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=std_dev, size=shape)"}
{"task_id": 261, "completion_id": 2, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape. Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions for Glorot initialization.')\n    if len(shape) == 2:\n        (fan_in, fan_out) = shape\n    else:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    std_dev = np.sqrt(2.0 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=std_dev, size=shape)"}
{"task_id": 261, "completion_id": 3, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions.')\n    if len(shape) == 2:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    else:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    std = np.sqrt(2.0 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=std, size=shape)"}
{"task_id": 261, "completion_id": 4, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape. Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions.')\n    if len(shape) == 2:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    else:\n        recep_field_size = np.prod(shape[2:])\n        fan_in = shape[1] * recep_field_size\n        fan_out = shape[0] * recep_field_size\n    std = np.sqrt(2.0 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=std, size=shape)"}
{"task_id": 261, "completion_id": 5, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions.')\n    if len(shape) == 2:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    else:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    s = np.sqrt(2.0 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=s, size=shape)"}
{"task_id": 261, "completion_id": 6, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape. Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least 2 dimensions for Glorot/Xavier initialization.')\n    if len(shape) == 2:\n        (fan_in, fan_out) = shape\n    else:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    std = np.sqrt(2.0 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=std, size=shape).astype(np.float64)"}
{"task_id": 261, "completion_id": 7, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape. Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must be at least 2D for well-defined fan_in and fan_out')\n    if len(shape) == 2:\n        (fan_in, fan_out) = shape\n    else:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    std = np.sqrt(2.0 / (fan_in + fan_out))\n    rng = np.random.default_rng()\n    return rng.normal(loc=0.0, scale=std, size=shape)"}
{"task_id": 261, "completion_id": 8, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions.')\n    if len(shape) == 2:\n        (fan_in, fan_out) = shape\n    else:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    std = np.sqrt(2.0 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=std, size=shape)"}
{"task_id": 261, "completion_id": 9, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape. Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least 2 dimensions.')\n    if len(shape) == 2:\n        (fan_in, fan_out) = shape\n    else:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    std = np.sqrt(2.0 / (fan_in + fan_out))\n    if hasattr(np.random, 'default_rng'):\n        rng = np.random.default_rng()\n        data = rng.normal(loc=0.0, scale=std, size=shape)\n    else:\n        data = np.random.standard_normal(size=shape) * std\n    return data.astype(np.float32)"}
{"task_id": 266, "completion_id": 0, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same order as `V`.\n        \u2022 Inner lists are in the order of vertex appearance in `V`.\n        \u2022 No duplicate neighbors.\n    \"\"\"\n    index_map = {v: i for (i, v) in enumerate(V)}\n    G = [[] for _ in V]\n    processed_edges = set()\n    for (u, v) in E:\n        edge1 = (u, v)\n        edge2 = (v, u)\n        if edge1 in processed_edges or edge2 in processed_edges:\n            continue\n        processed_edges.add(edge1)\n        processed_edges.add(edge2)\n        i_u = index_map[u]\n        i_v = index_map[v]\n        G[i_u].append(v)\n        G[i_v].append(u)\n    for i in range(len(V)):\n        G[i] = sorted(G[i], key=lambda x: V.index(x))\n    return G\nV = [10, 'a', 3, 'x']\nE = [(10, 'a'), ('x', 3), ('a', 3), (10, 'a'), (3, 'x')]"}
{"task_id": 266, "completion_id": 1, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and v.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    vertex_to_index = {v: i for (i, v) in enumerate(V)}\n    G = [[] for _ in V]\n    for (u, v) in E:\n        if u in vertex_to_index and v in vertex_to_index:\n            i = vertex_to_index[u]\n            j = vertex_to_index[v]\n            if v not in G[i]:\n                G[i].append(v)\n            if u not in G[j]:\n                G[j].append(u)\n    for i in range(len(G)):\n        G[i].sort(key=lambda x: vertex_to_index[x])\n    return G"}
{"task_id": 266, "completion_id": 2, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and v.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list G where G[i] contains all vertices adjacent to V[i].\n        \u2022 The outer list has the same length and order as V.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in V.\n    \"\"\"\n    adj_map = {v: set() for v in V}\n    for (u, v) in E:\n        if v not in adj_map[u]:\n            adj_map[u].add(v)\n        if u not in adj_map[v]:\n            adj_map[v].add(u)\n    G = []\n    for v in V:\n        neighbors_in_order = sorted(adj_map[v], key=lambda x: V.index(x))\n        G.append(neighbors_in_order)\n    return G"}
{"task_id": 266, "completion_id": 3, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and v.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list G where G[i] contains all vertices adjacent to V[i].\n        \u2022 The outer list has the same length and order as V.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in V.\n    \"\"\"\n    vertex_index = {v: i for (i, v) in enumerate(V)}\n    G = [[] for _ in V]\n    for (u, v) in E:\n        i = vertex_index[u]\n        j = vertex_index[v]\n        if v not in G[i]:\n            G[i].append(v)\n        if u not in G[j]:\n            G[j].append(u)\n    for i in range(len(V)):\n        G[i].sort(key=lambda x: vertex_index[x])\n    return G\nV = ['a', 'b', 'c', 'd', 'e']\nE = [('a', 'b'), ('b', 'c'), ('a', 'c'), ('d', 'e'), ('a', 'b')]"}
{"task_id": 266, "completion_id": 4, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    vertex_to_index = {v: i for (i, v) in enumerate(V)}\n    G = [[] for _ in V]\n    added_edges = set()\n    for (u, v) in E:\n        i = vertex_to_index[u]\n        j = vertex_to_index[v]\n        if (j, i) not in added_edges and (i, j) not in added_edges:\n            if v not in G[i]:\n                G[i].append(v)\n            if u not in G[j]:\n                G[j].append(u)\n            added_edges.add((i, j))\n            added_edges.add((j, i))\n    sort_indices = {v: i for (i, v) in enumerate(V)}\n    for neighbors in G:\n        neighbors.sort(key=lambda x: sort_indices[x])\n    return G\nV = ['A', 'B', 'C', 'D']\nE = [('A', 'B'), ('B', 'C'), ('C', 'A'), ('D', 'A'), ('A', 'B')]\nG = build_adj_list(V, E)"}
{"task_id": 266, "completion_id": 5, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    adj = [[] for _ in V]\n    vertex_to_index = {vertex: idx for (idx, vertex) in enumerate(V)}\n    for (u, v) in E:\n        if v not in vertex_to_index:\n            continue\n        idx_u = vertex_to_index[u]\n        if v not in adj[idx_u]:\n            adj[idx_u].append(v)\n        if u not in adj[vertex_to_index[v]]:\n            adj[vertex_to_index[v]].append(u)\n    for idx in range(len(V)):\n        adj[idx].sort(key=lambda x: vertex_to_index[x])\n    return adj\nV = ['A', 'B', 'C', 'D', 'E']\nE = [('A', 'B'), ('A', 'D'), ('B', 'C'), ('B', 'D'), ('D', 'E'), ('D', 'C'), ('C', 'D')]"}
{"task_id": 266, "completion_id": 6, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    G = [[] for _ in V]\n    vertex_to_index = {v: idx for (idx, v) in enumerate(V)}\n    for (u, v) in E:\n        u_idx = vertex_to_index[u]\n        v_idx = vertex_to_index[v]\n        if v not in G[u_idx]:\n            G[u_idx].append(v)\n        if u not in G[v_idx]:\n            G[v_idx].append(u)\n    for i in range(len(V)):\n        G[i].sort(key=lambda x: vertex_to_index[x])\n    return G\nV = ['a', 'b', 'c', 'd']\nE = [('a', 'b'), ('b', 'c'), ('a', 'c'), ('b', 'c')]"}
{"task_id": 266, "completion_id": 7, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    vertex_to_index = {v: i for (i, v) in enumerate(V)}\n    G = [[] for _ in V]\n    processed_edges = set()\n    for (u, v) in E:\n        i = vertex_to_index[u]\n        j = vertex_to_index[v]\n        if (i, j) not in processed_edges and (j, i) not in processed_edges:\n            if v not in G[i]:\n                G[i].append(v)\n            if u not in G[j]:\n                G[j].append(u)\n            processed_edges.add((i, j))\n            processed_edges.add((j, i))\n    for i in range(len(G)):\n        G[i].sort(key=lambda x: vertex_to_index[x])\n    return G\nV = ['A', 'B', 'C', 'D', 'E']\nE = [('A', 'B'), ('A', 'C'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('B', 'C')]"}
{"task_id": 266, "completion_id": 8, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and v.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    vertex_to_index = {v: i for (i, v) in enumerate(V)}\n    adj = [[] for _ in V]\n    seen_edges = set()\n    for (u, v) in E:\n        if u not in vertex_to_index or v not in vertex_to_index:\n            continue\n        i = vertex_to_index[u]\n        j = vertex_to_index[v]\n        if (i, j) in seen_edges or (j, i) in seen_edges or i == j:\n            continue\n        adj[i].append(v)\n        adj[j].append(u)\n        seen_edges.add((i, j))\n    for neighbors in adj:\n        neighbors.sort(key=lambda x: vertex_to_index[x])\n    return adj"}
{"task_id": 266, "completion_id": 9, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and v.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    vertex_to_index = {v: i for (i, v) in enumerate(V)}\n    G = [[] for _ in V]\n    for (u, v) in E:\n        i = vertex_to_index[u]\n        j = vertex_to_index[v]\n        if v not in G[i]:\n            G[i].append(v)\n        if u not in G[j]:\n            G[j].append(u)\n    for i in range(len(V)):\n        G[i].sort(key=lambda x: vertex_to_index[x])\n    return G\nV = [1, 2, 3, 4, 5]\nE = [(1, 2), (2, 3), (1, 3), (2, 3), (4, 5), (3, 1), (2, 4)]"}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"\n    Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_error = float('inf')\n    best_stump = {}\n    for feature_idx in range(n_features):\n        unique_X = np.unique(X[:, feature_idx])\n        thresholds = (unique_X[1:] + unique_X[:-1]) / 2\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                predictions = np.where(X[:, feature_idx] < threshold, 1 if polarity == 1 else -1, -1 if polarity == 1 else 1)\n                weighted_error = np.sum(sample_weights[y != predictions])\n                if weighted_error < best_error:\n                    best_error = weighted_error\n                    best_stump = {'feature_index': feature_idx, 'threshold': round(threshold, 4), 'polarity': polarity, 'weighted_error': round(best_error, 4)}\n    return best_stump"}
{"task_id": 267, "completion_id": 1, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"\n    Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_error = float('inf')\n    best_stump = {}\n    for feature_idx in range(n_features):\n        unique_vals = np.unique(X[:, feature_idx])\n        possible_thresholds = np.sort(unique_vals)\n        combined = np.column_stack((X[:, feature_idx], y, sample_weights))\n        combined = combined[combined[:, 0].argsort()]\n        (feature_values, labels, weights) = combined.T\n        total_weight = np.sum(weights)\n        weight_neg_total = np.sum(weights[labels == -1])\n        weight_pos_total = np.sum(weights[labels == 1])\n        for threshold_idx in range(n_samples):\n            threshold = feature_values[threshold_idx]\n            for polarity in [1, -1]:\n                predictions = np.where(feature_values < threshold, 1, -1) * polarity\n                errors = np.sum(weights[predictions != y])\n                if errors < best_error:\n                    best_error = errors\n                    best_stump = {'feature_index': feature_idx, 'threshold': round(threshold, 4), 'polarity': polarity, 'weighted_error': round(best_error, 4)}\n    return best_stump"}
{"task_id": 267, "completion_id": 2, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"\n    Find the optimal weighted decision stump for binary classification.\n\n    A decision stump compares a single feature to a threshold and\n    classifies based on that, with polarity {1, -1}.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight vector for each sample.\n\n    Returns\n    -------\n    dict\n        Dictionary containing the best decision stump parameters.\n    \"\"\"\n    (n_samples, d_features) = X.shape\n    best_error = float('inf')\n    best_params = {'feature_index': -1, 'threshold': 0.0, 'polarity': 1, 'weighted_error': best_error}\n    for feature_index in range(d_features):\n        feature_values = X[:, feature_index]\n        indices = np.argsort(feature_values)\n        sorted_values = feature_values[indices]\n        sorted_labels = y[indices]\n        sorted_weights = sample_weights[indices]\n        unique_thresholds = np.unique(sorted_values)\n        thresholds = []\n        for i in range(len(unique_thresholds) - 1):\n            thresholds.append((unique_thresholds[i] + unique_thresholds[i + 1]) / 2)\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                predicted_labels = np.where(X[:, feature_index] < threshold, 1, -1)\n                if polarity == -1:\n                    predicted_labels *= -1\n                errors = (predicted_labels != y).astype(int) * sample_weights\n                weighted_error = np.sum(errors)\n                if weighted_error < best_error:\n                    best_error = weighted_error\n                    best_params = {'feature_index': feature_index, 'threshold': round(threshold, 4), 'polarity': polarity, 'weighted_error': round(best_error, 4)}\n    return best_params\nX = np.array([[2.0, 0.5], [1.0, 1.0], [3.0, 0.3], [4.0, 0.2]])\ny = np.array([1, -1, 1, -1])"}
{"task_id": 267, "completion_id": 3, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_error = float('inf')\n    best_feature = None\n    best_threshold = None\n    best_polarity = None\n    for feature_index in range(n_features):\n        X_col = X[:, feature_index]\n        unique_thresholds = np.unique(X_col)\n        if len(unique_thresholds) == 1:\n            continue\n        sort_idx = np.argsort(X_col)\n        sorted_y = y[sort_idx]\n        sorted_weights = sample_weights[sort_idx]\n        sorted_X = X_col[sort_idx]\n        cum_weight_pos1 = np.cumsum(sorted_weights[sorted_y == 1])\n        cum_weight_neg1 = np.cumsum(sorted_weights[sorted_y == -1])\n        total_pos = np.sum(sorted_weights[sorted_y == 1])\n        total_neg = np.sum(sorted_weights[sorted_y == -1])\n        for i in range(len(sorted_X) + 1):\n            if i == 0:\n                threshold = sorted_X[0] - 1e-09\n                guess = -1\n            elif i == len(sorted_X):\n                threshold = sorted_X[-1] + 1e-09\n                guess = 1\n            else:\n                threshold = (sorted_X[i - 1] + sorted_X[i]) / 2\n                guess = 1 if i == 0 else 1 if i == len(sorted_X) else -1\n            guess_for_error = guess\n            if i == 0:\n                errors = total_pos\n                weighted_error = total_neg if guess == -1 else total_pos\n            elif i == len(sorted_X):\n                errors = total_neg\n                weighted_error = total_pos if guess == 1 else total_neg\n            else:\n                pred_y_hat = np.where(X_col < threshold, -1, 1)\n                weighted_error = float(np.sum(sample_weights[y != pred_y_hat]))\n            for polarity in [1, -1]:\n                predictions = np.where(X_col < threshold, -1 * polarity, 1 * polarity)\n                error = np.sum(sample_weights[y != predictions])\n                if error < best_error:\n                    best_error = error\n                    best_feature = feature_index\n                    best_threshold = threshold\n                    best_polarity = polarity\n    return {'feature_index': int(best_feature), 'threshold': round(float(best_threshold), 4), 'polarity': int(best_polarity), 'weighted_error': round(float(best_error), 4)}\nX = np.array([[1, 2], [1, 3], [4, 1], [4, 2]])\ny = np.array([1, 1, -1, -1])"}
{"task_id": 267, "completion_id": 4, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"\n    Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_error = float('inf')\n    best_dict = None\n    for feature_idx in range(n_features):\n        unique_values = np.unique(X[:, feature_idx])\n        sorted_indices = np.argsort(X[:, feature_idx])\n        X_sorted = X[sorted_indices, feature_idx]\n        y_sorted = y[sorted_indices]\n        w_sorted = sample_weights[sorted_indices]\n        total_weights = np.cumsum(w_sorted)\n        for threshold in unique_values:\n            error_polarity_1 = total_weights[-1] - np.searchsorted(X_sorted, threshold) - np.sum(w_sorted[np.searchsorted(X_sorted, threshold):] * (y_sorted[np.searchsorted(X_sorted, threshold):] == 1))\n            error_polarity_1 += np.sum(w_sorted[:np.searchsorted(X_sorted, threshold)] * (y_sorted[:np.searchsorted(X_sorted, threshold)] == -1))\n            error_polarity_neg_1 = total_weights[-1] - np.searchsorted(X_sorted, threshold) - np.sum(w_sorted[np.searchsorted(X_sorted, threshold):] * (y_sorted[np.searchsorted(X_sorted, threshold):] == -1))\n            error_polarity_neg_1 += np.sum(w_sorted[:np.searchsorted(X_sorted, threshold)] * (y_sorted[:np.searchsorted(X_sorted, threshold)] == 1))\n            for (polarity, error) in [(1, error_polarity_1), (-1, error_polarity_neg_1)]:\n                if error < best_error:\n                    best_error = error\n                    best_dict = {'feature_index': feature_idx, 'threshold': round(threshold, 4), 'polarity': polarity, 'weighted_error': round(error, 4)}\n    return best_dict"}
{"task_id": 267, "completion_id": 5, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_error = float('inf')\n    best_stump = {}\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_thresholds = np.unique(feature_values)\n        sort_idx = np.argsort(feature_values)\n        sorted_y = y[sort_idx]\n        sorted_weights = sample_weights[sort_idx]\n        sorted_feature_values = feature_values[sort_idx]\n        total_weight = np.sum(sorted_weights)\n        current_error = np.sum(sorted_weights[sorted_y == -1])\n        for i in range(n_samples):\n            if i > 0 and sorted_y[i] == sorted_y[i - 1] and (sorted_feature_values[i] == sorted_feature_values[i - 1]):\n                continue\n            threshold = sorted_feature_values[i]\n            if i < n_samples:\n                misclassified_weight = np.sum(sorted_weights[i:][sorted_y[i:] == 1])\n            else:\n                misclassified_weight = 0\n            current_error = total_weight - np.sum(sorted_weights[:i][sorted_y[:i] == 1]) + misclassified_weight\n            if current_error < best_error:\n                best_error = current_error\n                best_stump = {'feature_index': feature_index, 'threshold': round(threshold, 4), 'polarity': 1, 'weighted_error': round(best_error, 4)}\n        current_error = np.sum(sorted_weights[sorted_y == 1])\n        for i in range(n_samples):\n            if i > 0 and sorted_y[i] == sorted_y[i - 1] and (sorted_feature_values[i] == sorted_feature_values[i - 1]):\n                continue\n            threshold = sorted_feature_values[i]\n            if i < n_samples:\n                misclassified_weight = np.sum(sorted_weights[i:][sorted_y[i:] == -1])\n            else:\n                misclassified_weight = 0\n            current_error = total_weight - np.sum(sorted_weights[:i][sorted_y[:i] == -1]) + misclassified_weight\n            if current_error < best_error:\n                best_error = current_error\n                best_stump = {'feature_index': feature_index, 'threshold': round(threshold, 4), 'polarity': -1, 'weighted_error': round(best_error, 4)}\n    return best_stump"}
{"task_id": 267, "completion_id": 6, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_error = float('inf')\n    best_feature = 0\n    best_threshold = 0.0\n    best_polarity = 1\n    for feature_idx in range(n_features):\n        sorted_indices = np.argsort(X[:, feature_idx])\n        X_sorted = X[sorted_indices, feature_idx]\n        y_sorted = y[sorted_indices]\n        w_sorted = sample_weights[sorted_indices]\n        unique_thresholds = np.unique(X_sorted)\n        current_error = np.sum(w_sorted * (y_sorted == 1))\n        current_error_alt = np.sum(w_sorted * (y_sorted == -1))\n        for i in range(len(unique_thresholds)):\n            threshold = unique_thresholds[i]\n            error = current_error\n            if error < best_error:\n                best_error = error\n                best_feature = feature_idx\n                best_threshold = threshold\n                best_polarity = 1\n            error_alt = current_error_alt\n            if error_alt < best_error:\n                best_error = error_alt\n                best_feature = feature_idx\n                best_threshold = threshold\n                best_polarity = -1\n            if i < len(X_sorted) - 1 and X_sorted[i] == X_sorted[i + 1]:\n                continue\n            current_error -= w_sorted[i] * (y_sorted[i] == 1)\n            current_error += w_sorted[i] * (y_sorted[i] == -1)\n            current_error_alt -= w_sorted[i] * (y_sorted[i] == -1)\n            current_error_alt += w_sorted[i] * (y_sorted[i] == 1)\n    return {'feature_index': int(best_feature), 'threshold': round(best_threshold, 4), 'polarity': int(best_polarity), 'weighted_error': round(best_error, 4)}"}
{"task_id": 267, "completion_id": 7, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_error = np.inf\n    best_threshold = 0\n    best_feature_index = 0\n    best_polarity = 1\n    for feature_idx in range(n_features):\n        feature_column = X[:, feature_idx]\n        sorted_indices = np.argsort(feature_column)\n        sorted_features = feature_column[sorted_indices]\n        sorted_labels = y[sorted_indices]\n        sorted_weights = sample_weights[sorted_indices]\n        unique_sorted_features = np.unique(sorted_features)\n        thresholds = []\n        for i in range(len(unique_sorted_features) - 1):\n            t1 = unique_sorted_features[i]\n            t2 = unique_sorted_features[i + 1]\n            thresholds.append((t1 + t2) / 2)\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                predictions = np.where(X[:, feature_idx] < threshold if polarity == 1 else X[:, feature_idx] >= threshold, 1, -1)\n                error = sample_weights[predictions != y].sum()\n                if error < best_error:\n                    best_error = error\n                    best_threshold = threshold\n                    best_feature_index = feature_idx\n                    best_polarity = polarity\n    return {'feature_index': best_feature_index, 'threshold': round(best_threshold, 4), 'polarity': best_polarity, 'weighted_error': round(best_error, 4)}"}
{"task_id": 267, "completion_id": 8, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n, d) = X.shape\n    best_error = np.inf\n    best_stump = None\n    for feature_index in range(d):\n        thresholds = np.unique(X[:, feature_index])\n        sort_idx = np.argsort(X[:, feature_index])\n        X_sorted = X[sort_idx, feature_index]\n        y_sorted = y[sort_idx]\n        w_sorted = sample_weights[sort_idx]\n        total_weights = w_sorted.sum()\n        for (i, threshold) in enumerate(thresholds):\n            for polarity in [1, -1]:\n                y_pred = np.where(X_sorted < threshold, 1 if polarity == 1 else -1, -1 if polarity == 1 else 1)\n                classification_error = np.sum(w_sorted[y_pred != y_sorted])\n                if classification_error < best_error:\n                    best_error = classification_error\n                    best_stump = {'feature_index': feature_index, 'threshold': float(np.round(threshold, 4)), 'polarity': polarity, 'weighted_error': float(np.round(best_error, 4))}\n        if best_error == 0:\n            break\n    return best_stump"}
{"task_id": 267, "completion_id": 9, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"\n    Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump:\n        {\n            \"feature_index\" : int,\n            \"threshold\"     : float (rounded to 4 decimals),\n            \"polarity\"      : int (-1 or 1),\n            \"weighted_error\": float (rounded to 4 decimals)\n        }\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_error = np.inf\n    best_feature_index = 0\n    best_threshold = 0.0\n    best_polarity = 1\n    for j in range(n_features):\n        feature_values = X[:, j]\n        sort_idx = np.argsort(feature_values)\n        sorted_y = y[sort_idx]\n        sorted_weights = sample_weights[sort_idx]\n        sorted_vals = feature_values[sort_idx]\n        prefix_sum_pos = np.cumsum((sorted_y == 1) * sorted_weights)\n        prefix_sum_neg = np.cumsum((sorted_y == -1) * sorted_weights)\n        total_weight = float(sample_weights.sum())\n        for i in range(n_samples + 1):\n            if i == 0:\n                threshold = -np.inf\n            elif i == n_samples:\n                threshold = np.inf\n            else:\n                threshold = (sorted_vals[i - 1] + sorted_vals[i]) / 2\n            for polarity in [1, -1]:\n                if polarity == 1:\n                    left_error = prefix_sum_neg[i]\n                    right_error = prefix_sum_pos[-1] - prefix_sum_pos[i]\n                else:\n                    left_error = prefix_sum_pos[i]\n                    right_error = prefix_sum_neg[-1] - prefix_sum_neg[i]\n                weighted_error = left_error + right_error\n                if weighted_error < best_error:\n                    best_error = weighted_error\n                    best_feature_index = j\n                    best_threshold = round(threshold, 4)\n                    best_polarity = polarity\n    return {'feature_index': best_feature_index, 'threshold': best_threshold, 'polarity': best_polarity, 'weighted_error': round(best_error, 4)}\nX = np.array([[1, 2], [2, 1], [3, 3], [4, 4]])\ny = np.array([1, -1, 1, -1])"}
{"task_id": 273, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimal places or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimal places.\n    \"\"\"\n    n = len(feature)\n    if n == 0 or len(set(feature)) <= 1:\n        return (None, 0.0)\n    data = sorted(zip(feature, target))\n    counter = Counter((y for (_, y) in data))\n    total = float(n)\n    parent_entropy = 0.0\n    for count in counter.values():\n        prob = count / total\n        parent_entropy -= prob * math.log(prob)\n    thresholds = {}\n    (prev_x, prev_label) = data[0]\n    for (x, y) in data[1:]:\n        if x != prev_x:\n            threshold = (prev_x + x) / 2.0\n            left_counter = Counter(prev_label)\n            right_counter = Counter()\n            for (xi, yi) in data:\n                if xi < threshold:\n                    left_counter[yi] += 1\n                else:\n                    right_counter[yi] += 1\n            left_entropy = 0.0\n            for count in left_counter.values():\n                prob = count / left_counter.total()\n                left_entropy -= prob * math.log(prob)\n            right_entropy = 0.0\n            for count in right_counter.values():\n                prob = count / right_counter.total()\n                right_entropy -= prob * math.log(prob)\n            left_weight = left_counter.total() / total\n            right_weight = right_counter.total() / total\n            info_gain = parent_entropy - left_weight * left_entropy - right_weight * right_entropy\n            thresholds[threshold] = info_gain\n        prev_x = x\n        prev_label = y\n    if not thresholds:\n        return (None, 0.0)\n    max_gain = max(thresholds.values())\n    best_thresholds = [t for (t, g) in thresholds.items() if round(g, 4) == round(max_gain, 4)]\n    if max_gain <= 0.0:\n        return (None, 0.0)\n    best_threshold = min(best_thresholds)\n    return (round(best_threshold, 4), round(max_gain, 4))"}
{"task_id": 273, "completion_id": 1, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"\n    Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimal places or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n\n    def entropy(labels):\n        \"\"\"Calculate the Shannon entropy of the class labels.\"\"\"\n        counts = Counter(labels)\n        total = len(labels)\n        return -sum((count / total * math.log2(count / total) for count in counts.values()))\n    n = len(feature)\n    if n == 0 or len(set(feature)) == 1:\n        return (None, 0.0)\n    data = sorted(zip(feature, target))\n    (feature, target) = zip(*data)\n    parent_entropy = entropy(target)\n    unique_values = set(feature)\n    if len(unique_values) < 2:\n        return (None, 0.0)\n    unique_values = sorted(unique_values)\n    thresholds = [(unique_values[i] + unique_values[i + 1]) / 2 for i in range(len(unique_values) - 1)]\n    best_threshold = None\n    best_ig = 0.0\n    for t in thresholds:\n        left_labels = []\n        right_labels = []\n        for (xi, yi) in zip(feature, target):\n            if xi < t:\n                left_labels.append(yi)\n            else:\n                right_labels.append(yi)\n        left_frac = len(left_labels) / n\n        right_frac = len(right_labels) / n\n        left_entropy = entropy(left_labels)\n        right_entropy = entropy(right_labels)\n        information_gain = parent_entropy - (left_frac * left_entropy + right_frac * right_entropy)\n        if information_gain > best_ig:\n            best_ig = information_gain\n            best_threshold = t\n        elif abs(information_gain - best_ig) < 1e-09:\n            if t < best_threshold:\n                best_threshold = t\n    if best_ig <= 0:\n        return (None, 0.0)\n    return (round(best_threshold, 4), round(best_ig, 4))"}
{"task_id": 273, "completion_id": 2, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimal places or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    n = len(feature)\n    if n == 0:\n        return (None, 0.0)\n    feature = list(feature)\n    target = list(target)\n    parent_classes = Counter(target)\n\n    def entropy(classes):\n        total = sum(classes.values())\n        if total == 0:\n            return 0.0\n        return -sum((count / total * math.log2(count / total) for count in classes.values() if count > 0))\n    parent_entropy = entropy(parent_classes)\n    if len(set(target)) <= 1 or len(feature) <= 1:\n        return (None, 0.0)\n    unique_sorted_features = sorted(set(feature))\n    if len(unique_sorted_features) <= 1:\n        return (None, 0.0)\n    (best_threshold, max_gain) = (None, 0.0)\n    sorted_pairs = sorted(zip(feature, target))\n    (feature_sorted, target_sorted) = zip(*sorted_pairs)\n    total_distribution = Counter(target_sorted)\n    left_distribution = Counter()\n    right_distribution = total_distribution.copy()\n    n_total = n\n    for i in range(n_sorted - 1):\n        xi = feature_sorted[i]\n        xj = feature_sorted[i + 1]\n        if xi == xj:\n            continue\n        threshold = (xi + xj) / 2.0\n        left_distribution[target_sorted[i]] += 1\n        right_distribution[target_sorted[i]] -= 1\n        if right_distribution[target_sorted[i]] == 0:\n            del right_distribution[target_sorted[i]]\n        n_left = i + 1\n        n_right = n_total - n_left\n        entropy_left = entropy(left_distribution)\n        entropy_right = entropy(right_distribution)\n        gain = parent_entropy - n_left / n_total * entropy_left - n_right / n_total * entropy_right\n        if gain > max_gain:\n            max_gain = gain\n            best_threshold = threshold\n    if max_gain > 0:\n        return (round(best_threshold, 4), round(max_gain, 4))\n    else:\n        return (None, 0.0)"}
{"task_id": 273, "completion_id": 3, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimal places or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimal places.\n    \"\"\"\n    feature = list(feature)\n    target = list(target)\n    n = len(feature)\n    if n == 0:\n        return (None, 0.0)\n    parent_counter = Counter(target)\n    parent_probs = [count / n for count in parent_counter.values()]\n    H_parent = -sum((p * math.log2(p) if p > 0 else 0 for p in parent_probs))\n    data = sorted(zip(feature, target))\n    unique_values = sorted(set(feature))\n    if len(unique_values) <= 1:\n        return (None, 0.0)\n    max_gain = 0.0\n    best_threshold = None\n    for i in range(len(unique_values) - 1):\n        t1 = unique_values[i]\n        t2 = unique_values[i + 1]\n        threshold = (t1 + t2) / 2\n        left_classes = []\n        right_classes = []\n        for (x, y) in data:\n            if x < threshold:\n                left_classes.append(y)\n            else:\n                right_classes.append(y)\n        H_left = 0.0\n        if left_classes:\n            left_counter = Counter(left_classes)\n            n_left = len(left_classes)\n            H_left = -sum((count / n_left * math.log2(count / n_left) for count in left_counter.values() if count > 0))\n        H_right = 0.0\n        if right_classes:\n            right_counter = Counter(right_classes)\n            n_right = len(right_classes)\n            H_right = -sum((count / n_right * math.log2(count / n_right) for count in right_counter.values() if count > 0))\n        gain = H_parent - len(left_classes) / n * H_left - len(right_classes) / n * H_right\n        if gain > max_gain:\n            max_gain = gain\n            best_threshold = threshold\n    if max_gain > 0:\n        return (round(best_threshold, 4), round(max_gain, 4))\n    else:\n        return (None, 0.0)"}
{"task_id": 273, "completion_id": 4, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimal places or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimal places.\n    \"\"\"\n    feature = list(feature)\n    target = list(target)\n    n = len(feature)\n    if n == 0:\n        return (None, 0.0)\n    parent_counter = Counter(target)\n    parent_entropy = 0.0\n    for count in parent_counter.values():\n        p = count / n\n        parent_entropy -= p * math.log2(p)\n    sorted_pairs = sorted(zip(feature, target))\n    (sorted_feature, sorted_target) = zip(*sorted_pairs)\n    unique_features = []\n    prev = None\n    for val in sorted_feature:\n        if val != prev:\n            unique_features.append(val)\n            prev = val\n    if len(unique_features) <= 1:\n        return (None, 0.0)\n    thresholds = [(unique_features[i] + unique_features[i + 1]) / 2 for i in range(len(unique_features) - 1)]\n    max_gain = 0.0\n    best_threshold = None\n    for (i, threshold) in enumerate(thresholds):\n        left = sorted_target[:i + 1]\n        right = sorted_target[i + 1:]\n        n_left = len(left)\n        n_right = len(right)\n        if n_left == 0 or n_right == 0:\n            continue\n        left_counter = Counter(left)\n        left_entropy = 0.0\n        for count in left_counter.values():\n            p = count / n_left\n            left_entropy -= p * math.log2(p)\n        right_counter = Counter(right)\n        right_entropy = 0.0\n        for count in right_counter.values():\n            p = count / n_right\n            right_entropy -= p * math.log2(p)\n        gain = parent_entropy - n_left / n * left_entropy - n_right / n * right_entropy\n        if gain > max_gain:\n            max_gain = gain\n            best_threshold = threshold\n    if best_threshold is not None and max_gain > 0:\n        return (round(best_threshold, 4), round(max_gain, 4))\n    else:\n        return (None, 0.0)"}
{"task_id": 273, "completion_id": 5, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimal places or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    n = len(feature)\n    if n == 0 or len(set(feature)) <= 1:\n        return (None, 0.0)\n    data = sorted(zip(feature, target), key=lambda x: x[0])\n    (feature, target) = zip(*data)\n    parent = Counter(target)\n    total = n\n    parent_entropy = 0.0\n    for count in parent.values():\n        p = count / total\n        parent_entropy -= p * math.log2(p)\n    unique_vals = sorted(set(feature))\n    candidate_thresholds = [(unique_vals[i] + unique_vals[i + 1]) / 2 for i in range(len(unique_vals) - 1)]\n    max_gain = 0.0\n    best_threshold = None\n    left_counts = Counter()\n    right_counts = Counter(target)\n    for (i, t) in enumerate(candidate_thresholds):\n        sample_class = target[i]\n        left_counts[sample_class] += 1\n        right_counts[sample_class] -= 1\n        left_total = i + 1\n        right_total = total - left_total\n        left_entropy = 0.0\n        for count in left_counts.values():\n            if count > 0:\n                p = count / left_total\n                left_entropy -= p * math.log2(p)\n        right_entropy = 0.0\n        for count in right_counts.values():\n            if count > 0:\n                p = count / right_total\n                right_entropy -= p * math.log2(p)\n        information_gain = parent_entropy - left_total / total * left_entropy - right_total / total * right_entropy\n        if information_gain > max_gain:\n            max_gain = information_gain\n            best_threshold = t\n    if max_gain > 0.0:\n        return (round(best_threshold, 4), round(max_gain, 4))\n    else:\n        return (None, 0.0)"}
{"task_id": 273, "completion_id": 6, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimal places or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimal places.\n    \"\"\"\n\n    def entropy(class_counts):\n        \"\"\"Calculate the Shannon entropy of the class distribution.\"\"\"\n        total = sum(class_counts)\n        if total == 0:\n            return 0.0\n        return -sum((count / total * math.log2(count / total) for count in class_counts if count > 0))\n    feature = list(feature)\n    target = list(target)\n    n = len(feature)\n    if n == 0:\n        return (None, 0.0)\n    parent_class_counts = Counter(target)\n    parent_entropy = entropy(list(parent_class_counts.values()))\n    unique_sorted_features = sorted(set(feature))\n    if len(unique_sorted_features) < 2:\n        return (None, 0.0)\n    best_threshold = None\n    best_gain = 0.0\n    for i in range(len(unique_sorted_features) - 1):\n        left_val = unique_sorted_features[i]\n        right_val = unique_sorted_features[i + 1]\n        threshold = (left_val + right_val) / 2\n        left_indices = [idx for idx in range(n) if feature[idx] < threshold]\n        right_indices = [idx for idx in range(n) if feature[idx] >= threshold]\n        left_labels = [target[i] for i in left_indices]\n        right_labels = [target[i] for i in right_indices]\n        class_counts_left = Counter(left_labels)\n        entropy_left = entropy(list(class_counts_left.values()))\n        class_counts_right = Counter(right_labels)\n        entropy_right = entropy(list(class_counts_right.values()))\n        gain = parent_entropy - len(left_indices) / n * entropy_left - len(right_indices) / n * entropy_right\n        if gain > best_gain:\n            best_gain = gain\n            best_threshold = threshold\n        elif abs(gain - best_gain) < 1e-09 and threshold < best_threshold:\n            best_threshold = threshold\n    return (round(best_threshold, 4), round(best_gain, 4)) if best_gain > 0 else (None, 0.0)"}
{"task_id": 273, "completion_id": 7, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimal places or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    n = len(feature)\n    if n == 0 or len(set(feature)) == 1:\n        return (None, 0.0)\n    data = sorted(zip(feature, target))\n    (sorted_features, sorted_targets) = zip(*data)\n    parent_class_counts = Counter(sorted_targets)\n    parent_entropy = _shannon_entropy(parent_class_counts)\n    best_gain = 0.0\n    best_threshold = None\n    i = 0\n    while i < n - 1:\n        if sorted_features[i] == sorted_features[i + 1]:\n            i += 1\n            continue\n        threshold = (sorted_features[i] + sorted_features[i + 1]) / 2.0\n        left_count = Counter(sorted_targets[:i + 1])\n        right_count = Counter(sorted_targets[i + 1:])\n        left_entropy = _shannon_entropy(left_count)\n        right_entropy = _shannon_entropy(right_count)\n        gain = parent_entropy - (i + 1) / n * left_entropy - (n - i - 1) / n * right_entropy\n        if gain > best_gain:\n            best_gain = gain\n            best_threshold = threshold\n        i += 1\n    threshold_rounded = round(best_threshold, 4) if best_threshold is not None else None\n    gain_rounded = round(best_gain, 4)\n    if gain_rounded > 0:\n        return (threshold_rounded, gain_rounded)\n    else:\n        return (None, 0.0)\ndef _shannon_entropy(class_counts):\n    \"\"\"Compute the Shannon entropy for a Counter of class counts.\"\"\"\n    total = sum(class_counts.values())\n    if total == 0:\n        return 0.0\n    entropy = 0.0\n    for count in class_counts.values():\n        p = count / total\n        entropy -= p * math.log2(p)\n    return entropy\nfeature = [1.0, 2.0, 2.0, 3.0, 4.0]\ntarget = [0, 1, 0, 1, 0]"}
{"task_id": 273, "completion_id": 8, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimal places or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    n = len(feature)\n    if n == 0:\n        return (None, 0.0)\n    feature = list(feature)\n    target = list(target)\n    data = sorted(zip(feature, target))\n    (feature_sorted, target_sorted) = zip(*data)\n    parent_counts = Counter(target_sorted)\n    parent_entropy = 0.0\n    for (label, count) in parent_counts.items():\n        p = count / n\n        parent_entropy -= p * math.log2(p)\n\n    def entropy(sub_labels):\n        counts = Counter(sub_labels)\n        e = 0.0\n        for (label, count) in counts.items():\n            p = count / len(sub_labels)\n            e -= p * math.log2(p)\n        return e\n    max_gain = 0.0\n    best_threshold = None\n    unique_values = set(feature_sorted)\n    if len(unique_values) <= 1:\n        return (None, 0.0)\n    for i in range(n - 1):\n        if feature_sorted[i] != feature_sorted[i + 1]:\n            threshold = (feature_sorted[i] + feature_sorted[i + 1]) / 2\n            left = target_sorted[:i + 1]\n            right = target_sorted[i + 1:]\n            if len(left) == 0 or len(right) == 0:\n                continue\n            left_entropy = entropy(left)\n            right_entropy = entropy(right)\n            gain = parent_entropy - len(left) / n * left_entropy - len(right) / n * right_entropy\n            if gain > max_gain:\n                max_gain = gain\n                best_threshold = threshold\n    if max_gain > 0:\n        return (round(best_threshold, 4), round(max_gain, 4))\n    else:\n        return (None, 0.0)\nfeature = [1.2, 3.4, 2.1, 3.4, 4.0]\ntarget = [0, 1, 0, 1, 0]"}
{"task_id": 273, "completion_id": 9, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimal places or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    n = len(feature)\n    if n == 0:\n        return (None, 0.0)\n    idx = sorted(range(n), key=lambda i: feature[i])\n    sorted_feature = [feature[i] for i in idx]\n    sorted_target = [target[i] for i in idx]\n    unique_transitions = []\n    for i in range(1, n):\n        if sorted_feature[i - 1] != sorted_feature[i]:\n            midpoint = (sorted_feature[i - 1] + sorted_feature[i]) / 2.0\n            unique_transitions.append((midpoint, i))\n    if not unique_transitions:\n        return (None, 0.0)\n    parent_labels = Counter(sorted_target)\n    parent_entropy = 0.0\n    for count in parent_labels.values():\n        p = count / n\n        parent_entropy -= p * math.log2(p)\n    max_gain = 0.0\n    best_threshold = None\n    for (threshold, right_start) in unique_transitions:\n        size_L = right_start\n        size_R = n - right_start\n        if size_L == 0 or size_R == 0:\n            continue\n        left_labels = Counter(sorted_target[:right_start])\n        right_labels = Counter(sorted_target[right_start:])\n        entropy_L = 0.0\n        for count in left_labels.values():\n            p = count / size_L\n            entropy_L -= p * math.log2(p)\n        entropy_R = 0.0\n        for count in right_labels.values():\n            p = count / size_R\n            entropy_R -= p * math.log2(p)\n        gain = parent_entropy - size_L / n * entropy_L - size_R / n * entropy_R\n        if gain > max_gain:\n            max_gain = gain\n            best_threshold = threshold\n        elif gain == max_gain and threshold < best_threshold:\n            best_threshold = threshold\n    return (round(best_threshold, 4), round(max_gain, 4)) if max_gain > 0 else (None, 0.0)\nfeature = [1, 2, 2, 3, 4, 4, 5]\ntarget = [0, 0, 1, 1, 1, 0, 0]"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    obj = globals().get(name)\n    if obj is not None and callable(obj):\n        return obj\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 1, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    candidate = globals().get(name)\n    if candidate is None or not callable(candidate):\n        raise ValueError('Invalid initialization function.')\n    return candidate"}
{"task_id": 286, "completion_id": 2, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    obj = globals().get(name)\n    if obj is None or not callable(obj):\n        raise ValueError('Invalid initialization function.')\n    return obj"}
{"task_id": 286, "completion_id": 3, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    obj = globals().get(name)\n    if obj is None or not callable(obj):\n        raise ValueError('Invalid initialization function.')\n    return obj"}
{"task_id": 286, "completion_id": 4, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    candidate = globals().get(name)\n    if candidate is None or not callable(candidate):\n        raise ValueError('Invalid initialization function.')\n    return candidate"}
{"task_id": 286, "completion_id": 5, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if initializer is None or not callable(initializer):\n        raise ValueError('Invalid initialization function.')\n    return initializer"}
{"task_id": 286, "completion_id": 6, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    obj = globals().get(name)\n    if obj is not None and callable(obj):\n        return obj\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 7, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    obj = globals().get(name)\n    if obj is None or not callable(obj):\n        raise ValueError('Invalid initialization function.')\n    return obj"}
{"task_id": 286, "completion_id": 8, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    obj = globals().get(name)\n    if obj is not None and callable(obj):\n        return obj\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 9, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    obj = globals().get(name)\n    if obj is None or not callable(obj):\n        raise ValueError('Invalid initialization function.')\n    return obj"}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start = i * s_h\n                    w_start = j * s_w\n                    window = X[n, c, h_start:h_start + p_h, w_start:w_start + p_w]\n                    pooled_output[n, c, i, j] = np.mean(window)\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start = i * s_h\n                    w_start = j * s_w\n                    grad_val = accum_grad[n, c, i, j] / (p_h * p_w)\n                    grad_input[n, c, h_start:h_start + p_h, w_start:w_start + p_w] += grad_val\n    pooled_output_rounded = np.round(pooled_output, 4).tolist()\n    grad_input_rounded = np.round(grad_input, 4).tolist()\n    return (pooled_output_rounded, grad_input_rounded)"}
{"task_id": 287, "completion_id": 1, "solution": "import numpy as np\nimport numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"\n    Performs forward and backward passes of a 2-D average-pooling layer.\n\n    Parameters:\n        X (np.ndarray): Input with shape (N, C, H, W)\n        pool_shape (tuple): (p_h, p_w) size of the pooling window\n        stride (tuple): (s_h, s_w) step size for moving the window\n        accum_grad (np.ndarray): Gradient with respect to output of shape (N, C, H_out, W_out)\n\n    Returns:\n        tuple: (output, grad_input), both as Python lists.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    output = np.zeros((N, C, H_out, W_out))\n    for i in range(N):\n        for j in range(C):\n            for x in range(H_out):\n                for y in range(W_out):\n                    x_start = x * s_h\n                    y_start = y * s_w\n                    window = X[i, j, x_start:x_start + p_h, y_start:y_start + p_w]\n                    output[i, j, x, y] = window.mean()\n    grad_input = np.zeros_like(X)\n    for i in range(N):\n        for j in range(C):\n            for x in range(H_out):\n                for y in range(W_out):\n                    x_start = x * s_h\n                    y_start = y * s_w\n                    grad = accum_grad[i, j, x, y]\n                    grad_input[i, j, x_start:x_start + p_h, y_start:y_start + p_w] += grad / (p_h * p_w)\n    output = np.round(output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    return (output, grad_input)\nX = np.array([[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11, 12], [13, 14, 15], [16, 17, 18]]], [[[19, 20, 21], [22, 23, 24], [25, 26, 27]], [[28, 29, 30], [31, 32, 33], [34, 35, 36]]]])\npool_shape = (2, 2)\nstride = (1, 1)\naccum_grad = np.array([[[[4.0, 3.0], [3.0, 1.0]], [[4.0, 3.0], [3.0, 1.0]]], [[[4.0, 3.0], [3.0, 1.0]], [[4.0, 3.0], [3.0, 1.0]]]])"}
{"task_id": 287, "completion_id": 2, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start = i * s_h\n                    w_start = j * s_w\n                    window = X[n, c, h_start:h_start + p_h, w_start:w_start + p_w]\n                    pooled_output[n, c, i, j] = np.mean(window)\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start = i * s_h\n                    w_start = j * s_w\n                    grad_value = accum_grad[n, c, i, j] / (p_h * p_w)\n                    grad_input[n, c, h_start:h_start + p_h, w_start:w_start + p_w] += grad_value\n    pooled_output = np.around(pooled_output, decimals=4).tolist()\n    grad_input = np.around(grad_input, decimals=4).tolist()\n    return (pooled_output, grad_input)"}
{"task_id": 287, "completion_id": 3, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    output = np.zeros((N, C, out_h, out_w))\n    for n in range(N):\n        for c in range(C):\n            for i in range(0, out_h):\n                for j in range(0, out_w):\n                    h_start = i * s_h\n                    h_end = h_start + p_h\n                    w_start = j * s_w\n                    w_end = w_start + p_w\n                    region = X[n, c, h_start:h_end, w_start:w_end]\n                    output[n, c, i, j] = np.mean(region)\n    output = np.round(output, 4).tolist()\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(0, out_h):\n                for j in range(0, out_w):\n                    h_start = i * s_h\n                    h_end = h_start + p_h\n                    w_start = j * s_w\n                    w_end = w_start + p_w\n                    grad = accum_grad[n, c, i, j]\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += grad / (p_h * p_w)\n    grad_input = np.round(grad_input, 4).tolist()\n    return (output, grad_input)"}
{"task_id": 287, "completion_id": 4, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    start_h = i * s_h\n                    start_w = j * s_w\n                    window = X[n, c, start_h:start_h + p_h, start_w:start_w + p_w]\n                    avg = np.mean(window)\n                    pooled_output[n, c, i, j] = avg\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    start_h = i * s_h\n                    start_w = j * s_w\n                    grad = accum_grad[n, c, i, j] / (p_h * p_w)\n                    grad_input[n, c, start_h:start_h + p_h, start_w:start_w + p_w] += grad\n    pooled_output_rounded = np.round(pooled_output, 4).tolist()\n    grad_input_rounded = np.round(grad_input, 4).tolist()\n    return (pooled_output_rounded, grad_input_rounded)"}
{"task_id": 287, "completion_id": 5, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    for i in range(N):\n        for j in range(C):\n            for k in range(out_h):\n                for l in range(out_w):\n                    h_start = k * s_h\n                    h_end = h_start + p_h\n                    w_start = l * s_w\n                    w_end = w_start + p_w\n                    window = X[i, j, h_start:h_end, w_start:w_end]\n                    pooled_output[i, j, k, l] = np.mean(window)\n    grad_input = np.zeros_like(X)\n    for i in range(N):\n        for j in range(C):\n            for k in range(out_h):\n                for l in range(out_w):\n                    h_start = k * s_h\n                    h_end = h_start + p_h\n                    w_start = l * s_w\n                    w_end = w_start + p_w\n                    grad = accum_grad[i, j, k, l] / (p_h * p_w)\n                    grad_input[i, j, h_start:h_end, w_start:w_end] += grad\n    pooled_output_rounded = np.round(pooled_output, 4).tolist()\n    grad_input_rounded = np.round(grad_input, 4).tolist()\n    return (pooled_output_rounded, grad_input_rounded)"}
{"task_id": 287, "completion_id": 6, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    for n in range(N):\n        for c in range(C):\n            for i in range(0, H - p_h + 1, s_h):\n                for j in range(0, W - p_w + 1, s_w):\n                    window = X[n, c, i:i + p_h, j:j + p_w]\n                    pooled_output[n, c, i // s_h, j // s_w] = np.mean(window)\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(0, H - p_h + 1, s_h):\n                for j in range(0, W - p_w + 1, s_w):\n                    grad = accum_grad[n, c, i // s_h, j // s_w]\n                    grad_input[n, c, i:i + p_h, j:j + p_w] += grad / (p_h * p_w)\n    pooled_output_rounded = np.round(pooled_output, 4)\n    grad_input_rounded = np.round(grad_input, 4)\n    return (pooled_output_rounded.tolist(), grad_input_rounded.tolist())"}
{"task_id": 287, "completion_id": 7, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"\n    Performs forward and backward passes of a 2-D average-pooling layer.\n\n    Args:\n        X (np.ndarray): Input tensor with shape (N, C, H, W)\n        pool_shape (tuple): Pool size (p_h, p_w)\n        stride (tuple): Stride (s_h, s_w)\n        accum_grad (np.ndarray): Gradient of the loss with respect to the output\n\n    Returns:\n        tuple: (pooled_output, grad_input), both as Python lists\n    \"\"\"\n    assert X.shape == (X.shape[0], X.shape[1], X.shape[2], X.shape[3]), 'X should be a 4-D array'\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    for i in range(out_h):\n        for j in range(out_w):\n            h_start = i * s_h\n            h_end = h_start + p_h\n            w_start = j * s_w\n            w_end = w_start + p_w\n            window = X[:, :, h_start:h_end, w_start:w_end]\n            pooled_output[:, :, i, j] = np.mean(window, axis=(2, 3))\n    grad_input = np.zeros_like(X)\n    for i in range(out_h):\n        for j in range(out_w):\n            h_start = i * s_h\n            h_end = h_start + p_h\n            w_start = j * s_w\n            w_end = w_start + p_w\n            grad_block = np.ones((p_h, p_w)) * accum_grad[:, :, i, j, np.newaxis, np.newaxis] / (p_h * p_w)\n            grad_input[:, :, h_start:h_end, w_start:w_end] += np.expand_dims(grad_block, axis=(0, 1))\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    return (pooled_output, grad_input)"}
{"task_id": 287, "completion_id": 8, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    O_h = (H - p_h) // s_h + 1\n    O_w = (W - p_w) // s_w + 1\n    output = np.zeros((N, C, O_h, O_w))\n    for n in range(N):\n        for c in range(C):\n            for i in range(O_h):\n                for j in range(O_w):\n                    h_start = i * s_h\n                    h_end = h_start + p_h\n                    w_start = j * s_w\n                    w_end = w_start + p_w\n                    window = X[n, c, h_start:h_end, w_start:w_end]\n                    output[n, c, i, j] = np.mean(window)\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(O_h):\n                for j in range(O_w):\n                    h_start = i * s_h\n                    h_end = h_start + p_h\n                    w_start = j * s_w\n                    w_end = w_start + p_w\n                    grad = accum_grad[n, c, i, j] / (p_h * p_w)\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += np.full((p_h, p_w), grad)\n    output_rounded = np.round(output, 4).tolist()\n    grad_input_rounded = np.round(grad_input, 4).tolist()\n    return (output_rounded, grad_input_rounded)"}
{"task_id": 287, "completion_id": 9, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n    \n    Args:\n        X: Input tensor of shape (N, C, H, W).\n        pool_shape: Tuple of (p_h, p_w) defining the pooling window size.\n        stride: Tuple of (s_h, s_w) defining the step size for sliding the window.\n        accum_grad: Gradient with respect to the output of the pooling layer.\n    \n    Returns:\n        A tuple (pooled_output, grad_input), both rounded to 4 decimals and as lists.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_h):\n                for w in range(out_w):\n                    h_start = h * s_h\n                    w_start = w * s_w\n                    window = X[n, c, h_start:h_start + p_h, w_start:w_start + p_w]\n                    pooled_output[n, c, h, w] = np.mean(window)\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_h):\n                for w in range(out_w):\n                    h_start = h * s_h\n                    w_start = w * s_w\n                    grad = accum_grad[n, c, h, w] / (p_h * p_w)\n                    grad_input[n, c, h_start:h_start + p_h, w_start:w_start + p_w] += grad * np.ones((p_h, p_w))\n    pooled_output_rounded = np.round(pooled_output, 4).tolist()\n    grad_input_rounded = np.round(grad_input, 4).tolist()\n    return (pooled_output_rounded, grad_input_rounded)"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if type(tree_a) != type(tree_b):\n        return False\n    if isinstance(tree_a, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    if isinstance(tree_a, Node):\n        if tree_a.feature != tree_b.feature or not np.allclose(tree_a.threshold, tree_b.threshold, atol=1e-08):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    return False"}
{"task_id": 290, "completion_id": 1, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    if not (isinstance(tree_a, Node) and isinstance(tree_b, Node)):\n        return False\n    if tree_a.feature != tree_b.feature or not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08):\n        return False\n    return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)"}
{"task_id": 290, "completion_id": 2, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature == tree_b.feature and abs(tree_a.threshold - tree_b.threshold) < 1e-08:\n            return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    return False"}
{"task_id": 290, "completion_id": 3, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if type(tree_a) != type(tree_b):\n        return False\n    if isinstance(tree_a, Leaf):\n        return np.allclose(np.array(tree_a.value), np.array(tree_b.value), atol=1e-08)\n    if isinstance(tree_a, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08, rtol=0):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    return True"}
{"task_id": 290, "completion_id": 4, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature == tree_b.feature and abs(tree_a.threshold - tree_b.threshold) < 1e-08:\n            return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n        else:\n            return False\n    return False"}
{"task_id": 290, "completion_id": 5, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if tree_a is None and tree_b is None:\n        return True\n    if tree_a is None or tree_b is None:\n        return False\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature == tree_b.feature and np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08):\n            return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n        else:\n            return False\n    return False"}
{"task_id": 290, "completion_id": 6, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if tree_a is None and tree_b is None:\n        return True\n    if tree_a is None or tree_b is None:\n        return False\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        a_value = np.array(tree_a.value) if isinstance(tree_a.value, list) else tree_a.value\n        b_value = np.array(tree_b.value) if isinstance(tree_b.value, list) else tree_b.value\n        return np.allclose(a_value, b_value, atol=1e-08)\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature or not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    return False"}
{"task_id": 290, "completion_id": 7, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if type(tree_a) != type(tree_b):\n        return False\n    if isinstance(tree_a, Leaf):\n        if isinstance(tree_a.value, (np.ndarray, list)):\n            return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n        else:\n            return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    if isinstance(tree_a, Node):\n        if tree_a.feature != tree_b.feature or not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    return True"}
{"task_id": 290, "completion_id": 8, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(np.array(tree_a.value), np.array(tree_b.value), atol=1e-08)\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature or not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    return False"}
{"task_id": 290, "completion_id": 9, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    if isinstance(tree_a, Leaf) or isinstance(tree_b, Leaf):\n        return False\n    node_a = tree_a\n    node_b = tree_b\n    if node_a.feature != node_b.feature or not np.allclose(node_a.threshold, node_b.threshold, atol=1e-08):\n        return False\n    return compare_trees(node_a.left, node_b.left) and compare_trees(node_a.right, node_b.right)"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return -1.\n    \"\"\"\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    num_cols = np_parent1.shape[1]\n    if not 0 <= cutoff <= num_cols:\n        return -1\n    child1 = np_parent1[:, :cutoff].copy().copy()\n    child1[:, cutoff:] = np_parent2[:, cutoff:]\n    child2 = np_parent2[:, :cutoff].copy().copy()\n    child2[:, cutoff:] = np_parent1[:, cutoff:]\n    return (child1.tolist(), child2.tolist())\nparent1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nparent2 = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]\ncutoff = 1"}
{"task_id": 292, "completion_id": 1, "solution": "def single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    n_cols = np_parent1.shape[1]\n    if not 0 <= cutoff <= n_cols:\n        return -1\n    child1 = np.copy(np_parent1)\n    child1[:, cutoff:] = np_parent2[:, cutoff:]\n    child2 = np.copy(np_parent2)\n    child2[:, cutoff:] = np_parent1[:, cutoff:]\n    return (child1.tolist(), child2.tolist())\ncutoff = 1"}
{"task_id": 292, "completion_id": 2, "solution": "import numpy as np\nfrom typing import list, tuple\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    p1 = np.array(parent1)\n    p2 = np.array(parent2)\n    if p1.shape != p2.shape:\n        return -1\n    num_cols = p1.shape[1]\n    if not 0 <= cutoff <= num_cols:\n        return -1\n    child1 = np.copy(p1)\n    child1[:, cutoff:] = p2[:, cutoff:]\n    child2 = np.copy(p2)\n    child2[:, cutoff:] = p1[:, cutoff:]\n    return (child1.tolist(), child2.tolist())"}
{"task_id": 292, "completion_id": 3, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function returns ``-1``.\n    \"\"\"\n    if len(parent1) != len(parent2) or len(parent1[0]) != len(parent2[0]):\n        return -1\n    np1 = np.array(parent1)\n    np2 = np.array(parent2)\n    cols = np1.shape[1]\n    if cutoff > cols:\n        return -1\n    child1 = np.copy(np1)\n    child2 = np.copy(np2)\n    if cutoff < cols:\n        child1[:, cutoff:] = np2[:, cutoff:]\n        child2[:, cutoff:] = np1[:, cutoff:]\n    return (child1.tolist(), child2.tolist())"}
{"task_id": 292, "completion_id": 4, "solution": "import numpy as np\nfrom typing import list, tuple\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff: Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    np_p1 = np.array(parent1)\n    np_p2 = np.array(parent2)\n    if np_p1.shape != np_p2.shape:\n        return -1\n    num_cols = np_p1.shape[1]\n    if cutoff < 0 or cutoff > num_cols:\n        return -1\n    child1 = np.hstack((np_p1[:, :cutoff], np_p2[:, cutoff:]))\n    child2 = np.hstack((np_p2[:, :cutoff], np_p1[:, cutoff:]))\n    return (child1.tolist(), child2.tolist())\ncutoff = 1"}
{"task_id": 292, "completion_id": 5, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff: Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    array1 = np.array(parent1)\n    array2 = np.array(parent2)\n    if array1.shape != array2.shape:\n        return -1\n    child1 = array1.copy()\n    child2 = array2.copy()\n    child1[:, cutoff:] = array2[:, cutoff:]\n    child2[:, cutoff:] = array1[:, cutoff:]\n    return (child1.tolist(), child2.tolist())\ncutoff = 1"}
{"task_id": 292, "completion_id": 6, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    p1 = np.array(parent1)\n    p2 = np.array(parent2)\n    if p1.shape != p2.shape:\n        return -1\n    num_cols = p1.shape[1]\n    if cutoff < 0 or cutoff > num_cols:\n        return -1\n    child1 = p1.copy()\n    child1[:, cutoff:] = p2[:, cutoff:]\n    child2 = p2.copy()\n    child2[:, cutoff:] = p1[:, cutoff:]\n    return (child1.tolist(), child2.tolist())\np1 = [[1, 2, 3], [4, 5, 6]]\np2 = [[7, 8, 9], [10, 11, 12]]\ncutoff = 1"}
{"task_id": 292, "completion_id": 7, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    num_cols = np_parent1.shape[1]\n    if not 0 <= cutoff <= num_cols:\n        return -1\n    child1 = np.hstack((np_parent1[:, :cutoff], np_parent2[:, cutoff:]))\n    child2 = np.hstack((np_parent2[:, :cutoff], np_parent1[:, cutoff:]))\n    return (child1.tolist(), child2.tolist())"}
{"task_id": 292, "completion_id": 8, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    if len(parent1) != len(parent2) or len(parent1[0]) != len(parent2[0]):\n        return -1\n    p1 = np.array(parent1)\n    p2 = np.array(parent2)\n    child1 = np.copy(p1)\n    child1[:, cutoff:] = p2[:, cutoff:]\n    child2 = np.copy(p2)\n    child2[:, cutoff:] = p1[:, cutoff:]\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    return (child1_list, child2_list)"}
{"task_id": 292, "completion_id": 9, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return -1.\n    \"\"\"\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    child1 = np.hstack((np_parent1[:, :cutoff], np_parent2[:, cutoff:]))\n    child2 = np.hstack((np_parent2[:, :cutoff], np_parent1[:, cutoff:]))\n    return (child1.tolist(), child2.tolist())"}
{"task_id": 294, "completion_id": 0, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {v: [] for v in G['_V2I'].keys()}\n    for edge in G['_G']:\n        (source_label, target_label, weight) = edge\n        adj[source_label].append((target_label, weight))\n        if not G['is_directed']:\n            adj[target_label].append((source_label, weight))\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    return adj"}
{"task_id": 294, "completion_id": 1, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    if '_V2I' not in G or not G['_V2I']:\n        return {}\n    G['_I2V'] = {i: label for (label, i) in G['_V2I'].items()}\n    adj = {label: [] for label in G['_V2I']}\n    for (i, edges) in enumerate(G['_G']):\n        source_label = G['_I2V'][i]\n        for (src, target, weight) in edges:\n            adj[src].append((target, weight))\n    if not G.get('is_directed', False):\n        for (src, neighbors) in adj.items():\n            for (target, weight) in neighbors:\n                if (src, weight) not in [(t, w) for (t, w) in adj[target]]:\n                    adj[target].append((src, weight))\n    for neighbors in adj.values():\n        neighbors.sort(key=lambda x: x[0])\n    return adj\nG = {'is_directed': False, '_V2I': {'A': 0, 'B': 1}, '_G': [('A', 'B', 1.0), ('B', 'A', 2.0)]}\nadj = to_networkx(G)"}
{"task_id": 294, "completion_id": 2, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    V2I = G.get('_V2I', {})\n    is_directed = G.get('is_directed', False)\n    G_structure = G.get('_G', [])\n    adj: Dict[Any, List[Tuple[Any, float]]] = {v: [] for v in V2I}\n    for (source_label, target_label, weight) in G_structure:\n        adj[source_label].append((target_label, weight))\n    if not is_directed:\n        for (source_label, target_label, weight) in G_structure:\n            adj[target_label].append((source_label, weight))\n    for neighbor_list in adj.values():\n        neighbor_list.sort(key=lambda x: x[0])\n    return adj"}
{"task_id": 294, "completion_id": 3, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples. For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj: Dict[Any, List[Tuple[Any, float]]] = {}\n    V2I = G['_V2I']\n    G_list = G['_G']\n    is_directed = G['is_directed']\n    I2V = {i: label for (label, i) in V2I.items()}\n    for label in V2I:\n        adj[label] = []\n    for (i, edges) in enumerate(G_list):\n        source_label = I2V[i]\n        for (s, t, weight) in edges:\n            adj[s].append((t, weight))\n            if not is_directed:\n                if t not in V2I:\n                    V2I[t] = len(V2I)\n                adj[t].append((s, weight))\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    return adj"}
{"task_id": 294, "completion_id": 4, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {}\n    for vertex in G['_V2I']:\n        adj[vertex] = []\n    for (source_label, target_label, weight) in G['_G']:\n        adj[source_label].append((target_label, weight))\n        if not G['is_directed']:\n            adj[target_label].append((source_label, weight))\n    for u in adj:\n        adj[u].sort(key=lambda x: x[0])\n    return adj"}
{"task_id": 294, "completion_id": 5, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj: Dict[Any, List[Tuple[Any, float]]] = {}\n    V2I = G['_V2I']\n    for vertex in V2I:\n        adj[vertex] = []\n    for edge in G['_G']:\n        (source_label, target_label, weight) = edge\n        adj[source_label].append((target_label, weight))\n        if not G['is_directed']:\n            adj[target_label].append((source_label, weight))\n    for vertex in adj:\n        adj[vertex].sort(key=lambda x: x[0])\n    return adj"}
{"task_id": 294, "completion_id": 6, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    if '_V2I' not in G:\n        return {}\n    adj: Dict[Any, List[Tuple[Any, float]]] = {v: [] for v in G['_V2I']}\n    for (source_label, target_label, weight) in G['_G']:\n        adj[source_label].append((target_label, weight))\n        if not G['is_directed']:\n            adj[target_label].append((source_label, weight))\n    for u in adj:\n        adj[u] = sorted(adj[u], key=lambda x: x[0])\n    return adj\nG = {'is_directed': False, '_V2I': {'A': 0, 'B': 1, 'C': 2}, '_G': [('A', 'B', 1), ('B', 'C', 2)]}"}
{"task_id": 294, "completion_id": 7, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {}\n    V2I = G['_V2I']\n    edge_list = G['_G']\n    is_directed = G['is_directed']\n    for label in V2I:\n        adj[label] = []\n    for (source_label, target_label, weight) in edge_list:\n        adj[source_label].append((target_label, weight))\n        if not is_directed:\n            adj[target_label].append((source_label, weight))\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    return adj"}
{"task_id": 294, "completion_id": 8, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    V2I = G['_V2I']\n    V2L = {v: k for (k, v) in V2I.items()}\n    is_directed = G['is_directed']\n    edge_list = G['_G']\n    adj = {label: [] for label in V2I}\n    for (idx, edge_tuples) in enumerate(edge_list):\n        source_label = V2L[idx]\n        for (source, target, weight) in edge_tuples:\n            if source != source_label:\n                continue\n            adj[source_label].append((target, float(weight)))\n            if not is_directed:\n                if target not in adj:\n                    adj[target] = []\n                adj[target].append((source, float(weight)))\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    return adj\nG = {'is_directed': False, '_V2I': {'A': 0, 'B': 1, 'C': 2}, '_G': [[('A', 'B', 1), ('A', 'C', 2)], [('B', 'C', 3)], [('C', 'A', 4)]]}"}
{"task_id": 294, "completion_id": 9, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {vertex: [] for vertex in G['_V2I']}\n    for (source_label, target_label, weight) in G['_G']:\n        adj[source_label].append((target_label, weight))\n        if not G['is_directed']:\n            adj[target_label].append((source_label, weight))\n    for vertex in adj:\n        adj[vertex].sort(key=lambda x: x[0])\n    return adj"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all((x == 0) | (x == 1))"}
{"task_id": 296, "completion_id": 1, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x_flat = np.ravel(x)\n    return np.all(np.isin(x_flat.astype(int), [0, 1]))"}
{"task_id": 296, "completion_id": 2, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all((x == 0) | (x == 1) | (x is False) | (x is True))"}
{"task_id": 296, "completion_id": 3, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all(np.isin(x, [0, 1]) | (x.dtype == bool))"}
{"task_id": 296, "completion_id": 4, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        True if all elements are 0 or 1, otherwise False.\n    \"\"\"\n    x = np.asarray(x)\n    if x.dtype == np.bool_:\n        x = x.astype(int)\n    return np.array_equal(x, x.astype(bool).astype(x.dtype))"}
{"task_id": 296, "completion_id": 5, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    if x.dtype == np.bool_:\n        return True\n    return np.all(np.isin(x, [0, 1]))"}
{"task_id": 296, "completion_id": 6, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all((x == 0) | (x == 1) | (x.dtype == bool) & (x != x.astype(int)))"}
{"task_id": 296, "completion_id": 7, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all((x == 0) | (x == 1) | (x is False) | (x is True))"}
{"task_id": 296, "completion_id": 8, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.array(x)\n    x = x.astype(np.int64)\n    return np.all((x == 0) | (x == 1))"}
{"task_id": 296, "completion_id": 9, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    if x.dtype == bool:\n        return True\n    else:\n        return np.all((x == 0) | (x == 1))"}
{"task_id": 298, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\"\"\"\n    if N == 1:\n        unigram_counts = Counter()\n        total_tokens = 0\n        for sentence in corpus:\n            tokens = sentence.split()\n            unigram_counts.update(tokens)\n            total_tokens += len(tokens)\n        log_prob = 0.0\n        query_tokens = query.split()\n        for word in query_tokens:\n            count = unigram_counts.get(word, 0)\n            if count == 0:\n                return float('-inf')\n            prob = count / total_tokens\n            log_prob += math.log(prob)\n        return round(log_prob, 4)\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus:\n        tokens = sentence.split()\n        padded_tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        for i in range(len(padded_tokens) - N + 1):\n            ngram = tuple(padded_tokens[i:i + N])\n            ngram_minus_last = tuple(padded_tokens[i:i + N - 1])\n            ngram_counts[ngram_minus_last][ngram] += 1\n    query_tokens = query.split()\n    if len(query_tokens) < N - 1:\n        return float('-inf')\n    padded_query = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    log_total_prob = 0.0\n    for i in range(len(padded_query) - N + 1):\n        ngram = tuple(padded_query[i:i + N])\n        ngram_prefix = tuple(padded_query[i:i + N - 1])\n        if ngram_prefix not in ngram_counts:\n            return float('-inf')\n        total = sum(ngram_counts[ngram_prefix].values())\n        count = ngram_counts[ngram_prefix].get(ngram, 0)\n        if count == 0:\n            return float('-inf')\n        prob = count / total\n        log_total_prob += math.log(prob)\n    return round(log_total_prob, 4)"}
{"task_id": 298, "completion_id": 1, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List, Tuple, Dict\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n\n    def tokenize(sentence: str, N: int) -> List[str]:\n        tokens = sentence.strip().split()\n        if N == 1:\n            return tokens\n        padded = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        return padded\n    ngram_counts = defaultdict(Counter)\n    if N > 1:\n        for sentence in corpus:\n            tokens = tokenize(sentence, N)\n            for i in range(len(tokens) - N + 1):\n                ngram = tuple(tokens[i:i + N])\n                context = tuple(tokens[i:i + N - 1])\n                ngram_counts[context][ngram] += 1\n    else:\n        for sentence in corpus:\n            tokens = tokenize(sentence, N)\n            for token in tokens:\n                ngram_counts[tuple()][''.join(token)] += 1\n    query_tokens = tokenize(query, N)\n    if len(query_tokens) < N:\n        return float('-inf')\n    total_log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        context = tuple(query_tokens[i:i + N - 1]) if N > 1 else tuple()\n        ngram_count = ngram_counts[context][ngram]\n        if ngram_count == 0:\n            return float('-inf')\n        if N == 1:\n            total_tokens = ngram_counts[tuple()].values().__len__()\n            prob = ngram_count / total_tokens\n        else:\n            context_total = sum(ngram_counts[context].values())\n            prob = ngram_count / context_total\n        total_log_prob += math.log(prob)\n    return round(total_log_prob, 4)"}
{"task_id": 298, "completion_id": 2, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be \u2265 1')\n    ngram_counts = Counter()\n    context_counts = Counter() if N > 1 else 0\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N == 1:\n            ngram_counts.update(tokens)\n        else:\n            padded_tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n            for i in range(len(padded_tokens) - N + 1):\n                ngram = tuple(padded_tokens[i:i + N])\n                context = tuple(padded_tokens[i:i + N - 1])\n                ngram_counts[ngram] += 1\n                context_counts[context] += 1\n    query_tokens = query.split()\n    if len(query_tokens) < N:\n        return float('-inf')\n    if N == 1:\n        padded_query = query_tokens\n    else:\n        padded_query = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    log_prob = 0.0\n    for i in range(len(padded_query) - N + 1):\n        ngram = tuple(padded_query[i:i + N])\n        if N == 1:\n            context_count = len(query_tokens)\n        else:\n            context = tuple(padded_query[i:i + N - 1])\n            context_count = context_counts.get(context, 0)\n        if context_count == 0:\n            return float('-inf')\n        ngram_count = ngram_counts.get(ngram, 0)\n        if ngram_count == 0:\n            return float('-inf')\n        log_prob += math.log(ngram_count / context_count)\n    return round(log_prob, 4)"}
{"task_id": 298, "completion_id": 3, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"\n    Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus, the function returns\n        float('-inf').\n    \"\"\"\n    total_tokens = 0\n    count_ngrams = Counter()\n    count_prefixes = Counter()\n    for sentence in corpus:\n        if N == 1:\n            tokens = sentence.split()\n            total_tokens += len(tokens)\n            count_ngrams.update(tokens)\n        else:\n            tokens = ['<bol>'] * (N - 1) + sentence.split() + ['<eol>']\n            for i in range(len(tokens) - N + 1):\n                ngram = tuple(tokens[i:i + N])\n                prefix = ngram[:-1]\n                count_ngrams[ngram] += 1\n                count_prefixes[prefix] += 1\n    if N == 1:\n        query_tokens = query.split()\n    else:\n        query_tokens = ['<bol>'] * (N - 1) + query.split() + ['<eol>']\n    if len(query_tokens) < N:\n        return float('-inf')\n    total_log_prob = 0\n    if N == 1:\n        for token in query_tokens:\n            if count_ngrams[token] == 0:\n                return float('-inf')\n            prob = count_ngrams[token] / total_tokens\n            total_log_prob += math.log(prob)\n    else:\n        for i in range(len(query_tokens) - N + 1):\n            ngram = tuple(query_tokens[i:i + N])\n            prefix = ngram[:-1]\n            if count_prefixes[prefix] == 0:\n                return float('-inf')\n            prob = count_ngrams[ngram] / count_prefixes[prefix]\n            if prob == 0:\n                return float('-inf')\n            total_log_prob += math.log(prob)\n    return round(total_log_prob, 4)\ncorpus = ['a b a', 'b a b']\nN = 1"}
{"task_id": 298, "completion_id": 4, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1.')\n    if N == 1:\n        total_tokens = 0\n    else:\n        corpus = [sent for sent in corpus if len(sent.split()) >= N - 1]\n    ngram_counts = Counter()\n    context_counts = Counter()\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N == 1:\n            padded = tokens\n        else:\n            if len(tokens) < N - 1:\n                continue\n            padded = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        for i in range(len(padded) - (N - 1)):\n            context = tuple(padded[i:i + N - 1])\n            word = padded[i + N - 1]\n            ngram = context + (word,)\n            ngram_counts[ngram] += 1\n            context_counts[context] += 1\n    tokens = query.split()\n    if N == 1:\n        padded_query = tokens\n    else:\n        if len(tokens) < N - 1:\n            return float('-inf')\n        padded_query = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n    log_prob = 0.0\n    for i in range(len(padded_query) - (N - 1)):\n        context = tuple(padded_query[i:i + N - 1])\n        word = padded_query[i + N - 1]\n        ngram = context + (word,)\n        if context_counts[context] == 0:\n            return float('-inf')\n        if N == 1:\n            total_tokens = sum(context_counts.values())\n            if total_tokens == 0:\n                return float('-inf')\n        prob = ngram_counts[ngram] / context_counts[context]\n        log_prob += math.log(prob)\n    return round(log_prob, 4)\ncorpus = ['a b a', 'b a b']\nN = 1"}
{"task_id": 298, "completion_id": 5, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    total_log_prob = 0.0\n    if N < 1:\n        raise ValueError('N must be at least 1')\n    ngrams_counter = Counter()\n    contexts_counter = Counter()\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            padded_tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        else:\n            padded_tokens = tokens\n        for i in range(len(padded_tokens) - N + 1):\n            ngram = tuple(padded_tokens[i:i + N])\n            context = tuple(padded_tokens[i:i + N - 1])\n            ngrams_counter[ngram] += 1\n            contexts_counter[context] += 1\n    query_tokens = query.split()\n    if N > 1:\n        padded_query = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    else:\n        padded_query = query_tokens\n    if len(padded_query) < N:\n        return float('-inf')\n    total_tokens = len(' '.join(corpus).split()) if N == 1 else 0\n    for i in range(len(padded_query) - N + 1):\n        context = tuple(padded_query[i:i + N - 1])\n        word = padded_query[i + N - 1]\n        ngram = tuple(padded_query[i:i + N])\n        if N == 1:\n            if word not in ngrams_counter:\n                return float('-inf')\n            prob = ngrams_counter[ngram] / total_tokens\n        else:\n            if context not in contexts_counter:\n                return float('-inf')\n            if ngram not in ngrams_counter:\n                return float('-inf')\n            prob = ngrams_counter[ngram] / contexts_counter[context]\n        total_log_prob += math.log(prob)\n    return round(total_log_prob, 4)\ncorpus = ['a b a', 'b a b']\nN = 1"}
{"task_id": 298, "completion_id": 6, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be \u2265 1')\n    ngram_counts = Counter()\n    prefix_counts = defaultdict(int)\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N == 1:\n            ngram_counts.update(tokens)\n        else:\n            padded_tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n            for i in range(len(padded_tokens) - N + 1):\n                ngram = tuple(padded_tokens[i:i + N])\n                context = tuple(padded_tokens[i:i + N - 1])\n                ngram_counts[ngram] += 1\n                prefix_counts[context] += 1\n            total_tokens = len(tokens)\n            prefix_counts[()] += total_tokens\n    query_tokens = query.split()\n    if N == 1:\n        padded_query = query_tokens\n    else:\n        if len(query_tokens) < N - 1:\n            return float('-inf')\n        padded_query = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    log_prob_sum = 0.0\n    for i in range(len(padded_query) - N + 1):\n        ngram = tuple(padded_query[i:i + N])\n        prefix = tuple(padded_query[i:i + N - 1])\n        if N == 1:\n            total_tokens = prefix_counts[prefix]\n            ngram_count = ngram_counts[ngram]\n        else:\n            total_tokens = prefix_counts[prefix]\n            ngram_count = ngram_counts[ngram]\n        if ngram_count == 0:\n            return float('-inf')\n        log_prob = math.log(ngram_count / total_tokens)\n        log_prob_sum += log_prob\n    return round(log_prob_sum, 4)"}
{"task_id": 298, "completion_id": 7, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n    corpus_tokens = []\n    for sentence in corpus:\n        tokens = sentence.strip().split()\n        if N == 1:\n            padded = tokens\n        else:\n            padded = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        corpus_tokens.append(padded)\n    context_counts = Counter()\n    ngram_counts = Counter()\n    for tokens in corpus_tokens:\n        if N == 1:\n            for token in tokens:\n                ngram_counts[tuple(('',))] += 1\n        else:\n            for i in range(len(tokens) - (N - 1)):\n                context = tuple(tokens[i:i + N - 1])\n                ngram = tuple(tokens[i:i + N])\n                context_counts[context] += 1\n                ngram_counts[ngram] += 1\n    if N == 1:\n        padded_query = query.strip().split()\n    else:\n        query_tokens = query.strip().split()\n        if len(query_tokens) < N - 1:\n            return float('-inf')\n        padded_query = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    total_log_prob = 0.0\n    for i in range(len(padded_query) - (N - 1)):\n        ngram = tuple(padded_query[i:i + N])\n        if N == 1:\n            context = ('',)\n        else:\n            context = tuple(padded_query[i:i + N - 1])\n        if context_counts[context] == 0:\n            return float('-inf')\n        if ngram_counts[ngram] == 0:\n            return float('-inf')\n        prob = ngram_counts[ngram] / context_counts[context]\n        total_log_prob += math.log(prob)\n    return round(total_log_prob, 4)\ncorpus = ['a b a', 'b a b']\nN = 1"}
{"task_id": 298, "completion_id": 8, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n\n    def _pad(tokens):\n        if N == 1:\n            return tokens\n        else:\n            padding_start = ['<bol>'] * (N - 1)\n            padding_end = ['<eol>']\n            return padding_start + tokens + padding_end\n    ngrams_counts = Counter()\n    contexts_counts = Counter()\n    for sentence in corpus:\n        tokens = sentence.split()\n        padded_tokens = _pad(tokens)\n        for i in range(len(padded_tokens) - N + 1):\n            ngram = tuple(padded_tokens[i:i + N])\n            context = tuple(padded_tokens[i:i + N - 1])\n            ngrams_counts[context + (ngram[-1],)] += 1\n            if N > 1:\n                contexts_counts[context] += 1\n    total_tokens = sum(ngrams_counts.values())\n    query_tokens = query.split()\n    padded_query_tokens = _pad(query_tokens)\n    if len(padded_query_tokens) < N:\n        return float('-inf')\n    total_log_prob = 0.0\n    for i in range(len(padded_query_tokens) - N + 1):\n        context = tuple(padded_query_tokens[i:i + N - 1])\n        next_token = padded_query_tokens[i + N - 1]\n        if N == 1:\n            count_ngram = ngrams_counts[next_token,]\n            count_context = total_tokens\n        else:\n            count_ngram = ngrams_counts.get(context + (next_token,), 0)\n            count_context = contexts_counts.get(context, 0)\n        if count_context == 0:\n            return float('-inf')\n        prob = count_ngram / count_context\n        total_log_prob += math.log(prob)\n    return round(total_log_prob, 4)"}
{"task_id": 298, "completion_id": 9, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n\n    def tokenize_and_pad(sentence: str):\n        tokens = sentence.strip().split()\n        if N == 1:\n            return tokens\n        padded_tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        return padded_tokens\n    corpus_tokens = [tokenize_and_pad(s) for s in corpus]\n    ngram_counts = defaultdict(Counter)\n    context_counts = Counter()\n    for tokens in corpus_tokens:\n        if N == 1:\n            for token in tokens:\n                ngram_counts[()][-1, token] += 1\n                context_counts[()] += 1\n        else:\n            for i in range(len(tokens) - N + 1):\n                context = tuple(tokens[i:i + N - 1])\n                target = tokens[i + N - 1]\n                ngram = context + (target,)\n                ngram_counts[context][target] += 1\n                context_counts[context] += 1\n    query_tokens = query.strip().split()\n    if N > 1:\n        if len(query_tokens) < 1:\n            return float('-inf')\n        padded_query = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    else:\n        padded_query = query_tokens\n    total_log_prob = 0.0\n    for i in range(len(padded_query) - N + 1):\n        if N == 1:\n            context = ()\n            target = padded_query[i]\n        else:\n            context = tuple(padded_query[i:i + N - 1])\n            target = padded_query[i + N - 1]\n        ngram_count = ngram_counts[context][target]\n        context_count = context_counts[context]\n        if context_count == 0:\n            return float('-inf')\n        prob = ngram_count / context_count\n        total_log_prob += math.log(prob)\n    return round(total_log_prob, 4)"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n, d) = X.shape\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            distance = np.linalg.norm(X[i] - X[j])\n            W[i, j] = 1 / (1 + distance)\n    D = np.zeros((n, n))\n    for i in range(n):\n        D[i, i] = np.sum(W[i, :])\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    centroids = E[:k].copy()\n    n_points = E.shape[0]\n    for _ in range(100):\n        cluster_assignments = np.zeros(n_points, dtype=int)\n        for i in range(n_points):\n            distances = np.linalg.norm(E[i] - centroids, axis=1)\n            cluster_assignments[i] = np.argmin(distances)\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(k, dtype=int)\n        for i in range(n_points):\n            cluster = cluster_assignments[i]\n            new_centroids[cluster] += E[i]\n            counts[cluster] += 1\n        for c in range(k):\n            if counts[c] > 0:\n                new_centroids[c] /= counts[c]\n            else:\n                random_idx = np.random.randint(n_points)\n                new_centroids[c] = E[random_idx]\n        if np.allclose(new_centroids, centroids):\n            break\n        centroids = new_centroids\n    return cluster_assignments.tolist()"}
{"task_id": 302, "completion_id": 1, "solution": "import numpy as np\nfrom typing import List\nimport numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> List[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n, d) = X.shape\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = np.linalg.norm(X[i] - X[j])\n            W[i, j] = 1.0 / (1.0 + dist)\n            W[j, i] = W[i, j]\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigvals, eigvecs) = np.linalg.eigh(L)\n    idx = np.argsort(eigvals)\n    E = eigvecs[:, idx[:k]]\n    centroids = E[:k].copy()\n    max_iter = 100\n    for _ in range(max_iter):\n        assignments = np.array([np.argmin([np.linalg.norm(E[i] - c) for c in centroids]) for i in range(n)])\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(k, dtype=int)\n        for i in range(n):\n            c = assignments[i]\n            new_centroids[c] += E[i]\n            counts[c] += 1\n        for i in range(k):\n            if counts[i] == 0:\n                new_centroids[i] = E[np.random.choice(n)]\n        new_centroids = new_centroids / counts[:, np.newaxis]\n        if np.all(np.abs(new_centroids - centroids) < 1e-06):\n            break\n        centroids = new_centroids\n    return assignments.tolist()\nX = np.vstack([np.random.multivariate_normal([0, 0], [[1, 0.5], [0.5, 1]], 50), np.random.multivariate_normal([5, 5], [[1, 0.5], [0.5, 1]], 50)])\nk = 2"}
{"task_id": 302, "completion_id": 2, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n = X.shape[0]\n    d = X.shape[1]\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                dist = np.linalg.norm(X[i] - X[j])\n                W[i, j] = 1 / (1 + dist)\n    D = np.diag(W.sum(axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    centroids = E[:k, :].copy()\n    max_iter = 100\n    for _ in range(max_iter):\n        distances = np.sqrt(((E[:, np.newaxis] - centroids[np.newaxis, :]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=1)\n        if _ > 0 and np.array_equal(labels, prev_labels):\n            break\n        prev_labels = labels.copy()\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(k)\n        for i in range(n):\n            new_centroids[labels[i]] += E[i]\n            counts[labels[i]] += 1\n        for c in range(k):\n            if counts[c] == 0:\n                idx = np.random.randint(0, n)\n                new_centroids[c] = E[idx]\n            else:\n                new_centroids[c] /= counts[c]\n        centroids = new_centroids\n    return labels.tolist()"}
{"task_id": 302, "completion_id": 3, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n = X.shape[0]\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = np.linalg.norm(X[i] - X[j])\n            W[i, j] = 1 / (1 + dist)\n            W[j, i] = W[i, j]\n    D = np.diag(W.sum(axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    idx = np.argsort(eigenvalues)\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    E = eigenvectors[:, :k]\n    centroids = E[:k, :].copy()\n    (n_samples, n_features) = E.shape\n    max_iter = 100\n    for _ in range(max_iter):\n        distances = np.zeros((n_samples, k))\n        for i in range(n_samples):\n            for j in range(k):\n                distances[i, j] = np.linalg.norm(E[i] - centroids[j])\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.zeros((k, n_features))\n        counts = np.zeros(k)\n        for i in range(n_samples):\n            c = labels[i]\n            new_centroids[c] += E[i]\n            counts[c] += 1\n        for i in range(k):\n            if counts[i] == 0:\n                random_idx = np.random.randint(n_samples)\n                new_centroids[i] = E[random_idx]\n            else:\n                new_centroids[i] /= counts[i]\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    return labels.tolist()"}
{"task_id": 302, "completion_id": 4, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n_samples, d) = X.shape\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            dist = np.linalg.norm(X[i] - X[j])\n            w_ij = 1 / (1 + dist)\n            W[i, j] = w_ij\n            W[j, i] = w_ij\n    D = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        D[i, i] = np.sum(W[i, :])\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    idx = np.argsort(eigenvalues)[:k]\n    E = eigenvectors[:, idx]\n    centroids = np.copy(E[:k, :])\n    max_iter = 100\n    for _ in range(max_iter):\n        distances = np.zeros((n_samples, k))\n        for i in range(n_samples):\n            for j in range(k):\n                distances[i, j] = np.linalg.norm(E[i] - centroids[j])\n        labels = np.argmin(distances, axis=1)\n        cluster_counts = np.zeros(k)\n        for label in labels:\n            cluster_counts[label] += 1\n        new_centroids = np.zeros_like(centroids)\n        for i in range(n_samples):\n            new_centroids[labels[i]] += E[i, :]\n        for i in range(k):\n            if cluster_counts[i] > 0:\n                new_centroids[i] /= cluster_counts[i]\n            else:\n                random_idx = np.random.randint(n_samples)\n                new_centroids[i] = E[random_idx, :]\n        if np.allclose(centroids, new_centroids, atol=1e-08):\n            break\n        centroids = new_centroids\n    return labels.tolist()"}
{"task_id": 302, "completion_id": 5, "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_moons\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n_samples = X.shape[0]\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i == j:\n                continue\n            diff = X[i] - X[j]\n            norm = np.sqrt(np.sum(diff ** 2))\n            W[i, j] = 1 / (1 + norm)\n    np.fill_diagonal(W, 0)\n    D = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        D[i, i] = np.sum(W[i, :])\n    L = D - W\n    (eig_vals, eig_vecs) = np.linalg.eigh(L)\n    E = eig_vecs[:, :k]\n    norms = np.sqrt(np.sum(E ** 2, axis=1)).reshape(-1, 1)\n    E = E / (norms + 1e-10)\n    centroids = E[:k]\n    assignments = np.zeros(n_samples)\n    iterations = 0\n    max_iterations = 100\n    while iterations < max_iterations:\n        new_assignments = np.copy(assignments)\n        for i in range(n_samples):\n            min_dist = float('inf')\n            for c in range(k):\n                dist = np.sum((E[i] - centroids[c]) ** 2)\n                if dist < min_dist:\n                    min_dist = dist\n                    new_assignments[i] = c\n        if np.array_equal(new_assignments, assignments):\n            break\n        assignments = new_assignments\n        for c in range(k):\n            cluster_points = E[assignments == c]\n            if cluster_points.shape[0] == 0:\n                idx = np.random.randint(0, n_samples)\n                centroids[c] = E[idx]\n            else:\n                centroids[c] = np.mean(cluster_points, axis=0)\n        iterations += 1\n    return assignments.astype(int).tolist()"}
{"task_id": 302, "completion_id": 6, "solution": "import numpy as np\nimport numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n = X.shape[0]\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                W[i, j] = 0\n            else:\n                diff = X[i] - X[j]\n                dist = np.sqrt(np.sum(diff ** 2))\n                W[i, j] = 1 / (1 + dist)\n    degree = np.sum(W, axis=1)\n    D = np.diag(degree)\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eig(L)\n    indices = np.argsort(eigenvalues)[:k]\n    E = eigenvectors[:, indices]\n    centroids = E[:k]\n    rows = E.shape[0]\n    max_iter = 100\n    for iteration in range(max_iter):\n        distances = np.zeros((rows, k))\n        for i in range(k):\n            distances[:, i] = np.sum((E - centroids[i]) ** 2, axis=1)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(k, dtype=int)\n        for i in range(rows):\n            cluster = labels[i]\n            counts[cluster] += 1\n            new_centroids[cluster] += E[i]\n        updated = False\n        for i in range(k):\n            if counts[i] == 0:\n                rand_idx = np.random.randint(0, rows)\n                new_centroids[i] = E[rand_idx]\n                updated = True\n            else:\n                new_centroids[i] /= counts[i]\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    return labels.tolist()\nX = np.array([[1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0]])\nlabels = spectral_clustering(X, k=2)"}
{"task_id": 302, "completion_id": 7, "solution": "import numpy as np\nfrom typing import List\nimport numpy as np\nfrom sklearn.datasets import make_blobs\ndef spectral_clustering(X: np.ndarray, k: int) -> List[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n_samples, d) = X.shape\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j:\n                diff = X[i] - X[j]\n                wij = 1.0 / (1.0 + np.sqrt(np.sum(diff ** 2)))\n                W[i, j] = wij\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    centroids = E[:k, :].copy()\n    max_iter = 100\n    for iteration in range(max_iter):\n        distances = np.sqrt(np.sum((E[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2, axis=2))\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([np.mean(E[labels == cluster], axis=0) for cluster in range(k)])\n        for i in range(k):\n            if np.isnan(new_centroids[i]).any():\n                idx = np.random.choice(n_samples)\n                new_centroids[i] = E[idx]\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    return labels.tolist()\nlabels = spectral_clustering(X, k=3)"}
{"task_id": 302, "completion_id": 8, "solution": "import numpy as np\nfrom typing import List\ndef spectral_clustering(X: np.ndarray, k: int) -> List[int]:\n    \"\"\"\n    Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n, d) = X.shape\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                W[i, j] = 0\n            else:\n                diff = X[i, :] - X[j, :]\n                norm = np.sqrt(np.sum(diff ** 2))\n                W[i, j] = 1 / (1 + norm)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    sort_indices = np.argsort(eigenvalues)\n    E = eigenvectors[:, sort_indices[:k]]\n    (n_samples, n_features) = E.shape\n    centroids = E[:k, :].copy()\n    max_iterations = 100\n    for _ in range(max_iterations):\n        distances = np.zeros((n_samples, k))\n        for i in range(n_samples):\n            for j in range(k):\n                diff = E[i] - centroids[j]\n                distances[i, j] = np.sqrt(np.sum(diff ** 2))\n        labels = np.argmin(distances, axis=1)\n        new_centroids = []\n        for cluster_id in range(k):\n            cluster_points = E[labels == cluster_id]\n            if cluster_points.shape[0] == 0:\n                random_idx = np.random.choice(n_samples)\n                new_centroids.append(E[random_idx])\n            else:\n                new_centroids.append(np.mean(cluster_points, axis=0))\n        new_centroids = np.array(new_centroids)\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    return labels.tolist()"}
{"task_id": 302, "completion_id": 9, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j:\n                diff = X[i] - X[j]\n                dist = np.sqrt(np.sum(diff ** 2))\n                W[i, j] = 1 / (1 + dist)\n    D = np.diag(W.sum(axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    centroids = E[:k]\n    assignments = np.zeros(n_samples, dtype=int)\n    iteration = 0\n    max_iterations = 100\n    while iteration < max_iterations:\n        for i in range(n_samples):\n            distances = [np.sum((E[i] - centroids[c]) ** 2) for c in range(k)]\n            assignments[i] = np.argmin(distances)\n        new_centroids = np.zeros((k, k))\n        counts = np.zeros(k)\n        for i in range(n_samples):\n            c = assignments[i]\n            new_centroids[c] += E[i]\n            counts[c] += 1\n        for c in range(k):\n            if counts[c] == 0:\n                idx = np.random.randint(n_samples)\n                new_centroids[c] = E[idx]\n            else:\n                new_centroids[c] /= counts[c]\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n        iteration += 1\n    return list(assignments)\nX = np.array([[1.0], [1.5], [3.0], [3.5], [5.0], [5.5]])"}
{"task_id": 303, "completion_id": 0, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_ix]\n    (curr_mine, curr_label) = params[ix]\n    debug_str = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return debug_str"}
{"task_id": 303, "completion_id": 1, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_ix]\n    (curr_mine, curr_label) = params[ix]\n    debug_msg = '------------------------- DEBUG -------------------------\\n'\n    debug_msg += f'Mine (prev) [{prev_label}]:\\n{prev_mine}\\n\\n'\n    debug_msg += f'Theirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\n'\n    debug_msg += f'Mine [{curr_label}]:\\n{curr_mine}\\n\\n'\n    debug_msg += f'Theirs [{curr_label}]:\\n{golds[curr_label]}'\n    if warn_str:\n        debug_msg += warn_str\n    debug_msg += '\\n----------------------- END DEBUG -----------------------'\n    return debug_msg"}
{"task_id": 303, "completion_id": 2, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    (curr_mine, curr_label) = params[ix]\n    prev_ix = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_ix]\n    prev_gold = golds.get(prev_label, '')\n    curr_gold = golds.get(curr_label, '')\n    debug_msg = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return debug_msg\nparams = [('output1', 'test1'), ('output2', 'test2'), ('output3', 'test3')]\nwarn_str = '\\nWARNING: Matcher timeout exceeded.'"}
{"task_id": 303, "completion_id": 3, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_ix]\n    (curr_mine, curr_label) = params[ix]\n    debug_output = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}----------------------- END DEBUG -----------------------'\n    return debug_output"}
{"task_id": 303, "completion_id": 4, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_label = params[prev_ix][1]\n    prev_mine = params[prev_ix][0]\n    curr_label = params[ix][1]\n    curr_mine = params[ix][0]\n    msg = f'------------------------- DEBUG -------------------------\\n'\n    msg += f'Mine (prev) [{prev_label}]:\\n{prev_mine}\\n\\n'\n    msg += f'Theirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\n'\n    msg += f'Mine [{curr_label}]:\\n{curr_mine}\\n\\n'\n    msg += f'Theirs [{curr_label}]:\\n{golds[curr_label]}'\n    if warn_str:\n        msg += warn_str\n    msg += '\\n----------------------- END DEBUG -----------------------'\n    return msg"}
{"task_id": 303, "completion_id": 5, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_label = params[prev_ix][1]\n    prev_mine = params[prev_ix][0]\n    prev_gold = golds[prev_label]\n    curr_label = params[ix][1]\n    curr_mine = params[ix][0]\n    curr_gold = golds[curr_label]\n    result = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return result"}
{"task_id": 303, "completion_id": 6, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_ix]\n    (curr_mine, curr_label) = params[ix]\n    debug_header = '------------------------- DEBUG -------------------------'\n    debug_footer = '----------------------- END DEBUG -----------------------'\n    output = f'{debug_header}\\n'\n    output += f'Mine (prev) [{prev_label}]:\\n{prev_mine}\\n\\n'\n    output += f'Theirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\n'\n    output += f'Mine [{curr_label}]:\\n{curr_mine}\\n\\n'\n    output += f'Theirs [{curr_label}]:\\n{golds[curr_label]}'\n    if warn_str:\n        output += warn_str\n    output += f'\\n{debug_footer}'\n    return output"}
{"task_id": 303, "completion_id": 7, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (curr_mine, curr_label) = params[ix]\n    (prev_mine, prev_label) = params[prev_ix]\n    output = ['------------------------- DEBUG -------------------------', f'Mine (prev) [{prev_label}]:', prev_mine, f'Theirs (prev) [{prev_label}]:', golds[prev_label], f'Mine [{curr_label}]:', curr_mine, f'Theirs [{curr_label}]:', f'{golds[curr_label]}{warn_str}', '----------------------- END DEBUG -----------------------']\n    return '\\n'.join(output)"}
{"task_id": 303, "completion_id": 8, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_label = params[prev_ix][1]\n    prev_mine = params[prev_ix][0]\n    curr_label = params[ix][1]\n    curr_mine = params[ix][0]\n    debug_str = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return debug_str"}
{"task_id": 303, "completion_id": 9, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (curr_mine, curr_label) = params[ix]\n    (prev_mine, prev_label) = params[prev_ix]\n    curr_theirs = golds.get(curr_label, '')\n    prev_theirs = golds.get(prev_label, '')\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_theirs}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{curr_theirs}{warn_str}\\n----------------------- END DEBUG -----------------------'"}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (b, \u03c3\u00b2), but the MAP\n    estimate of b does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for b. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for b. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    (N, M) = X.shape\n    if fit_intercept:\n        X = np.hstack((np.ones((N, 1)), X))\n        M += 1\n    if np.isscalar(mu):\n        mu_vec = np.full((M,), mu)\n    else:\n        mu_vec = np.array(mu).flatten()\n        assert mu_vec.shape == (M,), 'mu must be a scalar or a vector of length M'\n    if V is None:\n        V_inv = np.eye(M)\n    elif np.isscalar(V):\n        V_inv = np.eye(M) / V\n    elif isinstance(V, (list, tuple)):\n        V_diag = np.array(V).flatten()\n        if len(V_diag) == M - 1 and fit_intercept:\n            V_diag = np.concatenate([np.array([1.0]), V_diag])\n        elif len(V_diag) != M:\n            raise ValueError(f'V must be a scalar, None, or a vector of length {M}')\n        V_inv = np.diag(1.0 / V_diag)\n    else:\n        V_inv = np.linalg.inv(V)\n    XtX = X.T @ X\n    V_inv_plus_XtX = V_inv + XtX\n    Sigma_b = np.linalg.inv(V_inv_plus_XtX)\n    V_inv_mu = V_inv @ mu_vec\n    Xt_y = X.T @ y\n    mu_b = Sigma_b @ (V_inv_mu + Xt_y)\n    return [round(float(b), 4) for b in mu_b]"}
{"task_id": 304, "completion_id": 1, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (b, \u03c3\u00b2), but the MAP\n    estimate of b does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for b. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for b. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    (n_samples, n_features) = X.shape\n    if np.isscalar(mu):\n        if V is not None and (np.ndim(V) >= 2 and np.shape(V) != (n_features, n_features)):\n            raise ValueError(\"If V is a 2D array, it must be compatible with mu's shape\")\n        mu_vec = np.full(n_features, mu)\n    else:\n        if len(mu) != n_features:\n            raise ValueError('Length of mu must match number of features')\n        mu_vec = np.array(mu)\n    if V is None:\n        V_inv = np.eye(n_features)\n    elif np.isscalar(V):\n        V_inv = np.eye(n_features) / V\n    elif isinstance(V, (list, tuple)):\n        if len(V) != n_features:\n            raise ValueError('Length of V must match number of features')\n        V_inv = np.diag(1 / np.array(V))\n    elif isinstance(V, np.ndarray):\n        if V.shape != (n_features, n_features):\n            raise ValueError('If V is a 2D array, it must be a square matrix of shape (n_features, n_features)')\n        V_inv = np.linalg.inv(V)\n    else:\n        raise TypeError('V must be a scalar, list of numbers, a tuple of numbers, or a 2D NumPy array')\n    XTX = X.T @ X\n    precision = V_inv + XTX\n    Sigma_b = np.linalg.inv(precision)\n    V_inv_dot_mu = V_inv @ mu_vec\n    term = V_inv_dot_mu + X.T @ y\n    mu_b = Sigma_b @ term\n    return [round(beta, 4) for beta in mu_b.tolist()]"}
{"task_id": 304, "completion_id": 2, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (b, \u03c3\u00b2), but the MAP\n    estimate of b does not depend on \u03c3\u00b2.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2.\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2.\n        mu: Prior mean for b. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for b. Accepts None (identity), a scalar (scalar\u00d7I),\n            a 1-D sequence (diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    (N, M) = X.shape\n    if fit_intercept:\n        X = np.hstack([np.ones((N, 1)), X])\n        M += 1\n    if V is None:\n        V = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n        if V.shape[0] != M:\n            raise ValueError(f'Length of diagonal in V must be {M}, got {len(V)}.')\n    elif V.shape != (M, M):\n        raise ValueError(f'V must be of shape ({M}, {M}), got {V.shape}.')\n    V_inv = np.linalg.inv(V)\n    XT_X = X.T @ X\n    posterior_prec = V_inv + XT_X\n    posterior_cov = np.linalg.inv(posterior_prec)\n    if isinstance(mu, (int, float)):\n        mu = np.ones(M) * mu\n    if len(mu) != M:\n        raise ValueError(f'Length of mu must be {M}, got {len(mu)}.')\n    term = V_inv @ mu + X.T @ y\n    mu_b = posterior_cov @ term\n    return [round(beta, 4) for beta in mu_b]\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([3, 7, 11])"}
{"task_id": 304, "completion_id": 3, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n    \n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    (n_samples, n_features) = X.shape\n    if np.isscalar(mu):\n        mu_vec = np.full(n_features, mu)\n    else:\n        mu_vec = np.array(mu).ravel()\n        if mu_vec.shape[0] != n_features:\n            raise ValueError('Dimension mismatch: \u03bc and number of features')\n    if V is None:\n        V = np.eye(n_features)\n    elif np.isscalar(V):\n        V = V * np.eye(n_features)\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    else:\n        V = np.array(V)\n        if V.shape != (n_features, n_features):\n            raise ValueError('Dimension mismatch in V')\n    V_inv = np.linalg.inv(V)\n    XtX = np.dot(X.T, X)\n    posterior_precision = V_inv + XtX\n    posterior_covariance = np.linalg.inv(posterior_precision)\n    Xt_y = np.dot(X.T, y)\n    V_inv_mu = np.dot(V_inv, mu_vec)\n    mu_b = np.dot(posterior_covariance, V_inv_mu + Xt_y)\n    return [round(x, 4) for x in mu_b.tolist()]"}
{"task_id": 304, "completion_id": 4, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (b, \u03c3\u00b2), but the MAP\n    estimate of b does not depend on \u03c3\u00b2. See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to 4 decimal places.\n    \"\"\"\n    (N, M) = X.shape\n    if fit_intercept:\n        X = np.c_[np.ones(N), X]\n    else:\n        pass\n    new_M = X.shape[1]\n    if np.isscalar(mu):\n        mu_vec = np.full(new_M, mu)\n    else:\n        mu_vec = np.array(mu)\n        if mu_vec.shape[0] != new_M:\n            raise ValueError('Length of mu must match the number of features (after intercept).')\n    if V is None:\n        V = np.eye(new_M)\n    elif np.isscalar(V):\n        V = np.eye(new_M) * V\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    else:\n        V = np.array(V)\n    if V.shape != (new_M, new_M):\n        raise ValueError('V must be of shape (new_M, new_M) where new_M is the number of features.')\n    V_inv = np.linalg.inv(V)\n    XtX = X.T @ X\n    V_inv_plus_XtX = V_inv + XtX\n    Sigma_b = np.linalg.inv(V_inv_plus_XtX)\n    temp = V_inv @ mu_vec + X.T @ y\n    mu_b = Sigma_b @ temp\n    return [round(w, 4) for w in mu_b.tolist()]\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([1, 2, 3])\nmu = 0.0\nV = 1.0"}
{"task_id": 304, "completion_id": 5, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    (N, M) = X.shape\n    if fit_intercept:\n        intercept = np.ones((N, 1))\n        X = np.hstack((intercept, X))\n    if np.isscalar(mu):\n        mu_vec = np.full(X.shape[1], mu)\n    else:\n        mu_vec = np.array(mu)\n    M_features = X.shape[1]\n    if V is None:\n        inv_V = np.eye(M_features)\n    elif np.isscalar(V):\n        inv_V = np.eye(M_features) / V\n    elif isinstance(V, (list, tuple)):\n        inv_V = np.diag(1.0 / np.array(V))\n        if inv_V.shape[0] != M_features:\n            raise ValueError(f'V as a vector must have length {M_features}, got {len(V)}.')\n    else:\n        inv_V = np.linalg.inv(V)\n    XtX = X.T @ X\n    inv_Sigma_b = inv_V + XtX\n    XtY = X.T @ y\n    mu_b = np.linalg.inv(inv_Sigma_b) @ (inv_V @ mu_vec + XtY)\n    return [round(x, 4) for x in mu_b.tolist()]"}
{"task_id": 304, "completion_id": 6, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (b, \u03c3\u00b2), but the MAP\n    estimate of b does not depend on \u03c3\u00b2. See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter for \u03c3\u00b2 (unused).\n        beta: Scale parameter for \u03c3\u00b2 (unused).\n        mu: Prior mean for b \u2013 scalar or vector.\n        V: Prior scale matrix for b \u2013 scalar, diagonal, or full matrix.\n        fit_intercept: If True, fit an intercept (add a column of ones to X).\n\n    Returns:\n        A list of floats representing the posterior mean of the coefficients.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n    (N, M) = X.shape\n    if np.isscalar(mu):\n        mu_vec = np.zeros(M)\n        mu_vec[:] = mu\n    else:\n        if len(mu) != M:\n            raise ValueError('Length of mu must match number of features (including intercept if fit_intercept=True).')\n        mu_vec = np.array(mu)\n    if V is None:\n        V_inv = np.eye(M)\n    elif np.isscalar(V):\n        V_inv = np.eye(M) / V\n    elif isinstance(V, (list, tuple)):\n        if len(V) != M:\n            raise ValueError('Length of V must match number of features.')\n        V_diag = np.array(V)\n        V_inv = np.diag(1 / V_diag)\n    else:\n        try:\n            V_inv = np.linalg.inv(V)\n        except np.linalg.LinAlgError:\n            raise ValueError('V is not invertible.')\n    XtX = X.T @ X\n    Sigma_b_inv = V_inv + XtX\n    V_inv_mu = V_inv @ mu_vec\n    Xt_y = X.T @ y\n    Sigma_b = np.linalg.inv(Sigma_b_inv)\n    mu_b = Sigma_b @ (V_inv_mu + Xt_y)\n    return [round(float(coeff), 4) for coeff in mu_b]\nX = np.array([[1, 1], [2, 0], [3, 2]])\ny = np.array([3, 2, 5])\nmu = 0.0\nV = 1.0"}
{"task_id": 304, "completion_id": 7, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2.\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2.\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    (N, M) = X.shape\n    if fit_intercept:\n        X = np.hstack((np.ones((N, 1)), X))\n        feature_dim = M + 1\n    else:\n        feature_dim = M\n    if np.isscalar(mu):\n        mu_vec = np.full(feature_dim, mu)\n    else:\n        mu_vec = np.array(mu).flatten()\n        if mu_vec.shape[0] != feature_dim:\n            raise ValueError(f'Length of `mu` must be {feature_dim}.')\n    if V is None:\n        V_diag = np.eye(feature_dim)\n    elif np.isscalar(V):\n        V_diag = np.eye(feature_dim) * V\n    elif np.array(V).ndim == 1:\n        if len(V) != feature_dim:\n            raise ValueError(f'Length of `V` must be {feature_dim}.')\n        V_diag = np.diag(V)\n    elif np.array(V).ndim == 2 and V.shape == (feature_dim, feature_dim):\n        V_diag = np.array(V)\n    else:\n        raise ValueError(f'`V` has wrong shape or dimension. Expected scalar, length-{feature_dim} list, or ({feature_dim}, {feature_dim}) matrix.')\n    XtX = X.T @ X\n    V_inv = np.linalg.inv(V_diag)\n    posterior_precision = V_inv + XtX\n    V_inv_mu = V_inv @ mu_vec\n    Xt_y = X.T @ y\n    combined_term = V_inv_mu + Xt_y\n    posterior_mean = np.linalg.pinv(posterior_precision) @ combined_term\n    return [round(float(coeff), 4) for coeff in posterior_mean]"}
{"task_id": 304, "completion_id": 8, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2.\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2.\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    (n_samples, n_features) = X.shape\n    if np.isscalar(mu):\n        mu_vec = np.full((n_features,), mu)\n    else:\n        mu_vec = np.array(mu).ravel()\n        if mu_vec.size != n_features:\n            raise ValueError(f'mu must have size {n_features} but had {mu_vec.size}')\n    if V is None:\n        V_inv = np.eye(n_features)\n    elif np.isscalar(V):\n        V_inv = np.eye(n_features) / V\n    elif isinstance(V, (list, tuple)):\n        V_diag = np.array(V).ravel()\n        if len(V_diag) != n_features:\n            raise ValueError(f'V (as diagonal) must have size {n_features} but had {len(V_diag)}')\n        V_inv = np.diag(1.0 / V_diag)\n    else:\n        V = np.array(V)\n        if V.shape != (n_features, n_features):\n            raise ValueError(f'V (as matrix) must be {n_features}x{n_features} but had shape {V.shape}')\n        V_inv = np.linalg.inv(V)\n    V_inv_XtX = V_inv + X.T @ X\n    Sigma_b = np.linalg.inv(V_inv_XtX)\n    V_inv_mu_term = V_inv @ mu_vec\n    Xt_y = X.T @ y\n    V_inv_mu_term_Xt_y = V_inv_mu_term + Xt_y\n    mu_b = Sigma_b @ V_inv_mu_term_Xt_y\n    return list(np.round(mu_b, 4))\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([1, 2, 3])\nmu = 0.0\nV = 100\nfit_intercept = True"}
{"task_id": 304, "completion_id": 9, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    (N, M) = X.shape\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    if V is None:\n        V = np.eye(M)\n    elif np.isscalar(V):\n        V = V * np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    XtX = X.T @ X\n    Sigma_b = np.linalg.inv(V_inv + XtX)\n    Xt_y = X.T @ y\n    V_inv_mu = V_inv @ mu\n    mu_b = Sigma_b @ (V_inv_mu + Xt_y)\n    return [round(float(cb), 4) for cb in mu_b]"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef hz_to_mel(f_hz):\n    \"\"\"Convert frequency in Hz to Mel scale.\"\"\"\n    return 2595 * np.log10(1 + f_hz / 700)\ndef mel_to_hz(mel):\n    \"\"\"Convert frequency in Mel scale to Hz.\"\"\"\n    return 700 * (10 ** (mel / 2595) - 1)\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n    \n    Args:\n        N: DFT length\n        n_filters: Number of Mel filters\n        fs: Sampling frequency\n        min_freq: Minimum frequency to use (Hz)\n        max_freq: Maximum frequency to use (Hz), defaults to fs/2\n        normalize: Whether to normalize the filters\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n    mels = np.linspace(min_mel, max_mel, n_filters + 2)\n    freqs = mel_to_hz(mels)\n    n_bins = N // 2 + 1\n    fft_freqs = fs * np.arange(n_bins) / N\n    F = np.zeros((n_filters, n_bins))\n    for i in range(n_filters):\n        (f_left, f_center, f_right) = freqs[i:i + 3]\n        mask = (fft_freqs >= f_left) & (fft_freqs <= f_right)\n        selected_freqs = fft_freqs[mask]\n        n_selected = len(selected_freqs)\n        if n_selected == 0:\n            continue\n        left_mask = selected_freqs < f_center\n        left_lengths = f_center - f_left\n        left_vals = (selected_freqs[left_mask] - f_left) / left_lengths if left_lengths > 0 else np.zeros_like(selected_freqs[left_mask])\n        right_mask = selected_freqs >= f_center\n        right_lengths = f_right - f_center\n        right_vals = (f_right - selected_freqs[right_mask]) / right_lengths if right_lengths > 0 else np.zeros_like(selected_freqs[right_mask])\n        values = np.zeros_like(selected_freqs)\n        values[left_mask] = left_vals\n        values[right_mask] = right_vals\n        indices = np.where(mask)[0]\n        F[i][indices] = values\n    if normalize:\n        for i in range(n_filters):\n            (f_start, f_end) = (freqs[i], freqs[i + 2])\n            width = f_end - f_start\n            if width > 0:\n                F[i] *= 2 / width\n    return [list(row.round(4)) for row in F]"}
{"task_id": 308, "completion_id": 1, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f: float) -> float:\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel: float) -> float:\n        return 700 * (10 ** (mel / 2595) - 1)\n    low_mel = hz_to_mel(min_freq)\n    high_mel = hz_to_mel(max_freq)\n    mel_points = np.linspace(low_mel, high_mel, n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n    fft_freqs = np.array([fs * k / N for k in range(N // 2 + 1)])\n    freq_indices = np.arange(N // 2 + 1)\n    F = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        left_hz = hz_points[i]\n        center_hz = hz_points[i + 1]\n        right_hz = hz_points[i + 2]\n        left_slope = (fft_freqs - left_hz) / (center_hz - left_hz)\n        right_slope = (right_hz - fft_freqs) / (right_hz - center_hz)\n        F[i, :] = np.maximum(np.minimum(left_slope, right_slope), 0.0)\n        if normalize:\n            filter_width = right_hz - left_hz\n            F[i, :] /= filter_width / 2.0\n    return [[round(f, 4) for f in filt] for filt in F]"}
{"task_id": 308, "completion_id": 2, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10 ** (mel / 2595) - 1)\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n    mels = np.linspace(min_mel, max_mel, n_filters + 2)\n    freqs = mel_to_hz(mels)\n    dft_freqs = np.linspace(0, fs / 2, N // 2 + 1)\n    filter_matrix = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        f_left = freqs[i]\n        f_center = freqs[i + 1]\n        f_right = freqs[i + 2]\n        for (k, freq) in enumerate(dft_freqs):\n            if f_left < freq < f_center:\n                slope = (freq - f_left) / (f_center - f_left)\n            elif f_center < freq < f_right:\n                slope = (f_right - freq) / (f_right - f_center)\n            elif freq == f_center:\n                slope = 1.0\n            else:\n                slope = 0.0\n            filter_matrix[i, k] = slope\n    if normalize:\n        for i in range(n_filters):\n            f_left = freqs[i]\n            f_right = freqs[i + 2]\n            w = 2 / (f_right - f_left)\n            filter_matrix[i, :] *= w\n    return [[round(filter_matrix[i][k], 4) for k in range(N // 2 + 1)] for i in range(n_filters)]\nfilter_matrix = mel_filterbank(N=1024)"}
{"task_id": 308, "completion_id": 3, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f: float) -> float:\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(m: float) -> float:\n        return 700 * (10 ** (m / 2595) - 1)\n    mel_min = hz_to_mel(min_freq)\n    mel_max = hz_to_mel(max_freq)\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n    freq_points = mel_to_hz(mel_points)\n    N_fft = N // 2 + 1\n    dft_freqs = np.linspace(0, fs / 2, N_fft)\n    F = np.zeros((n_filters, N_fft))\n    for i in range(n_filters):\n        f_left = freq_points[i]\n        f_center = freq_points[i + 1]\n        f_right = freq_points[i + 2]\n        left_slope = np.maximum(0.0, dft_freqs - f_left)\n        right_slope = np.maximum(0.0, f_right - dft_freqs)\n        F[i, :] = np.minimum(left_slope, right_slope) / (f_center - f_left)\n        if i < n_filters - 1:\n            right_slope[:i + 1] = 0.0\n        else:\n            left_slope[i + 1:] = 0.0\n        F[i, :] = np.minimum(left_slope, right_slope)\n    if normalize:\n        for i in range(n_filters):\n            f_left = freq_points[i]\n            f_right = freq_points[i + 2]\n            F[i, :] *= 2 / (f_right - f_left)\n    return [list(filter_row.round(4)) for filter_row in F]"}
{"task_id": 308, "completion_id": 4, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz2mel(f: float) -> float:\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel2hz(mel: float) -> float:\n        return 700 * (10 ** (mel / 2595) - 1)\n    min_mel = hz2mel(min_freq)\n    max_mel = hz2mel(max_freq)\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n    freqs = mel2hz(mel_points)\n    bin_freqs = np.array([k * fs / N for k in range(N // 2 + 1)])\n    F = []\n    for i in range(n_filters):\n        f_left = freqs[i]\n        f_center = freqs[i + 1]\n        f_right = freqs[i + 2]\n        slope = (f_center - f_left) / (f_left - f_right)\n        weights = np.zeros_like(bin_freqs)\n        left_mask = (bin_freqs >= f_left) & (bin_freqs < f_center)\n        right_mask = (bin_freqs >= f_center) & (bin_freqs < f_right)\n        weights[left_mask] = (bin_freqs[left_mask] - f_left) / (f_center - f_left)\n        weights[right_mask] = (f_right - bin_freqs[right_mask]) / (f_right - f_center)\n        if normalize:\n            denom = (f_right - f_left) / (fs / N)\n            weights /= denom\n        weights[weights < 0] = 0.0\n        F.append(list(np.round(weights, 4)))\n    return F"}
{"task_id": 308, "completion_id": 5, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10 ** (mel / 2595) - 1)\n    mel_min = hz_to_mel(min_freq)\n    mel_max = hz_to_mel(max_freq)\n    mels = np.linspace(mel_min, mel_max, n_filters + 2)\n    freqs = mel_to_hz(mels)\n    num_bins = N // 2 + 1\n    filterbank = np.zeros((n_filters, num_bins))\n    for i in range(n_filters):\n        f_left = freqs[i]\n        f_centre = freqs[i + 1]\n        f_right = freqs[i + 2]\n        for k in range(num_bins):\n            f_k = k * fs / N\n            left_slope = 1.0\n            if f_k < f_centre:\n                left_slope = (f_k - f_left) / (f_centre - f_left) if f_centre != f_left else 0\n            right_slope = 1.0\n            if f_k > f_centre:\n                right_slope = (f_right - f_k) / (f_right - f_centre) if f_right != f_centre else 0\n            weight = max(0.0, left_slope, right_slope)\n            weight = min(left_slope, right_slope)\n            filterbank[i, k] = weight\n    if normalize:\n        for i in range(n_filters):\n            w_i = (freqs[i + 2] - freqs[i]) / (2 * fs / N)\n            if w_i != 0:\n                filterbank[i, :] /= w_i\n    filterbank_list = [[float(round(x, 4)) for x in row] for row in filterbank]\n    return filterbank_list\nfilterbank = mel_filterbank(N=2048, n_filters=40, fs=44100)"}
{"task_id": 308, "completion_id": 6, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n    \n    The returned matrix has *n_filters* rows and *n_over_2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n    mel_min = 2595 * np.log10(1 + min_freq / 700)\n    mel_max = 2595 * np.log10(1 + max_freq / 700)\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n    f_points = 700 * (10 ** (mel_points / 2595) - 1)\n    bin_frequencies = fs * np.arange(N) / N\n    n_bins = N // 2 + 1\n    filterbank = np.zeros((n_filters, n_bins))\n    for i in range(n_filters):\n        f_left_index = np.floor(f_points[i] / fs * N).astype(int)\n        f_right_index = np.ceil(f_points[i + 2] / fs * N).astype(int)\n        left_bin = max(f_left_index, 0)\n        right_bin = min(f_right_index, n_bins - 1)\n        bin_centers = np.arange(left_bin, right_bin + 1)\n        filter_weights = np.zeros_like(bin_centers, dtype=float)\n        for (k, bin_center) in enumerate(bin_centers):\n            f_center = bin_frequencies[bin_center]\n            left_slope = (f_center - f_points[i]) / (f_points[i + 1] - f_points[i])\n            right_slope = (f_points[i + 2] - f_center) / (f_points[i + 2] - f_points[i + 1])\n            filter_weights[k] = np.clip(np.min([left_slope, right_slope]), 0, 1)\n        start_idx = np.searchsorted(bin_centers, range(n_bins))\n        for (idx, weight) in zip(bin_centers, filter_weights):\n            filterbank[i, idx] = weight\n        if normalize:\n            filterbank[i] = 2 * filterbank[i] / (f_points[i + 2] - f_points[i])\n    return [[round(weight, 4) for weight in filter] for filter in filterbank]"}
{"task_id": 308, "completion_id": 7, "solution": "import numpy as np\nimport math\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * math.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10 ** (mel / 2595) - 1)\n    mel_min = hz_to_mel(min_freq)\n    mel_max = hz_to_mel(max_freq)\n    mels = np.linspace(mel_min, mel_max, n_filters + 2)\n    freqs = mel_to_hz(mels)\n    n_bins = N // 2 + 1\n    F = np.zeros((n_filters, n_bins))\n    dft_freqs = [k * fs / N for k in range(n_bins)]\n    for i in range(n_filters):\n        left = freqs[i]\n        center = freqs[i + 1]\n        right = freqs[i + 2]\n        for (k, f) in enumerate(dft_freqs):\n            if f > left and f < right:\n                if f <= center:\n                    weight = (f - left) / (center - left)\n                else:\n                    weight = (right - f) / (right - center)\n            else:\n                weight = 0\n            F[i, k] = weight\n    if normalize:\n        for i in range(n_filters):\n            left = freqs[i]\n            right = freqs[i + 2]\n            scale_factor = 2 / (right - left)\n            F[i, :] *= scale_factor\n    return [[round(w, 4) for w in row] for row in F]"}
{"task_id": 308, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz2mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel2hz(mel):\n        return 700 * (10 ** (mel / 2595) - 1)\n    mel_min = hz2mel(min_freq)\n    mel_max = hz2mel(max_freq)\n    mels = np.linspace(mel_min, mel_max, n_filters + 2)\n    freqs = mel2hz(mels)\n    num_bins = N // 2 + 1\n    filterbank = np.zeros((n_filters, num_bins))\n    bin_freqs = np.linspace(0, fs / 2.0, num_bins)\n    for i in range(n_filters):\n        f_left = freqs[i]\n        f_center = freqs[i + 1]\n        f_right = freqs[i + 2]\n        for k in range(num_bins):\n            f_k = bin_freqs[k]\n            left_slope = 0.0\n            if f_left < f_center and f_k >= f_left and (f_k < f_center):\n                left_slope = (f_k - f_left) / (f_center - f_left)\n            right_slope = 0.0\n            if f_center < f_right and f_k >= f_center and (f_k < f_right):\n                right_slope = (f_right - f_k) / (f_right - f_center)\n            filterbank[i, k] = min(left_slope, right_slope)\n    if normalize:\n        for i in range(n_filters):\n            f_left = freqs[i]\n            f_right = freqs[i + 2]\n            width = f_right - f_left\n            if width > 0:\n                filterbank[i, :] = 2 * filterbank[i, :] / width\n    return [[round(x, 4) for x in row] for row in filterbank.tolist()]"}
{"task_id": 308, "completion_id": 9, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"\n    Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n\n    def hz_to_mel(f_hz):\n        return 2595 * np.log10(1 + f_hz / 700.0)\n\n    def mel_to_hz(m_el):\n        return 700 * (10 ** (m_el / 2595.0) - 1)\n    if max_freq is None:\n        max_freq = fs / 2\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n    freq_points = mel_to_hz(mel_points)\n    freqs = np.linspace(0, fs, N, dtype=float)[:N // 2 + 1]\n    F = np.zeros((n_filters, len(freqs)))\n    for i in range(n_filters):\n        f_left = freq_points[i]\n        f_center = freq_points[i + 1]\n        f_right = freq_points[i + 2]\n        for (j, f) in enumerate(freqs):\n            left_slope = (f - f_left) / (f_center - f_left) if f >= f_left and f_center != f_left else 0\n            right_slope = (f_right - f) / (f_right - f_center) if f <= f_right and f_right != f_center else 0\n            F[i, j] = max(0.0, min(left_slope, right_slope))\n    if normalize:\n        for i in range(n_filters):\n            if F[i].sum() > 0 and f_right != f_left:\n                F[i] = 2.0 / (f_right - f_left) * F[i]\n    F = F[~np.all(F == 0, axis=1)]\n    F_list = [list(np.round(row, 4)) for row in F]\n    return F_list"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if symmetric:\n        N = window_len - 1\n        n = np.arange(window_len)\n    else:\n        N = window_len\n        n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    return [round(val, 4) for val in window.tolist()]"}
{"task_id": 312, "completion_id": 1, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if symmetric:\n        N = window_len - 1\n        n = np.arange(window_len)\n    else:\n        N = window_len\n        n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    rounded_window = [round(x, 4) for x in window]\n    return rounded_window"}
{"task_id": 312, "completion_id": 2, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if symmetric:\n        N = window_len - 1\n        n = np.arange(window_len)\n    else:\n        N = window_len - 1\n        n = np.arange(window_len)\n        n = np.arange(window_len)\n        N = float(window_len - 1)\n    bh = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    return [round(val, 4) for val in bh.tolist()]"}
{"task_id": 312, "completion_id": 3, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if symmetric:\n        N = window_len - 1\n        n = np.arange(window_len, dtype=np.float64)\n    else:\n        N = window_len\n        n = np.arange(window_len, dtype=np.float64)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    window_rounded = [round(val, 4) for val in window]\n    return window_rounded"}
{"task_id": 312, "completion_id": 4, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if symmetric:\n        N = window_len - 1\n        n = np.arange(window_len)\n    else:\n        N = window_len\n        n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    return [round(w, 4) for w in window]"}
{"task_id": 312, "completion_id": 5, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if symmetric:\n        N = window_len - 1\n        n = np.arange(window_len)\n    else:\n        N = window_len\n        n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    window = np.round(window, decimals=4)\n    return list(window)"}
{"task_id": 312, "completion_id": 6, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if symmetric:\n        N = window_len - 1\n        n = np.arange(window_len)\n    else:\n        N = window_len\n        n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    return [round(val, 4) for val in window.tolist()]"}
{"task_id": 312, "completion_id": 7, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if not symmetric:\n        window_len += 1\n    N = window_len - 1\n    n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2.0 * np.pi * n / N) + a2 * np.cos(4.0 * np.pi * n / N) - a3 * np.cos(6.0 * np.pi * n / N)\n    if not symmetric:\n        window = window[:-1]\n    return [round(x, 4) for x in window.tolist()]"}
{"task_id": 312, "completion_id": 8, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if not symmetric:\n        L_plus_1 = window_len + 1\n        n = np.linspace(0, window_len - 1, L_plus_1, endpoint=False)\n    else:\n        L = window_len\n        n = np.linspace(0, L - 1, L, endpoint=True)\n    window = a0 - a1 * np.cos(2 * np.pi * n / (L - 1)) + a2 * np.cos(4 * np.pi * n / (L - 1)) - a3 * np.cos(6 * np.pi * n / (L - 1))\n    if not symmetric:\n        window = window[:-1]\n    return [round(x, 4) for x in window.tolist()]"}
{"task_id": 312, "completion_id": 9, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if not symmetric:\n        L = window_len + 1\n    else:\n        L = window_len\n    N = L - 1\n    n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    window_rounded = [round(w, 4) for w in window]\n    return window_rounded"}
{"task_id": 313, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n\n    def digamma(x):\n        \"\"\"Custom digamma function implementation.\n        Uses recursion to bring x up to 6, then asymptotic expansion.\"\"\"\n        while x < 6:\n            yield_val = digamma(x + 1)\n            recurse_val = yield_val - 1 / x\n            return recurse_val\n        ln_x = math.log(x)\n        approx = ln_x - 1 / (2 * x)\n        approx -= 1 / (12 * x ** 2)\n        approx += 1 / (120 * x ** 4)\n        approx -= 1 / (252 * x ** 6)\n        return approx\n    gamma_np = np.asarray(gamma)\n    gamma_d = gamma_np[d]\n    gamma_dt = gamma_d[t]\n    gamma_sum = gamma_d.sum()\n    log_dt = digamma(gamma_dt)\n    log_sum = digamma(gamma_sum)\n    return round(log_dt - log_sum, 4)"}
{"task_id": 313, "completion_id": 1, "solution": "import math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n\n    def digamma(x):\n        \"\"\"Approximate the digamma function using recursion and asymptotic expansion.\"\"\"\n        if x <= 0:\n            raise ValueError('digamma is not defined for non-positive arguments')\n        while x < 6:\n            return digamma(x + 1.0) - 1.0 / x\n        return math.log(x) - 1.0 / (2 * x) - 1.0 / (12 * x ** 2) + 1.0 / (120 * x ** 4) - 1.0 / (252 * x ** 6)\n    gamma_arr = np.array(gamma)\n    gamma_d = gamma_arr[d, :]\n    gamma_dt = gamma_d[t]\n    gamma_sum = np.sum(gamma_d)\n    result = digamma(gamma_dt) - digamma(gamma_sum)\n    return round(result, 4)"}
{"task_id": 313, "completion_id": 2, "solution": "import math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n\n    def digamma(x):\n        recursions = 0\n        while x < 6:\n            recursions += 1\n            x += 1\n        ln_x = math.log(x)\n        psi = ln_x - 1 / (2 * x) - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n        for _ in range(recursions):\n            x -= 1\n            psi = psi - 1 / x\n        return psi\n    gamma = np.array(gamma)\n    gamma_dt = gamma[d, t]\n    gamma_d_sum = gamma[d, :].sum()\n    result = digamma(gamma_dt) - digamma(gamma_d_sum)\n    return float(np.round(result, 4))\ngamma = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]"}
{"task_id": 313, "completion_id": 3, "solution": "import math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma = np.array(gamma, dtype=float)\n    gamma_t = gamma[d, t]\n    gamma_sum = gamma[d, :].sum()\n\n    def digamma(x):\n        \"\"\"Custom implementation of the digamma function.\"\"\"\n        eps = 1e-06\n        if x <= eps:\n            return -math.inf\n        while x < 5:\n            digamma_shifted = digamma(x + 1)\n            return digamma_shifted - 1 / x\n        ln_x = math.log(x)\n        term1 = 1 / (2 * x)\n        term2 = 1 / (12 * x * x)\n        term4 = 1 / (120 * x ** 4)\n        term6 = 1 / (252 * x ** 6)\n        return ln_x - term1 - term2 + term4 - term6\n    result = digamma(gamma_t) - digamma(gamma_sum)\n    return round(float(result), 4)\ngamma = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]"}
{"task_id": 313, "completion_id": 4, "solution": "import math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n\n    def digamma(x: float) -> float:\n        \"\"\"Approximates the digamma function \u03c8(x) using recursion and asymptotic expansion.\"\"\"\n        assert x > 0, 'Digamma is undefined for x <= 0'\n        while x < 6:\n            return digamma(x + 1) - 1 / x\n        return math.log(x) - 1 / (2 * x) - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n    gamma = np.asarray(gamma, dtype=float)\n    gamma_dt = gamma[d, t]\n    sum_gamma_d = gamma[d, :].sum()\n    result = digamma(gamma_dt) - digamma(sum_gamma_d)\n    return round(result, 4)\ngamma = [[1.0, 2.0, 3.0]]"}
{"task_id": 313, "completion_id": 5, "solution": "import math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma = np.array(gamma)\n    x = gamma[d, t]\n    total = gamma[d].sum()\n\n    def digamma(x):\n        if x <= 0.0:\n            raise ValueError('Digamma is undefined for non-positive values.')\n        if x < 6.0:\n            result = 0.0\n            while x < 6.0:\n                result -= 1 / x\n                x += 1.0\n        ln_x = math.log(x)\n        approx = ln_x - 1 / (2 * x) - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n        return approx + result if 'result' in locals() else approx\n    psi_x = digamma(x)\n    psi_total = digamma(total)\n    return float(round(psi_x - psi_total, 4))"}
{"task_id": 313, "completion_id": 6, "solution": "import math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n\n    def digamma(x):\n        while x < 6:\n            digamma_result -= 1.0 / x\n            x += 1.0\n        inv_x = 1.0 / x\n        digamma_result = math.log(x) - 0.5 * inv_x\n        digamma_result -= inv_x ** 2 / 12.0\n        digamma_result += inv_x ** 4 / 120.0\n        digamma_result -= inv_x ** 6 / 252.0\n        return digamma_result\n    gamma = np.array(gamma)\n    gamma_dt = gamma[d, t]\n    gamma_d_sum = np.sum(gamma[d, :])\n    result = digamma(gamma_dt) - digamma(gamma_d_sum)\n    return float(round(result, 4))"}
{"task_id": 313, "completion_id": 7, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Approximates the digamma function using recursion and asymptotic expansion.\"\"\"\n    k = 0\n    while x < 6:\n        x += 1\n        k += 1\n    if x == 0:\n        return -float('inf')\n    inv_x = 1.0 / x\n    inv_x2 = inv_x * inv_x\n    inv_x4 = inv_x2 * inv_x2\n    inv_x6 = inv_x4 * inv_x2\n    approx = math.log(x) - 0.5 * inv_x - 0.08333333333333333 * inv_x2 + 0.008333333333333333 * inv_x4 - 0.003968253968253968 * inv_x6\n    for i in range(k - 1, -1, -1):\n        approx -= 1.0 / (x - i - 1)\n    return approx\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    x = gamma[d, t]\n    total = np.sum(gamma[d])\n    psi_x = digamma(x)\n    psi_total = digamma(total)\n    result = psi_x - psi_total\n    return round(result, 4)\ngamma = np.array([[2.0, 5.0, 3.0], [4.0, 1.0, 7.0]])"}
{"task_id": 313, "completion_id": 8, "solution": "import math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma = np.array(gamma, dtype=float)\n    a = gamma[d, t]\n    sum_a = gamma[d, :].sum()\n\n    def digamma(x):\n        \"\"\"Custom implementation of the digamma function \u03c8(x).\"\"\"\n        if x <= 0:\n            return float('inf')\n        k = 0\n        while x < 6:\n            k += 1\n            x += 1\n        ln_x = math.log(x)\n        inv_x = 1 / x\n        inv_x2 = inv_x * inv_x\n        inv_x4 = inv_x2 * inv_x2\n        inv_x6 = inv_x2 * inv_x4\n        approx = ln_x - 0.5 * inv_x - 1.0 / 12 * inv_x2 + 1.0 / 120 * inv_x4 - 1.0 / 252 * inv_x6\n        for i in range(k):\n            x -= 1\n            approx -= 1 / x\n        return approx\n    result = digamma(a) - digamma(sum_a)\n    return round(result, 4)\ngamma = [[1.0, 2.0, 3.0]]"}
{"task_id": 313, "completion_id": 9, "solution": "import math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n\n    def digamma(x):\n        \"\"\"Approximation of the digamma function using recursion and asymptotic expansion.\"\"\"\n        if x <= 6:\n            x_stack = []\n            while x <= 6:\n                x_stack.append(x)\n                x += 1\n            ln_x = math.log(x)\n            approx = ln_x - 1 / (2 * x) - 1 / (12 * x * x) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n            for x_val in reversed(x_stack):\n                approx = approx - 1.0 / x_val\n                x = x_val\n            return approx\n        else:\n            ln_x = math.log(x)\n            return ln_x - 1 / (2 * x) - 1 / (12 * x * x) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n    gamma_d = np.array(gamma[d])\n    gamma_dt = gamma_d[t]\n    total_gamma_d = np.sum(gamma_d)\n    result = digamma(gamma_dt) - digamma(total_gamma_d)\n    return round(result, 4)"}
{"task_id": 317, "completion_id": 0, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    (curr_pred, curr_label) = params[ix]\n    prev_idx = max(ix - 1, 0)\n    (prev_pred, prev_label) = params[prev_idx]\n    prev_gold = golds.get(prev_label, '')\n    curr_gold = golds.get(curr_label, '')\n    report = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_pred}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\\nMine [{curr_label}]:\\n{curr_pred}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return report"}
{"task_id": 317, "completion_id": 1, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    (curr_pred, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    prev_ix = max(ix - 1, 0)\n    (prev_pred, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    header = '------------------------- DEBUG -------------------------\\n'\n    prev_block = f'Mine (prev) [{prev_label}]:\\n{prev_pred}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n'\n    curr_block = f'Mine [{curr_label}]:\\n{curr_pred}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}'\n    warning_block = f'{warn_str}\\n' if warn_str else '\\n'\n    footer = '----------------------- END DEBUG -----------------------'\n    debug_report = f'{header}{prev_block}{curr_block}{warning_block}{footer}'\n    return debug_report\nparams = [('My prediction 0', 'A'), ('Prediction B', 'B'), ('Another prediction', 'C')]\ngolds = {'A': 'Gold for A', 'B': 'Gold for B', 'C': 'Gold for C'}\nwarn_str = ' (WARNING: mismatch)'"}
{"task_id": 317, "completion_id": 2, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    header = '------------------------- DEBUG -------------------------\\n'\n    prev_ix = max(ix - 1, 0)\n    (prev_pred, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    prev_block = f'Mine (prev) [{prev_label}]:\\n{prev_pred}\\n\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n'\n    (curr_pred, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    curr_block = f'Mine [{curr_label}]:\\n{curr_pred}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n'\n    footer = '----------------------- END DEBUG -----------------------'\n    return header + prev_block + curr_block + footer"}
{"task_id": 317, "completion_id": 3, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    (curr_pred, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    prev_ix = max(ix - 1, 0)\n    (prev_pred, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    debug_str = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_pred}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\\nMine [{curr_label}]:\\n{curr_pred}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return debug_str"}
{"task_id": 317, "completion_id": 4, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    header = '------------------------- DEBUG -------------------------\\n'\n    prev_ix = max(ix - 1, 0)\n    (prev_pred, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    prev_part = f'Mine (prev) [{prev_label}]:\\n{prev_pred}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\\n'\n    (curr_pred, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    curr_part = f'Mine [{curr_label}]:\\n{curr_pred}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}'\n    footer = f'{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return header + prev_part + curr_part + footer\nparams = [('This is my first prediction', 'LABEL_1'), ('This is my second prediction', 'LABEL_2')]\ngolds = {'LABEL_1': 'This is the gold for label 1', 'LABEL_2': 'This is the gold for label 2'}"}
{"task_id": 317, "completion_id": 5, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    (curr_pred, curr_label) = params[ix]\n    prev_ix = max(ix - 1, 0)\n    (prev_pred, prev_label) = params[prev_ix]\n    header = '------------------------- DEBUG -------------------------\\n'\n    prev_mine_block = f'Mine (prev) [{prev_label}]:\\n{prev_pred}\\n\\n'\n    prev_theirs_block = f'Theirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\n'\n    curr_mine_block = f'Mine [{curr_label}]:\\n{curr_pred}\\n\\n'\n    curr_theirs_block = f'Theirs [{curr_label}]:\\n{golds[curr_label]}'\n    warning_block = f'{warn_str}\\n' if warn_str else '\\n'\n    footer = '----------------------- END DEBUG -----------------------'\n    report = header + prev_mine_block + prev_theirs_block + curr_mine_block + curr_theirs_block + warning_block + footer\n    return report\nparams = [('My first guess', 'A1'), ('My second guess', 'B2'), ('My third guess', 'C3')]\ngolds = {'A1': 'Their first answer', 'B2': 'Their second answer', 'C3': 'Their third answer'}\nwarn_str = ' (WARNING: mismatch)'"}
{"task_id": 317, "completion_id": 6, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (curr_pred, curr_label) = params[ix]\n    (prev_pred, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    header = '------------------------- DEBUG -------------------------\\n'\n    prev_block = f'Mine (prev) [{prev_label}]:\\n{prev_pred}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n'\n    curr_block = f\"Mine [{curr_label}]:\\n{curr_pred}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{(warn_str if warn_str else '')}\\n\"\n    footer = '----------------------- END DEBUG -----------------------'\n    return header + prev_block + curr_block + footer"}
{"task_id": 317, "completion_id": 7, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    header = '------------------------- DEBUG -------------------------\\n'\n    footer = '----------------------- END DEBUG -----------------------\\n'\n    (curr_prediction, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    prev_block = f'Mine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n'\n    curr_block = f'Mine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}'\n    if warn_str:\n        curr_block += warn_str\n    curr_block += '\\n'\n    return header + prev_block + curr_block + footer"}
{"task_id": 317, "completion_id": 8, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    header = '------------------------- DEBUG -------------------------\\n'\n    footer = '----------------------- END DEBUG -----------------------'\n    (curr_prediction, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    report = f'{header}Mine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n{footer}'\n    return report"}
{"task_id": 317, "completion_id": 9, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    (pred, label) = params[ix]\n    prev_ix = max(ix - 1, 0)\n    (prev_pred, prev_label) = params[prev_ix]\n    output_lines = []\n    header = '------------------------- DEBUG -------------------------'\n    output_lines.append(header)\n    output_lines.append('')\n    output_lines.append(f'Mine (prev) [{prev_label}]:')\n    output_lines.append(prev_pred)\n    output_lines.append('')\n    output_lines.append(f'Theirs (prev) [{prev_label}]:')\n    output_lines.append(golds[prev_label])\n    output_lines.append('')\n    output_lines.append('')\n    output_lines.append(f'Mine [{label}]:')\n    output_lines.append(pred)\n    output_lines.append('')\n    output_lines.append(f'Theirs [{label}]:')\n    output_lines.append(golds[label] + warn_str)\n    output_lines.append('')\n    footer = '----------------------- END DEBUG -----------------------'\n    output_lines.append(footer)\n    return '\\n'.join(output_lines)"}
{"task_id": 318, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    w = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    alphas = []\n    for _ in range(n_estimators):\n        best_error = float('inf')\n        best_polarity = 1\n        best_feature = 0\n        best_threshold = 0\n        for feature in range(n_features):\n            sorted_indices = np.argsort(X_train[:, feature])\n            sorted_X = X_train[sorted_indices, feature]\n            sorted_y = y_train[sorted_indices]\n            sorted_w = w[sorted_indices]\n            for i in range(n_samples - 1):\n                threshold = (sorted_X[i] + sorted_X[i + 1]) / 2\n                for polarity in [1, -1]:\n                    predictions = np.array([polarity * np.sign(x - threshold) for x in X_train[:, feature]])\n                    error = np.sum(w * (predictions != y_train))\n                    if error < best_error:\n                        best_error = error\n                        best_polarity = polarity\n                        best_feature = feature\n                        best_threshold = threshold\n        if best_error == 0:\n            best_error = 1e-10\n        if best_error >= 0.5:\n            break\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n        stumps.append((best_polarity, best_feature, best_threshold))\n        alphas.append(alpha)\n        predictions = np.array([polarity * np.sign(x[best_feature] - best_threshold) for (polarity, _, best_feature, best_threshold) in zip([best_polarity], [best_threshold], [best_feature] * len(X_train), [best_threshold] * len(X_train))])\n        w *= np.exp(-alpha * y_train * predictions)\n        w /= np.sum(w)\n    n_test_samples = X_test.shape[0]\n    predictions = np.zeros(n_test_samples)\n    for (alpha, (polarity, feature, threshold)) in zip(alphas, stumps):\n        stump_predictions = np.array([polarity * np.sign(x[feature] - threshold) for x in X_test])\n        predictions += alpha * stump_predictions\n    final_predictions = np.sign(predictions)\n    return final_predictions.tolist()"}
{"task_id": 318, "completion_id": 1, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    D = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    alphas = []\n    for _ in range(n_estimators):\n        best_stump = None\n        best_error = float('inf')\n        best_polarity = 0\n        best_threshold = 0\n        for feat_idx in range(n_features):\n            unique_vals = np.unique(X_train[:, feat_idx])\n            thresholds = (unique_vals[:-1] + unique_vals[1:]) / 2 if len(unique_vals) > 1 else [unique_vals[0]]\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    pred = np.array([polarity * (1 if x >= threshold else -1) for x in X_train[:, feat_idx]])\n                    error = sum((D[y != pred] for (y, pred) in zip(y_train, pred)))\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feat_idx, threshold, polarity)\n        if best_error == 0:\n            best_error = 1e-10\n        elif best_error >= 0.5:\n            break\n        alpha = 0.5 * np.log((1 - best_error) / best_error)\n        stumps.append(best_stump)\n        alphas.append(alpha)\n        for i in range(n_samples):\n            (feat_idx, threshold, polarity) = best_stump\n            h = polarity * (1 if X_train[i, feat_idx] >= threshold else -1)\n            D[i] *= np.exp(-alpha * y_train[i] * h)\n        D /= np.sum(D)\n    n_test_samples = X_test.shape[0]\n    predictions = np.zeros(n_test_samples)\n    for i in range(n_test_samples):\n        x = X_test[i]\n        Fx = 0\n        for ((feat_idx, threshold, polarity), alpha) in zip(stumps, alphas):\n            h = polarity * (1 if x[feat_idx] >= threshold else -1)\n            Fx += alpha * h\n        predictions[i] = 1 if Fx >= 0 else -1\n    return predictions.tolist()"}
{"task_id": 318, "completion_id": 2, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    w = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    for _ in range(n_estimators):\n        best_stump = None\n        min_error = float('inf')\n        for j in range(n_features):\n            for t in X_train[:, j]:\n                for p in [-1, 1]:\n                    predictions = p * np.sign(X_train[:, j] - t)\n                    predictions[X_train[:, j] == t] = 0\n                    predictions = np.where(predictions == 0, p, predictions)\n                    error = np.sum(w[y_train != predictions])\n                    if error < 1e-10 or error > 0.5:\n                        continue\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {'feature': j, 'threshold': t, 'polarity': p, 'error': error}\n        if best_stump is None:\n            break\n        epsilon_m = best_stump['error']\n        alpha_m = 0.5 * math.log((1 - epsilon_m) / epsilon_m)\n        stumps.append((best_stump, alpha_m))\n        predictions = best_stump['polarity'] * np.sign(X_train[:, best_stump['feature']] - best_stump['threshold'])\n        predictions[X_train[:, best_stump['feature']] == best_stump['threshold']] = best_stump['polarity']\n        predictions = np.where(predictions == 0, best_stump['polarity'], predictions)\n        w *= np.exp(-alpha_m * y_train * predictions)\n        w /= np.sum(w)\n    y_pred = np.zeros(X_test.shape[0])\n    for (stump, alpha) in stumps:\n        feature = stump['feature']\n        threshold = stump['threshold']\n        polarity = stump['polarity']\n        pred = polarity * np.sign(X_test[:, feature] - threshold)\n        pred[X_test[:, feature] == threshold] = polarity\n        pred = np.where(pred == 0, polarity, pred)\n        y_pred += alpha * pred\n    return [1 if p >= 0 else -1 for p in y_pred]"}
{"task_id": 318, "completion_id": 3, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    D = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    alphas = []\n    for _ in range(n_estimators):\n        best_error = float('inf')\n        best_stump = None\n        for j in range(n_features):\n            unique_values = np.unique(X_train[:, j])\n            for t in unique_values:\n                for p in [-1, 1]:\n                    predictions = np.where(X_train[:, j] < t, -p, p)\n                    error = np.sum(D[predictions != y_train])\n                    if error < best_error:\n                        best_error = error\n                        best_stump = {'feature': j, 'threshold': t, 'polarity': p}\n        if best_error == 0:\n            best_error = 1e-10\n        elif best_error >= 0.5:\n            break\n        epsilon = best_error\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        stumps.append(best_stump)\n        alphas.append(alpha)\n        predictions = np.zeros(n_samples)\n        for i in range(n_samples):\n            xj = X_train[i, best_stump['feature']]\n            t = best_stump['threshold']\n            p = best_stump['polarity']\n            predictions[i] = p * np.sign(xj - t)\n        D *= np.exp(-alpha * y_train * predictions)\n        D /= np.sum(D)\n    final_prediction = np.zeros(X_test.shape[0])\n    for i in range(X_test.shape[0]):\n        for (m, (stump, alpha)) in enumerate(zip(stumps, alphas)):\n            xj = X_test[i, stump['feature']]\n            t = stump['threshold']\n            p = stump['polarity']\n            h = p * np.sign(xj - t)\n            final_prediction[i] += alpha * h\n    final_prediction = np.sign(final_prediction)\n    return final_prediction.tolist()"}
{"task_id": 318, "completion_id": 4, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    w = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    for _ in range(n_estimators):\n        best_error = float('inf')\n        best_stump = None\n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            if len(thresholds) == 1:\n                continue\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n\n                    def h(x):\n                        return polarity * np.sign(x[feature] - threshold)\n                    pred = np.array([h(xi) for xi in X_train])\n                    error = np.sum(w[y_train != pred])\n                    if error < best_error:\n                        best_error = error\n                        best_stump = {'feature': feature, 'threshold': threshold, 'polarity': polarity, 'h': h}\n        if best_error == 0:\n            best_error = 1e-10\n        elif best_error >= 0.5:\n            break\n        epsilon = best_error\n        alpha = 0.5 * math.log((1 - epsilon) / epsilon)\n        classifiers.append((best_stump, alpha))\n        y_pred = np.array([best_stump['h'](xi) for xi in X_train])\n        w *= np.exp(-alpha * y_train * y_pred)\n        w /= np.sum(w)\n    n_test_samples = X_test.shape[0]\n    final_score = np.zeros(n_test_samples)\n    for (stump, alpha) in classifiers:\n        stump_h = stump['h']\n        pred = np.array([stump_h(x) for x in X_test])\n        final_score += alpha * pred\n    predictions = np.sign(final_score)\n    return predictions.tolist()"}
{"task_id": 318, "completion_id": 5, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    D = np.full(n_samples, 1 / n_samples)\n    weak_learners = []\n    for i in range(n_estimators):\n        best_error = float('inf')\n        best_stump = None\n        for j in range(n_features):\n            thresholds = np.unique(X_train[:, j])\n            for t in thresholds:\n                for p in (-1, 1):\n                    predictions = p * np.sign(X_train[:, j] - t)\n                    predictions[X_train[:, j] - t == 0] = 0\n                    error = np.sum(D * (predictions != y_train))\n                    if error < best_error:\n                        best_error = error\n                        best_stump = {'feature': j, 'threshold': t, 'polarity': p, 'error': error}\n        best_error = np.clip(best_error, 1e-10, 1 - 1e-10)\n        alpha = 0.5 * np.log((1 - best_error) / best_error)\n        weak_learners.append((best_stump, alpha))\n        predictions = best_stump['polarity'] * np.sign(X_train[:, best_stump['feature']] - best_stump['threshold'])\n        predictions[X_train[:, best_stump['feature']] - best_stump['threshold'] == 0] = 0\n        incorrect = predictions != y_train\n        D[incorrect] *= np.exp(alpha)\n        D[~incorrect] *= np.exp(-alpha)\n        D /= np.sum(D)\n    predictions = np.zeros(X_test.shape[0])\n    for (stump, alpha) in weak_learners:\n        feature = stump['feature']\n        threshold = stump['threshold']\n        polarity = stump['polarity']\n        h = polarity * np.sign(X_test[:, feature] - threshold)\n        h[X_test[:, feature] - threshold == 0] = 0\n        predictions += alpha * h\n    return list(np.sign(predictions))"}
{"task_id": 318, "completion_id": 6, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    n_test_samples = X_test.shape[0]\n    weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    alphas = []\n    for _ in range(n_estimators):\n        best_error = float('inf')\n        best_stump = None\n        for j in range(n_features):\n            unique_vals = np.unique(X_train[:, j])\n            for t in unique_vals:\n                for p in [-1, 1]:\n                    predictions = p * np.sign(X_train[:, j] - t)\n                    error = sum((weights[y != predictions] for y in y_train if y != predictions))\n                    if error == 0:\n                        alpha = float('inf')\n                    else:\n                        alpha = 0.5 * math.log((1 - error) / error)\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (j, t, p)\n                        best_alpha = alpha\n        (j, t, p) = best_stump\n        predictions = p * np.sign(X_train[:, j] - t)\n        if best_error < 1 and best_error > 0:\n            Z = 2 * np.sqrt(best_error * (1 - best_error))\n            weights *= np.where(predictions == y_train, (1 - best_error) / Z, best_error / Z)\n        elif best_error == 0 and best_error < 1:\n            break\n        stumps.append((j, t, p))\n        alphas.append(best_alpha)\n    predictions_test = np.zeros(n_test_samples)\n    for (a, (j, t, p)) in zip(alphas, stumps):\n        predictions_test += a * p * np.sign(X_test[:, j] - t)\n    return list(np.sign(predictions_test))"}
{"task_id": 318, "completion_id": 7, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    stump_preds = []\n    alphas = []\n    for _ in range(n_estimators):\n        best_stump = None\n        min_error = float('inf')\n        for j in range(n_features):\n            unique_vals = np.unique(X_train[:, j])\n            for t in unique_vals:\n                for p in [-1, 1]:\n\n                    def h(x):\n                        return p * np.sign(x[j] - t)\n                    predictions = np.apply_along_axis(h, 1, X_train)\n                    errors = weights * (predictions != y_train)\n                    error = np.sum(errors)\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {'j': j, 't': t, 'p': p, 'error': error}\n        if best_stump['error'] == 0:\n            alpha = float('inf')\n        else:\n            alpha = 0.5 * np.log((1 - best_stump['error']) / best_stump['error'])\n        alphas.append(alpha)\n        stump_preds.append(best_stump)\n        predictions = np.array([p['p'] * np.sign(x[p['j']] - p['t']) for p in [best_stump] for x in X_train])\n        error_mask = predictions != y_train\n        weights[~error_mask] *= math.exp(-alpha)\n        weights[error_mask] *= math.exp(alpha)\n        weights /= np.sum(weights)\n    n_test_samples = X_test.shape[0]\n    final_predictions = np.zeros(n_test_samples)\n    for (alpha, stump) in zip(alphas, stump_preds):\n        pred = np.array([stump['p'] * np.sign(x[stump['j']] - stump['t']) for x in X_test])\n        final_predictions += alpha * pred\n    final_predictions = np.sign(final_predictions)\n    return final_predictions.tolist()\nX_train = np.array([[1, 1], [2, 2], [3, 3], [4, 4]])\ny_train = np.array([1, 1, -1, -1])\nX_test = np.array([[2, 2], [3, 3]])\npredictions = adaboost_predict(X_train, y_train, X_test, n_estimators=50)"}
{"task_id": 318, "completion_id": 8, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    w = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n    for _ in range(n_estimators):\n        best_error = float('inf')\n        best_stump = None\n        for feature in range(n_features):\n            unique_values = np.unique(X_train[:, feature])\n            sorted_values = np.sort(unique_values)\n            for threshold in sorted_values:\n                for polarity in [-1, 1]:\n                    h = np.where(X_train[:, feature] - threshold < 0, -1, 1) * polarity\n                    error = np.sum(w[y_train != h])\n                    if error < best_error:\n                        best_error = error\n                        best_stump = {'feature': feature, 'threshold': threshold, 'polarity': polarity}\n        epsilon = best_error\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon) if epsilon > 0 else float('inf')\n        stumps.append(best_stump)\n        alphas.append(alpha)\n        h = np.array([best_stump['polarity'] * np.where(x[best_stump['feature']] - best_stump['threshold'] < 0, -1, 1) for x in X_train])\n        w *= np.exp(-alpha * y_train * h)\n        w /= np.sum(w)\n    n_test_samples = X_test.shape[0]\n    predictions = np.zeros(n_test_samples)\n    for (alpha, stump) in zip(alphas, stumps):\n        feature = stump['feature']\n        threshold = stump['threshold']\n        polarity = stump['polarity']\n        h = [polarity * (-1 if x[feature] - threshold < 0 else 1) for x in X_test]\n        predictions += alpha * np.array(h)\n    result = np.sign(predictions)\n    return result.astype(int).tolist()"}
{"task_id": 318, "completion_id": 9, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    D = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    alphas = []\n    for _ in range(n_estimators):\n        best_error = float('inf')\n        best_p = None\n        best_j = None\n        best_t = None\n        best_predictions = None\n        for j in range(n_features):\n            for i in range(n_samples):\n                t = X_train[i, j]\n                for p in [-1, 1]:\n                    predictions = np.array([p * (-1 if xj < t else 1) for xj in X_train[:, j]])\n                    error = np.sum(D[y_train != predictions])\n                    if error < best_error:\n                        best_error = error\n                        best_p = p\n                        best_j = j\n                        best_t = t\n                        best_predictions = predictions\n        epsilon = best_error\n        alpha = 0.5 * math.log((1.0 - epsilon) / max(epsilon, 1e-10))\n        stumps.append((best_p, best_j, best_t))\n        alphas.append(alpha)\n        prediction = best_predictions\n        D *= np.exp(-alpha * y_train * prediction)\n        D /= np.sum(D)\n\n    def classify_sample(x):\n        total_vote = 0.0\n        for (alpha, (p, j, t)) in zip(alphas, stumps):\n            feature_value = x[j]\n            if p * (-1 if feature_value < t else 1) == 1:\n                total_vote += alpha\n            else:\n                total_vote -= alpha\n        return 1 if total_vote >= 0 else -1\n    return [classify_sample(x) for x in X_test]"}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    \u0394f = fs / N\n    freqs = np.fft.fftfreq(N, 1 / fs)\n    if positive_only:\n        half_N = N // 2 + 1\n        freqs = freqs[:half_N]\n    freqs_rounded = np.round(freqs, 4)\n    return freqs_rounded.tolist()"}
{"task_id": 329, "completion_id": 1, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    df = fs / N\n    if positive_only:\n        bins = np.arange(0, N // 2 + 1)\n        frequencies = bins * df\n    else:\n        freqs = np.fft.fftfreq(N, 1 / fs)\n        frequencies = freqs\n    return [round(f, 4) for f in frequencies.tolist()]"}
{"task_id": 329, "completion_id": 2, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    df = fs / N\n    if positive_only:\n        bins = np.arange(0, N // 2 + 1) * df\n    else:\n        bins = np.fft.fftfreq(N, 1 / fs)\n    return [round(freq, 4) for freq in bins.tolist()]"}
{"task_id": 329, "completion_id": 3, "solution": "import numpy as np\nfrom math import ceil, floor\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz. Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins. Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals. An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    df = fs / N\n    if positive_only:\n        k = np.arange(0, floor(N / 2) + 1)\n        freqs = k * df\n    else:\n        k = np.arange(N)\n        freqs = (k - N * (k >= N // 2)) * df\n    return [round(f, 4) for f in np.round(freqs, 4).tolist()]"}
{"task_id": 329, "completion_id": 4, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    df = fs / N\n    freqs = np.fft.fftfreq(N, d=1 / fs)\n    if positive_only:\n        freqs = freqs[:N // 2 + 1]\n    return [round(f, 4) for f in freqs.tolist()]"}
{"task_id": 329, "completion_id": 5, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    df = fs / N\n    bins = []\n    if positive_only:\n        num_bins = N // 2 + 1\n        bins = np.arange(0, num_bins) * df\n    else:\n        bins = np.fft.fftfreq(N, d=1 / fs) * fs\n    return [round(freq, 4) for freq in bins.tolist()]"}
{"task_id": 329, "completion_id": 6, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    delta_f = fs / N\n    full_freqs = np.fft.fftfreq(N, d=1 / fs)\n    if positive_only:\n        num_positive = N // 2 + 1\n        positive_freqs = full_freqs[:num_positive]\n        return [round(f, 4) for f in positive_freqs.tolist()]\n    else:\n        return [round(f, 4) for f in full_freqs.tolist()]"}
{"task_id": 329, "completion_id": 7, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    delta_f = fs / N\n    frequencies = np.fft.fftfreq(N) * fs\n    if positive_only:\n        num_bins = N // 2 + 1\n        frequencies = frequencies[:num_bins]\n    else:\n        pass\n    return np.round(frequencies, 4).tolist()"}
{"task_id": 329, "completion_id": 8, "solution": "import numpy as np\nfrom math import floor, ceil\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    df = fs / N\n    freqs = np.fft.fftfreq(N, d=1 / fs)\n    if positive_only:\n        bins = freqs[:N // 2 + 1]\n    else:\n        bins = freqs\n    return [round(float(f), 4) for f in bins.tolist()]"}
{"task_id": 329, "completion_id": 9, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    delta_f = fs / N\n    full_freqs = np.fft.fftfreq(N, 1 / fs)\n    if positive_only:\n        num_positive = N // 2 + 1\n        freqs = full_freqs[:num_positive]\n    else:\n        freqs = full_freqs\n    return [round(freq, 4) for freq in freqs.tolist()]"}
{"task_id": 331, "completion_id": 0, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask, dtype=bool)\n    oob_predictions = predictions[oob_mask].reshape(predictions.shape[0], -1)\n    n_oob_per_sample = np.sum(oob_mask, axis=1)\n    has_oob = n_oob_per_sample > 0\n    if not np.any(has_oob):\n        return -1\n    avg_oob = np.zeros_like(y_true)\n    avg_oob[has_oob] = np.divide(np.sum(oob_predictions, axis=1), n_oob_per_sample[has_oob], where=n_oob_per_sample[has_oob] != 0)\n    squared_errors = (y_true[has_oob] - avg_oob[has_oob]) ** 2\n    return round(float(np.mean(squared_errors)), 4)"}
{"task_id": 331, "completion_id": 1, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask, dtype=bool)\n    (n_samples, n_estimators) = predictions.shape\n    oob_predictions = []\n    for i in range(n_samples):\n        mask = oob_mask[i]\n        sample_predictions = predictions[i, mask]\n        if len(sample_predictions) == 0:\n            continue\n        avg_pred = np.mean(sample_predictions)\n        oob_predictions.append((avg_pred, y_true[i]))\n    if not oob_predictions:\n        return -1.0\n    mse = np.mean([(pred - true) ** 2 for (pred, true) in oob_predictions])\n    return round(float(mse), 4)"}
{"task_id": 331, "completion_id": 2, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask).astype(bool)\n    oob_predictions = predictions[oob_mask]\n    (n_samples, n_estimators) = predictions.shape\n    sample_indices = np.where(oob_mask)[0]\n    estimator_indices = np.where(oob_mask)[1]\n    (unique_samples, counts) = np.unique(sample_indices, return_counts=True)\n    averaged_oob_predictions = np.zeros_like(y_true)\n    for sample in unique_samples:\n        mask = sample_indices == sample\n        pred_subset = predictions[oob_mask][mask]\n        averaged_oob_predictions[sample] = np.mean(pred_subset)\n    squared_errors = (averaged_oob_predictions[unique_samples] - y_true[unique_samples]) ** 2\n    oob_mse_value = np.mean(squared_errors)\n    return round(oob_mse_value, 4) if unique_samples.size > 0 else -1"}
{"task_id": 331, "completion_id": 3, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_estimators,).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask, dtype=bool)\n    oob_predictions = predictions[oob_mask]\n    (sample_indices, estimator_indices) = np.where(oob_mask)\n    reshaped_oob = np.full((predictions.shape[0], prediction_masked[1].max() + 1), np.nan)\n    reshaped_oob[sample_indices, np.arange(len(estimator_indices))] = oob_predictions\n    oob_averages = np.nanmean(reshaped_oob, axis=1)\n    valid_samples_mask = ~np.isnan(oob_averages)\n    if not np.any(valid_samples_mask):\n        return -1\n    squared_errors = (oob_averages[valid_samples_mask] - y_true[valid_samples_mask]) ** 2\n    oob_mse_value = np.mean(squared_errors)\n    return round(oob_mse_value, 4)"}
{"task_id": 331, "completion_id": 4, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask, dtype=bool)\n    (n_samples, n_estimators) = predictions.shape\n    oob_pred_avg = np.zeros(n_samples)\n    oob_count = np.zeros(n_samples, dtype=int)\n    for i in range(n_samples):\n        oob_indices = np.where(oob_mask[i, :])[0]\n        if len(oob_indices) > 0:\n            oob_pred_avg[i] = np.mean(predictions[i, oob_indices])\n            oob_count[i] = 1\n        else:\n            oob_pred_avg[i] = np.nan\n    valid_samples = oob_count > 0\n    if np.sum(valid_samples) == 0:\n        return -1\n    squared_errors = (y_true[valid_samples] - oob_pred_avg[valid_samples]) ** 2\n    oob_mse_value = np.mean(squared_errors)\n    return round(oob_mse_value, 4)"}
{"task_id": 331, "completion_id": 5, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as predictions.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask, dtype=bool)\n    (n_samples, n_estimators) = predictions.shape\n    oob_averages = np.full(n_samples, np.nan)\n    for i in range(n_samples):\n        relevant_trees = oob_mask[i, :]\n        if not relevant_trees.any():\n            continue\n        oob_preds = predictions[i, relevant_trees]\n        oob_averages[i] = oob_preds.mean()\n    valid_mask = ~np.isnan(oob_averages)\n    if not valid_mask.any():\n        return -1\n    y_pred_oob = oob_averages[valid_mask]\n    y_true_oob = y_true[valid_mask]\n    mse = np.mean((y_pred_oob - y_true_oob) ** 2)\n    return round(mse, 4)\ny_true = [1.0, 2.0, 3.0]\npredictions = [[2.0, 1.0, 1.5], [1.5, 2.0, 2.5], [3.5, 2.0, 3.0]]\noob_mask = [[True, False, True], [False, True, True], [False, False, True]]"}
{"task_id": 331, "completion_id": 6, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask, dtype=bool)\n    (n_samples, n_estimators) = predictions.shape\n    squared_errors = []\n    for i in range(n_samples):\n        oob_pred_indices = np.where(oob_mask[i, :])[0]\n        if len(oob_pred_indices) == 0:\n            continue\n        avg_oob_pred = np.mean(predictions[i, oob_pred_indices])\n        squared_error = (avg_oob_pred - y_true[i]) ** 2\n        squared_errors.append(squared_error)\n    if not squared_errors:\n        return -1\n    mse = np.mean(squared_errors)\n    return round(mse, 4)"}
{"task_id": 331, "completion_id": 7, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (1) or not (0), same shape as predictions.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.asarray(y_true).ravel()\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask).astype(bool)\n    (n_samples, n_estimators) = predictions.shape\n    squared_errors = []\n    for i in range(n_samples):\n        oob_predictions = predictions[i, oob_mask[i]]\n        if oob_predictions.size == 0:\n            continue\n        avg_oob_pred = oob_predictions.mean()\n        error = (y_true[i] - avg_oob_pred) ** 2\n        squared_errors.append(error)\n    if not squared_errors:\n        return -1\n    oob_mse = np.mean(squared_errors)\n    return round(oob_mse, 4)\ny_true = [3.1, 5.6, 2.4]\npredictions = [[3.0, 3.2, 5.5, 5.7, 2.3], [2.9, 3.5, 5.4, 5.2, 2.2], [2.8, 2.9, 5.1, 5.3, 2.1]]\noob_mask = [[1, 1, 0, 0, 0], [0, 0, 1, 1, 0], [0, 0, 0, 0, 1]]"}
{"task_id": 331, "completion_id": 8, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask, dtype=bool)\n    oob_predictions = []\n    for i in range(predictions.shape[0]):\n        oob_preds = predictions[i, oob_mask[i, :]]\n        if oob_preds.size == 0:\n            continue\n        avg_pred = np.mean(oob_preds)\n        oob_predictions.append((avg_pred, y_true[i]))\n    if not oob_predictions:\n        return -1\n    squared_errors = [(pred - true) ** 2 for (pred, true) in oob_predictions]\n    mse = np.mean(squared_errors)\n    return round(float(mse), 4)"}
{"task_id": 331, "completion_id": 9, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask, dtype=bool)\n    n_samples = oob_mask.shape[0]\n    mse_values = []\n    for i in range(n_samples):\n        oob_indices = np.where(oob_mask[i, :])[0]\n        if len(oob_indices) > 0:\n            oob_preds = predictions[i, oob_indices]\n            y_pred_avg = np.mean(oob_preds)\n            se = (y_true[i] - y_pred_avg) ** 2\n            mse_values.append(se)\n    if not mse_values:\n        return -1.0\n    else:\n        oob_mse = np.mean(mse_values)\n        return round(oob_mse, 4)\ny_true = [4.0, 5.5, 7.0]\npredictions = [[4.1, 3.9, 4.0], [5.4, 5.6, 5.5], [7.1, 6.9, 7.0]]\noob_mask = [[True, False, True], [False, True, True], [True, True, False]]"}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_support = Counter()\n    for transaction in transactions:\n        unique_items = set(transaction)\n        for item in unique_items:\n            item_support[item] += 1\n    frequent_items = {item: count for (item, count) in item_support.items() if count >= min_support}\n    if not frequent_items:\n        return {'support': 0, 'children': {}}\n    sorted_items = sorted(frequent_items.keys(), key=lambda x: (-frequent_items[x], x))\n    fp_tree = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        filtered_sorted = [item for item in transaction if item in frequent_items]\n        filtered_sorted = sorted(filtered_sorted, key=lambda x: (-frequent_items[x], x))\n        if not filtered_sorted:\n            continue\n        current = fp_tree\n        for item in filtered_sorted:\n            if item in current['children']:\n                current['children'][item]['support'] += 1\n            else:\n                current['children'][item] = {'support': 1, 'children': {}}\n            current = current['children'][item]\n    return fp_tree"}
{"task_id": 332, "completion_id": 1, "solution": "from collections import Counter, defaultdict\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_counts = Counter()\n    for t in transactions:\n        for item in set(t):\n            item_counts[item] += 1\n    frequent_items = {k for (k, v) in item_counts.items() if v >= min_support}\n    frequent_items_sorted = sorted(frequent_items, key=lambda x: (-item_counts[x], x))\n    processed_transactions = []\n    for t in transactions:\n        filtered = [item for item in set(t) if item in frequent_items]\n        ordered = [item for item in frequent_items_sorted if item in filtered]\n        if ordered:\n            processed_transactions.append(ordered)\n    root = {'support': 0, 'children': {}}\n    for transaction in processed_transactions:\n        node = root\n        for item in transaction:\n            if item not in node['children']:\n                node['children'][item] = {'support': 0, 'children': {}}\n            node['children'][item]['support'] += 1\n            node = node['children'][item]\n    return root\ntransactions = [['b', 'a', 'c', 'b'], ['a', 'b', 'd'], ['b', 'c', 'e'], ['a', 'b', 'c', 'e', 'e']]\nmin_support = 2"}
{"task_id": 332, "completion_id": 2, "solution": "from collections import Counter, defaultdict\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_counter = Counter()\n    for transaction in transactions:\n        item_counter.update(set(transaction))\n    frequent_items = {item for (item, count) in item_counter.items() if count >= min_support}\n    sorted_items = sorted(frequent_items, key=lambda item: (-item_counter[item], item))\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        transaction = list(set(transaction))\n        filtered = [item for item in transaction if item in frequent_items]\n        sorted_filtered = [item for item in sorted_items if item in filtered]\n        if sorted_filtered:\n            node = root\n            for item in sorted_filtered:\n                if item not in node['children']:\n                    node['children'][item] = {'support': 1, 'children': {}}\n                else:\n                    node['children'][item]['support'] += 1\n                node = node['children'][item]\n    return root"}
{"task_id": 332, "completion_id": 3, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_count = Counter()\n    for transaction in transactions:\n        for item in set(transaction):\n            item_count[item] += 1\n    frequent_items = {item for (item, count) in item_count.items() if count >= min_support}\n    sorted_items = sorted(frequent_items, key=lambda x: (-item_count[x], x))\n    item_index = {item: i for (i, item) in enumerate(sorted_items)}\n\n    def sort_key(item):\n        return item_index.get(item, float('inf'))\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        filtered_transaction = [item for item in set(transaction) if item in frequent_items]\n        filtered_transaction.sort(key=sort_key)\n        if filtered_transaction:\n            current_node = root\n            for item in filtered_transaction:\n                if item in current_node['children']:\n                    current_node['children'][item]['support'] += 1\n                else:\n                    current_node['children'][item] = {'support': 1, 'children': {}}\n                current_node = current_node['children'][item]\n    return root"}
{"task_id": 332, "completion_id": 4, "solution": "from collections import Counter, defaultdict\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_support = Counter()\n    for transaction in transactions:\n        for item in set(transaction):\n            item_support[item] += 1\n    frequent_items = {item for (item, sup) in item_support.items() if sup >= min_support}\n    sorted_items = sorted(frequent_items, key=lambda x: (-item_support[x], x))\n    item_to_index = {item: idx for (idx, item) in enumerate(sorted_items)}\n\n    def reorder_transaction(transaction):\n        \"\"\"Remove duplicates, keep only frequent items, and reorder according to sorted_items.\"\"\"\n        return [item for item in transaction if item in frequent_items and item not in seen_so_far]\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        seen_so_far = set()\n        items = [item for item in transaction if item in frequent_items and (not (item in seen_so_far or seen_so_far.add(item)))]\n        items.sort(key=lambda x: item_to_index[x])\n        if items:\n            node = root\n            for item in items:\n                if item in node['children']:\n                    node['children'][item]['support'] += 1\n                else:\n                    node['children'][item] = {'support': 1, 'children': {}}\n                node = node['children'][item]\n    return root\ntransactions = [['r', 'z', 'h', 'j', 'p'], ['z', 'y', 'x', 'w', 'v', 'u', 't', 's'], ['z']]"}
{"task_id": 332, "completion_id": 5, "solution": "from collections import Counter, defaultdict\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_counts = Counter()\n    for transaction in transactions:\n        unique_items = set(transaction)\n        for item in unique_items:\n            item_counts[item] += 1\n    frequent_items = {item for (item, count) in item_counts.items() if count >= min_support}\n    ordered_items = sorted(frequent_items, key=lambda x: (-item_counts[x], x))\n    get_support = lambda item: item_counts[item]\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        filtered_sorted = [item for item in transaction if item in frequent_items]\n        filtered_sorted = list(set(filtered_sorted))\n        filtered_sorted.sort(key=lambda x: (get_support(x), x), reverse=True)\n        if filtered_sorted:\n            node = root\n            node['support'] += 1\n            for item in filtered_sorted:\n                if item not in node['children']:\n                    node['children'][item] = {'support': 0, 'children': {}}\n                node = node['children'][item]\n                node['support'] += 1\n    return root\ntransactions = [['r', 'z', 'h', 'j', 'p'], ['z', 'y', 'x', 'w', 'v', 'u', 't', 's'], ['z'], ['r', 'z', 'h', 'j', 'p'], ['z', 'r', 'h']]\nmin_support = 2"}
{"task_id": 332, "completion_id": 6, "solution": "from collections import Counter, defaultdict\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree. Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_counter = Counter()\n    for transaction in transactions:\n        item_counter.update(set(transaction))\n    frequent_items = {item for (item, count) in item_counter.items() if count >= min_support}\n    sorted_items = sorted(frequent_items, key=lambda x: (-item_counter[x], x))\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        filtered = list(set(transaction) & frequent_items)\n        filtered.sort(key=lambda x: sorted_items.index(x))\n        if filtered:\n            node = root\n            node['support'] += 1\n            for item in filtered:\n                if item not in node['children']:\n                    node['children'][item] = {'support': 0, 'children': {}}\n                node = node['children'][item]\n                node['support'] += 1\n    return root\ntransactions = [['r', 'z', 'h', 'j', 'p'], ['z', 'y', 'x', 'w', 'v', 'u', 't', 's'], ['z'], ['r', 'z', 'h', 'j', 'p'], ['z', 'r', 'h', 'j', 'p']]\nmin_support = 2"}
{"task_id": 332, "completion_id": 7, "solution": "from collections import Counter, defaultdict\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_counts = Counter()\n    for trans in transactions:\n        item_counts.update(set(trans))\n    frequent_items = {item for (item, count) in item_counts.items() if count >= min_support}\n    sorted_items = sorted(frequent_items, key=lambda item: (-item_counts[item], item))\n    item_ordering = {item: idx for (idx, item) in enumerate(sorted_items)}\n\n    def sort_transaction(items):\n        return sorted((item for item in items if item in frequent_items), key=lambda x: item_ordering[x], reverse=False)\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        filtered_transaction = sort_transaction(set(transaction))\n        if not filtered_transaction:\n            continue\n        node = root\n        for item in filtered_transaction:\n            if item in node['children']:\n                node['children'][item]['support'] += 1\n            else:\n                node['children'][item] = {'support': 1, 'children': {}}\n            node = node['children'][item]\n    return root"}
{"task_id": 332, "completion_id": 8, "solution": "from collections import Counter, defaultdict\nimport pprint\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_counts = Counter()\n    for tx in transactions:\n        item_counts.update(set(tx))\n    frequent_items = {item for (item, count) in item_counts.items() if count >= min_support}\n    sorted_items = sorted(frequent_items, key=lambda x: (-item_counts[x], x))\n\n    def process_transaction(tx: list[str]):\n        filtered = set(tx) & frequent_items\n        return sorted(filtered, key=lambda x: (-item_counts[x], x))\n    root = {'support': 0, 'children': {}}\n    for tx in transactions:\n        path = process_transaction(tx)\n        if not path:\n            continue\n        current = root\n        for item in path:\n            children = current['children']\n            if item in children:\n                children[item]['support'] += 1\n            else:\n                children[item] = {'support': 1, 'children': {}}\n            current = children[item]\n    return root\ntransactions = [['a', 'b', 'c'], ['b', 'd'], ['a', 'b', 'c', 'd'], ['a'], ['b', 'c']]\nmin_support = 2"}
{"task_id": 332, "completion_id": 9, "solution": "from collections import Counter, defaultdict\nfrom typing import list\nfrom pprint import pprint\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_count = Counter()\n    for trans in transactions:\n        item_count.update(frozenset(trans))\n    frequent_items = {item for (item, count) in item_count.items() if count >= min_support}\n    if not frequent_items:\n        return {'support': 0, 'children': {}}\n    ordered_items = sorted(frequent_items, key=lambda item: (-item_count[item], item))\n    item_order = {item: idx for (idx, item) in enumerate(ordered_items)}\n\n    def reorder_and_filter_trans(trans):\n        filtered = frozenset(trans) & frequent_items\n        return sorted(filtered, key=lambda item: item_order[item], reverse=True)\n    ordered_trans = [reorder_and_filter_trans(trans) for trans in transactions]\n    tree = {'support': 0, 'children': defaultdict(dict)}\n    for trans in ordered_trans:\n        if not trans:\n            continue\n        node = tree\n        for item in trans:\n            if item in node['children']:\n                node['children'][item]['support'] += 1\n            else:\n                node['children'][item] = {'support': 1, 'children': {}}\n            node = node['children'][item]\n    return tree\ntransactions = [['a', 'b', 'c'], ['b', 'c', 'a'], ['a', 'b', 'd'], ['a', 'c', 'd'], ['b', 'c']]\nmin_support = 2\ntree = build_fp_tree(transactions, min_support)"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\nfrom typing import list, list, int, float, cast\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        Y = X.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals X[i]\u00b7Y[j] + c0,\n        rounded to 4 decimals.  Return -1 if X and Y have incompatible shapes.\n    \"\"\"\n    X_arr = np.array(X, dtype=float)\n    if Y is None:\n        Y_arr = X_arr\n    else:\n        Y_arr = np.array(Y, dtype=float)\n    if X_arr.shape[1] != Y_arr.shape[1]:\n        return -1\n    dot_products = X_arr @ Y_arr.T\n    kernel_matrix = dot_products + c0\n    kernel_matrix = np.round(kernel_matrix, 4)\n    return kernel_matrix.tolist()\nX = [[1, 2], [3, 4]]\nY = [[5, 6], [7, 8]]"}
{"task_id": 336, "completion_id": 1, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X_arr = np.array(X)\n    if Y is None:\n        Y_arr = X_arr\n    else:\n        Y_arr = np.array(Y)\n    if X_arr.shape[1] != Y_arr.shape[1]:\n        return -1\n    if X_arr.shape[0] == 0:\n        return []\n    K = (X_arr @ Y_arr.T).astype(float) + c0\n    K = np.round(K, decimals=4)\n    return K.tolist()"}
{"task_id": 336, "completion_id": 2, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    if X.shape[0] == 0:\n        return []\n    dot_products = np.dot(X, Y.T)\n    kernel_matrix = dot_products + c0\n    kernel_matrix = np.round(kernel_matrix, 4)\n    return kernel_matrix.tolist()"}
{"task_id": 336, "completion_id": 3, "solution": "import numpy as np\nfrom typing import list, Optional, Union\ndef linear_kernel(X: list[list[Union[int, float]]] | np.ndarray, Y: Optional[list[list[Union[int, float]]] | np.ndarray]=None, c0: Union[int, float]=0) -> list[list[float]] | int:\n    \"\"\"\n    Return the linear kernel matrix k(x, y) = x \u00b7 y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors. If None, the function must set\n        Y = X. Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel. Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i] \u00b7 Y[j] + c0, rounded to 4 decimals. Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n    if Y is None:\n        Y_np = X_np\n    else:\n        Y_np = np.array(Y, dtype=float)\n    if X_np.shape[1] != Y_np.shape[1]:\n        return -1\n    if X_np.shape[0] == 0:\n        return []\n    kernel_matrix = X_np @ Y_np.T + c0\n    return [[float(round(value, 4)) for value in row] for row in kernel_matrix]\nX = []\nY = [[5], [7]]"}
{"task_id": 336, "completion_id": 4, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X_arr = np.array(X, dtype=float)\n    if Y is None:\n        Y_arr = X_arr\n    else:\n        Y_arr = np.array(Y, dtype=float)\n        if X_arr.shape[1] != Y_arr.shape[1]:\n            return -1\n    K = np.dot(X_arr, Y_arr.T) + c0\n    K_rounded = np.round(K, 4)\n    return K_rounded.tolist()"}
{"task_id": 336, "completion_id": 5, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X_arr = np.array(X, dtype=float)\n    if Y is None:\n        Y_arr = X_arr.copy()\n    else:\n        Y_arr = np.array(Y, dtype=float)\n    if X_arr.shape[1] != Y_arr.shape[1]:\n        return -1\n    if X_arr.shape[0] == 0:\n        return []\n    K = np.dot(X_arr, Y_arr.T) + c0\n    K = np.round(K, 4)\n    return K.tolist()"}
{"task_id": 336, "completion_id": 6, "solution": "import numpy as np\nfrom typing import list, Union\ndef linear_kernel(X: Union[list[list[int | float]], np.ndarray], Y: Union[list[list[int | float]], np.ndarray, None]=None, c0: Union[int, float]=0) -> Union[list[list[float]], int]:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors. If None, the function must set\n        `Y = X`. Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel. Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals. Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X, dtype=float)\n    if Y is not None and (not isinstance(Y, np.ndarray)):\n        Y = np.array(Y, dtype=float)\n    else:\n        Y = X\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    if X.shape[0] == 0:\n        return []\n    dot_products = np.dot(X, Y.T)\n    kernel_matrix = dot_products + c0\n    kernel_matrix = [list(row) for row in np.round(kernel_matrix, 4)]\n    return kernel_matrix\nX = [[1, 2], [3, 4]]\nY = [[1, 1], [2, 2]]"}
{"task_id": 336, "completion_id": 7, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    if X.shape[0] == 0:\n        return []\n    K = X @ Y.T + c0\n    K = np.round(K, 4).tolist()\n    return K"}
{"task_id": 336, "completion_id": 8, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is not None:\n        Y = np.array(Y, dtype=float)\n    else:\n        Y = X\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    if X.shape[0] == 0:\n        return []\n    K = np.dot(X, Y.T) + c0\n    K_rounded = [[round(val, 4) for val in row] for row in K]\n    return K_rounded"}
{"task_id": 336, "completion_id": 9, "solution": "import numpy as np\nfrom typing import list, int, float, Any\ndef linear_kernel(X: list[list[int | float]] | np.ndarray, Y: list[list[int | float]] | np.ndarray | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set  \n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals  \n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have  \n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    if X.shape[0] == 0:\n        return []\n    K = np.zeros((X.shape[0], Y.shape[0]), dtype=float)\n    for i in range(X.shape[0]):\n        for j in range(Y.shape[0]):\n            K[i, j] = float(np.dot(X[i], Y[j])) + c0\n    K_rounded = np.round(K, 4)\n    return K_rounded.tolist()\nX = [[1, 2], [3, 4]]"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    beta1_t = beta1 ** t\n    beta2_t = beta2 ** t\n    m_hat = m_t / (1 - beta1_t)\n    v_hat = v_t / (1 - beta2_t)\n    updated_param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    updated_param_list = np.round(updated_param, 8).tolist()\n    m_t_list = np.round(m_t, 8).tolist()\n    v_t_list = np.round(v_t, 8).tolist()\n    return (updated_param_list, m_t_list, v_t_list)"}
{"task_id": 340, "completion_id": 1, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m_t / (1 - beta1 ** t)\n    v_hat = v_t / (1 - beta2 ** t)\n    updated_param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    return (np.round(updated_param.tolist(), 8), np.round(m_t.tolist(), 8), np.round(v_t.tolist(), 8))\nparam = np.array([0.1, 0.2])\ngrad = np.array([0.3, 0.4])\nm = np.zeros(2)\nv = np.zeros(2)\nt = 1"}
{"task_id": 340, "completion_id": 2, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m_t / (1 - beta1 ** t)\n    v_hat = v_t / (1 - beta2 ** t)\n    updated_param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    updated_param_list = np.round(updated_param, 8).tolist()\n    new_m_list = np.round(m_t, 8).tolist()\n    new_v_list = np.round(v_t, 8).tolist()\n    return (updated_param_list, new_m_list, new_v_list)"}
{"task_id": 340, "completion_id": 3, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * np.square(grad)\n    m_hat = m_t / (1 - beta1 ** t)\n    v_hat = v_t / (1 - beta2 ** t)\n    updated_param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    updated_param_list = np.round(updated_param, 8).tolist()\n    m_t_list = np.round(m_t, 8).tolist()\n    v_t_list = np.round(v_t, 8).tolist()\n    return (updated_param_list, m_t_list, v_t_list)"}
{"task_id": 340, "completion_id": 4, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * np.square(grad)\n    m_hat = m_t / (1 - beta1 ** t)\n    v_hat = v_t / (1 - beta2 ** t)\n    updated_param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    return (np.round(updated_param, 8).tolist(), np.round(m_t, 8).tolist(), np.round(v_t, 8).tolist())"}
{"task_id": 340, "completion_id": 5, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m_t / (1 - beta1 ** t)\n    v_hat = v_t / (1 - beta2 ** t)\n    updated_param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    updated_param_list = np.round(updated_param, 8).tolist()\n    m_t_list = np.round(m_t, 8).tolist()\n    v_t_list = np.round(v_t, 8).tolist()\n    return (updated_param_list, m_t_list, v_t_list)"}
{"task_id": 340, "completion_id": 6, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * np.square(grad)\n    m_hat = m_t / (1 - beta1 ** t)\n    v_hat = v_t / (1 - beta2 ** t)\n    updated_param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    result = (np.round(updated_param.tolist(), 8), np.round(m_t.tolist(), 8), np.round(v_t.tolist(), 8))\n    return result"}
{"task_id": 340, "completion_id": 7, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * np.square(grad)\n    m_hat = m_t / (1 - beta1 ** t)\n    v_hat = v_t / (1 - beta2 ** t)\n    updated_param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    updated_param_list = np.round(updated_param.tolist(), 8)\n    m_t_list = np.round(m_t.tolist(), 8)\n    v_t_list = np.round(v_t.tolist(), 8)\n    return (updated_param_list, m_t_list, v_t_list)"}
{"task_id": 340, "completion_id": 8, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m_t / (1 - beta1 ** t)\n    v_hat = v_t / (1 - beta2 ** t)\n    param_new = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    updated_param = np.round(param_new, 8).tolist()\n    new_m = np.round(m_t, 8).tolist()\n    new_v = np.round(v_t, 8).tolist()\n    return (updated_param, new_m, new_v)"}
{"task_id": 340, "completion_id": 9, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m_t / (1 - beta1 ** t)\n    v_hat = v_t / (1 - beta2 ** t)\n    updated_param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    return (np.round(updated_param.tolist(), 8), np.round(m_t.tolist(), 8), np.round(v_t.tolist(), 8))"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    N = len(rewards)\n    sorted_indices = np.argsort(rewards)[::-1]\n    sorted_theta_samples = theta_samples[sorted_indices]\n    retain_count = int(retain_prcnt * N)\n    elite_samples = sorted_theta_samples[:retain_count]\n    mean = elite_samples.mean(axis=0)\n    var = elite_samples.var(axis=0)\n    mean_rounded = [round(x, 4) for x in mean]\n    var_rounded = [round(x, 4) for x in var]\n    return (mean_rounded, var_rounded)\ntheta_samples = np.array([[0.1, 0.7, 0.3], [0.9, 0.2, 0.8], [0.4, 0.5, 0.1], [0.2, 0.9, 0.4], [0.8, 0.1, 0.7]])\nrewards = [10, 20, 5, 25, 15]\nretain_prcnt = 0.4"}
{"task_id": 343, "completion_id": 1, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    N = theta_samples.shape[0]\n    num_retain = int(retain_prcnt * N)\n    elite_indices = np.argsort(rewards)[-num_retain:]\n    elite_samples = theta_samples[elite_indices]\n    mean = elite_samples.mean(axis=0)\n    variance = elite_samples.var(axis=0, ddof=1)\n    mean_rounded = [round(x, 4) for x in mean]\n    variance_rounded = [round(x, 4) for x in variance]\n    return (mean_rounded, variance_rounded)"}
{"task_id": 343, "completion_id": 2, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    (N, D) = theta_samples.shape\n    rewards = np.array(rewards)\n    idx = np.argsort(rewards)[::-1]\n    retain_count = int(retain_prcnt * N)\n    elite_indices = idx[:retain_count]\n    elite_samples = theta_samples[elite_indices]\n    mean = elite_samples.mean(axis=0)\n    variance = elite_samples.var(axis=0)\n    mean_rounded = [round(m, 4) for m in mean]\n    variance_rounded = [round(v, 4) for v in variance]\n    return (mean_rounded, variance_rounded)"}
{"task_id": 343, "completion_id": 3, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    N = theta_samples.shape[0]\n    num_to_retain = int(retain_prcnt * N)\n    sorted_indices = np.argsort(rewards)[::-1]\n    elite_indices = sorted_indices[:num_to_retain]\n    elite_samples = theta_samples[elite_indices]\n    mean = elite_samples.mean(axis=0)\n    variance = elite_samples.var(axis=0)\n    mean_rounded = [round(x, 4) for x in mean]\n    variance_rounded = [round(x, 4) for x in variance]\n    return (mean_rounded, variance_rounded)"}
{"task_id": 343, "completion_id": 4, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    rewards = np.array(rewards)\n    (n_samples, dim) = theta_samples.shape\n    retain_count = int(retain_prcnt * n_samples)\n    if retain_count == 0:\n        retain_count = 1\n    top_indices = rewards.argsort()[-retain_count:]\n    elite_samples = theta_samples[top_indices]\n    mean = elite_samples.mean(axis=0)\n    variance = elite_samples.var(axis=0)\n    mean_rounded = [round(x, 4) for x in mean]\n    variance_rounded = [round(x, 4) for x in variance]\n    return (mean_rounded, variance_rounded)\ntheta_samples = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9], [1.0, 1.1, 1.2]])\nrewards = [10, 5, 20, 15]\nretain_prcnt = 0.5"}
{"task_id": 343, "completion_id": 5, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    (N, D) = theta_samples.shape\n    num_to_keep = int(retain_prcnt * N)\n    sorted_indices = np.argsort(rewards)[::-1]\n    elite_indices = sorted_indices[:num_to_keep]\n    elite_samples = theta_samples[elite_indices]\n    elite_mean = elite_samples.mean(axis=0)\n    elite_variance = elite_samples.var(axis=0)\n    mean_list = [round(x, 4) for x in elite_mean]\n    variance_list = [round(x, 4) for x in elite_variance]\n    return (mean_list, variance_list)\ntheta_samples = np.array([[0.1, 0.5], [1.2, 2.3], [0.8, 1.0], [2.0, 3.0]])\nrewards = [5, 10, 2, 15]\nretain_prcnt = 0.5"}
{"task_id": 343, "completion_id": 6, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    (N, D) = theta_samples.shape\n    reward_samples = list(zip(rewards, theta_samples))\n    reward_samples.sort(reverse=True, key=lambda x: x[0])\n    num_retain = int(retain_prcnt * N)\n    elite_samples = [theta for (r, theta) in reward_samples[:num_retain]]\n    elite_array = np.array(elite_samples)\n    mean = elite_array.mean(axis=0).tolist()\n    variance = elite_array.var(axis=0).tolist()\n    mean_rounded = [round(x, 4) for x in mean]\n    variance_rounded = [round(x, 4) for x in variance]\n    return (mean_rounded, variance_rounded)"}
{"task_id": 343, "completion_id": 7, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    (N, D) = theta_samples.shape\n    rewards = np.array(rewards)\n    indexed_rewards = list(zip(rewards, theta_samples))\n    indexed_rewards.sort(reverse=True, key=lambda x: x[0])\n    retain_count = int(retain_prcnt * N)\n    elite_samples = np.array([sample for (_, sample) in indexed_rewards[:retain_count]])\n    mean = np.around(elite_samples.mean(axis=0), decimals=4)\n    variance = np.around(elite_samples.var(axis=0), decimals=4)\n    return (mean.tolist(), variance.tolist())"}
{"task_id": 343, "completion_id": 8, "solution": "import numpy as np\nfrom typing import list, Tuple\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> Tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    N = theta_samples.shape[0]\n    reward_sample_pairs = list(zip(rewards, theta_samples))\n    reward_sample_pairs.sort(reverse=True)\n    retain_num = int(retain_prcnt * N)\n    elite_samples = [sample for (_, sample) in reward_sample_pairs[:retain_num]]\n    elite_array = np.array(elite_samples)\n    mean = np.mean(elite_array, axis=0)\n    variance = np.var(elite_array, axis=0)\n    mean_list = [round(m, 4) for m in mean]\n    variance_list = [round(v, 4) for v in variance]\n    return (mean_list, variance_list)\nrewards = [10, 7, 5, 8, 12]"}
{"task_id": 343, "completion_id": 9, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    N = theta_samples.shape[0]\n    num_retain = int(retain_prcnt * N)\n    indexed_rewards = list(enumerate(rewards))\n    sorted_rewards = sorted(indexed_rewards, key=lambda x: x[1], reverse=True)\n    elite_indices = [idx for (idx, _) in sorted_rewards[:num_retain]]\n    elite_samples = theta_samples[elite_indices]\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    return ([round(m, 4) for m in mean], [round(v, 4) for v in variance])"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    counter = Counter(labels)\n    total = len(labels)\n    h = 0.0\n    for count in counter.values():\n        p = count / total\n        h -= p * math.log2(p)\n    return round(h, 5)"}
{"task_id": 353, "completion_id": 1, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total = len(labels)\n    h = 0.0\n    for count in label_counts.values():\n        p = count / total\n        h -= p * math.log2(p)\n    return round(h, 5)"}
{"task_id": 353, "completion_id": 2, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total = len(labels)\n    entropy_value = 0.0\n    for count in label_counts.values():\n        prob = count / total\n        entropy_value -= prob * math.log2(prob)\n    return round(entropy_value, 5)"}
{"task_id": 353, "completion_id": 3, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total = len(labels)\n    H = 0.0\n    for count in label_counts.values():\n        p = count / total\n        H -= p * math.log2(p)\n    return round(H, 5)"}
{"task_id": 353, "completion_id": 4, "solution": "import math\nfrom collections import Counter\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    counts = Counter(labels)\n    n_total = len(labels)\n    h = 0.0\n    for count in counts.values():\n        p = count / n_total\n        h -= p * math.log2(p)\n    return round(h, 5)"}
{"task_id": 353, "completion_id": 5, "solution": "import math\nfrom collections import Counter\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    total = len(labels)\n    class_counts = Counter(labels)\n    entropy_value = 0.0\n    for count in class_counts.values():\n        probability = count / total\n        entropy_value -= probability * math.log2(probability)\n    return round(entropy_value, 5)"}
{"task_id": 353, "completion_id": 6, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    counts = Counter(labels)\n    total = len(labels)\n    h = 0.0\n    for count in counts.values():\n        p = count / total\n        h -= p * math.log2(p)\n    return round(h, 5)"}
{"task_id": 353, "completion_id": 7, "solution": "import math\nfrom collections import Counter\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total = sum(label_counts.values())\n    h = 0.0\n    for count in label_counts.values():\n        p = count / total\n        h -= p * math.log2(p)\n    return round(h, 5)"}
{"task_id": 353, "completion_id": 8, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total = len(labels)\n    h = 0.0\n    for count in label_counts.values():\n        p_i = count / total\n        h -= p_i * math.log2(p_i)\n    return round(h, 5)"}
{"task_id": 353, "completion_id": 9, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    total = len(labels)\n    label_counts = Counter(labels)\n    entropy_value = 0.0\n    for count in label_counts.values():\n        probability = count / total\n        entropy_value -= probability * math.log2(probability)\n    return round(entropy_value, 5)"}
{"task_id": 354, "completion_id": 0, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python** list obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    if isinstance(pad, int):\n        pad_top = pad_bottom = pad_left = pad_right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (pr, pc) = pad\n        pad_top = pad_bottom = pr\n        pad_left = pad_right = pc\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        (pad_top, pad_bottom, pad_left, pad_right) = pad\n    elif pad == 'same':\n        pad_top = pad_bottom = (kernel_rows - 1 + 2 * dilation) // 2\n        pad_left = pad_right = (kernel_cols - 1 + 2 * dilation) // 2\n    out_rows = (in_rows + pad_top + pad_bottom - dilation * (kernel_rows - 1) - 1) // stride + 1\n    out_cols = (in_cols + pad_left + pad_right - dilation * (kernel_cols - 1) - 1) // stride + 1\n    X_padded = np.pad(X, ((0, 0), (pad_top, pad_bottom), (pad_left, pad_right), (0, 0)), mode='constant')\n    X_col = np.zeros((n_ex, in_ch, kernel_rows * kernel_cols, out_rows * out_cols))\n    for i in range(n_ex):\n        for w_pos in range(out_rows):\n            for h_pos in range(out_cols):\n                w_start = w_pos * stride\n                h_start = h_pos * stride\n                w_slice = w_start + dilation * np.arange(kernel_rows)\n                h_slice = h_start + dilation * np.arange(kernel_cols)\n                X_col[i, :, :, w_pos * out_cols + h_pos] = X_padded[i, w_slice[:, None], h_slice, :].reshape(-1)\n    X_col = X_col.reshape(n_ex, in_ch * kernel_rows * kernel_cols, out_rows * out_cols)\n    W_row = W.reshape(-1, out_ch)\n    out = X_col @ W_row\n    out = out.reshape(n_ex, out_rows, out_cols, out_ch)\n    return out.tolist()"}
{"task_id": 354, "completion_id": 1, "solution": "import numpy as np\nimport numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (ker_rows, ker_cols, in_ch, out_ch) = W.shape\n    ker_rows_ = (ker_rows - 1) * (dilation + 1) + 1\n    ker_cols_ = (ker_cols - 1) * (dilation + 1) + 1\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            pad = (pad[0], pad[0], pad[1], pad[1])\n    elif pad == 'same':\n        out_rows_same = (in_rows + stride - 1) // stride\n        required_padding_rows = max(0, (out_rows_same - 1) * stride + ker_rows_ - in_rows)\n        pr = (required_padding_rows + 1) // 2\n        pc = ((out_rows_same - 1) * stride + ker_cols_ - in_cols + 1) // 2\n        pad = (pr, required_padding_rows - pr, pc, (out_rows_same - 1) * stride + ker_cols_ - in_cols - pc)\n    else:\n        pad = (0, 0, 0, 0)\n    (pt, pb, pl, pr) = pad\n    padded = np.pad(X, ((0, 0), (pt, pb), (pl, pr), (0, 0)), mode='constant')\n    out_rows = (in_rows + pt + pb - ker_rows_ + stride) // stride\n    out_cols = (in_cols + pl + pr - ker_cols_ + stride) // stride\n    n_vol = n_ex * out_rows * out_cols\n    in_h = in_rows + pt + pb\n    in_w = in_cols + pl + pr\n    n_ker = out_ch\n    rows = np.zeros((n_vol, ker_rows * ker_cols * in_ch), dtype=X.dtype)\n    ptr = 0\n    for i_ex in range(n_ex):\n        for j_row in range(out_rows):\n            for k_col in range(out_cols):\n                start_row = j_row * stride\n                start_col = k_col * stride\n                block = np.zeros((ker_rows * ker_cols, in_ch), dtype=X.dtype)\n                for u_kr in range(ker_rows):\n                    for v_kc in range(ker_cols):\n                        original_row = start_row + u_kr * (dilation + 1)\n                        original_col = start_col + v_kc * (dilation + 1)\n                        if original_row >= 0 and original_row < in_h and (original_col >= 0) and (original_col < in_w):\n                            for c_ch in range(in_ch):\n                                block[u_kr * ker_cols + v_kc, c_ch] = padded[i_ex, original_row, original_col, c_ch]\n                rows[ptr, :] = block.flatten()\n                ptr += 1\n    cols = W.reshape((-1, out_ch))\n    output_vec = np.dot(rows, cols)\n    output = output_vec.reshape((n_ex, out_rows, out_cols, out_ch))\n    return output.tolist()\nX = np.random.randn(2, 32, 32, 3)"}
{"task_id": 354, "completion_id": 2, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (k_rows, k_cols, in_ch, out_ch) = W.shape\n    if dilation < 0:\n        raise ValueError('Dilation factor must be non-negative.')\n    eff_k_rows = k_rows + (k_rows - 1) * dilation\n    eff_k_cols = k_cols + (k_cols - 1) * dilation\n    if isinstance(pad, str) and pad.lower() == 'same':\n        pr = eff_k_rows // 2\n        pc = eff_k_cols // 2\n    elif isinstance(pad, int):\n        pr = pad\n        pc = pad\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            (pr, pc) = pad\n        elif len(pad) == 4:\n            (pr_top, pr_bottom, pc_left, pc_right) = pad\n            pr = (pr_top, pr_bottom)\n            pc = (pc_left, pc_right)\n        else:\n            raise ValueError('Padding tuple must have 2 or 4 elements.')\n    else:\n        raise ValueError(\"Padding must be an integer, 2-tuple, 4-tuple, or 'same'.\")\n    if isinstance(pr, int):\n        padded_pr = pr\n        padded_pc = pc\n        padded_rows = in_rows + 2 * padded_pr\n        padded_cols = in_cols + 2 * padded_pc\n    else:\n        padded_rows = in_rows + pr[0] + pr[1]\n        padded_cols = in_cols + pc[0] + pc[1]\n        pr = pr[0]\n        pr2 = pr[1]\n        pc = pc[0]\n        pc2 = pc[1]\n    out_rows = (padded_rows - eff_k_rows) // stride + 1\n    out_cols = (padded_cols - eff_k_cols) // stride + 1\n    if out_rows <= 0 or out_cols <= 0:\n        raise ValueError('Invalid combination of input size, kernel size, stride, padding or dilation.')\n    X_padded = np.pad(X, ((0, 0), (pr, pr2 if isinstance(pr, tuple) else pr), (pc, pc2 if isinstance(pc, tuple) else pc), (0, 0)), mode='constant', constant_values=0)\n    X_col = im2col(X_padded, k_rows, k_cols, stride, dilation)\n    W_row = W.reshape(-1, out_ch)\n    out = np.dot(X_col, W_row)\n    out = out.reshape(n_ex, out_rows, out_cols, out_ch)\n    out = out.transpose(0, 1, 2, 3)\n    return out.tolist()\ndef im2col(X_padded, k_rows, k_cols, stride, dilation):\n    \"\"\"Converts input patches to columns using image to column indexing.\"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X_padded.shape\n    out_rows = (in_rows - k_rows) // stride + 1\n    out_cols = (in_cols - k_cols) // stride + 1\n    k_rows_ca = k_rows + (k_rows - 1) * dilation\n    k_cols_ca = k_cols + (k_cols - 1) * dilation\n    cols = np.zeros((n_ex, in_ch, k_rows_ca, k_cols_ca, out_rows, out_cols))\n    for r in range(out_rows):\n        for c in range(out_cols):\n            for kr in range(k_rows):\n                for kc in range(k_cols):\n                    if dilation > 0:\n                        sr = r * stride + kr * (dilation + 1)\n                        sc = c * stride + kc * (dilation + 1)\n                    else:\n                        sr = r * stride + kr\n                        sc = c * stride + kc\n                    cols[:, :, kr, kc, r, c] = X_padded[:, sr, sc, :]\n    cols = cols.reshape(n_ex, -1, out_rows * out_cols)\n    cols = cols.transpose(0, 2, 1)\n    cols = cols.reshape(-1, cols.shape[-1])\n    return cols"}
{"task_id": 354, "completion_id": 3, "solution": "import numpy as np\nimport numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (k_rows, k_cols, _, out_ch) = W.shape\n    dilated_k_rows = k_rows + (k_rows - 1) * dilation\n    dilated_k_cols = k_cols + (k_cols - 1) * dilation\n    if isinstance(pad, int):\n        pad_std = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad_std = (pad[0], pad[0], pad[1], pad[1])\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        pad_std = pad\n    elif pad == 'same':\n        pad_height = (in_rows - 1) * stride + dilated_k_rows - in_rows\n        pad_width = (in_cols - 1) * stride + dilated_k_cols - in_cols\n        pad_std = (pad_height // 2, pad_height - pad_height // 2, pad_width // 2, pad_width - pad_width // 2)\n    else:\n        pad_std = (0, 0, 0, 0)\n    X_padded = np.pad(X, ((0, 0), (pad_std[0], pad_std[1]), (pad_std[2], pad_std[3]), (0, 0)))\n    out_rows = (in_rows + pad_std[0] + pad_std[1] - dilated_k_rows) // stride + 1\n    out_cols = (in_cols + pad_std[2] + pad_std[3] - dilated_k_cols) // stride + 1\n    out_col = out_rows * out_cols\n    im2col = np.zeros((in_ch * k_rows * k_cols, out_col * n_ex), dtype=X.dtype)\n    index = 0\n    for ex in range(n_ex):\n        for i in range(out_rows):\n            for j in range(out_cols):\n                start_row = i * stride\n                start_col = j * stride\n                for r in range(k_rows):\n                    true_r = start_row + r * (dilation + 1)\n                    for c in range(k_cols):\n                        true_c = start_col + c * (dilation + 1)\n                        im2col[:, index] = X_padded[ex, true_r, true_c, :].flatten()\n                    index += 1\n    W_flat = W.reshape((-1, out_ch))\n    out = np.dot(im2col.T, W_flat)\n    out = out.reshape((n_ex, out_rows, out_cols, out_ch))\n    return out.tolist()\nX = np.random.rand(1, 5, 5, 3)"}
{"task_id": 354, "completion_id": 4, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_h, in_w, in_ch) = X.shape\n    (kernel_h, kernel_w, _, out_ch) = W.shape\n    if isinstance(pad, str) and pad == 'same':\n        pad_h = (kernel_h - 1) * (dilation + 1) // 2\n        pad_w = (kernel_w - 1) * (dilation + 1) // 2\n        pad = (pad_h, pad_h, pad_w, pad_w)\n    elif isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad = (pad[0], pad[0], pad[1], pad[1])\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        pass\n    else:\n        pass\n    (top_pad, bot_pad, left_pad, right_pad) = pad\n    X_padded = np.pad(X, ((0, 0), (top_pad, bot_pad), (left_pad, right_pad), (0, 0)), mode='constant')\n    out_h = int((in_h + top_pad + bot_pad - dilation * (kernel_h - 1) - 1) // stride + 1)\n    out_w = int((in_w + left_pad + right_pad - dilation * (kernel_w - 1) - 1) // stride + 1)\n\n    def im2col(X, kh, kw, sh, sw, pd, dl):\n        \"\"\"\n        Transforms input volume of shape (b, h, w, c) to columns of shape\n        (h*kw*kw, b*c), ready for matrix multiplication with kernels.\n        \"\"\"\n        out_h = 1 + (X.shape[1] - pd[0] - pd[1] - dl * (kh - 1)) // sh\n        out_w = 1 + (X.shape[2] - pd[2] - pd[3] - dl * (kw - 1)) // sw\n        cols = np.zeros(shape=(out_h * out_w, kh * kw * X.shape[3]))\n        for n in range(X.shape[0]):\n            for h in range(out_h):\n                for w in range(out_w):\n                    h_start = h * sh\n                    w_start = w * sw\n                    kernel_region = []\n                    for i in range(kh):\n                        for j in range(kw):\n                            kr = h_start + i * (dl + 1)\n                            kc = w_start + j * (dl + 1)\n                            if kr < 0 or kr >= X.shape[1] or kc < 0 or (kc >= X.shape[2]):\n                                continue\n                            kernel_region.extend(X[n, kr, kc, :])\n                    cols[h * out_w + w, :] = np.array(kernel_region)\n        return cols\n    pd = (top_pad, bot_pad, left_pad, right_pad)\n    cols = im2col(X_padded, kernel_h, kernel_w, stride, stride, pd, dilation)\n    W_flat = np.reshape(W, (kernel_h * kernel_w * in_ch, out_ch))\n    out = W_flat.T @ cols.T\n    out = out.T\n    out = out.reshape(out_h, out_w, out_ch, n_ex)\n    out = out.transpose(3, 0, 1, 2)\n    return out.tolist()\nX = np.random.randn(2, 5, 5, 3)\nW = np.random.randn(3, 3, 3, 8)"}
{"task_id": 354, "completion_id": 5, "solution": "import numpy as np"}
{"task_id": 354, "completion_id": 6, "solution": "import numpy as np\ndef conv2D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_h, in_w, in_ch) = X.shape\n    (k_h, k_w, _, out_ch) = W.shape\n    dilated_k_h = k_h + (k_h - 1) * dilation\n    dilated_k_w = k_w + (k_w - 1) * dilation\n    if isinstance(pad, str) and pad.lower() == 'same':\n        pad_h = ((in_h - 1) * stride + dilated_k_h - in_h) // 2\n        pad_w = ((in_w - 1) * stride + dilated_k_w - in_w) // 2\n        pad = (pad_h, pad_h, pad_w, pad_w)\n    elif isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad = (pad[0], pad[0], pad[1], pad[1])\n    (pad_top, pad_bottom, pad_left, pad_right) = pad\n    padded_h = in_h + pad_top + pad_bottom\n    padded_w = in_w + pad_left + pad_right\n    out_h = (padded_h - dilated_k_h) // stride + 1\n    out_w = (padded_w - dilated_k_w) // stride + 1\n    X_padded = np.pad(X, ((0, 0), (pad_top, pad_bottom), (pad_left, pad_right), (0, 0)), 'constant')\n    Y = np.zeros((n_ex, out_h, out_w, out_ch))\n    for example_idx in range(n_ex):\n        X_col = np.zeros((in_ch, out_h * out_w, k_h * k_w))\n        for i in range(out_h):\n            for j in range(out_w):\n                start_h = i * stride\n                start_w = j * stride\n                roi_h_start = start_h - dilation\n                roi_w_start = start_w - dilation\n                roi_h_end = start_h + k_h * dilation + 1\n                roi_w_end = start_w + k_w * dilation + 1\n                region = X_padded[example_idx, roi_h_start:roi_h_end:dilation + 1, roi_w_start:roi_w_end:dilation + 1, :]\n                X_col[:, i * out_w + j, :] = region.reshape(-1)\n        W_row = W.reshape(-1, k_h * k_w, out_ch)\n        A = X_col.reshape(-1, k_h * k_w)\n        B = W_row.reshape(k_h * k_w, out_ch)\n        Y_col = A @ B\n        Y[example_idx] = Y_col.reshape(out_h, out_w, out_ch)\n    return Y.tolist()"}
{"task_id": 354, "completion_id": 7, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, in_ch, out_ch) = W.shape\n    if isinstance(pad, int):\n        (pr1, pr2) = (pad, pad)\n        (pc1, pc2) = (pad, pad)\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            (pr1, pr2) = (pad[0], pad[0])\n            (pc1, pc2) = (pad[1], pad[1])\n        elif len(pad) == 4:\n            (pr1, pr2, pc1, pc2) = pad\n        else:\n            raise ValueError('Invalid padding tuple length.')\n    elif isinstance(pad, str) and pad.lower() == 'same':\n        pad_rows = (in_rows - 1) * stride - in_rows + (kernel_rows - 1) * (dilation + 1) + 1\n        pad_cols = (in_cols - 1) * stride - in_cols + (kernel_cols - 1) * (dilation + 1) + 1\n        pr1 = pad_rows // 2\n        pr2 = pad_rows - pr1\n        pc1 = pad_cols // 2\n        pc2 = pad_cols - pc1\n    else:\n        pass\n    X_padded = np.pad(X, ((0, 0), (pr1, pr2), (pc1, pc2), (0, 0)), mode='constant')\n    (padded_rows, padded_cols) = (X_padded.shape[1], X_padded.shape[2])\n    out_rows = int((padded_rows - (kernel_rows + (kernel_rows - 1) * dilation)) / stride + 1)\n    out_cols = int((padded_cols - (kernel_cols + (kernel_cols - 1) * dilation)) / stride + 1)\n    kernel_grid = np.array(np.indices((kernel_rows, kernel_cols))).transpose(1, 2, 0)[::-1, :, :]\n    overlap = (kernel_rows + (kernel_rows - 1) * dilation, kernel_cols + (kernel_cols - 1) * dilation)\n    r_indices = np.arange(0, padded_rows - overlap[0], stride)\n    c_indices = np.arange(0, padded_cols - overlap[1], stride)\n    im2col = np.zeros((n_ex * out_rows * out_cols, kernel_rows * kernel_cols * in_ch))\n    patch_idx = 0\n    for i in range(n_ex):\n        for r in r_indices:\n            for c in range(len(c_indices)):\n                r_kernel = kernel_grid[..., 0]\n                c_kernel = kernel_grid[..., 1]\n                x_grid = []\n                y_grid = []\n                ch = []\n                for dr in range(kernel_rows):\n                    for dc in range(kernel_cols):\n                        if dilation > 0:\n                            actual_r = r + r_kernel[dr, dc] * (dilation + 1)\n                            actual_c = c + c_kernel[dr, dc] * (dilation + 1)\n                        else:\n                            actual_r = r + r_kernel[dr, dc]\n                            actual_c = c + c_kernel[dr, dc]\n                        x_grid.extend([actual_r] * kernel_cols * in_ch)\n                        y_grid.extend([actual_c] * kernel_rows * in_ch)\n                        ch.extend(([ch_idx] * kernel_rows * kernel_cols for ch_idx in range(in_ch)))\n                        im2col[patch_idx, ...] = X[i, actual_r, actual_c, :].flatten()\n                        patch_idx += 1\n    weight_matrix = W.reshape(-1, out_ch)\n    output = np.dot(im2col, weight_matrix)\n    output = output.reshape(n_ex, out_rows, out_cols, out_ch)\n    return output.tolist()"}
{"task_id": 354, "completion_id": 8, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape (n_ex, in_rows, in_cols, in_ch) representing the input batch.\n        W: NumPy array of shape (kernel_rows, kernel_cols, in_ch, out_ch) containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string 'same'.\n        dilation: Optional dilation factor. 0 corresponds to a normal convolution.\n\n    Returns:\n        The convolution result as a Python list through numpy.ndarray.tolist().\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (k_rows, k_cols, _, out_ch) = W.shape\n    k_rows_eff = k_rows + (k_rows - 1) * dilation\n    k_cols_eff = k_cols + (k_cols - 1) * dilation\n    if isinstance(pad, int):\n        (pad_top, pad_bottom, pad_left, pad_right) = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            (pad_top, pad_bottom) = (pad[0], pad[0])\n            (pad_left, pad_right) = (pad[1], pad[1])\n        elif len(pad) == 4:\n            (pad_top, pad_bottom) = (pad[0], pad[1])\n            (pad_left, pad_right) = (pad[2], pad[3])\n        else:\n            raise ValueError('When pad is a tuple, it should be of length 2 or 4')\n    elif pad == 'same':\n        out_rows = (in_rows + stride - 1) // stride\n        out_cols = (in_cols + stride - 1) // stride\n        pad_rows_needed = max(0, (out_rows - 1) * stride + k_rows_eff - in_rows)\n        pad_cols_needed = max(0, (out_cols - 1) * stride + k_cols_eff - in_cols)\n        pr1 = pad_rows_needed // 2\n        pr2 = pad_rows_needed - pr1\n        pc1 = pad_cols_needed // 2\n        pc2 = pad_cols_needed - pc1\n        (pad_top, pad_bottom) = (pr1, pr2)\n        (pad_left, pad_right) = (pc1, pc2)\n    else:\n        raise ValueError('Invalid padding specification')\n    X_padded = np.pad(X, ((0, 0), (pad_top, pad_bottom), (pad_left, pad_right), (0, 0)), mode='constant')\n    out_rows = (in_rows + pad_top + pad_bottom - k_rows_eff) // stride + 1\n    out_cols = (in_cols + pad_left + pad_right - k_cols_eff) // stride + 1\n    i_cols = np.arange(out_rows) * stride\n    j_cols = np.arange(out_cols) * stride\n    i_k = np.arange(k_rows).repeat(k_cols) * (dilation + 1)\n    j_k = np.tile(np.arange(k_cols) * (dilation + 1), k_rows)\n    i0 = i_cols[:, np.newaxis] + i_k[np.newaxis, :]\n    j0 = j_cols[:, np.newaxis] + j_k[np.newaxis, :]\n    i0 = i0[..., np.newaxis]\n    j0 = j0[..., np.newaxis]\n    (ii, jj) = np.meshgrid(i0, j0, indexing='ij')\n    idx = np.arange(n_ex)[:, np.newaxis, np.newaxis, np.newaxis]\n    ch = np.arange(in_ch)[np.newaxis, np.newaxis, :, np.newaxis]\n    cols = X_padded[idx, ii, jj, ch]\n    cols = cols.transpose((0, 1, 2, 4, 3)).reshape((n_ex, out_rows, out_cols, -1))\n    W_flat = W.reshape((-1, out_ch))\n    Y_flat = np.einsum('noic,co->noci', cols, W_flat)\n    output = Y_flat.reshape((n_ex, out_rows, out_cols, out_ch))\n    return output.tolist()"}
{"task_id": 354, "completion_id": 9, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (k_rows, k_cols, in_ch_w, out_ch) = W.shape\n    assert in_ch == in_ch_w, 'Input channels of X and W must match'\n    if isinstance(pad, int):\n        top = pad\n        bottom = pad\n        left = pad\n        right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        top = pad[0]\n        bottom = pad[0]\n        left = pad[1]\n        right = pad[1]\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        (top, bottom, left, right) = pad\n    elif pad == 'same':\n        out_size_r = int(np.ceil(in_rows / stride))\n        out_size_c = int(np.ceil(in_cols / stride))\n        pdim_r = max((out_size_r - 1) * stride + k_rows - in_rows, 0)\n        pdim_c = max((out_size_c - 1) * stride + k_cols - in_cols, 0)\n        top = pdim_r // 2\n        bottom = pdim_r - top\n        left = pdim_c // 2\n        right = pdim_c - left\n    else:\n        top = 0\n        bottom = 0\n        left = 0\n        right = 0\n    padding = ((0, 0), (top, bottom), (left, right), (0, 0))\n    X_padded = np.pad(X, pad_width=padding, mode='constant', constant_values=0)\n    k_rows_ = k_rows + (k_rows - 1) * dilation\n    k_cols_ = k_cols + (k_cols - 1) * dilation\n    out_rows = int((in_rows + top + bottom - k_rows_ + stride) / stride)\n    out_cols = int((in_cols + left + right - k_cols_ + stride) / stride)\n    X_col = im2col_indices(X_padded, k_rows, k_cols, padding=0, stride=stride, dilation=dilation)\n    W_row = W.reshape(-1, out_ch)\n    out = W_row @ X_col\n    out = out.reshape(out_ch, n_ex, out_rows, out_cols)\n    out = out.transpose(1, 2, 3, 0)\n    return out.tolist()\ndef im2col_indices(X, k_rows, k_cols, pad=0, stride=1, dilation=0):\n    \"\"\"Transform image into columns with indices using strides for efficiency.\"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    k_rows_ = k_rows + (k_rows - 1) * dilation\n    k_cols_ = k_cols + (k_cols - 1) * dilation\n    out_rows = int((in_rows - k_rows_ + 2 * pad + stride) / stride)\n    out_cols = int((in_cols - k_cols_ + 2 * pad + stride) / stride)\n    X_strides = X.strides\n    out_shape = (n_ex, in_ch, k_rows * k_cols, out_rows, out_cols)\n    out_strides = (X_strides[0], X_strides[3], X_strides[1], X_strides[1] * stride, X_strides[2] * stride)\n    window_strides = (X_strides[1] * dilation, X_strides[2] * dilation)\n    if dilation > 0:\n        X = X[:, ::dilation + 1, ::dilation + 1, :]\n    try:\n        from numpy.lib.stride_tricks import as_strided\n        X_col = as_strided(X, shape=out_shape, strides=out_strides)\n    except:\n        X_col = np.zeros(out_shape)\n        for i in range(out_rows):\n            for j in range(out_cols):\n                vr = i * stride\n                vc = j * stride\n                for r in range(k_rows):\n                    for c in range(k_cols):\n                        X_col[:, :, r * k_cols + c, i, j] = X[:, vr + r * (dilation + 1), vc + c * (dilation + 1), :].squeeze()\n    X_col = X_col.transpose(0, 3, 4, 1, 2).reshape(-1, k_rows * k_cols * in_ch)\n    return X_col"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    data_centred = data - data.mean(axis=0)\n    (n_samples, n_features) = data_centred.shape\n    n_components = min(n_components, n_features)\n    if solver == 'svd':\n        (U, S, Vh) = np.linalg.svd(data_centred, full_matrices=False)\n        components = Vh[:n_components]\n        explained_variance = S[:n_components] ** 2 / (n_samples - 1)\n    elif solver == 'eigen':\n        cov_matrix = np.cov(data_centred, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n        idx = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[idx]\n        eigenvectors = eigenvectors[:, idx]\n        components = eigenvectors[:, :n_components]\n        explained_variance = eigenvalues[:n_components]\n    else:\n        raise ValueError(f\"Invalid solver: {solver}. Use 'svd' or 'eigen'.\")\n    for i in range(n_components):\n        non_zero_indices = np.where(np.abs(components[i, :]) > 1e-10)[0]\n        if non_zero_indices.size > 0:\n            first_non_zero_index = non_zero_indices[0]\n            if components[i, first_non_zero_index] < 0:\n                components[i, :] *= -1\n    scores = np.dot(data_centred, components.T)\n    explained_variance_ratio = explained_variance / explained_variance.sum()\n    scores_rounded = [list(np.round(sample, 4)) for sample in scores]\n    explained_variance_ratio_rounded = [round(var, 4) for var in explained_variance_ratio]\n    return (scores_rounded, explained_variance_ratio_rounded)"}
{"task_id": 355, "completion_id": 1, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    assert solver in ('svd', 'eigen'), \"solver must be 'svd' or 'eigen'\"\n    data_centered = data - data.mean(axis=0)\n    (n_samples, n_features) = data_centered.shape\n    if n_components > n_features:\n        n_components = n_features\n    if solver == 'svd':\n        (U, S, Vt) = np.linalg.svd(data_centered, full_matrices=False)\n        components = Vt.T\n        explained_variance = S ** 2\n    else:\n        covariance_matrix = np.cov(data_centered, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(covariance_matrix)\n        idx = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[idx]\n        eigenvectors = eigenvectors[:, idx]\n        components = eigenvectors\n        explained_variance = eigenvalues\n    for i in range(n_components):\n        idx = np.argmax(np.abs(components[:, i]) > 1e-12)\n        if components[idx, i] < 0:\n            components[:, i] *= -1\n    scores = data_centered @ components[:, :n_components]\n    total_variance = np.sum(explained_variance)\n    explained_variance_ratio = (explained_variance[:n_components] / total_variance).tolist()\n    scores = np.round(scores, 4).tolist()\n    explained_variance_ratio = [round(r, 4) for r in explained_variance_ratio]\n    return (scores, explained_variance_ratio)"}
{"task_id": 355, "completion_id": 2, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    centered_data = data - np.mean(data, axis=0)\n    (n_samples, n_features) = centered_data.shape\n    if n_components > n_features:\n        n_components = n_features\n    if solver == 'svd':\n        (U, S, Vt) = np.linalg.svd(centered_data, full_matrices=False)\n        components = Vt\n        explained_variance = S ** 2 / (n_samples - 1)\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        (eig_values, eig_vectors) = np.linalg.eigh(cov_matrix)\n        eig_values = np.nan_to_num(eig_values)\n        eig_vectors = eig_vectors[:, np.argsort(eig_values)[::-1]]\n        eig_values = np.sort(eig_values)[::-1]\n        components = eig_vectors\n        explained_variance = eig_values / np.sum(eig_values)\n    else:\n        raise ValueError(\"Invalid solver. Use 'svd' or 'eigen'.\")\n    components = components[:, :n_components]\n    explained_variance = explained_variance[:n_components]\n    for i in range(components.shape[1]):\n        nonzero_idx = np.where(np.abs(components[:, i]) > 1e-10)[0]\n        if nonzero_idx.size > 0:\n            if components[nonzero_idx[0], i] < 0:\n                components[:, i] *= -1\n                explained_variance[i]\n    scores = centered_data @ components\n    scores_rounded = np.round(scores, decimals=4).tolist()\n    explained_variance_ratio = np.round(explained_variance, decimals=4).tolist()\n    return (scores_rounded, explained_variance_ratio)"}
{"task_id": 355, "completion_id": 3, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    data = np.array(data)\n    (n_samples, n_features) = data.shape\n    mean = data.mean(axis=0)\n    centered_data = data - mean\n    if solver == 'svd':\n        (U, S, VT) = np.linalg.svd(centered_data, full_matrices=False)\n        components = VT.T\n    elif solver == 'eigen':\n        cov = np.cov(centered_data, rowvar=False, ddof=1)\n        (eigvals, eigvecs) = np.linalg.eigh(cov)\n        components = eigvecs\n        idx = eigvals.argsort()[::-1]\n        eigvals = eigvals[idx]\n        components = components[:, idx]\n    else:\n        raise ValueError(\"Solver must be 'svd' or 'eigen'.\")\n    n_components = min(n_components, n_features)\n    components = components[:, :n_components]\n    if solver == 'svd':\n        total_variance = np.sum(S ** 2)\n        explained_variance = S[:n_components] ** 2 / total_variance\n    elif solver == 'eigen':\n        total_variance = np.sum(eigvals)\n        explained_variance = eigvals[:n_components] / total_variance\n    explained_variance_ratio = list(np.round(explained_variance, 4))\n    for i in range(components.shape[1]):\n        idx = np.argmax(np.abs(components[:, i]) > 1e-10)\n        if idx < components.shape[0] and components[idx, i] < 0:\n            components[:, i] = -components[:, i]\n    scores = np.dot(centered_data, components)\n    scores = np.round(scores, 4).tolist()\n    explained_variance_ratio = list(np.round(explained_variance_ratio, 4))\n    return (scores, explained_variance_ratio)\ndata = np.array([[1.0, 2.0], [2.0, 3.0], [3.0, 4.0]])"}
{"task_id": 355, "completion_id": 4, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratio corresponding to the kept\n          components.\n    \"\"\"\n    data_centered = data - data.mean(axis=0)\n    if solver == 'svd':\n        (_, s, Vh) = np.linalg.svd(data_centered, full_matrices=False)\n        eigenvalues = s ** 2 / (data.shape[0] - 1)\n        eigenvectors = Vh.T\n    elif solver == 'eigen':\n        cov_matrix = np.cov(data_centered, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    else:\n        raise ValueError(\"Invalid solver. Choose 'svd' or 'eigen'.\")\n    sort_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sort_indices]\n    eigenvectors = eigenvectors[:, sort_indices]\n    n_features = eigenvectors.shape[0]\n    for i in range(eigenvectors.shape[1]):\n        idx = np.where(eigenvectors[:, i] != 0)[0]\n        if idx.size > 0:\n            if eigenvectors[idx[0], i] < 0:\n                eigenvectors[:, i] *= -1\n        else:\n            pass\n    n_components = min(n_components, eigenvectors.shape[1])\n    selected_eigenvalues = eigenvalues[:n_components]\n    selected_eigenvectors = eigenvectors[:, :n_components]\n    scores = np.dot(data_centered, selected_eigenvectors)\n    total_variance = np.sum(eigenvalues)\n    explained_variance_ratio = np.round(selected_eigenvalues / total_variance, decimals=4).tolist()\n    scores = np.round(scores, decimals=4).tolist()\n    return (scores, explained_variance_ratio)"}
{"task_id": 355, "completion_id": 5, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    data_centered = data - data.mean(axis=0)\n    (n_samples, n_features) = data_centered.shape\n    n_components = min(n_components, n_features)\n    if solver == 'svd':\n        (U, S, Vt) = np.linalg.svd(data_centered, full_matrices=False)\n        components = Vt\n        explained_variance = S ** 2 / (n_samples - 1)\n    elif solver == 'eigen':\n        cov_matrix = np.cov(data_centered, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n        indices = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[indices]\n        components = eigenvectors[:, indices]\n        explained_variance = eigenvalues / np.sum(eigenvalues)\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'\")\n    components = components[:, :n_components]\n    explained_variance = explained_variance[:n_components]\n    for i in range(components.shape[1]):\n        idx = np.where(components[:, i] != 0)[0]\n        if idx.size > 0 and components[idx[0], i] < 0:\n            components[:, i] *= -1\n    scores = np.dot(data_centered, components)\n    for i in range(n_components):\n        if components[:, i][0] < 0:\n            scores[:, i] *= -1\n    scores = np.round(scores, 4).tolist()\n    explained_variance_ratio = np.round(explained_variance, 4).tolist()\n    return (scores, explained_variance_ratio)"}
{"task_id": 355, "completion_id": 6, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n    \n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    if solver not in ['svd', 'eigen']:\n        raise ValueError(f\"Unsupported solver: {solver}. Use 'svd' or 'eigen'.\")\n    data_centered = data - data.mean(axis=0)\n    if solver == 'svd':\n        (U, S, Vt) = np.linalg.svd(data_centered, full_matrices=False)\n        components = Vt.T\n        explained_variance = S ** 2 / (data.shape[0] - 1)\n    elif solver == 'eigen':\n        covariance_matrix = np.cov(data_centered, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(covariance_matrix)\n        idx = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[idx]\n        eigenvectors = eigenvectors[:, idx]\n        components = eigenvectors\n        total_variance = np.sum(eigenvalues)\n        explained_variance = eigenvalues / total_variance\n    else:\n        raise ValueError('Unsupported solver.')\n    n_features = data.shape[1]\n    n_components = min(n_components, n_features)\n    components = components[:, :n_components]\n    explained_variance = explained_variance[:n_components]\n    for i in range(components.shape[0]):\n        non_zero_idx = np.argmax(np.abs(components[i]) > 1e-10)\n        if non_zero_idx < components.shape[0] and components[i, non_zero_idx] < 0:\n            components[i] *= -1\n    scores = np.dot(data_centered, components)\n    scores_rounded = np.round(scores, 4).tolist()\n    explained_variance_ratio = np.round(explained_variance, 4).tolist()\n    return (scores_rounded, explained_variance_ratio)"}
{"task_id": 355, "completion_id": 7, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        - The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        - The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    data_centered = data - data.mean(axis=0)\n    (n_samples, n_features) = data_centered.shape\n    if n_components > n_features:\n        n_components = n_features\n    if solver == 'svd':\n        (U, S, Vt) = np.linalg.svd(data_centered, full_matrices=False)\n        eigen_values = S ** 2 / (n_samples - 1)\n        eigen_vectors = Vt.T\n    elif solver == 'eigen':\n        cov_matrix = np.cov(data_centered, rowvar=False, ddof=1)\n        (eigen_values, eigen_vectors) = np.linalg.eigh(cov_matrix)\n    else:\n        raise ValueError(\"Solver must be 'svd' or 'eigen'\")\n    indices = np.argsort(eigen_values)[::-1]\n    sorted_eigen_values = eigen_values[indices]\n    sorted_eigen_vectors = eigen_vectors[:, indices]\n    eigen_values_kept = sorted_eigen_values[:n_components]\n    eigen_vectors_kept = sorted_eigen_vectors[:, :n_components]\n    for i in range(eigen_vectors_kept.shape[1]):\n        direction = eigen_vectors_kept[:, i]\n        first_non_zero_index = np.argmax(np.abs(direction) != 0)\n        if direction[first_non_zero_index] < 0:\n            eigen_vectors_kept[:, i] *= -1\n    scores = np.dot(data_centered, eigen_vectors_kept)\n    total_variance = np.sum(sorted_eigen_values)\n    explained_variance_ratio = [ev / total_variance for ev in eigen_values_kept]\n    scores_rounded = scores.round(4).tolist()\n    explained_variance_ratio_rounded = [round(ev, 4) for ev in explained_variance_ratio]\n    return (scores_rounded, explained_variance_ratio_rounded)"}
{"task_id": 355, "completion_id": 8, "solution": "import numpy as np\nfrom typing import Tuple, List\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> Tuple[List[List[float]], List[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    data_centered = data - data.mean(axis=0)\n    (n_samples, n_features) = data.shape\n    max_components = min(n_samples, n_features)\n    n_components = min(n_components, max_components)\n    if solver == 'svd':\n        (U, S, Vt) = np.linalg.svd(data_centered, full_matrices=False)\n        components = Vt\n        explained_variance = S ** 2\n    elif solver == 'eigen':\n        cov_matrix = np.cov(data_centered, rowvar=False, ddof=1)\n        (eigen_values, eigen_vectors) = np.linalg.eigh(cov_matrix)\n        idx = np.argsort(eigen_values)[::-1]\n        eigen_values = eigen_values[idx]\n        eigen_vectors = eigen_vectors[:, idx]\n        components = eigen_vectors\n        explained_variance = eigen_values\n    else:\n        raise ValueError(\"solver must be either 'svd' or 'eigen'\")\n    components = components[:, :n_components]\n    explained_variance = explained_variance[:n_components]\n    for i in range(components.shape[1]):\n        first_non_zero_idx = 0\n        while np.isclose(components[first_non_zero_idx, i], 0):\n            first_non_zero_idx += 1\n        if components[first_non_zero_idx, i] < 0:\n            components[:, i] *= -1\n    scores = np.dot(data_centered, components)\n    total_variance = np.sum(explained_variance)\n    explained_variance_ratio = explained_variance / total_variance\n    explained_variance_ratio = np.round(explained_variance_ratio, 4)\n    scores = np.round(scores, 4).tolist()\n    explained_variance_ratio = explained_variance_ratio.tolist()\n    return (scores, explained_variance_ratio)"}
{"task_id": 355, "completion_id": 9, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    data_centered = data - data.mean(axis=0)\n    (n_samples, n_features) = data.shape\n    components = None\n    if solver == 'svd':\n        (U, S, Vt) = np.linalg.svd(data_centered, full_matrices=False)\n        components = Vt\n        total_variance = np.var(data_centered, axis=0, ddof=1).sum()\n        explained_variance = S ** 2 / (n_samples - 1)\n    elif solver == 'eigen':\n        cov_mat = np.cov(data_centered, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_mat)\n        idx = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[idx]\n        eigenvectors = eigenvectors[:, idx]\n        components = eigenvectors\n        total_variance = np.var(data_centered, axis=0, ddof=1).sum()\n        explained_variance = eigenvalues / total_variance\n    else:\n        raise ValueError(\"Invalid solver. Choose from 'svd' or 'eigen'.\")\n    n_components = min(n_components, n_features)\n    components = components[:, :n_components]\n    explained_variance = explained_variance[:n_components]\n    for i in range(components.shape[1]):\n        col = components[:, i]\n        first_non_zero = col[np.abs(col) > np.finfo(float).eps].copy()\n        if not len(first_non_zero):\n            continue\n        if first_non_zero[0] < 0:\n            components[:, i] *= -1\n            explained_variance[i] *= -1\n    scores = np.dot(data_centered, components)\n    scores = scores.round(4).tolist()\n    explained_variance_ratio = explained_variance.round(4).tolist()\n    return (scores, explained_variance_ratio)"}
{"task_id": 356, "completion_id": 0, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return leaf.value.index(max(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 1, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return max(enumerate(leaf.value), key=lambda x: x[1])[0]\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 2, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return max(range(len(leaf.value)), key=lambda i: (leaf.value[i], -i))\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 3, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return max(range(len(leaf.value)), key=lambda i: (leaf.value[i], -i))\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 4, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return max(range(len(leaf.value)), key=lambda i: (leaf.value[i], -i))\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 5, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return leaf.value.index(max(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 6, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return max(enumerate(leaf.value), key=lambda x: x[1])[0]\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 7, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return max(range(len(leaf.value)), key=lambda i: (leaf.value[i], -i))\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 8, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return max(enumerate(leaf.value), key=lambda x: x[1])[0]\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 9, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return max(range(len(leaf.value)), key=lambda i: leaf.value[i])\n    else:\n        return leaf.value"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> List[List[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    List[List[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centroids = data[:K].copy()\n    prev_centroids = np.zeros((K, n_features))\n    for _ in range(max_iters):\n        distances = np.linalg.norm(data[:, np.newaxis, :] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.zeros((K, n_features))\n        for i in range(K):\n            cluster_points = data[labels == i]\n            if cluster_points.size > 0:\n                new_centroids[i] = cluster_points.mean(axis=0)\n            else:\n                new_centroids[i] = centroids[i]\n        if np.allclose(new_centroids, centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    centroids = np.round(centroids, 4)\n    centroids = sorted(centroids.tolist(), key=lambda x: [float(f) for f in x])\n    return centroids\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [9, 8], [8, 9]])\nK = 2"}
{"task_id": 357, "completion_id": 1, "solution": "import numpy as np\nimport numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centroids = data[:K, :].copy()\n    for _ in range(max_iters):\n        clusters = [[] for _ in range(K)]\n        for x in data:\n            distances = [np.linalg.norm(x - c) for c in centroids]\n            closest_centroid_index = np.argmin(distances)\n            clusters[closest_centroid_index].append(x)\n        new_centroids = centroids.copy()\n        for i in range(K):\n            if clusters[i]:\n                new_centroids[i] = np.mean(clusters[i], axis=0)\n        if np.linalg.norm(new_centroids - centroids) < 1e-06:\n            break\n        centroids = new_centroids\n    result = [list(c) for c in centroids]\n    result.sort(key=lambda x: tuple(x))\n    result = [[round(val, 4) for val in point] for point in result]\n    return result\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [9, 8], [8, 9]])\nK = 2"}
{"task_id": 357, "completion_id": 2, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        (n_samples, n_features) = data.shape\n        cluster_indices = np.zeros(n_samples, dtype=int)\n        for i in range(n_samples):\n            distances = np.linalg.norm(data[i] - centroids, axis=1)\n            cluster_indices[i] = np.argmin(distances)\n        new_centroids = centroids.copy()\n        for k in range(K):\n            points_in_cluster = data[cluster_indices == k]\n            if len(points_in_cluster) > 0:\n                new_centroids[k] = np.mean(points_in_cluster, axis=0)\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    centroids = np.round(centroids, 4).tolist()\n    centroids.sort()\n    return centroids"}
{"task_id": 357, "completion_id": 3, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if K > n_samples:\n        raise ValueError('Number of clusters (K) must not exceed number of samples.')\n    centroids = data[:K, :].copy()\n    for _ in range(max_iters):\n        clusters = [[] for _ in range(K)]\n        for sample in data:\n            distances = [np.sum((sample - centroid) ** 2) for centroid in centroids]\n            closest = np.argmin(distances)\n            clusters[closest].append(sample)\n        new_centroids = []\n        for i in range(K):\n            if not clusters[i]:\n                new_centroids.append(centroids[i])\n            else:\n                new_centroids.append(np.mean(clusters[i], axis=0))\n        new_centroids = np.array(new_centroids)\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    centroids = np.round(centroids, 4)\n    centroids = centroids.tolist()\n    centroids.sort()\n    return centroids"}
{"task_id": 357, "completion_id": 4, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    (n_samples, d_features) = data.shape\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        distances = np.zeros((n_samples, K))\n        for i in range(K):\n            distances[:, i] = np.sum((data - centroids[i]) ** 2, axis=1)\n        cluster_indices = np.argmin(distances, axis=1)\n        prev_centroids = centroids.copy()\n        new_centroids = []\n        for i in range(K):\n            cluster_points = data[cluster_indices == i]\n            if cluster_points.shape[0] > 0:\n                new_centroids.append(np.mean(cluster_points, axis=0))\n            else:\n                new_centroids.append(prev_centroids[i])\n        centroids = np.array(new_centroids)\n        diff = np.linalg.norm(centroids - prev_centroids)\n        if diff < 1e-06:\n            break\n    centroids = np.round(centroids, 4)\n    centroid_indices = np.lexsort(tuple((centroids[:, i] for i in range(centroids.shape[1] - 1, -1, -1))))\n    sorted_centroids = centroids[centroid_indices]\n    return [list(centroid) for centroid in sorted_centroids]"}
{"task_id": 357, "completion_id": 5, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        cluster_indices = []\n        for point in data:\n            distances = np.sqrt(np.sum((point - centroids) ** 2, axis=1))\n            cluster_idx = np.argmin(distances)\n            cluster_indices.append(cluster_idx)\n        new_centroids = centroids.copy()\n        for i in range(K):\n            cluster_points = data[np.array(cluster_indices) == i]\n            if len(cluster_points) == 0:\n                new_centroids[i] = centroids[i]\n            else:\n                new_centroids[i] = np.mean(cluster_points, axis=0)\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    sorted_centroids = np.array(sorted(centroids.tolist()))\n    rounded_centroids = [[round(coord, 4) for coord in point] for point in sorted_centroids]\n    return rounded_centroids"}
{"task_id": 357, "completion_id": 6, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        distances = np.sqrt(((data[:, np.newaxis, :] - centroids) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.copy(centroids)\n        for i in range(K):\n            points_in_cluster = data[labels == i]\n            if len(points_in_cluster) > 0:\n                new_centroids[i] = np.mean(points_in_cluster, axis=0)\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    centroids = np.array(centroids)\n    centroids = np.round(centroids, 4)\n    centroids = centroids[np.lexsort(centroids[:, ::-1].T)]\n    return centroids.tolist()"}
{"task_id": 357, "completion_id": 7, "solution": "import numpy as np\nimport numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    (n_samples, d_features) = data.shape\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.copy(centroids)\n        for i in range(K):\n            if np.any(labels == i):\n                new_centroids[i] = np.mean(data[labels == i], axis=0)\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    centroids = np.round(centroids, 4)\n    centroids = sorted(map(list, centroids))\n    return centroids\ndata = np.array([[1.0, 1.0], [1.0, 2.0], [2.0, 1.0], [8.0, 8.0], [9.0, 8.0], [8.0, 9.0]])\nK = 2"}
{"task_id": 357, "completion_id": 8, "solution": "import numpy as np\nimport numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n    \n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n    \n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centroids = data[:K, :].copy()\n    prev_centroids = centroids.copy()\n    centroid_indices = np.zeros(n_samples, dtype=int)\n    TOLERANCE = 1e-06\n    for _ in range(max_iters):\n        distances = np.sqrt(((data[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2).sum(axis=2))\n        centroid_indices = np.argmin(distances, axis=1)\n        updated_centroids = np.zeros_like(centroids)\n        cluster_sizes = np.zeros(K, dtype=int)\n        for i in range(n_samples):\n            cluster_id = centroid_indices[i]\n            updated_centroids[cluster_id] += data[i]\n            cluster_sizes[cluster_id] += 1\n        for i in range(K):\n            if cluster_sizes[i] > 0:\n                updated_centroids[i] /= cluster_sizes[i]\n        centroid_diff = np.sqrt(((updated_centroids - prev_centroids) ** 2).sum())\n        if centroid_diff < TOLERANCE:\n            break\n        centroids = updated_centroids\n    sorted_centroids = np.round(centroids, decimals=4)\n    sorted_centroids = sorted(sorted_centroids, key=lambda x: [float(val) for val in x])\n    return sorted_centroids\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [9, 8], [8, 9]])\nK = 2"}
{"task_id": 357, "completion_id": 9, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centroids = data[:K, :].copy()\n    for _ in range(max_iters):\n        distances = np.zeros((n_samples, K))\n        for i in range(K):\n            distances[:, i] = np.linalg.norm(data - centroids[i], axis=1)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = centroids.copy()\n        for i in range(K):\n            cluster_points = data[labels == i]\n            if cluster_points.shape[0] > 0:\n                new_centroids[i] = np.mean(cluster_points, axis=0)\n        if np.linalg.norm(new_centroids - centroids) < 1e-06:\n            break\n        centroids = new_centroids\n    centroids_list = centroids.tolist()\n    centroids_list.sort()\n    return [[round(x, 4) for x in cent] for cent in centroids_list]"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | np.ndarray) -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation. If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = matrix.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    matrix = matrix / row_sums[:, np.newaxis]\n    return np.round(matrix, 4).tolist()"}
{"task_id": 362, "completion_id": 1, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation. If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = matrix.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    matrix = matrix / row_sums[:, np.newaxis]\n    result = np.round(matrix, 4).tolist()\n    return result"}
{"task_id": 362, "completion_id": 2, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    mat = np.array(data, dtype=float)\n    row_sums = mat.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    mat_normalized = mat / row_sums[:, np.newaxis]\n    return np.round(mat_normalized, 4).tolist()"}
{"task_id": 362, "completion_id": 3, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = matrix.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    matrix = matrix / row_sums[:, np.newaxis]\n    return matrix.round(4).tolist()"}
{"task_id": 362, "completion_id": 4, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    if matrix.ndim != 2:\n        raise ValueError('Input must be a 2-D structure.')\n    row_sums = matrix.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    matrix = matrix / row_sums[:, np.newaxis]\n    matrix = np.round(matrix, 4)\n    return matrix.tolist()"}
{"task_id": 362, "completion_id": 5, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = matrix.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    matrix = matrix / row_sums[:, np.newaxis]\n    matrix = np.round(matrix, 4)\n    return matrix.tolist()"}
{"task_id": 362, "completion_id": 6, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation. If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = matrix.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    matrix = matrix / row_sums[:, np.newaxis]\n    matrix_rounded = np.round(matrix, 4)\n    return matrix_rounded.tolist()"}
{"task_id": 362, "completion_id": 7, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    array = np.array(data, dtype=float)\n    row_sums = array.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    normalized_array = array / row_sums[:, np.newaxis]\n    rounded_array = np.round(normalized_array, 4)\n    return rounded_array.tolist()"}
{"task_id": 362, "completion_id": 8, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation. If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    arr = np.array(data, dtype=float)\n    row_sums = arr.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    for i in range(arr.shape[0]):\n        arr[i, :] /= row_sums[i]\n    return np.round(arr, 4).tolist()"}
{"task_id": 362, "completion_id": 9, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation. If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    array = np.array(data, dtype=float)\n    row_sums = array.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    stochastic_matrix = array / row_sums[:, np.newaxis]\n    rounded_matrix = np.round(stochastic_matrix, 4)\n    return rounded_matrix.tolist()"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n\n    def check_space(space: Space, is_tuple_space: bool) -> bool:\n        if is_tuple_space:\n            if isinstance(space, Tuple):\n                return all((isinstance(s, Box) for s in space.spaces))\n            elif isinstance(space, Dict):\n                return all((isinstance(s, Box) for s in space.spaces.values()))\n            else:\n                return False\n        else:\n            return isinstance(space, Box)\n    cont_action = check_space(env.action_space, tuple_action)\n    cont_obs = check_space(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 1, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def _check_continuous(space: Space, is_composite: bool):\n        if is_composite:\n            if isinstance(space, (Tuple, Dict)):\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces.values()))\n            else:\n                return isinstance(space, Box)\n        else:\n            return isinstance(space, Box)\n    cont_action = _check_continuous(env.action_space, tuple_action)\n    cont_obs = _check_continuous(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 2, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    if tuple_action and isinstance(env.action_space, (Tuple, Dict)):\n        cont_action = all((isinstance(space, Box) for space in env.action_space.spaces.values() if isinstance(env.action_space, Dict))) or all((isinstance(space, Box) for space in env.action_space.spaces))\n    else:\n        cont_action = isinstance(env.action_space, Box)\n    if tuple_obs and isinstance(env.observation_space, (Tuple, Dict)):\n        cont_obs = all((isinstance(space, Box) for space in env.observation_space.spaces.values() if isinstance(env.observation_space, Dict))) or all((isinstance(space, Box) for space in env.observation_space.spaces))\n    else:\n        cont_obs = isinstance(env.observation_space, Box)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 3, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n\n    def check_space(space: Space, is_composite: bool) -> bool:\n        if is_composite:\n            if isinstance(space, Dict):\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces.values()))\n            elif isinstance(space, Tuple):\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces))\n            else:\n                return False\n        else:\n            return isinstance(space, Box)\n    cont_action = check_space(env.action_space, tuple_action)\n    cont_obs = check_space(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 4, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> tuple:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def check_space(space: Space, is_composite: bool):\n        if is_composite:\n            return all((isinstance(sub_space, Box) for sub_space in (space.spaces.values() if isinstance(space, Dict) else space.spaces)))\n        else:\n            return isinstance(space, Box)\n    cont_action = check_space(env.action_space, tuple_action)\n    cont_obs = check_space(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 5, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def check_continuous(space, is_composite):\n        if is_composite:\n            if isinstance(space, (Tuple, Dict)):\n                sub_spaces = space.spaces.values() if isinstance(space, Dict) else space.spaces\n                return all((isinstance(sub, Box) for sub in sub_spaces))\n            else:\n                raise ValueError('Composite flag is True but the space is not a Tuple or Dict.')\n        else:\n            return isinstance(space, Box)\n    action_is_continuous = check_continuous(env.action_space, tuple_action)\n    obs_is_continuous = check_continuous(env.observation_space, tuple_obs)\n    return (action_is_continuous, obs_is_continuous)"}
{"task_id": 363, "completion_id": 6, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def all_boxes(space: Space) -> bool:\n        \"\"\"Check if all subspaces (in case of `Tuple` or `Dict`) are `Box` instances.\"\"\"\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, (Tuple, Dict)):\n            return all((isinstance(subspace, Box) for subspace in space.spaces.values()))\n        else:\n            return False\n    if tuple_action:\n        if isinstance(env.action_space, (Tuple, Dict)):\n            cont_action = all_boxes(env.action_space)\n        else:\n            raise ValueError('tuple_action is True, but action_space is not a composite (Tuple/Dict) space.')\n    else:\n        cont_action = isinstance(env.action_space, Box)\n    if tuple_obs:\n        if isinstance(env.observation_space, (Tuple, Dict)):\n            cont_obs = all_boxes(env.observation_space)\n        else:\n            raise ValueError('tuple_obs is True, but observation_space is not a composite (Tuple/Dict) space.')\n    else:\n        cont_obs = isinstance(env.observation_space, Box)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 7, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def is_continuous_space(space: Space, is_composite: bool):\n        if is_composite:\n            return all((isinstance(s, Box) for s in (space.spaces.values() if hasattr(space.spaces, 'values') else space.spaces)))\n        else:\n            return isinstance(space, Box)\n    cont_action = is_continuous_space(env.action_space, tuple_action)\n    cont_obs = is_continuous_space(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 8, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    cont_action = False\n    cont_obs = False\n    if tuple_action:\n        if isinstance(env.action_space, (Tuple, Dict)):\n            all_boxes = all((isinstance(space, Box) for space in env.action_space.spaces.values())) if hasattr(env.action_space.spaces, 'values') else all((isinstance(space, Box) for space in env.action_space.spaces))\n            cont_action = all_boxes\n    else:\n        cont_action = isinstance(env.action_space, Box)\n    if tuple_obs:\n        if isinstance(env.observation_space, (Tuple, Dict)):\n            all_boxes = all((isinstance(space, Box) for space in env.observation_space.spaces.values())) if hasattr(env.observation_space.spaces, 'values') else all((isinstance(space, Box) for space in env.observation_space.spaces))\n            cont_obs = all_boxes\n    else:\n        cont_obs = isinstance(env.observation_space, Box)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 9, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def is_space_continuous(space: Space, is_composite: bool):\n        if is_composite:\n            if isinstance(space, (Tuple, Dict)):\n                return all((isinstance(subspace, Box) for subspace in space.spaces.values())) if isinstance(space, Dict) else all((isinstance(subspace, Box) for subspace in space.spaces))\n            else:\n                return False\n        else:\n            return isinstance(space, Box)\n    cont_action = is_space_continuous(env.action_space, tuple_action)\n    cont_obs = is_space_continuous(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        exps = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probs = exps / np.sum(exps, axis=1, keepdims=True)\n        return np.argmax(probs, axis=1)"}
{"task_id": 369, "completion_id": 1, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    exp_logits = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n    probabilities = exp_logits / np.sum(exp_logits, axis=1, keepdims=True)\n    return np.argmax(probabilities, axis=1)"}
{"task_id": 369, "completion_id": 2, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for update in updates:\n        running_pred -= learning_rate * update\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        exp_logits = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities = exp_logits / np.sum(exp_logits, axis=1, keepdims=True)\n        return np.argmax(probabilities, axis=1)"}
{"task_id": 369, "completion_id": 3, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    logits_exp = np.exp(running_pred - running_pred.max(axis=1, keepdims=True))\n    probabilities = logits_exp / logits_exp.sum(axis=1, keepdims=True)\n    return np.argmax(probabilities, axis=1)"}
{"task_id": 369, "completion_id": 4, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    n_samples = updates[0].shape[0]\n    n_classes = updates[0].shape[1] if len(updates[0].shape) > 1 else 1\n    running_pred = np.zeros((n_samples, n_classes))\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred[:, 0], 4)\n    else:\n        exps = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probs = exps / np.sum(exps, axis=1, keepdims=True)\n        return np.argmax(probs, axis=1)"}
{"task_id": 369, "completion_id": 5, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    if not updates:\n        return np.array([])\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        exps = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probs = exps / np.sum(exps, axis=1, keepdims=True)\n        return np.argmax(probs, axis=1)"}
{"task_id": 369, "completion_id": 6, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0], dtype=np.float64)\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        exp_logits = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        softmax_probs = exp_logits / np.sum(exp_logits, axis=1, keepdims=True)\n        return np.argmax(softmax_probs, axis=1)"}
{"task_id": 369, "completion_id": 7, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        logits_exp = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities = logits_exp / logits_exp.sum(axis=1, keepdims=True)\n        return np.argmax(probabilities, axis=1)"}
{"task_id": 369, "completion_id": 8, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    shape = updates[0].shape\n    running_pred = np.zeros(shape)\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        exps = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        softmax = exps / np.sum(exps, axis=1, keepdims=True)\n        return np.argmax(softmax, axis=1)"}
{"task_id": 369, "completion_id": 9, "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for update in updates:\n        running_pred -= learning_rate * update\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        exp_logits = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities = exp_logits / np.sum(exp_logits, axis=1, keepdims=True)\n        return np.argmax(probabilities, axis=1)\nupdates = [np.array([[1.0, 2.0], [3.0, 4.0]]), np.array([[1.0, -1.0], [0.0, 2.0]])]\nlearning_rate = 0.1\nregression = False"}
{"task_id": 371, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer\n        pad: int, 2-tuple, or the string \"same\"\n        dilation: non-negative integer\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, l_in, in_channels) = X.shape\n    (kernel_w, in_channels_exp, out_channels) = W.shape\n    if in_channels != in_channels_exp:\n        raise ValueError(f'Input channels {in_channels} do not match with kernel input channels {in_channels_exp}.')\n    effective_kernel = 1 + dilation * (kernel_w - 1)\n    if pad == 'same':\n        out_len = (l_in + stride - 1) // stride\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - l_in)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (p_left, p_right) = pad\n    else:\n        raise ValueError(f'Invalid padding value `{pad}`')\n    l_out = (l_in + p_left + p_right - effective_kernel) // stride + 1\n    if l_out < 1:\n        raise ValueError('Invalid filter size, padding, or stride')\n    X_pad = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    output = np.zeros((n_examples, l_out, out_channels))\n    for i in range(n_examples):\n        for t in range(l_out):\n            t_start = t * stride\n            t_end = t_start + effective_kernel\n            for c in range(out_channels):\n                region = X_pad[i, t_start:t_end:dilation + 1, :]\n                kernel = W[:, :, c]\n                output[i, t, c] = np.sum(region * kernel)\n    return output.tolist()\nX = np.array([[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]], [[0, 0], [1, 1], [0, 0], [0, 0], [5, 5]]])\nW = np.array([[[1, 0], [2, 0], [3, 0]], [[4, 0], [5, 0], [6, 0]]])"}
{"task_id": 371, "completion_id": 1, "solution": "import numpy as np\nfrom typing import Union, List, Tuple\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function supports batches, multiple input/output channels, padding\n    (integer, tuple, or \"same\"), arbitrary stride and dilation.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad: int, 2-tuple, or the string \"same\" specifying the amount\n             of zero padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted\n                  between neighboring kernel elements\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, l_in, in_channels) = X.shape\n    (kernel_width, in_channels_w, out_channels) = W.shape\n    if in_channels != in_channels_w:\n        raise ValueError(f'Mismatch in in_channels: got {in_channels} in X vs {in_channels_w} in W')\n    effective_kernel = 1 + dilation * (kernel_width - 1)\n    if isinstance(pad, str) and pad.lower() == 'same':\n        out_len = (l_in + stride - 1) // stride\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - l_in)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = pad\n        p_right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (p_left, p_right) = pad\n    else:\n        raise ValueError(\"pad must be an integer, a tuple, or the string 'same'\")\n    x_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    l_out = (x_padded.shape[1] - effective_kernel) // stride + 1\n    if l_out <= 0:\n        raise ValueError('Invalid configuration (kernel too large or stride too large)')\n    output = np.zeros((n_examples, l_out, out_channels))\n    for i in range(n_examples):\n        for t in range(l_out):\n            for c_out in range(out_channels):\n                start = t * stride\n                end = start + effective_kernel\n                window = x_padded[i, start:end, :]\n                k_indices = np.arange(0, kernel_width * (dilation + 1), dilation + 1)\n                k_indices = k_indices[k_indices < effective_kernel]\n                kernel = W[k_indices, :, c_out]\n                out_val = np.sum(kernel * window)\n                output[i, t, c_out] = out_val\n    return output.tolist()"}
{"task_id": 371, "completion_id": 2, "solution": "import numpy as np\nfrom math import ceil, floor\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                  neighboring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (batch_size, in_len, in_channels) = X.shape\n    (kernel_width, in_channels_expected, out_channels) = W.shape\n    if in_channels != in_channels_expected:\n        raise ValueError('Input channel mismatch: X has {in_channels}, kernels expect {in_channels_expected}')\n    if isinstance(pad, int):\n        pad_left = pad\n        pad_right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (pad_left, pad_right) = pad\n    elif pad == 'same':\n        pad_total = max(0, (ceil(in_len / stride) - 1) * stride + (kernel_width + (kernel_width - 1) * dilation) - in_len)\n        pad_left = pad_total // 2\n        pad_right = pad_total - pad_left\n    else:\n        raise ValueError(\"Invalid padding specification: '{}'\".format(pad))\n    X_padded = np.pad(X, ((0, 0), (pad_left, pad_right), (0, 0)), mode='constant', constant_values=0)\n    out_len = ceil((in_len + pad_left + pad_right - (kernel_width + (kernel_width - 1) * dilation)) / stride)\n    output = np.zeros((batch_size, out_len, out_channels))\n    for i in range(batch_size):\n        for t in range(out_len):\n            start = t * stride\n            end = start + (kernel_width - 1) * (dilation + 1) + 1\n            if end > X_padded.shape[1]:\n                break\n            window = X_padded[i, start:end:dilation + 1, :]\n            output[i, t, :] = np.sum(window * W, axis=(0, 1))\n    return output.tolist()"}
{"task_id": 371, "completion_id": 3, "solution": "import numpy as np\nfrom math import ceil, floor\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"\n    Perform a 1-D cross-correlation between *X* and *W*.\n    \n    The function implements 1D cross-correlation for multiple channels,\n    supports padding (as integer, tuple, or 'same'), strides and dilation.\n    \n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero padding\n        dilation: non-negative integer, number of points inserted between \n                  neighboring kernel elements\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, l_in, in_channels) = X.shape\n    (kernel_size, _, out_channels) = W.shape\n    effective_kernel = (kernel_size - 1) * (dilation + 1) + 1\n    if pad == 'same':\n        out_len_float = l_in / stride\n        out_len = ceil(out_len_float)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - l_in)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (p_left, p_right) = pad\n    else:\n        raise ValueError('Invalid padding specification.')\n    padded = np.zeros((n_examples, l_in + p_left + p_right, in_channels))\n    padded[:, p_left:p_left + l_in, :] = X\n    l_out = 1 + (l_in + p_left + p_right - effective_kernel) // stride\n    output = np.zeros((n_examples, l_out, out_channels))\n    for i in range(n_examples):\n        for t in range(l_out):\n            slice_start = t * stride\n            slice_end = slice_start + effective_kernel\n            patch = padded[i, slice_start:slice_end, :]\n            w_dilated = W[np.repeat(np.arange(kernel_size), dilation + 1)]\n            w_dilated = w_dilated[dilation + 1::dilation + 1, :, :]\n            for c in range(out_channels):\n                out_channel = np.einsum('ki,kj->j', patch, w_dilated[:, :, c])\n                output[i, t, c] = out_channel.sum()\n    return output.tolist()"}
{"task_id": 371, "completion_id": 4, "solution": "import numpy as np\nfrom math import ceil, floor\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"\n    Perform a 1-D cross-correlation between *X* and *W*.\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero padding\n              to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between neighboring\n                   kernel elements (0 \u21d2 standard convolution)\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, in_len, in_channels) = X.shape\n    (kernel_width, in_channels_w, out_channels) = W.shape\n    assert in_channels == in_channels_w, 'In-channel mismatch between input and weights.'\n    if pad == 'same':\n        out_len = ceil(in_len / stride)\n        effective_kernel_width = (W.shape[0] - 1) * (dilation + 1) + 1\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - in_len)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        (p_left, p_right) = pad\n    else:\n        raise ValueError(\"pad must be 'same', an integer, or a 2-tuple (p_left, p_right).\")\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    padded_len = X_padded.shape[1]\n    out_len = (padded_len - (kernel_width - 1) * (dilation + 1) - 1) // stride + 1\n    if out_len <= 0:\n        raise ValueError('Output length is zero or negative. Check stride and kernel size.')\n    output = np.zeros((n_examples, out_len, out_channels))\n    for i in range(n_examples):\n        for t in range(out_len):\n            start = t * stride\n            end = start + (kernel_width - 1) * (dilation + 1) + 1\n            slice_ = X_padded[i, start:end:dilation + 1, :]\n            for c in range(out_channels):\n                out = np.sum(slice_ * W[..., c])\n                output[i, t, c] = out\n    return output.tolist()"}
{"task_id": 371, "completion_id": 5, "solution": "import numpy as np\nfrom typing import Union, Tuple, List\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad: Union[int, Tuple[int, int], str], dilation: int=0) -> List:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighboring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, sig_len, in_channels) = X.shape\n    (kernel_width, in_ch, out_channels) = W.shape\n    if in_channels != in_ch:\n        raise ValueError('Input and kernel must have the same number of input channels.')\n    effective_kernel = kernel_width + (kernel_width - 1) * dilation\n    if isinstance(pad, int):\n        pad_left = pad_right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (pad_left, pad_right) = pad\n    elif pad == 'same':\n        ceil_out_len = np.ceil(sig_len / stride).astype(int)\n        total_pad_needed = max(0, (ceil_out_len - 1) * stride + effective_kernel - sig_len)\n        pad_left = total_pad_needed // 2\n        pad_right = total_pad_needed - pad_left\n    else:\n        raise ValueError(\"Padding must be either 'same', an int, or a tuple (pad_left, pad_right).\")\n    X_padded = np.pad(X, ((0, 0), (pad_left, pad_right), (0, 0)), mode='constant', constant_values=0)\n    new_sig_len = sig_len + pad_left + pad_right\n    out_len = (new_sig_len - effective_kernel) // stride + 1\n    if out_len <= 0:\n        raise ValueError('Kernel too large or stride too large for input after padding.')\n    output = np.zeros((n_examples, out_len, out_channels))\n    for i in range(n_examples):\n        for t in range(out_len):\n            start = t * stride\n            end = start + effective_kernel\n            if end > X_padded.shape[1]:\n                break\n            window = X_padded[i, start:end:dilation + 1, :]\n            if window.shape[0] != kernel_width:\n                raise ValueError(f'Window shape {window.shape[0]} incompatible with kernel width {kernel_width} (possibly due to slicing out bounds).')\n            for c in range(out_channels):\n                output[i, t, c] = np.sum(window * W[:, :, c])\n    return output.tolist()"}
{"task_id": 371, "completion_id": 6, "solution": "import numpy as np\nimport numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"\n    Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, l_in, in_channels) = X.shape\n    (kernel_width, in_channels_w, out_channels) = W.shape\n    if in_channels != in_channels_w:\n        raise ValueError('Input and kernel channel size mismatch')\n    effective_kernel = (kernel_width - 1) * (dilation + 1) + 1\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (p_left, p_right) = pad\n    elif pad == 'same':\n        out_len = int(np.ceil(l_in / stride))\n        total_pad = max((out_len - 1) * stride + effective_kernel - l_in, 0)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError('Invalid padding specification')\n    padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    l_padded = padded.shape[1]\n    output_length = (l_padded - effective_kernel) // stride + 1\n    if output_length <= 0:\n        raise ValueError('Invalid combination of kernel, dilation, padding and stride')\n    result = np.zeros((n_examples, output_length, out_channels))\n    for i in range(n_examples):\n        for t in range(output_length):\n            start = t * stride\n            end = start + effective_kernel\n            slice = padded[i, start:end, :]\n            if dilation > 0:\n                full_kernel_slice = np.zeros((effective_kernel, in_channels))\n                idxs = np.arange(0, effective_kernel, dilation + 1).clip(0, effective_kernel)\n                full_kernel_slice[idxs, :] = slice\n            else:\n                full_kernel_slice = slice\n            for c in range(out_channels):\n                for ch in range(in_channels):\n                    result[i, t, c] += np.sum(full_kernel_slice * W[:, ch, c:c + 1])\n    return result.tolist()\nX = np.array([[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0], [7.0, 8.0], [9.0, 10.0]], [[10.0, 20.0], [30.0, 40.0], [50.0, 60.0], [70.0, 80.0], [90.0, 100.0]]])\nW = np.array([[[0.1, 0.2], [0.3, 0.4]], [[0.5, 0.6], [0.7, 0.8]], [[0.9, 1.0], [1.1, 1.2]]])\nresult = conv1D(X, W, stride=1, pad=1, dilation=0)"}
{"task_id": 371, "completion_id": 7, "solution": "import numpy as np\nfrom math import ceil, floor\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple, or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                  neighboring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, l_in, in_channels) = X.shape\n    (kernel_width, in_channels_w, out_channels) = W.shape\n    if in_channels != in_channels_w:\n        raise ValueError('Input and kernel must have the same number of in_channels.')\n    dilated_kernel_width = (kernel_width - 1) * (dilation + 1) + 1\n    if isinstance(pad, int):\n        pad_left = pad\n        pad_right = pad\n    elif isinstance(pad, (list, tuple)) and len(pad) == 2:\n        (pad_left, pad_right) = pad\n    elif pad == 'same':\n        out_len = ceil(l_in / stride)\n        total_pad = max(0, (out_len - 1) * stride + dilated_kernel_width - l_in)\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n    else:\n        raise ValueError('Padding must be \"same\", int, or tuple of integers')\n    X_padded = np.pad(X, ((0, 0), (pad_left, pad_right), (0, 0)), 'constant')\n    l_out = 1 + (X_padded.shape[1] - (dilated_kernel_width - 1) - 1) // stride\n    output = np.zeros((n_examples, l_out, out_channels))\n    for i in range(n_examples):\n        x = X_padded[i]\n        for t in range(l_out):\n            start = t * stride\n            end = start + (dilated_kernel_width - 1) * (dilation + 1) + 1\n            indices = np.arange(start, end, dilation + 1)\n            if indices[-1] >= x.shape[0]:\n                raise IndexError('Index out of bounds for input indexing.')\n            input_slice = x[indices, :]\n            for oc in range(out_channels):\n                w_slice = W[:, :, oc]\n                output[i, t, oc] = np.sum(input_slice * w_slice)\n    return output.tolist()"}
{"task_id": 371, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function supports batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, l_in, in_channels) = X.shape\n    (kernel_width, in_channels_w, out_channels) = W.shape\n    assert in_channels == in_channels_w, 'Input channel dimension mismatch'\n    effective_kernel = (W.shape[0] - 1) * (dilation + 1) + 1\n    if isinstance(pad, str) and pad.lower() == 'same':\n        out_len = math.ceil(l_in / stride)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - l_in)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n        pad = (p_left, p_right)\n    elif isinstance(pad, int):\n        pad = (pad, pad)\n    X_padded = np.pad(X, ((0, 0), (pad[0], pad[1]), (0, 0)), mode='constant')\n    l_out = (X_padded.shape[1] - effective_kernel) // stride + 1\n    output = np.zeros((n_examples, l_out, out_channels))\n    for i in range(n_examples):\n        for t in range(l_out):\n            for c in range(out_channels):\n                start = t * stride\n                end = start + effective_kernel\n                X_region = X_padded[i, start:end, :]\n                result = 0\n                for k in range(kernel_width):\n                    input_idx = start + k * (dilation + 1)\n                    if input_idx < X_padded.shape[1]:\n                        for ch in range(in_channels):\n                            result += X_padded[i, input_idx, ch] * W[k, ch, c]\n                output[i, t, c] = result\n    return output.tolist()"}
{"task_id": 371, "completion_id": 9, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying amount of zero padding\n        dilation: non-negative integer, dilation rate\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, l_in, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    effective_kernel = (W.shape[0] - 1) * (dilation + 1) + 1\n    if isinstance(pad, str) and pad.lower() == 'same':\n        out_len = int(np.ceil(l_in / stride))\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - l_in)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = p_right = pad\n    else:\n        (p_left, p_right) = pad\n    X_pad = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    l_out = 1 + (X_pad.shape[1] - effective_kernel) // stride\n    output = np.zeros((n_examples, l_out, out_channels))\n    for n in range(n_examples):\n        for o in range(out_channels):\n            for i in range(in_channels):\n                for t in range(l_out):\n                    start = t * stride\n                    end = start + effective_kernel\n                    idxs = np.arange(start, end, dilation + 1)\n                    if idxs[-1] > X_pad.shape[1]:\n                        idxs = idxs[idxs < X_pad.shape[1]]\n                    window = X_pad[n, idxs, i]\n                    kernel = W[:, i, o]\n                    if idxs.shape[0] < kernel.shape[0]:\n                        kernel = kernel[:idxs.shape[0]]\n                    elif idxs.shape[0] > kernel.shape[0]:\n                        window = window[:kernel.shape[0]]\n                    output[n, t, o] += np.sum(window * kernel)\n    return output.tolist()"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    counts = np.bincount(y)\n    n = len(y)\n    p = counts / n\n    gini_impurity = 1 - np.sum(p ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 1, "solution": "import numpy as np\nfrom typing import Union\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty,\n        an impurity of 0.0 is returned.\n    \"\"\"\n    y = np.asarray(y)\n    if y.size == 0:\n        return 0.0\n    (values, counts) = np.unique(y, return_counts=True)\n    N = y.size\n    probabilities = counts / N\n    gini_impurity = 1.0 - np.sum(probabilities ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 2, "solution": "import numpy as np\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y or len(y) == 0:\n        return 0.0\n    y = np.asarray(y)\n    (_, counts) = np.unique(y, return_counts=True)\n    N = len(y)\n    gini_sum = np.sum((counts / N) ** 2)\n    gini = 1.0 - gini_sum\n    return round(gini, 4)"}
{"task_id": 373, "completion_id": 3, "solution": "import numpy as np\nfrom typing import list, TypeVar\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    y = np.array(y)\n    (_, counts) = np.unique(y, return_counts=True)\n    N = len(y)\n    probabilities = counts / N\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 4, "solution": "import numpy as np\nfrom typing import list, TypeVar\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    y = np.array(y)\n    N = len(y)\n    counts = np.bincount(y)\n    probabilities = counts / N\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 5, "solution": "import numpy as np\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    y = np.array(y)\n    counts = np.bincount(y)\n    N = len(y)\n    p_squared_sum = sum(((count / N) ** 2 for count in counts))\n    gini_impurity = 1 - p_squared_sum\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 6, "solution": "import numpy as np\nfrom typing import list\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    y_array = np.array(y)\n    (unique_classes, counts) = np.unique(y_array, return_counts=True)\n    N = len(y_array)\n    prob_squares = (counts / N) ** 2\n    gini_impurity = 1.0 - np.sum(prob_squares)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 7, "solution": "import numpy as np\nfrom collections import Counter\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    y = np.asarray(y).flatten()\n    if y.size == 0:\n        return 0.0\n    total_samples = len(y)\n    class_counts = Counter(y)\n    probabilities = [count / total_samples for count in class_counts.values()]\n    impurity = 1 - sum((p ** 2 for p in probabilities))\n    return round(impurity, 4)"}
{"task_id": 373, "completion_id": 8, "solution": "import numpy as np\nfrom typing import list, overload\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    (_, counts) = np.unique(y, return_counts=True)\n    total = len(y)\n    probabilities = counts / total\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 9, "solution": "import numpy as np\nfrom typing import list\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    y = np.asarray(y)\n    (_, counts) = np.unique(y, return_counts=True)\n    N = len(y)\n    gini_impurity = 1.0 - np.sum((counts / N) ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    (m, n) = X.shape\n    if m != y.shape[0]:\n        return -1\n    theta = np.zeros(n)\n    bias = 0.0\n    for _ in range(n_iterations):\n        y_pred = X @ theta + bias\n        dw = 2 / m * X.T @ (y_pred - y)\n        db = 2 / m * np.sum(y_pred - y)\n        theta -= learning_rate * dw\n        bias -= learning_rate * db\n    theta_rounded = [round(w, 4) for w in theta]\n    bias_rounded = round(bias, 4)\n    return (theta_rounded, bias_rounded)"}
{"task_id": 374, "completion_id": 1, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    (m, n) = X.shape\n    if m != y.shape[0]:\n        return -1\n    theta = np.zeros(n)\n    bias = 0.0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, theta) + bias\n        dw = 2 / m * np.dot(X.T, y_pred - y)\n        db = 2 / m * np.sum(y_pred - y)\n        theta -= learning_rate * dw\n        bias -= learning_rate * db\n    weights_list = [round(theta[i], 4) for i in range(n)]\n    bias_rounded = round(bias, 4)\n    return (weights_list, bias_rounded)"}
{"task_id": 374, "completion_id": 2, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Parameters:\n    X (np.ndarray): Feature matrix of shape (m, n)\n    y (np.ndarray): Target vector of shape (m,)\n    learning_rate (float): Step size for the gradient descent\n    n_iterations (int): Number of iterations for training\n\n    Returns:\n    tuple: (weights_list, bias) - Both values are rounded to 4 decimal places\n    \"\"\"\n    (m, n) = X.shape\n    if m != y.shape[0]:\n        return -1\n    theta = np.zeros(n)\n    bias = 0.0\n    for _ in range(n_iterations):\n        y_pred = X @ theta + bias\n        error = y_pred - y\n        dw = 2 / m * X.T @ error\n        db = 2 / m * np.sum(error)\n        theta -= learning_rate * dw\n        bias -= learning_rate * db\n    weights_list = [round(float(t), 4) for t in theta]\n    bias = round(bias, 4)\n    return (weights_list, bias)\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([3, 5, 7, 9])"}
{"task_id": 374, "completion_id": 3, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Parameters:\n        X (np.ndarray): Feature matrix of shape (m, n)\n        y (np.ndarray): Target vector of shape (m,)\n        learning_rate (float): Step size for the gradient descent update\n        n_iterations (int): Number of iterations for gradient descent\n\n    Returns:\n        tuple: (weights_list, bias) with weights rounded to 4 decimals\n    \"\"\"\n    (m_X, n) = X.shape\n    m_y = y.shape[0]\n    if m_X != m_y:\n        return -1\n    theta = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, theta) + b\n        dw = 2 / m_X * np.dot(X.T, y_pred - y)\n        db = 2 / m_X * np.sum(y_pred - y)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    weights_list = [round(w, 4) for w in theta.tolist()]\n    bias = round(b, 4)\n    return (weights_list, bias)\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([7, 11, 15])"}
{"task_id": 374, "completion_id": 4, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Parameters:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Target vector of shape (m,).\n        learning_rate (float): Learning rate for gradient descent.\n        n_iterations (int): Number of training iterations.\n\n    Returns:\n        tuple[list[float], float]: Tuple containing weights (list) and bias (float), rounded to 4 decimals.\n                                   Returns -1 if input data is inconsistent.\n    \"\"\"\n    (m, n) = X.shape\n    if len(y) != m:\n        return -1\n    theta = np.zeros(n)\n    bias = 0.0\n    for _ in range(n_iterations):\n        y_pred = X @ theta + bias\n        errors = y_pred - y\n        dw = 2 / m * X.T @ errors\n        db = 2 / m * errors.sum()\n        theta -= learning_rate * dw\n        bias -= learning_rate * db\n    weights = [round(w, 4) for w in theta]\n    bias_rounded = round(bias, 4)\n    return (weights, bias_rounded)"}
{"task_id": 374, "completion_id": 5, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n    \n    Args:\n        X: Feature matrix of shape (m, n)\n        y: Target vector of shape (m,)\n        learning_rate: Learning rate for gradient descent\n        n_iterations: Number of iterations for gradient descent\n        \n    Returns:\n        A tuple (weights_list, bias) where weights_list contains the weights rounded to 4 decimals\n        and bias is the bias term rounded to 4 decimals.\n        Returns -1 if input data are inconsistent.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_hat = np.dot(X, theta) + b\n        error = y_hat - y\n        dw = 2 / m * np.dot(X.T, error)\n        db = 2 / m * np.sum(error)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    theta_rounded = [round(w, 4) for w in theta.tolist()]\n    b_rounded = round(b, 4)\n    return (theta_rounded, b_rounded)"}
{"task_id": 374, "completion_id": 6, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    The function minimizes the mean-squared error using gradient descent updates.\n    \"\"\"\n    (m, n) = X.shape\n    if m != y.shape[0]:\n        return -1\n    theta = np.zeros(n)\n    bias = 0.0\n    for _ in range(n_iterations):\n        y_pred = X @ theta + bias\n        error = y_pred - y\n        dw = 2 / m * X.T @ error\n        db = 2 / m * np.sum(error)\n        theta -= learning_rate * dw\n        bias -= learning_rate * db\n    weights_list = [round(t, 4) for t in theta]\n    bias = round(bias, 4)\n    return (weights_list, bias)"}
{"task_id": 374, "completion_id": 7, "solution": "import numpy as np\nimport numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n)\n        y (np.ndarray): Target vector of shape (m,)\n        learning_rate (float, optional): Learning rate for the model. Defaults to 0.01.\n        n_iterations (int, optional): Number of iterations to run gradient descent. Defaults to 10000.\n\n    Returns:\n        tuple[list[float], float]: (weights_list, bias) with values rounded to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if m != y.size:\n        return -1\n    theta = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_pred = X @ theta + b\n        dw = 2 / m * X.T @ (y_pred - y)\n        db = 2 / m * np.sum(y_pred - y)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    weights_list = [round(w, 4) for w in theta]\n    bias = round(b, 4)\n    return (weights_list, bias)\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([3, 5, 7, 9])"}
{"task_id": 374, "completion_id": 8, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Parameters:\n    X (np.ndarray): Feature matrix of shape (m, n)\n    y (np.ndarray): Target vector of shape (m,)\n    learning_rate (float, optional): Learning rate for gradient descent.\n    n_iterations (int, optional): Number of iterations for gradient descent.\n\n    Returns:\n    tuple: (weights, bias) with weights rounded to 4 decimal places and bias rounded to 4 decimal places.\n           Returns -1 if input data are inconsistent.\n    \"\"\"\n    (m, n) = X.shape\n    if y.shape[0] != m:\n        return -1\n    theta = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_hat = X @ theta + b\n        dw = 2 / m * X.T @ (y_hat - y)\n        db = 2 / m * np.sum(y_hat - y)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    theta_rounded = [round(w, 4) for w in theta]\n    b_rounded = round(b, 4)\n    return (theta_rounded, b_rounded)\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([7, 9, 11, 13])"}
{"task_id": 374, "completion_id": 9, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    (m, n) = X.shape\n    if m != y.shape[0]:\n        return -1\n    theta = np.zeros(n)\n    bias = 0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, theta) + bias\n        error = y_pred - y\n        dw = 2 / m * np.dot(X.T, error)\n        db = 2 / m * np.sum(error)\n        theta -= learning_rate * dw\n        bias -= learning_rate * db\n    weights = [round(w, 4) for w in theta]\n    bias_rounded = round(bias, 4)\n    return (weights, bias_rounded)"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    if not isinstance(X, list) or not all((isinstance(row, list) for row in X)):\n        return False\n    n = len(X)\n    if not all((len(row) == n for row in X)):\n        return False\n    X_np = np.array(X)\n    return np.allclose(X_np, X_np.T)"}
{"task_id": 376, "completion_id": 1, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    if not all((len(row) == len(X) for row in X)):\n        return False\n    X_array = np.array(X)\n    return np.allclose(X_array, X_array.T)"}
{"task_id": 376, "completion_id": 2, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    if len(set((len(row) for row in X))) != 1 or len(X) != len(X[0]):\n        return False\n    X_np = np.array(X)\n    return np.allclose(X_np, X_np.T, atol=1e-08)"}
{"task_id": 376, "completion_id": 3, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_np = np.array(X)\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    return np.allclose(X_np, X_np.T)"}
{"task_id": 376, "completion_id": 4, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_np = np.array(X)\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    return np.allclose(X_np, X_np.T, atol=1e-08)"}
{"task_id": 376, "completion_id": 5, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    if not all((isinstance(row, list) for row in X)):\n        return False\n    n = len(X)\n    if n == 0 or any((len(row) != n for row in X)):\n        return False\n    X_array = np.array(X)\n    return np.allclose(X_array, X_array.T)"}
{"task_id": 376, "completion_id": 6, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    rows = len(X)\n    if any((len(row) != rows for row in X)):\n        return False\n    X_np = np.array(X)\n    return np.allclose(X_np, X_np.T)"}
{"task_id": 376, "completion_id": 7, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    if len(X) != len(X[0]):\n        return False\n    A = np.array(X)\n    return np.allclose(A, A.T)"}
{"task_id": 376, "completion_id": 8, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_array = np.array(X)\n    if X_array.shape[0] != X_array.shape[1]:\n        return False\n    return np.allclose(X_array, X_array.T)"}
{"task_id": 376, "completion_id": 9, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    if len(X) == 0 or not all((len(row) == len(X) for row in X)):\n        return False\n    X_np = np.array(X)\n    return np.allclose(X_np, X_np.T)"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef logistic_negative_gradient(y: List[int], f: List[float]) -> List[float]:\n    \"\"\"\n    Compute the negative gradient for logistic loss in the context of gradient boosting.\n    \n    Parameters:\n    -----------\n    y : List[int]\n        Binary class labels (0 or 1).\n    f : List[float]\n        Current model prediction scores (real numbers).\n        \n    Returns:\n    --------\n    List[float]\n        List of negative gradient values (residuals) corresponding to each sample,\n        rounded to four decimal places.\n        \n    If the input list y contains values other than 0 or 1, returns -1 as an error indicator.\n    \"\"\"\n    y = np.array(y)\n    f = np.array(f)\n    if not np.all(np.isin(y, [0, 1])):\n        return -1\n    y_prime = 2 * y - 1\n    gradient = y_prime / (1 + np.exp(y_prime * f))\n    return [round(g, 4) for g in gradient]"}
{"task_id": 377, "completion_id": 1, "solution": "import numpy as np\nfrom typing import List\ndef logistic_negative_gradient(y: List[int], f: List[float]) -> List[float]:\n    \"\"\"\n    Compute the negative gradient for the logistic loss function\n    in the context of binary classification with Gradient Boosting.\n\n    Parameters:\n    y (List[int]): True labels, each being either 0 or 1.\n    f (List[float]): Current model predictions (log-odds or scores).\n\n    Returns:\n    List[float]: The negative gradients rounded to four decimal places.\n                  Returns -1 if any label in y is not 0 or 1.\n    \"\"\"\n    if not all((label in {0, 1} for label in y)):\n        return [-1]\n    y_prime = [2 * label - 1 for label in y]\n    g = [yp / (1 + np.exp(yp * fi)) for (yp, fi) in zip(y_prime, f)]\n    return [round(gi, 4) for gi in g]\ny = [0, 1, 1, 0, 1]\nf = [0.5, -0.3, 2.1, -1.7, 0.0]"}
{"task_id": 377, "completion_id": 2, "solution": "import numpy as np\nfrom typing import List\ndef logistic_negative_gradient(y: List[int], f: List[float]) -> List[float]:\n    \"\"\"\n    Computes the negative gradient for the logistic loss in a Gradient Boosting\n    context when using binomial deviance for binary classification.\n\n    Parameters:\n    ----------\n    y : List[int]\n        True binary class labels (0 or 1).\n    f : List[float]\n        Current model predictions (real numbers).\n\n    Returns:\n    -------\n    List[float]\n        List of negative gradients (rounded to four decimal places).\n        Returns -1 if the label array contains invalid values (not 0 or 1).\n    \"\"\"\n    if not all((label in [0, 1] for label in y)):\n        return [-1]\n    y_prime = [2 * lbl - 1 for lbl in y]\n    y_prime_array = np.array(y_prime)\n    f_array = np.array(f)\n    g = y_prime_array / (1 + np.exp(y_prime_array * f_array))\n    return [round(g_val, 4) for g_val in g]\ny = [0, 1, 0, 1]\nf = [-1.5, 2.3, 0.0, -0.7]"}
{"task_id": 377, "completion_id": 3, "solution": "import numpy as np\nfrom typing import List\ndef logistic_negative_gradient(y: List[int], f: List[float]) -> List[float]:\n    \"\"\"\n    Computes the negative gradient of the logistic loss (binomial deviance)\n    used in gradient boosting for binary classification.\n    \n    The negative gradient is given by:\n        g\u1d62 = y'\u1d62 / (1 + exp(y'\u1d62 * f\u1d62)), where y' = 2*y - 1\n    \n    Parameters:\n    -----------\n    y : List[int]\n        Binary class labels, should only contain 0 or 1.\n    f : List[float]\n        Current model predictions for each data point.\n        \n    Returns:\n    --------\n    List[float]\n        The list of negative gradients for each sample, rounded to 4 decimal places.\n        \n    Raises:\n    -------\n    - Returns [-1] if any element in y is not 0 or 1.\n    \"\"\"\n    y = np.array(y)\n    f = np.array(f)\n    if not np.isin(y, [0, 1]).all():\n        return [-1]\n    y_prime = 2 * y - 1\n    neg_gradient = y_prime / (1 + np.exp(y_prime * f))\n    return [round(val, 4) for val in neg_gradient]\ny = [0, 1, 0, 1]\nf = [0.5, -0.3, 2.0, -1.0]"}
{"task_id": 377, "completion_id": 4, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Compute the negative gradient for logistic loss in Gradient Boosting.\n    \n    The loss function is log(1 + exp(-2 * y' * f)), where y' = 2y - 1.\n    \n    Parameters:\n    -----------\n    y : list of int\n        True binary labels (0 or 1).\n    f : list of float\n        Current model predictions (floats).\n        \n    Returns:\n    --------\n    list of float\n        List of negative gradients, one per sample, rounded to 4 decimal places.\n        \n        Returns -1 if the label array contains values other than 0 or 1.\n    \"\"\"\n    if any((label not in {0, 1} for label in y)):\n        return -1\n    y_prime = np.array([2 * label - 1 for label in y])\n    f_arr = np.array(f)\n    g = y_prime / (1 + np.exp(y_prime * f_arr))\n    return [round(gi, 4) for gi in g]\ny = [0, 1, 0, 1]\nf = [0.5, -1.0, 2.0, -0.7]"}
{"task_id": 377, "completion_id": 5, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Compute the negative gradient for logistic loss in the context of Gradient Boosting.\n    \n    Parameters:\n    y (list): A list of binary class labels (0 or 1).\n    f (list): A list of current prediction scores (floats).\n    \n    Returns:\n    list: A list of negative gradient values rounded to 4 decimal places.\n    If input contains labels other than 0 or 1, returns -1.\n    \"\"\"\n    if not all((label in {0, 1} for label in y)):\n        return -1\n    y_prime = [2 * label - 1 for label in y]\n    gradients = [yp / (1 + np.exp(yp * fi)) for (yp, fi) in zip(y_prime, f)]\n    return [round(g, 4) for g in gradients]\ny = [0, 1, 1, 0, 1]\nf = [1.2, -0.3, 0.8, -1.5, 2.1]"}
{"task_id": 377, "completion_id": 6, "solution": "import numpy as np\nfrom typing import List\ndef logistic_negative_gradient(y: List[int], f: List[float]) -> List[float]:\n    \"\"\"\n    Compute the negative gradients for logistic loss used in gradient boosting\n    for binary classification with binomial deviance.\n\n    Parameters:\n    y (List[int]): List of true class labels, must be 0 or 1.\n    f (List[float]): List of current prediction scores (real numbers).\n\n    Returns:\n    List[float]: The computed negative gradients, rounded to 4 decimal places.\n                 Returns -1 if any label in y is not 0 or 1.\n    \"\"\"\n    y = np.array(y)\n    f = np.array(f)\n    if not np.all(np.isin(y, [0, 1])):\n        return [-1]\n    y_prime = 2 * y - 1\n    gradient = y_prime / (1 + np.exp(y_prime * f))\n    return np.round(gradient, 4).tolist()\ny = [0, 1, 0, 1]\nf = [-1.2, 0.5, 1.0, -0.8]"}
{"task_id": 377, "completion_id": 7, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Compute the negative gradient of the logistic loss for each sample.\n    \n    Parameters:\n    - y: list of binary class labels (0 or 1)\n    - f: list of predicted scores (floats from the current model)\n    \n    Returns:\n    - list of negative gradients g rounded to 4 decimal places.\n    - Returns -1 if y contains values other than 0 or 1.\n    \"\"\"\n    if not all((label in (0, 1) for label in y)):\n        return -1\n    y_prime = [2 * label - 1 for label in y]\n    gradients = [y_val / (1 + np.exp(y_val * f_val)) for (y_val, f_val) in zip(y_prime, f)]\n    return [round(g, 4) for g in gradients]\ny = [0, 1, 0, 1]\nf = [1.2, -0.5, 0.8, -1.0]"}
{"task_id": 377, "completion_id": 8, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Compute the negative gradient of the logistic loss used in gradient boosting.\n\n    Parameters:\n        y (list): List of binary class labels (0 or 1).\n        f (list): List of current prediction scores (floats).\n\n    Returns:\n        list: List of negative gradients (rounded to 4 decimal places), or -1\n              if any label is not in {0, 1}.\n    \"\"\"\n    if any((label not in {0, 1} for label in y)):\n        return -1\n    y_prime = [2 * label - 1 for label in y]\n    gradients = []\n    for (yp, fi) in zip(y_prime, f):\n        numerator = yp\n        denominator = 1 + np.exp(yp * fi)\n        gradient = numerator / denominator\n        gradients.append(round(gradient, 4))\n    return gradients\ny = [0, 1, 1, 0]\nf = [0.5, -1.0, 0.2, 2.0]"}
{"task_id": 377, "completion_id": 9, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Compute the negative gradient of the logistic (binomial deviance)\n    loss for a binary classification problem.\n\n    The negative gradient is calculated as:\n        g_i = y'_i / (1 + exp(y'_i * f_i))\n    where y'_i = 2 * y_i - 1 (transforms label from {0,1} to {-1,1}).\n\n    Parameters:\n    -----------\n    y : list\n        Binary class labels (0 or 1)\n    f : list\n        Current model predictions, any real number\n\n    Returns:\n    --------\n    list\n        List of negative gradients for each sample, rounded to four decimal places.\n        Returns -1 if any label in y is not 0 or 1.\n    \"\"\"\n    if len(y) != len(f):\n        return -1\n    for label in y:\n        if label not in {0, 1}:\n            return -1\n    y_prime = [2 * yi - 1 for yi in y]\n    gradients = []\n    for (yi_prime, fi) in zip(y_prime, f):\n        numerator = yi_prime\n        denominator = 1 + np.exp(yi_prime * fi)\n        gradient = numerator / denominator\n        gradients.append(round(gradient, 4))\n    return gradients"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2SELU/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    x = np.array(x, dtype=np.float64)\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if order == 0:\n        result = np.where(x > 0, x, alpha * (np.exp(x) - 1))\n        result = scale * result\n    elif order == 1:\n        d_result = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    elif order == 2:\n        d2_result = np.where(x > 0, 0, scale * alpha * np.exp(x))\n    else:\n        raise ValueError('order must be 0, 1, or 2')\n    rounded_result = np.round(result, 4)\n    result_list = rounded_result.tolist()\n    if np.isscalar(x):\n        result_list = result_list[()]\n    return result_list"}
{"task_id": 380, "completion_id": 1, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x_array = np.asarray(x, dtype=np.float64)\n    if order == 0:\n        result = np.where(x_array > 0, x_array, alpha * (np.exp(x_array) - 1))\n        result *= scale\n    elif order == 1:\n        derivative = np.where(x_array > 0, scale, alpha * scale * np.exp(x_array))\n        result = derivative\n    elif order == 2:\n        second_derivative = np.where(x_array > 0, 0.0, alpha * scale * np.exp(x_array))\n        result = second_derivative\n    else:\n        raise ValueError('Invalid order. Must be 0, 1, or 2.')\n    result_rounded = np.round(result, 4)\n    return result_rounded.tolist()"}
{"task_id": 380, "completion_id": 2, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x_arr = np.array(x, dtype=np.float64)\n    if order == 0:\n        result = np.where(x_arr > 0, x_arr, alpha * (np.exp(x_arr) - 1))\n        result *= scale\n    elif order == 1:\n        d1 = np.where(x_arr > 0, 1, alpha * np.exp(x_arr))\n        result = scale * d1\n    elif order == 2:\n        d2 = np.where(x_arr > 0, 0, alpha * np.exp(x_arr))\n        result = scale * d2\n    else:\n        raise ValueError('order must be 0, 1, or 2')\n    result = np.round(result, 4)\n    return result.tolist() if x_arr.ndim != 0 else result.item()"}
{"task_id": 380, "completion_id": 3, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x_arr = np.array(x, dtype=np.float64)\n    if order == 0:\n        result = np.where(x_arr > 0, x_arr, alpha * (np.exp(x_arr) - 1))\n        result = scale * result\n    elif order == 1:\n        result = np.where(x_arr > 0, 1.0, alpha * np.exp(x_arr))\n        result = scale * result\n    elif order == 2:\n        result = np.where(x_arr > 0, 0.0, alpha * np.exp(x_arr))\n        result = scale * result\n    else:\n        raise ValueError('order must be 0, 1, or 2')\n    result = np.round(result, 4)\n    return result.tolist()"}
{"task_id": 380, "completion_id": 4, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x = np.array(x, dtype=np.float64)\n    if order == 0:\n        result = np.where(x > 0, x * scale, scale * alpha * (np.exp(x) - 1))\n    elif order == 1:\n        result = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    elif order == 2:\n        result = np.where(x > 0, 0, scale * alpha * np.exp(x))\n    else:\n        raise ValueError('Order must be 0, 1, or 2.')\n    rounded_result = np.round(result, 4)\n    return rounded_result.tolist()"}
{"task_id": 380, "completion_id": 5, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x_array = np.array(x, dtype=np.float64)\n    if order == 0:\n        result = np.where(x_array > 0, scale * x_array, scale * alpha * (np.exp(x_array) - 1))\n    elif order == 1:\n        derivative = np.where(x_array > 0, scale, scale * alpha * np.exp(x_array))\n        result = derivative\n    elif order == 2:\n        second_derivative = np.where(x_array > 0, 0, scale * alpha * np.exp(x_array))\n        result = second_derivative\n    else:\n        raise ValueError('order must be 0, 1, or 2')\n    return np.round(result, 4).tolist()"}
{"task_id": 380, "completion_id": 6, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x_arr = np.array(x, dtype=float)\n    if order == 0:\n        result = np.where(x_arr > 0, scale * x_arr, scale * alpha * (np.exp(x_arr) - 1))\n    elif order == 1:\n        result = np.where(x_arr > 0, scale * 1.0, scale * alpha * np.exp(x_arr))\n    elif order == 2:\n        result = np.where(x_arr > 0, 0.0, scale * alpha * np.exp(x_arr))\n    else:\n        raise ValueError('order must be 0, 1, or 2')\n    return np.round(result, 4).tolist()"}
{"task_id": 380, "completion_id": 7, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n    \n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2SELU/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x_array = np.asarray(x, dtype=float)\n\n    def _se_ind(x):\n        if order == 0:\n            return np.where(x > 0, x, alpha * (np.exp(x) - 1))\n        elif order == 1:\n            return np.where(x > 0, 1, alpha * np.exp(x))\n        elif order == 2:\n            return np.where(x > 0, 0, alpha * np.exp(x))\n        else:\n            raise ValueError('order must be 0, 1, or 2')\n    result = scale * _se_ind(x_array)\n    rounded_result = np.round(result, 4)\n    return rounded_result.tolist()"}
{"task_id": 380, "completion_id": 8, "solution": "import numpy as np\nimport numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x_array = np.asarray(x, dtype=np.float64)\n    if order == 0:\n        with np.errstate(all='ignore'):\n            result = np.where(x_array > 0, x_array, alpha * (np.exp(x_array) - 1)) * scale\n    elif order == 1:\n        with np.errstate(all='ignore'):\n            result = np.where(x_array > 0, 1.0, alpha * np.exp(x_array)) * scale\n    elif order == 2:\n        with np.errstate(all='ignore'):\n            result = np.where(x_array > 0, 0.0, alpha * np.exp(x_array)) * scale\n    else:\n        raise ValueError('order must be 0, 1, or 2')\n    if np.isscalar(x_array):\n        result = float(np.around(result, 4))\n    else:\n        result = np.around(result, 4).tolist()\n    return result"}
{"task_id": 380, "completion_id": 9, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x_arr = np.array(x, dtype=np.float64)\n\n    def apply_order_0(x_in):\n        return scale * np.where(x_in > 0, x_in, alpha * (np.exp(x_in) - 1))\n\n    def apply_order_1(x_in):\n        return scale * np.where(x_in > 0, 1.0, alpha * np.exp(x_in))\n\n    def apply_order_2(x_in):\n        return scale * np.where(x_in > 0, 0.0, alpha * np.exp(x_in))\n    apply_func = {0: apply_order_0, 1: apply_order_1, 2: apply_order_2}.get(order, apply_order_0)\n    result = apply_func(x_arr)\n    result = np.around(result, decimals=4)\n    return result.tolist()"}
{"task_id": 387, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    N = len(y)\n    y_pred = np.full(N, np.mean(y), dtype=np.float64)\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        x_sorted = x[sorted_indices]\n        residuals_sorted = residuals[sorted_indices]\n        global_r = np.mean(residuals_sorted)\n        if np.all(x_sorted[1:] == x_sorted[:-1]):\n            y_pred += learning_rate * global_r\n            continue\n        (unique_x, unique_indices) = np.unique(x_sorted, return_index=True)\n        candidate_splits = []\n        candidate_scores = []\n        for i in range(len(unique_indices) - 1):\n            start = unique_indices[i]\n            end = unique_indices[i + 1]\n            if start < end:\n                for j in range(start + 1, end):\n                    midpoint = (x_sorted[j - 1] + x_sorted[j]) / 2\n                    left_sum = np.sum(residuals_sorted[:j])\n                    right_sum = np.sum(residuals_sorted[j:])\n                    left_count = j\n                    right_count = N - j\n                    r_left = left_sum / left_count if left_count > 0 else 0\n                    r_right = right_sum / right_count if right_count > 0 else 0\n                    l2_error = np.sum((residuals_sorted[:j] - r_left) ** 2) + np.sum((residuals_sorted[j:] - r_right) ** 2)\n                    candidate_splits.append(midpoint)\n                    candidate_scores.append((r_left, r_right, l2_error))\n        if not candidate_scores:\n            r_left = r_right = global_r\n            y_pred += learning_rate * r_right\n            continue\n        best_idx = np.argmin([score[2] for score in candidate_scores])\n        (r_left, r_right, _) = candidate_scores[best_idx]\n        t = candidate_splits[best_idx]\n        r_hat = np.where(x <= t, r_left, r_right)\n        y_pred += learning_rate * r_hat\n    return list(np.round(y_pred, 4))\nx = [1.2, 2.1, 2.3, 3.0, 3.5]\ny = [2.0, 3.1, 5.0, 4.2, 6.3]\nn_estimators = 3\nlearning_rate = 0.1"}
{"task_id": 387, "completion_id": 1, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    N = len(y)\n    y_pred = np.full(N, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sort_indices = np.argsort(x)\n        x_sorted = x[sort_indices]\n        r_sorted = residuals[sort_indices]\n        best_idx = None\n        best_error = float('inf')\n        best_left_mean = 0\n        best_right_mean = 0\n        if np.all(x_sorted[1:] == x_sorted[:-1]):\n            split_mean = np.mean(r_sorted)\n            y_pred += learning_rate * split_mean\n            continue\n        for i in range(1, len(x_sorted)):\n            if x_sorted[i] != x_sorted[i - 1]:\n                left_part = r_sorted[:i]\n                right_part = r_sorted[i:]\n                left_mean = np.mean(left_part)\n                right_mean = np.mean(right_part)\n                r_hat = np.where(x_sorted <= x_sorted[i], left_mean, right_mean)\n                error = np.sum((r_sorted - r_hat) ** 2)\n                if error < best_error:\n                    best_error = error\n                    best_idx = i\n                    best_left_mean = left_mean\n                    best_right_mean = right_mean\n        if best_idx is not None:\n            r_hat = np.where(x_sorted <= x_sorted[best_idx], best_left_mean, best_right_mean)\n        else:\n            r_hat = np.full(N, np.mean(r_sorted))\n        y_pred[sort_indices] += learning_rate * r_hat\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 387, "completion_id": 2, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    N = len(x)\n    x = np.array(x, dtype=float)\n    y = np.array(y, dtype=float)\n    y_pred = np.full(N, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        idx = np.argsort(x)\n        sorted_x = x[idx]\n        sorted_residuals = residuals[idx]\n        best_error = np.inf\n        best_r_hat = np.zeros(N)\n        if np.all(sorted_x[1:] == sorted_x[:-1]):\n            r_hat = np.full(N, np.mean(residuals))\n        else:\n            for i in range(N - 1):\n                if sorted_x[i + 1] == sorted_x[i]:\n                    continue\n                split = (sorted_x[i] + sorted_x[i + 1]) / 2\n                left = sorted_residuals[:i + 1]\n                right = sorted_residuals[i + 1:]\n                r_L = np.mean(left)\n                r_R = np.mean(right)\n                predicted_r = np.array([r_L if xi <= split else r_R for xi in x])\n                error = np.sum((residuals - predicted_r) ** 2)\n                if error < best_error:\n                    best_error = error\n                    best_r_hat = predicted_r\n            r_hat = best_r_hat\n        y_pred += learning_rate * r_hat\n    return list(np.round(y_pred, 4))\nx = [1.0, 2.0, 3.0, 2.0, 1.0, 3.0]\ny = [2.5, 4.0, 5.0, 4.0, 2.5, 5.0]"}
{"task_id": 387, "completion_id": 3, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    N = len(y)\n    y_pred = np.full(N, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        if np.unique(sorted_x).shape[0] == 1:\n            global_mean = np.mean(sorted_residuals)\n            y_pred += learning_rate * global_mean\n            continue\n        unique_points = np.unique(sorted_x)\n        thresholds = (unique_points[1:] + unique_points[:-1]) / 2\n        best_loss = float('inf')\n        best_threshold = None\n        best_left_mean = 0\n        best_right_mean = 0\n        for t in thresholds:\n            left_mask = sorted_x <= t\n            right_mask = sorted_x > t\n            left_indices = np.where(left_mask)[0]\n            right_indices = np.where(right_mask)[0]\n            if len(left_indices) == 0 or len(right_indices) == 0:\n                continue\n            left_avg = np.mean(sorted_residuals[left_mask])\n            right_avg = np.mean(sorted_residuals[right_mask])\n            loss = 0\n            for i in left_indices:\n                loss += (sorted_residuals[i] - left_avg) ** 2\n            for i in right_indices:\n                loss += (sorted_residuals[i] - right_avg) ** 2\n            if loss < best_loss:\n                best_loss = loss\n                best_threshold = t\n                best_left_mean = left_avg\n                best_right_mean = right_avg\n        if best_threshold is None:\n            global_mean = np.mean(sorted_residuals)\n            y_pred += learning_rate * global_mean\n        else:\n            prediction = np.where(x <= best_threshold, best_left_mean, best_right_mean)\n            y_pred += learning_rate * prediction\n    return list(np.round(y_pred, 4))"}
{"task_id": 387, "completion_id": 4, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    N = len(x)\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full(N, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        indices = np.argsort(x)\n        sorted_x = x[indices]\n        sorted_residuals = residuals[indices]\n        if np.all(sorted_x == sorted_x[0]):\n            mean_residual = np.mean(sorted_residuals)\n            y_pred += learning_rate * mean_residual\n            continue\n        best_loss = float('inf')\n        best_t = None\n        best_r_left = None\n        best_r_right = None\n        for i in range(N - 1):\n            if sorted_x[i + 1] == sorted_x[i]:\n                continue\n            t = (sorted_x[i] + sorted_x[i + 1]) / 2\n            r_left = np.mean(sorted_residuals[:i + 1])\n            r_right = np.mean(sorted_residuals[i + 1:])\n            predicted_residuals = np.where(sorted_x <= t, r_left, r_right)\n            loss = np.sum((sorted_residuals - predicted_residuals) ** 2)\n            if loss < best_loss:\n                best_loss = loss\n                best_t = t\n                best_r_left = r_left\n                best_r_right = r_right\n        if best_t is None:\n            mean_r = np.mean(sorted_residuals)\n            y_pred += learning_rate * mean_r\n        else:\n            predicted_residuals = np.where(x <= best_t, best_r_left, best_r_right)\n            y_pred += learning_rate * predicted_residuals\n    return np.round(y_pred, 4).tolist()\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny = [2.5, 3.0, 4.0, 4.5, 5.0]"}
{"task_id": 387, "completion_id": 5, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    X = np.array(x)\n    y = np.array(y)\n    N = len(y)\n    y_pred = np.full(N, y.mean())\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(X)\n        sorted_x = X[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        cum_sum = np.cumsum(sorted_residuals)\n        best_split = None\n        best_loss = float('inf')\n        best_left_mean = 0\n        best_right_mean = 0\n        for i in range(1, N):\n            if sorted_x[i] != sorted_x[i - 1]:\n                left_mean = cum_sum[i - 1] / i\n                right_mean = (cum_sum[N] - cum_sum[i]) / (N - i)\n                pred = np.where(sorted_x <= sorted_x[i], left_mean, right_mean)\n                loss = np.sum((sorted_residuals - pred) ** 2)\n                if loss < best_loss:\n                    best_loss = loss\n                    best_split = (sorted_x[i - 1] + sorted_x[i]) / 2\n                    best_left_mean = left_mean\n                    best_right_mean = right_mean\n        if best_split is None:\n            global_mean = np.mean(residuals)\n            y_pred += learning_rate * global_mean\n        else:\n            stump_pred = np.where(X <= best_split, best_left_mean, best_right_mean)\n            y_pred += learning_rate * stump_pred\n    return list(np.round(y_pred, 4))"}
{"task_id": 387, "completion_id": 6, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    N = len(y)\n    x = np.array(x, dtype=float)\n    y = np.array(y, dtype=float)\n    y_pred = np.full_like(y, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        x_sorted = x[sorted_indices]\n        r_sorted = residuals[sorted_indices]\n        best_split = None\n        best_score = float('inf')\n        best_left_mean = 0.0\n        best_right_mean = 0.0\n        if len(np.unique(x_sorted)) == 1:\n            r_mean = np.mean(r_sorted)\n            y_pred += learning_rate * r_mean\n            continue\n        for i in range(1, len(x_sorted)):\n            if x_sorted[i] != x_sorted[i - 1]:\n                t = (x_sorted[i - 1] + x_sorted[i]) / 2\n                r_left = r_sorted[:i]\n                r_right = r_sorted[i:]\n                left_mean = np.mean(r_left)\n                right_mean = np.mean(r_right)\n                r_hat = np.where(x_sorted <= t, left_mean, right_mean)\n                sse = np.sum((r_sorted - r_hat) ** 2)\n                if sse < best_score:\n                    best_score = sse\n                    best_split = t\n                    best_left_mean = left_mean\n                    best_right_mean = right_mean\n        if best_split is None:\n            r_mean = np.mean(r_sorted)\n            y_pred += learning_rate * r_mean\n        else:\n            r_hat = np.where(x <= best_split, best_left_mean, best_right_mean)\n            y_pred += learning_rate * r_hat\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 387, "completion_id": 7, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    N = len(y)\n    y = np.array(y)\n    x = np.array(x)\n    y_pred = np.full(N, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        indices = np.argsort(x)\n        x_sorted = x[indices]\n        residuals_sorted = residuals[indices]\n        best_split = None\n        best_error = float('inf')\n        best_r_L = 0.0\n        best_r_R = 0.0\n        (unique_x, inverse) = np.unique(x_sorted, return_inverse=True)\n        unique_indices = np.r_[0, np.where(inverse[1:] != inverse[:-1])[0] + 1]\n        for split_idx in range(1, len(unique_indices)):\n            left = unique_indices[split_idx - 1]\n            right = unique_indices[split_idx]\n            if x_sorted[right - 1] == x_sorted[left]:\n                continue\n            t = (x_sorted[left] + x_sorted[right]) / 2\n            r_L = np.mean(residuals_sorted[left:right])\n            r_R = np.mean(residuals_sorted[right:]) if right < N else 0.0\n            predicted = np.where(x_sorted <= t, r_L, r_R)\n            error = np.sum((residuals_sorted - predicted) ** 2)\n            if error < best_error:\n                best_error = error\n                best_split = t\n                best_r_L = r_L\n                best_r_R = r_R\n        if best_split is None:\n            best_r_L = best_r_R = np.mean(residuals_sorted)\n        for i in range(N):\n            if x[i] <= best_split:\n                y_pred[i] += learning_rate * best_r_L\n            else:\n                y_pred[i] += learning_rate * best_r_R\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 387, "completion_id": 8, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n    \n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n        \n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    N = len(y)\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full(N, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        x_sorted = x[sorted_indices]\n        residuals_sorted = residuals[sorted_indices]\n        if np.all(x_sorted[:-1] == x_sorted[1:]):\n            mean_residual = np.mean(residuals_sorted)\n            stump_pred = np.full(N, mean_residual)\n        else:\n            best_split_sse = float('inf')\n            best_split_t = None\n            best_left_mean = None\n            best_right_mean = None\n            unique_indices = np.where(np.diff(x_sorted) > 1e-10)[0]\n            for idx in unique_indices:\n                t = (x_sorted[idx] + x_sorted[idx + 1]) / 2\n                left_mask = x_sorted <= t\n                right_mask = x_sorted > t\n                left_mean = np.mean(residuals_sorted[left_mask])\n                right_mean = np.mean(residuals_sorted[right_mask])\n                stump_pred_current = np.where(x_sorted <= t, left_mean, right_mean)\n                sse = np.sum((residuals_sorted - stump_pred_current) ** 2)\n                if sse < best_split_sse:\n                    best_split_sse = sse\n                    best_split_t = t\n                    best_left_mean = left_mean\n                    best_right_mean = right_mean\n            if best_split_t is not None:\n                stump_pred = np.where(x <= best_split_t, best_left_mean, best_right_mean)\n            else:\n                stump_pred = np.full(N, np.mean(residuals_sorted))\n        y_pred += learning_rate * stump_pred\n    return list(np.round(y_pred, 4))"}
{"task_id": 387, "completion_id": 9, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    X = np.array(x)\n    y = np.array(y)\n    N = len(y)\n    y_pred = np.full(N, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sort_idx = np.argsort(X)\n        X_sorted = X[sort_idx]\n        residuals_sorted = residuals[sort_idx]\n        best_split = (float('inf'), None, None)\n        for i in range(N - 1):\n            if X_sorted[i] != X_sorted[i + 1]:\n                t = (X_sorted[i] + X_sorted[i + 1]) / 2\n                r_L = np.mean(residuals_sorted[:i + 1])\n                r_R = np.mean(residuals_sorted[i + 1:])\n                predicted_r = np.where(X_sorted <= t, r_L, r_R)\n                loss = np.sum((residuals_sorted - predicted_r) ** 2)\n                if loss < best_split[0]:\n                    best_split = (loss, r_L, r_R, t)\n        if best_split[1] is None:\n            r_global = np.mean(residuals_sorted)\n            y_pred += learning_rate * r_global\n        else:\n            (_, r_L, r_R, t) = best_split\n            predicted_r = np.where(X <= t, r_L, r_R)\n            y_pred += learning_rate * predicted_r\n    return list(np.round(y_pred, 4))\nx = [1.0, 2.0, 2.5, 4.0, 5.0]\ny = [2.0, 4.0, 5.0, 7.0, 9.0]"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * grad ** 2\n    updated_w = w - learning_rate * grad / np.sqrt(Eg + epsilon)\n    w_next = np.round(updated_w, 4).tolist()\n    Eg_next = np.round(Eg, 4).tolist()\n    return (w_next, Eg_next)"}
{"task_id": 394, "completion_id": 1, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    eps = 1e-08\n    Eg_new = rho * Eg + (1 - rho) * np.square(grad)\n    w_next = w - learning_rate * grad / np.sqrt(Eg_new + eps)\n    w_rounded = np.round(w_next, 4).tolist()\n    Eg_rounded = np.round(Eg_new, 4).tolist()\n    return (w_rounded, Eg_rounded)"}
{"task_id": 394, "completion_id": 2, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    eps = 1e-08\n    Eg_new = rho * Eg + (1 - rho) * grad ** 2\n    w_new = w - learning_rate * grad / np.sqrt(Eg_new + eps)\n    w_list = np.round(w_new, decimals=4).tolist()\n    Eg_list = np.round(Eg_new, decimals=4).tolist()\n    return (w_list, Eg_list)"}
{"task_id": 394, "completion_id": 3, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    new_Eg = rho * Eg + (1 - rho) * grad ** 2\n    w_new = w - learning_rate * grad / np.sqrt(new_Eg + epsilon)\n    w_new_rounded = np.round(w_new, 4).tolist()\n    new_Eg_rounded = np.round(new_Eg, 4).tolist()\n    return (w_new_rounded, new_Eg_rounded)\nw = np.array([1.0, 2.0])\ngrad = np.array([0.1, 0.2])\nEg = None"}
{"task_id": 394, "completion_id": 4, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * grad ** 2\n    w_next = w - learning_rate * grad / np.sqrt(Eg + epsilon)\n    w_next_rounded = np.round(w_next, 4).tolist()\n    Eg_rounded = np.round(Eg, 4).tolist()\n    return (w_next_rounded, Eg_rounded)"}
{"task_id": 394, "completion_id": 5, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    epsilon = 1e-08\n    Eg_new = rho * Eg + (1 - rho) * grad ** 2\n    w_update = w - learning_rate * grad / np.sqrt(Eg_new + epsilon)\n    w_rounded = np.round(w_update, 4).tolist()\n    Eg_rounded = np.round(Eg_new, 4).tolist()\n    return (w_rounded, Eg_rounded)"}
{"task_id": 394, "completion_id": 6, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    eps = 1e-08\n    Eg = rho * Eg + (1 - rho) * grad ** 2\n    w = w - learning_rate * grad / np.sqrt(Eg + eps)\n    w_next = np.round(w, 4).tolist()\n    Eg_next = np.round(Eg, 4).tolist()\n    return (w_next, Eg_next)"}
{"task_id": 394, "completion_id": 7, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    eps = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg_next = rho * Eg + (1 - rho) * grad ** 2\n    w_next = w - learning_rate * grad / np.sqrt(Eg_next + eps)\n    w_next_list = np.round(w_next, 4).tolist()\n    Eg_next_list = np.round(Eg_next, 4).tolist()\n    return (w_next_list, Eg_next_list)"}
{"task_id": 394, "completion_id": 8, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg_new = rho * Eg + (1 - rho) * grad ** 2\n    w_new = w - learning_rate * grad / np.sqrt(Eg_new + epsilon)\n    return ([round(x, 4) for x in w_new.tolist()], [round(x, 4) for x in Eg_new.tolist()])"}
{"task_id": 394, "completion_id": 9, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    eps = 1e-08\n    Eg_new = rho * Eg + (1 - rho) * grad ** 2\n    w_new = w - learning_rate * grad / np.sqrt(Eg_new + eps)\n    w_list = np.round(w_new, 4).tolist()\n    Eg_list = np.round(Eg_new, 4).tolist()\n    return (w_list, Eg_list)\nw = np.array([2.0, 3.0])\ngrad = np.array([1.0, -1.0])"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        elu_values = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        result = np.where(x >= 0, 1, elu_values + alpha)\n    return [round(float(val), 4) for val in result]\nx = [-2.0, -1.0, 0.0, 1.0, 2.0]"}
{"task_id": 398, "completion_id": 1, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        elu_vals = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        result = np.where(x >= 0, 1, elu_vals + alpha)\n    return [round(val, 4) for val in result.tolist()]"}
{"task_id": 398, "completion_id": 2, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        elu_values = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        result = np.where(x >= 0, 1, elu_values + alpha)\n    return [round(val, 4) for val in result]\nx = [-2, -1, 0, 1, 2]"}
{"task_id": 398, "completion_id": 3, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x, dtype=float)\n    if not derivative:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        elu_values = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        result = np.where(x >= 0, 1, elu_values + alpha)\n    return [round(val, 4) for val in result.tolist()]"}
{"task_id": 398, "completion_id": 4, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.asarray(x)\n    if not derivative:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        elu_vals = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        result = np.where(x >= 0, 1, elu_vals + alpha)\n    return [round(float(val), 4) for val in result]"}
{"task_id": 398, "completion_id": 5, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        result = np.where(x >= 0, 1, elu(x, alpha) + alpha)\n    return [round(val, 4) for val in result.tolist()]"}
{"task_id": 398, "completion_id": 6, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x_np = np.asarray(x)\n    if not derivative:\n        result = np.where(x_np >= 0, x_np, alpha * (np.exp(x_np) - 1))\n    else:\n        elu_values = np.where(x_np >= 0, x_np, alpha * (np.exp(x_np) - 1))\n        result = np.where(x_np >= 0, 1, elu_values + alpha)\n    return [round(float(val), 4) for val in result]\nx = [-1.5, -0.5, 0.0, 0.5, 1.5]"}
{"task_id": 398, "completion_id": 7, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        elu_values = elu(x, alpha, derivative=False)\n        result = np.where(x >= 0, 1.0, np.array(elu_values) + alpha)\n    return [round(val, 4) for val in result.tolist()]"}
{"task_id": 398, "completion_id": 8, "solution": "import numpy as np\nimport numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x_arr = np.array(x, dtype=np.float64)\n    if derivative:\n        elu_vals = elu(x_arr, alpha, derivative=False)\n        gradient = np.where(x_arr >= 0, 1.0, elu_vals + alpha)\n    else:\n        gradient = np.where(x_arr >= 0, x_arr, alpha * (np.exp(x_arr) - 1))\n    return [round(val, 4) for val in gradient.tolist()]"}
{"task_id": 398, "completion_id": 9, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x, dtype=np.float64)\n    if not derivative:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        elu_values = elu(x, alpha=alpha, derivative=False)\n        result = np.where(x >= 0, 1, np.array(elu_values) + alpha)\n    return [round(float(val), 4) for val in result]"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def analyze_space(values):\n        tuple_val = any((isinstance(val, (list, tuple, np.ndarray)) for val in values))\n        if tuple_val:\n            dim = len(values[0])\n            flattened = [item for sublist in values for item in sublist]\n        else:\n            dim = 1\n            flattened = values\n        multidim = tuple_val and dim > 1\n        continuous = any((isinstance(x, float) and (not x.is_integer()) for x in flattened))\n        n_per_dim = []\n        unique_per_dim = []\n        if tuple_val:\n            for d in range(dim):\n                unique_values = sorted(set((val[d] for val in values)))\n                n_per_dim.append(len(unique_values))\n                unique_per_dim.append(unique_values)\n        else:\n            unique_values = sorted(set(flattened))\n            n_per_dim = [len(unique_values)]\n            unique_per_dim = [unique_values]\n        return {'tuple_values': tuple_val, 'multidim_values': multidim, 'continuous': continuous, 'n_per_dim': n_per_dim, 'dim': dim, 'unique_per_dim': unique_per_dim}\n    action_info = analyze_space(actions)\n    obs_info = analyze_space(observations)\n    result = {'tuple_actions': action_info['tuple_values'], 'multidim_actions': action_info['multidim_values'], 'continuous_actions': action_info['continuous'], 'n_actions_per_dim': action_info['n_per_dim'], 'action_dim': action_info['dim'], 'action_ids': action_info['unique_per_dim'], 'tuple_observations': obs_info['tuple_values'], 'multidim_observations': obs_info['multidim_values'], 'continuous_observations': obs_info['continuous'], 'n_obs_per_dim': obs_info['n_per_dim'], 'obs_dim': obs_info['dim'], 'obs_ids': obs_info['unique_per_dim']}\n    return result\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\nresult = env_stats(actions, observations)"}
{"task_id": 411, "completion_id": 1, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    result = {}\n\n    def analyze(actions_or_obs, label):\n        n_per_dim = None\n        ids_per_dim = None\n        is_tuple = any((isinstance(el, (list, tuple, np.ndarray)) for el in actions_or_obs))\n        is_multidim = False\n        is_continuous = False\n        dim_size = 1\n        value_collections = []\n        for el in actions_or_obs:\n            if isinstance(el, (list, tuple, np.ndarray)):\n                is_multidim = True\n                dim_size = len(el)\n                for (i, v) in enumerate(el):\n                    value_collections.append((i, v))\n            else:\n                value_collections.append((0, el))\n        if not is_multidim:\n            all_values = [v for (_, v) in value_collections]\n            scalar_is_continuous = any((not (isinstance(v, int) or (isinstance(v, float) and v.is_integer())) and isinstance(v, float) for v in all_values))\n            return {'tuple': is_tuple, 'multidim': is_multidim, 'continuous': scalar_is_continuous, 'n_per_dim': [len(set(all_values))], 'ids': [sorted(set(all_values))]}\n        per_dim_values = [[] for _ in range(dim_size)]\n        for (dim, val) in value_collections:\n            per_dim_values[dim].append(val)\n        n_per_dim = [len(set(values)) for values in per_dim_values]\n        ids_per_dim = [sorted(set(values)) for values in per_dim_values]\n        has_continuous = any((any((not (isinstance(val, int) or (isinstance(val, float) and val.is_integer())) and isinstance(val, float) for val in values)) for values in per_dim_values))\n        return {'tuple': is_tuple, 'multidim': is_multidim, 'continuous': has_continuous, 'n_per_dim': n_per_dim, 'ids': ids_per_dim}\n    action_stats = analyze(actions, 'actions')\n    obs_stats = analyze(observations, 'observations')\n    result.update({'tuple_actions': action_stats['tuple'], 'multidim_actions': action_stats['multidim'], 'continuous_actions': action_stats['continuous'], 'n_actions_per_dim': action_stats['n_per_dim'], 'action_ids': action_stats['ids'], 'action_dim': len(action_stats['n_per_dim']) if action_stats['multidim'] else 1})\n    result.update({'tuple_observations': obs_stats['tuple'], 'multidim_observations': obs_stats['multidim'], 'continuous_observations': obs_stats['continuous'], 'n_obs_per_dim': obs_stats['n_per_dim'], 'obs_ids': obs_stats['ids'], 'obs_dim': len(obs_stats['n_per_dim']) if obs_stats['multidim'] else 1})\n    return result"}
{"task_id": 411, "completion_id": 2, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    result = {}\n\n    def process(space):\n        is_tuple = False\n        flat_space = []\n        dim = 1\n        for item in space:\n            if isinstance(item, (list, tuple, np.ndarray)):\n                is_tuple = True\n                dim = len(item)\n                flat_space.extend(item)\n            else:\n                flat_space.append(item)\n        multidim = dim > 1\n        continuous = any((not (isinstance(v, int) or (isinstance(v, float) and v.is_integer())) for v in flat_space))\n        flat_space = np.array(flat_space)\n        n_per_dim = []\n        ids_per_dim = []\n        if not is_tuple:\n            flat_space = flat_space.flatten()\n            n_per_dim = [len(np.unique(flat_space))]\n            ids_per_dim = [sorted(np.unique(flat_space).tolist())]\n        else:\n            dim_space = np.array(flat_space).reshape(-1, dim)\n            for i in range(dim):\n                unique = np.unique(dim_space[:, i])\n                n_per_dim.append(len(unique))\n                ids_per_dim.append(sorted(unique.tolist()))\n        return {'tuple': is_tuple, 'multidim': multidim, 'continuous': continuous, 'n_per_dim': n_per_dim, 'dim': dim, 'ids': ids_per_dim}\n    action_info = process(actions)\n    obs_info = process(observations)\n    result['tuple_actions'] = action_info['tuple']\n    result['multidim_actions'] = action_info['multidim']\n    result['continuous_actions'] = action_info['continuous']\n    result['n_actions_per_dim'] = action_info['n_per_dim']\n    result['action_dim'] = action_info['dim']\n    result['action_ids'] = action_info['ids']\n    result['tuple_observations'] = obs_info['tuple']\n    result['multidim_observations'] = obs_info['multidim']\n    result['continuous_observations'] = obs_info['continuous']\n    result['n_obs_per_dim'] = obs_info['n_per_dim']\n    result['obs_dim'] = obs_info['dim']\n    result['obs_ids'] = obs_info['ids']\n    return result"}
{"task_id": 411, "completion_id": 3, "solution": "import numpy as np\nfrom numbers import Number\nfrom typing import List, Union, Iterable, Dict\nfrom collections.abc import Sequence\nimport itertools\ndef env_stats(actions: list, observations: list) -> Dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    data_stats = {'tuple_actions': False, 'tuple_observations': False, 'multidim_actions': False, 'multidim_observations': False, 'continuous_actions': False, 'continuous_observations': False, 'n_actions_per_dim': [], 'action_dim': 0, 'n_obs_per_dim': [], 'obs_dim': 0, 'action_ids': [], 'obs_ids': []}\n\n    def is_tuple_space(data):\n        return any((isinstance(d, Sequence) and (not isinstance(d, (str, bytes))) for d in data))\n\n    def is_multidimensional(data):\n        if not is_tuple_space(data):\n            return False\n        dim = len(next(iter((d for d in data if isinstance(d, Sequence)))))\n        return dim > 1\n\n    def extract_dim_data(data, is_float_check):\n        \"\"\"\n        Extracts dimension data from the given list (actions or observations).\n        Returns:\n            - Continuous flag (True if any non-integer float)\n            - Per-dimension unique counts\n            - Unique values in each dimension (sorted)\n        \"\"\"\n        flatten = [d if isinstance(d, Sequence) else [d] for d in data]\n        dim = len(flatten[0])\n        per_dim_unique_vals = [[] for _ in range(dim)]\n        has_float = False\n        for value in flatten:\n            for (i, item) in enumerate(value):\n                per_dim_unique_vals[i].append(item)\n                if isinstance(item, float) and (not item.is_integer()):\n                    has_float = True\n        unique_per_dim = []\n        n_per_dim = []\n        for items in per_dim_unique_vals:\n            unique = sorted(set(items))\n            unique_per_dim.append(unique)\n            n_per_dim.append(len(unique))\n        return {'continuous': has_float, 'n_per_dim': n_per_dim, 'unique_per_dim': unique_per_dim, 'dim': dim}\n    data_stats['tuple_actions'] = is_tuple_space(actions)\n    data_stats['multidim_actions'] = is_multidimensional(actions)\n    if data_stats['tuple_actions']:\n        action_info = extract_dim_data(actions, is_float_check=True)\n        data_stats['continuous_actions'] = action_info['continuous']\n        data_stats['n_actions_per_dim'] = action_info['n_per_dim']\n        data_stats['action_ids'] = action_info['unique_per_dim']\n        data_stats['action_dim'] = action_info['dim']\n    else:\n        vals = set(actions)\n        data_stats['continuous_actions'] = any((isinstance(v, float) and (not v.is_integer()) for v in vals))\n        data_stats['n_actions_per_dim'] = [len(vals)]\n        data_stats['action_ids'] = [[v for v in sorted(vals)]]\n        data_stats['action_dim'] = 1\n    data_stats['tuple_observations'] = is_tuple_space(observations)\n    data_stats['multidim_observations'] = is_multidimensional(observations)\n    if data_stats['tuple_observations']:\n        obs_info = extract_dim_data(observations, is_float_check=True)\n        data_stats['continuous_observations'] = obs_info['continuous']\n        data_stats['n_obs_per_dim'] = obs_info['n_per_dim']\n        data_stats['obs_ids'] = obs_info['unique_per_dim']\n        data_stats['obs_dim'] = obs_info['dim']\n    else:\n        vals = set(observations)\n        data_stats['continuous_observations'] = any((isinstance(v, float) and (not v.is_integer()) for v in vals))\n        data_stats['n_obs_per_dim'] = [len(vals)]\n        data_stats['obs_ids'] = [[v for v in sorted(vals)]]\n        data_stats['obs_dim'] = 1\n    return data_stats"}
{"task_id": 411, "completion_id": 4, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.\n    observations : list\n        A list with the corresponding observations.\n\n    Returns\n    -------\n    dict\n        A dictionary with statistics of the action and observation spaces.\n    \"\"\"\n\n    def analyze_space(space_list, is_action):\n        tuple_space = False\n        multidim = False\n        continuous = False\n        dim = 1\n        space_ids = [[] for _ in range(dim)]\n        values_flat = []\n        for item in space_list:\n            if isinstance(item, (list, tuple, np.ndarray)):\n                tuple_space = True\n                item_dim = len(item)\n                if item_dim > 1:\n                    multidim = True\n                for val in item:\n                    values_flat.append(val)\n                if dim == 1:\n                    dim = item_dim\n                    space_ids = [[] for _ in range(dim)]\n            else:\n                values_flat.append(item)\n        index = 0\n        for i in range(len(space_list)):\n            if isinstance(space_list[i], (list, tuple, np.ndarray)):\n                for (j, val) in enumerate(space_list[i]):\n                    if index < len(space_ids[j]):\n                        if val not in space_ids[j]:\n                            space_ids[j].append(val)\n                    else:\n                        space_ids[j].append(val)\n                    index += 1\n            elif index < dim:\n                if space_list[i] not in space_ids[index]:\n                    space_ids[index].append(space_list[i])\n                index += 1\n            else:\n                pass\n        for val in values_flat:\n            if isinstance(val, float) and (not val.is_integer()):\n                continuous = True\n        for dim_idx in range(len(space_ids)):\n            space_ids[dim_idx] = sorted(space_ids[dim_idx])\n        n_per_dim = [len(ids) for ids in space_ids]\n        result = {'tuple': tuple_space, 'multidim': multidim, 'continuous': continuous, 'n_per_dim': n_per_dim, 'dim': dim, 'ids': space_ids}\n        return result\n    action_stats = analyze_space(actions, is_action=True)\n    obs_stats = analyze_space(observations, is_action=False)\n    output = {'tuple_actions': action_stats['tuple'], 'multidim_actions': action_stats['multidim'], 'continuous_actions': action_stats['continuous'], 'n_actions_per_dim': action_stats['n_per_dim'], 'action_dim': action_stats['dim'], 'action_ids': action_stats['ids'], 'tuple_observations': obs_stats['tuple'], 'multidim_observations': obs_stats['multidim'], 'continuous_observations': obs_stats['continuous'], 'n_obs_per_dim': obs_stats['n_per_dim'], 'obs_dim': obs_stats['dim'], 'obs_ids': obs_stats['ids']}\n    return output\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 5, "solution": "import numpy as np\nfrom collections.abc import Iterable\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"\n    Compute statistics for collections of actions and observations.\n\n    The function inspects actions and observations and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def is_tuple(val):\n        return isinstance(val, Iterable) and (not isinstance(val, (str, bytes)))\n\n    def get_dim(val):\n        return 1 if not is_tuple(val) else len(val)\n\n    def flatten(value):\n        if not is_tuple(value):\n            return [value]\n        return [item for v in value for item in (v if isinstance(v, Iterable) and (not isinstance(v, str)) else [v])]\n\n    def is_continuous(value):\n        return isinstance(value, float) and (not value.is_integer())\n\n    def analyze(values):\n        if not values:\n            return {'tuple': False, 'multidim': False, 'continuous': False, 'n_per_dim': [], 'dim': 0, 'ids': []}\n        first = values[0]\n        is_tuple_flag = is_tuple(first)\n        dim = get_dim(first)\n        is_multidim = dim > 1\n        flat_vals = [flatten(val) for val in values]\n        is_continuous_flag = any((is_continuous(item) for sublist in flat_vals for item in sublist))\n        n_per_dim = []\n        ids = []\n        for d in range(dim):\n            dim_vals = [val[d] for val in values if d < get_dim(val)]\n            dim_values = dim_vals if is_tuple_flag else flat_vals\n            unique_vals = sorted(set(dim_vals))\n            n_per_dim.append(len(unique_vals))\n            ids.append(unique_vals)\n        return {'tuple': is_tuple_flag, 'multidim': is_multidim, 'continuous': is_continuous_flag, 'n_per_dim': n_per_dim, 'dim': dim, 'ids': ids}\n    action_analysis = analyze(actions)\n    obs_analysis = analyze(observations)\n    return {'tuple_actions': action_analysis['tuple'], 'tuple_observations': obs_analysis['tuple'], 'multidim_actions': action_analysis['multidim'], 'multidim_observations': obs_analysis['multidim'], 'continuous_actions': action_analysis['continuous'], 'continuous_observations': obs_analysis['continuous'], 'n_actions_per_dim': action_analysis['n_per_dim'], 'n_obs_per_dim': obs_analysis['n_per_dim'], 'action_dim': action_analysis['dim'], 'obs_dim': obs_analysis['dim'], 'action_ids': action_analysis['ids'], 'obs_ids': obs_analysis['ids']}"}
{"task_id": 411, "completion_id": 6, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def process_data(data_list):\n        is_tuple = any((isinstance(x, (list, tuple, np.ndarray)) for x in data_list))\n        is_multi_dim = False\n        dimensionality = 0\n        continuous = False\n        unique_per_dim = []\n        sorted_uniq_per_dim = []\n        if not data_list:\n            return {'tuple_val': is_tuple, 'multidim': is_multi_dim, 'continuous': is_multi_dim and continuous, 'n_per_dim': unique_per_dim, 'dim': dimensionality, 'ids': sorted_uniq_per_dim}\n        first = data_list[0]\n        if isinstance(first, (list, tuple, np.ndarray)):\n            dimensionality = len(first)\n            is_multi_dim = dimensionality > 1\n        else:\n            dimensionality = 1\n        per_dim_values = [[] for _ in range(dimensionality)]\n        for item in data_list:\n            if isinstance(item, (list, tuple, np.ndarray)):\n                flattened_item = item\n            else:\n                flattened_item = [item]\n            for (i, v) in enumerate(flattened_item):\n                per_dim_values[i].append(v)\n        for (i, values) in enumerate(per_dim_values):\n            unique_values = np.unique(values).tolist()\n            n_unique = len(unique_values)\n            unique_per_dim.append(n_unique)\n            for v in values:\n                if not (isinstance(v, int) or (isinstance(v, float) and v.is_integer())):\n                    continuous = True\n            try:\n                unique_values_sorted = sorted(unique_values)\n                sorted_uniq_per_dim.append(unique_values_sorted)\n            except TypeError:\n                sorted_uniq_per_dim.append(unique_values)\n        return {'tuple_val': is_tuple, 'multidim': is_multi_dim, 'continuous': continuous, 'n_per_dim': unique_per_dim, 'dim': dimensionality, 'ids': sorted_uniq_per_dim}\n    action_info = process_data(actions)\n    obs_info = process_data(observations)\n    result = {'tuple_actions': action_info['tuple_val'], 'multidim_actions': action_info['multidim'], 'continuous_actions': action_info['continuous'], 'n_actions_per_dim': action_info['n_per_dim'], 'action_dim': action_info['dim'], 'action_ids': action_info['ids'], 'tuple_observations': obs_info['tuple_val'], 'multidim_observations': obs_info['multidim'], 'continuous_observations': obs_info['continuous'], 'n_obs_per_dim': obs_info['n_per_dim'], 'obs_dim': obs_info['dim'], 'obs_ids': obs_info['ids']}\n    return result\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 7, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the described statistics keys.\n    \"\"\"\n\n    def process_list(values):\n        tuple_used = any((isinstance(v, (list, tuple, np.ndarray)) for v in values))\n        continuous = False\n        dim = 1\n        unique_per_dim = []\n        ids_per_dim = []\n        if not values:\n            return {'tuple_used': tuple_used, 'multidim': False, 'continuous': continuous, 'n_per_dim': [], 'dim': 0, 'ids': []}\n        if isinstance(values[0], (list, tuple, np.ndarray)):\n            if len(values[0]) > 1:\n                dim = len(values[0])\n            else:\n                dim = 1\n        else:\n            dim = 1\n        flat_values = []\n        for v in values:\n            if isinstance(v, (list, tuple, np.ndarray)):\n                for i in range(len(v)):\n                    if i >= len(flat_values):\n                        flat_values.append([])\n                    flat_values[i].append(v[i])\n            else:\n                if len(flat_values) < 1:\n                    flat_values.append([])\n                flat_values[0].append(v)\n        for d in range(len(flat_values)):\n            uniques = sorted(set(flat_values[d]))\n            ids_per_dim.append(uniques)\n            unique_per_dim.append(len(uniques))\n            for val in flat_values[d]:\n                if isinstance(val, (float, np.floating)) and (not val.is_integer()):\n                    continuous = True\n        multidim = dim > 1\n        return {'tuple_used': tuple_used, 'multidim': multidim, 'continuous': continuous, 'n_per_dim': unique_per_dim, 'dim': dim, 'ids': ids_per_dim}\n    action_info = process_list(actions)\n    obs_info = process_list(observations)\n    return {'tuple_actions': action_info['tuple_used'], 'tuple_observations': obs_info['tuple_used'], 'multidim_actions': action_info['multidim'], 'multidim_observations': obs_info['multidim'], 'continuous_actions': action_info['continuous'], 'continuous_observations': obs_info['continuous'], 'n_actions_per_dim': action_info['n_per_dim'], 'action_dim': action_info['dim'], 'n_obs_per_dim': obs_info['n_per_dim'], 'obs_dim': obs_info['dim'], 'action_ids': action_info['ids'], 'obs_ids': obs_info['ids']}\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 8, "solution": "import numpy as np\nfrom typing import List, Union, Tuple, Dict, Any\ndef env_stats(actions: List[Union[float, int, Tuple, List]], observations: List[Union[float, int, Tuple, List]]) -> Dict[str, Any]:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def process_space(values):\n        is_tuple_space = False\n        for val in values:\n            if isinstance(val, (list, tuple, np.ndarray)):\n                is_tuple_space = True\n                break\n        dimensions = []\n        if is_tuple_space:\n            for val in values:\n                dimensions.append(len(val))\n            dim = dimensions[0]\n            assert all((d == dim for d in dimensions)), 'All elements must have same dim'\n            flat_values = [item for v in values for item in v]\n        else:\n            dim = 1\n            flat_values = values\n        is_continuous = any((not (isinstance(x, float) and x.is_integer()) for x in flat_values if isinstance(x, (float, int))))\n        n_per_dim = []\n        ids_per_dim = []\n        for i in range(dim):\n            unique = sorted(set((val[i] for val in (values if is_tuple_space else [[x] for x in values]))))\n            n_per_dim.append(len(unique))\n            ids_per_dim.append(unique)\n        return {'tuple': is_tuple_space, 'multidim': dim > 1, 'continuous': is_continuous, 'n_per_dim': n_per_dim, 'dim': dim, 'ids': ids_per_dim}\n    action_data = process_space(actions)\n    obs_data = process_space(observations)\n    return {'tuple_actions': action_data['tuple'], 'tuple_observations': obs_data['tuple'], 'multidim_actions': action_data['multidim'], 'multidim_observations': obs_data['multidim'], 'continuous_actions': action_data['continuous'], 'continuous_observations': obs_data['continuous'], 'n_actions_per_dim': action_data['n_per_dim'], 'n_obs_per_dim': obs_data['n_per_dim'], 'action_dim': action_data['dim'], 'obs_dim': obs_data['dim'], 'action_ids': action_data['ids'], 'obs_ids': obs_data['ids']}"}
{"task_id": 411, "completion_id": 9, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def analyze(values):\n        is_tuple = any((isinstance(v, (list, tuple, np.ndarray)) for v in values))\n        if is_tuple:\n            dimension = len(values[0]) if values else 0\n        else:\n            dimension = 1\n        flat_values = []\n        for v in values:\n            if is_tuple:\n                flat_values.append(list(v))\n            else:\n                flat_values.append([v])\n        per_dim = list(zip(*flat_values)) if flat_values else []\n        n_unique = [len(set(d)) for d in per_dim]\n        unique_values = []\n        for d in per_dim:\n            unique = sorted(set(d))\n            if all((isinstance(x, int) for x in unique)):\n                unique = [int(x) for x in unique]\n            unique_values.append(unique)\n        is_continuous = False\n        all_vals = []\n        for v in values:\n            if is_tuple:\n                all_vals.extend(v)\n            else:\n                all_vals.append(v)\n        is_continuous = any((isinstance(x, float) and (not x.is_integer()) for x in all_vals))\n        return {'tuple': is_tuple, 'dimension': dimension, 'continuous': is_continuous, 'n_unique': n_unique, 'unique_values': unique_values}\n    action_info = analyze(actions)\n    obs_info = analyze(observations)\n    result = {'tuple_actions': action_info['tuple'], 'tuple_observations': obs_info['tuple'], 'multidim_actions': action_info['dimension'] > 1, 'multidim_observations': obs_info['dimension'] > 1, 'continuous_actions': action_info['continuous'], 'continuous_observations': obs_info['continuous'], 'n_actions_per_dim': action_info['n_unique'], 'n_obs_per_dim': obs_info['n_unique'], 'action_dim': action_info['dimension'], 'obs_dim': obs_info['dimension'], 'action_ids': action_info['unique_values'], 'obs_ids': obs_info['unique_values']}\n    return result\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 413, "completion_id": 0, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\"\"\"\n    n_samples = X_train.shape[0]\n    n_features = X_train.shape[1]\n    F0 = np.mean(y_train)\n    predictions = np.full(n_samples, F0)\n    for _ in range(n_estimators):\n        residuals = y_train - predictions\n        tree = fit_cart_tree(X_train, residuals, max_depth)\n        predictions += learning_rate * predict_cart_tree(X_train, tree)\n    test_predictions = np.full(X_test.shape[0], F0)\n    for _ in range(n_estimators):\n        test_predictions += learning_rate * predict_cart_tree(X_test, tree)\n    return [round(p, 4) for p in test_predictions]\ndef fit_cart_tree(X, y, max_depth):\n    \"\"\"Fit a CART regression tree.\"\"\"\n    return build_tree(X, y, max_depth)\ndef build_tree(X, y, depth, current_depth=0):\n    \"\"\"Recursively build a decision tree.\"\"\"\n    if depth == current_depth or len(np.unique(y)) == 1:\n        return {'type': 'leaf', 'value': np.mean(y)}\n    best_split = find_best_split(X, y)\n    if best_split is None:\n        return {'type': 'leaf', 'value': np.mean(y)}\n    (feature_idx, threshold) = best_split\n    left_mask = X[:, feature_idx] <= threshold\n    right_mask = X[:, feature_idx] > threshold\n    left_tree = build_tree(X[left_mask], y[left_mask], depth, current_depth + 1)\n    right_tree = build_tree(X[right_mask], y[right_mask], depth, current_depth + 1)\n    return {'type': 'split', 'feature_idx': feature_idx, 'threshold': threshold, 'left': left_tree, 'right': right_tree}\ndef find_best_split(X, y):\n    \"\"\"Find the best feature and threshold to split on.\"\"\"\n    best_mse = float('inf')\n    best_split = None\n    n_features = X.shape[1]\n    for feature_idx in range(n_features):\n        unique_values = np.unique(X[:, feature_idx])\n        for threshold in (unique_values[:-1] + unique_values[1:]) / 2:\n            left_mask = X[:, feature_idx] <= threshold\n            right_mask = X[:, feature_idx] > threshold\n            if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                continue\n            left_y = y[left_mask]\n            right_y = y[right_mask]\n            mse_left = np.mean((left_y - np.mean(left_y)) ** 2)\n            mse_right = np.mean((right_y - np.mean(right_y)) ** 2)\n            n_left = len(left_y)\n            n_right = len(right_y)\n            total_n = n_left + n_right\n            weighted_mse = (n_left * mse_left + n_right * mse_right) / total_n\n            if weighted_mse < best_mse:\n                best_mse = weighted_mse\n                best_split = (feature_idx, threshold)\n    return best_split\ndef predict_cart_tree(X, tree):\n    \"\"\"Make predictions using a trained CART tree.\"\"\"\n    n_samples = X.shape[0]\n    predictions = np.zeros(n_samples)\n    for i in range(n_samples):\n        x = X[i]\n        predictions[i] = predict_tree(x, tree)\n    return predictions\ndef predict_tree(x, tree):\n    \"\"\"Recursive function to make prediction for one sample.\"\"\"\n    if tree['type'] == 'leaf':\n        return tree['value']\n    if x[tree['feature_idx']] <= tree['threshold']:\n        return predict_tree(x, tree['left'])\n    else:\n        return predict_tree(x, tree['right'])"}
{"task_id": 413, "completion_id": 1, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    m_samples = X_test.shape[0]\n    F0 = np.full(n_samples, np.mean(y_train))\n    F_test0 = np.full(m_samples, np.mean(y_train))\n    F = F0.copy()\n    F_test = F_test0.copy()\n    np.random.seed(42)\n    for _ in range(n_estimators):\n        residuals_train = y_train - F\n        tree = build_regression_tree(X_train, residuals_train, max_depth)\n        pred_train = predict_with_tree(X_train, tree)\n        pred_test = predict_with_tree(X_test, tree)\n        F += learning_rate * pred_train\n        F_test += learning_rate * pred_test\n    return [round(x, 4) for x in F_test.tolist()]\ndef build_regression_tree(X, y, max_depth):\n    \"\"\"Build a regression tree with binary splits and mean-squared error as criterion.\"\"\"\n\n    def _build_tree(X, y, depth=0):\n        (n_samples, n_features) = X.shape\n        if depth >= max_depth or np.all(y == y[0]) or n_samples < 2:\n            return {'type': 'leaf', 'value': np.mean(y)}\n        best_mse = float('inf')\n        best_split = None\n        for feat in np.random.permutation(n_features):\n            for val in np.unique(X[:, feat]):\n                left_mask = X[:, feat] <= val\n                right_mask = X[:, feat] > val\n                if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                    continue\n                y_left = y[left_mask]\n                y_right = y[right_mask]\n                mse = 1 / n_samples * (len(y_left) * np.var(y_left) + len(y_right) * np.var(y_right))\n                if mse < best_mse:\n                    best_mse = mse\n                    best_split = {'feature': feat, 'value': val, 'left': _build_tree(X[left_mask], y[left_mask], depth + 1), 'right': _build_tree(X[right_mask], y[right_mask], depth + 1)}\n        if best_split is None:\n            return {'type': 'leaf', 'value': np.mean(y)}\n        return {'type': 'split', 'feature': best_split['feature'], 'value': best_split['value'], 'left': best_split['left'], 'right': best_split['right']}\n    return _build_tree(X, y)\ndef predict_with_tree(X, tree):\n    \"\"\"Predict using the regression tree.\"\"\"\n    n_samples = X.shape[0]\n    y_pred = np.zeros(n_samples)\n    for i in range(n_samples):\n        node = tree\n        while node['type'] != 'leaf':\n            if X[i, node['feature']] <= node['value']:\n                node = node['left']\n            else:\n                node = node['right']\n        y_pred[i] = node['value']\n    return y_pred\nX_train = np.array([[1], [2], [3], [4], [5]])\ny_train = np.array([2, 4, 5, 4, 5])\nX_test = np.array([[2.5], [3.5]])"}
{"task_id": 413, "completion_id": 2, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    n_samples = len(y_train)\n    n_features = X_train.shape[1]\n    init_pred = np.mean(y_train)\n    y_pred = np.full(n_samples, init_pred)\n\n    def calc_mse(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    class Node:\n\n        def __init__(self):\n            self.feature_idx = None\n            self.threshold = None\n            self.left = None\n            self.right = None\n            self.value = None\n\n    def build_tree(X, y, depth):\n        node = Node()\n        idxs = np.arange(X.shape[0])\n        (feature_idx, threshold) = find_best_split(X, y, idxs)\n        if feature_idx is None or depth == 0:\n            node.value = np.mean(y)\n            return node\n        left_indices = idxs[X[:, feature_idx] < threshold]\n        right_indices = idxs[X[:, feature_idx] >= threshold]\n        if len(left_indices) == 0 or len(right_indices) == 0:\n            node.value = np.mean(y)\n            return node\n        node.feature_idx = feature_idx\n        node.threshold = threshold\n        node.left = build_tree(X[left_indices], y[left_indices], depth - 1)\n        node.right = build_tree(X[right_indices], y[right_indices], depth - 1)\n        return node\n\n    def find_best_split(X, y, idxs):\n        best_gain = 0\n        (best_idx, best_threshold) = (None, None)\n        for feature_idx in range(X.shape[1]):\n            thresholds = np.unique(X[idxs, feature_idx])\n            for threshold in thresholds:\n                left_indices = idxs[X[:, feature_idx] < threshold]\n                right_indices = idxs[X[:, feature_idx] >= threshold]\n                if len(left_indices) == 0 or len(right_indices) == 0:\n                    continue\n                y_left = y[left_indices]\n                y_right = y[right_indices]\n                current_loss = calc_mse(y, np.mean(y))\n                new_loss = len(y_left) / len(y) * calc_mse(y_left, np.mean(y_left)) + len(y_right) / len(y) * calc_mse(y_right, np.mean(y_right))\n                loss_reduct = current_loss - new_loss\n                if loss_reduct > best_gain:\n                    best_gain = loss_reduct\n                    best_idx = feature_idx\n                    best_threshold = threshold\n        return (best_idx, best_threshold)\n\n    def predict_tree(tree, x):\n        if tree.left is None and tree.right is None:\n            return tree.value\n        feature_val = x[tree.feature_idx]\n        if feature_val < tree.threshold:\n            return predict_tree(tree.left, x)\n        else:\n            return predict_tree(tree.right, x)\n    for _ in range(n_estimators):\n        residuals = y_train - y_pred\n        tree = build_tree(X_train, residuals, max_depth)\n        tree_predictions = np.array([predict_tree(tree, x) for x in X_train])\n        y_pred += learning_rate * tree_predictions\n    y_test_pred = np.array([init_pred] * X_test.shape[0])\n    for tree_idx in range(n_estimators):\n        tree = build_tree(X_train, y_train - predict_current_tree(tree_idx, X_train, init_pred), max_depth)\n        tree_predictions = np.array([predict_tree(tree, x) for x in X_test])\n        y_test_pred += learning_rate * tree_predictions\n\n    def predict_current_tree(iteration, X, init_pred):\n        if iteration == 0:\n            return np.array([init_pred] * X.shape[0])\n        pred = np.array([init_pred] * X.shape[0])\n        for i in range(iteration):\n            tree = build_tree(X_train, y_train - predict_current_tree(i, X_train, init_pred), max_depth)\n            tree_preds = np.array([predict_tree(tree, x) for x in X])\n            pred += learning_rate * tree_preds\n        return pred\n    return [round(float(p), 4) for p in y_test_pred]"}
{"task_id": 413, "completion_id": 3, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"\n    Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    F = np.full_like(y_train, np.mean(y_train))\n\n    def mse(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    def build_tree(X, y, depth=0):\n        \"\"\"Recursively build a decision tree using mean-squared-error as split criterion.\"\"\"\n        (n_samples, n_features) = X.shape\n        best_split = {'feature_index': None, 'threshold': None, 'mse_reduction': -1}\n        (best_left_idx, best_right_idx) = (None, None)\n        if depth < max_depth:\n            for feature_index in range(n_features):\n                thresholds = np.unique(X[:, feature_index])\n                for threshold in thresholds:\n                    left = X[:, feature_index] <= threshold\n                    if not np.any(left) or not np.any(~left):\n                        continue\n                    current_mse = mse(y, np.full_like(y, np.mean(y)))\n                    left_pred = np.mean(y[left])\n                    right_pred = np.mean(y[~left])\n                    new_mse = mse(y[left], np.full_like(y[left], left_pred)) + mse(y[~left], np.full_like(y[~left], right_pred))\n                    reduction = current_mse - new_mse / n_samples\n                    if reduction > best_split['mse_reduction']:\n                        best_split['feature_index'] = feature_index\n                        best_split['threshold'] = threshold\n                        best_split['mse_reduction'] = reduction\n                        best_left_idx = left\n                        best_right_idx = ~left\n        if best_split['mse_reduction'] < 0:\n            return {'prediction': np.mean(y)}\n        left_tree = build_tree(X[best_left_idx], y[best_left_idx], depth + 1)\n        right_tree = build_tree(X[best_right_idx], y[best_right_idx], depth + 1)\n        return {'feature_index': best_split['feature_index'], 'threshold': best_split['threshold'], 'left': left_tree, 'right': right_tree}\n\n    def predict_tree(tree, x):\n        \"\"\"Predict the value of a sample using a decision tree.\"\"\"\n        if 'prediction' in tree:\n            return tree['prediction']\n        if x[tree['feature_index']] <= tree['threshold']:\n            return predict_tree(tree['left'], x)\n        else:\n            return predict_tree(tree['right'], x)\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        tree = build_tree(X_train, residuals)\n        tree_preds = np.array([predict_tree(tree, x) for x in X_train])\n        F += learning_rate * tree_preds\n    test_predictions = [predict_tree(build_tree(X_train, y_train - F), x) for x in X_test]\n    test_predictions = [learning_rate * p + F.mean() for p in test_predictions]\n    return [round(p, 4) for p in test_predictions]"}
{"task_id": 413, "completion_id": 4, "solution": "import numpy as np\nclass Node:\n    \"\"\"Represents a node in a decision tree.\"\"\"\n\n    def __init__(self, feature_index=None, threshold=None, left=None, right=None, value=None):\n        self.feature_index = feature_index\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\nclass DecisionTree:\n    \"\"\"A simple CART regression tree.\"\"\"\n\n    def __init__(self, max_depth=3):\n        self.max_depth = max_depth\n        self.root = None\n\n    def fit(self, X: np.ndarray, y: np.ndarray):\n        \"\"\"Build the regression tree.\"\"\"\n        self.root = self._grow_tree(X, y)\n\n    def _grow_tree(self, X: np.ndarray, y: np.ndarray, depth=0):\n        \"\"\"Recursively grow the tree.\"\"\"\n        (n_samples, n_features) = X.shape\n        if depth >= self.max_depth:\n            return Node(value=np.mean(y))\n        best_split = self._find_best_split(X, y)\n        if best_split.feature_index is None:\n            return Node(value=np.mean(y))\n        left_mask = X[:, best_split.feature_index] <= best_split.threshold\n        right_mask = X[:, best_split.feature_index] > best_split.threshold\n        left = self._grow_tree(X[left_mask], y[left_mask], depth + 1)\n        right = self._grow_tree(X[right_mask], y[right_mask], depth + 1)\n        return Node(feature_index=best_split.feature_index, threshold=best_split.threshold, left=left, right=right)\n\n    def _find_best_split(self, X: np.ndarray, y: np.ndarray):\n        \"\"\"Find the best split based on MSE improvement.\"\"\"\n        (n_samples, n_features) = X.shape\n        best_mse = float('inf')\n        best_threshold = None\n        best_feature_index = None\n        for feature_idx in range(n_features):\n            unique_values = np.unique(X[:, feature_idx])\n            thresholds = unique_values\n            for threshold in thresholds:\n                left_mask = X[:, feature_idx] <= threshold\n                right_mask = X[:, feature_idx] > threshold\n                if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                    continue\n                y_left = y[left_mask]\n                y_right = y[right_mask]\n                mse_left = np.mean((y_left - np.mean(y_left)) ** 2)\n                mse_right = np.mean((y_right - np.mean(y_right)) ** 2)\n                total_mse = (len(y_left) * mse_left + len(y_right) * mse_right) / n_samples\n                if total_mse < best_mse:\n                    best_mse = total_mse\n                    best_threshold = threshold\n                    best_feature_index = feature_idx\n        return Node(feature_index=best_feature_index, threshold=best_threshold)\n\n    def predict(self, X: np.ndarray) -> np.ndarray:\n        \"\"\"Predict values for X using the trained tree.\"\"\"\n        return np.array([self._predict_one(x, self.root) for x in X])\n\n    def _predict_one(self, x: np.ndarray, node: Node):\n        \"\"\"Predict for a single sample.\"\"\"\n        if node.value is not None:\n            return node.value\n        if x[node.feature_index] <= node.threshold:\n            return self._predict_one(x, node.left)\n        else:\n            return self._predict_one(x, node.right)\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\"\"\"\n    n_samples = X_train.shape[0]\n    y_pred = np.full(n_samples, np.mean(y_train))\n    trees = []\n    for _ in range(n_estimators):\n        residuals = y_train - y_pred\n        tree = DecisionTree(max_depth=max_depth)\n        tree.fit(X_train, residuals)\n        y_pred += learning_rate * tree.predict(X_train)\n        trees.append(tree)\n    y_test_pred = np.full(X_test.shape[0], np.mean(y_train))\n    for tree in trees:\n        y_test_pred += learning_rate * tree.predict(X_test)\n    return [round(float(val), 4) for val in y_test_pred]"}
{"task_id": 413, "completion_id": 5, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n\n    class DecisionNode:\n\n        def __init__(self, feature_index=None, threshold=None, left=None, right=None, value=None):\n            self.feature_index = feature_index\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.value = value\n\n    def fit_regression_tree(X, y, depth=0, max_depth=3):\n        if depth >= max_depth or len(np.unique(y)) == 1:\n            return DecisionNode(value=np.mean(y))\n        best_mse = float('inf')\n        best_split = None\n        for feature_idx in range(X.shape[1]):\n            unique_values = np.sort(np.unique(X[:, feature_idx]))\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n            for threshold in thresholds:\n                left_mask = X[:, feature_idx] <= threshold\n                right_mask = X[:, feature_idx] > threshold\n                if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                    continue\n                y_left = y[left_mask]\n                y_right = y[right_mask]\n                left_mse = np.mean((y_left - np.mean(y_left)) ** 2)\n                right_mse = np.mean((y_right - np.mean(y_right)) ** 2)\n                split_mse = (len(y_left) * left_mse + len(y_right) * right_mse) / len(y)\n                if split_mse < best_mse:\n                    best_mse = split_mse\n                    best_split = {'feature_idx': feature_idx, 'threshold': threshold, 'left_pred': np.mean(y[left_mask]), 'right_pred': np.mean(y[right_mask])}\n        if best_split is None:\n            return DecisionNode(value=np.mean(y))\n        left_mask = X[:, best_split['feature_idx']] <= best_split['threshold']\n        right_mask = X[:, best_split['feature_idx']] > best_split['threshold']\n        left_tree = fit_regression_tree(X[left_mask], y[left_mask], depth + 1, max_depth)\n        right_tree = fit_regression_tree(X[right_mask], y[right_mask], depth + 1, max_depth)\n        return DecisionNode(feature_index=best_split['feature_idx'], threshold=best_split['threshold'], left=left_tree, right=right_tree)\n\n    def predict_tree(tree, x):\n        if isinstance(tree, DecisionNode) and tree.value is not None:\n            return tree.value\n        if x[tree.feature_index] <= tree.threshold:\n            return predict_tree(tree.left, x)\n        else:\n            return predict_tree(tree.right, x)\n\n    def predict(X, trees, init_pred):\n        return [init_pred + learning_rate * sum((predict_tree(tree, x) for tree in trees)) for x in X]\n    init_pred = np.mean(y_train)\n    trees = []\n    current_pred = np.array([init_pred] * len(y_train))\n    for _ in range(n_estimators):\n        residuals = y_train - current_pred\n        tree = fit_regression_tree(X_train, residuals, max_depth=max_depth)\n        tree_predictions = np.array([predict_tree(tree, x) for x in X_train])\n        current_pred += learning_rate * tree_predictions\n        trees.append(tree)\n    predictions = predict(X_test, trees, init_pred)\n    return [round(p, 4) for p in predictions]"}
{"task_id": 413, "completion_id": 6, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n    \n    Uses squared error loss with limited-depth regression trees for boosting.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    m_samples = X_test.shape[0]\n    initial_pred = np.mean(y_train)\n    F = np.full(n_samples, initial_pred, dtype=float)\n    tree_predictions = []\n    trees = []\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        tree = build_tree(X_train, residuals, max_depth)\n        trees.append(tree)\n        predictions = predict_tree(X_train, tree, 0)\n        F += learning_rate * predictions\n        test_pred = predict_tree(X_test, tree, 0)\n        tree_predictions.append(test_pred)\n    initial_pred_test = np.full(m_samples, initial_pred, dtype=float)\n    final_predictions = initial_pred_test + learning_rate * np.sum(np.array(tree_predictions), axis=0)\n    return [round(float(pred), 4) for pred in final_predictions]\ndef build_tree(X: np.ndarray, y: np.ndarray, max_depth: int):\n    \"\"\"Build a binary regression tree using MSE as the splitting criterion.\"\"\"\n    if max_depth == 0 or len(np.unique(y)) == 1:\n        return {'leaf': np.mean(y)}\n    best_mse = float('inf')\n    best_split = None\n    (n_samples, n_features) = X.shape\n    for feature in range(n_features):\n        sorted_indices = np.argsort(X[:, feature])\n        sorted_values = X[sorted_indices, feature]\n        sorted_y = y[sorted_indices]\n        sums = np.cumsum(sorted_y)\n        total_sum = sums[-1]\n        means = sums / (1 + np.arange(n_samples))\n        for i in range(n_samples - 1):\n            threshold = (sorted_values[i] + sorted_values[i + 1]) / 2\n            left_mean = means[i]\n            right_mean = (total_sum - sums[i]) / (n_samples - i - 1)\n            if i + 1 == n_samples:\n                break\n            left_mse = sum((sorted_y[:i + 1] - left_mean) ** 2)\n            right_mse = sum((sorted_y[i + 1:] - right_mean) ** 2)\n            total_mse = left_mse + right_mse\n            if total_mse < best_mse:\n                best_mse = total_mse\n                best_split = {'feature': feature, 'threshold': threshold, 'type': 'node', 'left': build_tree(X[sorted_indices[:i + 1]], y[sorted_indices[:i + 1]], max_depth - 1), 'right': build_tree(X[sorted_indices[i + 1:]], y[sorted_indices[i + 1:]], max_depth - 1)}\n    if best_split is None:\n        return {'leaf': np.mean(y)}\n    return best_split\ndef predict_tree(X: np.ndarray, tree: dict, depth: int) -> np.ndarray:\n    \"\"\"Predict on new data using the built regression tree.\"\"\"\n    n_samples = X.shape[0]\n    predictions = np.zeros(n_samples)\n    if 'leaf' in tree:\n        return np.full(n_samples, tree['leaf'])\n    feature = tree['feature']\n    threshold = tree['threshold']\n    left_tree = tree['left']\n    right_tree = tree['right']\n    left_indices = X[:, feature] <= threshold\n    right_indices = X[:, feature] > threshold\n    if left_indices.any():\n        predictions[left_indices] = predict_tree(X[left_indices], left_tree, depth + 1)\n    if right_indices.any():\n        predictions[right_indices] = predict_tree(X[right_indices], right_tree, depth + 1)\n    return predictions\nX_train = np.array([[0.5], [1.2], [1.8], [2.3], [3.1]])\ny_train = np.array([0.4, 0.7, 1.5, 2.0, 2.4])\nX_test = np.array([[2.0], [3.0]])\npredictions = gbdt_regression(X_train, y_train, X_test, n_estimators=100, learning_rate=0.05, max_depth=2)"}
{"task_id": 413, "completion_id": 7, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    n_test_samples = X_test.shape[0]\n    F = np.full(n_samples, np.mean(y_train))\n    F_test = np.full(n_test_samples, np.mean(y_train))\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        tree = fit_regression_tree(X_train, residuals, max_depth)\n        predictions = predict_tree(X_train, tree)\n        predictions_test = predict_tree(X_test, tree)\n        F += learning_rate * predictions\n        F_test += learning_rate * predictions_test\n    return [round(p, 4) for p in F_test.tolist()]\ndef fit_regression_tree(X: np.ndarray, y: np.ndarray, max_depth: int):\n    \"\"\"Fit a regression tree with mean squared error as the criterion.\"\"\"\n    (n_samples, n_features) = X.shape\n\n    def build_tree(X, y, depth):\n        n_samples = X.shape[0]\n        best_loss = float('inf')\n        best_split = None\n        for feature in range(n_features):\n            unique_values = np.unique(X[:, feature])\n            for split_value in np.sort(unique_values):\n                left_indices = X[:, feature] <= split_value\n                right_indices = X[:, feature] > split_value\n                if not (np.any(left_indices) and np.any(right_indices)):\n                    continue\n                loss_left = mse(y[left_indices])\n                loss_right = mse(y[right_indices])\n                loss = (np.sum(left_indices) * loss_left + np.sum(right_indices) * loss_right) / n_samples\n                if loss < best_loss:\n                    best_loss = loss\n                    best_split = {'feature': feature, 'value': split_value, 'left_indices': left_indices, 'right_indices': right_indices}\n        if best_split is None or depth >= max_depth:\n            return {'type': 'leaf', 'value': y.mean()}\n        left_child = build_tree(X[best_split['left_indices']], y[best_split['left_indices']], depth + 1)\n        right_child = build_tree(X[best_split['right_indices']], y[best_split['right_indices']], depth + 1)\n        return {'type': 'internal', 'feature': best_split['feature'], 'value': best_split['value'], 'left': left_child, 'right': right_child}\n\n    def mse(values):\n        if len(values) == 0:\n            return float('inf')\n        return np.mean((values - values.mean()) ** 2)\n    return build_tree(X, y, 0)\ndef predict_tree(X: np.ndarray, tree: dict) -> np.ndarray:\n    \"\"\"Predict using the regression tree.\"\"\"\n    n_samples = X.shape[0]\n    predictions = np.zeros(n_samples)\n\n    def predict_sample(x, tree):\n        if tree['type'] == 'leaf':\n            return tree['value']\n        if x[tree['feature']] <= tree['value']:\n            return predict_sample(x, tree['left'])\n        else:\n            return predict_sample(x, tree['right'])\n    for i in range(n_samples):\n        predictions[i] = predict_sample(X[i], tree)\n    return predictions"}
{"task_id": 413, "completion_id": 8, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, feature_idx=None, threshold=None, left=None, right=None, value=None):\n        self.feature_idx = feature_idx\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\n\n    def is_leaf(self):\n        return self.value is not None\ndef mean_squared_error(y_true, y_pred):\n    return np.mean((y_true - y_pred) ** 2)\ndef predict_tree(x, node):\n    if node.is_leaf():\n        return node.value\n    if x[node.feature_idx] <= node.threshold:\n        return predict_tree(x, node.left)\n    else:\n        return predict_tree(x, node.right)\ndef fit_tree(X, y, depth=0, max_depth=3):\n    (n_samples, n_features) = X.shape\n    y_mean = np.mean(y)\n    best_mse = mean_squared_error(y, np.full_like(y, y_mean))\n    best_error = best_mse\n    best_idx = None\n    best_threshold = None\n    best_right_idx = None\n    for feature_idx in range(n_features):\n        thresholds = np.unique(X[:, feature_idx])\n        for threshold in thresholds:\n            left_idx = X[:, feature_idx] <= threshold\n            right_idx = ~left_idx\n            if np.sum(left_idx) == 0 or np.sum(right_idx) == 0:\n                continue\n            y_left = y[left_idx]\n            y_right = y[right_idx]\n            y_pred = np.where(left_idx, np.mean(y_left), np.mean(y_right))\n            new_mse = mean_squared_error(y, y_pred)\n            if new_mse < best_error:\n                best_error = new_mse\n                best_idx = feature_idx\n                best_threshold = threshold\n                best_right_idx = right_idx\n    if best_error >= best_mse or depth >= max_depth - 1:\n        return Node(value=y_mean)\n    left_idx = X[:, best_idx] <= best_threshold\n    right_idx = ~left_idx\n    left_tree = fit_tree(X[left_idx], y[left_idx], depth + 1, max_depth)\n    right_tree = fit_tree(X[right_idx], y[right_idx], depth + 1, max_depth)\n    return Node(feature_idx=best_idx, threshold=best_threshold, left=left_tree, right=right_tree)\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    n_samples = X_train.shape[0]\n    y_train = np.array(y_train)\n    predictions = np.full(n_samples, np.mean(y_train))\n    trees = []\n    for _ in range(n_estimators):\n        residuals = y_train - predictions\n        tree = fit_tree(X_train, residuals, max_depth=max_depth)\n        tree_preds = np.array([predict_tree(x, tree) for x in X_train])\n        predictions += learning_rate * tree_preds\n        trees.append(tree)\n    test_predictions = np.zeros(X_test.shape[0])\n    for tree in trees:\n        test_predictions += np.array([predict_tree(x, tree) for x in X_test])\n    test_predictions += np.mean(y_train)\n    return [round(val, 4) for val in test_predictions.tolist()]\nX_train = np.array([[1], [2], [3], [4], [5]])\ny_train = np.array([1, 2, 3, 4, 5])\nX_test = np.array([[2.5], [3.5]])\npredictions = gbdt_regression(X_train, y_train, X_test, n_estimators=10, learning_rate=0.1, max_depth=2)"}
{"task_id": 413, "completion_id": 9, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n    \n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n    \n    Returns\n   -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n\n    class DecisionTreeNode:\n\n        def __init__(self):\n            self.feature_index = None\n            self.threshold = None\n            self.left = None\n            self.right = None\n            self.value = None\n\n    def calculate_mse(y):\n        \"\"\"Calculate mean squared error for a group of target values.\"\"\"\n        return np.mean((y - np.mean(y)) ** 2)\n\n    def get_best_split(X, y):\n        \"\"\"Find the best feature and threshold to split on.\"\"\"\n        best_mse = float('inf')\n        best_feature_index = None\n        best_threshold = None\n        (n_samples, n_features) = X.shape\n        for feature_index in range(n_features):\n            unique_values = np.unique(X[:, feature_index])\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n            for threshold in thresholds:\n                left_mask = X[:, feature_index] <= threshold\n                right_mask = X[:, feature_index] > threshold\n                y_left = y[left_mask]\n                y_right = y[right_mask]\n                n_left = len(y_left)\n                n_right = len(y_right)\n                if n_left == 0 or n_right == 0:\n                    continue\n                mse_left = calculate_mse(y_left)\n                mse_right = calculate_mse(y_right)\n                weighted_mse = (n_left * mse_left + n_right * mse_right) / (n_left + n_right)\n                if weighted_mse < best_mse:\n                    best_mse = weighted_mse\n                    best_feature_index = feature_index\n                    best_threshold = threshold\n        return (best_feature_index, best_threshold)\n\n    def build_tree(X, y, depth):\n        \"\"\"Recursively build decision tree with limited depth.\"\"\"\n        node = DecisionTreeNode()\n        if depth == 0 or calculate_mse(y) == 0:\n            node.value = np.mean(y)\n            return node\n        (feature_index, threshold) = get_best_split(X, y)\n        if feature_index is None:\n            node.value = np.mean(y)\n            return node\n        node.feature_index = feature_index\n        node.threshold = threshold\n        left_mask = X[:, feature_index] <= threshold\n        right_mask = X[:, feature_index] > threshold\n        node.left = build_tree(X[left_mask], y[left_mask], depth - 1)\n        node.right = build_tree(X[right_mask], y[right_mask], depth - 1)\n        return node\n\n    def predict_tree(node, x):\n        \"\"\"Make a prediction using the decision tree.\"\"\"\n        if node.value is not None:\n            return node.value\n        if x[node.feature_index] <= node.threshold:\n            return predict_tree(node.left, x)\n        else:\n            return predict_tree(node.right, x)\n    predictions = np.full(X_train.shape[0], np.mean(y_train))\n    for _ in range(n_estimators):\n        residuals = y_train - predictions\n        tree = build_tree(X_train, residuals, max_depth)\n        for i in range(X_train.shape[0]):\n            pred = predict_tree(tree, X_train[i])\n            predictions[i] += learning_rate * pred\n    final_predictions = []\n    for x in X_test:\n        prediction = np.mean(y_train)\n        for _ in range(n_estimators):\n            tree = build_tree(X_train, y_train - predictions, max_depth)\n            prediction += learning_rate * predict_tree(tree, x)\n    trees = []\n    predictions = np.full(X_train.shape[0], np.mean(y_train))\n    for _ in range(n_estimators):\n        residuals = y_train - predictions\n        tree = build_tree(X_train, residuals, max_depth)\n        trees.append(tree)\n        for i in range(X_train.shape[0]):\n            pred = predict_tree(tree, X_train[i])\n            predictions[i] += learning_rate * pred\n    final_predictions = [np.mean(y_train)] * X_test.shape[0]\n    for tree in trees:\n        for i in range(X_test.shape[0]):\n            pred = predict_tree(tree, X_test[i])\n            final_predictions[i] += learning_rate * pred\n    return [round(prediction, 4) for prediction in final_predictions]"}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\nimport math\nimport numpy as np\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the probability density function (PDF) of a multivariate Gaussian distribution.\n    \n    Parameters:\n    - X: NumPy array of shape (n_samples, n_features), data points to evaluate.\n    - mean: NumPy array of shape (n_features,), mean vector of the distribution.\n    - cov: NumPy array of shape (n_features, n_features), covariance matrix of the distribution.\n    \n    Returns:\n    - A Python list where the i-th element is the PDF value of X[i], \n      rounded to four decimal places.\n    \"\"\"\n    X = np.asarray(X, dtype=np.float64)\n    mean = np.asarray(mean, dtype=np.float64)\n    cov = np.asarray(cov, dtype=np.float64)\n    if X.ndim == 1:\n        X = X.reshape((1, -1))\n    (n_samples, n_features) = X.shape\n    if mean.ndim != 1 or len(mean) != n_features:\n        raise ValueError('mean must be a 1D array of length n_features')\n    cov_det = np.linalg.det(cov)\n    cov_inv = np.linalg.inv(cov)\n    d = n_features\n    const_factor = 1.0 / math.sqrt((2 * math.pi) ** d * cov_det)\n    pdf_values = []\n    for x in X:\n        diff = x - mean\n        exponent = -0.5 * np.dot(np.dot(diff, cov_inv), diff.T)\n        pdf = const_factor * math.exp(exponent)\n        pdf_values.append(round(pdf, 4))\n    return pdf_values\nX = np.array([[0.5, 0.5], [-0.5, -0.5], [1.0, 2.0]])\nmean = np.array([0.0, 0.0])\ncov = np.array([[1.0, 0.0], [0.0, 1.0]])"}
{"task_id": 416, "completion_id": 1, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Compute the multivariate Gaussian (Normal) PDF at each point in X.\n    \n    Parameters:\n    X (np.ndarray): Array of shape (n_samples, n_features) containing data points.\n    mean (np.ndarray): Mean vector of shape (n_features,).\n    cov (np.ndarray): Covariance matrix of shape (n_features, n_features).\n    \n    Returns:\n    list: List where each element is the PDF value rounded to 4 decimal places\n          for the corresponding row in X.\n    \"\"\"\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    n_features = X.shape[1]\n    d = n_features\n    cov_inv = np.linalg.inv(cov)\n    cov_det = np.linalg.det(cov)\n    norm_const = 1.0 / math.sqrt((2 * math.pi) ** d * cov_det)\n    result = []\n    for x in X:\n        diff = x - mean\n        exponent = -0.5 * np.dot(np.dot(diff.T, cov_inv), diff)\n        pdf = norm_const * math.exp(exponent)\n        result.append(round(pdf, 4))\n    return result"}
{"task_id": 416, "completion_id": 2, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the multivariate Gaussian PDF for each data point in X.\n\n    Parameters:\n    - X: numpy.ndarray of shape (n_samples, n_features)\n         The input data points.\n    - mean: numpy.ndarray of shape (n_features,)\n            The mean vector of the Gaussian distribution.\n    - cov: numpy.ndarray of shape (n_features, n_features)\n           The positive-definite covariance matrix.\n\n    Returns:\n    - A list of length n_samples where each element is the PDF value for X[i],\n      rounded to four decimal places.\n    \"\"\"\n    (n_samples, d) = X.shape\n    cov = np.array(cov)\n    mean = np.array(mean).reshape(-1)\n    det = np.linalg.det(cov)\n    cov_inv = np.linalg.inv(cov)\n    normalization = 1 / math.sqrt((2 * math.pi) ** d * det)\n    pdf_values = []\n    for i in range(n_samples):\n        x = X[i]\n        diff = x - mean\n        exponent = -0.5 * np.dot(diff, np.dot(cov_inv, diff))\n        pdf = normalization * math.exp(exponent)\n        pdf_values.append(round(pdf, 4))\n    return pdf_values\nX = np.array([[1.0, 2.0], [2.0, 3.0], [0.0, 0.0]])\nmean = np.array([0.0, 0.0])\ncov = np.array([[1.0, 0.5], [0.5, 1.0]])"}
{"task_id": 416, "completion_id": 3, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Compute the probability density function (PDF) of a multivariate Gaussian distribution.\n\n    Parameters:\n    - X: numpy.ndarray, shape (n_samples, n_features)\n       Data points for which the PDF is to be evaluated.\n    - mean: numpy.ndarray, shape (n_features,)\n       Mean vector of the multivariate Gaussian distribution.\n    - cov: numpy.ndarray, shape (n_features, n_features)\n       Covariance matrix of the distribution. Must be positive-definite.\n\n    Returns:\n    - List[float], shape (n_samples,)\n       A list of PDF values for each sample in X, rounded to 4 decimal places.\n    \"\"\"\n    mean = np.array(mean)\n    cov = np.array(cov)\n    d = mean.shape[0]\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    elif X.ndim == 2:\n        pass\n    else:\n        raise ValueError('X must be a 1D or 2D array.')\n    det = np.linalg.det(cov)\n    if det <= 0:\n        raise np.linalg.LinAlgError('Covariance matrix must be positive-definite and invertible.')\n    inv_cov = np.linalg.inv(cov)\n    normalization = 1.0 / math.sqrt((2 * math.pi) ** d * det)\n    result = []\n    for x in X:\n        diff = x - mean\n        exp_component = -0.5 * np.dot(np.dot(diff.T, inv_cov), diff)\n        pdf = normalization * math.exp(exp_component)\n        result.append(round(pdf, 4))\n    return result\nX = np.array([[1, 2], [2, 3]])\nmean = np.array([1, 2])\ncov = np.array([[1, 0.5], [0.5, 1]])"}
{"task_id": 416, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Compute the probability density function (PDF) values of a multivariate Gaussian distribution\n    for a set of samples.\n\n    Parameters:\n    - X: numpy.ndarray of shape (n_samples, n_features)\n        The data points for which to compute the PDF.\n    - mean: numpy.ndarray of shape (n_features,)\n        The mean vector of the distribution.\n    - cov: numpy.ndarray of shape (n_features, n_features)\n        The covariance matrix of the distribution (must be positive-definite).\n\n    Returns:\n    - List of PDF values for each row in X, rounded to four decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    mean = np.array(mean, dtype=float)\n    cov_inv = np.linalg.inv(cov)\n    cov_det = np.linalg.det(cov)\n    norm_const = 1.0 / math.sqrt((2 * math.pi) ** n_features * cov_det)\n    pdf_values = []\n    for i in range(n_samples):\n        x = X[i]\n        diff = x - mean\n        exponent = -0.5 * np.dot(np.dot(diff, cov_inv), diff.T)\n        pdf = norm_const * math.exp(exponent)\n        pdf_values.append(round(pdf, 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 5, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Compute the probability density function (PDF) of a multivariate Gaussian distribution.\n    \n    Parameters:\n        X (np.ndarray): Data points of shape (n_samples, n_features).\n        mean (np.ndarray): Mean vector of shape (n_features,).\n        cov (np.ndarray): Covariance matrix of shape (n_features, n_features).\n    \n    Returns:\n        List: A list with the PDF values, one for each data point in X,\n              each rounded to 4 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    d = n_features\n    cov_det = np.linalg.det(cov)\n    cov_inv = np.linalg.inv(cov)\n    sqrt_2pi_d = math.sqrt((2 * math.pi) ** d)\n    pdf_values = []\n    for i in range(n_samples):\n        x = X[i]\n        diff = x - mean\n        exponent = -0.5 * np.dot(np.dot(diff, cov_inv), diff.T)\n        pdf = 1.0 / (sqrt_2pi_d * math.sqrt(cov_det)) * math.exp(exponent)\n        pdf_values.append(round(pdf, 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 6, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Compute the probability density function (PDF) of a multivariate Gaussian distribution.\n    \n    Parameters:\n    - X: numpy.ndarray of shape (n_samples, n_features) or (n_samples, 1)\n        The data points for which to compute the PDF.\n    - mean: numpy.ndarray of shape (n_features,)\n        The mean vector of the multivariate Gaussian distribution.\n    - cov: numpy.ndarray of shape (n_features, n_features)\n        The positive-definite covariance matrix of the multivariate Gaussian distribution.\n    \n    Returns:\n    - List[float]: A list of length n_samples where each element is the PDF evaluated at X[i],\n                   rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    mean = np.array(mean).reshape(-1)\n    (n_samples, n_features) = X.shape\n    if mean.shape[0] != n_features or cov.shape != (n_features, n_features):\n        raise ValueError('Incompatible dimensions of inputs.')\n    d = cov.shape[0]\n    cov_det = np.linalg.det(cov)\n    cov_inv = np.linalg.inv(cov)\n    norm_factor = 1.0 / math.sqrt((2 * math.pi) ** d * cov_det)\n    pdf_values = []\n    for x in X:\n        x_centered = x - mean\n        exponent = -0.5 * np.dot(np.dot(x_centered.T, cov_inv), x_centered)\n        pdf_value = norm_factor * math.exp(exponent)\n        pdf_values.append(round(pdf_value, 4))\n    return pdf_values\nX = np.array([[0, 0], [1, 1]])\nmean = np.array([0.0, 0.0])\ncov = np.array([[1.0, 0.5], [0.5, 1.0]])"}
{"task_id": 416, "completion_id": 7, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Compute the probability density function (PDF) of a multivariate Gaussian distribution\n    for each data point in X.\n\n    Parameters:\n    - X : numpy.ndarray of shape (n_samples, n_features)\n        The input data points.\n    - mean : numpy.ndarray of shape (n_features,)\n        The mean vector of the multivariate Gaussian distribution.\n    - cov : numpy.ndarray of shape (n_features, n_features)\n        The covariance matrix of the distribution, must be symmetric and positive-definite.\n\n    Returns:\n    - A Python list of length n_samples, containing the computed PDF values \n      for each sample in X, rounded to 4 decimal places.\n    \"\"\"\n    n_features = len(mean)\n    n_samples = X.shape[0]\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n        mean = mean.reshape(-1, 1)\n    det = np.linalg.det(cov)\n    if det <= 1e-10:\n        raise ValueError('Covariance matrix is not positive definite.')\n    inv_cov = np.linalg.inv(cov)\n    norm_const = 1.0 / math.sqrt((2 * math.pi) ** n_features * det)\n    pdf_values = []\n    for x in X:\n        diff = x - mean\n        exponent = -0.5 * np.dot(np.dot(diff.T, inv_cov), diff)\n        pdf = norm_const * math.exp(exponent)\n        pdf_values.append(round(pdf, 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the multivariate Gaussian Probability Density Function (PDF).\n    \n    Parameters:\n    - X: A numpy array of shape (n_samples, n_features) representing data points.\n         If a 1D array, implicitly reshaped to (n_samples, 1).\n    - mean: A numpy array of shape (n_features,) representing the mean vector.\n    - cov: A numpy array of shape (n_features, n_features) representing the covariance matrix,\n           assumed to be symmetric and positive definite.\n\n    Returns:\n    - A list where each element is the PDF value for each row in X, rounded to 4 decimals.\n    \"\"\"\n    (n_samples, d) = X.shape\n    cov = np.array(cov)\n    mean = np.array(mean)\n    cov_inv = np.linalg.inv(cov)\n    det = np.linalg.det(cov)\n    coefficient = 1.0 / math.sqrt((2 * math.pi) ** d * det)\n    pdf_values = []\n    for i in range(n_samples):\n        x = X[i]\n        diff = x - mean\n        exponent = -0.5 * np.dot(np.dot(diff, cov_inv), diff.T)\n        pdf = coefficient * math.exp(exponent)\n        pdf_values.append(round(pdf, 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 9, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the probability density function (PDF) values\n    of a multivariate Gaussian (Normal) distribution for each\n    data point in X.\n\n    Parameters:\n    -----------\n    X : numpy.ndarray\n        Array of shape (n_samples, n_features) containing data points.\n    mean : numpy.ndarray\n        Mean vector of shape (n_features,).\n    cov : numpy.ndarray\n        Covariance matrix of shape (n_features, n_features),\n        must be symmetric and positive definite.\n\n    Returns:\n    --------\n    list\n        A list where the i-th element is the PDF value of X[i],\n        rounded to 4 decimal places.\n    \"\"\"\n    n_samples = X.shape[0]\n    n_features = X.shape[1]\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    dim = n_features\n    det_2pi = (2 * math.pi) ** dim\n    cov_inv = np.linalg.inv(cov)\n    cov_det = np.linalg.det(cov)\n    coeffs = 1.0 / math.sqrt(det_2pi * cov_det)\n    pdf_list = []\n    for x in X:\n        delta = x - mean\n        exponent = -0.5 * np.dot(np.dot(delta.T, cov_inv), delta)\n        pdf = coeffs * math.exp(exponent)\n        pdf_list.append(round(pdf, 4))\n    return pdf_list\nX = np.array([[1.0, 2.0], [2.0, 3.0]])\nmean = np.array([1.0, 2.0])\ncov = np.array([[2.0, 1.0], [1.0, 2.0]])"}
{"task_id": 419, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"\n    Perform Bayesian linear regression with Maximum A Posteriori (MAP) prediction.\n\n    Parameters:\n    -----------\n    X : np.ndarray of shape (n_samples, n_features)\n        Training input data.\n\n    y : np.ndarray of shape (n_samples,)\n        Target values of the training set.\n\n    X_new : np.ndarray of shape (n_new_samples, n_features)\n        Input data for which predictions are required.\n\n    mu : float or np.ndarray\n        Prior mean of beta. If scalar, broadcast to feature dimension.\n\n    sigma : float\n        Observation noise standard deviation (ignored in the current implementation).\n\n    V : float or np.ndarray or None\n        Prior covariance matrix. If float, interpreted as multiple of identity.\n        If 1-D array or None, used as diagonal. If None, defaults to identity.\n\n    fit_intercept : bool\n        If True, a column of ones is added to X for the intercept.\n\n    Returns:\n    --------\n    list of float\n        Predictive mean for each row in X_new, rounded to four decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    if fit_intercept:\n        X = np.hstack([np.ones((n_samples, 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n        n_features = X.shape[1]\n    if isinstance(mu, (float, int)):\n        mu = np.full(n_features, mu)\n    mu = mu.reshape(-1, 1)\n    if V is None:\n        V = np.eye(n_features)\n    elif isinstance(V, float) or isinstance(V, int):\n        V = V * np.eye(n_features)\n    elif isinstance(V, np.ndarray):\n        if V.ndim == 1:\n            V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    V_inv_mu = V_inv @ mu\n    XTX = X.T @ X\n    XTy = X.T @ y.reshape(-1, 1)\n    inv_posterior_cov = V_inv + XTX\n    posterior_cov = np.linalg.inv(inv_posterior_cov)\n    posterior_mean = posterior_cov @ (V_inv_mu + XTy)\n    y_pred = X_new @ posterior_mean\n    y_pred_rounded = [round(float(val), 4) for val in y_pred.tolist()]\n    return y_pred_rounded\nX = np.array([[1, 2], [2, 3], [3, 4]])\nX_new = np.array([[4, 5]])"}
{"task_id": 419, "completion_id": 1, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    d = X.shape[1]\n    if V is None:\n        V = np.eye(d)\n    elif isinstance(V, (float, int)):\n        V = V * np.eye(d)\n    elif V.ndim == 1:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    post_cov_inv = V_inv + X.T @ X\n    post_cov = np.linalg.inv(post_cov_inv)\n    if isinstance(mu, (float, int)):\n        mu_vec = np.full(d, mu)\n    else:\n        mu_vec = mu if mu.shape[0] == d else np.full(d, mu[0])\n    post_mean = post_cov @ (V_inv @ mu_vec + X.T @ y)\n    y_pred = X_new @ post_mean\n    return [round(val, 4) for val in y_pred.tolist()]"}
{"task_id": 419, "completion_id": 2, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    num_features = X.shape[1]\n    if np.isscalar(mu):\n        mu_vec = np.full(num_features, mu)\n    else:\n        mu_vec = mu.copy()\n    if V is None:\n        V = np.eye(num_features)\n    elif np.isscalar(V):\n        V = V * np.eye(num_features)\n    elif V.ndim == 1:\n        V = np.diag(V)\n    V = 0.5 * (V + V.T)\n    V += np.eye(num_features) * 1e-08 * np.abs(np.trace(V))\n    try:\n        V_inv = np.linalg.inv(V)\n        XtX = X.T @ X\n        Sigma_p_inv = V_inv + XtX\n        Sigma_p = np.linalg.inv(Sigma_p_inv)\n        mu_p = Sigma_p @ (V_inv @ mu_vec + X.T @ y)\n    except np.linalg.LinAlgError:\n        Sigma_p_inv = V_inv + XtX + np.eye(num_features) * 1e-08\n        Sigma_p = np.linalg.inv(Sigma_p_inv)\n        mu_p = Sigma_p @ (V_inv @ mu_vec + X.T @ y)\n    y_pred = X_new @ mu_p\n    return [round(float(val), 4) for val in y_pred]"}
{"task_id": 419, "completion_id": 3, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    p = X.shape[1]\n    if isinstance(mu, (int, float)):\n        mu = np.full(p, mu)\n    elif len(mu) != p:\n        raise ValueError(f'mu must be scalar or length-{p} vector')\n    if V is None:\n        V = np.eye(p)\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(p)\n    elif isinstance(V, np.ndarray) and V.ndim == 1 and (len(V) == p):\n        V = np.diag(V)\n    elif isinstance(V, np.ndarray) and V.shape != (p, p):\n        raise ValueError(f'V must be scalar, length-{p} array, or {p}\u00d7{p} matrix')\n    V_inv = np.linalg.inv(V)\n    XtX = X.T @ X\n    Sigma_p_inv = V_inv + XtX\n    Sigma_p = np.linalg.inv(Sigma_p_inv)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    y_pred = X_new @ mu_p\n    return [round(float(val), 4) for val in y_pred]"}
{"task_id": 419, "completion_id": 4, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y)\n    X_new = np.asarray(X_new)\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n        X_new = np.c_[np.ones(X_new.shape[0]), X_new]\n        shape_dim = X.shape[1]\n    else:\n        shape_dim = X.shape[1]\n    if np.isscalar(mu):\n        mu = np.full(shape_dim, mu)\n    if V is None:\n        V = np.eye(shape_dim)\n    elif np.isscalar(V):\n        V = V * np.eye(shape_dim)\n    elif V.ndim == 1:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    XtX = X.T @ X\n    Sigma_p_inv = V_inv + XtX\n    Sigma_p = np.linalg.inv(Sigma_p_inv)\n    V_inv_mu = V_inv @ mu\n    Xt_y = X.T @ y\n    mu_p = Sigma_p @ (V_inv_mu + Xt_y)\n    y_pred = X_new @ mu_p\n    return [round(val, 4) for val in y_pred.tolist()]\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([1, 2, 3])\nX_new = np.array([[7, 8], [9, 10]])"}
{"task_id": 419, "completion_id": 5, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function computes the MAP (Maximum a Posteriori) predictive means for `X_new`.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    (n, d) = X.shape\n    if np.isscalar(mu):\n        mu = np.full((d,), mu)\n    if mu.shape != (d,):\n        raise ValueError(f'`mu` must be scalar or vector of length {d}.')\n    if V is None:\n        V = np.eye(d)\n    elif np.isscalar(V):\n        V = np.eye(d) * V\n    elif isinstance(V, np.ndarray):\n        if V.shape[0] != d or V.shape[1] != d:\n            raise ValueError(f'`V` must be scalar, 1D array of length {d}, or {d}x{d} matrix.')\n        if V.ndim == 1:\n            if V.shape[0] != d:\n                raise ValueError(f'`V` must have length {d} when representing the diagonal.')\n            V = np.diag(V)\n    else:\n        raise ValueError('`V` is invalid: must be a float, 1D array, or 2D matrix.')\n    V = (V + V.T) / 2\n    try:\n        V_inv = np.linalg.inv(V)\n    except np.linalg.LinAlgError:\n        raise ValueError('`V` is not invertible.')\n    Xt_y = X.T @ y\n    Xt_X = X.T @ X\n    Sigma_p_inv = V_inv + Xt_X\n    try:\n        Sigma_p = np.linalg.inv(Sigma_p_inv)\n    except np.linalg.LinAlgError:\n        raise ValueError('Posterior covariance is not invertible.')\n    mu_p = Sigma_p @ (V_inv @ mu + Xt_y)\n    y_pred = X_new @ mu_p\n    return [round(val, 4) for val in y_pred.tolist()]"}
{"task_id": 419, "completion_id": 6, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n        X_new = np.c_[np.ones(X_new.shape[0]), X_new]\n    (n, m) = X.shape\n    if isinstance(mu, (int, float)):\n        mu = np.full(m, mu)\n    if mu.shape != (m,):\n        raise ValueError('mu must be a scalar or a vector of length equal to the number of features (including intercept if fit_intercept=True).')\n    if V is None:\n        V = np.eye(m)\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(m)\n    elif isinstance(V, np.ndarray):\n        if V.ndim == 1:\n            V = np.diag(V)\n        elif V.ndim != 2 or V.shape != (m, m):\n            raise ValueError('V must be a scalar, a 1-D array (of length m), or a full m\u00d7m matrix.')\n    else:\n        raise ValueError('Invalid type for V')\n    V_inv = np.linalg.inv(V)\n    V_inv_mu = V_inv @ mu\n    XTy = X.T @ y\n    XT_X = X.T @ X\n    Sigma_p_inv = V_inv + XT_X\n    Sigma_p = np.linalg.inv(Sigma_p_inv)\n    mu_p = Sigma_p @ (V_inv_mu + XTy)\n    y_pred = X_new @ mu_p\n    return [round(yi, 4) for yi in y_pred.tolist()]"}
{"task_id": 419, "completion_id": 7, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function returns the MAP predictive means for every row in `X_new`.\n    \"\"\"\n    (n, m) = X.shape\n    if fit_intercept:\n        X = np.hstack([np.ones((n, 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n        m += 1\n    if V is None:\n        V = np.eye(m)\n    elif isinstance(V, float) or isinstance(V, int):\n        V = V * np.eye(m)\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    if V.shape[0] != m or V.shape[1] != m:\n        raise ValueError('V must be a square matrix with shape (m, m).')\n    if np.isscalar(mu):\n        mu = mu * np.ones(m)\n    elif len(mu) != m:\n        raise ValueError(f'mu must be a scalar, or a vector of length {m}. Got length {len(mu)}.')\n    V_inv = np.linalg.inv(V)\n    Sigma_p_inv = V_inv + X.T @ X\n    Sigma_p = np.linalg.inv(Sigma_p_inv)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    y_hat = X_new @ mu_p\n    return [round(y_val, 4) for y_val in y_hat.tolist()]\nX = np.array([[1, 2], [2, 3], [3, 4]])\ny = np.array([3, 5, 7])\nX_new = np.array([[4, 5]])\nmu = 0.0\nV = 1.0\nfit_intercept = True"}
{"task_id": 419, "completion_id": 8, "solution": "import numpy as np\nfrom numpy.linalg import inv\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known observation variance.\n\n    Computes the MAP estimate of \u03b2 using conjugate Gaussian prior and returns\n    the MAP predictive mean for new data (`X_new`).\n\n    Parameters:\n    - X: np.ndarray of shape (N, M): design matrix\n    - y: np.ndarray of shape (N,): target vector\n    - X_new: np.ndarray of shape (N_new, M): new data matrix\n    - mu: float or np.ndarray: prior mean of \u03b2\n    - sigma: float: known observation variance (ignored in computation for MAP)\n    - V: float or np.ndarray or None: covariance matrix of \u03b2 prior\n    - fit_intercept: bool: whether to include an intercept (column of ones)\n\n    Returns:\n    - list of floats: Predicted values (MAP predictive means) rounded to 4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n        X_new = np.hstack((np.ones((X_new.shape[0], 1)), X_new))\n        if isinstance(mu, float):\n            mu = np.full((X.shape[1],), mu)\n        elif isinstance(mu, np.ndarray) and mu.ndim == 1 and (mu.size == X.shape[1] - 1):\n            mu = np.insert(mu, 0, mu[0] if mu.size > 0 else 0)\n        if V is None:\n            V = np.eye(X.shape[1])\n        elif isinstance(V, float):\n            V = V * np.eye(X.shape[1])\n        elif isinstance(V, np.ndarray) and np.ndim(V) == 1:\n            V = np.diag(V)\n    else:\n        if isinstance(mu, float):\n            mu = np.full((X.shape[1],), mu)\n        if V is None:\n            V = np.eye(X.shape[1])\n        elif isinstance(V, float):\n            V = V * np.eye(X.shape[1])\n        elif isinstance(V, np.ndarray) and np.ndim(V) == 1:\n            V = np.diag(V)\n    V_inv = inv(V)\n    posterior_cov = inv(V_inv + X.T @ X)\n    posterior_mean = posterior_cov @ (V_inv @ mu + X.T @ y)\n    y_pred = X_new @ posterior_mean\n    return [round(val, 4) for val in y_pred]\nX = np.array([[1, 2], [2, 3], [3, 4]])\ny = np.array([2, 3, 4])\nX_new = np.array([[1.5, 2.5]])\nmu = 0.0\nV = 3.0\nfit_intercept = True"}
{"task_id": 419, "completion_id": 9, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.\n    \"\"\"\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n        X_new = np.c_[np.ones(X_new.shape[0]), X_new]\n    d = X.shape[1]\n    if isinstance(mu, (float, int)):\n        mu_vec = np.full(d, mu, dtype=float)\n    else:\n        mu_vec = np.array(mu, dtype=float)\n        if len(mu_vec) != d:\n            raise ValueError('Length of mu must match the dimensionality of \u03b2')\n    if V is None:\n        V = np.eye(d)\n    elif isinstance(V, (float, int)):\n        V = V * np.eye(d)\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    elif not isinstance(V, np.ndarray):\n        raise TypeError('V must be a float, array, or None')\n    if V.shape != (d, d):\n        raise ValueError('V must be a square matrix of size (d, d)')\n    V_inv = np.linalg.inv(V)\n    XtX = X.T @ X\n    Sigma_p_inv = V_inv + XtX\n    Sigma_p = np.linalg.inv(Sigma_p_inv)\n    mu_p = Sigma_p @ (V_inv @ mu_vec + X.T @ y)\n    y_pred = X_new @ mu_p\n    return [round(val, 4) for val in y_pred]"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculates the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n        return -1\n    log_actual = np.log1p(actual)\n    log_predicted = np.log1p(predicted)\n    squared_errors = (log_predicted - log_actual) ** 2\n    mean_squared_error = np.mean(squared_errors)\n    rmsle = np.sqrt(mean_squared_error)\n    return round(rmsle, 4)\nactual = [3, 2, 5, 6]\npredicted = [2.5, 2, 5.5, 5.9]"}
{"task_id": 423, "completion_id": 1, "solution": "import numpy as np\nfrom typing import List\ndef root_mean_squared_log_error(actual: List[float], predicted: List[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n        return -1\n    n = len(actual)\n    squared_errors = [(np.log1p(pred) - np.log1p(act)) ** 2 for (pred, act) in zip(predicted, actual)]\n    mean_squared_error = sum(squared_errors) / n\n    rmsle = np.sqrt(mean_squared_error)\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 2, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE).\n    \n    Returns -1 if inputs are invalid (different lengths or contain negative values).\n    Otherwise returns the RMSLE rounded to 4 decimal places.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n        return -1\n    n = len(actual)\n    sum_squared_log_diff = 0.0\n    for (a, p) in zip(actual, predicted):\n        log_diff = np.log1p(p) - np.log1p(a)\n        sum_squared_log_diff += log_diff * log_diff\n    rmsle = np.sqrt(sum_squared_log_diff / n)\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 3, "solution": "import numpy as np\nfrom typing import List\ndef root_mean_squared_log_error(actual: List[float], predicted: List[float]) -> float:\n    \"\"\"Computes the Root Mean Squared Logarithmic Error (RMSLE).\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    try:\n        actual = [float(x) for x in actual]\n        predicted = [float(x) for x in predicted]\n        if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n            return -1\n    except (ValueError, TypeError):\n        return -1\n    n = len(actual)\n    if n == 0:\n        return 0.0\n    errors = (np.log1p(predicted) - np.log1p(actual)) ** 2\n    rmsle = np.sqrt(np.mean(errors))\n    return round(rmsle, 4)\nactual = [3.14, 0.0, 5.0, 10.0]\npredicted = [3.14, 0.0, 5.0, 10.0]"}
{"task_id": 423, "completion_id": 4, "solution": "import numpy as np\nfrom typing import List\ndef root_mean_squared_log_error(actual: List[float], predicted: List[float]) -> float:\n    \"\"\"Compute the Root Mean Squared Logarithmic Error (RMSLE).\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n        return -1\n    n = len(actual)\n    log_actual = np.log1p(actual)\n    log_predicted = np.log1p(predicted)\n    error = log_predicted - log_actual\n    squared_error = error ** 2\n    mean_squared_error = np.mean(squared_error)\n    rmsle = np.sqrt(mean_squared_error)\n    return round(rmsle, 4)\nactual = [3, 5, 7, 9]\npredicted = [2.5, 5.5, 7.5, 8.5]"}
{"task_id": 423, "completion_id": 5, "solution": "import numpy as np\nfrom typing import List\ndef root_mean_squared_log_error(actual: List[float], predicted: List[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE).\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if not all((x >= 0 for x in actual)) or not all((x >= 0 for x in predicted)):\n        return -1\n    n = len(actual)\n    log_errors = [np.log(1 + pred) - np.log(1 + act) for (pred, act) in zip(predicted, actual)]\n    squared_errors = [error ** 2 for error in log_errors]\n    rmsle = np.sqrt(1 / n * sum(squared_errors))\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 6, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE).\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n        return -1\n    errors = [np.log1p(pred) - np.log1p(act) for (pred, act) in zip(predicted, actual)]\n    squared_errors = [error ** 2 for error in errors]\n    mean_squared_log_error = np.mean(squared_errors)\n    rmsle = np.sqrt(mean_squared_log_error)\n    return round(rmsle, 4)\nactual = [3, 5, 7, 10]\npredicted = [2.5, 5.5, 7.5, 9.5]"}
{"task_id": 423, "completion_id": 7, "solution": "import numpy as np\nfrom typing import List\ndef root_mean_squared_log_error(actual: List[float], predicted: List[float]) -> float:\n    \"\"\"\n    Calculates the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\n    \n    Args:\n        actual (List[float]): The ground truth values.\n        predicted (List[float]): The predicted values.\n        \n    Returns:\n        float: The RMSLE rounded to 4 decimal places, or -1 if validation fails.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n        return -1\n    errors = [np.log1p(p) - np.log1p(a) for (p, a) in zip(predicted, actual)]\n    squared_errors = [e ** 2 for e in errors]\n    rmsle = np.sqrt(np.mean(squared_errors))\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 8, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n        return -1\n    n = len(actual)\n    if n == 0:\n        return -1\n    squared_log_diffs = [(np.log1p(p) - np.log1p(a)) ** 2 for (a, p) in zip(actual, predicted)]\n    mean_squared_log_error = np.mean(squared_log_diffs)\n    rmsle = np.sqrt(mean_squared_log_error)\n    return round(rmsle, 4)\nactual = [3, 5, 7]\npredicted = [2, 4, 8]"}
{"task_id": 423, "completion_id": 9, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculates the Root Mean Squared Logarithmic Error (RMSLE).\n    \n    Args:\n        actual: List of ground-truth values.\n        predicted: List of predicted values.\n        \n    Returns:\n        RMSLE value rounded to four decimal places, or -1 if validation fails.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n        return -1\n    n = len(actual)\n    log_actual = np.log1p(actual)\n    log_predicted = np.log1p(predicted)\n    squared_errors = (log_predicted - log_actual) ** 2\n    mean_squared_log_error = np.mean(squared_errors)\n    rmsle = np.sqrt(mean_squared_log_error)\n    return round(rmsle, 4)\nactual = [100, 200, 300, 400]\npredicted = [90, 195, 310, 405]"}
{"task_id": 428, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        N = window_len\n    else:\n        N = window_len + 1\n    n = np.arange(window_len)\n    window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    return [round(x, 4) for x in window.tolist()]"}
{"task_id": 428, "completion_id": 1, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        N = window_len\n    else:\n        N = window_len + 1\n    n = np.arange(window_len)\n    window = 0.5 - 0.5 * np.cos(2 * math.pi * n / (N - 1))\n    return [round(val, 4) for val in window.tolist()]"}
{"task_id": 428, "completion_id": 2, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        n_values = np.arange(window_len)\n        N = window_len\n    else:\n        n_values = np.arange(window_len)\n        N = window_len + 1\n    window = 0.5 - 0.5 * np.cos(2 * math.pi * n_values / (N - 1))\n    return [round(val, 4) for val in window.tolist()]"}
{"task_id": 428, "completion_id": 3, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if not symmetric:\n        window_len += 1\n    N = window_len - 1\n    window = []\n    for n in range(window_len):\n        if N == 0:\n            val = 0.0\n        else:\n            val = 0.5 - 0.5 * math.cos(2 * math.pi * n / N)\n        window.append(round(val, 4))\n    if not symmetric:\n        window.pop()\n    return window"}
{"task_id": 428, "completion_id": 4, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        window_length = window_len\n    else:\n        window_length = window_len + 1\n    n = np.arange(window_length)\n    window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (window_length - 1))\n    if not symmetric:\n        window = window[:-1]\n    return [round(x, 4) for x in window.tolist()]"}
{"task_id": 428, "completion_id": 5, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if not symmetric:\n        window_len += 1\n    n_values = np.arange(window_len)\n    window = 0.5 - 0.5 * np.cos(2 * math.pi * n_values / (window_len - 1))\n    if not symmetric:\n        window = window[:-1]\n    return [round(val, 4) for val in window]"}
{"task_id": 428, "completion_id": 6, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        effective_len = window_len\n    else:\n        effective_len = window_len + 1\n    n = np.arange(effective_len)\n    window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (effective_len - 1))\n    if not symmetric:\n        window = window[:-1]\n    return [round(x, 4) for x in window.tolist()]"}
{"task_id": 428, "completion_id": 7, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        N = window_len\n    else:\n        N = window_len + 1\n    window = []\n    for n in range(window_len):\n        value = 0.5 - 0.5 * math.cos(2 * math.pi * n / (N - 1))\n        rounded_value = round(value, 4)\n        window.append(rounded_value)\n    return window"}
{"task_id": 428, "completion_id": 8, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if not symmetric:\n        window_len += 1\n    n = np.arange(window_len)\n    N = window_len - 1\n    window = 0.5 - 0.5 * np.cos(2 * np.pi * n / N)\n    if not symmetric:\n        window = window[:-1]\n    return [round(x, 4) for x in window.tolist()]"}
{"task_id": 428, "completion_id": 9, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if not symmetric:\n        window_len += 1\n    n = np.arange(window_len)\n    N = window_len - 1\n    if N == 0:\n        return [1.0]\n    window = 0.5 - 0.5 * np.cos(2 * math.pi * n / N)\n    if not symmetric:\n        window = window[:-1]\n    window = np.round(window, 4).tolist()\n    return window"}
{"task_id": 433, "completion_id": 0, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = float(kernel_height * kernel_width)\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        fan_in = float(shape[0])\n        fan_out = float(shape[1])\n    return (fan_in, fan_out)"}
{"task_id": 433, "completion_id": 1, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        fan_in = shape[0]\n        fan_out = shape[1]\n    return (float(fan_in), float(fan_out))"}
{"task_id": 433, "completion_id": 2, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions.')\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        fan_in = float(shape[1])\n        fan_out = float(shape[0])\n    return (fan_in, fan_out)"}
{"task_id": 433, "completion_id": 3, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        fan_in = shape[0]\n        fan_out = shape[1]\n    return (float(fan_in), float(fan_out))"}
{"task_id": 433, "completion_id": 4, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least 2 dimensions.')\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        fan_in = float(shape[1])\n        fan_out = float(shape[0])\n    return (fan_in, fan_out)"}
{"task_id": 433, "completion_id": 5, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        fan_in = float(shape[0])\n        fan_out = float(shape[1])\n    return (fan_in, fan_out)"}
{"task_id": 433, "completion_id": 6, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('The provided shape must have at least two dimensions.')\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        fan_in = float(shape[0])\n        fan_out = float(shape[1])\n    return (fan_in, fan_out)"}
{"task_id": 433, "completion_id": 7, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            (out_channels, in_channels, kernel_height, kernel_width)).\n\n    Returns:\n        A tuple (fan_in, fan_out) with both values returned as floats.\n    \"\"\"\n    shape = tuple(shape)\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        fan_in = float(shape[0])\n        fan_out = float(shape[1])\n    return (fan_in, fan_out)"}
{"task_id": 433, "completion_id": 8, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    shape = tuple(shape)\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        fan_in = float(shape[1])\n        fan_out = float(shape[0])\n    return (fan_in, fan_out)"}
{"task_id": 433, "completion_id": 9, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    shape = tuple(shape)\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        fan_in = float(shape[0])\n        fan_out = float(shape[1])\n    return (fan_in, fan_out)"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss.\n    Every returned value is rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        y_mean = np.mean(y)\n        return [round(y_mean, 4) for _ in y]\n    y_pred = np.full_like(y, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        X_design = np.hstack([np.ones((X.shape[0], 1)), X])\n        XtX = np.linalg.inv(X_design.T @ X_design)\n        XtR = X_design.T @ residuals\n        coefficients = XtX @ XtR\n        h_t = np.hstack([np.ones((X.shape[0], 1)), X]) @ coefficients\n        y_pred += learning_rate * h_t\n    return [round(val, 4) for val in y_pred]\nX = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0]]\ny = [2.0, 3.5, 5.0]"}
{"task_id": 435, "completion_id": 1, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X_arr = np.array(X, dtype=float)\n    y_arr = np.array(y, dtype=float)\n    m = len(y)\n    y_pred = np.full(m, y_arr.mean())\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(val, 4) for val in y_pred]\n    for _ in range(n_estimators):\n        residuals = y_arr - y_pred\n        X_with_intercept = np.hstack([np.ones((X_arr.shape[0], 1)), X_arr])\n        beta = np.linalg.pinv(X_with_intercept.T @ X_with_intercept) @ X_with_intercept.T @ residuals\n        h_t = X_with_intercept @ beta\n        y_pred += learning_rate * h_t\n    return [round(val, 4) for val in y_pred]"}
{"task_id": 435, "completion_id": 2, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n    y_pred = np.full_like(y_np, np.mean(y_np))\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(val, 4) for val in y_pred]\n    for _ in range(n_estimators):\n        residuals = y_np - y_pred\n        X_with_intercept = np.hstack([np.ones((X_np.shape[0], 1)), X_np])\n        XtX = X_with_intercept.T @ X_with_intercept\n        Xtr = X_with_intercept.T @ residuals\n        beta = np.linalg.inv(XtX) @ Xtr\n        h_t = X_with_intercept @ beta\n        y_pred += learning_rate * h_t\n    return [round(val, 4) for val in y_pred]"}
{"task_id": 435, "completion_id": 3, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n    y_pred = np.full_like(y_np, np.mean(y_np))\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(float(val), 4) for val in y_pred]\n    for _ in range(n_estimators):\n        residuals = y_np - y_pred\n        X_with_intercept = np.hstack([np.ones((X_np.shape[0], 1)), X_np])\n        XTX = np.dot(X_with_intercept.T, X_with_intercept)\n        XTr = np.dot(X_with_intercept.T, residuals)\n        try:\n            weights = np.linalg.solve(XTX, XTr)\n        except np.linalg.LinAlgError:\n            weights = np.dot(np.linalg.pinv(XTX), XTr)\n        h_t = np.dot(X_with_intercept, weights)\n        y_pred += learning_rate * h_t\n    return [round(float(val), 4) for val in y_pred]"}
{"task_id": 435, "completion_id": 4, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n    \n    The model uses linear regression weak learners and squared-error loss.\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n    m = len(y_np)\n    y_mean = y_np.mean()\n    y_pred = np.full(m, y_mean)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(val, 4) for val in y_pred.tolist()]\n    for _ in range(n_estimators):\n        residuals = y_np - y_pred\n        X_with_intercept = np.hstack([np.ones((m, 1)), X_np])\n        beta = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ X_with_intercept.T @ residuals\n        h_t = X_with_intercept @ beta\n        y_pred += learning_rate * h_t\n    return [round(val, 4) for val in y_pred.tolist()]"}
{"task_id": 435, "completion_id": 5, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    (m, d) = X.shape\n    y_pred = np.full(m, y.mean())\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(val, 4) for val in y_pred]\n    for t in range(n_estimators):\n        residuals = y - y_pred\n        X_with_intercept = np.hstack([np.ones((m, 1)), X])\n        beta = np.linalg.pinv(X_with_intercept.T @ X_with_intercept) @ X_with_intercept.T @ residuals\n        h_t = X_with_intercept @ beta\n        y_pred += learning_rate * h_t\n    return [round(val, 4) for val in y_pred]"}
{"task_id": 435, "completion_id": 6, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    (m, d) = X.shape\n    y_mean = np.mean(y)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(y_mean, 4)] * m\n    y_pred = np.full(m, y_mean)\n    X_with_intercept = np.hstack((np.ones((m, 1)), X))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        beta = np.linalg.pinv(X_with_intercept.T @ X_with_intercept) @ X_with_intercept.T @ residuals\n        h_t = X_with_intercept @ beta\n        y_pred += learning_rate * h_t\n    return [round(p, 4) for p in y_pred]\nX = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0]]\ny = [1.0, 2.0, 3.0]"}
{"task_id": 435, "completion_id": 7, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    m = len(y)\n    y_hat = np.full(m, y.mean())\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(val, 4) for val in y_hat.tolist()]\n    for _ in range(n_estimators):\n        residuals = y - y_hat\n        X_with_intercept = np.hstack([np.ones((X.shape[0], 1)), X])\n        beta = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ X_with_intercept.T @ residuals\n        h_t = X_with_intercept @ beta\n        y_hat += learning_rate * h_t\n    return [round(val, 4) for val in y_hat.tolist()]"}
{"task_id": 435, "completion_id": 8, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    m = len(y)\n    y_pred = np.full(m, y.mean())\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(val, 4) for val in y_pred.tolist()]\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        X_with_intercept = np.column_stack([np.ones(m), X])\n        beta = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ X_with_intercept.T @ residuals\n        h_t = X_with_intercept @ beta\n        y_pred += learning_rate * h_t\n    return [round(val, 4) for val in y_pred.tolist()]"}
{"task_id": 435, "completion_id": 9, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n    m = len(y_np)\n    y_pred = np.full(m, np.mean(y_np), dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(x, 4) for x in y_pred]\n    X_np = np.hstack([np.ones((X_np.shape[0], 1)), X_np])\n    for _ in range(n_estimators):\n        residuals = y_np - y_pred\n        Xt = X_np.T\n        XtX = Xt @ X_np\n        XtX_inv = np.linalg.pinv(XtX)\n        beta = XtX_inv @ (Xt @ residuals)\n        h = X_np @ beta\n        y_pred += learning_rate * h\n    return [round(x, 4) for x in y_pred]"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in (0, 1, 2):\n        return -1\n    x = np.array(x, dtype=np.float64)\n    s = 1 / (1 + np.exp(-x))\n    if order == 0:\n        result = s\n    elif order == 1:\n        result = s * (1 - s)\n    elif order == 2:\n        result = s * (1 - s) * (1 - 2 * s)\n    result = np.round(result, 4)\n    if np.isscalar(x):\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 437, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in {0, 1, 2}:\n        return -1\n    is_scalar = np.isscalar(x)\n    x_array = np.array(x) if not isinstance(x, np.ndarray) else x\n    sigma = 1 / (1 + np.exp(-x_array))\n    if order == 0:\n        result = sigma\n    elif order == 1:\n        result = sigma * (1 - sigma)\n    else:\n        result = sigma * (1 - sigma) * (1 - 2 * sigma)\n    result = np.round(result, 4)\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 437, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in {0, 1, 2}:\n        return -1\n    is_scalar = np.isscalar(x)\n    x_array = np.array(x, dtype=float) if not is_scalar else np.array([x])\n    s = 1 / (1 + np.exp(-x_array))\n    if order == 0:\n        result = s\n    elif order == 1:\n        result = s * (1 - s)\n    elif order == 2:\n        result = s * (1 - s) * (1 - 2 * s)\n    result = np.round(result, 4)\n    if is_scalar:\n        return float(result[0])\n    return result.tolist()"}
{"task_id": 437, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    x = np.array(x, dtype=np.float64)\n    sig = 1 / (1 + np.exp(-x))\n    if order == 0:\n        result = sig\n    elif order == 1:\n        result = sig * (1 - sig)\n    else:\n        result = sig * (1 - sig) * (1 - 2 * sig)\n    result = np.round(result, 4)\n    if isinstance(x, np.ndarray) or isinstance(x, list):\n        return result.tolist()\n    else:\n        return float(result)"}
{"task_id": 437, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"\n    Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in {0, 1, 2}:\n        return -1\n    x_array = np.array(x, dtype=np.float64)\n    sigma = 1 / (1 + np.exp(-x_array))\n    if order == 0:\n        result = sigma\n    elif order == 1:\n        result = sigma * (1 - sigma)\n    elif order == 2:\n        result = sigma * (1 - sigma) * (1 - 2 * sigma)\n    result = np.round(result, 4)\n    if isinstance(x, (int, float)):\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 437, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    arr = np.array(x)\n    sig = 1 / (1 + np.exp(-arr))\n    if order == 0:\n        result = sig\n    elif order == 1:\n        result = sig * (1 - sig)\n    elif order == 2:\n        result = sig * (1 - sig) * (1 - 2 * sig)\n    result = np.round(result, 4)\n    if isinstance(x, (int, float)):\n        return float(result.item())\n    else:\n        return result.tolist()"}
{"task_id": 437, "completion_id": 6, "solution": "import numpy as np\nfrom typing import Union, List, Any\ndef sigmoid(x: Union[float, int, list, np.ndarray], order: int=0) -> Union[float, List[Any]]:\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if not isinstance(order, int) or not 0 <= order <= 2:\n        return -1\n    x = np.array(x, dtype=float)\n    sig = 1 / (1 + np.exp(-x))\n    if order == 1:\n        result = sig * (1 - sig)\n    elif order == 2:\n        result = sig * (1 - sig) * (1 - 2 * sig)\n    else:\n        result = sig\n    result = np.round(result, 4)\n    if x.ndim == 0:\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 437, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    x_np = np.array(x) if not isinstance(x, np.ndarray) else x\n    sig = 1 / (1 + np.exp(-x_np))\n    if order == 0:\n        result = sig\n    elif order == 1:\n        result = sig * (1 - sig)\n    elif order == 2:\n        result = sig * (1 - sig) * (1 - 2 * sig)\n    result = np.round(result, 4)\n    if isinstance(x, float) or isinstance(x, int):\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 437, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    x_arr = np.array(x, dtype=np.float64)\n    sig = 1 / (1 + np.exp(-x_arr))\n    if order == 0:\n        result = sig\n    elif order == 1:\n        result = sig * (1 - sig)\n    else:\n        result = sig * (1 - sig) * (1 - 2 * sig)\n    result = np.round(result, 4)\n    if isinstance(x, (float, int)):\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 437, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    is_scalar = np.isscalar(x)\n    is_list = isinstance(x, list)\n    arr = np.array(x, dtype=float)\n    s = 1 / (1 + np.exp(-arr))\n    if order == 0:\n        result = s\n    elif order == 1:\n        result = s * (1 - s)\n    else:\n        result = s * (1 - s) * (1 - 2 * s)\n    result = np.round(result, 4)\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if y.ndim != 1:\n        return -1\n    max_class = np.max(y) + 1\n    if num_classes is None:\n        num_classes = max_class\n    elif num_classes < max_class:\n        return -1\n    one_hot = np.zeros((len(y), num_classes), dtype=int)\n    one_hot[np.arange(len(y)), y] = 1\n    return one_hot.tolist()"}
{"task_id": 438, "completion_id": 1, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.asarray(y)\n    if y.ndim != 1:\n        return -1\n    if not np.issubdtype(y.dtype, np.integer) or np.any(y < 0):\n        return -1\n    max_class = np.max(y) + 1\n    if num_classes is None:\n        num_classes = max_class\n    elif num_classes < max_class:\n        return -1\n    one_hot = np.zeros((y.size, num_classes), dtype=int)\n    one_hot[np.arange(y.size), y] = 1\n    return one_hot.tolist()"}
{"task_id": 438, "completion_id": 2, "solution": "def to_categorical(y: int_list | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if y.ndim != 1:\n        return -1\n    if not np.all(np.equal(np.mod(y, 1), 0)) or np.any(y < 0):\n        return -1\n    max_class = np.max(y)\n    if num_classes is None:\n        num_classes = int(max_class + 1)\n    else:\n        num_classes = int(num_classes)\n    if num_classes < max_class + 1:\n        return -1\n    one_hot = np.zeros((len(y), num_classes), dtype=int)\n    one_hot[np.arange(len(y)), y] = 1\n    return one_hot.tolist()"}
{"task_id": 438, "completion_id": 3, "solution": "def to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]] | int:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if y.ndim != 1:\n        return -1\n    max_class = y.max()\n    if num_classes is None:\n        num_classes = max_class + 1\n    elif num_classes < max_class + 1:\n        return -1\n    one_hot = np.zeros((y.shape[0], num_classes), dtype=int)\n    one_hot[np.arange(y.shape[0]), y] = 1\n    return one_hot.tolist()"}
{"task_id": 438, "completion_id": 4, "solution": "def to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.asarray(y)\n    if y.ndim != 1:\n        raise ValueError(\"Input 'y' must be a 1-D sequence.\")\n    num_unique_classes = int(np.max(y)) + 1\n    if num_classes is None:\n        num_classes = num_unique_classes\n    elif num_classes < num_unique_classes:\n        return -1\n    result = np.zeros((len(y), num_classes), dtype=int)\n    result[np.arange(len(y)), y] = 1\n    return result.tolist()"}
{"task_id": 438, "completion_id": 5, "solution": "def to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y, dtype=int)\n    if y.ndim != 1:\n        raise ValueError('Input must be a 1-D array or list of class indices.')\n    if np.any(y < 0):\n        raise ValueError('Class indices must be non-negative integers.')\n    max_class = np.max(y) + 1\n    if num_classes is None:\n        num_classes = max_class\n    elif num_classes < max_class:\n        return -1\n    one_hot = np.zeros((y.size, num_classes), dtype=int)\n    one_hot[np.arange(y.size), y] = 1\n    return one_hot.tolist()"}
{"task_id": 438, "completion_id": 6, "solution": "def to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y, dtype=int)\n    if y.ndim != 1:\n        return -1\n    if np.any(y < 0):\n        return -1\n    max_val = np.max(y)\n    if num_classes is None:\n        num_classes = max_val + 1\n    elif num_classes < max_val + 1:\n        return -1\n    result = np.zeros((len(y), num_classes), dtype=int)\n    result[np.arange(len(y)), y] = 1\n    return result.tolist()"}
{"task_id": 438, "completion_id": 7, "solution": "def to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.asarray(y)\n    if y.ndim != 1:\n        return -1\n    max_class = np.max(y) + 1\n    if num_classes is None:\n        num_classes = max_class\n    elif num_classes < max_class:\n        return -1\n    result = np.zeros((len(y), num_classes), dtype=int)\n    result[np.arange(len(y)), y] = 1\n    return result.tolist()"}
{"task_id": 438, "completion_id": 8, "solution": "import numpy as np\nfrom typing import list\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if len(y.shape) != 1:\n        raise ValueError(\"Input 'y' must be a 1-D array or list.\")\n    if any((label < 0 for label in y)):\n        raise ValueError('All class indices must be non-negative integers.')\n    max_class = int(np.max(y)) + 1\n    if num_classes is None:\n        num_classes = max_class\n    elif num_classes < max_class:\n        return -1\n    one_hot = np.zeros((len(y), num_classes), dtype=int)\n    one_hot[np.arange(len(y)), y] = 1\n    return one_hot.tolist()"}
{"task_id": 438, "completion_id": 9, "solution": "def to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if y.ndim != 1:\n        return -1\n    if not np.all(np.equal(np.mod(y, 1), 0)) or np.any(y < 0):\n        return -1\n    if num_classes is None:\n        num_classes = int(np.max(y)) + 1\n    elif num_classes < np.max(y) + 1:\n        return -1\n    one_hot = np.eye(num_classes)[y.astype(int)]\n    return one_hot.tolist()"}
{"task_id": 439, "completion_id": 0, "solution": "import itertools\nfrom typing import List, Tuple, Set, Dict, Iterable\nfrom collections import defaultdict\ndef apriori_frequent_itemsets(transactions: List[List], min_sup: float) -> List[Tuple]:\n    \"\"\"\n    Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : List[List]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    List[Tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n        Each tuple is sorted in ascending order.\n    \"\"\"\n    transactions_num = len(transactions)\n\n    def support_count(items: Iterable) -> int:\n        \"\"\"Count the number of transactions that contain all the items\"\"\"\n        count = 0\n        items_set = set(items)\n        for transaction in transactions:\n            if items_set.issubset(transaction):\n                count += 1\n        return count\n\n    def get_frequent_1_itemsets() -> Dict[frozenset, int]:\n        \"\"\"Find all frequent single-item itemsets\"\"\"\n        item_counts: Dict[frozenset, int] = defaultdict(int)\n        for transaction in transactions:\n            for item in set(transaction):\n                item_counts[frozenset([item])] += 1\n        min_sup_count = min_sup * transactions_num\n        return {k: v for (k, v) in item_counts.items() if v >= min_sup_count}\n    frequent_itemsets: List[Dict[frozenset, int]] = []\n    frequent_1_itemsets = get_frequent_1_itemsets()\n    frequent_itemsets.append(frequent_1_itemsets)\n    k = 2\n    while True:\n        prev_freq = frequent_itemsets[k - 2]\n        candidates: Dict[frozenset, None] = {}\n        for itemset1 in prev_freq.keys():\n            for itemset2 in prev_freq.keys():\n                itemset1_list = sorted(itemset1)\n                itemset2_list = sorted(itemset2)\n                if itemset1_list[:k - 2] == itemset2_list[:k - 2] and itemset1_list != itemset2_list:\n                    combined = set(itemset1).union(set(itemset2))\n                    if len(combined) == k:\n                        candidates[frozenset(combined)] = None\n        pruned_candidates = {}\n        for candidate in candidates:\n            is_prunable = False\n            for i in range(k):\n                subset = frozenset(list(candidate)[:i] + list(candidate)[i + 1:])\n                if subset not in prev_freq:\n                    is_prunable = True\n                    break\n            if not is_prunable:\n                pruned_candidates[candidate] = None\n        candidate_support = {}\n        for candidate in pruned_candidates:\n            count = support_count(candidate)\n            candidate_support[candidate] = count\n        min_sup_count = min_sup * transactions_num\n        current_freq = {k: v for (k, v) in candidate_support.items() if v >= min_sup_count}\n        if not current_freq:\n            break\n        frequent_itemsets.append(current_freq)\n        k += 1\n    all_frequent_sets = []\n    for itemset_dict in frequent_itemsets:\n        for itemset in itemset_dict.keys():\n            sorted_itemset = tuple(sorted(itemset))\n            all_frequent_sets.append(sorted_itemset)\n    all_frequent_sets.sort(key=lambda x: (len(x), x))\n    return all_frequent_sets\ntransactions = [[1, 2, 3], [1, 3, 4], [2, 3, 4], [1, 2, 4], [1, 2, 5]]\nmin_sup = 0.4"}
{"task_id": 439, "completion_id": 1, "solution": "import itertools\nfrom collections import defaultdict\nfrom typing import List, Tuple, Hashable\ndef apriori_frequent_itemsets(transactions: List[List[Hashable]], min_sup: float) -> List[Tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    num_transactions = len(transactions)\n    min_support_count = int(num_transactions * min_sup)\n    item_counts = defaultdict(int)\n    for trans in transactions:\n        for item in set(trans):\n            item_counts[frozenset([item])] += 1\n    frequent_itemsets = []\n    for (itemset, count) in item_counts.items():\n        if count >= min_support_count:\n            frequent_itemsets.append(tuple(sorted(itemset)))\n    frequent_itemsets.sort()\n    k = 2\n    while True:\n        candidates = set()\n        for i in range(len(frequent_itemsets)):\n            for j in range(i + 1, len(frequent_itemsets)):\n                l1 = frequent_itemsets[i]\n                l2 = frequent_itemsets[j]\n                if l1[:-1] == l2[:-1] and l1[-1] < l2[-1]:\n                    candidate = tuple(sorted(set(l1) | set(l2)))\n                    if len(candidate) != k:\n                        continue\n                    all_subsets_frequent = True\n                    for i in range(k):\n                        subset = tuple(sorted(candidate[:i] + candidate[i + 1:]))\n                        if subset not in frequent_itemsets:\n                            all_subsets_frequent = False\n                            break\n                    if all_subsets_frequent:\n                        candidates.add(candidate)\n        if not candidates:\n            break\n        candidate_counts = defaultdict(int)\n        for trans in transactions:\n            trans_set = set(trans)\n            for candidate in candidates:\n                if set(candidate).issubset(trans_set):\n                    candidate_counts[candidate] += 1\n        new_frequent = [candidate for candidate in candidates if candidate_counts[candidate] >= min_support_count]\n        if not new_frequent:\n            break\n        frequent_itemsets.extend(new_frequent)\n        frequent_itemsets.sort(key=lambda x: (len(x), x))\n        k += 1\n    return frequent_itemsets\ntransactions = [[1, 2, 3], [1, 2, 4], [1, 2, 3, 4], [2, 3, 4], [2, 3]]\nmin_sup = 0.4"}
{"task_id": 439, "completion_id": 2, "solution": "import itertools\nfrom collections import defaultdict\nfrom typing import List, Tuple, Iterable\ndef apriori_frequent_itemsets(transactions: List[List], min_sup: float) -> List[Tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    num_transactions = len(transactions)\n    min_sup_count = min_sup * num_transactions\n    min_sup_count = max(1, min_sup_count)\n    all_items = set()\n    for transaction in transactions:\n        all_items.update(transaction)\n    all_items = sorted(list(all_items))\n    C1 = {tuple([item]): 0 for item in all_items}\n    for transaction in transactions:\n        for itemset in C1:\n            if itemset[0] in transaction:\n                C1[itemset] += 1\n    L = []\n    L1 = {itemset: count for (itemset, count) in C1.items() if count >= min_sup_count}\n    L.append(list(L1.keys()))\n    i = 1\n    while True:\n        Ck = set()\n        for itemset1 in L[i - 1]:\n            for itemset2 in L[i - 1]:\n                if list(itemset1)[0:i - 1] == list(itemset2)[0:i - 1] and list(itemset1)[i - 1] < list(itemset2)[i - 1]:\n                    union = tuple(sorted(set(itemset1 + itemset2)))\n                    Ck.add(union)\n        Ck_filtered = set()\n        for ck_item in Ck:\n            is_frequent = True\n            for subset in itertools.combinations(ck_item, i):\n                if tuple(sorted(subset)) not in L[i - 1]:\n                    is_frequent = False\n                    break\n            if is_frequent:\n                Ck_filtered.add(ck_item)\n        Ck = Ck_filtered\n        freq_ck = {}\n        for itemset in Ck:\n            freq_ck[itemset] = 0\n        for transaction in transactions:\n            transaction_set = set(transaction)\n            for itemset in Ck:\n                if set(itemset).issubset(transaction_set):\n                    freq_ck[itemset] += 1\n        Lk = [itemset for (itemset, count) in freq_ck.items() if count >= min_sup_count]\n        if not Lk:\n            break\n        L.append(Lk)\n        i += 1\n    all_frequent = []\n    for itemsets in L:\n        all_frequent.extend(itemsets)\n    all_frequent.sort(key=lambda x: (len(x), x))\n    return all_frequent"}
{"task_id": 439, "completion_id": 3, "solution": "import itertools\nfrom typing import List, Tuple, Dict, Set, Any, Iterable\ndef apriori_frequent_itemsets(transactions: List[List[Any]], min_sup: float) -> List[Tuple[Any]]:\n    \"\"\"\n    Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    num_transactions = len(transactions)\n    transaction_sets = [set(t) for t in transactions]\n    candidate_1_itemsets = {}\n    for transaction in transaction_sets:\n        for item in transaction:\n            if item in candidate_1_itemsets:\n                candidate_1_itemsets[item] += 1\n            else:\n                candidate_1_itemsets[item] = 1\n    min_support_count = min_sup * num_transactions\n    frequent_itemsets = []\n    l = []\n    for (item, count) in candidate_1_itemsets.items():\n        if count >= min_support_count:\n            sorted_item = tuple(sorted((item,)))\n            l.append(sorted_item)\n            frequent_itemsets.append(sorted_item)\n    if not l:\n        return []\n    k = 2\n    while l:\n        c = generate_candidates(l, k)\n        candidate_counts = {}\n        for candidate in c:\n            count = 0\n            for transaction in transaction_sets:\n                if set(candidate).issubset(transaction):\n                    count += 1\n            candidate_counts[candidate] = count\n        new_frequent = []\n        for (candidate, count) in candidate_counts.items():\n            if count >= min_support_count:\n                frequent_itemsets.append(candidate)\n                new_frequent.append(candidate)\n        l = new_frequent\n        k += 1\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\ndef generate_candidates(last_frequent: List[Tuple[Any]], k: int) -> List[Tuple[Any]]:\n    \"\"\"Generate size-k candidates by joining and pruning.\"\"\"\n    candidates = []\n    n = len(last_frequent)\n    for i in range(n):\n        for j in range(i + 1, n):\n            l1 = last_frequent[i]\n            l2 = last_frequent[j]\n            if l1[:k - 2] == l2[:k - 2]:\n                merged = tuple(sorted(set(l1) | set(l2)))\n                if len(merged) == k:\n                    candidates.append(merged)\n                else:\n                    continue\n    return candidates\ntransactions = [['milk', 'bread', 'butter'], ['bread', 'butter'], ['bread', 'milk', 'butter'], ['bread', 'butter'], ['bread', 'butter']]\nmin_sup = 0.6"}
{"task_id": 439, "completion_id": 4, "solution": "import itertools\nfrom typing import List, Tuple, Dict, Set, Iterable\ndef apriori_frequent_itemsets(transactions: List[List[int]], min_sup: float) -> List[Tuple]:\n    \"\"\"\n    Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : List[List[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    List[Tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    num_trans: int = len(transactions)\n    if num_trans == 0:\n        return []\n    min_sup_count: int = int(min_sup * num_trans)\n    freq_items: Dict[frozenset, int] = {}\n    for trans in transactions:\n        for item in set(trans):\n            itemset = frozenset([item])\n            freq_items[itemset] = freq_items.get(itemset, 0) + 1\n    L: List[Dict[frozenset, int]] = [{itemset: count for (itemset, count) in freq_items.items() if count >= min_sup_count}]\n    frequent_itemsets: List[Tuple] = [tuple(sorted(itemset)) for itemset in L[0].keys()]\n    k: int = 1\n    while L[k - 1]:\n        Ck: Set[frozenset] = set()\n        l_list = list(L[k - 1].keys())\n        for i in range(len(l_list)):\n            for j in range(i + 1, len(l_list)):\n                l1 = list(l_list[i])\n                l2 = list(l_list[j])\n                if l1[:k - 1] == l2[:k - 1]:\n                    union = frozenset(l1 + l2)\n                    if len(union) == k + 1:\n                        Ck.add(union)\n        freq_candidate: Dict[frozenset, int] = {}\n        for candidate in Ck:\n            count = 0\n            for trans in transactions:\n                if candidate.issubset(trans):\n                    count += 1\n            freq_candidate[candidate] = count\n        Lk = {itemset: count for (itemset, count) in freq_candidate.items() if count >= min_sup_count}\n        L.append(Lk)\n        frequent_itemsets.extend((tuple(sorted(itemset)) for itemset in Lk.keys()))\n        k += 1\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 439, "completion_id": 5, "solution": "import itertools\nfrom collections import defaultdict\ndef apriori_frequent_itemsets(transactions: list[list], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    if not 0 < min_sup <= 1:\n        raise ValueError('min_sup must be in (0, 1]')\n    num_trans = len(transactions)\n    min_sup_count = int(min_sup * num_trans)\n\n    def get_support(candidate):\n        count = 0\n        candidate_set = set(candidate)\n        for t in transactions:\n            if candidate_set.issubset(t):\n                count += 1\n        return count / num_trans\n    item_counts = defaultdict(int)\n    for t in transactions:\n        for item in t:\n            item_counts[frozenset({item})] += 1\n    freq_itemsets = []\n    for (itemset, count) in item_counts.items():\n        if count >= min_sup_count:\n            sorted_itemset = tuple(sorted(itemset))\n            freq_itemsets.append(sorted_itemset)\n    freq_itemsets.sort(key=lambda x: x)\n    all_freq = [set(freq_itemsets)]\n    k = 2\n    while True:\n        if k - 1 == 0:\n            break\n        cand_k = []\n        for i in all_freq[k - 2]:\n            for j in all_freq[k - 2]:\n                union = set(i) | set(j)\n                if len(union) == k:\n                    if max(i) < max(j) and tuple(sorted(union)) not in cand_k:\n                        cand_k.append(tuple(sorted(union)))\n        if not cand_k:\n            break\n        pruned_k = []\n        for can in cand_k:\n            is_valid = True\n            for subset in itertools.combinations(can, k - 1):\n                if set(subset) not in all_freq[k - 2]:\n                    is_valid = False\n                    break\n            if is_valid:\n                pruned_k.append(can)\n        new_freq = []\n        for can in pruned_k:\n            support_count = 0\n            can_set = set(can)\n            for t in transactions:\n                if can_set.issubset(set(t)):\n                    support_count += 1\n            if support_count >= min_sup_count:\n                new_freq.append(can)\n        if not new_freq:\n            break\n        new_freq.sort()\n        freq_itemsets.extend(new_freq)\n        all_freq.append(set(new_freq))\n        k += 1\n    freq_itemsets.sort(key=lambda x: (len(x), x))\n    return freq_itemsets\ntransactions = [[1, 3, 4], [2, 3, 5], [1, 2, 3, 5], [2, 5]]\nmin_sup = 0.5"}
{"task_id": 439, "completion_id": 6, "solution": "import itertools\nfrom collections import defaultdict\nfrom typing import List, Tuple, Dict, Set\ndef apriori_frequent_itemsets(transactions: List[List], min_sup: float) -> List[Tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    num_transactions = len(transactions)\n    min_sup_count = min_sup * num_transactions\n    transactions = [set(t) for t in transactions]\n    item_counts = defaultdict(int)\n    for t in transactions:\n        for item in t:\n            item_counts[frozenset([item])] += 1\n    frequent_itemsets = {}\n    C1 = {k: v for (k, v) in item_counts.items() if v >= min_sup_count}\n    frequent_itemsets[1] = C1\n    k = 2\n    while True:\n        Ck = generate_candidates(frequent_itemsets[k - 1], k)\n        if not Ck:\n            break\n        Lk = defaultdict(int)\n        for t in transactions:\n            subsets = get_k_subsets(t, k)\n            for candidate in Ck:\n                if candidate.issubset(t):\n                    Lk[candidate] += 1\n        Lk = {c: count for (c, count) in Lk.items() if count >= min_sup_count}\n        if not Lk:\n            break\n        frequent_itemsets[k] = Lk\n        k += 1\n    result = []\n    for level in sorted(frequent_itemsets.keys()):\n        for itemset in sorted(frequent_itemsets[level].keys()):\n            result.append(tuple(sorted(itemset)))\n    return result\ndef generate_candidates(frequent_itemsets: Dict[Set, int], k: int) -> List[Set]:\n    \"\"\"Generate candidate k-itemsets from frequent (k-1)-itemsets via self-joining.\"\"\"\n    candidates = set()\n    items = sorted(list(frequent_itemsets.keys()))\n    for i in range(len(items)):\n        for j in range(i + 1, len(items)):\n            a = sorted(items[i])\n            b = sorted(items[j])\n            if a[:k - 2] == b[:k - 2]:\n                union = frozenset(a + [b[k - 2]])\n                candidates.add(union)\n    return list(candidates)\ndef get_k_subsets(transaction: Set, k: int) -> List[Set]:\n    \"\"\"Return all k-item subsets of the transaction.\"\"\"\n    return [frozenset(s) for s in itertools.combinations(transaction, k)]\ntransactions = [[1, 3, 4], [2, 3, 5], [1, 2, 3, 5], [2, 5]]"}
{"task_id": 439, "completion_id": 7, "solution": "import itertools\nfrom typing import List, Tuple, Set, Dict\ndef apriori_frequent_itemsets(transactions: List[List], min_sup: float) -> List[Tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    num_txns = len(transactions)\n    if num_txns == 0:\n        return []\n    min_sup_count = min_sup * num_txns\n    min_sup_count = max(1, int(min_sup_count) if min_sup_count == int(min_sup_count) else int(min_sup_count) + 1)\n    items = set()\n    for txn in transactions:\n        for item in txn:\n            items.add(item)\n    items = list(items)\n    F = []\n    C1 = {frozenset([item]): 0 for item in items}\n    for (tid, transaction) in enumerate(transactions):\n        for item in C1:\n            if item <= frozenset(transaction):\n                C1[item] += 1\n    L1 = {item: count for (item, count) in C1.items() if count >= min_sup_count}\n    F.extend(sorted((tuple(sorted(item)) for item in L1)))\n    k = 2\n    while L1:\n        Ck = set()\n        Lk_items = list(L1.keys())\n        for i in range(len(Lk_items)):\n            for j in range(i + 1, len(Lk_items)):\n                l1 = set(Lk_items[i])\n                l2 = set(Lk_items[j])\n                if len(l1.symmetric_difference(l2)) == 1:\n                    candidate = frozenset(l1 | l2)\n                    Ck.add(candidate)\n        Ck_count = {item: 0 for item in Ck}\n        for (tid, transaction) in enumerate(transactions):\n            trans_set = frozenset(transaction)\n            for candidate in Ck:\n                if candidate <= trans_set:\n                    Ck_count[candidate] += 1\n        Lk = {candidate: count for (candidate, count) in Ck_count.items() if count >= min_sup_count}\n        if not Lk:\n            break\n        F.extend(sorted((tuple(sorted(item)) for item in Lk)))\n        L1 = Lk\n        k += 1\n    return F\ntransactions = [['milk', 'bread', 'butter'], ['milk', 'bread'], ['milk', 'butter'], ['bread', 'butter'], ['bread', 'milk', 'butter']]\nmin_sup = 0.6"}
{"task_id": 439, "completion_id": 8, "solution": "import itertools\nfrom typing import List, Set, Tuple, Dict, Any, Iterable\ndef apriori_frequent_itemsets(transactions: List[List[Any]], min_sup: float) -> List[Tuple[Any]]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    if not 0 < min_sup <= 1:\n        raise ValueError('min_sup must be in (0, 1]')\n    num_trans = len(transactions)\n    min_sup_count = min_sup * num_trans\n    trans_set = [set(t) for t in transactions]\n    all_items = set()\n    for t in trans_set:\n        all_items.update(t)\n    frequent_itemsets = []\n    C1 = {frozenset([item]) for item in all_items}\n    k = 1\n    Lk = C1\n    while Lk:\n        freq_dict = {}\n        for itemset in Lk:\n            count = 0\n            for transaction in trans_set:\n                if itemset.issubset(transaction):\n                    count += 1\n            if count >= min_sup_count:\n                freq_dict[itemset] = count\n        for itemset in sorted(freq_dict.keys()):\n            sorted_itemset = tuple(sorted(itemset))\n            frequent_itemsets.append(sorted_itemset)\n        if k > 1:\n            itemsets_list = list(freq_dict.keys())\n            Ck_next = set()\n            for i in range(len(itemsets_list)):\n                for j in range(i + 1, len(itemsets_list)):\n                    if list(itemsets_list[i])[:-1] == list(itemsets_list[j])[:-1]:\n                        if list(itemsets_list[i])[-1] < list(itemsets_list[j])[-1]:\n                            union = itemsets_list[i].union(itemsets_list[j])\n                            is_valid = True\n                            for item in union:\n                                subset = union - {item}\n                                if subset not in freq_dict:\n                                    is_valid = False\n                                    break\n                            if is_valid:\n                                Ck_next.add(frozenset(union))\n        else:\n            Ck_next = set()\n            items_list = list(freq_dict.keys())\n            for i in range(len(items_list)):\n                for j in range(i + 1, len(items_list)):\n                    if list(items_list[i])[0] != list(items_list[j])[0]:\n                        Ck_next.add(frozenset(items_list[i].union(items_list[j])))\n        Lk = Ck_next\n        k += 1\n    return sorted(frequent_itemsets, key=lambda x: (len(x), x))"}
{"task_id": 439, "completion_id": 9, "solution": "import itertools\nfrom collections import defaultdict\nfrom typing import List, Tuple, Hashable\ndef apriori_frequent_itemsets(transactions: List[List[Hashable]], min_sup: float) -> List[Tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : List[List[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    List[Tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    if not 0 < min_sup <= 1:\n        raise ValueError('min_sup must be in the range (0, 1]')\n    num_trans = len(transactions)\n    min_support = num_trans * min_sup\n    item_counts = defaultdict(int)\n    for transaction in transactions:\n        for item in set(transaction):\n            item_counts[frozenset([item])] += 1\n    frequent_itemsets = []\n    current_candidate_set = [(item,) for item in sorted(item_counts.keys()) if item_counts[item] >= min_support]\n    current_candidate_set = [tuple(sorted(itemset)) for itemset in current_candidate_set]\n    current_candidate_set.sort()\n    for itemset in current_candidate_set:\n        frequent_itemsets.append(itemset)\n    k = 2\n    while current_candidate_set:\n        frequent_itemsets_set = {frozenset(itemset) for itemset in current_candidate_set}\n        candidates = []\n        for itemset1 in current_candidate_set:\n            for itemset2 in current_candidate_set:\n                if len(set(itemset1[:k - 2]) & set(itemset2[:k - 2])) == k - 2 and itemset1[-1] < itemset2[-1]:\n                    combined = tuple(sorted(set(itemset1) | set(itemset2)))\n                    if len(combined) == k:\n                        candidates.append(combined)\n        pruned_candidates = []\n        for candidate in candidates:\n            is_valid = True\n            for subset in itertools.combinations(candidate, k - 1):\n                if frozenset(subset) not in frequent_itemsets_set:\n                    is_valid = False\n                    break\n            if is_valid:\n                pruned_candidates.append(tuple(sorted(candidate)))\n        pruned_candidates = sorted(list(set(pruned_candidates)))\n        candidate_counts = defaultdict(int)\n        for transaction in transactions:\n            transaction_set = set(transaction)\n            for candidate in pruned_candidates:\n                if set(candidate).issubset(transaction_set):\n                    candidate_counts[frozenset(candidate)] += 1\n        frequent_k_itemsets = [tuple(sorted(candidate)) for candidate in pruned_candidates if candidate_counts[frozenset(candidate)] >= min_support]\n        if frequent_k_itemsets:\n            frequent_itemsets.extend(frequent_k_itemsets)\n            current_candidate_set = frequent_k_itemsets\n            k += 1\n        else:\n            break\n    return frequent_itemsets"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    pred_array = np.array(predictions)\n    averaged_probs = np.mean(pred_array, axis=0)\n    rounded_probs = np.round(averaged_probs, 4)\n    probs_list = rounded_probs.tolist()\n    class_labels = [int(rounded_probs[i, :].argmax()) for i in range(rounded_probs.shape[0])]\n    return (probs_list, class_labels)"}
{"task_id": 440, "completion_id": 1, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples), and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    rounded_probabilities = np.round(averaged_probabilities, 4)\n    python_rounded_probabilities = [list(row) for row in rounded_probabilities]\n    predicted_classes = np.argmax(rounded_probabilities, axis=1).tolist()\n    return (python_rounded_probabilities, predicted_classes)\npredictions = [[[0.1, 0.9], [0.8, 0.2]], [[0.2, 0.8], [0.9, 0.1]]]"}
{"task_id": 440, "completion_id": 2, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef aggregate_predictions(predictions: List[List[List[float]]]) -> Tuple[List[List[float]], List[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    average_probs = predictions_array.mean(axis=0)\n    rounded_average_probs = np.round(average_probs, decimals=4)\n    averaged_probabilities = rounded_average_probs.tolist()\n    predicted_classes = np.argmax(average_probs, axis=1).tolist()\n    return (averaged_probabilities, predicted_classes)"}
{"task_id": 440, "completion_id": 3, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef aggregate_predictions(predictions: List[List[List[float]]]) -> Tuple[List[List[float]], List[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    np_preds = np.array(predictions)\n    avg_probs = np.mean(np_preds, axis=0)\n    avg_probs_rounded = np.around(avg_probs, decimals=4)\n    predicted_classes = np.argmax(avg_probs_rounded, axis=1).tolist()\n    avg_probs_list = avg_probs_rounded.tolist()\n    return (avg_probs_list, predicted_classes)\npredictions = [[[0.1, 0.9], [0.8, 0.2]], [[0.2, 0.8], [0.7, 0.3]], [[0.3, 0.7], [0.6, 0.4]]]"}
{"task_id": 440, "completion_id": 4, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    (n_estimators, n_samples, n_classes) = (len(predictions), len(predictions[0]), len(predictions[0][0]))\n    avg_probabilities = []\n    for sample_idx in range(n_samples):\n        avg_prob = [0.0] * n_classes\n        for estimator_idx in range(n_estimators):\n            for class_idx in range(n_classes):\n                avg_prob[class_idx] += predictions[estimator_idx][sample_idx][class_idx]\n        avg_prob = [round(prob / n_estimators, 4) for prob in avg_prob]\n        avg_probabilities.append(avg_prob)\n    predicted_labels = [np.argmax(probs) for probs in avg_probabilities]\n    return (avg_probabilities, predicted_labels)"}
{"task_id": 440, "completion_id": 5, "solution": "import numpy as np\nfrom typing import list\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    averaged_probabilities = np.round(averaged_probabilities, 4)\n    averaged_probabilities_list = averaged_probabilities.tolist()\n    predicted_classes = [int(row.tolist().index(max(row))) for row in averaged_probabilities]\n    return (averaged_probabilities_list, predicted_classes)"}
{"task_id": 440, "completion_id": 6, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    np_predictions = np.array(predictions)\n    avg_probabilities = np.mean(np_predictions, axis=0)\n    rounded_probabilities = np.round(avg_probabilities, 4)\n    predicted_classes = np.argmax(rounded_probabilities, axis=1)\n    prob_list = rounded_probabilities.tolist()\n    class_list = predicted_classes.tolist()\n    return (prob_list, class_list)"}
{"task_id": 440, "completion_id": 7, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    np_predictions = np.array(predictions)\n    averaged_probabilities = np_predictions.mean(axis=0)\n    rounded_probabilities = np.round(averaged_probabilities, 4)\n    predicted_labels = np.argmax(rounded_probabilities, axis=1)\n    return (rounded_probabilities.tolist(), predicted_labels.tolist())"}
{"task_id": 440, "completion_id": 8, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    average_probabilities = predictions_array.mean(axis=0)\n    average_probabilities_rounded = np.around(average_probabilities, decimals=4)\n    averaged_list = average_probabilities_rounded.tolist()\n    predicted_classes = [int(np.argmax(sample_prob)) for sample_prob in average_probabilities_rounded]\n    return (averaged_list, predicted_classes)\npredictions = [[[0.2, 0.5, 0.3], [0.1, 0.7, 0.2]], [[0.3, 0.4, 0.3], [0.2, 0.6, 0.2]], [[0.25, 0.5, 0.25], [0.15, 0.65, 0.2]]]"}
{"task_id": 440, "completion_id": 9, "solution": "import numpy as np\nfrom typing import list\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    avg_probabilities = np.mean(predictions_array, axis=0)\n    rounded_probabilities = np.round(avg_probabilities, 4)\n    averaged_probs_list = rounded_probabilities.tolist()\n    predicted_classes = [int(np.argmax(sample)) for sample in rounded_probabilities]\n    return (averaged_probs_list, predicted_classes)\npredictions = [[[0.1, 0.8, 0.1], [0.7, 0.1, 0.2]], [[0.2, 0.6, 0.2], [0.6, 0.2, 0.2]], [[0.15, 0.7, 0.15], [0.5, 0.3, 0.2]]]"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"\n    Compute the Radial Basis Function (RBF) kernel matrix.\n\n    Parameters:\n        X (list[list[int | float]]): First collection of vectors.\n        Y (list[list[int | float]] | None): Second collection of vectors.\n        sigma (float | list[float] | None): Scale parameter.\n    \n    Returns:\n        list[list[float]]: The RBF kernel matrix as a nested Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X.copy()\n    else:\n        Y = np.array(Y, dtype=float)\n    C = X.shape[1]\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, list):\n        if len(sigma) != C or any((s <= 0 for s in sigma)):\n            return -1\n        sigma = np.array(sigma, dtype=float)\n    elif isinstance(sigma, float):\n        if sigma <= 0:\n            return -1\n    else:\n        return -1\n    hdu = np.sum((X[:, np.newaxis, :] - Y[np.newaxis, :, :]) ** 2 / sigma ** 2, axis=-1)\n    K = np.exp(-0.5 * hdu)\n    K_rounded = [[float(np.round(k, 4)) for k in row] for row in K]\n    return K_rounded"}
{"task_id": 444, "completion_id": 1, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is not None:\n        Y = np.array(Y)\n    else:\n        Y = X\n    (N, C) = X.shape\n    (M, _) = Y.shape\n    if C != _:\n        return -1\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, list):\n        if len(sigma) != C or any((s <= 0 for s in sigma)):\n            return -1\n        sigma = np.array(sigma)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma = sigma * np.ones(C)\n    else:\n        return -1\n    diff = X[:, None, :] - Y[None, :, :]\n    scaled_diff = diff / sigma\n    squared_dist = np.sum(scaled_diff ** 2, axis=2)\n    kernel_matrix = np.exp(-0.5 * squared_dist)\n    rounded_kernel = np.round(kernel_matrix, 4)\n    rounded_kernel = np.where(np.isclose(rounded_kernel, np.round(rounded_kernel)), np.round(rounded_kernel), rounded_kernel)\n    return rounded_kernel.tolist()\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 444, "completion_id": 2, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    if Y is None:\n        Y = X\n    else:\n        Y = Y\n    X = np.array(X)\n    Y = np.array(Y)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    C = X.shape[1]\n    N = X.shape[0]\n    M = Y.shape[0]\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, float):\n        if sigma <= 0:\n            return -1\n    elif isinstance(sigma, list):\n        if len(sigma) != C or any((s <= 0 for s in sigma)):\n            return -1\n    else:\n        return -1\n    try:\n        diff = X[:, :, None] - Y[:, :, None].T\n        diff_squared = diff ** 2\n        if isinstance(sigma, list):\n            sigma_array = np.array(sigma, dtype=np.float64)\n            scaled_diff_squared = diff_squared / sigma_array\n        else:\n            scaled_diff_squared = diff_squared / sigma ** 2\n        exponent = -0.5 * scaled_diff_squared.sum(axis=1)\n        kernel_matrix = np.exp(exponent)\n        return [[round(val, 4) for val in row] for row in kernel_matrix]\n    except:\n        return -1\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 444, "completion_id": 3, "solution": "def rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n    \n    Parameters:\n    - X: First set of vectors, shape (N, C)\n    - Y: Second set of vectors, shape (M, C). If None, kernel is computed with X itself.\n    - sigma: Scale parameter. Can be None, a float, or a list of floats of length C.\n\n    Returns:\n    - A N x M kernel matrix as a nested Python list of floats, rounded to 4 decimal places.\n      Returns -1 in case of invalid inputs.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    (nx, cx) = X.shape\n    (ny, cy) = Y.shape\n    if cx != cy:\n        return -1\n    c = cx\n    if sigma is None:\n        sigma = np.sqrt(c / 2)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n    elif isinstance(sigma, (list, np.ndarray)):\n        if len(sigma) != c:\n            return -1\n        for s in sigma:\n            if s <= 0:\n                return -1\n    else:\n        return -1\n    if isinstance(sigma, (int, float)):\n        sigma_vec = np.full(c, sigma)\n    else:\n        sigma_vec = np.array(sigma)\n    X_std = X / sigma_vec\n    Y_std = Y / sigma_vec\n    X_sq = np.sum(X_std ** 2, axis=1, keepdims=True)\n    Y_sq = np.sum(Y_std ** 2, axis=1)\n    cross = np.dot(X_std, Y_std.T)\n    distances_sq = X_sq - 2 * cross + Y_sq\n    K = np.exp(-0.5 * distances_sq)\n    return [[round(K[i, j], 4) for j in range(K.shape[1])] for i in range(K.shape[0])]\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 444, "completion_id": 4, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function computes the RBF kernel matrix between two sets of vectors X and Y.\n    If Y is not provided, the kernel matrix is computed between all pairs from X.\n    The RBF kernel is computed using the formula:\n        k(x, y) = exp{-0.5 * sum_j [(x_j - y_j)/sigma_j]^2 }\n\n    Args:\n        X: A list of lists representing N vectors of dimension C.\n        Y: (Optional) Another list of lists representing M vectors of dimension C.\n        sigma: (Optional) A float or a list of floats representing the bandwidth(sigma) parameters.\n\n    Returns:\n        A list of lists representing the kernel matrix with entries rounded to 4 decimal places.\n        Returns -1 if the inputs are invalid or if sigma is non-positive.\n    \"\"\"\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    n_features = X.shape[1]\n    if Y.shape[1] != n_features:\n        return -1\n    if sigma is None:\n        sigma = np.sqrt(n_features / 2)\n    elif np.isscalar(sigma):\n        if sigma <= 0:\n            return -1\n    else:\n        if len(sigma) != n_features:\n            return -1\n        if not all((s > 0 for s in sigma)):\n            return -1\n        sigma = np.array(sigma)\n    X2 = np.sum(X ** 2, axis=1).reshape(-1, 1)\n    Y2 = np.sum(Y ** 2, axis=1)\n    cross = X @ Y.T\n    distances = X2 - 2 * cross + Y2\n    if np.isscalar(sigma):\n        kernel = np.exp(-0.5 * distances / sigma ** 2)\n    else:\n        sigma_squared = sigma ** 2\n        kernel = np.exp(-0.5 * distances / sigma_squared)\n    kernel = np.round(kernel, 4).tolist()\n    return kernel"}
{"task_id": 444, "completion_id": 5, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    if Y is None:\n        Y = X\n    X = np.array(X, dtype=float)\n    Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    num_features = X.shape[1]\n    if sigma is None:\n        sigma = np.sqrt(num_features / 2)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma = float(sigma)\n    else:\n        if not isinstance(sigma, (list, np.ndarray)) or len(sigma) != num_features:\n            return -1\n        if any((s <= 0 for s in sigma)):\n            return -1\n        sigma = np.array(sigma, dtype=float)\n    if isinstance(sigma, float):\n        X_norm = np.sum(X ** 2 / sigma ** 2, axis=1)\n        Y_norm = np.sum(Y ** 2 / sigma ** 2, axis=1)\n        cross = np.dot(X, Y.T) / sigma ** 2\n        distances = X_norm[:, np.newaxis] - 2 * cross + Y_norm[np.newaxis, :]\n    else:\n        X_expanded = X[:, np.newaxis, :] / sigma\n        Y_expanded = Y[np.newaxis, :, :] / sigma\n        difference = X_expanded - Y_expanded\n        distances = np.sum(difference * difference, axis=-1)\n    kernel_matrix = np.exp(-0.5 * distances)\n    kernel_matrix_rounded = [[round(val, 4) for val in row] for row in kernel_matrix]\n    return kernel_matrix_rounded"}
{"task_id": 444, "completion_id": 6, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    try:\n        X = np.array(X, dtype=float)\n        if Y is None:\n            Y = X\n        else:\n            Y = np.array(Y, dtype=float)\n    except:\n        return -1\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    C = X.shape[1]\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, float) or isinstance(sigma, int):\n        if sigma <= 0:\n            return -1\n    elif isinstance(sigma, list):\n        if len(sigma) != C or any((s <= 0 for s in sigma)):\n            return -1\n        sigma = np.array(sigma)\n    else:\n        return -1\n    X2 = np.sum(X ** 2 / sigma ** 2, axis=1)\n    Y2 = np.sum(Y ** 2 / sigma ** 2, axis=1)\n    cross = np.dot(X / sigma ** 2, Y.T)\n    K = np.exp(X2[:, np.newaxis] + Y2[np.newaxis, :] - 2 * cross)\n    return [[round(float(val), 4) for val in row] for row in K]"}
{"task_id": 444, "completion_id": 7, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"\n    Compute the Radial Basis Function (RBF) kernel matrix.\n\n    Parameters:\n    - X: List of N feature vectors, each of length C.\n    - Y: Optional list of M feature vectors, each of length C. If None, use X.\n    - sigma: Bandwidth parameter. If None, uses default sqrt(C / 2).\n\n    Returns:\n    A nested list containing the RBF kernel matrix, rounded to 4 decimal places.\n    Returns -1 if input is invalid.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    (N, C) = X.shape\n    if Y is None:\n        Y = X\n        M = N\n    else:\n        try:\n            Y = np.array(Y, dtype=float)\n            (M, C2) = Y.shape\n            if C2 != C:\n                return -1\n        except:\n            return -1\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, (float, int)):\n        if sigma <= 0:\n            return -1\n    elif isinstance(sigma, list):\n        if len(sigma) != C:\n            return -1\n        sigma = np.array(sigma, dtype=float)\n        if np.any(sigma <= 0):\n            return -1\n    else:\n        return -1\n    if isinstance(sigma, float):\n        sigma_vec = sigma * np.ones(C)\n    else:\n        sigma_vec = sigma\n    X_scaled = X / sigma_vec\n    Y_scaled = Y / sigma_vec\n    dist_squared = -2 * X_scaled @ Y_scaled.T + np.sum(X_scaled ** 2, axis=1, keepdims=True) + np.sum(Y_scaled ** 2, axis=1)\n    dist_squared = np.clip(dist_squared, -1000000.0, 1000000.0)\n    K = np.exp(-0.5 * dist_squared)\n    result = [list(row) for row in np.round(K, 4)]\n    return result"}
{"task_id": 444, "completion_id": 8, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    n_features = X.shape[1]\n    if sigma is None:\n        sigma = np.sqrt(n_features / 2)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n    elif isinstance(sigma, (list, np.ndarray)):\n        if len(sigma) != n_features or any([s <= 0 for s in sigma]):\n            return -1\n        sigma = np.array(sigma, dtype=float)\n    else:\n        return -1\n    if isinstance(sigma, (int, float)):\n        sigma = np.full(n_features, sigma, dtype=float)\n    scaled_diff = (X[:, np.newaxis, :] - Y[np.newaxis, :, :]) / sigma\n    sq_dist = np.sum(scaled_diff ** 2, axis=2)\n    kernel = np.exp(-0.5 * sq_dist)\n    kernel = [[round(val, 4) for val in row] for row in kernel]\n    return kernel\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 444, "completion_id": 9, "solution": "import numpy as np\nfrom typing import list\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    if Y is None:\n        Y = X\n    try:\n        X = np.array(X, dtype=float)\n        Y = np.array(Y, dtype=float)\n    except:\n        return -1\n    if X.ndim != 2 or Y.ndim != 2:\n        return -1\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    C = X.shape[1]\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif np.isscalar(sigma):\n        if sigma <= 0:\n            return -1\n    else:\n        sigma = np.array(sigma, dtype=float)\n        if sigma.ndim != 1 or sigma.shape[0] != C:\n            return -1\n        if np.any(sigma <= 0):\n            return -1\n    sigma_vec = sigma if not np.isscalar(sigma) else np.full(C, sigma)\n    X_norm = X / sigma_vec\n    Y_norm = Y / sigma_vec\n    X_sq = np.sum(X_norm ** 2, axis=1, keepdims=True)\n    Y_sq = np.sum(Y_norm ** 2, axis=1, keepdims=True)\n    cross = X_norm @ Y_norm.T\n    dists = X_sq - 2 * cross + Y_sq.T\n    kernel = np.exp(-0.5 * dists)\n    return [[round(val, 4) for val in row] for row in kernel]"}
{"task_id": 446, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nimport math\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n    \n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n    \n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    (n_samples, n_features) = (len(X), len(X[0]))\n    y = np.array(y)\n    counter = Counter(y)\n    majority_label = min((label for (label, _count) in counter.most_common(1)))\n    H_parent = 0\n    for count in counter.values():\n        p = count / n_samples\n        H_parent -= p * math.log2(p)\n    best_gain = 0\n    best_feature_index = -1\n    best_threshold = None\n    best_left_majority = majority_label\n    best_right_majority = majority_label\n    for feature_index in range(n_features):\n        feature_values = np.array([X[i][feature_index] for i in range(n_samples)])\n        unique_values = np.unique(feature_values)\n        if len(unique_values) <= 1:\n            continue\n        sorted_values = np.sort(unique_values)\n        thresholds = (sorted_values[:-1] + sorted_values[1:]) / 2\n        for thr in thresholds:\n            left_indices = np.where(feature_values <= thr)[0]\n            right_indices = np.where(feature_values > thr)[0]\n            if len(left_indices) == 0 or len(right_indices) == 0:\n                continue\n            left_y = y[left_indices]\n            right_y = y[right_indices]\n            H_left = 0\n            for count in Counter(left_y).values():\n                p = count / len(left_indices)\n                H_left -= p * math.log2(p)\n            H_right = 0\n            for count in Counter(right_y).values():\n                p = count / len(right_indices)\n                H_right -= p * math.log2(p)\n            p_left = len(left_indices) / n_samples\n            p_right = len(right_indices) / n_samples\n            gain = H_parent - p_left * H_left - p_right * H_right\n            left_counter = Counter(left_y)\n            left_majority = min((label for (label, _) in left_counter.most_common(1)))\n            right_counter = Counter(right_y)\n            right_majority = min((label for (label, _) in right_counter.most_common(1)))\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = feature_index\n                best_threshold = round(thr, 4)\n                best_left_majority = left_majority\n                best_right_majority = right_majority\n    if best_gain == 0:\n        return (-1, None, majority_label, majority_label)\n    return (best_feature_index, best_threshold, best_left_majority, best_right_majority)"}
{"task_id": 446, "completion_id": 1, "solution": "import numpy as np\nfrom collections import Counter\ndef entropy(y):\n    \"\"\"Compute the Shannon entropy of class labels y.\"\"\"\n    counts = np.bincount(y)\n    probabilities = counts / len(y)\n    return -np.sum((p * np.log2(p) for p in probabilities if p > 0))\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    (n_samples, n_features) = (len(X), len(X[0]))\n    X = np.array(X)\n    y = np.array(y)\n    best_gain = -np.inf\n    best_feature = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n    parent_entropy = entropy(y)\n    for j in range(n_features):\n        feature_vals = X[:, j]\n        unique_sorted = np.unique(feature_vals)\n        if len(unique_sorted) <= 1:\n            continue\n        thresholds = (unique_sorted[:-1] + unique_sorted[1:]) / 2\n        for t in thresholds:\n            mask = feature_vals <= t\n            left_indices = np.where(mask)[0]\n            right_indices = np.where(~mask)[0]\n            left_y = y[left_indices]\n            right_y = y[right_indices]\n            p_left = len(left_y) / n_samples\n            p_right = len(right_y) / n_samples\n            gain = parent_entropy - p_left * entropy(left_y) - p_right * entropy(right_y)\n            if gain > best_gain:\n                best_gain = gain\n                left_counter = Counter(left_y)\n                left_majority = left_counter.most_common(1)[0][0]\n                right_counter = Counter(right_y)\n                right_majority = right_counter.most_common(1)[0][0]\n                if len(left_counter) > 1:\n                    left_majority = min([k for (k, v) in left_counter.items() if v == left_counter[left_majority]])\n                if len(right_counter) > 1:\n                    right_majority = min([k for (k, v) in right_counter.items() if v == right_counter[right_majority]])\n                best_feature = j\n                best_threshold = round(t, 4)\n                left_majority_label = left_majority\n                right_majority_label = right_majority\n    if best_gain <= 0:\n        y_counter = Counter(y)\n        majority_label = y_counter.most_common(1)[0][0]\n        if len(y_counter) > 1:\n            majority_label = min([k for (k, v) in y_counter.items() if v == y_counter[majority_label]])\n        return (-1, None, majority_label, majority_label)\n    return (best_feature, best_threshold, left_majority_label, right_majority_label)"}
{"task_id": 446, "completion_id": 2, "solution": "import numpy as np\nfrom collections import Counter\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n\n    def entropy(labels):\n        \"\"\"Calculate the Shannon entropy of a list of class labels.\"\"\"\n        if not labels:\n            return 0.0\n        total = float(len(labels))\n        counts = Counter(labels)\n        return -sum((count / total * np.log2(count / total) for count in counts.values()))\n\n    def majority_vote(labels, min_label=True):\n        \"\"\"Return the majority label (or smallest label if tie).\"\"\"\n        counts = Counter(labels)\n        max_count = max(counts.values())\n        candidates = [label for (label, count) in counts.items() if count == max_count]\n        return min(candidates) if min_label else max(candidates)\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    parent_entropy = entropy(y)\n    majority_label = majority_vote(y)\n    best_gain = 0.0\n    best_feature_index = -1\n    best_threshold = None\n    best_left_label = majority_label\n    best_right_label = majority_label\n    for j in range(n_features):\n        combined = np.column_stack((X[:, j], y))\n        combined = combined[combined[:, 0].argsort()]\n        sorted_values = combined[:, 0]\n        labels = combined[:, 1]\n        unique_idx = np.where(np.diff(sorted_values) != 0)[0] + 1\n        for idx in unique_idx:\n            t = round((sorted_values[idx - 1] + sorted_values[idx]) / 2, 4)\n            left_labels = labels[:idx]\n            right_labels = labels[idx:]\n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n            gain = parent_entropy - p_left * left_entropy - p_right * right_entropy\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = t\n                best_left_label = majority_vote(left_labels)\n                best_right_label = majority_vote(right_labels)\n            elif gain == best_gain and best_feature_index != -1 and (j == best_feature_index):\n                if t < best_threshold:\n                    best_threshold = t\n                    best_left_label = majority_vote(left_labels)\n                    best_right_label = majority_vote(right_labels)\n            elif gain == 0.0 and best_gain == 0.0:\n                pass\n    if best_gain == 0.0:\n        return (-1, None, majority_label, majority_label)\n    else:\n        return (best_feature_index, best_threshold, best_left_label, best_right_label)"}
{"task_id": 446, "completion_id": 3, "solution": "import numpy as np\nfrom collections import Counter\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n\n    def entropy(labels):\n        \"\"\"Calculate the Shannon entropy of a list of class labels.\"\"\"\n        if len(labels) == 0:\n            return 0.0\n        label_counts = Counter(labels)\n        total = len(labels)\n        return -sum((count / total * np.log2(count / total) for count in label_counts.values()))\n\n    def get_majority_label(labels):\n        \"\"\"Get the majority label from a list of class labels.\"\"\"\n        counter = Counter(labels)\n        return max(counter.most_common(), key=lambda x: (x[1], -x[0]))[0]\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    parent_entropy = entropy(y)\n    majority_label = get_majority_label(y)\n    if len(set(y)) == 1:\n        return (-1, None, majority_label, majority_label)\n    best_feature_index = -1\n    best_threshold = None\n    max_gain = 0\n    left_majority_label = majority_label\n    right_majority_label = majority_label\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        indices = np.argsort(feature_values)\n        sorted_values = feature_values[indices]\n        sorted_labels = y[indices]\n        unique_values = []\n        last_value = None\n        for value in sorted_values:\n            if value != last_value:\n                unique_values.append(value)\n                last_value = value\n        thresholds = []\n        for i in range(1, len(unique_values)):\n            thresholds.append((unique_values[i - 1] + unique_values[i]) / 2)\n        for threshold in thresholds:\n            left_mask = X[:, feature_index] <= threshold\n            right_mask = ~left_mask\n            left_labels = y[left_mask]\n            right_labels = y[right_mask]\n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n            gain = parent_entropy - p_left * entropy(left_labels) - p_right * entropy(right_labels)\n            if gain > max_gain:\n                max_gain = gain\n                best_feature_index = feature_index\n                best_threshold = round(threshold, 4)\n                left_majority_label = get_majority_label(left_labels)\n                right_majority_label = get_majority_label(right_labels)\n            elif abs(gain - max_gain) < 1e-09:\n                if feature_index < best_feature_index or (feature_index == best_feature_index and threshold < best_threshold):\n                    best_feature_index = feature_index\n                    best_threshold = round(threshold, 4)\n                    left_majority_label = get_majority_label(left_labels)\n                    right_majority_label = get_majority_label(right_labels)\n    if max_gain <= 0:\n        return (-1, None, majority_label, majority_label)\n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)"}
{"task_id": 446, "completion_id": 4, "solution": "import numpy as np\nfrom collections import Counter\nimport math\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n    \n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n    \n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n    \n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples = len(y)\n\n    def entropy(labels):\n        \"\"\"Calculate Shannon entropy of a list of labels.\"\"\"\n        counter = Counter(labels)\n        total = len(labels)\n        return -sum((count / total * math.log2(count / total) for count in counter.values())) if total > 0 else 0\n\n    def majority_label(labels):\n        \"\"\"Find the majority label, breaking ties by choosing the smallest label.\"\"\"\n        if len(labels) == 0:\n            return None\n        counter = Counter(labels)\n        return min([k for (k, v) in counter.items() if v == max(counter.values())])\n    parent_entropy = entropy(y)\n    majority_label_all = majority_label(y)\n    best_gain = 0\n    best_feature_index = -1\n    best_threshold = None\n    best_left_majority = majority_label_all\n    best_right_majority = majority_label_all\n    for j in range(X.shape[1]):\n        feature = X[:, j]\n        unique_values = np.unique(feature)\n        if len(unique_values) <= 1:\n            continue\n        indices = np.argsort(feature)\n        sorted_values = feature[indices]\n        sorted_labels = y[indices]\n        thresholds = []\n        for i in range(1, len(sorted_values)):\n            if sorted_values[i] != sorted_values[i - 1]:\n                thresholds.append((sorted_values[i - 1] + sorted_values[i]) / 2)\n        for threshold in thresholds:\n            left_mask = feature <= threshold\n            right_mask = ~left_mask\n            left_labels = y[left_mask]\n            right_labels = y[right_mask]\n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n            gain = parent_entropy - p_left * left_entropy - p_right * right_entropy\n            if gain > best_gain or (gain == best_gain and j < best_feature_index) or (gain == best_gain and j == best_feature_index and (threshold < best_threshold)):\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = threshold\n                best_left_majority = majority_label(left_labels)\n                best_right_majority = majority_label(right_labels)\n    if best_gain <= 0:\n        return (-1, None, majority_label_all, majority_label_all)\n    best_threshold = round(best_threshold, 4)\n    return (best_feature_index, best_threshold, best_left_majority, best_right_majority)"}
{"task_id": 446, "completion_id": 5, "solution": "import numpy as np\nfrom collections import Counter\nfrom typing import list, tuple\ndef entropy(labels: list[int]) -> float:\n    \"\"\"Compute Shannon entropy of a list of labels.\"\"\"\n    if not labels:\n        return 0.0\n    total = len(labels)\n    counts = Counter(labels)\n    return -sum((count / total * np.log2(count / total) for count in counts.values()))\ndef get_majority_label(labels: list[int]) -> int:\n    \"\"\"Return the most frequent label, resolving ties by smallest value.\"\"\"\n    return min(max(Counter(labels).items(), key=lambda x: (x[1], -x[0]))[0])\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n    n_samples = len(y)\n    best_gain = -float('inf')\n    best_feature_index = -1\n    best_threshold = None\n    best_left_majority = None\n    best_right_majority = None\n    parent_entropy = entropy(y)\n    for j in range(len(X[0])):\n        col = [X[i][j] for i in range(n_samples)]\n        sorted_col = sorted(set(col))\n        values = [X[i][j] for i in range(n_samples)]\n        for i in range(len(sorted_col) - 1):\n            t = (sorted_col[i] + sorted_col[i + 1]) / 2\n            t = round(t, 4)\n            left_mask = [val <= t for val in values]\n            left_indices = [i for (i, val) in enumerate(left_mask) if val]\n            right_indices = [i for (i, val) in enumerate(left_mask) if not val]\n            if left_indices and right_indices:\n                left_labels = [y[i] for i in left_indices]\n                right_labels = [y[i] for i in right_indices]\n                left_p = len(left_indices) / n_samples\n                right_p = len(right_indices) / n_samples\n                gain = parent_entropy - left_p * entropy(left_labels) - right_p * entropy(right_labels)\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature_index = j\n                    best_threshold = t\n                    best_left_majority = get_majority_label(left_labels)\n                    best_right_majority = get_majority_label(right_labels)\n                elif np.isclose(gain, best_gain):\n                    if j < best_feature_index:\n                        best_feature_index = j\n                        best_threshold = t\n                        best_left_majority = get_majority_label(left_labels)\n                        best_right_majority = get_majority_label(right_labels)\n                    elif j == best_feature_index:\n                        if t < best_threshold:\n                            best_threshold = t\n                            best_left_majority = get_majority_label(left_labels)\n                            best_right_majority = get_majority_label(right_labels)\n    if best_gain <= 0:\n        majority_label = get_majority_label(y)\n        return (-1, None, majority_label, majority_label)\n    return (best_feature_index, best_threshold, best_left_majority, best_right_majority)"}
{"task_id": 446, "completion_id": 6, "solution": "import numpy as np\nfrom collections import Counter\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n    \n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple.\n    \n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n    \n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n\n    def get_majority_label(labels):\n        counter = Counter(labels)\n        return min((label for (label, count) in counter.most_common() if count == max(counter.values())))\n\n    def entropy(labels):\n        counter = Counter(labels)\n        total = len(labels)\n        if total == 0:\n            return 0\n        ent = 0.0\n        for count in counter.values():\n            p = count / total\n            ent -= p * np.log2(p)\n        return ent\n    parent_entropy = entropy(y)\n    majority_label = get_majority_label(y)\n    best_gain = 0\n    best_feature_index = -1\n    best_threshold = None\n    best_left_majority = majority_label\n    best_right_majority = majority_label\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        unique_values = np.unique(feature_values)\n        if len(unique_values) <= 1:\n            continue\n        thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n        for threshold in np.sort(thresholds):\n            left_indices = feature_values <= threshold\n            right_indices = feature_values > threshold\n            y_left = y[left_indices]\n            y_right = y[right_indices]\n            p_left = len(y_left) / n_samples\n            p_right = len(y_right) / n_samples\n            if len(y_left) == 0 or len(y_right) == 0:\n                continue\n            gain = parent_entropy - p_left * entropy(y_left) - p_right * entropy(y_right)\n            if gain > best_gain or (np.isclose(gain, best_gain) and feature_idx < best_feature_index) or (np.isclose(gain, best_gain) and feature_idx == best_feature_index and (threshold < best_threshold)):\n                best_gain = gain\n                best_feature_index = feature_idx\n                best_threshold = threshold\n                best_left_majority = get_majority_label(y_left)\n                best_right_majority = get_majority_label(y_right)\n    if best_gain <= 1e-09:\n        return (-1, None, majority_label, majority_label)\n    else:\n        return (best_feature_index, round(best_threshold, 4), best_left_majority, best_right_majority)"}
{"task_id": 446, "completion_id": 7, "solution": "import numpy as np\nfrom collections import Counter\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    n_samples = len(y)\n    overall_label_counts = Counter(y)\n    overall_majority_label = min([label for (label, count) in overall_label_counts.most_common(1) if count == max(overall_label_counts.values())])\n    overall_entropy = shannon_entropy(y)\n    best_gain = -1\n    best_feature_index = -1\n    best_threshold = None\n    best_left_majority = overall_majority_label\n    best_right_majority = overall_majority_label\n    for j in range(len(X[0])):\n        feature_values = [X[i][j] for i in range(n_samples)]\n        unique_values = sorted(set(feature_values))\n        if len(unique_values) <= 1:\n            continue\n        for i in range(len(unique_values) - 1):\n            t = (unique_values[i] + unique_values[i + 1]) / 2\n            left_indices = [i for i in range(n_samples) if X[i][j] <= t]\n            right_indices = [i for i in range(n_samples) if X[i][j] > t]\n            p_left = len(left_indices) / n_samples\n            p_right = len(right_indices) / n_samples\n            left_y = [y[i] for i in left_indices]\n            right_y = [y[i] for i in right_indices]\n            if not left_y or not right_y:\n                continue\n            entropy_left = shannon_entropy(left_y)\n            entropy_right = shannon_entropy(right_y)\n            gain = overall_entropy - p_left * entropy_left - p_right * entropy_right\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = t\n                best_left_majority = majority_label(left_y)\n                best_right_majority = majority_label(right_y)\n            elif abs(gain - best_gain) < 1e-09 and gain == best_gain:\n                if j < best_feature_index:\n                    best_feature_index = j\n                    best_threshold = t\n                    best_left_majority = majority_label(left_y)\n                    best_right_majority = majority_label(right_y)\n                elif j == best_feature_index:\n                    if t < best_threshold:\n                        best_threshold = t\n                        best_left_majority = majority_label(left_y)\n                        best_right_majority = majority_label(right_y)\n    if best_gain > -1:\n        return (best_feature_index, round(best_threshold, 4), best_left_majority, best_right_majority)\n    else:\n        return (-1, None, overall_majority_label, overall_majority_label)\ndef shannon_entropy(labels):\n    \"\"\"Calculate Shannon entropy of a list of class labels.\"\"\"\n    if not labels:\n        return 0.0\n    counter = Counter(labels)\n    probabilities = [count / len(labels) for count in counter.values()]\n    return -sum((p * np.log2(p) for p in probabilities if p > 0))\ndef majority_label(labels, tiebreaker='min'):\n    \"\"\"Returns the majority label. In case of a tie, breaks by smallest label.\"\"\"\n    counter = Counter(labels)\n    max_count = max(counter.values())\n    candidates = [label for (label, count) in counter.items() if count == max_count]\n    return min(candidates) if tiebreaker == 'min' else max(candidates)"}
{"task_id": 446, "completion_id": 8, "solution": "import numpy as np\nfrom collections import Counter\ndef entropy(y):\n    \"\"\"Compute Shannon entropy of a list of class labels.\"\"\"\n    if len(y) == 0:\n        return 0.0\n    counts = np.bincount(y)\n    probabilities = counts / len(y)\n    entropy = -np.sum(probabilities * np.log2(np.clip(probabilities, 1e-15, None)))\n    return entropy\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    parent_entropy = entropy(y)\n    best_info_gain = 0.0\n    best_feature_index = -1\n    best_threshold = None\n    best_left_majority_label = None\n    best_right_majority_label = None\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        unique_values = np.unique(feature_values)\n        if len(unique_values) <= 1:\n            continue\n        sorted_values = np.sort(unique_values)\n        thresholds = (sorted_values[:-1] + sorted_values[1:]) / 2\n        for t in thresholds:\n            left_indices = feature_values <= t\n            left_y = y[left_indices]\n            right_y = y[~left_indices]\n            if len(left_y) == 0 or len(right_y) == 0:\n                continue\n            left_entropy = entropy(left_y)\n            right_entropy = entropy(right_y)\n            p_left = len(left_y) / n_samples\n            p_right = len(right_y) / n_samples\n            info_gain = parent_entropy - p_left * left_entropy - p_right * right_entropy\n            if info_gain > best_info_gain:\n                best_info_gain = info_gain\n                best_feature_index = feature_idx\n                best_threshold = t\n                left_counts = Counter(left_y)\n                left_majority = min((k for (k, v) in left_counts.items() if v == max(left_counts.values())))\n                right_counts = Counter(right_y)\n                right_majority = min((k for (k, v) in right_counts.items() if v == max(right_counts.values())))\n                best_left_majority_label = left_majority\n                best_right_majority_label = right_majority\n            elif np.isclose(info_gain, best_info_gain) and feature_idx < best_feature_index:\n                best_info_gain = info_gain\n                best_feature_index = feature_idx\n                best_threshold = t\n                left_counts = Counter(left_y)\n                left_majority = min((k for (k, v) in left_counts.items() if v == max(left_counts.values())))\n                right_counts = Counter(right_y)\n                right_majority = min((k for (k, v) in right_counts.items() if v == max(right_counts.values())))\n                best_left_majority_label = left_majority\n                best_right_majority_label = right_majority\n            elif np.isclose(info_gain, best_info_gain) and feature_idx == best_feature_index:\n                if t < best_threshold:\n                    best_threshold = t\n                    left_counts = Counter(left_y)\n                    left_majority = min((k for (k, v) in left_counts.items() if v == max(left_counts.values())))\n                    right_counts = Counter(right_y)\n                    right_majority = min((k for (k, v) in right_counts.items() if v == max(right_counts.values())))\n                    best_left_majority_label = left_majority\n                    best_right_majority_label = right_majority\n    if best_info_gain == parent_entropy:\n        y_counts = Counter(y)\n        majority_label = min((k for (k, v) in y_counts.items() if v == max(y_counts.values())))\n        return (-1, None, majority_label, majority_label)\n    else:\n        best_threshold = round(best_threshold, 4)\n        return (best_feature_index, best_threshold, best_left_majority_label, best_right_majority_label)\nX = [[2.7, 4.5], [1.2, 3.0], [3.1, 5.0], [0.9, 2.8], [2.4, 4.7]]\ny = [0, 0, 1, 0, 1]"}
{"task_id": 446, "completion_id": 9, "solution": "import numpy as np\nfrom collections import Counter\nimport math\ndef entropy(label_counts):\n    \"\"\"Compute Shannon entropy of a list of class label counts.\"\"\"\n    total = sum(label_counts)\n    if total == 0:\n        return 0.0\n    return -sum((count / total * math.log2(count / total) for count in label_counts if count > 0))\ndef get_majority_label(labels):\n    \"\"\"Return the majority label, breaking ties by smallest label.\"\"\"\n    counter = Counter(labels)\n    return max(counter.items(), key=lambda x: (x[1], -x[0]))[0]\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"\n    Find the best decision stump that maximizes information gain.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    parent_entropy = entropy(Counter(y).values())\n    overall_majority_label = get_majority_label(y)\n    best_gain = -1.0\n    best_feature_index = -1\n    best_threshold = None\n    best_left_label = overall_majority_label\n    best_right_label = overall_majority_label\n    for j in range(n_features):\n        feature_col = X[:, j]\n        indices = np.argsort(feature_col)\n        sorted_X = feature_col[indices]\n        sorted_y = y[indices]\n        unique_values = np.unique(sorted_X)\n        if len(unique_values) < 2:\n            continue\n        for i in range(len(unique_values) - 1):\n            t = (unique_values[i] + unique_values[i + 1]) / 2\n            left_mask = sorted_X <= t\n            right_mask = sorted_X > t\n            left_labels = sorted_y[left_mask]\n            right_labels = sorted_y[right_mask]\n            left_entropy = entropy(Counter(left_labels).values())\n            right_entropy = entropy(Counter(right_labels).values())\n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n            gain = parent_entropy - (p_left * left_entropy + p_right * right_entropy)\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(t, 4)\n                best_left_label = get_majority_label(left_labels)\n                best_right_label = get_majority_label(right_labels)\n            elif gain == best_gain and j == best_feature_index:\n                if t < best_threshold:\n                    best_threshold = round(t, 4)\n                    best_left_label = get_majority_label(left_labels)\n                    best_right_label = get_majority_label(right_labels)\n    if best_gain <= 1e-10:\n        return (-1, None, overall_majority_label, overall_majority_label)\n    return (best_feature_index, best_threshold, best_left_label, best_right_label)"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Union\nimport numpy as np\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    result_0 = []\n    result_1 = []\n    for sample in X:\n        feature_value = sample[feature_i]\n        if isinstance(threshold, (int, float)):\n            if feature_value >= threshold:\n                result_0.append(sample)\n            else:\n                result_1.append(sample)\n        elif feature_value == threshold:\n            result_0.append(sample)\n        else:\n            result_1.append(sample)\n    return [np.array(result_0).tolist(), np.array(result_1).tolist()]\nX = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])"}
{"task_id": 452, "completion_id": 1, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[list]], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X = np.array(X)\n    subset1 = []\n    subset2 = []\n    for sample in X:\n        feature_value = sample[feature_i]\n        if isinstance(threshold, (int, float)):\n            if feature_value >= threshold:\n                subset1.append(sample)\n            else:\n                subset2.append(sample)\n        elif feature_value == threshold:\n            subset1.append(sample)\n        else:\n            subset2.append(sample)\n    subset1 = np.array(subset1).tolist() if subset1 else []\n    subset2 = np.array(subset2).tolist() if subset2 else []\n    return [subset1, subset2]"}
{"task_id": 452, "completion_id": 2, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X_np = np.array(X)\n    first_subset = []\n    second_subset = []\n    for sample in X_np:\n        feature_value = sample[feature_i]\n        if isinstance(threshold, (int, float)):\n            if feature_value >= threshold:\n                first_subset.append(sample)\n            else:\n                second_subset.append(sample)\n        elif feature_value == threshold:\n            first_subset.append(sample)\n        else:\n            second_subset.append(sample)\n    return [np.array(first_subset).tolist(), np.array(second_subset).tolist()]"}
{"task_id": 452, "completion_id": 3, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[list]], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X = np.array(X)\n    first_subset = []\n    second_subset = []\n    for sample in X:\n        feature_value = sample[feature_i]\n        if isinstance(threshold, (int, float)):\n            if feature_value >= threshold:\n                first_subset.append(sample)\n            else:\n                second_subset.append(sample)\n        elif feature_value == threshold:\n            first_subset.append(sample)\n        else:\n            second_subset.append(sample)\n    return [np.array(first_subset).tolist(), np.array(second_subset).tolist()]"}
{"task_id": 452, "completion_id": 4, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X = np.array(X) if not isinstance(X, np.ndarray) else X\n    first_subset = []\n    second_subset = []\n    for sample in X:\n        feature_value = sample[feature_i]\n        if isinstance(threshold, (int, float)):\n            if feature_value >= threshold:\n                first_subset.append(sample.tolist())\n            else:\n                second_subset.append(sample.tolist())\n        elif feature_value == threshold:\n            first_subset.append(sample.tolist())\n        else:\n            second_subset.append(sample.tolist())\n    return [first_subset, second_subset]"}
{"task_id": 452, "completion_id": 5, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    subset1 = []\n    subset2 = []\n    for sample in X:\n        feature_value = sample[feature_i]\n        if isinstance(threshold, (int, float)):\n            if feature_value >= threshold:\n                subset1.append(sample)\n            else:\n                subset2.append(sample)\n        elif feature_value == threshold:\n            subset1.append(sample)\n        else:\n            subset2.append(sample)\n    return [np.array(subset1).tolist(), np.array(subset2).tolist()]"}
{"task_id": 452, "completion_id": 6, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if isinstance(X, np.ndarray):\n        X = X.tolist()\n    subset1 = []\n    subset2 = []\n    for sample in X:\n        feature_value = sample[feature_i]\n        if isinstance(threshold, (int, float)):\n            if feature_value >= threshold:\n                subset1.append(sample)\n            else:\n                subset2.append(sample)\n        elif feature_value == threshold:\n            subset1.append(sample)\n        else:\n            subset2.append(sample)\n    return [subset1, subset2]"}
{"task_id": 452, "completion_id": 7, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function creates two disjoint subsets:\n    1. For a numeric threshold (int or float), the first subset contains every\n       sample whose value in column *feature_i* is greater than or equal to\n       the threshold.\n    2. For a non-numeric threshold, the first subset contains every sample whose\n       value in column *feature_i* is exactly equal to the threshold.\n\n    The second subset contains the remaining samples. Both subsets must keep the\n    original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two. *result[0]* is the first subset, *result[1]* is the\n        second subset. Each subset must be converted to a regular Python list.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    first_subset = []\n    second_subset = []\n    for sample in X:\n        feature_value = sample[feature_i]\n        if isinstance(threshold, (int, float)):\n            if feature_value >= threshold:\n                first_subset.append(sample.tolist())\n            else:\n                second_subset.append(sample.tolist())\n        elif feature_value == threshold:\n            first_subset.append(sample.tolist())\n        else:\n            second_subset.append(sample.tolist())\n    return [first_subset, second_subset]"}
{"task_id": 452, "completion_id": 8, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    first_subset = []\n    second_subset = []\n    for sample in X:\n        feature_value = sample[feature_i]\n        if isinstance(threshold, (int, float)):\n            if feature_value >= threshold:\n                first_subset.append(sample)\n            else:\n                second_subset.append(sample)\n        elif feature_value == threshold:\n            first_subset.append(sample)\n        else:\n            second_subset.append(sample)\n    return [np.array(first_subset).tolist(), np.array(second_subset).tolist()]"}
{"task_id": 452, "completion_id": 9, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[list]], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    result1 = []\n    result2 = []\n    X = np.array(X)\n    for sample in X:\n        feature_value = sample[feature_i]\n        if isinstance(threshold, (int, float)):\n            if feature_value >= threshold:\n                result1.append(sample.tolist())\n            else:\n                result2.append(sample.tolist())\n        elif feature_value == threshold:\n            result1.append(sample.tolist())\n        else:\n            result2.append(sample.tolist())\n    return [result1, result2]"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef update_q_values(Q: np.ndarray, Q_next: np.ndarray, actions: List[int], rewards: List[float], dones: List[bool], gamma: float) -> List[List[float]]:\n    \"\"\"\n    Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as Q.\n    actions : List[int]\n        Action index taken in each state.\n    rewards : List[float]\n        Reward received after each action.\n    dones : List[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    List[List[float]]\n        Updated Q matrix for training targets with values rounded to 4 decimals. \n        Returns -1 if inputs are invalid.\n    \"\"\"\n    if Q.shape != Q_next.shape:\n        return -1\n    if len(Q) != len(actions) or len(actions) != len(rewards) or len(rewards) != len(dones):\n        return -1\n    if gamma < 0 or gamma > 1:\n        return -1\n    (batch_size, n_actions) = Q.shape\n    y = np.copy(Q)\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        y[i, actions[i]] = target\n    y = y.round(4).tolist()\n    return y\nQ = np.array([[0.1, 1.2, 0.7], [0.5, 0.9, 0.2], [1.0, 0.5, 1.5]])\nQ_next = np.array([[0.9, 1.8, 0.5], [0.1, 1.5, 1.1], [0.0, 1.0, 2.0]])\nactions = [1, 0, 0]\nrewards = [1.0, 0.5, 2.3]\ndones = [False, True, False]\ngamma = 0.99"}
{"task_id": 453, "completion_id": 1, "solution": "import numpy as np\nfrom typing import List\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: List[int], rewards: List[float], dones: List[bool], gamma: float) -> List[List[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : List[int]\n        Action index taken in each state.\n    rewards : List[float]\n        Reward received after each action.\n    dones : List[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    List[List[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if Q.shape[0] != Q_next.shape[0]:\n        return -1\n    batch_size = Q.shape[0]\n    n_actions = Q.shape[1]\n    if len(actions) != batch_size or len(rewards) != batch_size or len(dones) != batch_size or (not 0 <= gamma <= 1):\n        return -1\n    targets = []\n    for i in range(batch_size):\n        target = Q[i].copy()\n        if dones[i]:\n            target[actions[i]] = rewards[i]\n        else:\n            target[actions[i]] = rewards[i] + gamma * np.max(Q_next[i])\n        target = np.around(target, 4)\n        targets.append(target.tolist())\n    return targets\nQ_next = np.array([[2.0, 3.5, 4.0], [1.0, 0.5, 2.0]])\nactions = [0, 2]\nrewards = [5.0, 1.0]\ndones = [False, True]\ngamma = 0.99"}
{"task_id": 453, "completion_id": 2, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not 0 <= gamma <= 1:\n        return -1\n    if Q.shape != Q_next.shape:\n        return -1\n    if Q.shape[0] != len(actions) != len(rewards) != len(dones):\n        return -1\n    (batch_size, n_actions) = Q.shape\n    targets = np.copy(Q)\n    for i in range(batch_size):\n        action = actions[i]\n        reward = rewards[i]\n        done = dones[i]\n        if done:\n            target = reward\n        else:\n            target = reward + gamma * np.max(Q_next[i])\n        targets[i, action] = target\n    return [[round(val, 4) for val in row] for row in targets]"}
{"task_id": 453, "completion_id": 3, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if Q.shape != Q_next.shape:\n        return -1\n    if len(actions) != len(Q):\n        return -1\n    if len(rewards) != len(Q):\n        return -1\n    if len(dones) != len(Q):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    (batch_size, n_actions) = Q.shape\n    y = Q.copy()\n    for i in range(batch_size):\n        r = rewards[i]\n        done = dones[i]\n        a = actions[i]\n        if done:\n            target = r\n        else:\n            target = r + gamma * np.max(Q_next[i])\n        y[i, a] = target\n    return [list(row.round(4)) for row in y]"}
{"task_id": 453, "completion_id": 4, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"\n    Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not (Q.shape == Q_next.shape and len(Q) == len(Q_next) and (len(actions) == len(rewards) == len(dones))):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    (batch_size, n_actions) = Q.shape\n    y = Q.copy()\n    for i in range(batch_size):\n        action = actions[i]\n        reward = rewards[i]\n        done = dones[i]\n        if action < 0 or action >= n_actions:\n            return -1\n        if done:\n            target = reward\n        else:\n            max_q_next = np.max(Q_next[i])\n            target = reward + gamma * max_q_next\n        y[i, action] = target\n    y = [list(row) for row in y]\n    y = [[round(val, 4) for val in row] for row in y]\n    return y\nQ = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\nQ_next = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])\nactions = [0, 2]\nrewards = [10.0, 20.0]\ndones = [False, True]\ngamma = 0.99"}
{"task_id": 453, "completion_id": 5, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not isinstance(Q, np.ndarray) or not isinstance(Q_next, np.ndarray) or Q.shape != Q_next.shape or (len(actions) != Q.shape[0]) or (len(rewards) != Q.shape[0]) or (len(dones) != Q.shape[0]) or (not 0 <= gamma <= 1):\n        return -1\n    (batch_size, n_actions) = Q.shape\n    y = Q.copy()\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        y[i, actions[i]] = target\n    return [[round(val, 4) for val in row] for row in y]"}
{"task_id": 453, "completion_id": 6, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not len(Q) == len(actions) == len(rewards) == len(dones) == len(Q_next):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    target_Q = Q.copy()\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        target_Q[i, actions[i]] = target\n    return target_Q.round(4).tolist()"}
{"task_id": 453, "completion_id": 7, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"\n    Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if Q.ndim != 2 or Q_next.ndim != 2:\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    if len(Q) != len(Q_next) or len(Q) != len(actions):\n        return -1\n    if len(actions) != len(rewards) or len(rewards) != len(dones):\n        return -1\n    (batch_size, n_actions) = Q.shape\n    y = [row.copy() for row in Q]\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        y[i][actions[i]] = target\n    return [[round(val, 4) for val in row] for row in y]\nQ = np.array([[1.1, 2.2, 3.3], [4.4, 5.5, 6.6]])\nQ_next = np.array([[10.0, 20.0, 30.0], [40.0, 50.0, 60.0]])\nactions = [0, 2]\nrewards = [10, 20]\ndones = [False, True]\ngamma = 0.9"}
{"task_id": 453, "completion_id": 8, "solution": "import numpy as np\nfrom typing import List\ndef update_q_values(Q: np.ndarray, Q_next: np.ndarray, actions: List[int], rewards: List[float], dones: List[bool], gamma: float) -> List[List[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as Q.\n    actions : List[int]\n        Action index taken in each state.\n    rewards : List[float]\n        Reward received after each action.\n    dones : List[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    List[List[float]]\n        Updated Q matrix for supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not (Q.shape == Q_next.shape and Q.shape[0] == len(actions) == len(rewards) == len(dones) and (0 <= gamma <= 1)):\n        return -1\n    (batch_size, n_actions) = Q.shape\n    y = Q.copy()\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            max_q_next = Q_next[i].max()\n            target = rewards[i] + gamma * max_q_next\n        y[i, actions[i]] = target\n    return np.round(y, 4).tolist()"}
{"task_id": 453, "completion_id": 9, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not (isinstance(Q, np.ndarray) and isinstance(Q_next, np.ndarray)):\n        return -1\n    if Q.shape != Q_next.shape:\n        return -1\n    if len(Q.shape) != 2 or Q.shape[0] != Q_next.shape[0]:\n        return -1\n    if not len(actions) == len(rewards) == len(dones) == Q.shape[0]:\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    (batch_size, n_actions) = Q.shape\n    y = Q.copy()\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        y[i, actions[i]] = target\n    y = np.round(y, 4).tolist()\n    return y"}
{"task_id": 458, "completion_id": 0, "solution": "def to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = np.array(labels)\n    if (labels < 0).any():\n        return -1\n    if num_classes is None:\n        num_classes = int(np.max(labels) + 1)\n    else:\n        num_classes = int(num_classes)\n    if num_classes <= np.max(labels):\n        return -1\n    one_hot = np.zeros((len(labels), num_classes), dtype=int)\n    for (idx, label) in enumerate(labels):\n        one_hot[idx, label] = 1\n    return one_hot.tolist()"}
{"task_id": 458, "completion_id": 1, "solution": "import numpy as np\nfrom typing import list, tuple\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = list(labels)\n    if any((not isinstance(label, int) or label < 0 for label in labels)):\n        return -1\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    elif num_classes < max(labels) + 1 or any((label >= num_classes for label in labels)):\n        return -1\n    result = []\n    for label in labels:\n        row = [0] * num_classes\n        row[label] = 1\n        result.append(row)\n    return result"}
{"task_id": 458, "completion_id": 2, "solution": "def to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels_np = np.array(labels)\n    if np.any(labels_np < 0):\n        return -1\n    if num_classes is None:\n        num_classes = int(np.max(labels_np) + 1)\n    else:\n        num_classes = int(num_classes)\n    if num_classes <= np.max(labels_np):\n        return -1\n    one_hot = np.zeros((len(labels_np), num_classes), dtype=int)\n    one_hot[np.arange(len(labels_np)), labels_np] = 1\n    return one_hot.tolist()"}
{"task_id": 458, "completion_id": 3, "solution": "import numpy as np\nfrom typing import list, tuple\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels_arr = np.array(labels)\n    if labels_arr.ndim != 1:\n        return -1\n    if np.any(labels_arr < 0):\n        return -1\n    if num_classes is None:\n        num_classes = int(np.max(labels_arr) + 1)\n    elif num_classes <= 0 or num_classes < np.max(labels_arr) + 1:\n        return -1\n    result = np.zeros((len(labels_arr), num_classes), dtype=int)\n    result[np.arange(len(labels_arr)), labels_arr] = 1\n    return result.tolist()"}
{"task_id": 458, "completion_id": 4, "solution": "import numpy as np\nfrom typing import list, tuple\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = np.asarray(labels)\n    if (labels < 0).any() or not np.issubdtype(labels.dtype, np.integer):\n        return -1\n    if num_classes is None:\n        num_classes = int(np.max(labels) + 1)\n    elif num_classes < int(np.max(labels) + 1):\n        return -1\n    result = []\n    for label in labels:\n        one_hot = [0] * num_classes\n        one_hot[label] = 1\n        result.append(one_hot)\n    return result"}
{"task_id": 458, "completion_id": 5, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = np.array(labels)\n    if (labels < 0).any():\n        return -1\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    elif num_classes < max(labels) + 1:\n        return -1\n    n = len(labels)\n    one_hot = np.zeros((n, num_classes), dtype=int)\n    one_hot[np.arange(n), labels] = 1\n    return one_hot.tolist()"}
{"task_id": 458, "completion_id": 6, "solution": "import numpy as np\nfrom typing import list, tuple\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = np.asarray(labels)\n    if labels.ndim != 1:\n        return -1\n    if np.any(labels < 0):\n        return -1\n    if num_classes is None:\n        num_classes = int(np.max(labels) + 1)\n    elif num_classes < int(np.max(labels) + 1):\n        return -1\n    one_hot = []\n    for label in labels:\n        row = [0] * num_classes\n        row[label] = 1\n        one_hot.append(row)\n    return one_hot"}
{"task_id": 458, "completion_id": 7, "solution": "import numpy as np\nfrom typing import list, tuple, Union\ndef to_categorical(labels: Union[list, tuple, np.ndarray], num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = np.array(labels, dtype=int)\n    if labels.ndim != 1:\n        return -1\n    if np.any(labels < 0):\n        return -1\n    if num_classes is None:\n        num_classes = int(np.max(labels)) + 1\n    if num_classes <= np.max(labels):\n        return -1\n    result = []\n    for label in labels:\n        one_hot = [0] * num_classes\n        one_hot[label] = 1\n        result.append(one_hot)\n    return result"}
{"task_id": 458, "completion_id": 8, "solution": "import numpy as np\nfrom typing import list, tuple\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = np.array(labels)\n    if np.any(labels < 0):\n        return -1\n    if num_classes is None:\n        num_classes = int(np.max(labels) + 1)\n    elif num_classes <= np.max(labels) or num_classes < 1:\n        return -1\n    num_samples = len(labels)\n    one_hot = [[0 for _ in range(num_classes)] for _ in range(num_samples)]\n    for (i, label) in enumerate(labels):\n        one_hot[i][label] = 1\n    return one_hot"}
{"task_id": 458, "completion_id": 9, "solution": "import numpy as np\nfrom typing import list, tuple\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if isinstance(labels, np.ndarray):\n        labels = labels.tolist()\n    elif not isinstance(labels, (list, tuple)):\n        return -1\n    for label in labels:\n        if not isinstance(label, int) or label < 0:\n            return -1\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    elif num_classes < max(labels) + 1:\n        return -1\n    result = []\n    for label in labels:\n        row = [0] * num_classes\n        row[label] = 1\n        result.append(row)\n    return result"}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(y)\n    if n_estimators <= 0 or n_samples == 0:\n        mean_y = np.mean(y) if n_samples > 0 else 0\n        return [round(mean_y, 4)] * n_samples\n    y_pred = np.full(n_samples, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        if np.allclose(residuals, 0):\n            break\n        best_sse = float('inf')\n        best_t = None\n        best_vL = None\n        best_vR = None\n        uniques = np.unique(x)\n        for t in uniques[:-1]:\n            left_mask = x <= t\n            right_mask = x > t\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            left_residual = residuals[left_mask]\n            right_residual = residuals[right_mask]\n            vL = np.mean(left_residual)\n            vR = np.mean(right_residual)\n            predicted_r = np.where(x <= t, vL, vR)\n            sse = np.sum((residuals - predicted_r) ** 2)\n            if sse < best_sse:\n                best_sse = sse\n                best_t = t\n                best_vL = vL\n                best_vR = vR\n        if best_t is not None:\n            predicted_r = np.where(x <= best_t, best_vL, best_vR)\n        else:\n            predicted_r = np.full(n_samples, np.mean(residuals))\n        y_pred += learning_rate * predicted_r\n    return np.round(y_pred, 4).tolist()\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny = [2.2, 3.3, 1.9, 4.1, 5.0]"}
{"task_id": 461, "completion_id": 1, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(y)\n    if n_estimators <= 0:\n        return [float(np.mean(y).round(4))] * n_samples\n    preds = np.full(n_samples, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - preds\n        split_values = np.unique(x)\n        if len(split_values) > 1:\n            split_values = split_values[:-1]\n        else:\n            preds += learning_rate * np.mean(residuals)\n            continue\n        best_sse = float('inf')\n        best_split = None\n        best_vL = None\n        best_vR = None\n        for t in split_values:\n            mask = x <= t\n            left_indices = np.where(mask)[0]\n            right_indices = np.where(~mask)[0]\n            if len(left_indices) == 0 or len(right_indices) == 0:\n                continue\n            vL = np.mean(residuals[left_indices])\n            vR = np.mean(residuals[right_indices])\n            pred_residuals = np.where(mask, vL, vR)\n            sse = np.sum((residuals - pred_residuals) ** 2)\n            if sse < best_sse:\n                best_sse = sse\n                best_split = t\n                best_vL = vL\n                best_vR = vR\n                if np.allclose(best_sse, 0):\n                    break\n        if best_split is not None:\n            mask = x <= best_split\n            preds += learning_rate * np.where(mask, best_vL, best_vR)\n        else:\n            preds += learning_rate * np.mean(residuals)\n    return np.round(preds, 4).tolist()"}
{"task_id": 461, "completion_id": 2, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stuts for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x, dtype=float)\n    y = np.array(y, dtype=float)\n    n_samples = x.shape[0]\n    y_pred = np.full(n_samples, np.mean(y))\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        unique_splits = np.unique(x)\n        if len(unique_splits) < 2:\n            mean_residual = np.mean(residuals)\n            y_pred += learning_rate * mean_residual\n            continue\n        unique_splits = unique_splits[:-1]\n        best_sse = float('inf')\n        best_t = None\n        best_vL = None\n        best_vR = None\n        for t in unique_splits:\n            left_mask = x <= t\n            right_mask = x > t\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            vL = np.mean(residuals[left_mask])\n            vR = np.mean(residuals[right_mask])\n            pred_residuals = np.where(x <= t, vL, vR)\n            sse = np.sum((residuals - pred_residuals) ** 2)\n            if sse < best_sse:\n                best_sse = sse\n                best_t = t\n                best_vL = vL\n                best_vR = vR\n        if best_t is None:\n            mean_residual = np.mean(residuals)\n            y_pred += learning_rate * mean_residual\n        else:\n            pred_residuals = np.where(x <= best_t, best_vL, best_vR)\n            y_pred += learning_rate * pred_residuals\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 461, "completion_id": 3, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    n = len(x)\n    x = np.array(x)\n    y = np.array(y)\n    if n_estimators <= 0:\n        mean_y = np.mean(y)\n        return [round(mean_y, 4)] * n\n    pred = np.full(n, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - pred\n        if np.allclose(residuals, 0.0):\n            break\n        unique_x = np.unique(x)\n        valid_splits = unique_x[:-1]\n        best_sse = np.inf\n        best_split = None\n        best_vL = None\n        best_vR = None\n        for t in valid_splits:\n            mask_L = x <= t\n            mask_R = x > t\n            if np.sum(mask_L) == 0 or np.sum(mask_R) == 0:\n                continue\n            r_L = residuals[mask_L]\n            r_R = residuals[mask_R]\n            vL = np.mean(r_L)\n            vR = np.mean(r_R)\n            sse_L = np.sum((r_L - vL) ** 2)\n            sse_R = np.sum((r_R - vR) ** 2)\n            total_sse = sse_L + sse_R\n            if total_sse < best_sse:\n                best_sse = total_sse\n                best_split = t\n                best_vL = vL\n                best_vR = vR\n        if best_split is None:\n            v = np.mean(residuals)\n            pred += learning_rate * v\n        else:\n            for i in range(n):\n                if x[i] <= best_split:\n                    pred[i] += learning_rate * best_vL\n                else:\n                    pred[i] += learning_rate * best_vR\n    return np.round(pred, 4).tolist()"}
{"task_id": 461, "completion_id": 4, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stuts for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(y)\n    if n_estimators <= 0:\n        mean_y = np.mean(y)\n        return [round(mean_y, 4) for _ in range(n_samples)]\n    y_pred = np.full(n_samples, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        unique_splits = np.unique(x)\n        if len(unique_splits) == 1:\n            best_split = None\n            sse_left = np.sum(residuals ** 2)\n            sse_right = 0\n            sse_total = sse_left\n        else:\n            best_split = None\n            best_sse = float('inf')\n            for t in unique_splits[:-1]:\n                mask_left = x <= t\n                mask_right = x > t\n                if np.sum(mask_left) == 0 or np.sum(mask_right) == 0:\n                    continue\n                mean_res_left = np.mean(residuals[mask_left])\n                mean_res_right = np.mean(residuals[mask_right])\n                pred_res = np.where(x <= t, mean_res_left, mean_res_right)\n                sse = np.sum((residuals - pred_res) ** 2)\n                if sse < best_sse:\n                    best_sse = sse\n                    best_split = t\n                    best_mean_left = mean_res_left\n                    best_mean_right = mean_res_right\n            if best_split is None:\n                sse_total = np.sum(residuals ** 2)\n                mean_residual = np.mean(residuals)\n                best_mean_left = best_mean_right = mean_residual\n            else:\n                pred_res = np.where(x <= best_split, best_mean_left, best_mean_right)\n        y_pred += learning_rate * pred_res\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 461, "completion_id": 5, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    if n_estimators <= 0:\n        y_mean = np.mean(y)\n        return [round(y_mean, 4) for _ in range(len(y))]\n    x = np.array(x, dtype=float)\n    y = np.array(y, dtype=float)\n    n = len(x)\n    y_pred = np.full(n, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        if np.all(residuals == 0):\n            break\n        unique_x = np.unique(x)\n        if len(unique_x) < 2:\n            v = np.mean(residuals)\n            y_pred += learning_rate * v\n            continue\n        best_split = None\n        best_sse = float('inf')\n        for t in unique_x[:-1]:\n            left_mask = x <= t\n            right_mask = x > t\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            left_residual_mean = np.mean(residuals[left_mask])\n            right_residual_mean = np.mean(residuals[right_mask])\n            pred_r = np.where(left_mask, left_residual_mean, right_residual_mean)\n            sse = np.sum((residuals - pred_r) ** 2)\n            if sse < best_sse:\n                best_sse = sse\n                best_split = {'threshold': t, 'left_pred': left_residual_mean, 'right_pred': right_residual_mean}\n        if best_split is None:\n            v = np.mean(residuals)\n            y_pred += learning_rate * v\n            continue\n        pred_r = np.where(x <= best_split['threshold'], best_split['left_pred'], best_split['right_pred'])\n        y_pred += learning_rate * pred_r\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 461, "completion_id": 6, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(x)\n    if n_estimators <= 0:\n        return [float(np.round(np.mean(y), 4))] * n_samples\n    y_pred = np.full_like(y, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        unique_x = sorted(set(x))\n        if len(unique_x) <= 1:\n            mean_residual = np.mean(residuals)\n            y_pred += learning_rate * mean_residual\n            continue\n        min_sse = float('inf')\n        best_t = None\n        best_vL = None\n        best_vR = None\n        for i in range(len(unique_x) - 1):\n            t = unique_x[i]\n            mask_left = x <= t\n            mask_right = x > t\n            if np.sum(mask_left) == 0 or np.sum(mask_right) == 0:\n                continue\n            vL = np.mean(residuals[mask_left])\n            vR = np.mean(residuals[mask_right])\n            predicted_residuals = np.where(x <= t, vL, vR)\n            sse = np.sum((residuals - predicted_residuals) ** 2)\n            if sse < min_sse:\n                min_sse = sse\n                best_t = t\n                best_vL = vL\n                best_vR = vR\n        if best_t is None:\n            y_pred += learning_rate * np.mean(residuals)\n        else:\n            predicted_residuals = np.where(x <= best_t, best_vL, best_vR)\n            y_pred += learning_rate * predicted_residuals\n    return np.round(y_pred, 4).tolist()\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny = [1.0, 2.0, 3.0, 4.0, 5.0]"}
{"task_id": 461, "completion_id": 7, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(y)\n    y_pred = np.full(n_samples, np.mean(y))\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        if np.all(residuals == 0):\n            break\n        unique_x = np.unique(x)\n        if len(unique_x) < 2:\n            mean_residual = np.mean(residuals)\n            y_pred += learning_rate * mean_residual\n            continue\n        best_sse = np.inf\n        best_split = None\n        best_vL = 0.0\n        best_vR = 0.0\n        for t in unique_x[:-1]:\n            left_mask = x <= t\n            right_mask = x > t\n            if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                continue\n            mean_L = np.mean(residuals[left_mask])\n            mean_R = np.mean(residuals[right_mask])\n            sse_L = np.sum((residuals[left_mask] - mean_L) ** 2)\n            sse_R = np.sum((residuals[right_mask] - mean_R) ** 2)\n            total_sse = sse_L + sse_R\n            if total_sse < best_sse:\n                best_sse = total_sse\n                best_split = t\n                best_vL = mean_L\n                best_vR = mean_R\n        if best_split is None:\n            mean_residual = np.mean(residuals)\n            y_pred += learning_rate * mean_residual\n        else:\n            predicted_residuals = np.where(x <= best_split, best_vL, best_vR)\n            y_pred += learning_rate * predicted_residuals\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 461, "completion_id": 8, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    X = np.array(x)\n    y = np.array(y)\n    n = len(y)\n    if n_estimators <= 0:\n        return [round(np.mean(y), 4)] * n\n    y_pred = np.full_like(y, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        if np.allclose(residuals, 0):\n            break\n        best_gain = np.inf\n        best_t = None\n        best_vals = {}\n        unique_x_sorted = np.unique(X)\n        if len(unique_x_sorted) == 1:\n            y_pred += learning_rate * np.mean(residuals)\n            continue\n        for t in unique_x_sorted[:-1]:\n            left_mask = X <= t\n            right_mask = X > t\n            if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                continue\n            left_val = np.mean(residuals[left_mask])\n            right_val = np.mean(residuals[right_mask])\n            residuals_pred = np.where(left_mask, left_val, right_val)\n            sse = np.sum((residuals - residuals_pred) ** 2)\n            if sse < best_gain:\n                best_gain = sse\n                best_t = t\n                best_vals = {'left_val': left_val, 'right_val': right_val}\n        if best_t is None:\n            mean_res = np.mean(residuals)\n            y_pred += learning_rate * mean_res\n        else:\n            left_mask = X <= best_t\n            right_mask = X > best_t\n            predicted_residuals = np.where(left_mask, best_vals['left_val'], best_vals['right_val'])\n            y_pred += learning_rate * predicted_residuals\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 461, "completion_id": 9, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stums for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if n_estimators <= 0:\n        mean_y = np.mean(y)\n        return [float(np.round(mean_y, 4))] * len(y)\n    y_pred = np.full_like(y, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        unique_splits = np.unique(x)\n        if len(unique_splits) > 1:\n            split_points = unique_splits[:-1]\n        else:\n            mean_residual = np.mean(residuals)\n            y_pred += learning_rate * mean_residual\n            if np.allclose(residuals, 0):\n                break\n            continue\n        best_error = float('inf')\n        best_split = None\n        best_values = (0, 0)\n        for t in split_points:\n            left_idx = x <= t\n            right_idx = x > t\n            n_left = np.sum(left_idx)\n            n_right = np.sum(right_idx)\n            if n_left == 0 or n_right == 0:\n                continue\n            res_left = residuals[left_idx]\n            res_right = residuals[right_idx]\n            mean_res_left = np.mean(res_left)\n            mean_res_right = np.mean(res_right)\n            error = np.sum(res_left - mean_res_left) ** 2 + np.sum(res_right - mean_res_right) ** 2\n            if error < best_error:\n                best_error = error\n                best_split = t\n                best_values = (mean_res_left, mean_res_right)\n        if best_split is None:\n            mean_residual = np.mean(residuals)\n            y_pred += learning_rate * mean_residual\n            if np.allclose(residuals, 0):\n                break\n            continue\n        (mean_res_left, mean_res_right) = best_values\n        y_pred[x <= best_split] += learning_rate * mean_res_left\n        y_pred[x > best_split] += learning_rate * mean_res_right\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 471, "completion_id": 0, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is None:\n        target = reward\n    else:\n        max_q = max(q_table[next_state])\n        num_greedy = sum((1 for a in range(num_actions) if q_table[next_state][a] == max_q))\n        non_greedy_prob = epsilon / num_actions\n        greedy_prob = 1 - epsilon + epsilon / num_actions if num_greedy == 1 else epsilon / num_actions + (1 - epsilon) / num_greedy\n        expected_q = sum((q_val * (greedy_prob if q_val == max_q and num_greedy == 1 else non_greedy_prob) for q_val in q_table[next_state]))\n        target = reward + gamma * expected_q\n    td_error = target - q_table[state][action]\n    q_table[state][action] += lr * td_error\n    for s in range(len(q_table)):\n        for a in range(len(q_table[s])):\n            q_table[s][a] = round(q_table[s][a], 4)\n    return q_table"}
{"task_id": 471, "completion_id": 1, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is None:\n        target = reward\n    else:\n        max_q = max(q_table[next_state])\n        num_greedy_actions = sum((1 for a in range(num_actions) if q_table[next_state][a] == max_q))\n        greedy_prob = 1 - epsilon + epsilon / num_actions\n        non_greedy_prob = epsilon / num_actions\n        expected_value = 0.0\n        for a in range(num_actions):\n            if q_table[next_state][a] == max_q:\n                if num_greedy_actions > 1:\n                    action_prob = 1 - epsilon + epsilon / num_actions\n                else:\n                    action_prob = 1 - epsilon + epsilon / num_actions\n            else:\n                action_prob = epsilon / num_actions\n            expected_value += action_prob * q_table[next_state][a]\n        target = reward + gamma * expected_value\n    q_table[state][action] += lr * (target - q_table[state][action])\n    return [[round(q, 4) for q in row] for row in q_table]"}
{"task_id": 471, "completion_id": 2, "solution": "import numpy as np\nfrom typing import list, float, Optional\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: Optional[int], epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is None:\n        target = reward\n    else:\n        max_q = max(q_table[next_state])\n        num_greedy_actions = sum((1 for a in range(num_actions) if q_table[next_state][a] == max_q))\n        greedy_action = next((a for a in range(num_actions) if q_table[next_state][a] == max_q))\n        expected_value = 0.0\n        for a in range(num_actions):\n            if a == greedy_action:\n                prob = 1 - epsilon + epsilon / num_actions\n            else:\n                prob = epsilon / num_actions\n            expected_value += prob * q_table[next_state][a]\n        target = reward + gamma * expected_value\n    q_table[state][action] += lr * (target - q_table[state][action])\n    for s in range(len(q_table)):\n        for a in range(len(q_table[s])):\n            q_table[s][a] = round(q_table[s][a], 4)\n    return q_table\nq_table = [[0.1, 0.2], [-0.1, 2.0], [1.4, 1.4]]"}
{"task_id": 471, "completion_id": 3, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is None:\n        target = reward\n    else:\n        state_q_values = q_table[next_state]\n        max_q_value = max(state_q_values)\n        num_max_actions = sum((1 for q in state_q_values if np.isclose(q, max_q_value)))\n        greedy_prob = 1 - epsilon + epsilon / num_actions\n        non_greedy_prob = epsilon / num_actions\n        expected_value = greedy_prob * max_q_value + non_greedy_prob * sum((q for q in state_q_values if not np.isclose(q, max_q_value)))\n        target = reward + gamma * expected_value\n    td_error = target - q_table[state][action]\n    q_table[state][action] += lr * td_error\n    for i in range(len(q_table)):\n        for j in range(len(q_table[i])):\n            q_table[i][j] = round(q_table[i][j], 4)\n    return q_table"}
{"task_id": 471, "completion_id": 4, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is None:\n        target = reward\n    else:\n        max_q = max(q_table[next_state])\n        greedy_actions = [a for a in range(num_actions) if q_table[next_state][a] == max_q]\n        expected_value = (1 - epsilon + epsilon / num_actions) * max_q + epsilon / num_actions * sum((q_table[next_state][a] for a in range(num_actions) if a not in greedy_actions))\n        target = reward + gamma * expected_value\n    td_error = target - q_table[state][action]\n    q_table[state][action] += lr * td_error\n    updated_q_table = [[round(q, 4) for q in row] for row in q_table]\n    return updated_q_table"}
{"task_id": 471, "completion_id": 5, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    q_table_array = np.array(q_table)\n    if next_state is None:\n        target = reward\n    else:\n        max_q_actions = np.where(q_table_array[next_state] == np.max(q_table_array[next_state]))[0]\n        num_max_actions = len(max_q_actions)\n        prob_greedy = 1 - epsilon + epsilon / num_actions\n        prob_other = epsilon / num_actions\n        expected_q = 0.0\n        for a in range(num_actions):\n            if a == max_q_actions[0]:\n                expected_q += prob_greedy * q_table_array[next_state][a]\n            else:\n                expected_q += prob_other * q_table_array[next_state][a]\n        target = reward + gamma * expected_q\n    q_table_array[state][action] += lr * (target - q_table_array[state][action])\n    updated_q_table = [[round(val, 4) for val in row] for row in q_table_array.tolist()]\n    return updated_q_table"}
{"task_id": 471, "completion_id": 6, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    n_actions = len(q_table[0])\n    if next_state is not None:\n        next_q_values = q_table[next_state]\n        max_q = max(next_q_values)\n        num_greedy_actions = sum((1 for q in next_q_values if abs(q - max_q) < 1e-09))\n        if num_greedy_actions > 1:\n            greedy_prob = (1 - epsilon + epsilon / n_actions) * (1 / num_greedy_actions)\n            non_greedy_prob = epsilon / n_actions\n        else:\n            greedy_prob = 1 - epsilon + epsilon / n_actions\n            non_greedy_prob = epsilon / n_actions\n        expected_value = 0.0\n        for a in range(n_actions):\n            if abs(next_q_values[a] - max_q) < 1e-09:\n                expected_value += greedy_prob * next_q_values[a]\n            else:\n                expected_value += non_greedy_prob * next_q_values[a]\n    else:\n        expected_value = 0.0\n    target = reward + gamma * expected_value\n    q_table[state][action] += lr * (target - q_table[state][action])\n    for s in range(len(q_table)):\n        for a in range(len(q_table[s])):\n            q_table[s][a] = round(q_table[s][a], 4)\n    return q_table"}
{"task_id": 471, "completion_id": 7, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    q_current = q_table[state][action]\n    if next_state is None:\n        target = reward\n    else:\n        q_next = q_table[next_state]\n        max_q = max(q_next)\n        num_max_actions = sum((1 for a in q_next if a == max_q))\n        greedy_prob = (1 - epsilon + epsilon / num_actions) / num_max_actions\n        non_greedy_prob = epsilon / num_actions\n        expectation = 0\n        for a in range(num_actions):\n            if q_next[a] == max_q:\n                expectation += greedy_prob * q_next[a]\n            else:\n                expectation += non_greedy_prob * q_next[a]\n        target = reward + gamma * expectation\n    q_table[state][action] += lr * (target - q_current)\n    for s in range(len(q_table)):\n        q_table[s] = [round(q, 4) for q in q_table[s]]\n    return q_table"}
{"task_id": 471, "completion_id": 8, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    expected_value = 0.0\n    if next_state is not None:\n        next_q_values = q_table[next_state]\n        greedy_actions = [i for i in range(num_actions) if next_q_values[i] == max(next_q_values)]\n        greedy_actions.sort()\n        greedy_action = greedy_actions[0]\n        greedy_prob = 1 - epsilon + epsilon / num_actions\n        non_greedy_prob = epsilon / num_actions\n        expected_value = greedy_prob * next_q_values[greedy_action] + non_greedy_prob * sum(next_q_values)\n    target = reward + gamma * expected_value\n    q_table[state][action] += lr * (target - q_table[state][action])\n    rounded_q_table = [[round(q, 4) for q in row] for row in q_table]\n    return rounded_q_table"}
{"task_id": 471, "completion_id": 9, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is None:\n        target = reward\n    else:\n        max_q = max(q_table[next_state])\n        greedy_actions = [a for a in range(num_actions) if q_table[next_state][a] == max_q]\n        prob_greedy = 1 - epsilon + epsilon / num_actions\n        prob_other = epsilon / num_actions\n        expected_value = prob_greedy * max_q + prob_other * sum((q_table[next_state][a] for a in range(num_actions) if a not in greedy_actions))\n        target = reward + gamma * expected_value\n    q_table[state][action] += lr * (target - q_table[state][action])\n    updated_q_table = [[round(q, 4) for q in row] for row in q_table]\n    return updated_q_table"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    X_val = []\n    Y_train = []\n    Y_val = []\n    for i in range(m):\n        x_low = (np.floor(i / 2) + 0.1) * 10\n        x_high = (np.floor(i / 2) + 0.9) * 10\n        y_offset = i % 2 * interval\n        y_low = (y_offset + 0.1) * 10\n        y_high = (y_offset + 0.9) * 10\n        label = (i - 0.5) * 2\n        x_train = np.random.uniform(x_low, x_high, (n_train, 1))\n        y_train = np.random.uniform(y_low, y_high, (n_train, 1))\n        X_train.extend(np.hstack((x_train, y_train)))\n        Y_train.extend([label] * n_train)\n        x_val = np.random.uniform(x_low, x_high, (n_val, 1))\n        y_val = np.random.uniform(y_low, y_high, (n_val, 1))\n        X_val.extend(np.hstack((x_val, y_val)))\n        Y_val.extend([label] * n_val)\n    X_train = np.array(X_train)\n    X_val = np.array(X_val)\n    Y_train = np.array(Y_train)\n    Y_val = np.array(Y_val)\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 474, "completion_id": 1, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    def generate_class(i: int, n: int):\n        floor_i_over_2 = i // 2\n        mod_i_2 = i % 2\n        x_low = (floor_i_over_2 + 0.1) * 10\n        x_high = (floor_i_over_2 + 0.9) * 10\n        y_low = (mod_i_2 * interval + 0.1) * 10\n        y_high = (mod_i_2 * interval + 0.9) * 10\n        x = np.random.uniform(x_low, x_high, n)\n        y = np.random.uniform(y_low, y_high, n)\n        points = np.column_stack((x, y))\n        label = (i - 0.5) * 2\n        return (points, np.full(n, label))\n    X_train = []\n    Y_train = []\n    for i in range(m):\n        (x, y) = generate_class(i, n_train)\n        X_train.append(x)\n        Y_train.append(y)\n    X_train = np.vstack(X_train)\n    Y_train = np.concatenate(Y_train)\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        (x, y) = generate_class(i, n_val)\n        X_val.append(x)\n        Y_val.append(y)\n    X_val = np.vstack(X_val)\n    Y_val = np.concatenate(Y_val)\n    return (np.round(X_train, 4), np.round(X_val, 4), np.round(Y_train, 4), np.round(Y_val, 4))"}
{"task_id": 474, "completion_id": 2, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for class_idx in range(m):\n        i = class_idx\n        floor_i_over_2 = i // 2\n        remainder_i_2 = i % 2\n        x_low = (floor_i_over_2 + 0.1) * 10\n        x_high = (floor_i_over_2 + 0.9) * 10\n        y_low = (remainder_i_2 * interval + 0.1) * 10\n        y_high = (remainder_i_2 * interval + 0.9) * 10\n        for _ in range(n_train):\n            x = random.uniform(x_low, x_high)\n            y = random.uniform(y_low, y_high)\n            label = (i - 0.5) * 2\n            X_train.append([round(x, 4), round(y, 4)])\n            Y_train.append(label)\n        for _ in range(n_val):\n            x = random.uniform(x_low, x_high)\n            y = random.uniform(y_low, y_high)\n            label = (i - 0.5) * 2\n            X_val.append([round(x, 4), round(y, 4)])\n            Y_val.append(label)\n    return (np.array(X_train), np.array(X_val), np.array(Y_train), np.array(Y_val))"}
{"task_id": 474, "completion_id": 3, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        floor_i_div_2 = i // 2\n        i_mod_2 = i % 2\n        x_min = (floor_i_div_2 + 0.1) * 10\n        x_max = (floor_i_div_2 + 0.9) * 10\n        y_min = (i_mod_2 * interval + 0.1) * 10\n        y_max = (i_mod_2 * interval + 0.9) * 10\n        for _ in range(n_train):\n            x = round(random.uniform(x_min, x_max), 4)\n            y = round(random.uniform(y_min, y_max), 4)\n            X_train.append([x, y])\n            Y_train.append((i - 0.5) * 2)\n        for _ in range(n_val):\n            x = round(random.uniform(x_min, x_max), 4)\n            y = round(random.uniform(y_min, y_max), 4)\n            X_val.append([x, y])\n            Y_val.append((i - 0.5) * 2)\n    X_train = np.array(X_train)\n    Y_train = np.array(Y_train)\n    X_val = np.array(X_val)\n    Y_val = np.array(Y_val)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 474, "completion_id": 4, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    (X_train, Y_train) = ([], [])\n    (X_val, Y_val) = ([], [])\n    for class_idx in range(m):\n        level = class_idx // 2\n        row_idx = class_idx % 2\n        x_min = (level + 0.1) * 10\n        x_max = (level + 0.9) * 10\n        y_min = (row_idx * interval + 0.1) * 10\n        y_max = (row_idx * interval + 0.9) * 10\n        label = (class_idx - 0.5) * 2\n        train_x = np.random.uniform(x_min, x_max, n_train)\n        train_y = np.random.uniform(y_min, y_max, n_train)\n        X_train.append(np.column_stack((train_x, train_y)))\n        Y_train.append(np.full(n_train, label))\n        val_x = np.random.uniform(x_min, x_max, n_val)\n        val_y = np.random.uniform(y_min, y_max, n_val)\n        X_val.append(np.column_stack((val_x, val_y)))\n        Y_val.append(np.full(n_val, label))\n    X_train = np.vstack(X_train).round(4)\n    Y_train = np.concatenate(Y_train).round(4)\n    X_val = np.vstack(X_val).round(4)\n    Y_val = np.concatenate(Y_val).round(4)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 474, "completion_id": 5, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    X_val = []\n    Y_train = []\n    Y_val = []\n    for i in range(m):\n        label = -1 if i % 2 == 0 else 1\n        x_min = (int(i / 2) + 0.1) * 10\n        x_max = (int(i / 2) + 0.9) * 10\n        y_min = (i % 2 * interval + 0.1) * 10\n        y_max = (i % 2 * interval + 0.9) * 10\n        x_train = np.random.uniform(x_min, x_max, size=(n_train,))\n        y_train = np.random.uniform(y_min, y_max, size=(n_train,))\n        X_train.extend(np.column_stack((x_train, y_train)).round(4))\n        Y_train.extend([label] * n_train)\n        x_val = np.random.uniform(x_min, x_max, size=(n_val,))\n        y_val = np.random.uniform(y_min, y_max, size=(n_val,))\n        X_val.extend(np.column_stack((x_val, y_val)).round(4))\n        Y_val.extend([label] * n_val)\n    return (np.array(X_train), np.array(X_val), np.array(Y_train), np.array(Y_val))"}
{"task_id": 474, "completion_id": 6, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for class_idx in range(m):\n        label = (class_idx - 0.5) * 2\n        x1_train = np.random.uniform((np.floor(class_idx / 2) + 0.1) * 10, (np.floor(class_idx / 2) + 0.9) * 10, n_train)\n        y1_train = np.random.uniform((class_idx % 2 * interval + 0.1) * 10, (class_idx % 2 * interval + 0.9) * 10, n_train)\n        X_train.extend(np.column_stack((x1_train, y1_train)))\n        Y_train.extend([label] * n_train)\n        x1_val = np.random.uniform((np.floor(class_idx / 2) + 0.1) * 10, (np.floor(class_idx / 2) + 0.9) * 10, n_val)\n        y1_val = np.random.uniform((class_idx % 2 * interval + 0.1) * 10, (class_idx % 2 * interval + 0.9) * 10, n_val)\n        X_val.extend(np.column_stack((x1_val, y1_val)))\n        Y_val.extend([label] * n_val)\n    X_train = np.around(np.array(X_train), decimals=4)\n    Y_train = np.around(np.array(Y_train), decimals=4)\n    X_val = np.around(np.array(X_val), decimals=4)\n    Y_val = np.around(np.array(Y_val), decimals=4)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 474, "completion_id": 7, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train_list = []\n    Y_train_list = []\n    X_val_list = []\n    Y_val_list = []\n    for i in range(m):\n        label = (i - 0.5) * 2\n        floor_i_over_2 = i // 2\n        x_min = (floor_i_over_2 + 0.1) * 10\n        x_max = (floor_i_over_2 + 0.9) * 10\n        mod_i_2 = i % 2\n        y_min = (mod_i_2 * interval + 0.1) * 10\n        y_max = (mod_i_2 * interval + 0.9) * 10\n        x_train = np.random.uniform(x_min, x_max, (n_train, 1))\n        y_train = np.random.uniform(y_min, y_max, (n_train, 1))\n        X_train_list.append(np.hstack((x_train, y_train)))\n        Y_train_list.append(np.full((n_train, 1), label))\n        x_val = np.random.uniform(x_min, x_max, (n_val, 1))\n        y_val = np.random.uniform(y_min, y_max, (n_val, 1))\n        X_val_list.append(np.hstack((x_val, y_val)))\n        Y_val_list.append(np.full((n_val, 1), label))\n    X_train = np.vstack(X_train_list)\n    X_val = np.vstack(X_val_list)\n    Y_train = np.vstack(Y_train_list).flatten()\n    Y_val = np.vstack(Y_val_list).flatten()\n    X_train = np.around(X_train, decimals=4)\n    X_val = np.around(X_val, decimals=4)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 474, "completion_id": 8, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    data_train = []\n    labels_train = []\n    data_val = []\n    labels_val = []\n    for i in range(m):\n        row = i % 2\n        y_low = (row * interval + 0.1) * 10\n        y_high = (row * interval + 0.9) * 10\n        x_low = (i // 2 + 0.1) * 10\n        x_high = (i // 2 + 0.9) * 10\n        for _ in range(n_train):\n            x = random.uniform(x_low, x_high)\n            y = random.uniform(y_low, y_high)\n            label = (i - 0.5) * 2\n            data_train.append([round(x, 4), round(y, 4)])\n            labels_train.append(label)\n        for _ in range(n_val):\n            x = random.uniform(x_low, x_high)\n            y = random.uniform(y_low, y_high)\n            label = (i - 0.5) * 2\n            data_val.append([round(x, 4), round(y, 4)])\n            labels_val.append(label)\n    X_train = np.array(data_train)\n    Y_train = np.array(labels_train)\n    X_val = np.array(data_val)\n    Y_val = np.array(labels_val)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 474, "completion_id": 9, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    X_val = []\n    Y_train = []\n    Y_val = []\n    for i in range(m):\n        label = (i - 0.5) * 2\n        x_start = (np.floor(i / 2) + 0.1) * 10\n        x_end = (np.floor(i / 2) + 0.9) * 10\n        y_row = i % 2 * interval\n        y_start = (y_row + 0.1) * 10\n        y_end = (y_row + 0.9) * 10\n        for _ in range(n_train):\n            x = random.uniform(x_start, x_end)\n            y = random.uniform(y_start, y_end)\n            X_train.append([round(x, 4), round(y, 4)])\n            Y_train.append(label)\n        for _ in range(n_val):\n            x = random.uniform(x_start, x_end)\n            y = random.uniform(y_start, y_end)\n            X_val.append([round(x, 4), round(y, 4)])\n            Y_val.append(label)\n    return (np.array(X_train), np.array(X_val), np.array(Y_train), np.array(Y_val))"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 1, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad) if isinstance(grad, np.ndarray) else 0.0\n    if v_prev is None:\n        v_prev = np.zeros_like(grad) if isinstance(grad, np.ndarray) else 0.0\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 2, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 3, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_t / (1 - b1 ** t)\n    v_hat = v_t / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_t, v_t)"}
{"task_id": 475, "completion_id": 4, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 5, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    w = np.asarray(w)\n    grad = np.asarray(grad)\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    else:\n        m_prev = np.asarray(m_prev)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    else:\n        v_prev = np.asarray(v_prev)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    b1_t = b1 ** t\n    b2_t = b2 ** t\n    m_hat = m_new / (1 - b1_t)\n    v_hat = v_new / (1 - b2_t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 6, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1.0 - b1) * grad\n    v_new = b2 * v_prev + (1.0 - b2) * grad ** 2\n    m_hat = m_new / (1.0 - b1 ** t)\n    v_hat = v_new / (1.0 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 7, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 8, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    update = learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    w_new = w - update\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 9, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * np.square(grad)\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    num_arms = len(rewards[0])\n    num_steps = len(rewards)\n    estimated_values = np.full(num_arms, ev_prior, dtype=float)\n    counts = np.zeros(num_arms, dtype=int)\n    for t in range(num_steps):\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.randint(num_arms)\n        else:\n            chosen_arm = np.argmax(estimated_values)\n        reward = rewards[t][chosen_arm]\n        counts[chosen_arm] += 1\n        estimated_values[chosen_arm] += (reward - estimated_values[chosen_arm]) / counts[chosen_arm]\n    return [round(value, 4) for value in estimated_values.tolist()]\nrewards = [[1.0, 0.0, 2.0], [0.5, 1.0, 0.5], [0.0, 2.0, 1.5], [1.0, 1.0, 0.0]]"}
{"task_id": 479, "completion_id": 1, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    rng = np.random.Generator(np.random.PCG64(seed)) if seed is not None else np.random.Generator(np.random.PCG64())\n    N = len(rewards[0])\n    values = np.full(N, ev_prior, dtype=float)\n    counts = np.zeros(N, dtype=int)\n    for t in range(len(rewards)):\n        if rng.random() < epsilon:\n            a = rng.integers(0, N)\n        else:\n            a = np.argmin(np.where(values == values.max(), np.arange(N), np.inf))\n        r = rewards[t][a]\n        counts[a] += 1\n        values[a] += (r - values[a]) / counts[a]\n    return [round(val, 4) for val in values]\nrewards = [[1.0, 2.0, 0.0], [0.5, 1.5, 0.0], [1.0, 0.5, 2.0], [0.0, 3.0, 0.0], [0.0, 0.0, 5.0], [1.0, 1.0, 1.0], [0.0, 5.0, 0.0], [2.0, 0.0, 1.0], [1.0, 0.0, 2.0], [0.0, 0.0, 1.0]]"}
{"task_id": 479, "completion_id": 2, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    num_arms = len(rewards[0])\n    estimated_values = [ev_prior] * num_arms\n    counts = [0] * num_arms\n    for t in range(len(rewards)):\n        if np.random.random() < epsilon:\n            arm = np.random.choice(num_arms)\n        else:\n            arm = 0\n            for i in range(num_arms):\n                if estimated_values[i] > estimated_values[arm]:\n                    arm = i\n        reward = rewards[t][arm]\n        counts[arm] += 1\n        estimated_values[arm] += (reward - estimated_values[arm]) / counts[arm]\n    return [round(x, 4) for x in estimated_values]"}
{"task_id": 479, "completion_id": 3, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(seed)\n    num_arms = len(rewards[0])\n    num_time_steps = len(rewards)\n    value_estimates = [ev_prior] * num_arms\n    counts = [0] * num_arms\n    for t in range(num_time_steps):\n        reward_row = rewards[t]\n        if np.random.random() < epsilon:\n            arm = np.random.choice(num_arms)\n        else:\n            arm = np.argmax(value_estimates)\n        reward = reward_row[arm]\n        counts[arm] += 1\n        value_estimates[arm] += (reward - value_estimates[arm]) / counts[arm]\n    return [round(v, 4) for v in value_estimates]\nrewards = [[1.0, 0.2, 0.5], [0.8, 0.1, 0.7], [0.9, 0.3, 0.6], [0.8, 0.2, 0.5]]"}
{"task_id": 479, "completion_id": 4, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    n_arms = len(rewards[0])\n    estimates = np.full(n_arms, ev_prior)\n    counters = np.zeros(n_arms)\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            arm = np.random.randint(n_arms)\n        else:\n            arm = np.argmax(estimates)\n        reward = rewards[t][arm]\n        counters[arm] += 1\n        estimates[arm] += (reward - estimates[arm]) / counters[arm]\n    return [round(val, 4) for val in estimates.tolist()]"}
{"task_id": 479, "completion_id": 5, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    n_arms = len(rewards[0])\n    n_timesteps = len(rewards)\n    estimates = [ev_prior] * n_arms\n    counts = [0] * n_arms\n    for t in range(n_timesteps):\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.randint(n_arms)\n        else:\n            chosen_arm = np.argmax(estimates)\n        reward = rewards[t][chosen_arm]\n        counts[chosen_arm] += 1\n        estimates[chosen_arm] += (reward - estimates[chosen_arm]) / counts[chosen_arm]\n    return [round(val, 4) for val in estimates]"}
{"task_id": 479, "completion_id": 6, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    num_arms = len(rewards[0])\n    estimated_values = [ev_prior] * num_arms\n    counts = [0] * num_arms\n    for t in range(len(rewards)):\n        current_rewards = rewards[t]\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.choice(num_arms)\n        else:\n            chosen_arm = np.argmax(estimated_values)\n        reward = current_rewards[chosen_arm]\n        counts[chosen_arm] += 1\n        n = counts[chosen_arm]\n        estimated_values[chosen_arm] += (reward - estimated_values[chosen_arm]) / n\n    return [round(value, 4) for value in estimated_values]\nrewards = [[1.0, 0.5, 2.5], [0.8, 1.0, 1.0], [2.0, 0.3, 0.5], [0.9, 0.9, 0.9], [1.2, 1.2, 1.2]]"}
{"task_id": 479, "completion_id": 7, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if not rewards:\n        return []\n    np.random.seed(seed)\n    num_arms = len(rewards[0])\n    estimates = np.full(num_arms, ev_prior, dtype=float)\n    counts = np.zeros(num_arms, dtype=int)\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.randint(num_arms)\n        else:\n            chosen_arm = np.argmin(np.argsort(estimates)[::-1])\n        reward = rewards[t][chosen_arm]\n        counts[chosen_arm] += 1\n        estimates[chosen_arm] += (reward - estimates[chosen_arm]) / counts[chosen_arm]\n    return [round(e, 4) for e in estimates]\nrewards = [[1, 0, 1], [0, 0, 0], [1, 1, 1]]\nestimates = epsilon_greedy_bandit(rewards, epsilon=0.2, ev_prior=0)"}
{"task_id": 479, "completion_id": 8, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"\n    Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(seed)\n    n_arms = len(rewards[0])\n    value_estimates = np.full(n_arms, ev_prior, dtype=float)\n    arm_counts = np.zeros(n_arms, dtype=int)\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            arm_chosen = np.random.choice(n_arms)\n        else:\n            arm_chosen = np.argmax(value_estimates)\n        reward = rewards[t][arm_chosen]\n        arm_counts[arm_chosen] += 1\n        count = arm_counts[arm_chosen]\n        value_estimates[arm_chosen] += (reward - value_estimates[arm_chosen]) / count\n    return [round(v, 4) for v in value_estimates.tolist()]\nrewards = [[1.0, 0.5, 0.1], [0.8, 0.6, 0.2], [0.9, 0.4, 0.3], [0.8, 0.7, 0.1], [1.0, 0.6, 0.3]]"}
{"task_id": 479, "completion_id": 9, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(seed)\n    num_arms = len(rewards[0])\n    value_estimates = np.full(num_arms, ev_prior)\n    pulls = np.zeros(num_arms, dtype=int)\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            selected_arm = np.random.randint(num_arms)\n        else:\n            selected_arm = np.argmax(value_estimates)\n        reward = rewards[t][selected_arm]\n        pulls[selected_arm] += 1\n        value_estimates[selected_arm] += (reward - value_estimates[selected_arm]) / pulls[selected_arm]\n    return [round(v, 4) for v in value_estimates.tolist()]\nrewards = [[1, 0.3], [2, 0.6], [0.5, 3.0]]"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef euclidean_distance(p1: np.ndarray, p2: np.ndarray) -> float:\n    \"\"\"Compute Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((p1 - p2) ** 2))\ndef region_query(data: np.ndarray, point_idx: int, eps: float) -> List[int]:\n    \"\"\"Find all points within distance `eps` of the given point.\"\"\"\n    neighbors = []\n    for j in range(data.shape[0]):\n        if euclidean_distance(data[point_idx], data[j]) < eps:\n            neighbors.append(j)\n    return neighbors\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> List[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase consecutively in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    (n_samples, _) = data.shape\n    labels = [0] * n_samples\n    cluster_id = 0\n    for i in range(n_samples):\n        if labels[i] == 0:\n            neighbors = region_query(data, i, eps)\n            if len(neighbors) < min_samples:\n                labels[i] = -1\n            else:\n                cluster_id += 1\n                labels[i] = cluster_id\n                idx = 0\n                while idx < len(neighbors):\n                    neighbor_idx = neighbors[idx]\n                    if labels[neighbor_idx] == 0:\n                        labels[neighbor_idx] = cluster_id\n                        neighbor_neighbors = region_query(data, neighbor_idx, eps)\n                        if len(neighbor_neighbors) >= min_samples:\n                            neighbors.extend([n for n in neighbor_neighbors if n not in neighbors])\n                    idx += 1\n    return labels\ndata = np.array([[1, 2], [2, 5], [3, 6], [8, 7], [8, 8], [25, 80], [82, 83]])\neps = 3\nmin_samples = 2\nlabels = dbscan(data, eps, min_samples)"}
{"task_id": 481, "completion_id": 1, "solution": "import numpy as np\nfrom typing import List\ndef euclidean_distance(p1: np.ndarray, p2: np.ndarray) -> float:\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((p1 - p2) ** 2))\ndef get_neighbors(data: np.ndarray, point_idx: int, eps: float) -> List[int]:\n    \"\"\"Return all indices of points within ``eps`` distance of a given point.\"\"\"\n    neighbors = []\n    for j in range(data.shape[0]):\n        if euclidean_distance(data[point_idx], data[j]) <= eps:\n            neighbors.append(j)\n    return neighbors\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> List[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase consecutively in discovery order.\n    \"\"\"\n    n_samples = data.shape[0]\n    if n_samples == 0:\n        return []\n    labels = [-1] * n_samples\n    cluster_id = 0\n    for i in range(n_samples):\n        if labels[i] != -1:\n            continue\n        neighbors = get_neighbors(data, i, eps)\n        if len(neighbors) < min_samples:\n            labels[i] = -1\n        else:\n            cluster_id += 1\n            labels[i] = cluster_id\n            idx = 0\n            seed_set = list(set(neighbors))\n            while idx < len(seed_set):\n                point = seed_set[idx]\n                if labels[point] == -1:\n                    labels[point] = cluster_id\n                if labels[point] != 0:\n                    idx += 1\n                    continue\n                labels[point] = cluster_id\n                point_neighbors = get_neighbors(data, point, eps)\n                if len(point_neighbors) >= min_samples:\n                    for n in point_neighbors:\n                        if labels[n] == 0:\n                            labels[n] = cluster_id\n                            seed_set.append(n)\n                idx += 1\n    return labels"}
{"task_id": 481, "completion_id": 2, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    cluster_id = 0\n\n    def euclidean_distance(p1, p2):\n        \"\"\"Calculate Euclidean distance between two points.\"\"\"\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def get_neighbors(point_idx):\n        \"\"\"Get all points within distance `eps` from the given point.\"\"\"\n        neighbors = []\n        for j in range(n_samples):\n            if euclidean_distance(data[point_idx], data[j]) < eps:\n                neighbors.append(j)\n        return neighbors\n    for i in range(n_samples):\n        if labels[i] != -1:\n            continue\n        neighbors = get_neighbors(i)\n        if len(neighbors) < min_samples:\n            labels[i] = -1\n        else:\n            cluster_id += 1\n            labels[i] = cluster_id\n            seed_set = set(neighbors)\n            for j in seed_set:\n                if labels[j] == -1:\n                    labels[j] = cluster_id\n            while seed_set:\n                current_point = seed_set.pop()\n                if labels[current_point] != -1 and labels[current_point] == cluster_id:\n                    continue\n                labels[current_point] = cluster_id\n                current_neighbors = get_neighbors(current_point)\n                if len(current_neighbors) >= min_samples:\n                    for neighbor in current_neighbors:\n                        if labels[neighbor] == -1 or labels[neighbor] == 0:\n                            if neighbor not in seed_set:\n                                seed_set.add(neighbor)\n    return labels"}
{"task_id": 481, "completion_id": 3, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    cluster_id = 0\n\n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def region_query(point_index):\n        p = data[point_index]\n        neighbors = []\n        for i in range(n_samples):\n            if euclidean_distance(p, data[i]) < eps:\n                neighbors.append(i)\n        return neighbors\n    for i in range(n_samples):\n        if labels[i] != -1:\n            continue\n        neighbors = region_query(i)\n        if len(neighbors) < min_samples:\n            labels[i] = -1\n        else:\n            cluster_id += 1\n            labels[i] = cluster_id\n            queue = deque(neighbors)\n            try:\n                queue.remove(i)\n            except ValueError:\n                pass\n            while queue:\n                current_point = queue.popleft()\n                if labels[current_point] == -1:\n                    labels[current_point] = cluster_id\n                if labels[current_point] != -1 and labels[current_point] != 0:\n                    continue\n                labels[current_point] = cluster_id\n                current_neighbors = region_query(current_point)\n                if len(current_neighbors) >= min_samples:\n                    for neighbor in current_neighbors:\n                        if labels[neighbor] == -1 or labels[neighbor] == 0:\n                            labels[neighbor] = cluster_id\n                            queue.append(neighbor)\n    return labels"}
{"task_id": 481, "completion_id": 4, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    n = data.shape[0]\n    labels = [-1] * n\n    cluster_id = 0\n    for i in range(n):\n        if labels[i] != -1:\n            continue\n        distances = np.linalg.norm(data - data[i], axis=1)\n        neighbors = np.where(distances <= eps)[0]\n        if len(neighbors) < min_samples:\n            labels[i] = -1\n        else:\n            cluster_id += 1\n            labels[i] = cluster_id\n            queue = deque(neighbors)\n            while queue:\n                current_point = queue.popleft()\n                if labels[current_point] == -1 or labels[current_point] == cluster_id:\n                    continue\n                labels[current_point] = cluster_id\n                curr_distances = np.linalg.norm(data - data[current_point], axis=1)\n                curr_neighbors = np.where(curr_distances <= eps)[0]\n                if len(curr_neighbors) >= min_samples:\n                    queue.extend(curr_neighbors)\n    return labels"}
{"task_id": 481, "completion_id": 5, "solution": "import numpy as np\nfrom typing import List\nimport numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> List[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n    \n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n        \n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase consecutively in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    cluster_id = 0\n\n    def _euclidean_distance(p1: np.ndarray, p2: np.ndarray) -> float:\n        return np.linalg.norm(p1 - p2)\n\n    def _region_query(point_idx: int) -> List[int]:\n        \"\"\"Return indices of points within eps from point_idx.\"\"\"\n        neighbors = []\n        for j in range(n_samples):\n            if _euclidean_distance(data[point_idx], data[j]) < eps:\n                neighbors.append(j)\n        return neighbors\n\n    def _expand_cluster(point_idx: int, neighbors: List[int]) -> None:\n        \"\"\"Expand the cluster from the given point using its neighbors.\"\"\"\n        for neighbor in neighbors:\n            if labels[neighbor] == -1:\n                labels[neighbor] = cluster_id\n            elif labels[neighbor] == 0:\n                labels[neighbor] = cluster_id\n                more_neighbors = _region_query(neighbor)\n                if len(more_neighbors) >= min_samples:\n                    neighbors.extend(more_neighbors)\n    for i in range(n_samples):\n        if labels[i] != -1 and labels[i] != 0:\n            labels[i] = 0\n            neighbors = _region_query(i)\n            if len(neighbors) >= min_samples:\n                cluster_id += 1\n                labels[i] = cluster_id\n                _expand_cluster(i, neighbors)\n    return labels\ndata = np.array([[1, 2], [2, 5], [5, 8], [8, 8], [9, 8], [3, 4], [3, 3], [5, 5]])\neps = 2.5\nmin_samples = 2"}
{"task_id": 481, "completion_id": 6, "solution": "import numpy as np\nfrom typing import List, Set, Tuple\nimport numpy as np\ndef euclidean_distance(p1: np.ndarray, p2: np.ndarray) -> float:\n    \"\"\"Compute the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((p1 - p2) ** 2))\ndef region_query(data: np.ndarray, point_idx: int, eps: float) -> List[int]:\n    \"\"\"Find all points within distance `eps` from `point_idx`.\"\"\"\n    neighbors = []\n    p = data[point_idx]\n    for (i, neighbor) in enumerate(data):\n        if euclidean_distance(p, neighbor) < eps:\n            neighbors.append(i)\n    return neighbors\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> List[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    cluster_id = 0\n    visited = set()\n    for i in range(n_samples):\n        if i in visited:\n            continue\n        visited.add(i)\n        neighbors = region_query(data, i, eps)\n        if len(neighbors) < min_samples:\n            labels[i] = -1\n            continue\n        labels[i] = cluster_id\n        cluster_id += 1\n        expand_cluster(data, cluster_id - 1, i, eps, min_samples, labels, visited, neighbors)\n    return labels\ndata = np.array([[1, 2], [2, 5], [3, 6], [8, 7], [8, 8], [25, 80], [81, 82]])\nlabels = dbscan(data, eps=3.0, min_samples=2)"}
{"task_id": 481, "completion_id": 7, "solution": "import numpy as np\nfrom typing import List, Set, Tuple\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> List[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.shape[0] == 0:\n        return []\n    num_points = data.shape[0]\n    labels = [-1] * num_points\n    cluster_id = 0\n\n    def euclidean_distance(p1: np.ndarray, p2: np.ndarray) -> float:\n        \"\"\"Compute Euclidean distance between two samples.\"\"\"\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def get_neighbors(point_idx: int) -> List[int]:\n        \"\"\"Get indices of all points within eps distance from the given point.\"\"\"\n        point = data[point_idx]\n        neighbors = []\n        for i in range(num_points):\n            if euclidean_distance(point, data[i]) <= eps:\n                neighbors.append(i)\n        return neighbors\n    for point_idx in range(num_points):\n        if labels[point_idx] != -1:\n            continue\n        labels[point_idx] = -1\n        neighbors = get_neighbors(point_idx)\n        if len(neighbors) < min_samples:\n            continue\n        cluster_id += 1\n        labels[point_idx] = cluster_id\n        seed_set = set(neighbors)\n        seed_set.discard(point_idx)\n        while seed_set:\n            current_point = seed_set.pop()\n            if labels[current_point] == -1:\n                labels[current_point] = cluster_id\n                current_neighbors = get_neighbors(current_point)\n                if len(current_neighbors) >= min_samples:\n                    seed_set.update(current_neighbors)\n    return labels"}
{"task_id": 481, "completion_id": 8, "solution": "import numpy as np\nfrom typing import List\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> List[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    n_samples = len(data)\n    labels = [-1] * n_samples\n    cluster_id = 0\n\n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def get_neighbors(point_idx: int):\n        point = data[point_idx]\n        neighbors = []\n        for j in range(n_samples):\n            if euclidean_distance(point, data[j]) < eps:\n                neighbors.append(j)\n        return neighbors\n    for i in range(n_samples):\n        if labels[i] != -1:\n            continue\n        neighbors = get_neighbors(i)\n        if len(neighbors) < min_samples:\n            labels[i] = -1\n        else:\n            cluster_id += 1\n            labels[i] = cluster_id\n            queue = neighbors.copy()\n            idx = 0\n            while idx < len(queue):\n                current_point = queue[idx]\n                idx += 1\n                if labels[current_point] == -1 or labels[current_point] == 0:\n                    labels[current_point] = cluster_id\n                    current_neighbors = get_neighbors(current_point)\n                    if len(current_neighbors) >= min_samples:\n                        queue.extend(current_neighbors)\n            queue = list(set(queue))\n            for point in queue:\n                labels[point] = cluster_id\n    return labels\ndata = np.array([[1, 2], [2, 3], [8, 9], [9, 8], [10, 10], [1, 100]])\neps = 1.5\nmin_samples = 2"}
{"task_id": 481, "completion_id": 9, "solution": "import numpy as np\nfrom typing import List, Set, Tuple\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    cluster_id = 0\n\n    def euclidean_distance(p1: np.ndarray, p2: np.ndarray) -> float:\n        \"\"\"Compute the Euclidean distance between two points.\"\"\"\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def region_query(point_idx: int) -> List[int]:\n        \"\"\"Find all points within distance eps from point_idx.\"\"\"\n        neighbors = []\n        for j in range(n_samples):\n            if euclidean_distance(data[point_idx], data[j]) < eps:\n                neighbors.append(j)\n        return neighbors\n\n    def expand_cluster(point_idx: int, neighbors: List[int]) -> bool:\n        \"\"\"Check if point_idx is a core point and expand the cluster.\"\"\"\n        if len(neighbors) < min_samples:\n            return False\n        nonlocal cluster_id\n        labels[point_idx] = cluster_id\n        for neighbor_idx in neighbors:\n            if labels[neighbor_idx] == -1:\n                labels[neighbor_idx] = cluster_id\n            if labels[neighbor_idx] == -1 or labels[neighbor_idx] == 0:\n                labels[neighbor_idx] = cluster_id\n                neighbor_neighbors = region_query(neighbor_idx)\n                if len(neighbor_neighbors) >= min_samples:\n                    for nn in neighbor_neighbors:\n                        if labels[nn] == -1 or labels[nn] == 0:\n                            labels[nn] = cluster_id\n        cluster_id += 1\n        return True\n    for i in range(n_samples):\n        if labels[i] == -1:\n            neighbors = region_query(i)\n            if len(neighbors) >= min_samples:\n                expand_cluster(i, neighbors)\n    return labels"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype=int)\n    if y.ndim != 1:\n        raise ValueError(\"Input 'y' must be a 1-D array-like object.\")\n    if np.any(y < 0):\n        raise ValueError('Labels must be non-negative integers.')\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    else:\n        if not isinstance(num_classes, int) or num_classes <= 0:\n            raise ValueError('num_classes must be a positive integer.')\n        if np.max(y) >= num_classes:\n            raise ValueError(f'Found label value {np.max(y)} which is greater than or equal to num_classes ({num_classes}).')\n    n_samples = len(y)\n    one_hot = np.zeros((n_samples, num_classes), dtype=int)\n    one_hot[np.arange(n_samples), y] = 1\n    return one_hot"}
{"task_id": 482, "completion_id": 1, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if np.any(y < 0):\n        raise ValueError('All labels must be non-negative integers.')\n    n_samples = y.shape[0]\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    else:\n        if not isinstance(num_classes, int) or num_classes <= 0:\n            raise ValueError('num_classes must be a positive integer or None.')\n        if np.any(y >= num_classes):\n            raise ValueError('Labels must be smaller than num_classes.')\n    one_hot = np.zeros((n_samples, num_classes), dtype=int)\n    one_hot[np.arange(n_samples), y] = 1\n    return one_hot"}
{"task_id": 482, "completion_id": 2, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y, dtype=np.int64)\n    if y.ndim != 1:\n        raise ValueError('Input labels must be 1-dimensional.')\n    if np.any(y < 0):\n        raise ValueError('Labels must be non-negative integers.')\n    n_samples = y.shape[0]\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if num_classes <= 0:\n        raise ValueError('num_classes must be a positive integer.')\n    if np.any(y >= num_classes):\n        raise ValueError('Labels must be smaller than num_classes.')\n    categorical = np.zeros((n_samples, num_classes), dtype=int)\n    categorical[np.arange(n_samples), y] = 1\n    return categorical"}
{"task_id": 482, "completion_id": 3, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype=int)\n    if np.any(y < 0):\n        raise ValueError('Labels must be non-negative integers.')\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.any(y >= num_classes):\n        raise ValueError(f'Labels must be less than num_classes={num_classes}.')\n    categorical = np.zeros((y.size, num_classes), dtype=int)\n    categorical[np.arange(y.size), y] = 1\n    return categorical"}
{"task_id": 482, "completion_id": 4, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n\n    Raises:\n        ValueError: If any label is negative or greater than or equal to num_classes.\n    \"\"\"\n    y = np.asarray(y)\n    if y.ndim != 1:\n        raise ValueError('Input y must be a 1-D array.')\n    if np.min(y) < 0:\n        raise ValueError('All labels must be non-negative.')\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.max(y) >= num_classes:\n        raise ValueError('All label values must be less than num_classes.')\n    result = np.zeros((y.size, num_classes), dtype=int)\n    result[np.arange(y.size), y] = 1\n    return result"}
{"task_id": 482, "completion_id": 5, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if np.any(y < 0):\n        raise ValueError('Labels must be non-negative integers.')\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    else:\n        if not isinstance(num_classes, int) or num_classes <= 0:\n            raise ValueError('num_classes must be a positive integer or None.')\n        if np.any(y >= num_classes):\n            raise ValueError('Found labels or num_classes out of bounds.')\n    result = np.zeros((y.size, num_classes), dtype=int)\n    result[np.arange(y.size), y] = 1\n    return result"}
{"task_id": 482, "completion_id": 6, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype=int)\n    if np.any(y < 0):\n        raise ValueError('Labels must be non-negative integers.')\n    n_samples = len(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    else:\n        if num_classes < 0:\n            raise ValueError('num_classes must be a positive integer.')\n        if np.any(y >= num_classes):\n            raise ValueError(f'Found label(s) >= num_classes: {num_classes}.')\n    categorical = np.zeros((n_samples, num_classes), dtype=int)\n    categorical[np.arange(n_samples), y] = 1\n    return categorical"}
{"task_id": 482, "completion_id": 7, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if y.ndim != 1:\n        raise ValueError('`y` must be a 1-dimensional array.')\n    if np.any(y < 0):\n        raise ValueError('Labels must be non-negative integers.')\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    else:\n        if not isinstance(num_classes, int) or num_classes <= 0:\n            raise ValueError('`num_classes` must be a positive integer.')\n        if np.any(y >= num_classes):\n            raise ValueError('Found label greater than or equal to `num_classes`.')\n    n_samples = y.shape[0]\n    categorical = np.zeros((n_samples, num_classes), dtype=int)\n    categorical[np.arange(n_samples), y] = 1\n    return categorical"}
{"task_id": 482, "completion_id": 8, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype=int)\n    if np.any(y < 0):\n        raise ValueError('Labels must be non-negative integers.')\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if num_classes <= 0:\n        raise ValueError('num_classes must be a positive integer.')\n    if np.any(y >= num_classes):\n        raise ValueError(f'Found label >= num_classes: max label is {np.max(y)}, num_classes is {num_classes}')\n    result = np.zeros((len(y), num_classes), dtype=int)\n    result[np.arange(len(y)), y] = 1\n    return result"}
{"task_id": 482, "completion_id": 9, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y, dtype=int)\n    if np.any(y < 0):\n        raise ValueError('Labels must be non-negative integers.')\n    if num_classes is not None:\n        if num_classes <= 0:\n            raise ValueError('num_classes must be a positive integer.')\n        if np.any(y >= num_classes):\n            raise ValueError('Label values must be less than num_classes.')\n    else:\n        num_classes = np.max(y) + 1 if y.size > 0 else 1\n    result = np.zeros((y.size, num_classes), dtype=int)\n    result[np.arange(y.size), y] = 1\n    return result"}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    class Node:\n\n        def __init__(self):\n            self.split_value = None\n            self.left = None\n            self.right = None\n            self.leaf_value = None\n\n    def sse(y):\n        if not y:\n            return np.inf\n        mean = np.mean(y)\n        return sum(((val - mean) ** 2 for val in y))\n\n    def build_tree(X, y, depth):\n        node = Node()\n        if depth == max_depth or len(X) < 2:\n            node.leaf_value = np.mean(y)\n            return node\n        best_sse = np.inf\n        best_idx = -1\n        indices = np.argsort(X)\n        X_sorted = [X[i] for i in indices]\n        y_sorted = [y[i] for i in indices]\n        for i in range(1, len(X_sorted)):\n            mid = (X_sorted[i - 1] + X_sorted[i]) / 2\n            left_y = y_sorted[:i]\n            right_y = y_sorted[i:]\n            current_sse = sse(left_y) + sse(right_y)\n            if current_sse < best_sse:\n                best_sse = current_sse\n                best_split = mid\n        if best_split is None:\n            node.leaf_value = np.mean(y)\n            return node\n        node.split_value = best_split\n        left_indices = [i for i in range(len(X)) if X[i] <= best_split]\n        right_indices = [i for i in range(len(X)) if X[i] > best_split]\n        (X_left, y_left) = ([X[i] for i in left_indices], [y[i] for i in left_indices])\n        (X_right, y_right) = ([X[i] for i in right_indices], [y[i] for i in right_indices])\n        node.left = build_tree(X_left, y_left, depth + 1)\n        node.right = build_tree(X_right, y_right, depth + 1)\n        return node\n\n    def predict(x, node):\n        if node.leaf_value is not None:\n            return node.leaf_value\n        if x <= node.split_value:\n            return predict(x, node.left)\n        else:\n            return predict(x, node.right)\n    if not X_train or not y_train:\n        return [0.0] * len(X_test)\n    root = build_tree(X_train, y_train, 0)\n    return [predict(x, root) for x in X_test]"}
{"task_id": 485, "completion_id": 1, "solution": "import numpy as np\nfrom typing import List\ndef regression_tree_predict(X_train: List[float | int], y_train: List[float | int], X_test: List[float | int], max_depth: int=3) -> List[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    if len(X_train) == 0 or len(y_train) == 0:\n        return []\n\n    def build_tree(X: np.ndarray, y: np.ndarray, depth: int=0):\n        if depth >= max_depth or len(X) < 2:\n            return {'leaf': True, 'value': y.mean()}\n        sorted_idx = np.argsort(X)\n        X_sorted = X[sorted_idx]\n        y_sorted = y[sorted_idx]\n        sse_best = float('inf')\n        best_split = None\n        best_left = None\n        best_right = None\n        for i in range(1, len(X_sorted)):\n            split_val = (X_sorted[i - 1] + X_sorted[i]) / 2\n            left_mask = X_sorted <= split_val\n            right_mask = X_sorted > split_val\n            y_left = y_sorted[left_mask]\n            y_right = y_sorted[right_mask]\n            if len(y_left) == 0 or len(y_right) == 0:\n                continue\n            sse = np.sum((y_left - y_left.mean()) ** 2) + np.sum((y_right - y_right.mean()) ** 2)\n            if sse < sse_best:\n                sse_best = sse\n                best_split = split_val\n                left_indices = sorted_idx[left_mask]\n                right_indices = sorted_idx[right_mask]\n                best_left = left_indices\n                best_right = right_indices\n        if best_split is None:\n            return {'leaf': True, 'value': y.mean()}\n        (left_X, left_y) = (X[best_left], y[best_left])\n        (right_X, right_y) = (X[best_right], y[best_right])\n        left_subtree = build_tree(left_X, left_y, depth + 1)\n        right_subtree = build_tree(right_X, right_y, depth + 1)\n        return {'leaf': False, 'split_val': best_split, 'left': left_subtree, 'right': right_subtree}\n    tree = build_tree(X_train, y_train)\n\n    def predict(x: float, node: dict):\n        if node['leaf']:\n            return node['value']\n        elif x <= node['split_val']:\n            return predict(x, node['left'])\n        else:\n            return predict(x, node['right'])\n    predictions = [predict(x, tree) for x in X_test]\n    return predictions\nX_train = [1, 2, 3, 4, 5]\ny_train = [2, 4, 3, 4, 5]\nX_test = [2.5, 3.5]"}
{"task_id": 485, "completion_id": 2, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def build_tree(X, y, depth):\n        if len(X) < 2 or depth == 0:\n            return Node(mean(y))\n        (best_idx, best_error) = (None, float('inf'))\n        for idx in sorted(set(X)):\n            left_indices = [i for (i, x) in enumerate(X) if x <= idx]\n            right_indices = [i for (i, x) in enumerate(X) if x > idx]\n            if len(left_indices) < 1 or len(right_indices) < 1:\n                continue\n            left_error = sse(y, left_indices)\n            right_error = sse(y, right_indices)\n            total_error = left_error + right_error\n            if total_error < best_error:\n                best_error = total_error\n                best_idx = idx\n        left_indices = [i for (i, x) in enumerate(X) if x <= best_idx]\n        right_indices = [i for (i, x) in enumerate(X) if x > best_idx]\n        left_child = build_tree([X[i] for i in left_indices], [y[i] for i in left_indices], depth - 1)\n        right_child = build_tree([X[i] for i in right_indices], [y[i] for i in right_indices], depth - 1)\n        return Node(best_idx, left_child, right_child)\n\n    def sse(y, indices):\n        \"\"\"Compute the sum of squared errors for y values at the given indices.\"\"\"\n        mean_val = mean([y[i] for i in indices])\n        return sum(((y[i] - mean_val) ** 2 for i in indices))\n\n    def mean(values):\n        \"\"\"Compute the mean of a list of values.\"\"\"\n        if not values:\n            raise ValueError('Cannot compute mean of empty list.')\n        return sum(values) / len(values)\n\n    class Node:\n\n        def __init__(self, threshold=None, left=None, right=None, value=None):\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.value = value\n\n        def predict(self, x):\n            if self.value is not None:\n                return self.value\n            if x <= self.threshold:\n                return self.left.predict(x)\n            else:\n                return self.right.predict(x)\n    if not X_train:\n        return [0.0] * len(X_test)\n    root = build_tree(X_train, y_train, max_depth)\n    return [root.predict(x) for x in X_test]"}
{"task_id": 485, "completion_id": 3, "solution": "import numpy as np\nfrom typing import List\ndef regression_tree_predict(X_train: List[float | int], y_train: List[float | int], X_test: List[float | int], max_depth: int=3) -> List[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def build_tree(X, y, depth):\n        if not X or len(X) < 2:\n            return {'type': 'leaf', 'value': np.mean(y) if y else 0}\n        if depth == 0:\n            return {'type': 'leaf', 'value': np.mean(y)}\n        best_sse = float('inf')\n        best_threshold = None\n        (X, y) = (np.array(X), np.array(y))\n        idx = np.argsort(X)\n        (X, y) = (X[idx], y[idx])\n        for i in range(1, len(X)):\n            threshold = (X[i - 1] + X[i]) / 2\n            left_mask = X <= threshold\n            right_mask = X > threshold\n            if np.sum(left_mask) < 1 or np.sum(right_mask) < 1:\n                continue\n            (X_l, y_l) = (X[left_mask], y[left_mask])\n            (X_r, y_r) = (X[right_mask], y[right_mask])\n            sse_l = np.sum((y_l - np.mean(y_l)) ** 2)\n            sse_r = np.sum((y_r - np.mean(y_r)) ** 2)\n            sse_total = sse_l + sse_r\n            if sse_total < best_sse:\n                best_sse = sse_total\n                best_threshold = threshold\n                best_split = (X_l.tolist(), y_l.tolist(), X_r.tolist(), y_r.tolist())\n        if best_threshold is None:\n            return {'type': 'leaf', 'value': np.mean(y)}\n        (left_X, left_y, right_X, right_y) = best_split\n        return {'type': 'internal', 'threshold': best_threshold, 'left': build_tree(left_X, left_y, depth - 1), 'right': build_tree(right_X, right_y, depth - 1)}\n\n    def predict_single(x, tree):\n        if tree['type'] == 'leaf':\n            return tree['value']\n        if x <= tree['threshold']:\n            return predict_single(x, tree['left'])\n        else:\n            return predict_single(x, tree['right'])\n    tree = build_tree(X_train, y_train, max_depth)\n    return [predict_single(x, tree) for x in X_test]\nX_train = [1, 2, 3, 4, 5]\ny_train = [2, 4, 1, 7, 9]\nX_test = [2.5, 4.0]"}
{"task_id": 485, "completion_id": 4, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    X = np.array(X_train)\n    y = np.array(y_train)\n    if len(X) == 0 or len(y) == 0:\n        return []\n\n    def build_tree(X, y, depth):\n        if depth == max_depth or len(X) < 2:\n            return {'type': 'leaf', 'mean': np.mean(y)}\n        best_sse = float('inf')\n        best_split = None\n        sorted_idx = np.argsort(X)\n        for i in range(1, len(X)):\n            mid = (X[sorted_idx[i - 1]] + X[sorted_idx[i]]) / 2\n            left_mask = X <= mid\n            right_mask = X > mid\n            if np.sum(left_mask) < 1 or np.sum(right_mask) < 1:\n                continue\n            sse_left = np.sum((y[left_mask] - np.mean(y[left_mask])) ** 2)\n            sse_right = np.sum((y[right_mask] - np.mean(y[right_mask])) ** 2)\n            total_sse = sse_left + sse_right\n            if total_sse < best_sse:\n                best_sse = total_sse\n                best_split = {'value': mid, 'left': build_tree(X[left_mask], y[left_mask], depth + 1), 'right': build_tree(X[right_mask], y[right_mask], depth + 1)}\n        return {'type': 'internal', 'split': best_split['split']}\n    tree = build_tree(X, y, 0)\n\n    def predict(x, node):\n        if node['type'] == 'leaf':\n            return node['mean']\n        split = node['split']\n        if x <= split['value']:\n            return predict(x, split['left'])\n        else:\n            return predict(x, split['right'])\n    return [predict(x, tree) for x in X_test]\nX_train = [1, 2, 3, 4, 5, 6, 7, 8]\ny_train = [1, 3, 2, 5, 7, 8, 8, 9]\nX_test = [2.5, 5.5, 6.5, 7.5]"}
{"task_id": 485, "completion_id": 5, "solution": "def regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def sse(y):\n        if not y:\n            return 0.0\n        mean = sum(y) / len(y)\n        return sum(((yi - mean) ** 2 for yi in y))\n\n    def build_tree(X: list[float | int], y: list[float | int], depth: int):\n        if depth >= max_depth or len(X) < 2:\n            return {'type': 'leaf', 'value': sum(y) / len(y)}\n        best_sse = float('inf')\n        best_split = None\n        unique_x = sorted(set(X))\n        for split_val in unique_x:\n            if split_val in X:\n                left_idx = [i for (i, x) in enumerate(X) if x <= split_val]\n                right_idx = [i for (i, x) in enumerate(X) if x > split_val]\n                if len(left_idx) < 1 or len(right_idx) < 1:\n                    continue\n                left_X = [X[i] for i in left_idx]\n                left_y = [y[i] for i in left_idx]\n                right_X = [X[i] for i in right_idx]\n                right_y = [y[i] for i in right_idx]\n                sse_left = sse(left_y)\n                sse_right = sse(right_y)\n                total_sse = sse_left + sse_right\n                if total_sse < best_sse:\n                    best_sse = total_sse\n                    best_split = {'value': split_val, 'left': {'X': left_X, 'y': left_y}, 'right': {'X': right_X, 'y': right_y}}\n        if best_split is None:\n            return {'type': 'leaf', 'value': sum(y) / len(y)}\n        left_child = build_tree(best_split['left']['X'], best_split['left']['y'], depth + 1)\n        right_child = build_tree(best_split['right']['X'], best_split['right']['y'], depth + 1)\n        return {'type': 'internal', 'split': best_split['value'], 'left': left_child, 'right': right_child}\n\n    def predict_one(x, node):\n        if node['type'] == 'leaf':\n            return node['value']\n        if x <= node['split']:\n            return predict_one(x, node['left'])\n        else:\n            return predict_one(x, node['right'])\n    if not X_train or not y_train:\n        return []\n    tree = build_tree(X_train, y_train, 0)\n    return [predict_one(x, tree) for x in X_test]"}
{"task_id": 485, "completion_id": 6, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def build_tree(X: list, y: list, depth: int):\n        if len(X) < 2 or depth == 0:\n            return {'type': 'leaf', 'prediction': np.mean(y)}\n        best_sse = float('inf')\n        best_split = None\n        best_left = (None, None)\n        best_right = (None, None)\n        unique_X = sorted(set(X))\n        split_points = [(unique_X[i] + unique_X[i + 1]) / 2 for i in range(len(unique_X) - 1)]\n        for split in split_points:\n            left_X = [x for (i, x) in enumerate(X) if x <= split]\n            left_y = [y[i] for (i, x) in enumerate(X) if x <= split]\n            right_X = [x for (i, x) in enumerate(X) if x > split]\n            right_y = [y[i] for (i, x) in enumerate(X) if x > split]\n            if len(left_y) < 1 or len(right_y) < 1:\n                continue\n            left_mean = np.mean(left_y)\n            right_mean = np.mean(right_y)\n            sse = sum(((y - left_mean) ** 2 for (i, y) in enumerate(y) if X[i] <= split)) + sum(((y - right_mean) ** 2 for (i, y) in enumerate(y) if X[i] > split))\n            if sse < best_sse:\n                best_sse = sse\n                best_split = split\n                best_left = (left_X, left_y)\n                best_right = (right_X, right_y)\n        if best_split is None:\n            return {'type': 'leaf', 'prediction': np.mean(y)}\n        left_tree = build_tree(*best_left, depth - 1)\n        right_tree = build_tree(*best_right, depth - 1)\n        return {'type': 'internal', 'split': best_split, 'left': left_tree, 'right': right_tree}\n\n    def predict_tree(tree, x):\n        if tree['type'] == 'leaf':\n            return tree['prediction']\n        if x <= tree['split']:\n            return predict_tree(tree['left'], x)\n        else:\n            return predict_tree(tree['right'], x)\n    if len(X_train) == 0 or len(y_train) == 0:\n        return [0.0] * len(X_test) if X_test else []\n    tree = build_tree(X_train, y_train, max_depth)\n    return [predict_tree(tree, x) for x in X_test]\nX_train = [1, 2, 3, 4, 5]\ny_train = [2, 4, 5, 4, 5]\nX_test = [2.5, 3.5]"}
{"task_id": 485, "completion_id": 7, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if not X_train or not y_train:\n        return []\n\n    def build_tree(X, y, depth):\n        X = np.array(X)\n        y = np.array(y)\n        if len(X) < 2 or depth >= max_depth:\n            return {'type': 'leaf', 'mean': np.mean(y)}\n        unique_X = np.unique(X)\n        best_sse = np.inf\n        best_threshold = None\n        best_left = None\n        best_right = None\n        for threshold in unique_X:\n            left_mask = X < threshold\n            right_mask = X >= threshold\n            if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                continue\n            left_y = y[left_mask]\n            right_y = y[right_mask]\n            sse_left = np.sum((left_y - np.mean(left_y)) ** 2)\n            sse_right = np.sum((right_y - np.mean(right_y)) ** 2)\n            total_sse = sse_left + sse_right\n            if total_sse < best_sse:\n                best_sse = total_sse\n                best_threshold = threshold\n                best_left = left_mask\n                best_right = right_mask\n        if best_threshold is None:\n            return {'type': 'leaf', 'mean': np.mean(y)}\n        left_subtree = build_tree(X[best_left], y[best_left], depth + 1)\n        right_subtree = build_tree(X[best_right], y[best_right], depth + 1)\n        return {'type': 'split', 'threshold': best_threshold, 'left': left_subtree, 'right': right_subtree}\n\n    def predict_sample(x, tree):\n        if tree['type'] == 'leaf':\n            return tree['mean']\n        elif x < tree['threshold']:\n            return predict_sample(x, tree['left'])\n        else:\n            return predict_sample(x, tree['right'])\n    tree = build_tree(X_train, y_train, 0)\n    predictions = [predict_sample(x, tree) for x in X_test]\n    return predictions\nX_train = [1, 2, 3, 4, 5]\ny_train = [2, 4, 5, 4, 5]\nX_test = [2.5, 3.5]"}
{"task_id": 485, "completion_id": 8, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def _mean(targets):\n        return sum(targets) / len(targets) if targets else float('nan')\n\n    def _sum_of_squared_errors(targets):\n        if not targets:\n            return 0\n        mean = _mean(targets)\n        return sum(((y - mean) ** 2 for y in targets))\n\n    def build_tree(X, y, depth):\n        if len(X) <= 2 or depth >= max_depth:\n            return {'type': 'leaf', 'mean': _mean(y)}\n        sorted_indices = sorted(range(len(X)), key=lambda i: X[i])\n        X_sorted = [X[i] for i in sorted_indices]\n        y_sorted = [y[i] for i in sorted_indices]\n        best_error = float('inf')\n        best_split = None\n        for i in range(1, len(X_sorted) - 1):\n            (X_left, X_right) = (X_sorted[:i], X_sorted[i:])\n            (y_left, y_right) = (y_sorted[:i], y_sorted[i:])\n            (mean_left, mean_right) = (_mean(y_left), _mean(y_right))\n            sse = _sum_of_squared_errors(y_left) + _sum_of_squared_errors(y_right)\n            if sse < best_error:\n                best_error = sse\n                split_point = (X_sorted[i - 1] + X_sorted[i]) / 2\n                best_split = {'type': 'node', 'depth': depth, 'split': split_point, 'left': build_tree(X_left, y_left, depth + 1), 'right': build_tree(X_right, y_right, depth + 1)}\n        return best_split or {'type': 'leaf', 'mean': _mean(y)}\n\n    def predict(x, node):\n        if node['type'] == 'leaf':\n            return node['mean']\n        elif x < node['split']:\n            return predict(x, node['left'])\n        else:\n            return predict(x, node['right'])\n    tree = build_tree(X_train, y_train, 0)\n    return [predict(x, tree) for x in X_test]"}
{"task_id": 485, "completion_id": 9, "solution": "def regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def sse(y: list[float | int]) -> float:\n        \"\"\"Calculate sum of squared errors of values y\"\"\"\n        if not y:\n            return float('inf')\n        mean = sum(y) / len(y)\n        return sum(((val - mean) ** 2 for val in y))\n\n    def build_tree(X: list[float | int], y: list[float | int], depth: int):\n        \"\"\"Recursively build the regression tree\"\"\"\n        if not X or not y or depth == 0 or (len(X) < 2):\n            return {'type': 'leaf', 'value': sum(y) / len(y)}\n        indices = sorted(set(X))\n        min_sse = float('inf')\n        best_threshold = None\n        best_left_indices = []\n        best_right_indices = []\n        for threshold in indices[1:-1]:\n            left_X = [X[i] for i in range(len(X)) if X[i] <= threshold]\n            left_y = [y[i] for i in range(len(X)) if X[i] <= threshold]\n            right_X = [X[i] for i in range(len(X)) if X[i] > threshold]\n            right_y = [y[i] for i in range(len(X)) if X[i] > threshold]\n            if not left_X or not right_X:\n                continue\n            sse_left = sse(left_y)\n            sse_right = sse(right_y)\n            total_sse = sse_left + sse_right\n            if total_sse < min_sse:\n                min_sse = total_sse\n                best_threshold = threshold\n                best_left_indices = [i for i in range(len(X)) if X[i] <= threshold]\n                best_right_indices = [i for i in range(len(X)) if X[i] > threshold]\n        if best_threshold is None:\n            return {'type': 'leaf', 'value': sum(y) / len(y)}\n        X_left = [X[i] for i in best_left_indices]\n        y_left = [y[i] for i in best_left_indices]\n        X_right = [X[i] for i in best_right_indices]\n        y_right = [y[i] for i in best_right_indices]\n        left_child = build_tree(X_left, y_left, depth - 1)\n        right_child = build_tree(X_right, y_right, depth - 1)\n        return {'type': 'internal', 'threshold': best_threshold, 'left': left_child, 'right': right_child}\n\n    def predict(point, node):\n        \"\"\"Recursively predict the value of a point by traversing the tree\"\"\"\n        if node['type'] == 'leaf':\n            return node['value']\n        if point <= node['threshold']:\n            return predict(point, node['left'])\n        else:\n            return predict(point, node['right'])\n    if not X_train or not y_train:\n        return [float('nan') for _ in X_test]\n    tree = build_tree(X_train, y_train, max_depth)\n    predictions = [predict(x, tree) for x in X_test]\n    return predictions"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    x_arr = np.array(x)\n    if x_arr.ndim != 1:\n        raise ValueError('Input must be a one-dimensional vector.')\n    if len(x_arr) == 0:\n        return []\n    diagonal_matrix = np.diag(x_arr)\n    return diagonal_matrix.tolist()"}
{"task_id": 490, "completion_id": 1, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    x_arr = np.array(x)\n    if x_arr.ndim != 1:\n        raise ValueError('Input must be one-dimensional.')\n    diag_matrix = np.diag(x_arr)\n    return diag_matrix.tolist()"}
{"task_id": 490, "completion_id": 2, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    x_array = np.array(x)\n    if x_array.size == 0:\n        return []\n    if x_array.ndim != 1:\n        raise ValueError('Input must be a one-dimensional vector.')\n    diagonal_matrix = np.diag(x_array)\n    return diagonal_matrix.tolist()"}
{"task_id": 490, "completion_id": 3, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    x_array = np.array(x, dtype=float)\n    if x_array.ndim != 1:\n        raise ValueError('Input must be a one-dimensional vector.')\n    diag_matrix = np.diag(x_array)\n    return diag_matrix.tolist()"}
{"task_id": 490, "completion_id": 4, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    x = np.array(x)\n    if x.ndim != 1:\n        raise ValueError('Input must be one-dimensional.')\n    if x.size == 0:\n        return []\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 490, "completion_id": 5, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    x_arr = np.array(x)\n    if x_arr.ndim != 1:\n        raise ValueError('Input must be one-dimensional.')\n    diag_matrix = np.diag(x_arr)\n    return diag_matrix.tolist()"}
{"task_id": 490, "completion_id": 6, "solution": "def make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    x_arr = np.array(x, dtype=float).ravel()\n    if x_arr.size == 0:\n        return []\n    diagonal_matrix = np.diag(x_arr)\n    return diagonal_matrix.tolist()"}
{"task_id": 490, "completion_id": 7, "solution": "def make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if isinstance(x, (list, tuple)):\n        x = np.array(x)\n    if x.ndim != 1:\n        raise ValueError('Input must be a one-dimensional vector.')\n    if len(x) == 0:\n        return []\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 490, "completion_id": 8, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    x = np.array(x)\n    if x.ndim != 1:\n        raise ValueError('Input must be one-dimensional.')\n    if x.size == 0:\n        return []\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 490, "completion_id": 9, "solution": "def make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    x_array = np.asarray(x)\n    if x_array.ndim != 1:\n        raise ValueError('Input must be one-dimensional')\n    diag_matrix = np.diag(x_array)\n    return diag_matrix.tolist()"}
{"task_id": 491, "completion_id": 0, "solution": "from collections import Counter, defaultdict, deque\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    transactions = [tuple(transaction) for transaction in transactions]\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n    freq_items = sorted([item for (item, count) in item_counts.items() if count >= min_sup], key=lambda x: (-item_counts[x], x))\n    if not freq_items:\n        return []\n    item_to_index = {item: idx for (idx, item) in enumerate(freq_items)}\n\n    def process_transaction(transaction):\n        sorted_transaction = sorted([item for item in transaction if item in item_to_index], key=lambda x: item_to_index[x], reverse=True)\n        return tuple(sorted_transaction)\n    processed_transactions = [process_transaction(transaction) for transaction in transactions]\n    processed_transactions = [t for t in processed_transactions if t]\n    if not processed_transactions:\n        return []\n\n    class FPNode:\n\n        def __init__(self, item, count, parent):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.children = {}\n            self.next = None\n\n        def has_child(self, item):\n            return item in self.children\n\n        def get_child(self, item):\n            return self.children.get(item, None)\n\n        def add_child(self, item):\n            if item not in self.children:\n                self.children[item] = FPNode(item, 0, self)\n            return self.children[item]\n\n        def __repr__(self):\n            return f'{self.item}: {self.count}'\n\n    def build_fp_tree(transactions):\n        root = FPNode(None, 0, None)\n        headers = {}\n        for transaction in transactions:\n            current = root\n            for item in transaction:\n                if not current.has_child(item):\n                    current.add_child(item)\n                    if item not in headers:\n                        headers[item] = FPNode(item, 0, None)\n                    if headers[item].next is None:\n                        headers[item].next = current.get_child(item)\n                    else:\n                        node = headers[item]\n                        while node.next is not None:\n                            node = node.next\n                        node.next = current.get_child(item)\n                current = current.get_child(item)\n                current.count += 1\n        return (root, headers)\n    processed_transaction_lists = [list(t) for t in processed_transactions]\n    (root, headers) = build_fp_tree(processed_transaction_lists)\n\n    def mine_tree(headers, suffix, patterns):\n        for item in sorted(headers.keys()):\n            new_pattern = tuple(sorted([*suffix, item]))\n            patterns.append(new_pattern)\n            nodes = []\n            node = headers[item]\n            while node is not None:\n                nodes.append(node)\n                node = node.next\n            conditional_pattern_base = []\n            for node in nodes:\n                path = []\n                current = node.parent\n                while current.item is not None:\n                    path.append((current.item, current.count))\n                    current = current.parent\n                path_count = node.count\n                if path:\n                    reduced_path = [(item, count) for (item, count) in path if item_counts[item] >= min_sup]\n                    if reduced_path:\n                        conditional_pattern_base.append((reduced_path, path_count))\n            if conditional_pattern_base:\n                conditional_counts = Counter()\n                for (path, count) in conditional_pattern_base:\n                    for (item, _) in path:\n                        conditional_counts[item] += count\n                conditional_freq_items = sorted([item for (item, count) in conditional_counts.items() if count >= min_sup], key=lambda x: (-conditional_counts[x], x))\n                conditional_transactions = [tuple(sorted([item for (item, _) in path if item in conditional_freq_items], key=lambda x: -conditional_counts[x])) for (path, count) in conditional_pattern_base]\n                conditional_transactions = [t for t in conditional_transactions if t]\n                if conditional_transactions:\n                    (conditional_tree_root, conditional_headers) = build_fp_tree(conditional_transactions)\n                    mine_tree(conditional_headers, new_pattern, patterns)\n    frequent_itemsets = []\n    for item in freq_items:\n        if item_counts[item] >= min_sup:\n            frequent_itemsets.append((item,))\n    mine_tree(headers, (), frequent_itemsets)\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 491, "completion_id": 1, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        A collection of transactions.  Each transaction is a list of hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n\n    class FPNode:\n\n        def __init__(self, value=None, count=0, parent=None):\n            self.value = value\n            self.count = count\n            self.parent = parent\n            self.children = dict()\n            self.node_link = None\n\n        def increment(self, count):\n            self.count += count\n    freq = Counter()\n    for trans in transactions:\n        freq.update(trans)\n    freq = {k: v for (k, v) in freq.items() if v >= min_sup}\n    if not freq:\n        return []\n    ordered_items = sorted(freq.keys())\n    item_map = {item: i for (i, item) in enumerate(ordered_items)}\n    header_table = defaultdict(list)\n    root = FPNode()\n    for trans in transactions:\n        filtered_trans = [item for item in trans if item in freq]\n        if not filtered_trans:\n            continue\n        ordered_trans = sorted(filtered_trans, key=lambda x: item_map[x], reverse=True)\n        update_tree(ordered_trans, root, header_table)\n    results = []\n\n    def mine(header_table, prefix):\n        items = sorted(header_table.keys(), key=item_map)\n        for item in items:\n            paths = get_conditional_pattern_base(item, header_table[item], item_map)\n            if not paths:\n                continue\n            itemset = tuple(sorted(prefix + [item]))\n            results.append(itemset)\n            conditional_freq = Counter()\n            for (path, count) in paths:\n                conditional_freq.update(Counter(path))\n            conditional_freq = {k: v for (k, v) in conditional_freq.items() if v >= min_sup}\n            if not conditional_freq:\n                continue\n            ordered_conditional_items = sorted(conditional_freq.keys(), key=item_map)\n            conditional_item_map = {item: i for (i, item) in enumerate(ordered_conditional_items)}\n            new_conditional_root = FPNode()\n            new_header_table = defaultdict(list)\n            for (path, count) in paths:\n                filtered_path = [p for p in path if p in conditional_freq]\n                if not filtered_path:\n                    continue\n                ordered_filtered_path = sorted(filtered_path, key=conditional_item_map.get, reverse=True)\n                if not ordered_filtered_path:\n                    continue\n                ordered_filtered_path.append(item)\n                update_tree(ordered_filtered_path, new_conditional_root, new_header_table, count)\n            for node in new_header_table[item]:\n                conditional_prefix = prefix + [item]\n                conditions = [path for (path, _) in paths if path]\n                mine_descendants(conditional_prefix, new_header_table, results)\n\n    def mine_descendants(prefix, header_table, results):\n        for item in sorted(header_table.keys(), key=item_map):\n            itemset = tuple(sorted(prefix + [item]))\n            results.append(itemset)\n            if len(header_table[item]) > 1:\n                paths = get_conditional_pattern_base(item, header_table[item], item_map)\n                new_conditional_freq = Counter()\n                for (path, count) in paths:\n                    new_conditional_freq.update(Counter(path))\n                new_conditional_freq = {k: v for (k, v) in new_conditional_freq.items() if v >= min_sup}\n                if not new_conditional_freq:\n                    continue\n                conditional_items = sorted(new_conditional_freq.keys(), key=item_map)\n                conditional_item_map = {item: i for (i, item) in enumerate(conditional_items)}\n                new_conditional_root = FPNode()\n                new_header_table = defaultdict(list)\n                for (path, count) in paths:\n                    filtered_path = [p for p in path if p in new_conditional_freq]\n                    if not filtered_path:\n                        continue\n                    ordered_path = sorted(filtered_path, key=conditional_item_map.get, reverse=True)\n                    ordered_path.append(item)\n                    update_tree(ordered_path, new_conditional_root, new_header_table, count)\n                for node in new_header_table[item]:\n                    new_prefix = prefix + [item]\n                    mine_descendants(new_prefix, new_header_table, results)\n            else:\n                pass\n\n    def update_tree(items, root, header_table, count=1):\n        if not items:\n            return\n        (first, *rest) = items\n        if first in root.children:\n            child = root.children[first]\n            child.increment(count)\n            update_entry(header_table[first], child)\n        else:\n            child = FPNode(first, count, root)\n            root.children[first] = child\n            update_entry(header_table[first], child)\n        update_tree(rest, child, header_table, count)\n\n    def update_entry(header_list, node):\n        if not header_list:\n            header_list.append(node)\n        else:\n            last = header_list[-1]\n            while last.node_link is not None:\n                last = last.node_link\n            last.node_link = node\n\n    def get_conditional_pattern_base(item, nodes, item_map):\n        patterns = []\n        for node in nodes:\n            path = []\n            current = node\n            while current.parent:\n                if current.value is not None:\n                    path.append(current.value)\n                current = current.parent\n            path.reverse()\n            if item in path:\n                path.remove(item)\n            patterns.append((path, node.count))\n        return patterns\n\n    def mine_descendants_recurse(prefix, header_table):\n        for item in sorted(header_table.keys(), key=item_map):\n            results.append(tuple(sorted(prefix + [item])))\n            if len(header_table[item]) > 1:\n                paths = get_conditional_pattern_base(item, header_table[item], item_map)\n                conditional_freq = Counter()\n                for (path, count) in paths:\n                    conditional_freq.update(Counter(path))\n                conditional_freq = {k: v for (k, v) in conditional_freq.items() if v >= min_sup}\n                if not conditional_freq:\n                    continue\n                conditional_items = sorted(conditional_freq.keys(), key=item_map)\n                conditional_item_map = {item: i for (i, item) in enumerate(conditional_items)}\n                new_conditional_root = FPNode()\n                new_header_table = defaultdict(list)\n                for (path, count) in paths:\n                    filtered_path = [p for p in path if p in conditional_freq]\n                    if not filtered_path:\n                        continue\n                    ordered_path = sorted(filtered_path, key=conditional_item_map.get, reverse=True)\n                    ordered_path.append(item)\n                    update_tree(ordered_path, new_conditional_root, new_header_table, count)\n                for node_item in conditional_items:\n                    for node in new_header_table[node_item]:\n                        if sorted(prefix + [item, node_item]) not in results:\n                            mine_descendants_recurse(prefix + [item], new_header_table)\n            else:\n                paths = get_conditional_pattern_base(item, header_table[item], item_map)\n                for (path, count) in paths:\n                    if path:\n                        continuing_prefix = prefix + [item]\n                        if tuple(sorted(continuing_prefix + path)) not in results:\n                            mine_descendants_recurse(continuing_prefix, header_table)\n    mine(header_table, [])\n    mine_descendants_recurse([], header_table)\n    all_sets = set(map(frozenset, results))\n    output = [tuple(sorted(itemset)) for itemset in all_sets]\n    output.sort(key=lambda x: (len(x), x))\n    return output\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3"}
{"task_id": 491, "completion_id": 2, "solution": "from collections import Counter, defaultdict, namedtuple\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n\n    class Node(namedtuple('Node', ['item', 'count', 'parent', 'children', 'node_link'])):\n\n        def __new__(cls, item=None, count=1, parent=None, children=None, node_link=None):\n            return super(Node, cls).__new__(cls, item, count, parent, defaultdict(cls), node_link)\n    transaction_list = [frozenset(t) for t in transactions]\n    freq = Counter()\n    for t in transaction_list:\n        items = tuple(sorted(t))\n        freq.update(items)\n    for item in list(freq.keys()):\n        if freq[item] < min_sup:\n            del freq[item]\n    if not freq:\n        return []\n    sorted_items = sorted(freq, key=lambda x: x)\n    freq.items = freq\n    processed = []\n    for t in transaction_list:\n        filtered = [item for item in t if item in freq]\n        filtered.sort(key=lambda x: sorted_items.index(x), reverse=True)\n        if filtered:\n            processed.append(filtered)\n\n    def build_tree(transactions, freq_table):\n        root = Node()\n        header_table = defaultdict(list)\n        for trans in transactions:\n            items = Counter()\n            for item in trans:\n                items[item] += 1\n            add(items, root, header_table)\n        return (root, header_table)\n\n    def add(items, node, header_table):\n        for item in items:\n            if items[item] < min_sup:\n                del items[item]\n        if not items:\n            return\n        most_frequent = sorted(items, key=lambda x: sorted_items.index(x))\n        most_frequent.reverse()\n        for item in most_frequent:\n            next_node = node.children.get(item)\n            if next_node:\n                next_node.count += items[item]\n            else:\n                next_node = Node(item=item, count=items[item], parent=node)\n                node.children[item] = next_node\n                header_table[item].append(next_node)\n            add(Counter({item: items[item]}), next_node, header_table)\n    (root, header_table) = build_tree(processed, freq)\n    for (item, nodes) in header_table.items():\n        nodes.sort(key=lambda x: x.count, reverse=True)\n        for i in range(len(nodes) - 1):\n            nodes[i].node_link = nodes[i + 1]\n        nodes[-1].node_link = None\n\n    def mine(header_table, prefix, freq_items):\n        for item in header_table:\n            new_prefix = tuple(sorted(prefix + (item,)))\n            freq_items.append(new_prefix)\n            conditional_patterns = []\n            for node in header_table[item]:\n                path = []\n                curr = node.parent\n                while curr and curr.item is not None:\n                    path.append(curr.item)\n                    curr = curr.parent\n                path.reverse()\n                conditional_patterns.extend([Counter({x: node.count}) for x in path])\n            if conditional_patterns:\n                (c_root, c_header_table) = build_tree(conditional_patterns, freq)\n                if c_header_table:\n                    mine(c_header_table, new_prefix, freq_items)\n    freq_items = []\n    mine(header_table, prefix=tuple(), freq_items=freq_items)\n    for item in freq:\n        freq_items.append((item,))\n    freq_items.sort(key=lambda x: (len(x), x))\n    return freq_items\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3"}
{"task_id": 491, "completion_id": 3, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n\n    class FPTreeNode:\n\n        def __init__(self, item=None, count=1, parent=None):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.children = {}\n            self.node_links = None\n    freq_items = Counter()\n    for transaction in transactions:\n        freq_items.update(transaction)\n    freq_items = {item: count for (item, count) in freq_items.items() if count >= min_sup}\n    if not freq_items:\n        return []\n    sorted_items = sorted(freq_items, key=lambda x: (-freq_items[x], x))\n    item_order = {item: index for (index, item) in enumerate(sorted_items)}\n    filtered_transactions = []\n    for transaction in transactions:\n        sorted_trans = sorted(transaction, key=lambda x: (-freq_items[x], x) if x in freq_items else float('inf'))\n        filtered = [item for item in sorted_trans if item in freq_items]\n        if filtered:\n            filtered_transactions.append(filtered)\n    root = FPTreeNode()\n    header_table = {}\n    for trans in filtered_transactions:\n        insert_trans(root, header_table, trans, item_order)\n\n    def mine_tree(header_table, prefix, freq_itemsets):\n        items = sorted((item for item in header_table if header_table[item]), key=lambda item: (-freq_items[item], item))\n        for item in items:\n            new_prefix = prefix + (item,)\n            freq_itemsets.append(tuple(sorted(new_prefix)))\n            pattern_base = get_conditional_pattern_base(item, header_table, root, item_order)\n            cond_freq_items = Counter()\n            for (pattern, count) in pattern_base:\n                for i in pattern:\n                    cond_freq_items[i] += count\n            cond_freq_items = {i: c for (i, c) in cond_freq_items.items() if c >= min_sup}\n            if cond_freq_items:\n                cond_trans = []\n                for (pattern, count) in pattern_base:\n                    cond_trans.extend([sorted(pattern, key=lambda x: (-cond_freq_items[x], x))] * count)\n                cond_header_table = {}\n                cond_root = FPTreeNode()\n                for trans in cond_trans:\n                    insert_trans(cond_root, cond_header_table, trans, item_order)\n                mine_tree(cond_header_table, new_prefix, freq_itemsets)\n    all_frequent_itemsets = []\n    mine_tree(header_table, (), all_frequent_itemsets)\n    return sorted(all_frequent_itemsets, key=lambda x: (len(x), x))\ndef get_conditional_pattern_base(item, header_table, root, item_order):\n    \"\"\"Build conditional pattern base for a given item.\"\"\"\n    pattern_base = []\n    node = header_table[item]\n    while node:\n        path = []\n        parent = node.parent\n        if parent.item is not None:\n            parent_count = node.count\n            while parent.item is not None:\n                path.append(parent.item)\n                parent = parent.parent\n            if path:\n                pattern_base.append((list(path), parent_count))\n        node = node.node_links\n    return pattern_base"}
{"task_id": 491, "completion_id": 4, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions. Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically. Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    freq_items = Counter()\n    for transaction in transactions:\n        freq_items.update(transaction)\n    freq_items = {item: count for (item, count) in freq_items.items() if count >= min_sup}\n    if not freq_items:\n        return []\n    sorted_items = sorted(freq_items.keys(), key=lambda x: (-freq_items[x], x))\n    filtered_transactions = []\n    for trans in transactions:\n        ordered_items = [item for item in trans if item in freq_items]\n        ordered_items.sort(key=lambda x: (-freq_items[x], x))\n        if ordered_items:\n            filtered_transactions.append(ordered_items)\n\n    class FPNode:\n\n        def __init__(self, item, count, parent):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.children = {}\n\n        def increment(self, count):\n            self.count += count\n    header_table = defaultdict(list)\n    root = FPNode(None, 0, None)\n    for trans in filtered_transactions:\n        if not trans:\n            continue\n        cur = root\n        for item in trans:\n            if item in cur.children:\n                cur = cur.children[item]\n                cur.increment(1)\n            else:\n                new_node = FPNode(item, 1, cur)\n                cur.children[item] = new_node\n                cur = new_node\n            header_table[item].append(cur)\n    sorted_header_table = sorted(freq_items.items(), key=lambda x: (-x[1], x[0]))\n    header_table = {item: data for (item, _) in sorted_header_table for data in (header_table[item],)} if freq_items else {}\n\n    def mine_tree(header_table, tree, prefix, frequent_items):\n        (_, items) = max(((v, k) for (k, v) in freq_items.items()))\n        if not header_table:\n            return\n        ordered_items = sorted(freq_items.items(), key=lambda x: (-x[1], x[0]))\n        for (item, count) in ordered_items:\n            new_prefix = tuple(sorted(list(prefix) + [item]))\n            frequent_items.append(new_prefix)\n            pattern_base = []\n            for node in header_table[item]:\n                path = []\n                cur = node.parent\n                while cur.item is not None:\n                    path.append((cur.item, cur.count))\n                    cur = cur.parent\n                if path:\n                    pattern_base.append((path, node.count))\n            cond_freq_map = Counter()\n            for (path, count) in pattern_base:\n                for (item_, freq) in path:\n                    cond_freq_map[item_] += count\n            cond_freq_items = {item_: count for (item_, count) in cond_freq_map.items() if count >= min_sup}\n            if not cond_freq_items:\n                continue\n            cond_trans = []\n            for (path, count) in pattern_base:\n                cond_path = [item_ for (item_, freq) in path if item_ in cond_freq_items]\n                if cond_path:\n                    cond_path.sort(key=lambda x: (-cond_freq_items[x], x))\n                    cond_trans.append((cond_path, count))\n            if not cond_trans:\n                continue\n            (cond_tree, cond_header_table) = build_tree_from_cond(cond_trans, cond_freq_items, min_sup)\n            if cond_header_table:\n                mine_tree(cond_header_table, cond_tree, new_prefix, frequent_items)\n\n    def build_tree_from_cond(cond_trans, freq_items, min_sup):\n        cond_freq_items = freq_items.copy()\n        cond_header_table = defaultdict(list)\n        cond_root = FPNode(None, 0, None)\n        for (path, count) in cond_trans:\n            cur = cond_root\n            for item in path:\n                if item in cur.children:\n                    cur = cur.children[item]\n                    cur.increment(count)\n                    cond_header_table[item].append(cur)\n                else:\n                    new_node = FPNode(item, count, cur)\n                    cur.children[item] = new_node\n                    cur = new_node\n                    cond_header_table[item].append(cur)\n        return (cond_root, cond_header_table)\n    frequent_itemsets = []\n    mine_tree(header_table, root, (), frequent_itemsets)\n    for (item, count) in freq_items.items():\n        if count >= min_sup:\n            frequent_itemsets.append((item,))\n    for item in freq_items:\n        if (item,) not in [tuple((set(x) == 1 and x[0] == item for x in frequent_itemsets))]:\n            frequent_itemsets.append((item,))\n    frequent_itemsets = list(set(frequent_itemsets))\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3"}
{"task_id": 491, "completion_id": 5, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions. Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.\n         Each tuple is also sorted lexicographically.\n    \"\"\"\n\n    def conditional_pattern_paths(header, tree):\n        pattern_paths = []\n        for item in header:\n            node = header[item]\n            path = []\n            while node is not None:\n                prefix = node.get_path()\n                if prefix and node.count >= min_sup:\n                    pattern_paths.append((prefix, node.count))\n                node = node.link\n        return pattern_paths\n\n    class TreeNode:\n\n        def __init__(self, item, count, parent):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.link = None\n            self.children = {}\n\n        def get_path(self):\n            path = []\n            node = self\n            while node.item is not None:\n                path.append((node.item, node.count))\n                node = node.parent\n            return path[::-1]\n    item_counts = Counter(itertools.chain(*transactions))\n    freq_items = sorted([item for (item, count) in item_counts.items() if count >= min_sup])\n    if not freq_items:\n        return []\n\n    def item_cmp(item):\n        return (-item_counts[item], item)\n    sorted_transactions = []\n    for trans in transactions:\n        filtered = [item for item in trans if item in item_counts and item_counts[item] >= min_sup]\n        filtered.sort(key=item_cmp)\n        if filtered:\n            sorted_transactions.append(filtered)\n    root = TreeNode(None, 0, None)\n    header_table = defaultdict(list)\n    for trans in sorted_transactions:\n        head = root\n        for item in trans:\n            if item not in head.children:\n                head.children[item] = TreeNode(item, 1, head)\n            else:\n                head.children[item].count += 1\n            header_table[item].append(head.children[item])\n    for (item, nodes) in header_table.items():\n        for i in range(len(nodes) - 1):\n            nodes[i].link = nodes[i + 1]\n\n    def mine(header_table, tree, prefix, freq_sets):\n        items = sorted((p[0] for p in header_table.items()))\n        if not items:\n            return\n        for item in items:\n            new_prefix = tuple(sorted(prefix + [item]))\n            freq_sets.append(new_prefix)\n        for item in items:\n            pattern_paths = conditional_pattern_paths(header_table[item], tree)\n            for (path, count) in pattern_paths:\n                base = [it for (it, cnt) in path if it != item]\n                new_prefix = prefix + [item]\n                path_counts = Counter((it for (it, cnt) in path * count if it != item))\n                cond_trans = []\n                for p in pattern_paths:\n                    p_trans = []\n                    for (it, cnt) in p[0]:\n                        if it != item:\n                            p_trans.append(it)\n                    if p_trans and Counter(p_trans).total() >= min_sup:\n                        cond_trans.append(tuple(p_trans))\n                if cond_trans:\n                    new_freq_items = sorted([it for (it, cnt) in Counter(itertools.chain(*cond_trans)).items() if cnt >= min_sup], key=lambda x: (-Counter(itertools.chain(*cond_trans))[x], x))\n                    if new_freq_items:\n                        (cond_tree, cond_header) = build_tree_conditional(cond_trans)\n                        if cond_header:\n                            mine(cond_header, cond_tree, new_prefix, freq_sets)\n\n    def build_tree_conditional(trans_list):\n        item_counts = Counter((it for trans in trans_list for it in trans))\n        freq_items = [item for (item, count) in item_counts.items() if count >= min_sup]\n        if not freq_items:\n            return (None, {})\n        sorted_trans = []\n        for trans in trans_list:\n            filtered = [item for item in trans if item in item_counts and item_counts[item] >= min_sup]\n            if filtered:\n                filtered.sort(key=lambda x: (-item_counts[x], x))\n                sorted_trans.append(filtered)\n        root = TreeNode(None, 0, None)\n        header_table = defaultdict(list)\n        for trans in sorted_trans:\n            head = root\n            for item in trans:\n                if item not in head.children:\n                    head.children[item] = TreeNode(item, 1, head)\n                else:\n                    head.children[item].count += 1\n                header_table[item].append(head.children[item])\n                for i in range(len(header_table[item]) - 1):\n                    header_table[item][i].link = header_table[item][i + 1]\n        return (root, header_table)\n    freq_sets = []\n    mine(header_table, root, [], freq_sets)\n    freq_sets.sort(key=lambda x: (len(x), x))\n    return freq_sets\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3"}
{"task_id": 491, "completion_id": 6, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n\n    def _count_frequencies(transactions):\n        item_counts = Counter()\n        for trans in transactions:\n            item_counts.update(set(trans))\n        return item_counts\n\n    def _filter_and_sort(transactions, item_counts):\n        freq_items = {item for (item, count) in item_counts.items() if count >= min_sup}\n        sorted_trans = []\n        for trans in transactions:\n            filtered = [item for item in trans if item in freq_items]\n            sorted_trans.append(sorted(filtered, key=lambda item: item_counts[item], reverse=True))\n        return sorted_trans\n\n    class FPTreeNode:\n\n        def __init__(self, item, count, parent):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.children = {}\n\n        def increment(self, count):\n            self.count += count\n\n    def _build_fp_tree(transactions, freq_items, min_sup):\n        item_counts = _count_frequencies(transactions)\n        freq_items = dict(sorted(item_counts.items(), key=lambda x: x[1], reverse=True))\n        freq_items = {k: v for (k, v) in freq_items.items() if v >= min_sup}\n        header_table = defaultdict(list)\n        root = FPTreeNode(None, 0, None)\n        for trans in transactions:\n            trans_dict = {}\n            for item in trans:\n                trans_dict[item] = trans_dict.get(item, 0) + 1\n            sorted_items = sorted(trans_dict.items(), key=lambda x: freq_items[x[0]], reverse=True)\n            if sorted_items:\n                _insert_tree(sorted_items, root, header_table)\n        if not header_table:\n            return (None, {}, set())\n        return (root, header_table, set(freq_items.keys()))\n\n    def _insert_tree(items, node, header_table, count=1):\n        (item, freq) = items[0]\n        if item in node.children:\n            child = node.children[item]\n            child.increment(count)\n        else:\n            child = FPTreeNode(item, count, node)\n            node.children[item] = child\n            header_table[item].append(child)\n        if len(items) > 1:\n            _insert_tree(items[1:], child, header_table, count)\n\n    def _ascend_path(node):\n        prefix = []\n        while node.parent.item is not None:\n            node = node.parent\n            prefix.append(node.item)\n        return list(reversed(prefix))\n\n    def _mine_tree(header_table, tree, min_sup, items, patterns):\n        if not header_table and (not tree.children):\n            return\n        items_list = sorted(header_table.keys(), key=lambda x: header_table[x][0].count, reverse=True)\n        for item in items_list:\n            new_patterns = []\n            pattern = tuple(sorted([*items, item]))\n            if tuple(sorted(pattern)) not in patterns:\n                new_patterns.append(pattern)\n                patterns.add(tuple(sorted(pattern)))\n            cond_patterns = []\n            for node in header_table[item]:\n                path = _ascend_path(node)\n                count = node.count\n                if path:\n                    cond_patterns.append((path, count))\n            if cond_patterns:\n                (new_tree, new_header, _) = _build_fp_tree([(path, count) for (path, count) in cond_patterns], {}, min_sup)\n                if new_header:\n                    _mine_tree(new_header, new_tree, min_sup, [item] + list(items), patterns)\n    item_counts = _count_frequencies(transactions)\n    sorted_trans = _filter_and_sort(transactions, item_counts)\n    (root, header_table, freq_items) = _build_fp_tree(sorted_trans, {}, min_sup)\n    if not root or not header_table:\n        return []\n    patterns = set()\n    _mine_tree(header_table, root, min_sup, [], patterns)\n    return sorted([tuple(sorted(p)) for p in patterns], key=lambda x: (len(x), x))\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3"}
{"task_id": 491, "completion_id": 7, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n\n    def sort_itemsets(itemsets):\n        return sorted(itemsets, key=lambda x: (len(x), x))\n    freq = Counter()\n    for t in transactions:\n        freq.update(set(t))\n    frequent_items = {item for (item, count) in freq.items() if count >= min_sup}\n    frequent_items = sorted(frequent_items)\n    item_index = {item: i for (i, item) in enumerate(frequent_items)}\n    index_item = {i: item for (i, item) in enumerate(frequent_items)}\n    processed_transactions = []\n    for t in transactions:\n        sorted_items = [item for item in t if item in item_index]\n        sorted_items.sort(key=lambda x: freq[x], reverse=True)\n        processed_transactions.append(tuple(sorted_items))\n\n    class FPNode:\n\n        def __init__(self, value=None, count=0, parent=None):\n            self.value = value\n            self.count = count\n            self.parent = parent\n            self.children = dict()\n            self.node_link = None\n    root = FPNode(value='root', count=1)\n    header_table = defaultdict(list)\n\n    def update_header(node, target_node):\n        while node.node_link is not None:\n            node = node.node_link\n        node.node_link = target_node\n\n    def update_tree(ordered_items, node, header_table, count):\n        if not ordered_items:\n            return\n        item = ordered_items[0]\n        if item in node.children:\n            updated_child = node.children[item]\n            updated_child.count += count\n        else:\n            updated_child = FPNode(value=item, count=count, parent=node)\n            node.children[item] = updated_child\n            header_table[item_index[item]].append(updated_child)\n        update_header(header_table[item_index[item]][0], updated_child)\n        update_tree(ordered_items[1:], updated_child, header_table, count)\n    for trans in processed_transactions:\n        if trans:\n            update_tree(list(trans), root, header_table, 1)\n\n    def mine_tree(header_table, min_sup, prefix, freq_itemsets):\n        ordered_items = [index for index in sorted(header_table) if header_table[index]]\n        for i in ordered_items:\n            item = index_item[i]\n            new_prefix = prefix + [item]\n            new_freq = tuple(sorted(new_prefix))\n            freq_itemsets.add(new_freq)\n            cond_pattern_bases = []\n            cond_node = header_table[i][0]\n            while cond_node is not None:\n                prefix_path = []\n                node = cond_node\n                freq_of_path = node.count\n                while node.parent and node.parent.value != 'root':\n                    parent_item = node.parent.value\n                    if parent_item:\n                        prefix_path.append((parent_item, node.parent.count))\n                    node = node.parent\n                current_node_count = cond_node.count\n                adjusted_path = [(p[0], min(p[1], current_node_count)) for p in prefix_path]\n                cond_pattern_bases.append((adjusted_path, current_node_count))\n                cond_node = cond_node.node_link\n            if cond_pattern_bases:\n                pattern_freq = Counter()\n                for (path, count) in cond_pattern_bases:\n                    for (item, _) in path:\n                        pattern_freq[item] += count\n                frequent_items_cond = {item for item in pattern_freq if pattern_freq[item] >= min_sup}\n                if frequent_items_cond:\n                    freq_cond = [(f, pattern_freq[f]) for f in frequent_items_cond]\n                    freq_cond.sort(key=lambda x: -x[1])\n                    processed_cond = []\n                    for (pattern, freq) in freq_cond:\n                        for p in [p for (p, _) in cond_pattern_bases if p == pattern]:\n                            processed_cond.append([p])\n                    mine_tree(build_cond_header(processed_cond, item_index, min_sup), min_sup, new_prefix, freq_itemsets)\n\n    def build_cond_header(conditional_paths, item_index, min_sup):\n        cond_header = defaultdict(list)\n        for (path, count) in conditional_paths:\n            if isinstance(path, list):\n                path_dict = Counter(path)\n                sorted_items = sorted(path_dict, key=lambda i: -path_dict[i])\n                ordered_path = [item for i in sorted_items for item in [i] * path_dict[i]]\n            else:\n                ordered_path = path\n            ordered_path_index = tuple((item_index[item] for item in path))\n            for item in ordered_path:\n                pass\n            cond_path = Counter([item for item in path])\n            for item in path:\n                if cond_path[item] >= min_sup:\n                    cond_header[item_index[item]].append(ordered_path)\n        return cond_header\n    frequent_itemsets = set()\n\n    def finalize_mining(header_table, min_sup):\n        freq_itemsets = set()\n        for i in sorted(header_table.keys()):\n            freq_itemsets.add((index_item[i],))\n        return freq_itemsets\n    freq_itemsets = set()\n    header_table_indices = [[item_index[item]] for item in frequent_items]\n    mine_tree(header_table, min_sup, [], freq_itemsets)\n    result = []\n    for items in freq_itemsets:\n        result.append(tuple(sorted(items)))\n    return sort_itemsets(result)"}
{"task_id": 491, "completion_id": 8, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n\n    def get_freq_items(transactions):\n        item_counts = Counter()\n        for trans in transactions:\n            item_counts.update(set(trans))\n        return {item for (item, count) in item_counts.items() if count >= min_sup}\n    freq_items = get_freq_items(transactions)\n    if not freq_items:\n        return []\n\n    def build_freq_table():\n        freq_item_counts = Counter()\n        for trans in transactions:\n            items = [item for item in trans if item in freq_items]\n            items.sort(key=lambda x: (-sum((1 for t in transactions if item in t)), x))\n            freq_items_sorted = sorted([item for item in trans if item in freq_items], key=lambda x: (-sum((1 for t in transactions if x in t)), x))\n            if len(freq_items_sorted) >= 1:\n                freq_table[tuple(freq_items_sorted)] += 1\n    item_freq = Counter()\n    for trans in transactions:\n        valid_items = [item for item in trans if item in freq_items]\n        for item in valid_items:\n            item_freq[item] += 1\n        freq_order = sorted(valid_items, key=lambda x: (-item_freq[x], x))\n        ordered_trans.append(freq_order)\n    ordered_trans = []\n    item_freq = Counter()\n    for trans in transactions:\n        valid_items = [item for item in trans if item in freq_items]\n        for item in valid_items:\n            item_freq[item] += 1\n        freq_order = sorted(valid_items, key=lambda x: (-item_freq[x], x))\n        if freq_order:\n            ordered_trans.append(freq_order)\n    if not ordered_trans:\n        return []\n\n    class FPTreeNode:\n\n        def __init__(self, name, count, parent):\n            self.name = name\n            self.count = count\n            self.parent = parent\n            self.children = {}\n\n    class FPTree:\n\n        def __init__(self):\n            self.root = FPTreeNode(None, 0, None)\n            self.header_table = defaultdict(list)\n\n        def add_path(self, items):\n            node = self.root\n            for item in items:\n                if item in node.children:\n                    node = node.children[item]\n                    node.count += 1\n                else:\n                    new_node = FPTreeNode(item, 1, node)\n                    node.children[item] = new_node\n                    node = new_node\n                self.header_table[item].append(node)\n\n        def get_conditional_pattern_base(self, item):\n            pattern_base = []\n            nodes = self.header_table[item]\n            for node in reversed(nodes):\n                path = []\n                current = node\n                while current.parent is not None:\n                    current = current.parent\n                    if current.name is not None:\n                        path.append(current.name)\n                if path:\n                    pattern_base.append((path, node.count))\n            return pattern_base\n\n    def build_tree(transactions):\n        tree = FPTree()\n        for trans in transactions:\n            tree.add_path(trans)\n        return tree\n    item_freq = Counter((item for trans in ordered_trans for item in set(trans)))\n    sorted_items = sorted((item for item in item_freq if item_freq[item] >= min_sup), key=lambda x: (-item_freq[x], x))\n    filtered_ordered = []\n    for trans in ordered_trans:\n        filtered_ordered.append(tuple((item for item in trans if item in set(sorted_items))))\n    filtered_ordered = [t for t in filtered_ordered if t]\n    freq_tree = FPTree()\n    for trans in filtered_ordered:\n        freq_tree.add_path(trans)\n    if not freq_tree.header_table:\n        return []\n\n    def mine(tree, items, prefix, pattern_list):\n        if not items:\n            return\n        for item in items:\n            cond_pattern_base = tree.get_conditional_pattern_base(item)\n            cond_frequent_items = set()\n            for (pat, count) in cond_pattern_base:\n                for it in pat:\n                    if it in item_freq:\n                        if item_freq[it] >= min_sup:\n                            cond_frequent_items.add(it)\n            if not cond_frequent_items:\n                continue\n            new_prefix = (*prefix, item)\n            pattern_list.append(tuple(sorted(new_prefix)))\n            cond_items = sorted(cond_frequent_items, key=lambda x: (-sum((1 for (pat, _) in cond_pattern_base if x in pat)), x))\n            if not cond_items:\n                continue\n            cond_tree = FPTree()\n            cond_trans = []\n            for (pattern, count) in cond_pattern_base:\n                valid_items = [i for i in pattern if i in cond_items]\n                if valid_items:\n                    valid_items.sort(key=lambda x: (-sum((1 for (p, _) in cond_pattern_base if x in p)), x))\n                    cond_trans.append((valid_items, count))\n            cond_ordered_trans = []\n            for (items, count) in cond_trans:\n                for _ in range(count):\n                    cond_ordered_trans.append(items)\n            combined_freq = Counter()\n            for t in cond_trans:\n                for it in t[0]:\n                    combined_freq[it] += t[1]\n            sorted_items_cond = sorted((item for item in combined_freq if combined_freq[item] >= min_sup), key=lambda x: (-combined_freq[x], x))\n            for trans in cond_ordered_trans:\n                if trans:\n                    sorted_trans = sorted(trans, key=lambda x: (-combined_freq[x], x))\n                    cond_tree.add_path(sorted_trans)\n            mine(cond_tree, cond_tree.header_table.keys(), new_prefix, pattern_list)\n        items = list(items)\n        items.pop()\n    pattern_list = []\n    initial_items = sorted(freq_tree.header_table.keys(), key=lambda x: (-item_freq[x], x))\n    mine(freq_tree, initial_items, (), pattern_list)\n    pattern_set = set()\n    for pat in pattern_list:\n        pattern_set.add(tuple(sorted(pat)))\n    for item in sorted_items:\n        if item in item_freq and item_freq[item] >= min_sup:\n            pattern_set.add((item,))\n    result = [tuple(sorted(pat)) for pat in pattern_set if item_freq.get(tuple(sorted(pat)), 0) >= min_sup]\n\n    def check_frequency(itemset):\n        count = 0\n        for trans in transactions:\n            if set(itemset).issubset(trans):\n                count += 1\n        return count\n    valid_result = []\n    for itemset in result:\n        if check_frequency(itemset) >= min_sup:\n            valid_result.append(itemset)\n    valid_result = sorted(valid_result, key=lambda x: (len(x), x))\n    return valid_result"}
{"task_id": 491, "completion_id": 9, "solution": "from collections import Counter, defaultdict\nimport itertools\nfrom functools import lru_cache\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n\n    class Node:\n\n        def __init__(self, name, count, parent):\n            self.name = name\n            self.count = count\n            self.parent = parent\n            self.children = {}\n            self.link = None\n\n        def increment(self, count):\n            self.count += count\n    transactions = [frozenset(t) for t in transactions]\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n    freq_items = [item for (item, count) in item_counts.items() if count >= min_sup]\n    filtered_freq_transactions = []\n    for transaction in transactions:\n        filtered_trans = frozenset([item for item in transaction if item in freq_items])\n        if len(filtered_trans) > 0:\n            filtered_freq_transactions.append(filtered_trans)\n    if not freq_items:\n        return []\n    freq_items.sort(key=lambda x: (-item_counts[x], x))\n\n    def build_fp_tree():\n        header_table = defaultdict(list)\n        root = Node('null', 1, None)\n        for transaction in filtered_freq_transactions:\n            sorted_items = sorted(transaction, key=lambda item: freq_items.index(item), reverse=True)\n            update_tree(sorted_items, root, header_table)\n        return (root, header_table)\n\n    def update_tree(sorted_items, node, header_table):\n        if not sorted_items:\n            return\n        item = sorted_items[0]\n        if item in node.children:\n            node.children[item].increment(1)\n        else:\n            node.children[item] = Node(item, 1, node)\n            header_table[item].append(node.children[item])\n        update_tree(sorted_items[1:], node.children[item], header_table)\n    (root, header_table) = build_fp_tree()\n\n    def mine_tree(header_table, tree_prefix):\n        local_result = []\n        items = sorted([item for item in header_table if header_table[item]], key=lambda x: x)\n        for item in items:\n            itemset = tree_prefix + (item,)\n            local_result.append(itemset)\n            condition_pattern_base = generate_conditional_pattern_base(item, header_table)\n            cond_trans = []\n            for (pattern, count) in condition_pattern_base.items():\n                sorted_pattern = sorted(pattern, key=lambda x: freq_items.index(x), reverse=True)\n                if sorted_pattern:\n                    cond_trans.append((frozenset(sorted_pattern), count))\n            cond_item_counts = Counter()\n            for (trans, count) in cond_trans:\n                for item in trans:\n                    cond_item_counts[item] += count\n            cond_freq_items = [item for (item, count) in cond_item_counts.items() if count >= min_sup]\n            if not cond_freq_items:\n                continue\n            cond_freq_items.sort(key=lambda x: -cond_item_counts[x])\n            cond_freq_trans = []\n            for (trans, count) in cond_trans:\n                filtered_trans = frozenset([item for item in trans if item in cond_freq_items])\n                if filtered_trans:\n                    cond_freq_trans.append((filtered_trans, count))\n            cond_tree = build_conditional_tree(cond_freq_trans, cond_freq_items, min_sup)\n            if cond_tree:\n                (_, cond_header) = cond_tree\n                for suffix in mine_tree(cond_header, itemset).items:\n                    local_result.append(suffix)\n        return FrequentItemset(local_result)\n\n    def build_conditional_tree(cond_freq_trans, freq_items, min_sup):\n        header_table = defaultdict(list)\n        root = Node('null', 1, None)\n        for (trans, count) in cond_freq_trans:\n            trans_items = list(trans)\n            trans_items.sort(key=lambda x: freq_items.index(x), reverse=True)\n            update_tree(trans_items, root, header_table)\n        return (root, header_table)\n\n    def generate_conditional_pattern_base(item, header_table):\n        pattern_base = [[] for _ in header_table[item]]\n        for node in header_table[item]:\n            path = []\n            current = node.parent\n            while current and current.name != 'null':\n                path.append(current.name)\n                current = current.parent\n            count = node.count\n            for (i, child) in enumerate(pattern_base):\n                child.extend(path)\n                child.reverse()\n                child = frozenset(child)\n                pattern_base[i] = child\n                count_i = count\n                break\n        cond_pattern_base = Counter()\n        for (idx, pattern) in enumerate(pattern_base):\n            cond_pattern_base[pattern] += 1\n        return cond_pattern_base\n\n    class FrequentItemset:\n\n        def __init__(self, items):\n            self.items = items\n    freq_items_set = FrequentItemset(mine_tree(header_table, ())).items\n    freq_items_set.sort(key=lambda x: (len(x), x))\n    return freq_items_set"}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\nfrom collections import defaultdict\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    exponents = []\n    for total_degree in range(degree + 1):\n        for indices in combinations_with_replacement(range(n_features), total_degree):\n            exponents.append(tuple(sorted(indices)))\n    exponents.sort(key=lambda exp: (sum(exp), exp))\n    result = []\n    for sample in X:\n        new_row = [1.0]\n        for exp in exponents:\n            mono_val = 1.0\n            for feature_index in exp:\n                mono_val *= sample[feature_index]\n            new_row.append(mono_val)\n        result.append(new_row)\n    return result\nX = [[1, 2], [3, 4]]\ndegree = 2"}
{"task_id": 492, "completion_id": 1, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\nfrom collections import defaultdict\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    result = []\n    from itertools import product\n    degree_ranges = range(degree + 1)\n    all_exponents = []\n    for total_degree in range(degree + 1):\n        for comb in combinations_with_replacement(range(n_features), total_degree):\n            exponents = np.zeros(n_features, dtype=int)\n            for idx in comb:\n                exponents[idx] += 1\n            all_exponents.append(tuple(exponents))\n    for sample in X:\n        new_row = [1.0]\n        for exp in all_exponents:\n            term = 1.0\n            for (i, e) in enumerate(exp):\n                term *= sample[i] ** e\n            new_row.append(term)\n        result.append(new_row)\n    return result\nX = [[1, 2], [3, 4]]"}
{"task_id": 492, "completion_id": 2, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\nfrom typing import list\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    result = []\n    monomial_indices = []\n    for total_degree in range(degree + 1):\n        for indices in combinations_with_replacement(range(n_features), total_degree):\n            monomial_indices.append(indices)\n    for sample in X:\n        row = []\n        for indices in monomial_indices:\n            product = 1.0\n            for idx in indices:\n                product *= sample[idx]\n            row.append(product)\n        result.append(row)\n    return result\nX = [[1, 2]]"}
{"task_id": 492, "completion_id": 3, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\nfrom collections import defaultdict\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    n_samples = len(X)\n    n_features = len(X[0]) if n_samples > 0 else 0\n    if n_samples == 0 or n_features == 0:\n        return []\n    feature_indices = list(range(n_features))\n    all_exponent_tuples = []\n    for total_degree in range(degree + 1):\n        for r in range(total_degree + 1):\n            for combo in combinations_with_replacement(feature_indices, r):\n                counts = np.zeros(n_features, dtype=int)\n                for idx in combo:\n                    counts[idx] += 1\n                if sum(counts) <= degree:\n                    all_exponent_tuples.append(counts)\n    result = []\n    for sample in X:\n        row = []\n        for exponents in all_exponent_tuples:\n            term = 1.0\n            for i in range(n_features):\n                if exponents[i] > 0:\n                    term *= sample[i] ** exponents[i]\n            row.append(term)\n        result.append(row)\n    return result\nX = [[1, 2], [3, 4]]\ndegree = 2\nresult = polynomial_features(X, degree)"}
{"task_id": 492, "completion_id": 4, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\nfrom collections import defaultdict\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function takes a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It returns\n    a new list of lists containing, for every observation, all monomials\n    of the original features whose total degree does not exceed the\n    supplied *degree*.  The very first element in every row is 1\n    (the degree-0 term).\n\n    If *degree* is negative, the function returns -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or -1 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    n_samples = len(X)\n    n_features = len(X[0]) if n_samples > 0 else 0\n    X_arr = np.array(X, dtype=float)\n    result = []\n    for i in range(n_samples):\n        x = X_arr[i]\n        expanded = [1.0]\n        for total_degree in range(1, degree + 1):\n            for comb in combinations_with_replacement(range(n_features), total_degree):\n                mono = 1.0\n                for idx in comb:\n                    mono *= x[idx]\n                expanded.append(mono)\n        result.append(expanded)\n    return result\nX = [[1, 2], [3, 4]]\nresult = polynomial_features(X, degree=2)"}
{"task_id": 492, "completion_id": 5, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\nfrom collections import defaultdict\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    index_map = []\n    for total_deg in range(degree + 1):\n        for exponents in combinations_with_replacement(range(n_features), total_deg):\n            if sum(np.bincount(exponents, minlength=n_features)) <= degree:\n                index_map.append((total_deg, exponents))\n    index_map.sort(key=lambda x: x[1])\n    result = []\n    for sample in X:\n        row = [1.0]\n        for (_, exponents) in index_map:\n            product = 1.0\n            count = np.bincount(exponents, minlength=n_features)\n            for i in range(n_features):\n                product *= sample[i] ** count[i]\n            row.append(product)\n        result.append(row)\n    return result\nX = [[2, 3]]\ndegree = 2"}
{"task_id": 492, "completion_id": 6, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\nfrom typing import list\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function takes a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative, the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or -1 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    n_samples = len(X)\n    n_features = len(X[0]) if n_samples > 0 else 0\n\n    def generate_exponents(n_features, degree_limit):\n        for total_degree in range(degree_limit + 1):\n            for exponents in combinations_with_replacement(range(n_features), total_degree):\n                yield exponents\n    result = []\n    exponents_list = list(generate_exponents(n_features, degree))\n    for sample in X:\n        new_row = [1.0]\n        for exponents in exponents_list:\n            product = 1.0\n            for (idx, exp) in zip(exponents, [0] * n_features):\n                product *= sample[idx]\n            new_row.append(product)\n        result.append(new_row)\n    return result\nX = [[1, 2], [3, 4]]\nresult = polynomial_features(X, 2)"}
{"task_id": 492, "completion_id": 7, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\nfrom collections import defaultdict\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    n_samples = len(X)\n    n_features = len(X[0]) if n_samples > 0 else 0\n    feature_indices = list(range(n_features))\n    poly_terms = []\n    poly_terms.append(tuple([]))\n    for total_degree in range(1, degree + 1):\n        for c in combinations_with_replacement(feature_indices, total_degree):\n            poly_terms.append(tuple(sorted(c)))\n    poly_terms.sort(key=lambda terms: sum((1 for _ in terms)))\n    transformed_X = []\n    for sample in X:\n        row = []\n        for terms in poly_terms:\n            if not terms:\n                row.append(1.0)\n            else:\n                product = 1.0\n                counter = defaultdict(int)\n                for t in terms:\n                    counter[t] += 1\n                for (idx, exponent) in counter.items():\n                    product *= sample[idx] ** exponent\n                row.append(product)\n        transformed_X.append(row)\n    return transformed_X"}
{"task_id": 492, "completion_id": 8, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\nfrom collections import defaultdict\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or -1 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    n_samples = len(X)\n    n_features = len(X[0]) if n_samples > 0 else 0\n    feature_indices = list(range(n_features))\n    all_monomials = []\n    for total_degree in range(degree + 1):\n        for exponents in combinations_with_replacement(feature_indices, total_degree):\n            counter = defaultdict(int)\n            for idx in exponents:\n                counter[idx] += 1\n            exponents_list = [counter[i] for i in feature_indices]\n            all_monomials.append(exponents_list)\n    result = []\n    for i in range(n_samples):\n        x = X[i]\n        row = [1.0]\n        for exponents in all_monomials:\n            monomial = 1.0\n            for j in range(n_features):\n                monomial *= x[j] ** exponents[j]\n            row.append(monomial)\n        result.append(row)\n    return result"}
{"task_id": 492, "completion_id": 9, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\nfrom collections import Counter\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    exponents = []\n    for d in range(degree + 1):\n        for comb in combinations_with_replacement(range(n_features), d):\n            counter = Counter()\n            for idx in comb:\n                counter[idx] += 1\n            exponents.append(tuple(sorted(counter.items())))\n    poly_matrix = []\n    for sample in X:\n        row = [1.0]\n        for exp in exponents:\n            val = 1.0\n            for (idx, power) in exp:\n                val *= sample[idx] ** power\n            row.append(val)\n        poly_matrix.append(row)\n    return poly_matrix\nX = [[1, 2], [3, 4]]"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    y = np.array(y)\n    mean_y = np.mean(y)\n    squared_errors = (y - mean_y) ** 2\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 1, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    y = np.array(y)\n    mean_y = np.mean(y)\n    squared_diffs = (y - mean_y) ** 2\n    mse_value = np.mean(squared_diffs)\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 2, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    y = np.asarray(y)\n    y_mean = np.mean(y)\n    mse_value = np.mean((y - y_mean) ** 2)\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 3, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    y = np.array(y)\n    mean_y = np.mean(y)\n    return round(np.mean((y - mean_y) ** 2), 4)"}
{"task_id": 493, "completion_id": 4, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            y is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    y = np.array(y)\n    mean_y = np.mean(y)\n    squared_errors = (y - mean_y) ** 2\n    mseraw = np.mean(squared_errors)\n    return round(mseraw, 4)"}
{"task_id": 493, "completion_id": 5, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            y is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    y = np.asarray(y)\n    mean = np.mean(y)\n    squared_diffs = (y - mean) ** 2\n    msel = np.mean(squared_diffs)\n    return round(msel, 4)"}
{"task_id": 493, "completion_id": 6, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    y = np.array(y, dtype=float)\n    mean_y = np.mean(y)\n    squared_diff = (y - mean_y) ** 2\n    m = len(y)\n    mse_value = np.sum(squared_diff) / m\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 7, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    y = np.array(y)\n    mean_y = np.mean(y)\n    squared_diffs = (y - mean_y) ** 2\n    mse_value = np.mean(squared_diffs)\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 8, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    y = np.asarray(y)\n    if y.ndim != 1:\n        raise ValueError('Input must be a 1-dimensional array or list.')\n    y_mean = np.mean(y)\n    squared_diffs = (y - y_mean) ** 2\n    mse_value = np.mean(squared_diffs)\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 9, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean. If the input sequence is empty, the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            y is empty.\n    \"\"\"\n    if not y:\n        return -1\n    y = np.array(y)\n    y_mean = np.mean(y)\n    squared_diffs = (y - y_mean) ** 2\n    mse_value = np.mean(squared_diffs)\n    return round(mse_value, 4)"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.asarray(x)\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.zeros_like(x)\n    y_list = [round(val, 4) for val in y.tolist()]\n    grad_list = [round(val, 4) for val in grad.tolist()]\n    grad2_list = [round(val, 4) for val in grad2.tolist()]\n    return (y_list, grad_list, grad2_list)"}
{"task_id": 496, "completion_id": 1, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x, dtype=float)\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.zeros_like(x)\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    return (y_rounded, grad_rounded, grad2_rounded)"}
{"task_id": 496, "completion_id": 2, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x_array = np.array(x, dtype=float).ravel()\n    y = slope * x_array + intercept\n    grad = np.full_like(x_array, slope)\n    grad2 = np.zeros_like(x_array)\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    return (y_rounded, grad_rounded, grad2_rounded)"}
{"task_id": 496, "completion_id": 3, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x_arr = np.array(x, dtype=float).flatten()\n    y = slope * x_arr + intercept\n    grad = np.full_like(x_arr, slope)\n    grad2 = np.zeros_like(x_arr)\n    y = [round(val, 4) for val in y]\n    grad = [round(val, 4) for val in grad]\n    grad2 = [round(val, 4) for val in grad2]\n    return (y, grad, grad2)"}
{"task_id": 496, "completion_id": 4, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x, dtype=float).ravel()\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.zeros_like(x)\n    y_list = list(np.round(y, 4))\n    grad_list = list(np.round(grad, 4))\n    grad2_list = list(np.round(grad2, 4))\n    return (y_list, grad_list, grad2_list)"}
{"task_id": 496, "completion_id": 5, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x_arr = np.asarray(x).ravel()\n    y = slope * x_arr + intercept\n    grad = np.full_like(x_arr, slope)\n    grad2 = np.zeros_like(x_arr)\n    y_rounded = np.round(y, 4)\n    grad_rounded = np.round(grad, 4)\n    grad2_rounded = np.round(grad2, 4)\n    return (y_rounded.tolist(), grad_rounded.tolist(), grad2_rounded.tolist())"}
{"task_id": 496, "completion_id": 6, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.asarray(x, dtype=float).ravel()\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.zeros_like(x)\n    y = [round(val, 4) for val in y]\n    grad = [round(val, 4) for val in grad]\n    grad2 = [round(val, 4) for val in grad2]\n    return (y, grad, grad2)\nx = [1, 2, 3]\nslope = 2.5\nintercept = -1.0"}
{"task_id": 496, "completion_id": 7, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x, dtype=float).ravel()\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.zeros_like(x)\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    return (y_rounded, grad_rounded, grad2_rounded)"}
{"task_id": 496, "completion_id": 8, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x, dtype=float)\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.zeros_like(x)\n    y_rounded = [round(val, 4) for val in y]\n    grad_rounded = [round(val, 4) for val in grad]\n    grad2_rounded = [round(val, 4) for val in grad2]\n    return (y_rounded, grad_rounded, grad2_rounded)"}
{"task_id": 496, "completion_id": 9, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x_array = np.array(x, dtype='float64')\n    y = slope * x_array + intercept\n    grad = slope * np.ones_like(x_array)\n    grad2 = np.zeros_like(x_array)\n    y_list = np.round(y, 4).tolist()\n    grad_list = np.round(grad, 4).tolist()\n    grad2_list = np.round(grad2, 4).tolist()\n    return (y_list, grad_list, grad2_list)"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    mean = np.mean(data, axis=0)\n    std_dev = np.std(data, axis=0, ddof=0)\n    std_dev[std_dev == 0] = 1\n    standardised_data = (data - mean) / std_dev\n    covariance_matrix = np.cov(standardised_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    for i in range(sorted_eigenvectors.shape[1]):\n        max_index = np.argmax(np.abs(sorted_eigenvectors[:, i]))\n        if sorted_eigenvectors[max_index, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    if not 1 <= k <= n_features:\n        return -1\n    principal_components = sorted_eigenvectors[:, :k]\n    projected_data = np.dot(standardised_data, principal_components)\n    return projected_data.round(4).tolist()"}
{"task_id": 499, "completion_id": 1, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_features:\n        return -1\n    means = data.mean(axis=0)\n    stds = data.std(axis=0, ddof=0)\n    stds[stds == 0] = 1\n    standardized_data = (data - means) / stds\n    covariance_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(covariance_matrix)\n    indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[indices]\n    eigenvectors = eigenvectors[:, indices]\n    for i in range(eigenvectors.shape[1]):\n        max_entry = np.abs(eigenvectors[:, i]).max()\n        if eigenvectors[np.abs(eigenvectors[:, i]) == max_entry][0] < 0:\n            eigenvectors[:, i] *= -1\n    top_k_components = eigenvectors[:, :k]\n    projected_data = np.dot(standardized_data, top_k_components)\n    return np.round(projected_data, 4).tolist()"}
{"task_id": 499, "completion_id": 2, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=0)\n    stds[stds == 0] = 1\n    standardized_data = (data - means) / stds\n    covariance_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    for i in range(eigenvectors.shape[1]):\n        max_entry = np.max(np.abs(eigenvectors[:, i]))\n        max_index = np.where(np.abs(eigenvectors[:, i]) == max_entry)[0][0]\n        if eigenvectors[max_index, i] < 0:\n            eigenvectors[:, i] *= -1\n    if not 1 <= k <= n_features:\n        return -1\n    projection = np.dot(standardized_data, eigenvectors[:, :k])\n    return np.round(projection, 4).tolist()"}
{"task_id": 499, "completion_id": 3, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_features:\n        return -1\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=0)\n    stds[stds == 0] = 1.0\n    standardised_data = (data - means) / stds\n    cov_matrix = np.cov(standardised_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_indices]\n    eigenvectors = eigenvectors[:, sorted_indices]\n    for i in range(eigenvectors.shape[1]):\n        max_index = np.argmax(np.abs(eigenvectors[:, i]))\n        if eigenvectors[max_index, i] < 0:\n            eigenvectors[:, i] *= -1\n    projection = np.dot(standardised_data, eigenvectors[:, :k])\n    return np.round(projection, 4).tolist()"}
{"task_id": 499, "completion_id": 4, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_features:\n        return -1\n    standardized_data = (data - data.mean(axis=0)) / data.std(axis=0, ddof=0)\n    standardized_data[:, np.isclose(data.std(axis=0, ddof=0), 0)] = 0\n    cov_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    for i in range(eigenvectors.shape[1]):\n        col = eigenvectors[:, i]\n        max_idx = np.argmax(np.abs(col))\n        if col[max_idx] < 0:\n            eigenvectors[:, i] = -col\n    projection_matrix = eigenvectors[:, :k]\n    projected_data = np.dot(standardized_data, projection_matrix)\n    projected_data = np.round(projected_data, 4).tolist()\n    return projected_data"}
{"task_id": 499, "completion_id": 5, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_features:\n        return -1\n    mean = np.mean(data, axis=0)\n    std_dev = np.std(data, axis=0, ddof=0)\n    std_dev[std_dev == 0] = 1\n    standardized_data = (data - mean) / std_dev\n    cov_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    for i in range(eigenvectors.shape[1]):\n        max_index = np.argmax(np.abs(eigenvectors[:, i]))\n        if eigenvectors[max_index, i] < 0:\n            eigenvectors[:, i] *= -1\n    principal_components = standardized_data @ eigenvectors[:, :k]\n    return np.round(principal_components, 4).tolist()"}
{"task_id": 499, "completion_id": 6, "solution": "import numpy as np\nimport numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_features:\n        return -1\n    means = data.mean(axis=0)\n    stds = data.std(axis=0, ddof=0)\n    stds[stds == 0] = 1\n    standardized_data = (data - means) / stds\n    cov_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    max_abs_indices = np.argmax(np.abs(sorted_eigenvectors), axis=0)\n    for i in range(sorted_eigenvectors.shape[1]):\n        if sorted_eigenvectors[max_abs_indices[i], i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projected_data = np.dot(standardized_data, projection_matrix)\n    return np.round(projected_data, 4).tolist()\ndata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"}
{"task_id": 499, "completion_id": 7, "solution": "import numpy as np\nimport numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_features:\n        return -1\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=0)\n    stds[stds == 0] = 1\n    standardised_data = (data - means) / stds\n    cov_matrix = np.cov(standardised_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    for i in range(sorted_eigenvectors.shape[1]):\n        max_idx = np.argmax(np.abs(sorted_eigenvectors[:, i]))\n        if sorted_eigenvectors[max_idx, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    top_k_components = sorted_eigenvectors[:, :k]\n    projected_data = np.dot(standardised_data, top_k_components)\n    return np.round(projected_data, 4).tolist()\ndata = np.array([[3, 1], [2, 4], [3, 5], [5, 9], [7, 12]])\nk = 1"}
{"task_id": 499, "completion_id": 8, "solution": "import numpy as np\nimport numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_features:\n        return -1\n    standardized_data = np.zeros_like(data)\n    for i in range(n_features):\n        col = data[:, i]\n        mean = np.mean(col)\n        std = np.std(col, ddof=0)\n        standardized_data[:, i] = (col - mean) / std if std != 0 else np.zeros_like(col)\n    cov_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    for i in range(eigenvectors.shape[1]):\n        max_index = np.argmax(np.abs(eigenvectors[:, i]))\n        if eigenvectors[max_index, i] < 0:\n            eigenvectors[:, i] *= -1\n    component_matrix = eigenvectors[:, :k]\n    projected_data = standardized_data @ component_matrix\n    return np.round(projected_data, 4).tolist()\ndata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])"}
{"task_id": 499, "completion_id": 9, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_features:\n        return -1\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=0)\n    stds_safe = np.where(stds == 0, 1, stds)\n    data_standardized = (data - means) / stds_safe\n    cov_matrix = np.cov(data_standardized, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_indices]\n    eigenvectors = eigenvectors[:, sorted_indices]\n    for i in range(eigenvectors.shape[1]):\n        eigenvector = eigenvectors[:, i]\n        max_index = np.argmax(np.abs(eigenvector))\n        if eigenvector[max_index] < 0:\n            eigenvectors[:, i] *= -1\n    components = eigenvectors[:, :k]\n    projected_data = np.dot(data_standardized, components)\n    return np.round(projected_data, 4).tolist()"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    n_samples = len(y_train)\n    y_train = np.array(y_train)\n    F = np.full(n_samples, y_train.mean())\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        best_error = float('inf')\n        best_stump = None\n        for feature_idx in range(len(X_train[0])):\n            feature_values = np.array([x[feature_idx] for x in X_train])\n            for threshold in np.unique(feature_values):\n                left_mask = feature_values <= threshold\n                right_mask = ~left_mask\n                if not np.any(left_mask) or not np.any(right_mask):\n                    continue\n                left_pred = np.mean(residuals[left_mask])\n                right_pred = np.mean(residuals[right_mask])\n\n                def stump(x, f_idx=feature_idx, th=threshold, l=left_pred, r=right_pred):\n                    return l if x[f_idx] <= th else r\n                preds = np.array([stump(x) for x in X_train])\n                error = np.sum((residuals - preds) ** 2)\n                if error < best_error:\n                    best_error = error\n                    best_stump = stump\n        if best_stump:\n            preds = np.array([best_stump(x) for x in X_train])\n            F += learning_rate * preds\n    scores = np.zeros(len(X_test))\n    for x in X_test:\n        scores += y_train.mean()\n        for _ in range(n_estimators):\n            best_error = float('inf')\n            best_pred = 0\n            for feature_idx in range(len(x)):\n                feature_values = np.array([data[feature_idx] for data in X_train])\n                for threshold in np.unique(feature_values):\n                    left_mask = feature_values <= threshold\n                    right_mask = ~left_mask\n                    if not np.any(left_mask) or not np.any(right_mask):\n                        continue\n                    left_pred = np.mean(residuals[left_mask])\n                    right_pred = np.mean(residuals[right_mask])\n                    current_pred = left_pred if x[feature_idx] <= threshold else right_pred\n                    current_error = (0 - current_pred) ** 2\n                    if current_error < best_error:\n                        best_error = current_error\n                        best_pred = learning_rate * current_pred\n            scores[scores.index(0)] += best_pred\n    return [1 if s > 0.5 else 0 for s in scores]"}
{"task_id": 500, "completion_id": 1, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    (n_samples, n_features) = X_train.shape\n    n_test_samples = X_test.shape[0]\n    F = np.full(n_samples, np.mean(y_train), dtype=np.float64)\n    test_scores = np.full(n_test_samples, np.mean(y_train), dtype=np.float64)\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        best_stump = None\n        min_error = float('inf')\n        for feature_idx in range(n_features):\n            values = X_train[:, feature_idx]\n            thresholds = np.unique(values)\n            thresholds.sort()\n            thresholds = thresholds[:-1]\n            for threshold in thresholds:\n                left_mask = values <= threshold\n                right_mask = values > threshold\n                left_pred = np.mean(residuals[left_mask])\n                right_pred = np.mean(residuals[right_mask])\n                predictions = np.where(values <= threshold, left_pred, right_pred)\n                error = np.sum((residuals - predictions) ** 2)\n                if error < min_error:\n                    min_error = error\n                    best_stump = {'feature': feature_idx, 'threshold': threshold, 'value_left': left_pred, 'value_right': right_pred}\n        feature_idx = best_stump['feature']\n        threshold = best_stump['threshold']\n        value_left = best_stump['value_left']\n        value_right = best_stump['value_right']\n        F += learning_rate * np.where(X_train[:, feature_idx] <= threshold, value_left, value_right)\n        test_scores += learning_rate * np.where(X_test[:, feature_idx] <= threshold, value_left, value_right)\n    predictions = (test_scores >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 500, "completion_id": 2, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    F = np.array(y_train, dtype=float).mean()\n    y_train = np.array(y_train)\n    X_train = np.array(X_train)\n    n_samples = len(X_train)\n    F_all_samples = np.full(n_samples, F)\n    for _ in range(n_estimators):\n        residuals = y_train - F_all_samples\n        best_stump = None\n        best_error = float('inf')\n        for feature_idx in range(X_train.shape[1]):\n            feature_values = X_train[:, feature_idx]\n            thresholds = np.unique(feature_values)\n            for threshold in thresholds:\n                left_mask = feature_values <= threshold\n                right_mask = ~left_mask\n                left_value = np.mean(residuals[left_mask]) if np.sum(left_mask) > 0 else 0\n                right_value = np.mean(residuals[right_mask]) if np.sum(right_mask) > 0 else 0\n                predicted_residuals = np.where(left_mask, left_value, right_value)\n                se = np.sum((residuals - predicted_residuals) ** 2)\n                if se < best_error:\n                    best_error = se\n                    best_stump = {'feature_idx': feature_idx, 'threshold': threshold, 'left_value': left_value, 'right_value': right_value}\n        if best_stump is not None:\n            predicted_residuals = np.where(X_train[:, best_stump['feature_idx']] <= best_stump['threshold'], best_stump['left_value'], best_stump['right_value'])\n            F_all_samples += learning_rate * predicted_residuals\n    X_test = np.array(X_test)\n    test_preds = np.full(len(X_test), F)\n    for _ in range(n_estimators):\n        residuals = y_train - F_all_samples\n        best_stump = None\n    return [int(pred >= 0.5) for pred in test_preds]"}
{"task_id": 500, "completion_id": 3, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"\n    Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    F = np.full_like(y_train, np.mean(y_train))\n    F = F.astype(float)\n    (n_samples, n_features) = X_train.shape\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        best_gain = -np.inf\n        best_stump = None\n        for j in range(n_features):\n            feature_values = X_train[:, j]\n            unique_values = np.unique(feature_values)\n            for threshold in unique_values:\n                left_idx = feature_values <= threshold\n                right_idx = ~left_idx\n                left_val = np.mean(residuals[left_idx]) if np.sum(left_idx) > 0 else 0\n                right_val = np.mean(residuals[right_idx]) if np.sum(right_idx) > 0 else 0\n                gain = -np.sum((residuals[left_idx] - left_val) ** 2) - np.sum((residuals[right_idx] - right_val) ** 2)\n                if gain > best_gain:\n                    best_gain = gain\n                    best_stump = (j, threshold, left_val, right_val)\n        (feature_index, threshold, value_left, value_right) = best_stump\n        leaves_left = X_train[:, feature_index] <= threshold\n        adjustments = np.where(leaves_left, value_left, value_right)\n        F += learning_rate * adjustments\n    F_test = np.full(len(X_test), np.mean(y_train))\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        best_gain = -np.inf\n        best_stump = None\n        for j in range(n_features):\n            feature_values = X_train[:, j]\n            unique_values = np.unique(feature_values)\n            for threshold in unique_values:\n                left_idx = feature_values <= threshold\n                right_idx = ~left_idx\n                left_val = np.mean(residuals[left_idx]) if np.sum(left_idx) > 0 else 0\n                right_val = np.mean(residuals[right_idx]) if np.sum(right_idx) > 0 else 0\n                gain = -np.sum((residuals[left_idx] - left_val) ** 2) - np.sum((residuals[right_idx] - right_val) ** 2)\n                if gain > best_gain:\n                    best_gain = gain\n                    best_stump = (j, threshold, left_val, right_val)\n        (feature_index, threshold, value_left, value_right) = best_stump\n        leaves_left_test = X_test[:, feature_index] <= threshold\n        adjustments_test = np.where(leaves_left_test, value_left, value_right)\n        F_test += learning_rate * adjustments_test\n    predictions = (F_test >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 500, "completion_id": 4, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    y_train = np.array(y_train)\n    F = np.full(len(y_train), np.mean(y_train), dtype=float)\n    X_train = np.array(X_train)\n    num_features = X_train.shape[1]\n    stumps = []\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        best_error = float('inf')\n        best_stump = None\n        for feature_index in range(num_features):\n            indices = np.argsort(X_train[:, feature_index])\n            X_sorted = X_train[indices, feature_index]\n            y_sorted = residuals[indices]\n            for i in range(1, len(X_sorted)):\n                threshold = (X_sorted[i - 1] + X_sorted[i]) / 2\n                left_pred = np.mean(y_sorted[:i])\n                right_pred = np.mean(y_sorted[i:])\n                pred = np.array([left_pred if x <= threshold else right_pred for x in X_train[:, feature_index]])\n                total_error = np.sum((residuals - pred) ** 2)\n                if total_error < best_error:\n                    best_error = total_error\n                    best_stump = {'feature': feature_index, 'threshold': threshold, 'left_value': left_pred, 'right_value': right_pred}\n        pred = np.array([best_stump['left_value'] if x[best_stump['feature']] <= best_stump['threshold'] else best_stump['right_value'] for x in X_train])\n        F += learning_rate * pred\n        stumps.append(best_stump)\n    X_test = np.array(X_test)\n    y_pred_scores = np.zeros(len(X_test))\n    for stump in stumps:\n        y_pred_scores += learning_rate * np.array([stump['left_value'] if x[stump['feature']] <= stump['threshold'] else stump['right_value'] for x in X_test])\n    y_pred_scores += np.mean(y_train)\n    y_pred = (y_pred_scores >= 0.5).astype(int)\n    return y_pred.tolist()"}
{"task_id": 500, "completion_id": 5, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    (n_samples, n_features) = X_train.shape\n    F = np.mean(y_train)\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        best_gain = -np.inf\n        best_stump = None\n        for feature_idx in range(n_features):\n            feature_values = X_train[:, feature_idx]\n            unique_thresholds = np.unique(feature_values[:-1] + np.diff(np.sort(feature_values)) / 2)\n            for threshold in unique_thresholdzos:\n                left_mask = feature_values <= threshold\n                right_mask = ~left_mask\n                left_pred = np.mean(residuals[left_mask])\n                right_pred = np.mean(residuals[right_mask])\n\n                def stump(x):\n                    return [left_pred if x[i, feature_idx] <= threshold else right_pred for i in range(x.shape[0])]\n                total_error = np.sum(residuals ** 2)\n                left_error = np.sum((residuals[left_mask] - left_pred) ** 2)\n                right_error = np.sum((residuals[right_mask] - right_pred) ** 2)\n                gain = total_error - (left_error + right_error)\n                if gain > best_gain:\n                    best_gain = gain\n                    best_stump = stump\n        F += learning_rate * np.array(best_stump(X_train))\n    X_test = np.array(X_test)\n    test_scores = F + learning_rate * np.array(best_stump(X_test))\n    predicted_labels = (test_scores > 0.5).astype(int).tolist()\n    return predicted_labels"}
{"task_id": 500, "completion_id": 6, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    n_train = len(X_train)\n    n_features = len(X_train[0])\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    F = np.full(n_train, np.mean(y_train))\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        h_values = np.zeros_like(residuals)\n        best_error = float('inf')\n        best_stump = (0, 0, 0)\n        for feature_idx in range(n_features):\n            feature = X_train[:, feature_idx]\n            unique_vals = np.unique(feature)\n            thresholds = (unique_vals[:-1] + unique_vals[1:]) / 2\n            for threshold in thresholds:\n                left_mask = feature <= threshold\n                left_value = np.mean(residuals[left_mask])\n                right_value = np.mean(residuals[~left_mask])\n                prediction = np.where(left_mask, left_value, right_value)\n                error = np.sum((residuals - prediction) ** 2)\n                if error < best_error:\n                    best_error = error\n                    best_stump = (feature_idx, threshold, left_value - right_value)\n        (feature_idx, threshold, leaf_value) = best_stump\n        feature = X_train[:, feature_idx]\n        h = np.where(feature <= threshold, leaf_value, 0)\n        F += learning_rate * h\n    X_test = np.array(X_test)\n    test_preds = np.zeros(len(X_test))\n    for test_sample in X_test:\n        score = np.mean(y_train)\n        for _ in range(n_estimators):\n            (feature_idx, threshold, leaf_value) = best_stump\n            if test_sample[feature_idx] <= threshold:\n                score += learning_rate * leaf_value\n        test_preds = np.append(test_preds, score)\n    test_preds = np.array(test_preds[1:])\n    predicted_labels = (test_preds > 0.5).astype(int)\n    return predicted_labels.tolist()"}
{"task_id": 500, "completion_id": 7, "solution": "import numpy as np\nfrom typing import List\ndef gradient_boosting_classifier(X_train: List[List[float]], y_train: List[int], X_test: List[List[float]], n_estimators: int=20, learning_rate: float=0.1) -> List[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    (n_samples, n_features) = (len(X_train), len(X_train[0]))\n    y_train = np.array(y_train)\n    F = np.full(n_samples, np.mean(y_train))\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        h_best = None\n        loss_best = float('inf')\n        for feature_idx in range(n_features):\n            feature_values = np.array([x[feature_idx] for x in X_train])\n            unique_values = np.unique(feature_values)\n            for threshold in unique_values:\n                for split in ['<=', '>']:\n                    if split == '<=':\n                        left_idx = feature_values <= threshold\n                    else:\n                        left_idx = feature_values > threshold\n                    y_mean_left = np.mean(residuals[left_idx])\n                    y_mean_right = np.mean(residuals[~left_idx])\n                    pred = np.where(left_idx, y_mean_left, y_mean_right).flatten()\n                    loss = np.sum((residuals - pred) ** 2)\n                    if loss < loss_best:\n                        h_best = lambda x: y_mean_left if x[feature_idx] <= threshold else y_mean_right\n                        h_best.feature_idx = feature_idx\n                        h_best.threshold = threshold\n                        h_best.left_value = y_mean_left\n                        h_best.right_value = y_mean_right\n                        loss_best = loss\n        for (i, x) in enumerate(X_train):\n            if x[h_best.feature_idx] <= h_best.threshold:\n                F[i] += learning_rate * h_best.left_value\n            else:\n                F[i] += learning_rate * h_best.right_value\n    predictions = []\n    for x in X_test:\n        score = 0.0\n        for m in range(n_estimators):\n            idx = m % n_estimators\n            feature_idx = h_best.feature_idx\n            threshold = h_best.threshold\n            if x[feature_idx] <= threshold:\n                score += learning_rate * h_best.left_value\n            else:\n                score += learning_rate * h_best.right_value\n        final_score = score + np.mean(y_train)\n        predictions.append(1 if final_score >= 0.5 else 0)\n    return predictions"}
{"task_id": 500, "completion_id": 8, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    (n_samples, n_features) = X_train.shape\n    F = np.full(n_samples, np.mean(y_train))\n    stumps = []\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        best_error = float('inf')\n        best_stump = None\n        for feature_idx in range(n_features):\n            feature_values = X_train[:, feature_idx]\n            unique_values = np.unique(feature_values)\n            for i in range(len(unique_values) - 1):\n                threshold = (unique_values[i] + unique_values[i + 1]) / 2\n                left_mask = feature_values <= threshold\n                right_mask = feature_values > threshold\n                left_val = np.mean(residuals[left_mask])\n                right_val = np.mean(residuals[right_mask])\n                error = np.sum((residuals[left_mask] - left_val) ** 2) + np.sum((residuals[right_mask] - right_val) ** 2)\n                if error < best_error:\n                    best_error = error\n                    best_stump = (feature_idx, threshold, left_val, right_val)\n        F += learning_rate * apply_stump(X_train, *best_stump)\n        stumps.append(best_stump)\n    F_test = np.full(len(X_test), np.mean(y_train))\n    for stump in stumps:\n        F_test += learning_rate * apply_stump(X_test, *stump)\n    predictions = (F_test >= 0.5).astype(int)\n    return predictions.tolist()\ndef apply_stump(X, feature_idx, threshold, left_val, right_val):\n    \"\"\"Apply a decision stump to a dataset.\"\"\"\n    feature_values = X[:, feature_idx]\n    left_mask = feature_values <= threshold\n    right_mask = feature_values > threshold\n    prediction = np.zeros(len(X))\n    prediction[left_mask] = left_val\n    prediction[right_mask] = right_val\n    return prediction"}
{"task_id": 500, "completion_id": 9, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    (n_samples, n_features) = X_train.shape\n    F = np.array([np.mean(y_train)] * n_samples)\n    stumps = []\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        best_gain = -np.inf\n        best_split = None\n        for feature_idx in range(n_features):\n            feature_values = X_train[:, feature_idx]\n            unique_values = np.unique(feature_values)\n            for threshold in unique_values:\n                left_mask = feature_values <= threshold\n                right_mask = ~left_mask\n                left_value = np.mean(residuals[left_mask]) if np.any(left_mask) else 0\n                right_value = np.mean(residuals[right_mask]) if np.any(right_mask) else 0\n                predicted_values = np.where(feature_values <= threshold, left_value, right_value)\n                gain = -np.sum((residuals - predicted_values) ** 2)\n                if gain > best_gain:\n                    best_gain = gain\n                    best_split = {'feature_idx': feature_idx, 'threshold': threshold, 'left_value': left_value * learning_rate, 'right_value': right_value * learning_rate}\n        stumps.append(best_split)\n        for sample_idx in range(n_samples):\n            feature_idx = best_split['feature_idx']\n            threshold = best_split['threshold']\n            if X_train[sample_idx, feature_idx] <= threshold:\n                F[sample_idx] += best_split['left_value']\n            else:\n                F[sample_idx] += best_split['right_value']\n    n_test_samples = len(X_test)\n    F_test = np.array([np.mean(y_train)] * n_test_samples)\n    for stump in stumps:\n        feature_idx = stump['feature_idx']\n        threshold = stump['threshold']\n        left_value = stump['left_value']\n        right_value = stump['right_value']\n        for sample_idx in range(n_test_samples):\n            if X_test[sample_idx, feature_idx] <= threshold:\n                F_test[sample_idx] += left_value\n            else:\n                F_test[sample_idx] += right_value\n    predictions = (F_test >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 505, "completion_id": 0, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n    (m, n_v) = X.shape\n    n_h = hbias.shape[0]\n    h0_prob = sigmoid(np.dot(X, W) + hbias)\n    pos_grad = np.dot(X.T, h0_prob)\n    v_prob = X.copy()\n    for _ in range(k):\n        h_prob = sigmoid(np.dot(v_prob, W) + hbias)\n        v_prob = sigmoid(np.dot(h_prob, W.T) + vbias)\n    neg_grad = np.dot(v_prob.T, h_prob)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    return [[round(val, 4) for val in row] for row in W_new.tolist()]\ndef sigmoid(x: np.ndarray) -> np.ndarray:\n    \"\"\"Compute the sigmoid function, with numerical stability.\"\"\"\n    return 1 / (1 + np.exp(-np.clip(x, -500, 500)))"}
{"task_id": 505, "completion_id": 1, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n    m = X.shape[0]\n    n_v = W.shape[0]\n    n_h = W.shape[1]\n    pos_hidden_act = np.dot(X, W) + hbias\n    pos_hidden_prob = 1.0 / (1.0 + np.exp(-pos_hidden_act))\n    neg_visible = X.copy()\n    neg_hidden_prob = pos_hidden_prob.copy()\n    for _ in range(k):\n        neg_visible_act = np.dot(neg_hidden_prob, W.T) + vbias\n        neg_visible_prob = 1.0 / (1.0 + np.exp(-neg_visible_act))\n        neg_visible = neg_visible_prob\n        neg_hidden_act = np.dot(neg_visible, W) + hbias\n        neg_hidden_prob = 1.0 / (1.0 + np.exp(-neg_hidden_act))\n    pos_grad = np.dot(X.T, pos_hidden_prob)\n    neg_grad = np.dot(neg_visible.T, neg_hidden_prob)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    return [list(map(lambda x: round(x, 4), row)) for row in W_new]"}
{"task_id": 505, "completion_id": 2, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    m = X.shape[0]\n    if m == 0:\n        return []\n    h0_prob = sigmoid(np.dot(X, W) + hbias)\n    v_prob = X.copy()\n    for _ in range(k):\n        h_prob = sigmoid(np.dot(v_prob, W) + hbias)\n        v_prob = sigmoid(np.dot(h_prob, W.T) + vbias)\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_prob.T, h_prob)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    W_list = [[round(float(w_ij), 4) for w_ij in row] for row in W_new]\n    return W_list\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))"}
{"task_id": 505, "completion_id": 3, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\"\"\"\n    if X.shape[0] == 0:\n        return []\n    (m, n_v) = X.shape\n    (_, n_h) = W.shape\n    h0_in = np.dot(X, W) + hbias\n    h0_prob = 1 / (1 + np.exp(-h0_in))\n    v_prob = X.copy().astype(np.float64)\n    for step in range(k):\n        h_in = np.dot(v_prob, W) + hbias\n        h_prob = 1 / (1 + np.exp(-h_in))\n        v_in = np.dot(h_prob, W.T) + vbias\n        v_prob = 1 / (1 + np.exp(-v_in))\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_prob.T, h_prob)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    return [[round(weight, 4) for weight in row] for row in W_new.tolist()]"}
{"task_id": 505, "completion_id": 4, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n    m = X.shape[0]\n    (n_v, n_h) = W.shape\n    pos_hid_prob = sigmoid(np.dot(X, W) + hbias)\n    v = X.copy()\n    for _ in range(k):\n        h_prob = sigmoid(np.dot(v, W) + hbias)\n        v_prob = sigmoid(np.dot(h_prob, W.T) + vbias)\n        v = v_prob\n    pos_grad = np.dot(X.T, pos_hid_prob)\n    neg_grad = np.dot(v.T, h_prob)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    W_list = [[round(wij, 4) for wij in row] for row in W_new.tolist()]\n    return W_list\ndef sigmoid(x):\n    return 1.0 / (1.0 + np.exp(-x))"}
{"task_id": 505, "completion_id": 5, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units.\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    m = X.shape[0]\n    if m == 0:\n        return []\n    (n_v, n_h) = W.shape\n\n    def sigmoid(x):\n        return 1 / (1 + np.exp(-x))\n    pos_hidden_probs = sigmoid(X @ W + hbias)\n    v0 = X\n    for _ in range(k):\n        h_probs = sigmoid(v0 @ W + hbias)\n        v_probs = sigmoid(h_probs @ W.T + vbias)\n        v0 = v_probs\n    h_probs_k = sigmoid(v0 @ W + hbias)\n    pos_grad = X.T @ pos_hidden_probs\n    neg_grad = v0.T @ h_probs_k\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    return [[round(val, 4) for val in row] for row in W_new.tolist()]\nX = np.array([[1, 0, 1], [0, 1, 1]])\nW = np.array([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]])\nhbias = np.array([0.1, 0.2])\nvbias = np.array([0.1, 0.2, 0.3])\nlearning_rate = 0.01\nk = 1"}
{"task_id": 505, "completion_id": 6, "solution": "import numpy as np\nimport numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    m = X.shape[0]\n    if m == 0:\n        return []\n    (n_v, n_h) = W.shape\n    pos_hidden_probs = sigmoid(np.dot(X, W) + hbias)\n    pos_grad = np.dot(X.T, pos_hidden_probs)\n    v_prob = X.copy()\n    for _ in range(k):\n        h_prob = sigmoid(np.dot(v_prob, W) + hbias)\n        v_prob = sigmoid(np.dot(h_prob, W.T) + vbias)\n    neg_grad = np.dot(v_prob.T, h_prob)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    return [[round(w, 4) for w in row] for row in W_new.tolist()]\ndef sigmoid(x):\n    \"\"\"Sigmoid activation function (safe for large inputs).\"\"\"\n    return 1.0 / (1.0 + np.exp(-np.clip(x, -500, 500)))\nX = np.array([[1, 0, 1], [0, 1, 0]])\nW = np.array([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]])\nhbias = np.array([0.1, 0.1])\nvbias = np.array([0.0, 0.0, 0.0])\nlearning_rate = 0.1\nk = 1"}
{"task_id": 505, "completion_id": 7, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n    (batch_size, n_visible) = X.shape\n    n_hidden = hbias.shape[0]\n    h0_prob = sigmoid(np.dot(X, W) + hbias)\n    v = X\n    for step in range(k):\n        h_prob = sigmoid(np.dot(v, W) + hbias)\n        v = sigmoid(np.dot(h_prob, W.T) + vbias)\n    h_k_prob = sigmoid(np.dot(v, W) + hbias)\n    v_k_prob = v\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / batch_size\n    return [[round(weight, 4) for weight in row] for row in W_new.tolist()]\ndef sigmoid(x):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-x))"}
{"task_id": 505, "completion_id": 8, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n    m = X.shape[0]\n    (n_v, n_h) = W.shape\n    hidden_act = np.dot(X, W) + hbias\n    h0_prob = 1 / (1 + np.exp(-hidden_act))\n    v_prob = X.copy()\n    for _ in range(k):\n        hidden_act = np.dot(v_prob, W) + hbias\n        h_prob = 1 / (1 + np.exp(-hidden_act))\n        visible_act = np.dot(h_prob, W.T) + vbias\n        v_prob = 1 / (1 + np.exp(-visible_act))\n    hidden_act = np.dot(v_prob, W) + hbias\n    h_k_prob = 1 / (1 + np.exp(-hidden_act))\n    pos_grad = X.T @ h0_prob\n    neg_grad = v_prob.T @ h_k_prob\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    W_rounded = np.round(W_new, 4).tolist()\n    return W_rounded"}
{"task_id": 505, "completion_id": 9, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n    (batch_size, n_visible) = X.shape\n    n_hidden = hbias.shape[0]\n    h0_prob = sigmoid(np.dot(X, W) + hbias)\n    v_prob = X.copy()\n    for _ in range(k):\n        h_prob = sigmoid(np.dot(v_prob, W) + hbias)\n        v_prob = sigmoid(np.dot(h_prob, W.T) + vbias)\n    hk_prob = sigmoid(np.dot(v_prob, W) + hbias)\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_prob.T, hk_prob)\n    W_update = W + learning_rate * (pos_grad - neg_grad) / batch_size\n    return [[round(w, 4) for w in row] for row in W_update.tolist()]\ndef sigmoid(x):\n    \"\"\"Computes the sigmoid function.\"\"\"\n    return 1 / (1 + np.exp(-x))"}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Union, List\ndef chebyshev(x: Union[List[float], np.ndarray], y: Union[List[float], np.ndarray]) -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : Union[List[float], np.ndarray]\n        First input vector.\n    y : Union[List[float], np.ndarray]\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n    if x_arr.ndim != 1 or y_arr.ndim != 1:\n        raise ValueError('Both inputs must be one-dimensional.')\n    if len(x_arr) != len(y_arr):\n        return -1\n    distance = np.max(np.abs(x_arr - y_arr))\n    return round(float(distance), 4)\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 1, "solution": "import numpy as np\nfrom typing import Union, List\ndef chebyshev(x: Union[List[float], np.ndarray], y: Union[List[float], np.ndarray]) -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if x.ndim != 1 or y.ndim != 1:\n        return -1\n    if x.shape[0] != y.shape[0]:\n        return -1\n    distance = np.max(np.abs(x - y))\n    return round(float(distance), 4)\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 2, "solution": "import numpy as np\nfrom typing import Union\ndef chebyshev(x: Union[list[float], np.ndarray], y: Union[list[float], np.ndarray]) -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if x.ndim != 1 or y.ndim != 1:\n        raise ValueError('Both inputs must be one-dimensional vectors.')\n    if x.shape[0] != y.shape[0]:\n        return -1\n    distance = np.max(np.abs(x - y))\n    return float(np.round(distance, 4))\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 3, "solution": "import numpy as np\nfrom typing import Union, List\ndef chebyshev(x: Union[List[float], np.ndarray], y: Union[List[float], np.ndarray]) -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.asarray(x)\n    y = np.asarray(y)\n    if x.ndim != 1 or y.ndim != 1:\n        raise ValueError('Input vectors must be 1-dimensional.')\n    if len(x) != len(y):\n        return -1.0\n    distance = np.max(np.abs(x - y))\n    return round(float(distance), 4)"}
{"task_id": 509, "completion_id": 4, "solution": "import numpy as np\ndef chebyshev(x: list[float] | np.ndarray, y: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x_arr = np.array(x, dtype=float)\n    y_arr = np.array(y, dtype=float)\n    if x_arr.ndim != 1 or y_arr.ndim != 1:\n        return -1\n    if x_arr.shape[0] != y_arr.shape[0]:\n        return -1\n    distance = np.max(np.abs(x_arr - y_arr))\n    return float(round(distance, 4))"}
{"task_id": 509, "completion_id": 5, "solution": "import numpy as np\nfrom typing import List, Union\ndef chebyshev(x: Union[List[float], 'np.ndarray'], y: Union[List[float], 'np.ndarray']) -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x_array = np.array(x, dtype=float)\n    y_array = np.array(y, dtype=float)\n    if not (x_array.ndim == 1 and y_array.ndim == 1 and (x_array.shape[0] == y_array.shape[0])):\n        return -1.0\n    differences = np.abs(x_array - y_array)\n    max_diff = np.max(differences)\n    return float(np.round(max_diff, 4))"}
{"task_id": 509, "completion_id": 6, "solution": "import numpy as np\nfrom typing import Union\ndef chebyshev(x: Union[list[float], np.ndarray], y: Union[list[float], np.ndarray]) -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n    if x_arr.ndim != 1 or y_arr.ndim != 1:\n        raise ValueError('Only 1-dimensional vectors are allowed.')\n    if len(x_arr) != len(y_arr):\n        return -1\n    diff = np.abs(x_arr - y_arr)\n    distance = np.max(diff)\n    return round(float(distance), 4)"}
{"task_id": 509, "completion_id": 7, "solution": "import numpy as np\nfrom typing import list, float, Union\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if x.ndim != 1 or y.ndim != 1:\n        raise ValueError('Input vectors must be one-dimensional.')\n    if len(x) != len(y):\n        return -1.0\n    distance = np.max(np.abs(x - y))\n    return float(np.round(distance, 4))\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 8, "solution": "def chebyshev(x: list[float] | np.ndarray, y: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.array(x, dtype=float)\n    y = np.array(y, dtype=float)\n    if x.ndim != 1 or y.ndim != 1 or len(x) != len(y):\n        return -1\n    abs_diff = np.abs(x - y)\n    max_diff = np.max(abs_diff)\n    return float(np.round(max_diff, 4))\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 9, "solution": "import numpy as np\nfrom typing import List, Union\ndef chebyshev(x: Union[List[float], np.ndarray], y: Union[List[float], np.ndarray]) -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x_arr = np.array(x) if not isinstance(x, np.ndarray) else x\n    y_arr = np.array(y) if not isinstance(y, np.ndarray) else y\n    if x_arr.ndim != 1 or y_arr.ndim != 1 or x_arr.size != y_arr.size:\n        return -1.0\n    distance = np.max(np.abs(x_arr - y_arr))\n    return float(np.round(distance, 4))\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    recon_loss = -np.mean(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    kl_div = -0.5 * np.mean(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var))\n    total_loss = recon_loss + kl_div\n    return float(np.round(total_loss, 6))\ny = np.array([[1, 0, 1], [0, 1, 1]])\ny_pred = np.array([[0.9, 0.1, 0.85], [0.15, 0.9, 0.95]])\nt_mean = np.array([[0.1, -0.2], [0.05, 0.3]])\nt_log_var = np.array([[-0.5, -1.0], [-0.8, -1.2]])"}
{"task_id": 510, "completion_id": 1, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    reconstruction_loss = -np.mean(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    kl_divergence = -0.5 * np.mean(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var))\n    total_loss = reconstruction_loss + kl_divergence\n    return round(total_loss, 6)"}
{"task_id": 510, "completion_id": 2, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, eps, 1 - eps)\n    reconstruction_loss = -np.mean(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    kl_divergence = -0.5 * np.mean(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var))\n    total_loss = reconstruction_loss + kl_divergence\n    return round(total_loss, 6)\ny = np.array([[1, 0, 1], [0, 1, 0]])\ny_pred = np.array([[0.9, 0.1, 0.95], [0.1, 0.95, 0.1]])\nt_mean = np.array([[1.0, -0.5], [0.5, -1.0]])\nt_log_var = np.array([[0.1, -0.3], [0.2, -0.4]])"}
{"task_id": 510, "completion_id": 3, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    assert y.shape == y_pred.shape\n    assert t_mean.shape[0] == y.shape[0], 'Batch sizes should be consistent'\n    assert t_log_var.shape == t_mean.shape\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1.0 - epsilon)\n    reconstruction_loss = -np.mean(y * np.log(y_pred_clipped) + (1.0 - y) * np.log(1.0 - y_pred_clipped))\n    kl_divergence = -0.5 * np.mean(1.0 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    total_loss = reconstruction_loss + kl_divergence\n    return round(total_loss, 6)"}
{"task_id": 510, "completion_id": 4, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, eps, 1 - eps)\n    reconstruction_loss = -np.mean(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    sigma_sq = np.exp(t_log_var)\n    kl_divergence = 0.5 * np.mean(1 + t_log_var - t_mean ** 2 - sigma_sq)\n    kl_divergence = -kl_divergence\n    total_loss = reconstruction_loss + kl_divergence\n    return round(total_loss, 6)"}
{"task_id": 510, "completion_id": 5, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    reconstruction_loss = -np.mean(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    kl_divergence = -0.5 * np.mean(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var))\n    total_loss = reconstruction_loss + kl_divergence\n    return round(total_loss, 6)"}
{"task_id": 510, "completion_id": 6, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    reconstruction_loss = -np.mean(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    sigma_sq = np.exp(t_log_var)\n    kl_divergence = -0.5 * np.mean(1 + t_log_var - t_mean ** 2 - sigma_sq)\n    total_loss = reconstruction_loss + kl_divergence\n    return round(total_loss, 6)"}
{"task_id": 510, "completion_id": 7, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    reconstruction_loss = -np.mean(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    kl_divergence = -0.5 * np.mean(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var))\n    total_loss = reconstruction_loss + kl_divergence\n    return round(total_loss, 6)"}
{"task_id": 510, "completion_id": 8, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    reconstruction_loss = -np.mean(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    kl_divergence = -0.5 * np.mean(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var))\n    total_loss = reconstruction_loss + kl_divergence\n    return round(total_loss, 6)\ny = np.array([[1, 0, 0], [0, 1, 0]])\ny_pred = np.array([[0.9, 0.1, 0.1], [0.1, 0.9, 0.1]])\nt_mean = np.array([[1.0, -0.5], [0.5, -1.0]])\nt_log_var = np.array([[0.0, 0.5], [0.2, 0.3]])"}
{"task_id": 510, "completion_id": 9, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    reconstruction_loss = -np.mean(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    sigma_squared = np.exp(t_log_var)\n    kl_divergence = -0.5 * np.mean(1 + t_log_var - t_mean ** 2 - sigma_squared)\n    total_loss = reconstruction_loss + kl_divergence\n    return round(total_loss, 6)"}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    w = np.array(w, dtype=float)\n    V = np.array(V, dtype=float)\n    (n_samples, n_features) = X.shape\n    n_factors = V.shape[1]\n    linear_part = w0 + np.dot(X, w)\n    sum_interaction = np.dot(X, V)\n    square_sum_interaction = np.power(sum_interaction, 2)\n    square_V = np.power(V.T, 2)\n    square_X = np.power(X, 2)\n    sum_square_interaction = np.dot(square_X, square_V.T)\n    sum_square_interaction = sum_square_interaction.sum(axis=1)\n    interaction_part = 0.5 * (square_sum_interaction.sum(axis=1) - sum_square_interaction)\n    y_pred = linear_part + interaction_part\n    return [round(float(pred), 4) for pred in y_pred]"}
{"task_id": 513, "completion_id": 1, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X_np = np.array(X)\n    w_np = np.array(w)\n    V_np = np.array(V)\n    n_samples = X_np.shape[0]\n    linear_part = w0 + np.sum(X_np * w_np, axis=1)\n    V_squared = V_np ** 2\n    X_squared = X_np ** 2\n    interaction_part = 0.5 * np.sum(np.sum(X_np @ V_np, axis=1) ** 2 - np.sum(X_squared @ V_squared, axis=1), axis=0)\n    y_pred = linear_part + interaction_part\n    return [round(y, 4) for y in y_pred]"}
{"task_id": 513, "completion_id": 2, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X_np = np.array(X)\n    w_np = np.array(w)\n    V_np = np.array(V)\n    (n_samples, n_features) = X_np.shape\n    k = V_np.shape[1]\n    linear_term = w0 + X_np @ w_np\n    V_transposed = V_np.T\n    X_V = X_np @ V_np\n    square_sum = X_V ** 2\n    sum_squared = (X_np * V_np) ** 2\n    sum_squared = (X_np ** 2)[:, :, None] * (V_np ** 2)[None, :, :]\n    sum_squared = np.sum(sum_squared, axis=1)\n    interaction_term = 0.5 * np.sum(square_sum - sum_squared, axis=1)\n    y_pred = linear_term + interaction_term\n    return [round(val, 4) for val in y_pred]\nX = [[0, 1, 2], [3, 2, 1]]\nw0 = 0.5\nw = [0.1, 0.2, 0.3]\nV = [[0.4, 0.5], [0.6, 0.7], [0.8, 0.9]]"}
{"task_id": 513, "completion_id": 3, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X_np = np.array(X, dtype=np.float64)\n    w_np = np.array(w, dtype=np.float64)\n    V_np = np.array(V, dtype=np.float64)\n    (n_samples, n_features) = X_np.shape\n    k = V_np.shape[1]\n    y_pred = np.full(n_samples, w0)\n    y_pred += np.sum(X_np * w_np, axis=1)\n    for f in range(k):\n        Vf = V_np[:, f]\n        X_dot_Vf = X_np @ Vf\n        Vf2_x2 = np.sum(Vf ** 2 * X_np ** 2, axis=1)\n        y_pred += 0.5 * (X_dot_Vf ** 2 - Vf2_x2)\n    return [round(pred, 4) for pred in y_pred]\nX = [[1, 2], [2, 1], [3, 0]]\nw0 = 0.5\nw = [0.1, 0.2]\nV = [[0.1, 0.3], [0.4, 0.2]]"}
{"task_id": 513, "completion_id": 4, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    n_samples = X.shape[0]\n    linear_part = w0 + np.dot(X, w)\n    interaction_part = 0.5 * np.sum(np.dot(X, V) ** 2 - np.dot(X ** 2, V ** 2), axis=1)\n    predictions = linear_part + interaction_part\n    return [round(p, 4) for p in predictions]\nX = [[1, 2], [3, 4]]\nw0 = 0.1\nw = [0.2, 0.3]\nV = [[0.5, 0.6], [0.7, 0.8]]"}
{"task_id": 513, "completion_id": 5, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    (n_samples, n_features) = X.shape\n    term0 = w0\n    term1 = np.dot(X, w)\n    dot_product = X @ V\n    squared_sum = dot_product ** 2\n    sum_of_squares = np.sum(V ** 2 * X ** 2, axis=1)\n    term2 = 0.5 * (np.sum(squared_sum, axis=1) - sum_of_squares)\n    y_pred = term0 + term1 + term2\n    return [round(float(pred), 4) for pred in y_pred]\nX = [[1, 0, 2], [3, 1, 2]]\nw0 = 1.0\nw = [0.5, -0.5, 1.0]\nV = [[1, 0], [0, 1], [1, 1]]"}
{"task_id": 513, "completion_id": 6, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    (n_samples, n_features) = X.shape\n    k = V.shape[1]\n    y_pred = np.zeros(n_samples)\n    y_pred += w0\n    y_pred += X @ w\n    for f in range(k):\n        sum_vxf = X @ V[:, f]\n        sum_vxf_squared = np.square(sum_vxf)\n        sum_v2x2 = np.sum(np.square(V) * np.square(X), axis=1)\n        y_pred += 0.5 * (sum_vxf_squared - sum_v2x2)\n    return [round(p, 4) for p in y_pred]\nX = [[1.0, 0.5, 2.0], [0.0, 1.0, 1.0]]\nw0 = 0.1\nw = [1.0, 2.0, 3.0]\nV = [[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]"}
{"task_id": 513, "completion_id": 7, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X_np = np.array(X)\n    w_np = np.array(w)\n    V_np = np.array(V)\n    n_samples = X_np.shape[0]\n    linear_term = w0 + np.sum(w_np * X_np, axis=1)\n    sum1 = (V_np.T @ X_np.T).sum(axis=0)\n    sum1_squared = sum1 ** 2\n    X_squared = X_np ** 2\n    V_squared = V_np ** 2\n    sum2 = (V_squared.T @ X_squared.T).sum(axis=0)\n    factorization_term = 0.5 * (sum1_squared - sum2)\n    y_hat = linear_term + factorization_term\n    return [round(y, 4) for y in y_hat]"}
{"task_id": 513, "completion_id": 8, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X_np = np.array(X)\n    w_np = np.array(w)\n    V_np = np.array(V)\n    (n_samples, n_features) = X_np.shape\n    (_, k) = V_np.shape\n    y_pred = w0 + X_np @ w_np\n    interaction_part = np.zeros(n_samples)\n    for f in range(k):\n        sum_term = np.sum(V_np[:, f] * X_np, axis=1)\n        sum_squared = sum_term ** 2\n        squared_sum = np.sum(V_np[:, f] ** 2 * X_np ** 2, axis=1)\n        interaction_part += sum_squared - squared_sum\n    y_pred += 0.5 * interaction_part\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 513, "completion_id": 9, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X, dtype=np.float64)\n    w = np.array(w, dtype=np.float64)\n    V = np.array(V, dtype=np.float64)\n    (n_samples, n_features) = X.shape\n    k = V.shape[1]\n    linear_part = w0 + np.sum(w * X, axis=1)\n    temp1 = np.dot(X, V)\n    square_temp1 = np.sum(temp1 ** 2, axis=1)\n    V2 = V ** 2\n    temp2 = np.dot(X ** 2, V2)\n    square_temp2 = np.sum(temp2, axis=1)\n    interaction_part = 0.5 * (square_temp1 - square_temp2)\n    y_pred = linear_part + interaction_part\n    return [round(y, 4) for y in y_pred]\nX = [[1, 2], [3, 4]]\nw0 = 0.5\nw = [0.1, 0.3]\nV = [[0.1, 0.4], [0.2, 0.5]]"}
{"task_id": 517, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.asarray(z, dtype=np.float64)\n    z = np.clip(z, -700, 700)\n    sig = 1 / (1 + np.exp(-z))\n    sig_rounded = np.round(sig, 4)\n    if np.isscalar(z):\n        return float(sig_rounded)\n    return sig_rounded.tolist()"}
{"task_id": 517, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.array(z)\n    z = np.clip(z, -700, 700)\n    g = 1.0 / (1.0 + np.exp(-z))\n    g = np.round(g, 4)\n    if np.isscalar(z):\n        return float(g)\n    else:\n        return g.tolist()"}
{"task_id": 517, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z_array = np.array(z, dtype=np.float64, copy=False)\n    with np.errstate(over='ignore'):\n        negative_mask = z_array < 0\n        positive = np.zeros_like(z_array)\n        positive[negative_mask] = np.exp(z_array[negative_mask])\n        positive[~negative_mask] = 1.0\n        result = positive / (1.0 + positive)\n    result = np.where(np.isfinite(result), result, 0.0)\n    result = np.round(result, 4)\n    if np.isscalar(z):\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 517, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.array(z, dtype=np.float64)\n    z = np.clip(z, -700, 700)\n    sigmoid_values = 1 / (1 + np.exp(-z))\n    rounded_sigmoids = np.round(sigmoid_values, 4)\n    if np.isscalar(z):\n        return float(rounded_sigmoids)\n    else:\n        return rounded_sigmoids.tolist()"}
{"task_id": 517, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or numpy.ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.asarray(z, dtype=np.float64)\n    relu_bound = np.finfo(np.float64).max / 2\n    z_clipped = np.clip(z, -np.inf, np.inf)\n    if z_clipped.ndim == 0:\n        if z_clipped > 700:\n            result = 1.0\n        elif z_clipped < -700:\n            result = 0.0\n        else:\n            result = 1.0 / (1.0 + np.exp(-z_clipped))\n    else:\n        exp_neg_z = np.exp(-z_clipped)\n        result = 1.0 / (1.0 + exp_neg_z)\n    result = np.round(result, 4)\n    if np.isscalar(z):\n        return float(result.item())\n    else:\n        return result.tolist()"}
{"task_id": 517, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z_array = np.asarray(z) if isinstance(z, (list, tuple, np.ndarray)) else np.array([z])\n    with np.errstate(over='ignore'):\n        positive_mask = z_array > 0\n        sig = np.zeros_like(z_array)\n        sig[positive_mask] = 1 / (1 + np.exp(-z_array[positive_mask]))\n        sig[~positive_mask] = np.exp(z_array[~positive_mask]) / (1 + np.exp(z_array[~positive_mask]))\n    sig_rounded = np.round(sig, 4)\n    if isinstance(z, (int, float)):\n        return float(sig_rounded.item())\n    else:\n        return sig_rounded.tolist()"}
{"task_id": 517, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z_array = np.array(z, dtype=np.float64)\n    e_neg_z = np.exp(-z_array)\n    result = 1 / (1 + e_neg_z)\n    result_rounded = np.round(result, 4)\n    result_list = result_rounded.tolist()\n    if np.isscalar(z_array):\n        return float(result_list)\n    else:\n        return result_list"}
{"task_id": 517, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or numpy.ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if z is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.array(z, dtype=float)\n    negative_mask = z < 0\n    positive = np.zeros_like(z)\n    positive[negative_mask] = np.exp(z[negative_mask])\n    positive[~negative_mask] = 1 / (1 + np.exp(-z[~negative_mask]))\n    output = 1 / (1 + positive)\n    output = np.round(output, 4)\n    if np.isscalar(z):\n        return float(output)\n    else:\n        return output.tolist()"}
{"task_id": 517, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.asarray(z, dtype=np.float64)\n    result = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    result = np.round(result, 4)\n    if np.isscalar(z):\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 517, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z_array = np.array(z, dtype=np.float64) if not isinstance(z, (int, float)) else np.array([z], dtype=np.float64)\n    z_array = np.clip(z_array, -700, 700)\n    exp_neg_z = np.exp(-z_array)\n    result_array = 1.0 / (1.0 + exp_neg_z)\n    result_array = np.round(result_array, 4)\n    result = result_array.tolist()\n    result = result[0] if isinstance(z, (int, float)) else result\n    return result"}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> any:\n        if len(actual.shape) == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if len(predicted.shape) == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 1, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper"}
{"task_id": 518, "completion_id": 2, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper"}
{"task_id": 518, "completion_id": 3, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if len(actual.shape) == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if len(predicted.shape) == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        if len(actual.shape) == 2 and actual.shape[1] == 1:\n            actual = actual.flatten()\n        if len(predicted.shape) == 2 and predicted.shape[1] == 1:\n            predicted = predicted.flatten()\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 4, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if len(actual.shape) == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if len(predicted.shape) == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper"}
{"task_id": 518, "completion_id": 5, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if len(actual.shape) == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if len(predicted.shape) == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 6, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 7, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 8, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if len(actual.shape) == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if len(predicted.shape) == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        if len(actual.shape) == 2 and actual.shape[1] == 1:\n            actual = actual.flatten()\n        if len(predicted.shape) == 2 and predicted.shape[1] == 1:\n            predicted = predicted.flatten()\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 9, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    z_array = np.array(z, dtype=float, copy=True, ndmin=1)\n    grad_array = z_array * (1 - z_array)\n    grad_array = np.round(grad_array, 4)\n    if np.isscalar(z):\n        return float(grad_array[0])\n\n    def array_to_nested_list(arr):\n        if arr.ndim == 2:\n            return [array_to_nested_list(row) for row in arr]\n        else:\n            return [float(x) for x in arr]\n    if isinstance(z, list):\n        result = array_to_nested_list(grad_array)\n        if not z:\n            return []\n\n        def flatten_structure(original, converted):\n            if isinstance(original, list):\n                if not original:\n                    return []\n                return [flatten_structure(o, c) for (o, c) in zip(original, converted)]\n            else:\n                return c\n        return flatten_structure(z, result)\n    else:\n        return array_to_nested_list(grad_array)"}
{"task_id": 520, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def _process(value):\n        if isinstance(value, (list, np.ndarray)):\n            if isinstance(value, np.ndarray) and value.ndim == 0:\n                return float(np.round(value * (1 - value), 4))\n            elif isinstance(value, list) and len(value) == 0:\n                return []\n            elif isinstance(value, (list, np.ndarray)) and (isinstance(value, np.ndarray) and value.size == 0 or len(value) == 0):\n                return []\n            elif isinstance(value[0], (list, np.ndarray)) or isinstance(value[0], float):\n                return [round(val if isinstance(val, float) else _process(val), 4) if isinstance(val, float) else _process(val) for val in value]\n        elif isinstance(value, float):\n            return float(np.round(value * (1 - value), 4))\n        else:\n            try:\n                val = float(value)\n                return float(np.round(val * (1 - val), 4))\n            except:\n                raise TypeError('Input must be a float, list, or NumPy array containing floats.')\n    if isinstance(z, list):\n        (z_flat, structure) = flatten(z)\n        z_array = np.array(z_flat, dtype=float)\n        grads = np.round(z_array * (1 - z_array), 4)\n        return restore_structure(grads, structure)\n    elif isinstance(z, np.ndarray):\n        grads = z * (1 - z)\n        return np.round(grads, 4)\n    elif isinstance(z, float):\n        return round(z * (1 - z), 4)\n    else:\n        try:\n            return round(float(z) * (1 - float(z)), 4)\n        except:\n            raise TypeError('Input must be a float, scalar, list, or NumPy array.')\ndef flatten(lst):\n    from collections.abc import Iterable\n    structure = []\n    flat = []\n\n    def _iter(l):\n        if isinstance(l, list):\n            structure.append(len(l))\n            for item in l:\n                _iter(item)\n        else:\n            flat.append(l)\n    _iter(lst)\n    return (flat, structure)\ndef restore_structure(array, structure):\n    result = []\n    index = 0\n    for length in structure:\n        sublist = restore_structure(array[index:index + length], [])\n        result.append(sublist)\n        index += length\n    if not result:\n        return float(array[0]) if isinstance(array, np.ndarray) else array[0]\n    else:\n        return result"}
{"task_id": 520, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        result = np.round(z * (1 - z), 4)\n        return result if result >= 0 else 0.0\n    elif isinstance(z, np.ndarray):\n        grad = np.round(z * (1 - z), 4)\n        return grad.tolist()\n    elif isinstance(z, list):\n        if not z:\n            return []\n        return [sigmoid_grad(item) for item in z]\n    else:\n        raise TypeError('Input must be float, list, or numpy.ndarray.')"}
{"task_id": 520, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def process(x):\n        if isinstance(x, (float, int)):\n            return round(x * (1 - x), 4)\n        elif isinstance(x, np.ndarray):\n            res = np.around(x * (1 - x), decimals=4)\n            return res.tolist()\n        elif isinstance(x, list):\n            return [process(i) for i in x]\n        else:\n            raise TypeError('Unsupported input type')\n    if isinstance(z, list) and len(z) == 0:\n        return []\n    result = process(z)\n    if isinstance(result, np.ndarray):\n        result = result.tolist()\n    return result"}
{"task_id": 520, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(z, (float, int, np.ndarray, list)):\n        raise ValueError('Input must be a float, integer, list, or NumPy array.')\n    if isinstance(z, (float, int)):\n        grad = float(z * (1 - z))\n        return round(grad, 4)\n    elif isinstance(z, np.ndarray):\n        if z.size == 0:\n            return []\n        result = np.round(z * (1 - z), 4)\n        return result.tolist()\n    elif isinstance(z, list):\n        if not z:\n            return []\n        if any((isinstance(i, list) for i in z)):\n            return [sigmoid_grad(row) for row in z]\n        else:\n            return [round(val * (1 - val), 4) for val in z]"}
{"task_id": 520, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def convert_to_list(obj):\n        \"\"\"Convert nested arrays to nested lists.\"\"\"\n        if isinstance(obj, (np.ndarray, list)):\n            return [convert_to_list(item) for item in obj]\n        else:\n            return float(obj)\n    z_arr = np.array(z, dtype=float, copy=False)\n    grad = np.round(z_arr * (1 - z_arr), decimals=4)\n    if isinstance(z, np.ndarray):\n        if z.ndim == 0:\n            return float(grad.item())\n        else:\n            return convert_to_list(grad)\n    elif isinstance(z, list):\n        return convert_to_list(grad)\n    else:\n        return float(grad.item())"}
{"task_id": 520, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def compute_grad(x):\n        if isinstance(x, (int, float)):\n            return float(np.round(x * (1 - x), 4))\n        elif isinstance(x, list):\n            if not x:\n                return []\n            return [compute_grad(item) for item in x]\n        elif isinstance(x, np.ndarray):\n            return np.round(x * (1 - x), 4).tolist()\n        else:\n            raise TypeError('Unsupported input type: {}'.format(type(x)))\n    result = compute_grad(z)\n    return result if isinstance(z, (list, np.ndarray)) or not isinstance(z, (int, float)) else float(result)"}
{"task_id": 520, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def helper(x):\n        if isinstance(x, (int, float)):\n            return float(np.round(x * (1 - x), 4))\n        elif isinstance(x, np.ndarray):\n            return np.round(x * (1 - x), 4).tolist()\n        elif isinstance(x, list):\n            return [helper(item) for item in x]\n        else:\n            raise ValueError('Unsupported input type')\n    result = helper(z)\n    return result if isinstance(result, list) or isinstance(result, np.ndarray) else float(result)"}
{"task_id": 520, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def compute_grad(val):\n        return np.round(val * (1 - val), 4)\n    if isinstance(z, list) and (not z):\n        return []\n    arr = np.array(z, dtype=float)\n    grad_arr = compute_grad(arr)\n\n    def array_to_structure(arr, original):\n        if isinstance(original, list):\n            return [array_to_structure(arr[i], original[i]) for i in range(len(original))]\n        elif isinstance(original, np.ndarray):\n            return [array_to_structure(arr, original.tolist())]\n        else:\n            return float(arr)\n    return array_to_structure(grad_arr, z)"}
{"task_id": 520, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    is_scalar = isinstance(z, (int, float))\n    is_list = isinstance(z, list)\n    is_array = isinstance(z, np.ndarray)\n    if is_list:\n        if not z:\n            return []\n        elif all((isinstance(item, (int, float)) for item in z)):\n            result = [round(x * (1 - x), 4) for x in z]\n        else:\n            result = [sigmoid_grad(row) for row in z]\n        return result\n    elif is_array:\n        z_array = np.array(z)\n        result = np.round(z_array * (1 - z_array), 4)\n        if z_array.size == 0:\n            return []\n        return result.tolist()\n    elif is_scalar:\n        result = z * (1 - z)\n        return round(result, 4)\n    else:\n        raise TypeError('Input must be a float, list, or numpy array containing floats in [0,1].')"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X_np = np.array(X)\n    (x1_min, x1_max) = (X_np[:, 0].min(), X_np[:, 0].max())\n    (x2_min, x2_max) = (X_np[:, 1].min(), X_np[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (X1, X2) = np.meshgrid(x1_plot, x2_plot)\n    flat_X1 = X1.ravel()\n    flat_X2 = X2.ravel()\n    scores = np.dot(W[0], flat_X1) + np.dot(W[1], flat_X2) + b\n    labels = np.where(scores >= 0, 1, -1)\n    labels_grid = labels.reshape(grid_n, grid_n)\n    return labels_grid.tolist()"}
{"task_id": 528, "completion_id": 1, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X_np = np.array(X)\n    x1_range = [np.min(X_np[:, 0]), np.max(X_np[:, 0])]\n    x2_range = [np.min(X_np[:, 1]), np.max(X_np[:, 1])]\n    x1_plot = np.linspace(*x1_range, grid_n)\n    x2_plot = np.linspace(*x2_range, grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot)\n    scores = W[0] * x1_grid + W[1] * x2_grid + b\n    labels = np.where(scores >= 0, 1, -1)\n    return labels.tolist()"}
{"task_id": 528, "completion_id": 2, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X_np = np.array(X)\n    x1_values = np.linspace(np.min(X_np[:, 0]), np.max(X_np[:, 0]), grid_n)\n    x2_values = np.linspace(np.min(X_np[:, 1]), np.max(X_np[:, 1]), grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_values, x2_values)\n    linear_output = W[0] * x1_grid + W[1] * x2_grid + b\n    labels = np.where(linear_output >= 0, 1, -1)\n    return labels.tolist()"}
{"task_id": 528, "completion_id": 3, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    (x1_min, x1_max) = (np.min(X[:, 0]), np.max(X[:, 0]))\n    (x2_min, x2_max) = (np.min(X[:, 1]), np.max(X[:, 1]))\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (X1, X2) = np.meshgrid(x1_plot, x2_plot)\n    X1_flat = X1.flatten()\n    X2_flat = X2.flatten()\n    scores = W[0] * X1_flat + W[1] * X2_flat + b\n    labels_flat = np.where(scores >= 0, 1, -1)\n    labels = labels_flat.reshape((grid_n, grid_n))\n    return labels.tolist()"}
{"task_id": 528, "completion_id": 4, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    x1 = np.linspace(X[:, 0].min(), X[:, 0].max(), grid_n)\n    x2 = np.linspace(X[:, 1].min(), X[:, 1].max(), grid_n)\n    (X1, X2) = np.meshgrid(x1, x2)\n    decision_values = W[0] * X1 + W[1] * X2 + b\n    labels = np.where(decision_values >= 0, 1, -1)\n    return labels.tolist()\nX = [[1, 2], [3, 4], [5, 6], [2, 1], [4, 3]]\nW = [1, -1]\nb = 0.5"}
{"task_id": 528, "completion_id": 5, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X_np = np.array(X)\n    (x1_min, x1_max) = (X_np[:, 0].min(), X_np[:, 0].max())\n    (x2_min, x2_max) = (X_np[:, 1].min(), X_np[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot)\n    linear_combination = W[0] * x1_grid + W[1] * x2_grid + b\n    labels_grid = np.where(linear_combination >= 0, 1, -1)\n    return labels_grid.tolist()\nX = [[0, 0], [0, 1], [1, 0], [1, 1]]\nW = [1, -1]\nb = 0\ngrid_n = 10"}
{"task_id": 528, "completion_id": 6, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X_np = np.array(X)\n    (x1_min, x1_max) = (X_np[:, 0].min(), X_np[:, 0].max())\n    (x2_min, x2_max) = (X_np[:, 1].min(), X_np[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (X1, X2) = np.meshgrid(x1_plot, x2_plot)\n    scores = W[0] * X1 + W[1] * X2 + b\n    labels = np.where(scores >= 0, 1, -1)\n    return labels.tolist()\nX = [[1, 2], [2, 3], [3, 1], [4, 4], [5, 5]]\nW = [1, -1]\nb = 0.5"}
{"task_id": 528, "completion_id": 7, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    (x1_min, x1_max) = (np.min(X[:, 0]), np.max(X[:, 0]))\n    (x2_min, x2_max) = (np.min(X[:, 1]), np.max(X[:, 1]))\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1, x2) = np.meshgrid(x1_plot, x2_plot)\n    z = W[0] * x1 + W[1] * x2 + b\n    labels = np.where(z >= 0, 1, -1)\n    return labels.tolist()"}
{"task_id": 528, "completion_id": 8, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X_np = np.array(X)\n    (x1_min, x1_max) = (X_np[:, 0].min(), X_np[:, 0].max())\n    (x2_min, x2_max) = (X_np[:, 1].min(), X_np[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (xx1, xx2) = np.meshgrid(x1_plot, x2_plot)\n    grid_points = np.stack((xx1.ravel(), xx2.ravel()), axis=1)\n    scores = np.dot(grid_points, W) + b\n    labels = np.where(scores >= 0, 1, -1)\n    labels_grid = labels.reshape(grid_n, grid_n).tolist()\n    return labels_grid"}
{"task_id": 528, "completion_id": 9, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X_np = np.array(X)\n    (x1_min, x1_max) = (X_np[:, 0].min(), X_np[:, 0].max())\n    (x2_min, x2_max) = (X_np[:, 1].min(), X_np[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (X1, X2) = np.meshgrid(x1_plot, x2_plot)\n    linear_output = W[0] * X1.flatten() + W[1] * X2.flatten() + b\n    labels = np.where(linear_output >= 0, 1, -1)\n    return labels.reshape(grid_n, grid_n).tolist()"}
{"task_id": 537, "completion_id": 0, "solution": "import numpy as np\nfrom typing import list\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                 the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                 (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                 the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    (classes, counts) = np.unique(y_train, return_counts=True)\n    priors = counts / len(y_train)\n    class_to_idx = {c: i for (i, c) in enumerate(classes)}\n    n_features = X_train.shape[1]\n    class_params = {}\n    for class_label in classes:\n        idx = y_train == class_label\n        X_class = X_train[idx]\n        means = np.mean(X_class, axis=0)\n        stds = np.std(X_class, axis=0)\n        stds = np.where(stds == 0, 1e-09, stds)\n        class_params[class_label] = {'mean': means, 'std': stds}\n    predictions = []\n    log_2pi = np.log(np.sqrt(2 * np.pi))\n    for x in X_test:\n        posteriors = []\n        for class_label in classes:\n            mu = class_params[class_label]['mean']\n            sigma = class_params[class_label]['std']\n            prior = priors[class_to_idx[class_label]]\n            exponent = -0.5 * np.sum(((x - mu) / sigma) ** 2 + 2 * np.log(sigma))\n            log_posterior = np.log(prior) + exponent - n_features * log_2pi\n            posteriors.append(log_posterior)\n        predicted_class = classes[np.argmax(posteriors)]\n        predictions.append(predicted_class)\n    return predictions\nX_train = np.array([[1, 2], [2, 3], [3, 5], [4, 6], [5, 7]])\ny_train = np.array([0, 0, 1, 1, 1])\nX_test = np.array([[2, 2], [4, 6]])"}
{"task_id": 537, "completion_id": 1, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1) for each test sample.\n    \"\"\"\n    classes = np.unique(y_train)\n    parameters = {}\n    for c in classes:\n        X_c = X_train[y_train == c]\n        mean = X_c.mean(axis=0)\n        std = X_c.std(axis=0) + 1e-09\n        parameters[c] = {'mean': mean, 'std': std, 'prior': np.log(len(X_c) / len(y_train))}\n    predictions = []\n    for sample in X_test:\n        log_posterior = []\n        for c in classes:\n            mean = parameters[c]['mean']\n            std = parameters[c]['std']\n            log_likelihood = -(sample - mean) ** 2 / (2 * std ** 2) - np.log(np.sqrt(2 * np.pi) * std)\n            total_log_posterior = np.sum(log_likelihood) + parameters[c]['prior']\n            log_posterior.append(total_log_posterior)\n        predicted_class = classes[np.argmax(log_posterior)]\n        predictions.append(predicted_class)\n    return predictions"}
{"task_id": 537, "completion_id": 2, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1) for each test sample.\n    \"\"\"\n    classes = np.unique(y_train)\n    n_features = X_train.shape[1]\n    eps = 1e-09\n    class_distributions = {}\n    for c in classes:\n        X_c = X_train[y_train == c]\n        feature_means = X_c.mean(axis=0)\n        feature_stds = X_c.std(axis=0) + eps\n        class_prior = np.log(len(X_c) / len(X_train))\n        class_distributions[c] = {'means': feature_means, 'stds': feature_stds, 'prior': class_prior}\n    predictions = []\n    for x in X_test:\n        class_posteriors = []\n        for c in classes:\n            log_likelihood = 0\n            for i in range(n_features):\n                mu = class_distributions[c]['means'][i]\n                sigma = class_distributions[c]['stds'][i]\n                log_likelihood += -0.5 * np.log(2 * np.pi) - np.log(sigma) - 0.5 * ((x[i] - mu) / sigma) ** 2\n            posterior = class_distributions[c]['prior'] + log_likelihood\n            class_posteriors.append((c, posterior))\n        predictions.append(max(class_posteriors, key=lambda x: x[1])[0])\n    return predictions\nX_train = np.array([[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [6.0, 7.0], [7.0, 8.0]])\ny_train = np.array([0, 0, 0, 1, 1])\nX_test = np.array([[2.5, 3.5], [6.5, 7.5]])"}
{"task_id": 537, "completion_id": 3, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    class_0_mask = y_train == 0\n    class_1_mask = y_train == 1\n    X_train_class_0 = X_train[class_0_mask]\n    X_train_class_1 = X_train[class_1_mask]\n    prior_0 = X_train_class_0.shape[0] / X_train.shape[0]\n    prior_1 = X_train_class_1.shape[0] / X_train.shape[0]\n    eps = 1e-09\n    mean_0 = X_train_class_0.mean(axis=0)\n    std_0 = X_train_class_0.std(axis=0) + eps\n    mean_1 = X_train_class_1.mean(axis=0)\n    std_1 = X_train_class_1.std(axis=0) + eps\n    predictions = []\n    for sample in X_test:\n        log_prob_0 = np.log(prior_0)\n        for (x, mu, sigma) in zip(sample, mean_0, std_0):\n            exponent = -(x - mu) ** 2 / (2 * sigma ** 2)\n            log_prob_0 += exponent - np.log(np.sqrt(2 * np.pi) * sigma)\n        log_prob_1 = np.log(prior_1)\n        for (x, mu, sigma) in zip(sample, mean_1, std_1):\n            exponent = -(x - mu) ** 2 / (2 * sigma ** 2)\n            log_prob_1 += exponent - np.log(np.sqrt(2 * np.pi) * sigma)\n        predictions.append(0 if log_prob_0 > log_prob_1 else 1)\n    return predictions"}
{"task_id": 537, "completion_id": 4, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1) for each test sample.\n    \"\"\"\n    classes = np.unique(y_train)\n    n_features = X_train.shape[1]\n    class_means = {}\n    class_stds = {}\n    class_priors = {}\n    for cls in classes:\n        X_cls = X_train[y_train == cls]\n        class_means[cls] = np.mean(X_cls, axis=0)\n        class_stds[cls] = np.std(X_cls, axis=0) + 1e-09\n        class_priors[cls] = X_cls.shape[0] / X_train.shape[0]\n    predictions = []\n    for x in X_test:\n        posteriors = []\n        for cls in classes:\n            prior = np.log(class_priors[cls])\n            likelihood = 0\n            for i in range(n_features):\n                mean = class_means[cls][i]\n                std = class_stds[cls][i]\n                likelihood += np.log(1 / (np.sqrt(2 * np.pi) * std)) - (x[i] - mean) ** 2 / (2 * std ** 2)\n            posterior = prior + likelihood\n            posteriors.append(posterior)\n        predicted_class = classes[np.argmax(posteriors)]\n        predictions.append(predicted_class)\n    return predictions"}
{"task_id": 537, "completion_id": 5, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1) for each test sample.\n    \"\"\"\n    (classes, counts) = np.unique(y_train, return_counts=True)\n    class_priors = counts / len(y_train)\n    n_features = X_train.shape[1]\n    class_means = np.zeros((2, n_features))\n    class_stds = np.zeros((2, n_features))\n    for (i, cls) in enumerate(classes):\n        X_cls = X_train[y_train == cls]\n        class_means[i, :] = np.mean(X_cls, axis=0)\n        class_stds[i, :] = np.std(X_cls, axis=0)\n    epsilon = 1e-09\n    class_stds += epsilon\n    predictions = []\n    for x in X_test:\n        log_posterior = np.zeros(2)\n        for (i, cls) in enumerate(classes):\n            log_prior = np.log(class_priors[i])\n            log_likelihood = np.sum(-0.5 * (np.log(2 * np.pi) + 2 * np.log(class_stds[i]) + (x - class_means[i]) ** 2 / class_stds[i] ** 2))\n            log_posterior[i] = log_prior + log_likelihood\n        predictions.append(int(classes[np.argmax(log_posterior)]))\n    return predictions"}
{"task_id": 537, "completion_id": 6, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1) for each test sample.\n    \"\"\"\n    (classes, counts) = np.unique(y_train, return_counts=True)\n    class_priors = dict(zip(classes, counts / len(y_train)))\n    class_means = {}\n    class_stds = {}\n    for c in classes:\n        X_c = X_train[y_train == c]\n        class_means[c] = X_c.mean(axis=0)\n        class_stds[c] = X_c.std(axis=0) + 1e-09\n    predictions = []\n    for x in X_test:\n        log_posteriors = []\n        for c in classes:\n            log_prior = np.log(class_priors[c])\n            mean = class_means[c]\n            std = class_stds[c]\n            exponent = -(x - mean) ** 2 / (2 * std ** 2)\n            log_prob = np.log(1 / (np.sqrt(2 * np.pi) * std)) + exponent\n            log_likelihood = np.sum(log_prob)\n            log_posterior = log_prior + log_likelihood\n            log_posteriors.append(log_posterior)\n        predicted_class = classes[np.argmax(log_posteriors)]\n        predictions.append(predicted_class)\n    return predictions\nX_train = np.array([[1, 2], [2, 3], [4, 5], [5, 6]])\ny_train = np.array([0, 0, 1, 1])\nX_test = np.array([[2, 3], [5, 4], [3.5, 3.5]])\npredictions = gaussian_naive_bayes(X_train, y_train, X_test)"}
{"task_id": 537, "completion_id": 7, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    classes = np.unique(y_train)\n    n_features = X_train.shape[1]\n    params = {}\n    epsilon = 1e-09\n    for c in classes:\n        X_c = X_train[y_train == c]\n        mean = np.mean(X_c, axis=0)\n        std = np.std(X_c, axis=0) + epsilon\n        params[c] = {'mean': mean, 'std': std}\n    class_priors = {}\n    for c in classes:\n        class_priors[c] = np.mean(y_train == c)\n    predictions = []\n    for sample in X_test:\n        log_posterior = []\n        for c in classes:\n            log_prior = np.log(class_priors[c])\n            mean = params[c]['mean']\n            std = params[c]['std']\n            log_likelihood = -0.5 * np.log(2 * np.pi) - np.log(std) - (sample - mean) ** 2 / (2 * std ** 2)\n            log_posterior_c = log_prior + np.sum(log_likelihood)\n            log_posterior.append(log_posterior_c)\n        predicted_class = classes[np.argmax(log_posterior)]\n        predictions.append(predicted_class)\n    return predictions"}
{"task_id": 537, "completion_id": 8, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1) for each test sample.\n    \"\"\"\n    (classes, counts) = np.unique(y_train, return_counts=True)\n    class_priors = counts / len(y_train)\n    class_means = {}\n    class_stds = {}\n    for cls in classes:\n        X_class = X_train[y_train == cls]\n        class_means[cls] = X_class.mean(axis=0)\n        class_stds[cls] = X_class.std(axis=0) + 1e-09\n    predictions = []\n    for x in X_test:\n        posteriors = []\n        for cls in classes:\n            mean = class_means[cls]\n            std = class_stds[cls]\n            likelihood = np.prod(1 / (np.sqrt(2 * np.pi) * std) * np.exp(-(x - mean) ** 2 / (2 * std ** 2)))\n            prior = class_priors[cls]\n            posterior = np.log(likelihood) + np.log(prior)\n            posteriors.append(posterior)\n        predicted_class = classes[np.argmax(posteriors)]\n        predictions.append(predicted_class)\n    return predictions"}
{"task_id": 537, "completion_id": 9, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    class_0 = X_train[y_train == 0]\n    class_1 = X_train[y_train == 1]\n    prior_0 = len(class_0) / len(y_train)\n    prior_1 = len(class_1) / len(y_train)\n    mean_0 = np.mean(class_0, axis=0)\n    mean_1 = np.mean(class_1, axis=0)\n    std_0 = np.std(class_0, axis=0)\n    std_1 = np.std(class_1, axis=0)\n    epsilon = 1e-09\n    std_0 += epsilon\n    std_1 += epsilon\n\n    def _gaussian_likelihood(x, mu, sigma):\n        return 1 / (np.sqrt(2 * np.pi) * sigma) * np.exp(-(x - mu) ** 2 / (2 * sigma ** 2))\n    predictions = []\n    for sample in X_test:\n        likelihood_0 = _gaussian_likelihood(sample, mean_0, std_0)\n        log_likelihood_0 = np.sum(np.log(likelihood_0))\n        log_posterior_0 = log_likelihood_0 + np.log(prior_0)\n        likelihood_1 = _gaussian_likelihood(sample, mean_1, std_1)\n        log_likelihood_1 = np.sum(np.log(likelihood_1))\n        log_posterior_1 = log_likelihood_1 + np.log(prior_1)\n        if log_posterior_1 > log_posterior_0:\n            predictions.append(1)\n        else:\n            predictions.append(0)\n    return predictions\nX_train = np.array([[1.0, 2.0], [2.0, 3.0], [3.0, 4.0]])\ny_train = np.array([0, 0, 1])\nX_test = np.array([[1.5, 2.5], [2.5, 3.5]])"}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n\n    Parameters:\n    AL (np.ndarray): Output probabilities from the last layer of the model, shape (m,) or (1, m)\n    Y (np.ndarray): Ground truth labels, shape (m,) or (1, m)\n\n    Returns:\n    float: Scalar cost value, rounded to 4 decimal places when printed\n    \"\"\"\n    m = Y.shape[0]\n    AL = AL.ravel()\n    Y = Y.ravel()\n    AL_clipped = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -(1.0 / m) * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return float(np.round(cost, 4))"}
{"task_id": 539, "completion_id": 1, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost (log-loss) between outputs of a model and true labels.\n    \n    Parameters:\n    - AL: ndarray of shape (m,) or (1,m) containing the model's output probabilities (a \u2208 (0,1))\n    - Y: ndarray of shape (m,) or (1,m) containing the true labels (0 or 1)\n    \n    Returns:\n    - float: The computed binary cross-entropy cost (rounded to 4 decimal places when printed)\n    \"\"\"\n    AL = np.squeeze(AL)\n    Y = np.squeeze(Y)\n    assert AL.shape == Y.shape, 'AL and Y must have the same shape'\n    m = AL.shape[0]\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n    cost = -(1 / m) * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return float(cost)"}
{"task_id": 539, "completion_id": 2, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n    \n    Parameters:\n    AL -- Probability vector (output of the last layer, shape (1, m) or (m,))\n    Y -- True label vector (shape (1, m) or (m,))\n    \n    Returns:\n    cost -- Binary cross-entropy cost as a Python float, rounded to 4 decimal places when printed\n    \"\"\"\n    m = Y.shape[0]\n    AL_clipped = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -(1 / m) * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return float(np.round(cost, 4))"}
{"task_id": 539, "completion_id": 3, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost.\n    \n    Parameters:\n    AL (np.ndarray): Output of the model (probabilities), shape (1,m) or (m,).\n    Y (np.ndarray): True label vector, shape (1,m) or (m,).\n    \n    Returns:\n    float: Scalar cost rounded to 4 decimal places.\n    \"\"\"\n    m = Y.shape[0]\n    AL = AL.flatten()\n    Y = Y.flatten()\n    AL_clipped = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -1.0 / m * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return round(float(cost), 4)"}
{"task_id": 539, "completion_id": 4, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost between the model's output AL and the true labels Y.\n\n    Parameters:\n    - AL: numpy.ndarray, shape (m,) or (1, m) -- Probability vector output from the last layer of the model.\n    - Y: numpy.ndarray, shape (m,) or (1, m) -- Ground truth label vector (0 or 1).\n\n    Returns:\n    - float: Binary cross-entropy cost, rounded to 4 decimal places when printed.\n    \"\"\"\n    m = Y.shape[-1]\n    AL = AL.flatten()\n    Y = Y.flatten()\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n    cost = -1.0 / m * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return float(cost)\nAL = np.array([0.9, 0.5, 0.2])\nY = np.array([1, 0, 0])\ncost = compute_cost(AL, Y)"}
{"task_id": 539, "completion_id": 5, "solution": "import numpy as np\nimport numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost.\n\n    Parameters:\n    - AL (np.ndarray): The output of the last layer (predicted probabilities), shape (m,) or (1, m)\n    - Y (np.ndarray): The true labels, shape (m,) or (1, m)\n\n    Returns:\n    - float: The scalar cost (rounded to 4 decimal places)\n    \"\"\"\n    m = Y.shape[0]\n    AL = AL.reshape(-1)\n    Y = Y.reshape(-1)\n    AL_clipped = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -1.0 / m * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return round(float(cost), 4)\nAL = np.array([0.9, 0.1, 0.7, 0.4])\nY = np.array([1, 0, 1, 0])\ncost = compute_cost(AL, Y)"}
{"task_id": 539, "completion_id": 6, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n\n    Parameters:\n        AL (np.ndarray): Output of the model, shape (m,) or (1,m)\n        Y (np.ndarray): Ground truth labels, shape (m,) or (1,m)\n\n    Returns:\n        float: Scalar cost rounded to 4 decimal places\n    \"\"\"\n    m = Y.shape[0]\n    AL_clipped = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -1 / m * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return round(float(np.squeeze(cost)), 4)"}
{"task_id": 539, "completion_id": 7, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost for a neural network.\n\n    Parameters:\n    AL (np.ndarray): Output of the last layer, a NumPy array of probabilities (shape (1,m) or (m,))\n    Y (np.ndarray): True labels (0 or 1) for each training example (shape (1,m) or (m,))\n\n    Returns:\n    float: Binary cross-entropy cost rounded to 4 decimal places.\n    \"\"\"\n    m = Y.shape[0]\n    AL = np.ravel(AL)\n    Y = np.ravel(Y)\n    if AL.shape != Y.shape:\n        raise ValueError('AL and Y must have the same shape.')\n    AL_clipped = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -1.0 / m * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return round(float(np.squeeze(cost)), 4)"}
{"task_id": 539, "completion_id": 8, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\"\"\"\n    m = Y.shape[0]\n    AL_clipped = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -1 / m * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return round(float(cost), 4)"}
{"task_id": 539, "completion_id": 9, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost between model outputs AL and true labels Y.\n\n    Parameters:\n    - AL (np.ndarray): The last layer's output probabilities (shape: (1,m) or (m,))\n    - Y (np.ndarray): Ground-truth labels (shape: (1,m) or (m,))\n\n    Returns:\n    - float: The computed cost rounded to 4 decimal places when printed.\n    \"\"\"\n    if AL.shape != Y.shape:\n        raise ValueError('AL and Y must have the same shape.')\n    m = Y.shape[0]\n    AL_clipped = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -1 / m * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return float(np.round(cost, 4))"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    T = len(observations)\n    N = len(pi)\n    if t < 0 or t >= T:\n        return []\n    alpha = np.zeros((T, N))\n    alpha[0, :] = pi * B[:, observations[0]]\n    for i in range(1, T):\n        for j in range(N):\n            alpha[i, j] = np.sum(alpha[i - 1] * A[:, j]) * B[j, observations[i]]\n    beta = np.zeros((T, N))\n    beta[T - 1] = 1.0\n    for i in reversed(range(T - 1)):\n        for j in range(N):\n            beta[i, j] = np.sum(A[j, :] * B[:, observations[i + 1]] * beta[i + 1, :])\n    if t >= T:\n        return []\n    numerator = alpha[t] * beta[t]\n    denominator = np.sum(numerator)\n    gamma_t = numerator / denominator\n    gamma_t_rounded = [round(prob, 4) for prob in gamma_t]\n    return gamma_t_rounded\nhmm = {'pi': [0.6, 0.4], 'A': [[0.7, 0.3], [0.4, 0.6]], 'B': [[0.5, 0.5], [0.1, 0.9]]}\nobservations = [1, 1, 2]\nt = 1"}
{"task_id": 552, "completion_id": 1, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    N = len(pi)\n    T = len(observations)\n    alpha = np.zeros((T, N))\n    alpha[0] = pi * B[:, observations[0]]\n    for t_step in range(1, T):\n        for j in range(N):\n            alpha[t_step, j] = np.dot(alpha[t_step - 1], A[:, j]) * B[j, observations[t_step]]\n    beta = np.zeros((T, N))\n    beta[T - 1] = 1\n    for t_step in reversed(range(T - 1)):\n        for i in range(N):\n            beta[t_step, i] = np.dot(A[i, :], B[:, observations[t_step + 1]] * beta[t_step + 1, :])\n    if t < 0 or t >= T:\n        return []\n    gamma_t = alpha[t] * beta[t]\n    gamma_t /= gamma_t.sum()\n    return [round(p, 4) for p in gamma_t]"}
{"task_id": 552, "completion_id": 2, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation uses the forward-backward algorithm described in the task.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t, rounded to 4 decimals.\n    \"\"\"\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    T = len(observations)\n    N = len(pi)\n    K = B.shape[1]\n    if t < 0 or t >= T:\n        return []\n    for o in observations:\n        if o >= K:\n            raise ValueError('Observation out of bounds for emission matrix')\n    alpha = np.zeros((T, N))\n    alpha[0, :] = pi * B[:, observations[0]]\n    for t_idx in range(1, T):\n        for j in range(N):\n            alpha[t_idx, j] = np.sum(alpha[t_idx - 1, :] * A[:, j]) * B[j, observations[t_idx]]\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for t_idx in reversed(range(T - 1)):\n        for i in range(N):\n            beta[t_idx, i] = np.sum(A[i, :] * B[:, observations[t_idx + 1]] * beta[t_idx + 1, :])\n    numerator = alpha[t, :] * beta[t, :]\n    denominator = np.sum(numerator)\n    gamma_t = (numerator / denominator).tolist()\n    return [round(x, 4) for x in gamma_t]\nhmm = {'pi': [0.5, 0.5], 'A': [[0.7, 0.3], [0.4, 0.6]], 'B': [[0.6, 0.4], [0.3, 0.7]]}\nobservations = [0, 1, 0]"}
{"task_id": 552, "completion_id": 3, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation uses the forward-backward algorithm described in the task.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B':\n            - hmm['pi']: Initial state distribution, shape (n_states,).\n            - hmm['A']: Transition matrix, shape (n_states, n_states).\n            - hmm['B']: Emission matrix, shape (n_states, n_observations).\n        observations (list[int]): Sequence of observation indices.\n            Each index corresponds to an observation in the emission matrix.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t, rounded to four decimal places.\n    \"\"\"\n    pi = np.array(hmm['pi']).copy()\n    A = np.array(hmm['A']).copy()\n    B = np.array(hmm['B']).copy()\n    T = len(observations)\n    n_states = len(pi)\n    if t < 0 or t >= T:\n        return []\n    alpha = np.zeros((T, n_states))\n    alpha[0] = pi * B[:, observations[0]]\n    for t_idx in range(1, T):\n        alpha[t_idx] = B[:, observations[t_idx]] * np.dot(alpha[t_idx - 1], A)\n    alpha = alpha\n    beta = np.zeros((T, n_states))\n    beta[-1] = np.ones(n_states)\n    for t_idx in reversed(range(T - 1)):\n        beta[t_idx] = np.dot(A, B[:, observations[t_idx + 1]] * beta[t_idx + 1])\n    beta = beta\n    numerator = alpha[t] * beta[t]\n    denominator = np.sum(numerator)\n    gamma_t = numerator / denominator\n    return [round(prob, 4) for prob in gamma_t]\nobservations = [0, 1, 2]\nt = 1"}
{"task_id": 552, "completion_id": 4, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    O = np.array(observations)\n    N = len(pi)\n    T = len(O)\n    alpha = np.zeros((T, N))\n    alpha[0] = pi * B[:, O[0]]\n    for t_idx in range(1, T):\n        for j in range(N):\n            alpha[t_idx][j] = np.sum(alpha[t_idx - 1] * A[:, j]) * B[j, O[t_idx]]\n    beta = np.zeros((T, N))\n    beta[-1] = 1\n    for t_idx in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t_idx, i] = np.sum(A[i, :] * B[:, O[t_idx + 1]] * beta[t_idx + 1, :])\n    numerator = alpha[t] * beta[t]\n    denominator = np.sum(numerator)\n    gamma_t = numerator / denominator\n    return [round(prob, 4) for prob in gamma_t]"}
{"task_id": 552, "completion_id": 5, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation uses the forward-backward algorithm described to\n    obtain \u03b3\u209c(i) = \u03b1\u209c(i) * \u03b2\u209c(i) / \u2211\u2c7c(\u03b1\u209c(j) * \u03b2\u209c(j)).\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    N = len(pi)\n    O = observations\n    alpha = np.zeros((len(O), N))\n    alpha[0] = pi * B[:, O[0]]\n    for t_idx in range(1, len(O)):\n        alpha[t_idx] = np.dot(alpha[t_idx - 1], A) * B[:, O[t_idx]]\n    beta = np.zeros((len(O), N))\n    beta[-1] = 1\n    for t_idx in range(len(O) - 2, -1, -1):\n        beta[t_idx] = np.dot(A, B[:, O[t_idx + 1]] * beta[t_idx + 1])\n    numerator = alpha[t] * beta[t]\n    denominator = np.sum(numerator)\n    gamma_t = numerator / denominator if denominator != 0 else numerator\n    return [round(prob, 4) for prob in gamma_t]"}
{"task_id": 552, "completion_id": 6, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation uses the forward-backward algorithm to compute:\n    \u03b3\u209c(i) = P(q\u209c = s\u1d62 | O, \u03bb) for all states i.\n\n    Args:\n        hmm (dict): Dictionary containing HMM parameters with keys:\n            - 'pi' (np.ndarray): Initial state distribution of shape (N,).\n            - 'A' (np.ndarray): Transition matrix of shape (N, N).\n            - 'B' (np.ndarray): Emission matrix of shape (N, M), with M observations.\n        observations (list[int]): List of observation indices (each in [0, M-1]).\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Rounded posterior probabilities for each state at time t.\n    \"\"\"\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    N = len(pi)\n    T = len(observations)\n    if t < 0 or t >= T:\n        return []\n    alpha = np.zeros((T, N))\n    alpha[0, :] = pi * B[:, observations[0]]\n    for t_idx in range(1, T):\n        for j in range(N):\n            alpha[t_idx, j] = np.dot(alpha[t_idx - 1, :], A[:, j]) * B[j, observations[t_idx]]\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = np.ones(N)\n    for t_idx in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t_idx, i] = np.dot(A[i, :], B[:, observations[t_idx + 1]] * beta[t_idx + 1, :])\n    alpha_t = alpha[t, :]\n    beta_t = beta[t, :]\n    numerator = alpha_t * beta_t\n    denominator = np.sum(numerator)\n    gamma_t = np.round(numerator / denominator, 4)\n    return gamma_t"}
{"task_id": 552, "completion_id": 7, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    T = len(observations)\n    if t < 0 or t >= T:\n        return []\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    N = len(pi)\n    alpha = np.zeros((T, N))\n    alpha[0, :] = pi * B[:, observations[0]]\n    for i in range(1, T):\n        for j in range(N):\n            alpha[i, j] = np.sum(alpha[i - 1] * A[:, j]) * B[j, observations[i]]\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for i in range(T - 2, -1, -1):\n        for j in range(N):\n            beta[i, j] = np.sum(A[j, :] * B[:, observations[i + 1]] * beta[i + 1, :])\n    numerator = alpha[t, :] * beta[t, :]\n    denominator = np.sum(numerator)\n    gamma = numerator / denominator\n    gamma_rounded = [round(p, 4) for p in gamma]\n    return gamma_rounded"}
{"task_id": 552, "completion_id": 8, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    O = np.array(observations)\n    N = len(pi)\n    T = len(O)\n    alpha = np.zeros((T, N))\n    alpha[0, :] = pi * B[:, O[0]]\n    for t_step in range(1, T):\n        for i in range(N):\n            alpha[t_step, i] = np.sum(alpha[t_step - 1, :] * A[:, i]) * B[i, O[t_step]]\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1\n    for t_step in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t_step, i] = np.sum(A[i, :] * B[:, O[t_step + 1]] * beta[t_step + 1, :])\n    numerator = alpha[t, :] * beta[t, :]\n    denominator = np.sum(numerator)\n    gamma_t = numerator / denominator\n    return [round(prob, 4) for prob in gamma_t]"}
{"task_id": 552, "completion_id": 9, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    N = len(pi)\n    T = len(observations)\n    alpha = np.zeros((T, N))\n    alpha[0] = pi * B[:, observations[0]]\n    for t_idx in range(1, T):\n        for j in range(N):\n            alpha[t_idx, j] = np.dot(alpha[t_idx - 1], A[:, j]) * B[j, observations[t_idx]]\n    beta = np.zeros((T, N))\n    beta[T - 1] = 1.0\n    for t_idx in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t_idx, i] = np.dot(A[i, :], B[:, observations[t_idx + 1]] * beta[t_idx + 1, :])\n    numerator = alpha[t] * beta[t]\n    denominator = np.sum(numerator)\n    gamma_t = numerator / denominator\n    return [round(prob, 4) for prob in gamma_t]"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample. Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = len(data)\n    labels = [-1] * n_samples\n    cluster_id = 0\n    distances = np.zeros((n_samples, n_samples), dtype=float)\n    for i in range(n_samples):\n        for j in range(n_samples):\n            distances[i, j] = np.linalg.norm(data[i] - data[j])\n    neighborhoods = []\n    for i in range(n_samples):\n        neighbors = [j for j in range(n_samples) if distances[i, j] <= eps]\n        neighborhoods.append(neighbors)\n    core_points = []\n    for i in range(n_samples):\n        if len(neighborhoods[i]) >= min_samples:\n            core_points.append(i)\n    for point in range(n_samples):\n        if point not in core_points or labels[point] >= 0:\n            continue\n        cluster_id += 1\n        queue = deque()\n        labels[point] = cluster_id\n        queue.append(point)\n        while queue:\n            current_point = queue.popleft()\n            for neighbor in neighborhoods[current_point]:\n                if labels[neighbor] == -1:\n                    labels[neighbor] = cluster_id\n                    if neighbor in core_points:\n                        queue.append(neighbor)\n    return labels"}
{"task_id": 555, "completion_id": 1, "solution": "import numpy as np\nfrom collections import deque\nimport numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points are labelled -1,\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    distance_matrix = np.zeros(shape=(n_samples, n_samples), dtype=np.float64)\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j:\n                dist = np.linalg.norm(data[i] - data[j])\n                distance_matrix[i, j] = dist\n    neighborhood = [set() for _ in range(n_samples)]\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j:\n                if distance_matrix[i, j] <= eps:\n                    neighborhood[i].add(j)\n    current_cluster = 0\n    for point in range(n_samples):\n        if labels[point] == -1:\n            neighborhood_size = len(neighborhood[point])\n            if neighborhood_size >= min_samples:\n                current_cluster += 1\n                queue = deque()\n                labels[point] = current_cluster\n                queue.append(point)\n                while queue:\n                    current = queue.popleft()\n                    for neighbor in neighborhood[current]:\n                        if labels[neighbor] == -1:\n                            labels[neighbor] = current_cluster\n                            if len(neighborhood[neighbor]) >= min_samples:\n                                queue.append(neighbor)\n    return labels\ndata = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\nlabels = dbscan(data, eps=1.5, min_samples=2)"}
{"task_id": 555, "completion_id": 2, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    cluster_id = 1\n\n    def euclidean_distance(x1, x2):\n        \"\"\"Helper function to compute Euclidean distance between two points.\"\"\"\n        return np.sqrt(np.sum((x1 - x2) ** 2))\n    neighbor_indices = [[] for _ in range(n_samples)]\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            dist = euclidean_distance(data[i], data[j])\n            if dist <= eps:\n                neighbor_indices[i].append(j)\n                neighbor_indices[j].append(i)\n    core_points = []\n    for (i, neighbors) in enumerate(neighbor_indices):\n        if len(neighbors) + 1 >= min_samples:\n            core_points.append(i)\n    for point in core_points:\n        if labels[point] == -1:\n            queue = deque([point])\n            labels[point] = cluster_id\n            while queue:\n                current_point = queue.popleft()\n                for neighbor in neighbor_indices[current_point]:\n                    if labels[neighbor] == -1:\n                        labels[neighbor] = cluster_id\n                        if len(neighbor_indices[neighbor]) + 1 >= min_samples:\n                            queue.append(neighbor)\n            cluster_id += 1\n    return labels"}
{"task_id": 555, "completion_id": 3, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"\n    Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample. Noise points receive the label \u20131,\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    cluster_id = 1\n    distances = np.zeros((n_samples, n_samples), dtype=np.float64)\n    for i in range(n_samples):\n        for j in range(n_samples):\n            distance = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n            distances[i, j] = distance\n    neighborhoods = []\n    for i in range(n_samples):\n        neighbors = np.where(distances[i, :] <= eps)[0].tolist()\n        neighborhoods.append(neighbors)\n    core_points = [i for (i, neighbors) in enumerate(neighborhoods) if len(neighbors) + 1 >= min_samples]\n    for point_idx in range(n_samples):\n        if labels[point_idx] != -1:\n            continue\n        if point_idx not in core_points:\n            continue\n        labels[point_idx] = cluster_id\n        queue = deque([point_idx])\n        while queue:\n            current_point = queue.popleft()\n            for neighbor in neighborhoods[current_point]:\n                if labels[neighbor] == -1:\n                    if len(neighborhoods[neighbor]) + 1 >= min_samples:\n                        labels[neighbor] = cluster_id\n                        queue.append(neighbor)\n                    else:\n                        labels[neighbor] = cluster_id\n        cluster_id += 1\n    return labels"}
{"task_id": 555, "completion_id": 4, "solution": "import numpy as np\nfrom collections import deque\nimport math\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    cluster_id = 0\n\n    def euclidean_distance(p1, p2):\n        return math.sqrt(np.sum((p1 - p2) ** 2))\n    neighborhoods = [[] for _ in range(n_samples)]\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j and euclidean_distance(data[i], data[j]) <= eps:\n                neighborhoods[i].append(j)\n    core_points = [i for i in range(n_samples) if len(neighborhoods[i]) >= min_samples - 1]\n    for point_idx in range(n_samples):\n        if labels[point_idx] == -1 and point_idx in core_points:\n            cluster_id += 1\n            queue = deque()\n            labels[point_idx] = cluster_id\n            queue.append(point_idx)\n            while queue:\n                current_point = queue.popleft()\n                for neighbor_idx in neighborhoods[current_point]:\n                    if labels[neighbor_idx] == -1:\n                        labels[neighbor_idx] = cluster_id\n                        if neighbor_idx in core_points:\n                            queue.append(neighbor_idx)\n    return labels"}
{"task_id": 555, "completion_id": 5, "solution": "import numpy as np\nfrom collections import deque\nimport numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    cluster_id = 0\n    dists = np.zeros((n_samples, n_samples), dtype=np.float64)\n    for i in range(n_samples):\n        for j in range(i, n_samples):\n            dist = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n            dists[i, j] = dist\n            dists[j, i] = dist\n    neighbors = []\n    for i in range(n_samples):\n        neighbor_indices = [j for j in range(n_samples) if dists[i, j] <= eps]\n        neighbors.append(neighbor_indices)\n    core_points = [i for (i, idx_list) in enumerate(neighbors) if len(idx_list) >= min_samples]\n    for i in range(n_samples):\n        if labels[i] == -1 and i in core_points:\n            cluster_id += 1\n            queue = deque()\n            labels[i] = cluster_id\n            queue.append(i)\n            while queue:\n                current_point = queue.popleft()\n                for neighbor in neighbors[current_point]:\n                    if labels[neighbor] == -1:\n                        labels[neighbor] = cluster_id\n                        if neighbor in core_points:\n                            queue.append(neighbor)\n    return labels\ndata = np.array([[1, 2], [2, 5], [5, 8], [6, 8], [8, 8], [9, 6], [12, 5], [15, 5]])\nlabels = dbscan(data, eps=3.0, min_samples=2)"}
{"task_id": 555, "completion_id": 6, "solution": "import numpy as np\nfrom collections import deque\nimport numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    cluster_id = 1\n    distances = np.sqrt(((data[:, np.newaxis, :] - data[np.newaxis, :, :]) ** 2).sum(axis=2))\n    neighborhood = [np.where(distances[i] <= eps)[0] for i in range(n_samples)]\n    core_points = [i for i in range(n_samples) if len(neighborhood[i]) >= min_samples]\n    for point in range(n_samples):\n        if labels[point] == -1:\n            if point not in core_points:\n                continue\n            labels[point] = cluster_id\n            queue = deque()\n            queue.append(point)\n            while queue:\n                current_point = queue.popleft()\n                for neighbor in neighborhood[current_point]:\n                    if labels[neighbor] == -1:\n                        labels[neighbor] = cluster_id\n                        if neighbor in core_points:\n                            queue.append(neighbor)\n            cluster_id += 1\n    return labels\ndata = np.vstack([data, np.random.randn(20, 2) + np.array([3, 3]), np.random.randn(20, 2) + np.array([-3, -3]), np.random.randn(15, 2) + np.array([-3, 3]), np.random.randn(15, 2) + np.array([3, -3])])\nlabels = dbscan(data, eps=0.6, min_samples=5)"}
{"task_id": 555, "completion_id": 7, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    cluster_id = 1\n    distances = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            distances[i, j] = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n    neighborhoods = []\n    for i in range(n_samples):\n        neighbors = [j for j in range(n_samples) if distances[i, j] <= eps]\n        neighborhoods.append(neighbors)\n    core_points = [i for i in range(n_samples) if len(neighborhoods[i]) >= min_samples]\n    for point in core_points:\n        if labels[point] == -1:\n            queue = deque([point])\n            labels[point] = cluster_id\n            while queue:\n                current = queue.popleft()\n                for neighbor in neighborhoods[current]:\n                    if labels[neighbor] == -1:\n                        labels[neighbor] = cluster_id\n                        if len(neighborhoods[neighbor]) >= min_samples:\n                            queue.append(neighbor)\n            cluster_id += 1\n    return labels\nX = np.array([[1, 2], [2, 5], [3, 6], [8, 7], [8, 8], [25, 80], [80, 70]])\nlabels = dbscan(X, eps=3, min_samples=2)"}
{"task_id": 555, "completion_id": 8, "solution": "import numpy as np\nfrom collections import deque\nimport math\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n\n    def euclidean_distance(p1: np.ndarray, p2: np.ndarray) -> float:\n        return math.sqrt(np.sum((p1 - p2) ** 2))\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    cluster_id = 0\n    neighbors = [[] for _ in range(n_samples)]\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            if euclidean_distance(data[i], data[j]) <= eps:\n                neighbors[i].append(j)\n                neighbors[j].append(i)\n    for i in range(n_samples):\n        if len(neighbors[i]) + 1 >= min_samples:\n            labels[i] = -2\n    for i in range(n_samples):\n        if labels[i] == -2:\n            cluster_id += 1\n            labels[i] = cluster_id\n            labels[i] = cluster_id\n            queue = deque([i])\n            labels[i] = cluster_id\n            while queue:\n                current_point = queue.popleft()\n                for neighbor in neighbors[current_point]:\n                    if labels[neighbor] == -2:\n                        labels[neighbor] = cluster_id\n                        queue.append(neighbor)\n                    elif labels[neighbor] == -1:\n                        labels[neighbor] = cluster_id\n            labels[i] = cluster_id\n    return labels\ndata = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\neps = 3\nmin_samples = 2"}
{"task_id": 555, "completion_id": 9, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    distances = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i, n_samples):\n            dist = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n            distances[i, j] = dist\n            distances[j, i] = dist\n    neighborhoods = []\n    for i in range(n_samples):\n        neighbors = [j for j in range(n_samples) if distances[i, j] <= eps]\n        neighborhoods.append(neighbors)\n    core_points = [i for i in range(n_samples) if len(neighborhoods[i]) >= min_samples]\n    cluster_id = 0\n    for point_idx in range(n_samples):\n        if point_idx in core_points and labels[point_idx] == -1:\n            cluster_id += 1\n            queue = deque()\n            labels[point_idx] = cluster_id\n            queue.append(point_idx)\n            while queue:\n                current_point = queue.popleft()\n                for neighbor in neighborhoods[current_point]:\n                    if labels[neighbor] == -1:\n                        labels[neighbor] = cluster_id\n                        if len(neighborhoods[neighbor]) >= min_samples:\n                            queue.append(neighbor)\n    return labels"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\nimport math\nimport numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Perform Gaussian Mixture Model clustering using the Expectation-Maximization (EM) algorithm.\n    \n    Parameters:\n    - data (np.ndarray): N x D numpy array of N samples with D features.\n    - k (int): Number of Gaussian components.\n    - max_iter (int): Maximum number of EM iterations.\n    - epsilon (float): Tolerance threshold for convergence based on mixture weight delta.\n    \n    Returns:\n    - List[int]: A list of length N where each element is the cluster label of the corresponding sample.\n    \"\"\"\n    (N, D) = data.shape\n    np.random.seed(42)\n    means = data[np.random.choice(N, k, replace=False), :]\n    covariances = [np.cov(data.T) + 1e-06 * np.eye(D) for _ in range(k)]\n    weights = np.ones(k) / k\n    prev_weights = np.copy(weights)\n    for iteration in range(max_iter):\n        responsibilities = np.zeros((N, k))\n        for i in range(k):\n            cov_inv = np.linalg.pinv(covariances[i])\n            cov_det = np.linalg.det(covariances[i])\n            if cov_det < 1e-08:\n                jitter = 1e-06 * np.eye(D)\n                covariances[i] = covariances[i] + jitter\n                cov_det = np.linalg.det(covariances[i])\n                cov_inv = np.linalg.pinv(covariances[i])\n            diff = data - means[i]\n            exponent = -0.5 * np.sum(diff @ cov_inv * diff, axis=1)\n            denom = math.sqrt((2 * np.pi) ** D * cov_det)\n            responsibilities[:, i] = weights[i] * np.exp(exponent) / denom\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        total_responsibility = responsibilities.sum(axis=0)\n        weights = total_responsibility / N\n        for i in range(k):\n            mean = (responsibilities[:, i, np.newaxis] * data).sum(axis=0)\n            mean /= total_responsibility[i]\n            means[i] = mean\n            diff = data - means[i]\n            cov = (responsibilities[:, i, np.newaxis] * diff).T @ diff\n            cov /= total_responsibility[i]\n            cov += 1e-06 * np.eye(D)\n            covariances[i] = cov\n        if np.allclose(prev_weights, weights, atol=epsilon):\n            break\n        prev_weights = np.copy(weights)\n    labels = np.argmax(responsibilities, axis=1)\n    sorted_indices = np.argsort(means[:, 0])\n    for (i, idx) in enumerate(sorted_indices):\n        if i != idx:\n            permutation = np.where(labels == idx, i, labels)\n            labels = permutation\n    return labels.tolist()\nX = np.random.rand(100, 2)\nlabels = gmm_em(X, k=3)"}
{"task_id": 561, "completion_id": 1, "solution": "import numpy as np\nimport math\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Assign each sample in the input data to a cluster using the GMM EM algorithm.\n\n    Parameters:\n        data (np.ndarray): A 2D array of shape (N, D), where N is the number of samples and D is the number of features.\n        k (int): Number of Gaussian components (clusters).\n        max_iter (int): Maximum number of iterations to run the EM algorithm.\n        epsilon (float): Convergence tolerance for the EM algorithm.\n\n    Returns:\n        list[int]: A list of length N where each entry is the cluster label (0 to K-1) assigned to the corresponding sample.\n    \"\"\"\n    (N, D) = data.shape\n    if k == 1:\n        return [0] * N\n    np.random.seed(42)\n    weights = np.random.rand(k)\n    weights /= weights.sum()\n    means = data[np.random.choice(N, k, replace=False)]\n    covariances = np.array([np.cov(data, rowvar=False) for _ in range(k)])\n    jitter = 1e-06 * np.eye(D)\n    covariances = [c + jitter for c in covariances]\n    for _ in range(max_iter):\n        resp = np.zeros((N, k))\n        for i in range(N):\n            for j in range(k):\n                mu = means[j]\n                cov = covariances[j]\n                diff = data[i] - mu\n                exp_term = -0.5 * np.dot(np.dot(diff, np.linalg.inv(cov)), diff.T)\n                det = np.linalg.det(cov)\n                density = weights[j] * np.exp(exp_term) / np.sqrt((2 * np.pi) ** D * det)\n                resp[i, j] = density\n        resp /= resp.sum(axis=1, keepdims=True)\n        old_weights = weights.copy()\n        n_k = resp.sum(axis=0)\n        weights = n_k / N\n        means = resp.T @ data / n_k.reshape(-1, 1)\n        for j in range(k):\n            diff = data - means[j]\n            weighted_diff = resp[:, j].reshape(-1, 1) * diff\n            cov_j = diff.T @ np.diag(resp[:, j]) @ diff / n_k[j]\n            covariances[j] = cov_j + 1e-06 * np.eye(D)\n        if np.allclose(old_weights, weights, atol=epsilon):\n            break\n    cluster_assignments = resp.argmax(axis=1)\n    sorted_indices = np.argsort(means[:, 0])\n    label_map = dict(((old_label, new_label) for (new_label, old_label) in enumerate(sorted_indices)))\n    cluster_assignments = [label_map[label] for label in cluster_assignments]\n    return cluster_assignments"}
{"task_id": 561, "completion_id": 2, "solution": "import numpy as np\nimport math\nimport numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Perform Gaussian Mixture Model clustering using the Expectation-Maximization algorithm.\n\n    Parameters:\n    - data (np.ndarray): 2D array of shape (N, D) where N is the number of samples and D is the feature dimension.\n    - k (int): Number of Gaussian components (clusters).\n    - max_iter (int): Maximum number of EM iterations.\n    - epsilon (float): Convergence tolerance.\n\n    Returns:\n    - list[int]: A list of cluster indices (0 to K-1) assigned to each sample.\n    \"\"\"\n    (N, D) = data.shape\n    np.random.seed(0)\n    idxs = np.random.choice(N, size=k, replace=False)\n    mu = data[idxs]\n    weights = np.random.random(k)\n    weights /= weights.sum()\n    covs = np.array([np.cov(data.T) for _ in range(k)])\n    for iter in range(max_iter):\n        resp = np.zeros((N, k))\n        for i in range(k):\n            inv_cov = np.linalg.inv(covs[i])\n            det = np.linalg.det(covs[i])\n            exponent = -0.5 * np.diag((data - mu[i]) @ inv_cov @ (data - mu[i]).T)\n            density = 1.0 / ((2 * np.pi) ** (D / 2) * np.sqrt(det)) * np.exp(exponent)\n            resp[:, i] = weights[i] * density\n        resp /= resp.sum(axis=1, keepdims=True)\n        Nk = resp.sum(axis=0)\n        mu_new = resp.T @ data / Nk[:, np.newaxis]\n        weights_new = Nk / N\n        covs_new = np.zeros((k, D, D))\n        for i in range(k):\n            centered = data - mu_new[i]\n            weighted_outer = (resp[:, i, np.newaxis, np.newaxis] * np.einsum('ni,nj->nij', centered, centered)).sum(axis=0)\n            covs_new[i] = weighted_outer / Nk[i]\n        change = np.linalg.norm(weights_new - weights)\n        weights = weights_new\n        mu = mu_new\n        covs = covs_new\n        if change < epsilon:\n            break\n    cluster_assignments = np.argmax(resp, axis=1)\n    sorted_indices = np.argsort(mu[:, 0])\n    mapping = {int(cluster): int(i) for (i, cluster) in enumerate(sorted_indices)}\n    final_labels = [mapping[label] for label in cluster_assignments]\n    return final_labels\ndata = np.vstack([np.random.multivariate_normal([0, 0], [[1, 0.5], [0.5, 1]], 100), np.random.multivariate_normal([5, 5], [[1, -0.5], [-0.5, 1]], 100), np.random.multivariate_normal([-5, 5], [[2, 0], [0, 2]], 100)])"}
{"task_id": 561, "completion_id": 3, "solution": "import numpy as np\nimport math\nimport numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Apply the Expectation-Maximization (EM) algorithm to fit a Gaussian Mixture Model (GMM).\n\n    Args:\n        data (np.ndarray): 2D array of shape (N, D) containing N samples with D features.\n        k (int): Number of Gaussian components.\n        max_iter (int): Maximum number of EM iterations.\n        epsilon (float): Tolerance for stopping condition based on change in weights.\n\n    Returns:\n        list[int]: Cluster label for each sample (0 to k-1), deterministically ordered.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k == 1:\n        return [0] * n_samples\n    np.random.seed(0)\n    weights = np.ones(k) / k\n    means = data[np.random.choice(n_samples, k, replace=False)]\n    covariances = [np.cov(data.T) + np.eye(n_features) * 1e-06] * k\n    for iteration in range(max_iter):\n        responsibilities = np.zeros((n_samples, k))\n        for i in range(k):\n            diff = data - means[i]\n            inv_cov = np.linalg.inv(covariances[i])\n            coeff = (2 * math.pi) ** (n_features / 2) * np.sqrt(np.linalg.det(covariances[i]))\n            log_prob = -0.5 * np.einsum('nj,jk,nk->n', diff, inv_cov, diff)\n            responsibilities[:, i] = weights[i] / coeff * np.exp(log_prob)\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        Nk = responsibilities.sum(axis=0)\n        weights = Nk / n_samples\n        means = np.dot(responsibilities.T, data) / Nk[:, None]\n        for i in range(k):\n            diff = data - means[i]\n            weighted_diff = responsibilities[:, i, None] * diff\n            covariances[i] = np.dot(weighted_diff.T, diff) / Nk[i]\n        if np.linalg.norm(weights - Nk / n_samples) < epsilon:\n            break\n    labels = responsibilities.argmax(axis=1)\n    mean_sort_indices = np.argsort(means[:, 0])\n    reverse_mapping = {old: new for (new, old) in enumerate(mean_sort_indices)}\n    sorted_labels = [reverse_mapping[label] for label in labels]\n    return sorted_labels\ndata1 = np.random.multivariate_normal(mean=[0, 0], cov=[[1, 0], [0, 1]], size=100)\ndata2 = np.random.multivariate_normal(mean=[5, 5], cov=[[1, 0], [0, 1]], size=100)\ndata = np.vstack((data1, data2))\nlabels = gmm_em(data, k=2)"}
{"task_id": 561, "completion_id": 4, "solution": "import numpy as np\nimport math\nimport numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Fits a Gaussian Mixture Model to data using the EM algorithm and returns cluster labels.\n\n    Args:\n        data (np.ndarray): A 2-D NumPy array of shape (N, D), where N is the number of samples\n                           and D is the number of features.\n        k (int): The number of Gaussian components.\n        max_iter (int): Maximum number of EM iterations.\n        epsilon (float): Convergence tolerance for the change in mixture weights.\n\n    Returns:\n        list[int]: A list of cluster labels, one per sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k == 1:\n        return [0] * n_samples\n    np.random.seed(42)\n    means = data[np.random.choice(n_samples, size=k, replace=False)]\n    covariances = [np.cov(data.T) + 1e-06 * np.eye(n_features) for _ in range(k)]\n    weights = np.full(k, 1 / k)\n    prev_weights = None\n    for iteration in range(max_iter):\n        responsibilities = np.zeros((n_samples, k))\n        for i in range(k):\n            diff = data - means[i]\n            cov_inv = np.linalg.inv(covariances[i])\n            det = np.linalg.det(covariances[i])\n            coeff = 1.0 / np.sqrt((2 * np.pi) ** n_features * det + 1e-10)\n            exponent = np.exp(-0.5 * np.sum(diff @ cov_inv * diff, axis=1))\n            responsibilities[:, i] = weights[i] * coeff * exponent\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        Nk = responsibilities.sum(axis=0)\n        weights = Nk / n_samples\n        means = responsibilities.T @ data / Nk[:, np.newaxis]\n        for i in range(k):\n            diff = data - means[i]\n            covariances[i] = (responsibilities[:, i, np.newaxis] * diff).T @ diff / Nk[i]\n            covariances[i] += 1e-06 * np.eye(n_features)\n        if prev_weights is not None and np.max(np.abs(weights - prev_weights)) < epsilon:\n            break\n        prev_weights = weights.copy()\n    labels = np.argmax(responsibilities, axis=1)\n    idx_sorted = np.argsort(means[:, 0])\n    label_map = {old: new for (new, old) in enumerate(idx_sorted)}\n    labels = [label_map[label] for label in labels]\n    return labels\nX = np.vstack([np.random.normal(loc=[0, 0], scale=1, size=(100, 2)), np.random.normal(loc=[5, 5], scale=1, size=(100, 2)), np.random.normal(loc=[-5, 5], scale=1, size=(100, 2))])\nlabels = gmm_em(X, k=3)"}
{"task_id": 561, "completion_id": 5, "solution": "import numpy as np\nimport math\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Gaussian Mixture Model clustering using the Expectation-Maximization algorithm.\n    \n    Parameters:\n        data (np.ndarray): A 2-D NumPy array where each row represents a sample.\n        k (int): Number of Gaussian components.\n        max_iter (int): Maximum number of iterations to perform.\n        epsilon (float): Tolerance for convergence based on change in mixture weights.\n        \n    Returns:\n        list[int]: A Python list where each element corresponds to the cluster label\n                   of the respective sample in the data.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k == 1:\n        return [0] * n_samples\n    np.random.seed(42)\n    indices = np.random.choice(n_samples, size=k, replace=False)\n    means = data[indices]\n    covariances = np.array([np.cov(data, rowvar=False) for _ in range(k)])\n    covariances += 1e-06 * np.eye(n_features)\n    weights = np.full(k, 1.0 / k)\n    prev_weights = None\n    for iteration in range(max_iter):\n        responsibilities = np.zeros((n_samples, k))\n        for i in range(k):\n            diff = data - means[i]\n            cov_inv = np.linalg.inv(covariances[i])\n            cov_det = np.linalg.det(covariances[i])\n            const = 1.0 / math.sqrt((2 * np.pi) ** n_features * cov_det)\n            exponent = -0.5 * np.sum(diff @ cov_inv * diff, axis=1)\n            responsibilities[:, i] = weights[i] * const * np.exp(exponent)\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        resp_sum = responsibilities.sum(axis=0)\n        new_weights = resp_sum / n_samples\n        new_means = responsibilities.T @ data / resp_sum[:, np.newaxis]\n        for i in range(k):\n            diff = data - new_means[i]\n            centered_diff = responsibilities[:, i, np.newaxis] * diff\n            new_cov = centered_diff.T @ diff / resp_sum[i]\n            new_cov += 1e-06 * np.eye(n_features)\n            new_cov = (new_cov + new_cov.T) / 2\n            new_cov = np.where(np.abs(new_cov) < 1e-06, 1e-06, new_cov)\n            covariances[i] = new_cov\n        means = new_means\n        weights = new_weights\n        if prev_weights is not None:\n            if np.max(np.abs(weights - prev_weights)) < epsilon:\n                break\n        prev_weights = weights\n    labels = np.argmax(responsibilities, axis=1)\n    mean_order = np.argsort(means[:, 0])\n    new_to_old_indices = {new_idx: int(old_idx) for (new_idx, old_idx) in enumerate(mean_order)}\n    deterministic_labels = [new_to_old_indices[label] for label in labels]\n    return deterministic_labels"}
{"task_id": 561, "completion_id": 6, "solution": "import numpy as np\nimport math\nfrom numpy.typing import ArrayLike\nfrom typing import List\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> List[int]:\n    \"\"\"\n    Perform Gaussian Mixture Model clustering via Expectation-Maximization (EM).\n\n    Parameters:\n        data (np.ndarray): Input data, shape (N, D), where N is number of samples and D is number of features.\n        k (int): Number of Gaussian components.\n        max_iter (int): Maximum number of EM iterations.\n        epsilon (float): Convergence tolerance on change in mixture weights.\n\n    Returns:\n        List[int]: A list of predicted cluster labels (0 to K-1) for every sample.\n    \"\"\"\n    (n, d) = data.shape\n    np.random.seed(42)\n    weights = np.random.dirichlet(np.ones(k))\n    means = data[np.random.choice(n, k, replace=False), :]\n    covars = [np.eye(d) for _ in range(k)]\n    for iteration in range(max_iter):\n        resp = np.zeros((n, k))\n        for j in range(k):\n            covar = np.linalg.inv(covars[j])\n            det = np.linalg.det(covars[j])\n            if det <= 0:\n                covars[j] += np.eye(d) * 1e-05\n                det = np.linalg.det(covars[j])\n            mahal = np.sum((data - means[j]) @ np.linalg.inv(covars[j]) * (data - means[j]), axis=1)\n            numerator = weights[j] * np.exp(-0.5 * mahal) / np.sqrt((2 * math.pi) ** d * det)\n            resp[:, j] = numerator\n        resp /= resp.sum(axis=1, keepdims=True)\n        old_weights = weights.copy()\n        n_k = np.sum(resp, axis=0)\n        weights = n_k / n\n        for j in range(k):\n            means[j] = (resp[:, j].reshape(-1, 1) * data).sum(axis=0) / n_k[j]\n            centered = data - means[j]\n            weighted_outer = (resp[:, j].reshape(-1, 1, 1) * (centered[:, :, None] @ centered[:, None, :])).sum(axis=0)\n            covars[j] = weighted_outer / n_k[j]\n        if np.abs(weights - old_weights).max() < epsilon:\n            break\n    labels = np.argmax(resp, axis=1)\n    sorted_indices = np.argsort(means[:, 0])\n    cluster_means_first_coord = means[sorted_indices]\n    labels = np.searchsorted(sorted_indices, labels)\n    return list(labels)\ndata = np.vstack([data, np.random.randn(100, 2)])\nlabels = gmm_em(data, k=2)"}
{"task_id": 561, "completion_id": 7, "solution": "import numpy as np\nimport math\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Perform clustering using Gaussian Mixture Model with Expectation-Maximization algorithm.\n    \n    Args:\n        data: A 2D NumPy array with shape (N, D), where N is the number of samples and D is the number of features\n        k: Number of Gaussian components\n        max_iter: Maximum number of iterations (default 200)\n        epsilon: Convergence tolerance threshold on weight differences (default 1e-4)\n    \n    Returns:\n        A list of length N with cluster labels (0 to k-1) for each sample\n        \n    Implementation details:\n        - Randomly initializes parameters for k components\n        - Uses full covariance matrices\n        - Uses EM algorithm with convergence check on weight differences\n        - Assigns samples to the component with highest posterior probability\n        - Sorts components by first coordinate of means for deterministic output\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k == 1:\n        return [0] * n_samples\n    np.random.seed(42)\n    indices = np.random.choice(n_samples, k, replace=False)\n    means = data[indices]\n    covariances = np.array([np.cov(data, rowvar=False) for _ in range(k)])\n    if np.isnan(covariances).any():\n        covariances = np.array([np.eye(n_features) * data.std() for _ in range(k)])\n    weights = np.full(k, 1.0 / k)\n    for _ in range(max_iter):\n        responsibilities = np.zeros((n_samples, k))\n        for i in range(k):\n            diff = data - means[i]\n            cov_inv = np.linalg.inv(covariances[i])\n            det = np.linalg.det(covariances[i])\n            if det < 1e-08:\n                covariances[i] = covariances[i] + np.eye(n_features) * 1e-06\n                det = np.linalg.det(covariances[i])\n            exponent = -0.5 * np.sum(diff @ cov_inv * diff, axis=1)\n            coeff = 1 / (math.pow(2 * math.pi, n_features / 2) * math.sqrt(det))\n            responsibilities[:, i] = weights[i] * coeff * np.exp(exponent)\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        n_i = responsibilities.sum(axis=0)\n        n_i = np.clip(n_i, 1e-08, None)\n        new_weights = n_i / n_samples\n        if np.max(np.abs(new_weights - weights)) < epsilon:\n            break\n        means = responsibilities.T @ data / n_i[:, np.newaxis]\n        for i in range(k):\n            diff = data - means[i]\n            covariances[i] = (responsibilities[:, i].reshape(-1, 1) * diff).T @ diff / n_i[i]\n        weights = new_weights\n    labels = responsibilities.argmax(axis=1)\n    order = np.argsort(means[:, 0])\n    mapping = {old: new for (new, old) in enumerate(order)}\n    return [mapping[label] for label in labels]"}
{"task_id": 561, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Gaussian Mixture Model using the Expectation-Maximization (EM) algorithm.\n\n    Parameters:\n        data (np.ndarray): N samples with D features (shape N x D).\n        k (int): Number of Gaussian components.\n        max_iter (int): Maximum number of iterations.\n        epsilon (float): Tolerance for convergence.\n\n    Returns:\n        list[int]: A list of cluster labels for all data samples (length N).\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k == 1:\n        return [0] * n_samples\n    np.random.seed(42)\n    indices = np.random.choice(n_samples, k, replace=False)\n    mu = data[indices]\n    weights = np.full(k, 1.0 / k)\n    covs = [np.cov(data, rowvar=False) + 1e-06 * np.eye(n_features) for _ in range(k)]\n    prev_weights = np.copy(weights)\n    for _ in range(max_iter):\n        weights_probs = np.zeros((n_samples, k))\n        for i in range(k):\n            diff = data - mu[i]\n            inv_cov = np.linalg.inv(covs[i])\n            log_det = np.log(np.linalg.det(covs[i]))\n            weights_probs[:, i] = weights[i] * np.exp(-0.5 * np.sum(diff @ inv_cov * diff, axis=1)) / np.sqrt((2 * math.pi) ** n_features)\n            weights_probs[:, i] = weights[i] * np.exp(-0.5 * np.einsum('nd,dd,nd->n', diff, inv_cov, diff)) / np.sqrt((2 * math.pi) ** n_features)\n        weights_probs /= weights_probs.sum(axis=1, keepdims=True)\n        N_k = weights_probs.sum(axis=0)\n        weights = N_k / n_samples\n        mu = weights_probs.T @ data / N_k[:, np.newaxis]\n        for i in range(k):\n            diff = data - mu[i]\n            covs[i] = (weights_probs[:, i, np.newaxis] * diff).T @ diff / N_k[i]\n            covs[i] += 1e-06 * np.eye(n_features)\n        if np.sqrt(np.sum((weights - prev_weights) ** 2)) < epsilon:\n            break\n        prev_weights = np.copy(weights)\n    responsibilities = np.argmax(weights_probs, axis=1)\n    mean_first_coords = [mu[i][0] for i in range(k)]\n    order = np.argsort(mean_first_coords)\n    relabeling_map = {i: idx for (idx, i) in enumerate(order)}\n    responsibilities = [relabeling_map[label] for label in responsibilities]\n    return responsibilities.tolist()\ndata = np.random.rand(1000, 2)"}
{"task_id": 561, "completion_id": 9, "solution": "import numpy as np\nimport math\nfrom sklearn.datasets import make_blobs\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Fits a Gaussian Mixture Model (GMM) using the Expectation\u2013Maximization (EM) algorithm.\n    \n    Parameters:\n    - data (np.ndarray): A 2-D NumPy array of N samples with D features.\n    - k (int): Number of Gaussian components.\n    - max_iter (int): Maximum number of EM iterations.\n    - epsilon (float): Convergence tolerance for stopping criteria.\n\n    Returns:\n    - A list of cluster labels (integers from 0 to k-1) for each sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    np.random.seed(42)\n    weights = np.random.dirichlet(np.ones(k), size=1)[0]\n    means = data[np.random.choice(n_samples, k, replace=False)]\n    covariances = [np.cov(data, rowvar=False) + 1e-06 * np.eye(n_features)] * k\n    responsibilities = np.zeros((n_samples, k))\n    for _ in range(max_iter):\n        prev_weights = weights.copy()\n        for i in range(k):\n            diff = data - means[i]\n            inv_cov = np.linalg.inv(covariances[i])\n            det_cov = np.linalg.det(covariances[i])\n            exp_term = np.exp(-0.5 * np.sum(diff @ inv_cov * diff, axis=1))\n            norm_const = (2 * np.pi) ** (n_features / 2) * np.sqrt(det_cov)\n            responsibilities[:, i] = weights[i] * exp_term / norm_const\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        Nk = responsibilities.sum(axis=0)\n        if np.any(Nk < 1e-09):\n            weights = np.random.dirichlet(np.ones(k), size=1)[0]\n            means = data[np.random.choice(n_samples, k, replace=False)]\n            covariances = [np.cov(data, rowvar=False) + 1e-06 * np.eye(n_features)] * k\n            continue\n        weights = Nk / n_samples\n        for i in range(k):\n            weighted_data = responsibilities[:, i, np.newaxis] * data\n            means[i] = np.sum(weighted_data, axis=0) / Nk[i]\n            diff = data - means[i]\n            covariances[i] = diff.T @ (responsibilities[:, i, np.newaxis] * diff) / Nk[i]\n            covariances[i] += 1e-06 * np.eye(n_features)\n        if np.allclose(weights, prev_weights, atol=epsilon):\n            break\n    labels = np.argmax(responsibilities, axis=1)\n    mean_values = np.array([means[i][0] for i in range(k)])\n    sorted_indices = np.argsort(mean_values)\n    label_map = {old: new for (new, old) in enumerate(sorted_indices)}\n    labels = [label_map[label] for label in labels]\n    return labels"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> List[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    N = data.shape[0]\n    diff = data[:, np.newaxis, :] - data[np.newaxis, :, :]\n    distances_squared = np.sum(diff ** 2, axis=2)\n    similarity = np.exp(-gamma * distances_squared)\n    D = np.diag(np.sum(similarity, axis=1))\n    L = D - similarity\n    if method == 'normalized':\n        sqrtD_inv = np.diag(1.0 / np.sqrt(np.diag(D) + 1e-10))\n        L = sqrtD_inv @ L @ sqrtD_inv\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    U = eigenvectors[:, :n_cluster]\n    if method == 'normalized':\n        norms = np.linalg.norm(U, axis=1)\n        U = U / norms[:, np.newaxis]\n    if n_cluster == 1:\n        return [0] * N\n    idx = np.arange(N)\n    centroids = U[:n_cluster]\n    assignments = np.zeros(N, dtype=int)\n    for _ in range(100):\n        diff = U[np.newaxis, :, :] - centroids[:, np.newaxis, :]\n        distances = np.sqrt(np.sum(diff ** 2, axis=2))\n        new_assignments = np.argmin(distances, axis=0)\n        if np.array_equal(new_assignments, assignments):\n            break\n        assignments = new_assignments\n        for i in range(n_cluster):\n            centroids[i] = U[assignments == i].mean(axis=0)\n    cluster_indices = {}\n    for label in np.unique(assignments):\n        cluster_indices[label] = np.where(assignments == label)[0].min()\n    sorted_labels = sorted(cluster_indices.items(), key=lambda x: x[1])\n    label_mapping = {old_label: new_label for (new_label, (old_label, _)) in enumerate(sorted_labels)}\n    final_labels = [label_mapping[label] for label in assignments]\n    return final_labels.tolist()"}
{"task_id": 562, "completion_id": 1, "solution": "import numpy as np\nfrom typing import List\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> List[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    N = data.shape[0]\n    pairwise_sq_dist = np.sum(data ** 2, axis=1, keepdims=True) + np.sum(data ** 2, axis=1, keepdims=True).T - 2 * data @ data.T\n    W = np.exp(-gamma * pairwise_sq_dist)\n    D = np.diag(W.sum(axis=1))\n    L = D - W\n    if method == 'normalized':\n        D_sqrt_inv = np.diag(1.0 / np.sqrt(np.diag(D)))\n        L_sym = D_sqrt_inv @ L @ D_sqrt_inv\n        L = L_sym\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    order = np.argsort(eigenvalues)\n    U = eigenvectors[:, order[:n_cluster]]\n    if method == 'normalized':\n        norms = np.linalg.norm(U, axis=1)\n        U = U / norms[:, np.newaxis]\n    centroids = U[:n_cluster, :].copy()\n    labels = np.zeros(N, dtype=int)\n    prev_labels = np.ones(N, dtype=int) * -1\n    while not np.array_equal(prev_labels, labels):\n        prev_labels = labels.copy()\n        for i in range(N):\n            dists = np.sum((U[i, :] - centroids) ** 2, axis=1)\n            labels[i] = np.argmin(dists)\n        for k in range(n_cluster):\n            if np.any(labels == k):\n                centroids[k, :] = U[labels == k, :].mean(axis=0)\n    original_cluster_assignments = {}\n    for i in range(N):\n        if labels[i] not in original_cluster_assignments:\n            original_cluster_assignments[labels[i]] = i\n    sorted_labels = sorted(original_cluster_assignments.items(), key=lambda x: x[1])\n    mapping = {old_label: new_label for (new_label, (old_label, _)) in enumerate(sorted_labels)}\n    for i in range(N):\n        labels[i] = mapping[labels[i]]\n    return labels.tolist()"}
{"task_id": 562, "completion_id": 2, "solution": "import numpy as np\nfrom typing import list\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n    \n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n    \n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    (N, d) = data.shape\n    if n_cluster == 1:\n        return [0] * N\n    diff = data[:, np.newaxis, :] - data[np.newaxis, :, :]\n    distances_squared = np.sum(diff ** 2, axis=2)\n    W = np.exp(-gamma * distances_squared)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    if method == 'normalized':\n        D_sqrt_inv = np.diag(1.0 / np.sqrt(np.diag(D) + 1e-10))\n        L_sym = D_sqrt_inv @ L @ D_sqrt_inv\n        L = L_sym\n    (eigvals, eigvecs) = np.linalg.eigh(L)\n    U = eigvecs[:, :n_cluster]\n    if method == 'normalized':\n        norms = np.linalg.norm(U, axis=1)\n        norms[norms == 0] = 1.0\n        U = U / norms[:, np.newaxis]\n    centroids = U[:n_cluster, :]\n    labels = np.zeros(N, dtype=int)\n    while True:\n        distances = np.sum((U[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2, axis=2)\n        new_labels = np.argmin(distances, axis=1)\n        if np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n        for i in range(n_cluster):\n            if np.sum(labels == i) > 0:\n                centroids[i, :] = np.mean(U[labels == i, :], axis=0)\n            else:\n                centroids[i, :] = U[i, :]\n    label_dict = {}\n    for label in np.unique(labels):\n        indices = np.where(labels == label)[0]\n        label_dict[label] = np.min(indices)\n    sorted_labels = sorted(label_dict.items(), key=lambda x: x[1])\n    new_label_map = {}\n    for (new_label, (old_label, _)) in enumerate(sorted_labels):\n        new_label_map[old_label] = new_label\n    final_labels = [new_label_map[label] for label in labels]\n    return final_labels"}
{"task_id": 562, "completion_id": 3, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    N = data.shape[0]\n    pairwise_sq_dist = np.sum(data ** 2, axis=1, keepdims=True) - 2 * data @ data.T + np.sum(data ** 2, axis=1)\n    W = np.exp(-gamma * pairwise_sq_dist)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    try:\n        (eigenvalues, eigenvectors) = np.linalg.eigh(L, D)\n    except:\n        I = np.eye(L.shape[0]) * 1e-08\n        (eigenvalues, eigenvectors) = np.linalg.eig(L)\n        eigenvalues = np.real(eigenvalues)\n        eigenvectors = np.real(eigenvectors)\n        idx = np.argsort(eigenvalues)\n        eigenvalues = eigenvalues[idx]\n        eigenvectors = eigenvectors[:, idx]\n    U = eigenvectors[:, :n_cluster]\n    if method == 'normalized':\n        D_sqrt_inv = np.diag(1.0 / np.sqrt(np.diag(D) + 1e-08))\n        U = D_sqrt_inv @ U\n        row_norms = np.linalg.norm(U, axis=1, keepdims=True)\n        U = U / row_norms\n    N = U.shape[0]\n    if n_cluster == 1:\n        return [0] * N\n    centroids = U[:n_cluster].copy()\n    labels = np.zeros(N, dtype=int)\n    max_iter = 100\n    for _ in range(max_iter):\n        for i in range(N):\n            distances = np.sum((U[i:i + 1] - centroids) ** 2, axis=1)\n            labels[i] = np.argmin(distances)\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(n_cluster)\n        for i in range(N):\n            new_centroids[labels[i]] += U[i]\n            counts[labels[i]] += 1\n        zero_mask = counts == 0\n        counts[zero_mask] = 1\n        new_centroids = new_centroids / counts[:, np.newaxis]\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    cluster_representatives = np.zeros(n_cluster, dtype=int)\n    for i in range(n_cluster):\n        cluster_points = np.where(labels == i)[0]\n        cluster_representatives[i] = np.min(cluster_points)\n    relabel_map = np.zeros(N, dtype=int)\n    for i in range(n_cluster):\n        cluster_points = np.where(labels == i)[0]\n        for idx in cluster_points:\n            if cluster_representatives[i] == idx:\n                relabel_map[idx] = i\n    new_labels = np.zeros(N, dtype=int)\n    for idx in range(N):\n        cluster_id = labels[idx]\n        new_labels[idx] = np.where(cluster_representatives == idx)[0]\n    sort_idx = np.argsort(cluster_representatives)\n    for i in range(N):\n        new_labels[i] = np.where(sort_idx == labels[i])[0]\n    return new_labels.tolist()"}
{"task_id": 562, "completion_id": 4, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    N = data.shape[0]\n    if n_cluster == 1:\n        return [0] * N\n    diff = data[:, np.newaxis, :] - data[np.newaxis, :, :]\n    sq_dist = np.sum(diff ** 2, axis=-1)\n    W = np.exp(-gamma * sq_dist)\n    D_vec = np.sum(W, axis=1)\n    D = np.diag(D_vec)\n    L = D - W\n    if method == 'normalized':\n        sqrt_D_inv = np.diag(1.0 / np.sqrt(D_vec + 1e-10))\n        L = sqrt_D_inv @ L @ sqrt_D_inv\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    U = eigenvectors[:, :n_cluster]\n    if method == 'normalized':\n        norms = np.linalg.norm(U, axis=1)\n        U = U / (norms[:, np.newaxis] + 1e-10)\n    centroids = np.copy(U[:n_cluster])\n    labels = [0] * N\n    prev_labels = [-1] * N\n    while labels != prev_labels:\n        prev_labels = labels[:]\n        for i in range(N):\n            distances = np.sum((U[i] - centroids) ** 2, axis=1)\n            labels[i] = np.argmin(distances)\n        for k in range(n_cluster):\n            if np.sum(np.array(labels) == k) > 0:\n                centroids[k] = np.mean(U[np.array(labels) == k], axis=0)\n    cluster_to_original = {}\n    for (idx, label) in enumerate(labels):\n        if label not in cluster_to_original:\n            cluster_to_original[label] = idx\n    sorted_clusters = sorted(cluster_to_original.items(), key=lambda x: cluster_to_original[x[0]])\n    new_labels = np.zeros(N, dtype=int)\n    for (new_label, (old_label, _)) in enumerate(sorted_clusters):\n        new_labels = np.where(labels == old_label, new_label, new_labels)\n    return new_labels.tolist()"}
{"task_id": 562, "completion_id": 5, "solution": "import numpy as np\nimport numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    N = data.shape[0]\n    pairwise_sq_dists = np.sum((data[:, np.newaxis, :] - data[np.newaxis, :, :]) ** 2, axis=2)\n    W = np.exp(-gamma * pairwise_sq_dists)\n    D = np.diag(W.sum(axis=1))\n    L = D - W\n    if method == 'normalized':\n        sqrt_D_inv = np.zeros((N, N))\n        for i in range(N):\n            if D[i, i] > 0:\n                sqrt_D_inv[i, i] = 1.0 / np.sqrt(D[i, i])\n        L = sqrt_D_inv @ L @ sqrt_D_inv\n    (eig_vals, eig_vecs) = np.linalg.eigh(L)\n    U = eig_vecs[:, :n_cluster]\n    if method == 'normalized':\n        norms = np.linalg.norm(U, axis=1)\n        norms[norms == 0] = 1.0\n        U = U / norms[:, np.newaxis]\n\n    def kmeans(X, n_clusters=n_cluster):\n        centroids = X[:n_clusters].copy()\n        labels = np.zeros(X.shape[0], dtype=int)\n        while True:\n            old_labels = labels.copy()\n            distances = np.sum((X[:, np.newaxis, :] - centroids) ** 2, axis=2)\n            labels = np.argmin(distances, axis=1)\n            for i in range(n_clusters):\n                if np.sum(labels == i) > 0:\n                    centroids[i] = np.mean(X[labels == i], axis=0)\n                else:\n                    centroids[i] = 0\n            if np.array_equal(labels, old_labels):\n                break\n        return labels\n    labels = kmeans(U)\n    cluster_ids = {}\n    order = np.argsort(np.min((np.arange(N)[labels == i] for i in np.unique(labels))))\n    for (new_label, old_cluster) in enumerate(order):\n        cluster_ids[old_cluster] = new_label\n    final_labels = [cluster_ids[label] for label in labels]\n    return final_labels if n_cluster > 1 else [0] * N\nX = np.vstack([np.random.normal(loc=[0, 0], scale=1.0, size=(100, 2)), np.random.normal(loc=[5, 5], scale=1.0, size=(100, 2)), np.random.normal(loc=[-5, 5], scale=1.0, size=(100, 2))])\nlabels = spectral_clustering(X, n_cluster=3, gamma=0.5, method='normalized')"}
{"task_id": 562, "completion_id": 6, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    (N, d) = data.shape\n    pairwise_squares = np.sum(data ** 2, axis=1, keepdims=True) - 2 * data @ data.T + np.sum(data ** 2, axis=1)\n    W = np.exp(-gamma * pairwise_squares)\n    np.fill_diagonal(W, 0)\n    D = np.diag(np.sum(W, axis=1))\n    if method == 'unnormalized':\n        L = D - W\n    elif method == 'normalized':\n        D_sqrt_inv = np.diag(1 / np.sqrt(np.diag(D)))\n        L = D_sqrt_inv @ (D - W) @ D_sqrt_inv\n    else:\n        raise ValueError(\"Unknown method. Choose 'unnormalized' or 'normalized'.\")\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    order = np.argsort(eigenvalues)\n    U = eigenvectors[:, order[:n_cluster]]\n    if method == 'normalized':\n        norms = np.linalg.norm(U, axis=1)\n        U = U / norms[:, np.newaxis]\n    centroids = U[:n_cluster].copy()\n    assignments = np.zeros(N, dtype=int)\n    prev_assignments = None\n    while prev_assignments is None or not np.array_equal(assignments, prev_assignments):\n        prev_assignments = assignments.copy()\n        for i in range(N):\n            distances = np.sum((U[i] - centroids) ** 2, axis=1)\n            assignments[i] = np.argmin(distances)\n        for k in range(n_cluster):\n            cluster_indices = np.where(assignments == k)[0]\n            if cluster_indices.size > 0:\n                centroids[k] = np.mean(U[cluster_indices], axis=0)\n    cluster2label = {}\n    cluster_ids = np.unique(assignments)\n    for label in range(n_cluster):\n        subset_mask = np.isin(assignments, cluster_ids)\n        subset_assignments = np.where(subset_mask)[0]\n        for cluster_id in cluster_ids:\n            cluster_indices = np.where(assignments == cluster_id)[0]\n            orig_indices = np.argsort(cluster_indices)\n            smallest_index = cluster_indices[orig_indices[0]]\n            if smallest_index < subset_assignments[orig_indices[label]]:\n                cluster2label[cluster_id] = label\n                break\n    final_labels = np.zeros(N, dtype=int)\n    for i in range(N):\n        final_labels[i] = cluster2label[assignments[i]]\n    if n_cluster == 1:\n        return [0] * N\n    return final_labels.tolist()"}
{"task_id": 562, "completion_id": 7, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"\n    Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel.\n        method: 'unnormalized' or 'normalized' \u2013 which Laplacian to use.\n\n    Returns:\n        A list of length N where the i-th element is the cluster label for sample i.\n    \"\"\"\n    (N, d) = data.shape\n\n    def pairwise_sq_dist():\n        diff = data[:, np.newaxis, :] - data[np.newaxis, :, :]\n        return np.sum(diff ** 2, axis=-1)\n    dist = pairwise_sq_dist()\n    W = np.exp(-gamma * dist)\n    D_vec = np.sum(W, axis=1)\n    D = np.diag(D_vec)\n    L = D - W\n    if method == 'normalized':\n        D_sqrt_inv = np.diag(1 / np.sqrt(D_vec))\n        L = D_sqrt_inv @ L @ D_sqrt_inv\n    if method == 'normalized':\n        (eigvals, U) = np.linalg.eigh(L)\n    else:\n        (eigvals, eigvecs) = np.linalg.eigh(L)\n        eigidx = np.argsort(eigvals)\n        U = eigvecs[:, eigidx[:n_cluster]]\n    if method == 'normalized':\n        norms = np.linalg.norm(U, axis=1)\n        U = U / norms[:, np.newaxis]\n\n    def kmeans(X, n_centers):\n        centroids = X[:n_centers].copy()\n        (N, _) = X.shape\n\n        def relabel(cluster_indices):\n            sorted_centers_indices = []\n            for clust in range(n_centers):\n                cluster = cluster_indices[clust]\n                centroid_idx = min(cluster)\n                sorted_centers_indices.append(centroid_idx)\n            cluster_id_map = {old_id: new_id for (new_id, old_id) in enumerate(sorted_centers_indices)}\n            labeled = []\n            for cluster_indices in cluster_indices_by_id.values():\n                for idx in cluster_indices:\n                    labeled.append(cluster_id_map[idx])\n            return labeled\n        distances = np.zeros((N, n_centers))\n        prev_labels = np.zeros(N)\n        convergence = False\n        while not convergence:\n            for k in range(n_centers):\n                distances[:, k] = np.sum((X - centroids[k]) ** 2, axis=1)\n            labels = np.argmin(distances, axis=1)\n            if np.array_equal(prev_labels, labels):\n                break\n            cluster_indices_by_id = {i: [] for i in range(n_centers)}\n            for (idx, label) in enumerate(labels):\n                cluster_indices_by_id[label].append(idx)\n            for k in range(n_centers):\n                cluster_indices = cluster_indices_by_id[k]\n                if cluster_indices:\n                    centroids[k] = np.mean(X[cluster_indices], axis=0)\n            prev_labels = labels\n        cluster_indices_by_id = {i: [] for i in range(n_centers)}\n        for (idx, label) in enumerate(labels):\n            cluster_indices_by_id[label].append(idx)\n        relabeled = relabel(cluster_indices_by_id)\n        return relabeled\n    if n_cluster == 1:\n        return [0] * N\n    labels = kmeans(U, n_cluster)\n    return labels\ndata = np.random.rand(100, 2)\nlabels = spectral_clustering(data, n_cluster=3, gamma=1.0, method='normalized')"}
{"task_id": 562, "completion_id": 8, "solution": "import numpy as np\nfrom typing import List\nimport numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> List[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    (N, d) = data.shape\n    if n_cluster == 1:\n        return [0] * N\n    data_squared = np.sum(data ** 2, axis=1)\n    distances = np.abs(data_squared[:, np.newaxis] + data_squared[np.newaxis, :] - 2 * np.dot(data, data.T))\n    similarities = np.exp(-gamma * distances)\n    degrees = np.diag(np.sum(similarities, axis=1))\n    L = degrees - similarities\n    if method == 'normalized':\n        D_sqrt_inv = np.diag(1.0 / np.sqrt(np.diag(degrees) + 1e-10))\n        L = np.dot(D_sqrt_inv, np.dot(L, D_sqrt_inv))\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    idx = np.argsort(eigenvalues)\n    U = eigenvectors[:, idx[:n_cluster]]\n    if method == 'normalized':\n        norms = np.linalg.norm(U, axis=1)\n        U = (U.T / norms).T\n\n    def kmeans(X, K, max_iter=100, eps=0.0001):\n        (N, D) = X.shape\n        centroids = X[:K]\n        labels = np.zeros(N, dtype=int)\n        for _ in range(max_iter):\n            old_labels = labels.copy()\n            dists = np.sum((X[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2, axis=2)\n            labels = np.argmin(dists, axis=1)\n            if np.all(labels == old_labels):\n                break\n            for k in range(K):\n                centroids[k] = X[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k]\n        labels = labels.copy()\n        rep_indices = [np.min(np.where(labels == k)) for k in range(K)]\n        sorted_clusters = np.argsort(rep_indices)\n        new_labels = np.zeros_like(labels)\n        for (i, c) in enumerate(sorted_clusters):\n            new_labels[labels == c] = i\n        return new_labels.tolist()\n    return kmeans(U, n_cluster)\nX = np.array([[1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0]])"}
{"task_id": 562, "completion_id": 9, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    (N, d) = data.shape\n    pairwise_sq_diff = np.sum(data ** 2, axis=1, keepdims=True) + np.sum(data ** 2, axis=1, keepdims=True).T - 2 * data @ data.T\n    W = np.exp(-gamma * pairwise_sq_diff)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    if method == 'normalized':\n        inv_sqrt_D = np.diag(1.0 / np.sqrt(np.diag(D)))\n        L = inv_sqrt_D @ L @ inv_sqrt_D\n    (eig_vals, eig_vecs) = np.linalg.eigh(L)\n    U = eig_vecs[:, :n_cluster]\n    if method == 'normalized':\n        norms = np.linalg.norm(U, axis=1, keepdims=True)\n        norms[norms == 0] = 1\n        U = U / norms\n    centroids = np.copy(U[:n_cluster, :])\n    labels = [0] * N\n    if n_cluster == 1:\n        return [0] * N\n    converged = False\n    while not converged:\n        old_labels = labels\n        for i in range(N):\n            distances = np.sum((U[i] - centroids) ** 2, axis=1)\n            labels[i] = np.argmin(distances)\n        new_centroids = np.zeros_like(centroids)\n        count = np.zeros(n_cluster, dtype=int)\n        for i in range(N):\n            new_centroids[labels[i]] += U[i]\n            count[labels[i]] += 1\n        for k in range(n_cluster):\n            if count[k] > 0:\n                new_centroids[k] /= count[k]\n            else:\n                new_centroids[k] = centroids[k]\n        converged = np.allclose(centroids, new_centroids)\n        centroids = new_centroids\n    cluster_to_original_index = {}\n    for i in range(N):\n        if labels[i] not in cluster_to_original_index:\n            cluster_to_original_index[labels[i]] = i\n    cluster_map = {old_label: new_label for (new_label, (old_label, _)) in enumerate(sorted(cluster_to_original_index.items(), key=lambda x: x[1]))}\n    relabeled = [cluster_map[label] for label in labels]\n    return relabeled"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = X_data.shape[0]\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    converged = False\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            y_i = y_data[i]\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_i * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_i\n                updated = True\n        if not updated:\n            converged = True\n            break\n    w = np.sum(alpha[:, np.newaxis] * y_data[:, np.newaxis] * X_data, axis=0)\n    w = np.round(w, 4).tolist()\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 563, "completion_id": 1, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = X_data.shape[0]\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.dot(alpha * y_data, X_data)\n    w_rounded = [round(val, 4) for val in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 563, "completion_id": 2, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = X_data.shape[0]\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for iteration in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            prediction = y_data[i] * (g + b)\n            if prediction <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.sum(alpha.reshape(-1, 1) * y_data.reshape(-1, 1) * X_data, axis=0)\n    w = [round(x, 4) for x in w]\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 563, "completion_id": 3, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = X_data.shape[0]\n    d = X_data.shape[1]\n    alpha = np.zeros(N)\n    b = 0.0\n    converged = False\n    iteration = 0\n    G = np.dot(X_data, X_data.T)\n    while not converged and iteration < max_iter:\n        converged = True\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[:, i])\n            y_i = y_data[i]\n            if y_i * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_i\n                converged = False\n        iteration += 1\n    w = np.zeros(d)\n    for i in range(N):\n        w += alpha[i] * y_data[i] * X_data[i]\n    w_rounded = [round(float(val), 4) for val in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 563, "completion_id": 4, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = X_data.shape[0]\n    alpha = np.zeros(N)\n    b = 0.0\n    no_update = False\n    iteration = 0\n    G = np.dot(X_data, X_data.T)\n    while not no_update and iteration < max_iter:\n        no_update = True\n        for i in range(N):\n            g = 0.0\n            for j in range(N):\n                g += alpha[j] * y_data[j] * G[j, i]\n            prediction = g + b\n            if y_data[i] * prediction <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                no_update = False\n        if no_update:\n            break\n        iteration += 1\n    w = np.zeros(X_data.shape[1])\n    for i in range(N):\n        w += alpha[i] * y_data[i] * X_data[i, :]\n    w = np.round(w, 4)\n    b = round(b, 4)\n    return (w.tolist(), b)"}
{"task_id": 563, "completion_id": 5, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = X_data.shape[0]\n    d = X_data.shape[1]\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    y = y_data\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.dot(alpha * y, G[:, i])\n            prediction = g + b\n            if y[i] * prediction <= 0:\n                alpha[i] += eta\n                b += eta * y[i]\n                updated = True\n        if not updated:\n            break\n    w = np.zeros(d)\n    for i in range(N):\n        w += alpha[i] * y[i] * X_data[i]\n    w_rounded = [round(x, 4) for x in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 563, "completion_id": 6, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = X_data.shape[0]\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = 0.0\n            for j in range(N):\n                g += alpha[j] * y_data[j] * G[j, i]\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.zeros(X_data.shape[1])\n    for i in range(N):\n        w += alpha[i] * y_data[i] * X_data[i]\n    w_rounded = [round(x, 4) for x in w.tolist()]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 563, "completion_id": 7, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = X_data.shape[0]\n    d = X_data.shape[1]\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    no_update = False\n    iter_count = 0\n    while iter_count < max_iter:\n        no_update = True\n        for i in range(N):\n            g = 0.0\n            for j in range(N):\n                g += alpha[j] * y_data[j] * G[j, i]\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                no_update = False\n        if no_update:\n            break\n        iter_count += 1\n    w = np.zeros(d)\n    for i in range(N):\n        w += alpha[i] * y_data[i] * X_data[i]\n    w = [round(wi, 4) for wi in w]\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 563, "completion_id": 8, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = X_data.shape[0]\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.zeros(X_data.shape[1])\n    for i in range(N):\n        w += alpha[i] * y_data[i] * X_data[i]\n    w_rounded = [round(component, 4) for component in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 563, "completion_id": 9, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = X_data.shape[0]\n    alpha = np.zeros(N)\n    b = 0\n    has_updated = True\n    iter_count = 0\n    G = np.dot(X_data, X_data.T)\n    while has_updated and iter_count < max_iter:\n        has_updated = False\n        for i in range(N):\n            y_i = y_data[i]\n            g = 0\n            for j in range(N):\n                g += alpha[j] * y_data[j] * G[j, i]\n            prediction = g + b\n            if y_i * prediction <= 0:\n                alpha[i] += eta\n                b += eta * y_i\n                has_updated = True\n        iter_count += 1\n    w = np.zeros(X_data.shape[1])\n    for i in range(N):\n        w += alpha[i] * y_data[i] * X_data[i]\n    w = [round(float(component), 4) for component in w]\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 564, "completion_id": 0, "solution": "class Node:\n\n    def __init__(self):\n        self.label = None\n        self.x = None\n        self.s = None\n        self.y = None\n        self.child = []\ndef predict_sample(root: Node, features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        feature_value = features[root.label]\n        for (i, child) in enumerate(root.child):\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        feature_value = features[root.label]\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 564, "completion_id": 1, "solution": "class Node:\n    \"\"\"A simple node for a decision tree.\"\"\"\n\n    def __init__(self):\n        self.label = None\n        self.x = None\n        self.s = None\n        self.y = None\n        self.child = []\ndef predict_sample(root: Node, features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        feature_value = features[root.label]\n        for (i, child) in enumerate(root.child):\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    else:\n        feature_value = features[root.label]\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 564, "completion_id": 2, "solution": "class Node:\n\n    def __init__(self):\n        self.label = None\n        self.x = None\n        self.s = None\n        self.y = None\n        self.child = []\ndef predict_sample(root: Node, features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        label = root.label\n        feature_value = features[label]\n        for child in root.child:\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        label = root.label\n        feature_value = features[label]\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\n    else:\n        raise ValueError(\"Invalid task_type. Must be 'classification' or 'regression'.\")"}
{"task_id": 564, "completion_id": 3, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        feature_value = features[root.label]\n        for child in root.child:\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        feature_value = features[root.label]\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\nfeatures = [1]"}
{"task_id": 564, "completion_id": 4, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if hasattr(root, 'y'):\n        return root.y\n    if task_type == 'classification':\n        feature_index = root.label\n        feature_value = features[feature_index]\n        for child in root.child:\n            if hasattr(child, 'x') and child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        feature_index = root.label\n        feature_value = features[feature_index]\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 564, "completion_id": 5, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if hasattr(root, 'y'):\n        return root.y\n    if task_type == 'classification':\n        feature_value = features[root.label]\n        for (i, child) in enumerate(root.child):\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        feature_value = features[root.label]\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 564, "completion_id": 6, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        feature_value = features[root.label]\n        for child in root.child:\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        feature_value = features[root.label]\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 564, "completion_id": 7, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        feature_value = features[root.label]\n        for (i, child) in enumerate(root.child):\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        feature_value = features[root.label]\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 564, "completion_id": 8, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    feature_value = features[root.label]\n    if task_type == 'classification':\n        for (i, child) in enumerate(root.child):\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 564, "completion_id": 9, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n\n    def _traverse(node, features):\n        if node.y is not None:\n            return node.y\n        if task_type == 'classification':\n            label = node.label\n            target_value = features[label]\n            for child in node.child:\n                if child.x == target_value:\n                    return _traverse(child, features)\n            return _traverse(node.child[1], features)\n        elif task_type == 'regression':\n            label = node.label\n            value = features[label]\n            if value <= node.s:\n                return _traverse(node.child[0], features)\n            else:\n                return _traverse(node.child[1], features)\n    return _traverse(root, features)"}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n\n    def entropy(labels):\n        \"\"\"Calculate entropy of a list of class labels.\"\"\"\n        counts = np.bincount(labels)\n        probabilities = counts / len(labels)\n        return -np.sum((p * math.log2(p) for p in probabilities if p > 0))\n    (n_samples, n_features) = X.shape\n    H_y = entropy(y)\n    max_gain = -1.0\n    best_feature = -1\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        unique_vals = np.unique(feature_values)\n        conditional_entropy = 0.0\n        for val in unique_vals:\n            mask = feature_values == val\n            y_subset = y[mask]\n            p = len(y_subset) / n_samples\n            conditional_entropy += p * entropy(y_subset)\n        gain = H_y - conditional_entropy\n        if gain > max_gain:\n            max_gain = gain\n            best_feature = feature_idx\n    return (best_feature, round(max_gain, 6))"}
{"task_id": 565, "completion_id": 1, "solution": "import numpy as np\nimport math\ndef calculate_entropy(values: np.ndarray) -> float:\n    \"\"\"Calculate the entropy of the class distribution.\"\"\"\n    counts = np.bincount(values)\n    probabilities = counts / len(values)\n    entropy = -np.sum([p * math.log2(p) for p in probabilities if p > 0])\n    return entropy\ndef calculate_information_gain(X: np.ndarray, y: np.ndarray, feature_index: int) -> float:\n    \"\"\"Calculate the information gain for a given feature.\"\"\"\n    n_samples = len(y)\n    entropy_y = calculate_entropy(y)\n    feature_values = X[:, feature_index]\n    unique_values = np.unique(feature_values)\n    weighted_entropy = 0.0\n    for value in unique_values:\n        subset_mask = feature_values == value\n        subset_y = y[subset_mask]\n        probability = len(subset_y) / n_samples\n        subset_entropy = calculate_entropy(subset_y)\n        weighted_entropy += probability * subset_entropy\n    information_gain = entropy_y - weighted_entropy\n    return information_gain\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\"\"\"\n    n_features = X.shape[1]\n    max_gain = -1.0\n    best_feature = 0\n    for i in range(n_features):\n        gain = calculate_information_gain(X, y, i)\n        if gain > max_gain:\n            max_gain = gain\n            best_feature = i\n    max_gain_rounded = round(max_gain, 6)\n    return (best_feature, max_gain_rounded)"}
{"task_id": 565, "completion_id": 2, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n\n    def entropy(labels: np.ndarray) -> float:\n        \"\"\"Calculate the entropy of the label distribution.\"\"\"\n        counts = np.bincount(labels)\n        probs = counts / len(labels)\n        return -np.sum([p * math.log2(p + 1e-12) for p in probs if p > 1e-12])\n    n_features = X.shape[1]\n    H_y = entropy(y)\n    max_gain = -float('inf')\n    best_feature = 0\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        unique_values = np.unique(feature_values)\n        weighted_entropy = 0.0\n        for value in unique_values:\n            mask = feature_values == value\n            subset_y = y[mask]\n            weight = len(subset_y) / len(y)\n            weighted_entropy += weight * entropy(subset_y)\n        ig = H_y - weighted_entropy\n        if ig > max_gain:\n            max_gain = ig\n            best_feature = feature_idx\n    return (best_feature, round(max_gain, 6))"}
{"task_id": 565, "completion_id": 3, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n\n    def entropy(labels: np.ndarray) -> float:\n        \"\"\"Compute entropy of a 1D array of class labels.\"\"\"\n        counts = np.bincount(labels)\n        probs = counts / len(labels)\n        return -np.sum((p * math.log2(p) for p in probs if p > 0))\n    h_y = entropy(y)\n    n_features = X.shape[1]\n    max_gain = -float('inf')\n    best_feature = 0\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        unique_values = np.unique(feature_values)\n        h_y_given_A = 0.0\n        for val in unique_values:\n            subset_idx = feature_values == val\n            subset_y = y[subset_idx]\n            subset_entropy = entropy(subset_y)\n            subset_weight = len(subset_y) / len(y)\n            h_y_given_A += subset_weight * subset_entropy\n        ig = h_y - h_y_given_A\n        if ig > max_gain or (ig == max_gain and feature_idx < best_feature):\n            max_gain = ig\n            best_feature = feature_idx\n    return (best_feature, round(max_gain, 6))\nX = np.array([[0, 0, 1], [0, 1, 2], [1, 1, 2], [1, 2, 0], [2, 2, 1]])\ny = np.array([0, 1, 0, 1, 1])"}
{"task_id": 565, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef entropy(y: np.ndarray) -> float:\n    \"\"\"Calculate the entropy of a 1D array of class labels.\"\"\"\n    (_, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    return -np.sum(probabilities * np.log2(probabilities))\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    num_features = X.shape[1]\n    H_y = entropy(y)\n    max_gain = -np.inf\n    best_feature = 0\n    for feature_index in range(num_features):\n        feature_values = X[:, feature_index]\n        (_, counts) = np.unique(feature_values, return_counts=True)\n        entropy_sum = 0.0\n        for value in np.unique(feature_values):\n            indices = np.where(feature_values == value)[0]\n            conditional_y = y[indices]\n            entropy_sum += len(conditional_y) / len(y) * entropy(conditional_y)\n        information_gain = H_y - entropy_sum\n        if information_gain > max_gain:\n            max_gain = information_gain\n            best_feature = feature_index\n    return (best_feature, round(max_gain, 6))"}
{"task_id": 565, "completion_id": 5, "solution": "import numpy as np\nimport math\ndef entropy(y: np.ndarray) -> float:\n    \"\"\"Calculate the entropy of a label array y.\"\"\"\n    if len(y) == 0:\n        return 0.0\n    counts = np.bincount(y)\n    probs = counts / len(y)\n    return -np.sum((p * math.log2(p) for p in probs if p > 0))\ndef information_gain(X: np.ndarray, y: np.ndarray, feature_index: int) -> float:\n    \"\"\"Calculate the information gain for a given feature.\"\"\"\n    H_y = entropy(y)\n    H_y_A = 0.0\n    for value in np.unique(X[:, feature_index]):\n        mask = X[:, feature_index] == value\n        y_subset = y[mask]\n        p = len(y_subset) / len(y)\n        H_y_A += p * entropy(y_subset)\n    return H_y - H_y_A\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    n_features = X.shape[1]\n    max_gain = -1\n    best_feature = 0\n    for i in range(n_features):\n        gain = information_gain(X, y, i)\n        if gain > max_gain:\n            max_gain = gain\n            best_feature = i\n        elif gain == max_gain:\n            best_feature = min(best_feature, i)\n    return (best_feature, round(max_gain, 6))\nX = np.array([[0, 0, 1], [0, 1, 2], [1, 0, 2], [1, 1, 1], [0, 0, 1]])\ny = np.array([0, 1, 1, 0, 0])"}
{"task_id": 565, "completion_id": 6, "solution": "import numpy as np\nimport math\ndef calculate_entropy(labels: np.ndarray) -> float:\n    \"\"\"Calculate the entropy of a list of class labels.\"\"\"\n    (_, counts) = np.unique(labels, return_counts=True)\n    probabilities = counts / np.sum(counts)\n    entropy = -np.sum(probabilities * np.log2(probabilities))\n    return entropy\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\"\"\"\n    (n_samples, n_features) = X.shape\n    feature_idx = 0\n    max_gain = -float('inf')\n    entropy_y = calculate_entropy(y)\n    for j in range(n_features):\n        feature_values = X[:, j]\n        unique_vals = np.unique(feature_values)\n        weighted_entropy = 0.0\n        for val in unique_vals:\n            mask = feature_values == val\n            subset_y = y[mask]\n            entropy_subset = calculate_entropy(subset_y)\n            subset_weight = len(subset_y) / n_samples\n            weighted_entropy += subset_weight * entropy_subset\n        gain = entropy_y - weighted_entropy\n        if gain > max_gain:\n            max_gain = gain\n            feature_idx = j\n    return (feature_idx, round(max_gain, 6))\nX = np.array([[0, 0, 1], [0, 1, 1], [1, 0, 0], [1, 1, 0]])\ny = np.array([0, 1, 0, 1])"}
{"task_id": 565, "completion_id": 7, "solution": "import numpy as np\nimport math\ndef entropy(labels: np.ndarray) -> float:\n    \"\"\"Calculate the entropy of a set of class labels.\"\"\"\n    counts = np.bincount(labels)\n    probabilities = counts / len(labels)\n    return -np.sum([p * math.log2(p) for p in probabilities if p > 0])\ndef conditional_entropy(y: np.ndarray, feature_values: np.ndarray) -> float:\n    \"\"\"Calculate the conditional entropy H(y | A).\"\"\"\n    (unique_values, counts) = np.unique(feature_values, return_counts=True)\n    probabilities = counts / len(feature_values)\n    total = 0.0\n    for (i, value) in enumerate(unique_values):\n        y_subset = y[feature_values == value]\n        total += probabilities[i] * entropy(y_subset)\n    return total\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    if len(X) == 0 or len(y) == 0:\n        return (-1, 0.0)\n    n_features = X.shape[1]\n    ent_y = entropy(y)\n    max_gain = -float('inf')\n    best_feature = 0\n    for feature_idx in range(n_features):\n        feature = X[:, feature_idx]\n        cond_ent = conditional_entropy(y, feature)\n        gain = ent_y - cond_ent\n        if gain > max_gain:\n            max_gain = gain\n            best_feature = feature_idx\n    return (best_feature, round(max_gain, 6))"}
{"task_id": 565, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef entropy(labels):\n    \"\"\"Calculate the entropy of a list of class labels.\"\"\"\n    label_counts = np.bincount(labels)\n    probabilities = label_counts / len(labels)\n    return -np.sum((p * math.log2(p) for p in probabilities if p > 0))\ndef conditional_entropy(y, feature_values, X_column):\n    \"\"\"Calculate the conditional entropy of y given the feature.\"\"\"\n    n = len(y)\n    unique_values = np.unique(X_column)\n    total_conditional_entropy = 0.0\n    for value in unique_values:\n        mask = X_column == value\n        subset_y = y[mask]\n        subset_entropy = entropy(subset_y)\n        total_conditional_entropy += len(subset_y) / n * subset_entropy\n    return total_conditional_entropy\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    feature_gains = []\n    H_y = entropy(y)\n    for idx in range(n_features):\n        feature = X[:, idx]\n        H_y_given_A = conditional_entropy(y, np.unique(feature), feature)\n        ig = H_y - H_y_given_A\n        feature_gains.append((idx, ig))\n    feature_gains.sort(key=lambda x: (-x[1], x[0]))\n    (best_idx, best_gain) = feature_gains[0]\n    return (best_idx, round(best_gain, 6))"}
{"task_id": 565, "completion_id": 9, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n\n    def entropy(labels: np.ndarray) -> float:\n        \"\"\"Compute the entropy of a set of labels.\"\"\"\n        (_, counts) = np.unique(labels, return_counts=True)\n        probabilities = counts / counts.sum()\n        return -np.sum([p * math.log2(p) for p in probabilities if p > 0])\n    (n_samples, n_features) = X.shape\n    H_y = entropy(y)\n    max_gain = -math.inf\n    best_feature = 0\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        (_, indices) = np.unique(feature_values, return_index=True)\n        sorted_indices = np.sort(indices)\n        partitions = []\n        start = 0\n        for idx in sorted_indices[1:]:\n            partitions.append((feature_values[start], y[start:idx]))\n            start = idx\n        partitions.append((feature_values[start], y[start:]))\n        H_y_given_A = 0.0\n        total = n_samples\n        for (value, subset) in partitions:\n            subset_size = len(subset)\n            p = subset_size / total\n            H_y_given_A += p * entropy(subset)\n        gain = H_y - H_y_given_A\n        if gain > max_gain:\n            max_gain = gain\n            best_feature = feature_idx\n    return (best_feature, round(max_gain, 6))"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n\n    def c(n):\n        \"\"\"Calculate c(n): expected path length.\"\"\"\n        if n <= 1:\n            return 0\n        return 2 * np.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\n    def build_tree(X, depth_limit):\n        \"\"\"Build an Isolation Tree recursively.\"\"\"\n        n = X.shape[0]\n        if n <= 1 or depth_limit <= 0:\n            return {'type': 'leaf', 'count': n}\n        feature_idx = np.random.randint(n_features)\n        feature_min = np.min(X[:, feature_idx])\n        feature_max = np.max(X[:, feature_idx])\n        if feature_min == feature_max:\n            return {'type': 'leaf', 'count': n}\n        threshold = np.random.uniform(feature_min, feature_max)\n        left_mask = X[:, feature_idx] < threshold\n        right_mask = X[:, feature_idx] >= threshold\n        left_data = X[left_mask]\n        right_data = X[right_mask]\n        left_subtree = build_tree(left_data, depth_limit - 1)\n        right_subtree = build_tree(right_data, depth_limit - 1)\n        return {'type': 'split', 'feature_idx': feature_idx, 'threshold': threshold, 'left': left_subtree, 'right': right_subtree}\n\n    def compute_path_length(tree, x):\n        \"\"\"Traverse the tree and compute path length for x.\"\"\"\n        path_length = 0\n        while tree['type'] == 'split':\n            path_length += 1\n            if x[tree['feature_idx']] < tree['threshold']:\n                tree = tree['left']\n            else:\n                tree = tree['right']\n        count = tree['count']\n        return path_length + c(count)\n    trees = []\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            subsample = data\n            depth_limit = math.ceil(np.log2(n_samples))\n        else:\n            indices = np.random.choice(n_samples, size=sample_size, replace=False)\n            subsample = data[indices]\n            depth_limit = math.ceil(np.log2(sample_size))\n        tree = build_tree(subsample, depth_limit)\n        trees.append(tree)\n    avg_path_lengths = np.zeros(n_samples)\n    for (i, x) in enumerate(data):\n        total_path_length = 0\n        for tree in trees:\n            path_length = compute_path_length(tree, x)\n            total_path_length += path_length\n        avg_path_lengths[i] = total_path_length / n_trees\n    n = n_samples\n    phi = 2 * math.log(n - 1) - 2 * (n - 1) / n\n    scores = 2 ** (-(avg_path_lengths / phi))\n    if epsilon <= 0:\n        return []\n    n_outliers = int(math.floor(n_samples * epsilon))\n    if n_outliers == 0:\n        return []\n    outlier_indices = np.argsort(scores)[::-1]\n    detected_indices = outlier_indices[:n_outliers]\n    return list(detected_indices)"}
{"task_id": 566, "completion_id": 1, "solution": "import numpy as np\nimport math\nfrom typing import List\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> List[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    np.random.seed(42)\n\n    def c(n):\n        if n <= 1:\n            return 0.0\n        return 2 * (math.log(n - 1) + 0.5772156649) - 2 * (n - 1) / n\n\n    def build_tree(subdata, depth, height_limit):\n        n_sub = subdata.shape[0]\n        if n_sub <= 1 or depth >= height_limit:\n            return {'type': 'leaf', 'count': n_sub}\n        else:\n            feature_idx = np.random.choice(n_features)\n            col = subdata[:, feature_idx]\n            (min_val, max_val) = (np.min(col), np.max(col))\n            if min_val == max_val:\n                return {'type': 'leaf', 'count': n_sub}\n            threshold = np.random.uniform(min_val, max_val)\n            left_mask = col <= threshold\n            right_mask = col > threshold\n            left = subdata[left_mask]\n            right = subdata[right_mask]\n            left_tree = build_tree(left, depth + 1, height_limit)\n            right_tree = build_tree(right, depth + 1, height_limit)\n            return {'type': 'split', 'feature_idx': feature_idx, 'threshold': threshold, 'left': left_tree, 'right': right_tree}\n\n    def path_length(tree, x, depth):\n        if tree['type'] == 'leaf':\n            n_leaf = tree['count']\n            corrected_depth = depth + c(n_leaf)\n            return corrected_depth\n        else:\n            feature_idx = tree['feature_idx']\n            threshold = tree['threshold']\n            if x[feature_idx] <= threshold:\n                return path_length(tree['left'], x, depth + 1)\n            else:\n                return path_length(tree['right'], x, depth + 1)\n\n    def compute_phi(n_samples):\n        return 2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    height_limit = math.ceil(math.log2(min(sample_size, n_samples)))\n    path_length_total = np.zeros(n_samples)\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            sample_indices = np.arange(n_samples)\n        else:\n            sample_indices = np.random.choice(n_samples, size=sample_size, replace=False)\n        subsample = data[sample_indices]\n        iso_tree = build_tree(subsample, 0, height_limit)\n        for i in range(n_samples):\n            x = data[i]\n            path_len = path_length(iso_tree, x, 0)\n            path_length_total[i] += path_len\n    path_length_avg = path_length_total / n_trees\n    phi = compute_phi(n_samples)\n    scores = 2 ** (-path_length_avg / phi)\n    if epsilon <= 0:\n        return []\n    n_outliers = int(epsilon * n_samples)\n    outlier_indices = np.argsort(scores)[-n_outliers:][::-1]\n    outlier_indices = sorted(outlier_indices)\n    return outlier_indices"}
{"task_id": 566, "completion_id": 2, "solution": "import numpy as np\nimport math\nfrom typing import List, Tuple, Optional\nimport bisect\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> List[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    if epsilon == 0:\n        return []\n    height_limit = math.ceil(math.log2(min(sample_size, n_samples)))\n    trees = []\n    for _ in range(n_trees):\n        indices = np.random.choice(n_samples, size=sample_size, replace=False)\n        subsample = data[indices]\n        tree = build_node(subsample, 0, height_limit)\n        trees.append(tree)\n    avg_path_lengths = np.zeros(n_samples)\n    for i in range(n_samples):\n        total_depth = 0\n        for tree in trees:\n            depth = traverse_tree(tree, data[i])\n            total_depth += depth\n        avg_path_lengths[i] = total_depth / n_trees\n    n = n_samples\n    if n <= 1:\n        phi = 0\n    else:\n        phi = 2 * math.log(n - 1) - 2 * (n - 1) / n\n    scores = 2 ** (-(avg_path_lengths / phi))\n    sorted_indices = [idx for (idx, _) in sorted(enumerate(scores), key=lambda x: x[1], reverse=True)]\n    num_outliers = max(1, int(math.ceil(epsilon * n_samples)))\n    outliers = sorted_indices[:num_outliers]\n    return outliers\ndef build_node(data: np.ndarray, depth: int, height_limit: int) -> dict:\n    \"\"\"Builds a single isolation tree node.\"\"\"\n    n_samples = data.shape[0]\n    if n_samples <= 1 or depth == height_limit:\n        return {'type': 'leaf', 'size': n_samples}\n    else:\n        n_features = data.shape[1]\n        idx = np.random.randint(n_features)\n        feature_min = data[:, idx].min()\n        feature_max = data[:, idx].max()\n        if feature_max == feature_min:\n            return {'type': 'leaf', 'size': n_samples}\n        threshold = np.random.uniform(feature_min, feature_max)\n        left_mask = data[:, idx] < threshold\n        right_mask = data[:, idx] >= threshold\n        left_data = data[left_mask]\n        right_data = data[right_mask]\n        left_child = build_node(left_data, depth + 1, height_limit)\n        right_child = build_node(right_data, depth + 1, height_limit)\n        return {'type': 'split', 'feature': idx, 'threshold': threshold, 'left': left_child, 'right': right_child}\ndef traverse_tree(node: dict, x: np.ndarray) -> float:\n    \"\"\"Traverses the tree for a single observation and returns path length.\"\"\"\n    if node['type'] == 'leaf':\n        size = node['size']\n        if size == 0:\n            return 0.0\n        return c(size)\n    else:\n        feature = node['feature']\n        threshold = node['threshold']\n        if x[feature] < threshold:\n            return 1 + traverse_tree(node['left'], x)\n        else:\n            return 1 + traverse_tree(node['right'], x)\ndef c(n: int) -> float:\n    \"\"\"Expected path length in a binary search tree with n nodes.\"\"\"\n    if n <= 1:\n        return 0\n    return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\ndata = np.array([[10, 10], [11, 11], [9, 9], [100, 100], [8, 8]])\noutliers = detect_outliers(data, n_trees=100, sample_size=5, epsilon=0.2)"}
{"task_id": 566, "completion_id": 3, "solution": "import numpy as np\nimport math\nimport numpy as np\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    depth_limit = int(math.ceil(math.log2(sample_size)))\n\n    def c(n):\n        if n <= 1:\n            return 0.0\n        return 2 * math.log(n - 1) + 0.5772156649 - 2.0 * (n - 1) / n\n\n    def phi(n_samples):\n        if n_samples <= 1:\n            return 0.0\n        return 2.0 * math.log(n_samples - 1) - 2.0 * (n_samples - 1) / n_samples\n\n    class IsolationTreeNode:\n\n        def __init__(self, depth, min_sample_count, max_sample_count):\n            self.left = None\n            self.right = None\n            self.feature_index = None\n            self.threshold = None\n            self.samples = min_sample_count\n            self.n_samples = max_sample_count - min_sample_count + 1\n            self.depth = depth\n\n        def get_path_length(self, x):\n            if self.n_samples <= 1 or self.depth >= depth_limit:\n                return c(self.n_samples)\n            elif x[self.feature_index] < self.threshold:\n                return 1 + self.left.get_path_length(x)\n            else:\n                return 1 + self.right.get_path_length(x)\n\n    def build_tree(data_slice, depth=0):\n        n_nodes = data_slice.shape[0]\n        if n_nodes <= 1 or depth >= depth_limit:\n            return IsolationTreeNode(depth, 0, n_nodes - 1)\n        node = IsolationTreeNode(depth, 0, n_nodes - 1)\n        feature_index = np.random.randint(n_features)\n        (min_val, max_val) = (np.min(data_slice[:, feature_index]), np.max(data_slice[:, feature_index]))\n        threshold = np.random.uniform(min_val, max_val)\n        left_indices = data_slice[:, feature_index] < threshold\n        right_indices = ~left_indices\n        node.feature_index = feature_index\n        node.threshold = threshold\n        left_data = data_slice[left_indices]\n        right_data = data_slice[right_indices]\n        node.left = build_tree(left_data, depth + 1)\n        node.right = build_tree(right_data, depth + 1)\n        return node\n\n    def get_all_scores(data):\n        scores = np.zeros(n_samples)\n        for _ in range(n_trees):\n            if sample_size >= n_samples:\n                subsample = data\n            else:\n                indices = np.random.choice(n_samples, sample_size, replace=False)\n                subsample = data[indices]\n            tree = build_tree(subsample)\n            for (i, x) in enumerate(data):\n                scores[i] += tree.get_path_length(x)\n        n = n_samples\n        scores /= n_trees\n        _phi = phi(n)\n        anomaly_scores = 2 ** (-(scores / _phi))\n        return anomaly_scores\n    if epsilon == 0:\n        return []\n    anomaly_scores = get_all_scores(data)\n    n_outliers = max(int(epsilon * n_samples), 1)\n    sorted_indices = np.argsort(anomaly_scores)[::-1]\n    outliers = sorted_indices[:n_outliers]\n    return outliers.tolist()\ndata = np.array([[1, 2], [2, 3], [10, 11], [1, 2], [2, 3]])"}
{"task_id": 566, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    height_limit = math.ceil(math.log2(sample_size)) if sample_size <= n_samples else 0\n\n    def c(n: int) -> float:\n        \"\"\"Expected path length for n samples in BST, approximated by c(n).\"\"\"\n        if n == 1:\n            return 0\n        return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\n    def build_tree(subsample: np.ndarray, depth: int=0) -> dict:\n        \"\"\"\n        Recursively build an isolation tree by randomly selecting feature & threshold.\n        Returns a tree represented as a dictionary:\n        - \"type\" is \"split\" or \"leaf\"\n        - \"split\" trees have \"feature\", \"threshold\", \"left\", \"right\"\n        - \"leaf\" trees have \"data\" (the subset of points in the leaf)\n        \"\"\"\n        n_points = subsample.shape[0]\n        if n_points <= 1 or depth >= height_limit:\n            return {'type': 'leaf', 'data': subsample}\n        feature = np.random.randint(n_features)\n        split_min = float(np.min(subsample[:, feature]))\n        split_max = float(np.max(subsample[:, feature] + 1e-08))\n        threshold = np.random.uniform(split_min, split_max)\n        left_mask = subsample[:, feature] < threshold\n        right_mask = subsample[:, feature] >= threshold\n        left_subsample = subsample[left_mask]\n        right_subsample = subsample[right_mask]\n        return {'type': 'split', 'feature': feature, 'threshold': threshold, 'left': build_tree(left_subsample, depth + 1), 'right': build_tree(right_subsample, depth + 1)}\n\n    def compute_path_length(tree, point):\n        \"\"\"Recursively compute the path length for a single point through a tree.\"\"\"\n        if tree['type'] == 'leaf':\n            n_points_in_leaf = tree['data'].shape[0]\n            path_length = tree['depth']\n            return path_length + c(n_points_in_leaf)\n        else:\n            feature = tree['feature']\n            threshold = tree['threshold']\n            if point[feature] < threshold:\n                return compute_path_length(tree['left'], point) + 1\n            else:\n                return compute_path_length(tree['right'], point) + 1\n    path_lengths = np.zeros(n_samples)\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            subsampled_indices = np.arange(n_samples)\n        else:\n            subsampled_indices = np.random.choice(n_samples, sample_size, replace=False)\n        subsample = data[subsampled_indices]\n        tree = build_tree(subsample)\n        for i in subsampled_indices:\n            path_lengths[i] += compute_path_length(tree, data[i])\n    path_lengths /= n_trees\n\n    def phi(n):\n        \"\"\"Helper function to compute \u03c6\"\"\"\n        return 2 * math.log(n - 1) - 2 * (n - 1) / n if n > 1 else 0\n    phi_n = phi(n_samples)\n    scores = 2 ** (-path_lengths / phi_n)\n    if epsilon == 0:\n        return []\n    anomaly_indices = np.argsort(scores)[::-1]\n    num_outliers = max(1, int(epsilon * n_samples))\n    outliers = anomaly_indices[:num_outliers]\n    return list(outliers)"}
{"task_id": 566, "completion_id": 5, "solution": "import numpy as np\nimport math\nfrom typing import List\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> List[int]:\n    \"\"\"\n    Tiny Isolation Forest implementation for outlier detection.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    path_lengths = np.zeros(n_samples)\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            subsample_indices = np.arange(n_samples)\n        else:\n            subsample_indices = np.random.choice(n_samples, sample_size, replace=False)\n        subsample_data = data[subsample_indices]\n        tree = isolate(subsample_data)\n        for i in range(n_samples):\n            full_point = data[i]\n            length = traverse(full_point, tree)\n            path_lengths[i] += length\n    path_lengths /= n_trees\n    if n_samples == 1:\n        phi = 0\n    else:\n        phi = 2 * np.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    scores = 2 ** (-(path_lengths / phi))\n    ranked_indices = np.argsort(-scores)\n    if epsilon == 0:\n        return []\n    n_outliers = max(1, int(epsilon * n_samples))\n    outlier_indices = ranked_indices[:n_outliers].tolist()\n    outlier_indices.sort()\n    return outlier_indices\ndef isolate(subsample: np.ndarray, depth=0):\n    \"\"\"\n    Recursively build a random isolation tree.\n\n    Args:\n        subsample: Subset of data used to build the tree.\n        depth: Current depth of the current node.\n\n    Returns:\n        A tree node: \n        - Leaf nodes are None\n        - Internal nodes (dictionary) containing feature, threshold, left, right\n    \"\"\"\n    n_samples = len(subsample)\n    (n, n_features) = subsample.shape\n    if n <= 1 or depth >= height_limit(n):\n        return c(n)\n    feature_idx = np.random.randint(n_features)\n    min_val = subsample[:, feature_idx].min()\n    max_val = subsample[:, feature_idx].max()\n    threshold = np.random.uniform(min_val, max_val)\n    left_mask = subsample[:, feature_idx] <= threshold\n    right_mask = subsample[:, feature_idx] > threshold\n    left_data = subsample[left_mask]\n    right_data = subsample[right_mask]\n    node = {'feature_idx': feature_idx, 'threshold': threshold, 'left': isolate(left_data, depth + 1), 'right': isolate(right_data, depth + 1)}\n    return node\ndef height_limit(n_samples):\n    \"\"\"Compute the height linit as ceiling of log2(n_samples).\"\"\"\n    return math.ceil(math.log(n_samples, 2)) if n_samples > 0 else 0\ndef traverse(x: np.ndarray, tree):\n    \"\"\"Traverse the tree and return the path length.\"\"\"\n    path_len = 0\n    while isinstance(tree, dict):\n        path_len += 1\n        if x[tree['feature_idx']] <= tree['threshold']:\n            tree = tree['left']\n        else:\n            tree = tree['right']\n    return path_len + tree\ndef c(n: int):\n    \"\"\"\n    Correction factor for small BST expected path length.\n\n    Args:\n        n: Number of samples in the node.\n    Returns: correction factor for path length\n    \"\"\"\n    if n <= 1:\n        return 0\n    return 2 * np.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n"}
{"task_id": 566, "completion_id": 6, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    if epsilon == 0:\n        return []\n\n    def c(n):\n        if n <= 1:\n            return 0\n        return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\n    def compute_path_lengths_tree(tree):\n        path_lengths = np.zeros(n_samples)\n        queue = [(tree, 0)]\n        while queue:\n            (node, depth) = queue.pop(0)\n            if node['is_leaf']:\n                if 'indices' in node:\n                    for idx in node['indices']:\n                        path_lengths[idx] = depth - c(len(node['indices'])) + c(len(node.get('indices', [0])) + 1)\n            else:\n                if 'left' in node:\n                    queue.append((node['left'], depth + 1))\n                if 'right' in node:\n                    queue.append((node['right'], depth + 1))\n        return path_lengths\n    all_path_lengths = np.zeros(n_samples)\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            indices = np.arange(n_samples)\n        else:\n            indices = np.random.choice(n_samples, size=sample_size, replace=False)\n        indices.sort()\n        subsample = data[indices]\n        height_limit = math.ceil(math.log2(len(indices)))\n\n        def build_tree(nodes, depth=0):\n            if len(nodes) <= 1 or depth >= height_limit:\n                return {'is_leaf': True, 'indices': indices[nodes]}\n            feature = np.random.randint(n_features)\n            min_val = np.min(subsample[nodes, feature])\n            max_val = np.max(subsample[nodes, feature])\n            if min_val == max_val:\n                return {'is_leaf': True, 'indices': indices[nodes]}\n            threshold = np.random.uniform(min_val, max_val)\n            left_nodes = [i for i in nodes if subsample[i, feature] < threshold]\n            right_nodes = [i for i in nodes if subsample[i, feature] >= threshold]\n            return {'is_leaf': False, 'feature': feature, 'threshold': threshold, 'left': build_tree(left_nodes, depth + 1), 'right': build_tree(right_nodes, depth + 1)}\n        tree = build_tree(np.arange(len(indices)))\n        path_lengths = np.zeros(n_samples)\n        for i in range(n_samples):\n            path_lengths[i] = 0\n\n        def traverse_tree(node, depth, path_len):\n            if node['is_leaf']:\n                return"}
{"task_id": 566, "completion_id": 7, "solution": "import numpy as np\nimport math\nfrom typing import List\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> List[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    if epsilon == 0:\n        return []\n\n    def c(n: int):\n        if n <= 1:\n            return 0.0\n        return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\n    def phi(n: int):\n        return 2 * math.log(n - 1) - 2 * (n - 1) / n if n > 1 else 0\n\n    class IsolationTree:\n\n        def __init__(self, height_limit: int):\n            self.height_limit = height_limit\n            self.left = None\n            self.right = None\n            self.split_feature = None\n            self.split_threshold = None\n\n        def grow(self, X):\n            \"\"\"Grow an isolation tree.\"\"\"\n            n = X.shape[0]\n            if n == 0:\n                return\n            if self.height_limit == 0 or n == 1:\n                return\n            feature_index = np.random.randint(X.shape[1])\n            min_val = np.min(X[:, feature_index])\n            max_val = np.max(X[:, feature_index])\n            threshold = np.random.uniform(min_val, max_val)\n            left_indices = X[:, feature_index] < threshold\n            right_indices = X[:, feature_index] >= threshold\n            left_X = X[left_indices]\n            right_X = X[right_indices]\n            self.split_feature = feature_index\n            self.split_threshold = threshold\n            self.left = IsolationTree(height_limit=self.height_limit - 1)\n            self.right = IsolationTree(height_limit=self.height_limit - 1)\n            self.left.grow(left_X)\n            self.right.grow(right_X)\n\n        def path_length(self, x, depth):\n            if self.left is None and self.right is None:\n                return depth\n            feature_index = self.split_feature\n            threshold = self.split_threshold\n            if x[feature_index] < threshold:\n                return self.left.path_length(x, depth + 1)\n            else:\n                return self.right.path_length(x, depth + 1)\n    path_lengths = np.zeros(n_samples)\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            subset_indices = np.arange(n_samples)\n        else:\n            subset_indices = np.random.choice(n_samples, size=sample_size, replace=False)\n        subset = data[subset_indices]\n        height_limit = int(math.ceil(math.log2(sample_size)))\n        tree = IsolationTree(height_limit)\n        tree.grow(subset)\n        for i in subset_indices:\n            idx = subset_indices.tolist().index(i)\n            observed_data = data[i]\n            depth = 0\n            length = tree.path_length(observed_data, depth)\n            n_in_leaf = 1\n            if n_in_leaf > 0:\n                corrected_length = length + c(n_in_leaf)\n            else:\n                corrected_length = length\n            path_lengths[i] += corrected_length\n    mean_path_lengths = path_lengths / n_trees\n    phi_n = phi(sample_size)\n    scores = 2 ** (-mean_path_lengths / phi_n)\n    threshold_index = int(n_samples * (1 - epsilon))\n    outlier_indices = scores.argsort()\n    outliers = outlier_indices[threshold_index:]\n    return sorted(outliers)\nX = np.array([[1, 2], [1.5, 1.8], [5, 8], [8, 8], [1, 0.6], [9, 11]])\noutliers = detect_outliers(X, n_trees=10, sample_size=5, epsilon=0.2)"}
{"task_id": 566, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    height_limit = math.ceil(math.log2(sample_size)) if sample_size <= n_samples else 0\n\n    def c(n):\n        \"\"\"Expected path length in a binary search tree.\"\"\"\n        if n <= 1:\n            return 0.0\n        return 2.0 * math.log(n - 1) + 0.5772156649 - 2.0 * (n - 1) / n\n\n    def build_tree(data, depth=0):\n        \"\"\"Build a random isolation tree.\"\"\"\n        n_current_samples = len(data)\n        if depth >= height_limit or n_current_samples <= 1:\n            return {'leaf': True, 'count': n_current_samples}\n        feature_idx = np.random.randint(n_features)\n        feature_min = np.min(data[:, feature_idx])\n        feature_max = np.max(data[:, feature_idx])\n        threshold = np.random.uniform(feature_min, feature_max)\n        left_idx = data[:, feature_idx] <= threshold\n        right_idx = data[:, feature_idx] > threshold\n        left_data = data[left_idx]\n        right_data = data[right_idx]\n        return {'leaf': False, 'feature_idx': feature_idx, 'threshold': threshold, 'left': build_tree(left_data, depth + 1), 'right': build_tree(right_data, depth + 1)}\n\n    def compute_path_length(tree, x, depth=0):\n        \"\"\"Compute the path length of a sample through the tree.\"\"\"\n        if tree['leaf']:\n            leaf_count = tree['count']\n            return depth + c(leaf_count)\n        feature_idx = tree['feature_idx']\n        threshold = tree['threshold']\n        if x[feature_idx] <= threshold:\n            return compute_path_length(tree['left'], x, depth + 1)\n        else:\n            return compute_path_length(tree['right'], x, depth + 1)\n    if n_samples <= 1:\n        phi = 0.0\n    else:\n        phi = 2 * (np.log(n_samples - 1) - (n_samples - 1) / n_samples) + 0.5772156649\n    trees = []\n    for _ in range(n_trees):\n        indices = np.random.choice(n_samples, size=min(sample_size, n_samples), replace=False)\n        sample_data = data[indices]\n        if sample_data.size == 0:\n            continue\n        tree = build_tree(sample_data)\n        trees.append({'indices': indices, 'tree': tree})\n    path_lengths = np.zeros(n_samples)\n    for tree_info in trees:\n        tree = tree_info['tree']\n        indices = tree_info['indices']\n        for idx in indices:\n            x = data[idx]\n            path_lengths[idx] += compute_path_length(tree, x)\n    n_trees_effective = max(1, len(trees))\n    avg_path_lengths = path_lengths / n_trees_effective\n    scores = 2 ** (-(avg_path_lengths / phi))\n    if epsilon <= 0:\n        return []\n    n_outliers = max(1, int(epsilon * n_samples))\n    outlier_indices = np.argsort(scores)[::-1][:n_outliers]\n    return list(outlier_indices)"}
{"task_id": 566, "completion_id": 9, "solution": "import numpy as np\nimport math\nfrom typing import List\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> List[int]:\n    \"\"\"\n    Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    if epsilon == 0:\n        return []\n\n    class IsolationNode:\n\n        def __init__(self, left=None, right=None, feature=None, threshold=None, indices=None):\n            self.left = left\n            self.right = right\n            self.feature = feature\n            self.threshold = threshold\n            self.indices = indices\n\n    def build_tree(sample_indices, depth):\n        n = len(sample_indices)\n        if n <= 1 or depth == max_depth:\n            return IsolationNode(indices=sample_indices)\n        feature = np.random.randint(n_features)\n        min_val = np.min(data[sample_indices][:, feature])\n        max_val = np.max(data[sample_indices][:, feature])\n        threshold = np.random.uniform(min_val, max_val)\n        left_indices = []\n        right_indices = []\n        for idx in sample_indices:\n            if data[idx, feature] < threshold:\n                left_indices.append(idx)\n            else:\n                right_indices.append(idx)\n        left_child = build_tree(left_indices, depth + 1)\n        right_child = build_tree(right_indices, depth + 1)\n        return IsolationNode(left=left_child, right=right_child, feature=feature, threshold=threshold)\n\n    def c(n):\n        \"\"\"Compute the correction term for average path length.\"\"\"\n        if n <= 1:\n            return 0\n        return 2.0 * (np.log(n - 1) + 0.5772156649) - 2.0 * (n - 1) / n\n\n    def compute_path_length(tree, data_index):\n        path_length = 0\n        current_node = tree\n        while current_node.left or current_node.right:\n            feature = current_node.feature\n            threshold = current_node.threshold\n            if data[data_index, feature] < threshold:\n                current_node = current_node.left\n            else:\n                current_node = current_node.right\n            path_length += 1\n        leaf_count = len(current_node.indices)\n        return path_length + c(leaf_count)\n    if sample_size >= n_samples:\n        sample_size = n_samples\n        height_limit = math.ceil(math.log2(n_samples))\n    else:\n        height_limit = math.ceil(math.log2(sample_size))\n    max_depth = height_limit\n    phi = 2.0 * np.log(n_samples - 1) - 2.0 * (n_samples - 1) / n_samples\n    all_trees = []\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            indices = np.arange(n_samples)\n        else:\n            indices = np.random.choice(n_samples, sample_size, replace=False)\n        tree = build_tree(indices, 0)\n        all_trees.append(tree)\n    path_length_sums = np.zeros(n_samples)\n    for tree in all_trees:\n        for i in range(n_samples):\n            path_length_sums[i] += compute_path_length(tree, i)\n    average_path_length = path_length_sums / n_trees\n    scores = 2 ** (-average_path_length / phi)\n    outlier_indices = np.argsort(scores)[-int(n_samples * epsilon):]\n    return sorted(outlier_indices.tolist())"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"\n    Trains a Maximum Entropy classifier using Generalized Iterative Scaling (GIS)\n    and predicts labels on a test set.\n\n    Args:\n        X_train: Training samples (2D numpy array).\n        y_train: Training labels (1D numpy array of integers).\n        X_test: Test samples (2D numpy array).\n        epsilon: Convergence threshold (stop optimizing when max weight change is below this).\n        n_iter: Max number of iterations.\n\n    Returns:\n        A list of predicted class labels for test samples.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    unique_labels = np.unique(y_train)\n    n_classes = len(unique_labels)\n    feature_to_index = {}\n    feature_index = 0\n    for feature_index_in_X in range(n_features):\n        unique_values = np.unique(X_train[:, feature_index_in_X])\n        for val in unique_values:\n            for label in unique_labels:\n                key = (feature_index_in_X, val, label)\n                feature_to_index[key] = feature_index\n                feature_index += 1\n    n_features_total = len(feature_to_index)\n    empirical_counts = defaultdict(float)\n    for (x, y) in zip(X_train, y_train):\n        for feature_index_in_X in range(n_features):\n            val = x[feature_index_in_X]\n            key = (feature_index_in_X, val, y)\n            empirical_counts[key] += 1\n    total_samples = float(n_samples)\n    empirical_distribution = {key: count / total_samples for (key, count) in empirical_counts.items()}\n    empirical_distribution_list = list(empirical_distribution.items())\n    weights = np.zeros(n_features_total)\n    for iteration in range(n_iter):\n        model_distribution_counts = defaultdict(float)\n        for (x, _) in zip(X_train, y_train):\n            log_numerator = []\n            for label in unique_labels:\n                feature_vec = []\n                for feature_index_in_X in range(n_features):\n                    val = x[feature_index_in_X]\n                    key = (feature_index_in_X, val, label)\n                    if key in feature_to_index:\n                        f = 1\n                        w = weights[feature_to_index[key]]\n                        feature_vec.append(w)\n                llf = sum(feature_vec)\n                log_numerator.append(llf)\n            log_numerator = np.array(log_numerator)\n            log_numerator -= log_numerator.max()\n            Z = np.log(np.exp(log_numerator).sum())\n            probas = np.exp(log_numerator - Z)\n            for (label, prob) in zip(unique_labels, probas):\n                for feature_index_in_X in range(n_features):\n                    val = x[feature_index_in_X]\n                    key = (feature_index_in_X, val, label)\n                    model_distribution_counts[key] += prob\n        model_distribution = {key: count / total_samples for (key, count) in model_distribution_counts.items()}\n        updates = []\n        for (key, e) in empirical_distribution.items():\n            if key in model_distribution:\n                m = model_distribution[key]\n            else:\n                m = 0.0\n            updates.append(e - m)\n        step_size = 1.0\n        if iteration > 0:\n            gamma = 0.7\n            step_size = gamma * max((abs(u) for u in updates)) / max((abs(w) for w in weights))\n        max_update = 0.0\n        for ((key, e), u) in zip(empirical_distribution_list, updates):\n            if key in feature_to_index:\n                idx = feature_to_index[key]\n                old_weight = weights[idx]\n                weights[idx] += step_size * u\n                max_update = max(max_update, abs(weights[idx] - old_weight))\n        if max_update < epsilon:\n            break\n    predictions = []\n    for x in X_test:\n        scores = np.zeros(n_classes)\n        for (label_index, label) in enumerate(unique_labels):\n            score = 0.0\n            for feature_index_in_X in range(n_features):\n                val = x[feature_index_in_X]\n                key = (feature_index_in_X, val, label)\n                if key in feature_to_index:\n                    score += weights[feature_to_index[key]]\n            scores[label_index] = score\n        predicted_label_index = np.argmax(scores)\n        predicted_label = int(unique_labels[predicted_label_index])\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 568, "completion_id": 1, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"\n    Maximum Entropy classifier with Generalized Iterative Scaling (GIS).\n    \n    Args:\n        X_train: Training feature data (2D numpy array).\n        y_train: Training labels (numpy array).\n        X_test: Test feature data (2D numpy array).\n        epsilon: Convergence tolerance for GIS (float).\n        n_iter: Maximum number of iterations (int).\n    \n    Returns:\n        List of predicted labels for X_test.\n    \"\"\"\n    feature_index = {}\n    current_index = 0\n    all_labels = np.unique(y_train)\n    for i in range(X_train.shape[0]):\n        x = X_train[i]\n        y = y_train[i]\n        for (j, val) in enumerate(x):\n            key = (j, val, y)\n            if key not in feature_index:\n                feature_index[key] = current_index\n                current_index += 1\n    num_weights = len(feature_index)\n    num_samples = X_train.shape[0]\n    num_labels = len(all_labels)\n    label_to_index = {label: idx for (idx, label) in enumerate(all_labels)}\n    weights = np.zeros(num_weights)\n    feature_counts = defaultdict(lambda : defaultdict(int))\n    for i in range(X_train.shape[0]):\n        x = X_train[i]\n        y = y_train[i]\n        for (j, val) in enumerate(x):\n            feature_counts[j, val][label_to_index[y]] += 1\n    total_samples = num_samples\n    for key in feature_counts:\n        for label_idx in range(num_labels):\n            feature_counts[key][label_idx] /= total_samples\n    for _ in range(n_iter):\n        active_features = set()\n        for (j, val) in [(i, X_train[i, j]) for i in range(X_train.shape[0]) for j in range(X_train.shape[1])]:\n            for y in all_labels:\n                active_features.add((j, val, y))\n        expected = defaultdict(lambda : defaultdict(float))\n        for i in range(X_train.shape[0]):\n            x = X_train[i]\n            y = y_train[i]\n            y_idx = label_to_index[y]\n            exp_sums = np.zeros(num_labels)\n            for label in all_labels:\n                label_idx = label_to_index[label]\n                s = 0.0\n                for (j, val) in enumerate(x):\n                    key = (j, val, label)\n                    if key in feature_index:\n                        s += weights[feature_index[key]]\n                exp_sums[label_idx] = math.exp(s)\n            Z = np.sum(exp_sums)\n            probs = exp_sums / Z\n            for (j, val) in enumerate(x):\n                key = (j, val, all_labels[0])\n                for label in all_labels:\n                    label_idx = label_to_index[label]\n                    f_key = (j, val, label)\n                    if f_key in feature_index:\n                        w_idx = feature_index[f_key]\n                        expected[f_key][label_idx] += probs[label_idx]\n        grad = []\n        for key in feature_index:\n            (j, val, y) = key\n            y_idx = label_to_index[y]\n            e = feature_counts[j, val][y_idx]\n            m = expected[key][y_idx]\n            grad.append(e - m)\n        max_grad = max((abs(g) for g in grad))\n        if max_grad < epsilon:\n            break\n        step = 0.5\n        while True:\n            new_weights = weights + step * np.array(grad)\n            for i in range(X_train.shape[0]):\n                x = X_train[i]\n                y = y_train[i]\n                y_idx = label_to_index[y]\n                exp_sums = np.zeros(num_labels)\n                for label in all_labels:\n                    label_idx = label_to_index[label]\n                    s = 0.0\n                    for (j, val) in enumerate(x):\n                        key = (j, val, label)\n                        if key in feature_index:\n                            s += new_weights[feature_index[key]]\n                    exp_sums[label_idx] = math.exp(s)\n                Z = np.sum(exp_sums)\n                probs = exp_sums / Z\n                if any((math.isnan(p) for p in probs)):\n                    break\n            else:\n                weights = new_weights.copy()\n                break\n            step /= 2.0\n    predictions = []\n    for x in X_test:\n        scores = {label: 0.0 for label in all_labels}\n        for label in all_labels:\n            for (j, val) in enumerate(x):\n                key = (j, val, label)\n                if key in feature_index:\n                    scores[label] += weights[feature_index[key]]\n        predictions.append(max(scores, key=scores.get))\n    return predictions"}
{"task_id": 568, "completion_id": 2, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"Implements a Maximum Entropy classifier with Generalized Iterative Scaling.\"\"\"\n    feature_map = {}\n    features_index = 0\n    for i in range(X_train.shape[0]):\n        for col in range(X_train.shape[1]):\n            feature_id = (col, X_train[i, col])\n            if feature_id not in feature_map:\n                feature_map[feature_id] = features_index\n                features_index += 1\n    num_weights = len(feature_map)\n    num_labels = len(np.unique(y_train))\n    sample_id_to_label = {i: y_train[i] for i in range(len(y_train))}\n    weights = np.zeros(num_weights)\n    emp_counts = defaultdict(float)\n    for sample_id in range(X_train.shape[0]):\n        y = sample_id_to_label[sample_id]\n        for col in range(X_train.shape[1]):\n            feature_id = (col, X_train[sample_id, col])\n            if feature_id in feature_map:\n                emp_counts[feature_id, y] += 1\n    num_samples = X_train.shape[0]\n    total_samples = float(num_samples)\n    for iteration in range(n_iter):\n        empirical = defaultdict(float)\n        model = defaultdict(float)\n        for sample_id in range(X_train.shape[0]):\n            x = X_train[sample_id]\n            y_true = sample_id_to_label[sample_id]\n            log_Z = -float('inf')\n            for y in np.unique(y_train):\n                score = 0.0\n                for col in range(x.shape[0]):\n                    feature_id = (col, x[col])\n                    if feature_id in feature_map:\n                        fid = feature_map[feature_id]\n                        score += weights[fid]\n                log_Z = math.logaddexp(log_Z, score)\n            for y in np.unique(y_train):\n                score = 0.0\n                for col in range(x.shape[0]):\n                    feature_id = (col, x[col])\n                    if feature_id in feature_map:\n                        fid = feature_map[feature_id]\n                        score += weights[fid]\n                prob = math.exp(score - log_Z)\n                for col in range(x.shape[0]):\n                    feature_id = (col, x[col])\n                    if feature_id in feature_map:\n                        fid = feature_map[feature_id]\n                        model[fid, y] += prob\n        deltas = defaultdict(float)\n        for ((feature_id, y), cnt) in emp_counts.items():\n            fid = feature_id\n            model_count = model.get((fid, y), 0.0)\n            delta = cnt / total_samples - model_count\n            deltas[fid, y] = delta\n        max_delta = 0.0\n        for fid in range(num_weights):\n            for y in np.unique(y_train):\n                delta = deltas[fid, y]\n                if abs(delta) > max_delta:\n                    max_delta = abs(delta)\n                if delta == 0:\n                    continue\n                weights[fid] += delta\n        if max_delta < epsilon:\n            print(f'Converged after {iteration + 1} iterations')\n            break\n        else:\n            print(f'Iteration {iteration + 1} - Max delta: {max_delta}')\n    y_test_pred = []\n    for sample in X_test:\n        max_log_prob = -float('inf')\n        best_y = None\n        for y in np.unique(y_train):\n            score = 0.0\n            for col in range(sample.shape[0]):\n                feature_id = (col, sample[col])\n                if feature_id in feature_map:\n                    fid = feature_map[feature_id]\n                    score += weights[fid]\n            if score > max_log_prob:\n                max_log_prob = score\n                best_y = y\n        y_test_pred.append(best_y)\n    return y_test_pred\nX_train = np.array([[0, 1, 2], [1, 2, 3], [0, 3, 1]])\ny_train = np.array([0, 1, 0])\nX_test = np.array([[0, 1, 2], [1, 2, 3]])"}
{"task_id": 568, "completion_id": 3, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"Train a Maximum Entropy classifier using Generalised Iterative Scaling (GIS) and make predictions.\"\"\"\n    features = {}\n    feature_index = 0\n    for i in range(X_train.shape[0]):\n        for col_idx in range(X_train.shape[1]):\n            col_value = X_train[i, col_idx]\n            label = y_train[i]\n            feature = (col_value, col_idx, label)\n            if feature not in features:\n                features[feature] = feature_index\n                feature_index += 1\n    n_features = len(features)\n    n_labels = len(np.unique(y_train))\n    weights = np.zeros(n_features)\n    N = X_train.shape[0]\n    expected = np.zeros(n_features)\n    for i in range(N):\n        x = X_train[i]\n        y = y_train[i]\n        for col_idx in range(x.shape[0]):\n            col_value = x[col_idx]\n            feature = (col_value, col_idx, y)\n            if feature in features:\n                feature_idx = features[feature]\n                expected[feature_idx] += 1 / N\n    for _ in range(n_iter):\n        actual = np.zeros(n_features)\n        for i in range(N):\n            x = X_train[i]\n            Z = 0.0\n            exp_scores = {}\n            for label in np.unique(y_train):\n                unnormalized_score = 0.0\n                for col_idx in range(x.shape[0]):\n                    col_value = x[col_idx]\n                    feature = (col_value, col_idx, label)\n                    if feature in features:\n                        feature_idx = features[feature]\n                        unnormalized_score += weights[feature_idx]\n                exp_scores[label] = math.exp(unnormalized_score)\n                Z += exp_scores[label]\n            for label in exp_scores:\n                prob = exp_scores[label] / Z\n                for col_idx in range(x.shape[0]):\n                    col_value = x[col_idx]\n                    feature = (col_value, col_idx, label)\n                    if feature in features:\n                        feature_idx = features[feature]\n                        actual[feature_idx] += prob / N\n        deltas = expected - actual\n        max_update = 0.0\n        for i in range(n_features):\n            if deltas[i] != 0:\n                weights[i] += math.log(deltas[i])\n                max_update = max(max_update, abs(math.log(deltas[i])))\n        if max_update < epsilon:\n            break\n    predictions = []\n    for x in X_test:\n        scores = {}\n        for label in np.unique(y_train):\n            score = 0.0\n            for col_idx in range(x.shape[0]):\n                col_value = x[col_idx]\n                feature = (col_value, col_idx, label)\n                if feature in features:\n                    score += weights[features[feature]]\n            scores[label] = score\n        predicted_label = max(scores, key=scores.get)\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 568, "completion_id": 4, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"Implement a Maximum Entropy classifier using Generalized Iterative Scaling (GIS).\"\"\"\n    feature_dict = {}\n    num_features = 0\n    for i in range(X_train.shape[0]):\n        x = X_train[i]\n        y = y_train[i]\n        for feature_index in range(x.shape[0]):\n            feature_value = x[feature_index]\n            if (feature_index, feature_value, y) not in feature_dict:\n                feature_dict[feature_index, feature_value, y] = num_features\n                num_features += 1\n    weights = np.zeros(num_features)\n    unique_labels = np.unique(y_train)\n    num_labels = len(unique_labels)\n    label_to_index = {label: i for (i, label) in enumerate(unique_labels)}\n    y_train_numeric = np.array([label_to_index[label] for label in y_train])\n    for iteration in range(n_iter):\n        expected_counts = np.zeros(num_features)\n        total_examples = 0\n        for i in range(X_train.shape[0]):\n            x = X_train[i]\n            y_true = y_train_numeric[i]\n            total_examples += 1\n            log_probs = np.zeros(num_labels)\n            for (label_idx, label) in enumerate(unique_labels):\n                feature_values = []\n                for feature_index in range(x.shape[0]):\n                    feature_value = x[feature_index]\n                    feature_values.append((feature_index, feature_value, label))\n                score = 0\n                for (f_idx, f_val, f_label) in feature_values:\n                    if (f_idx, f_val, f_label) in feature_dict:\n                        feature_id = feature_dict[f_idx, f_val, f_label]\n                        score += weights[feature_id]\n                log_probs[label_idx] = score\n            max_score = np.max(log_probs)\n            probs = np.exp(log_probs - max_score - math.log(num_labels))\n            probs /= np.sum(probs)\n            for (label_idx, label) in enumerate(unique_labels):\n                for feature_index in range(x.shape[0]):\n                    feature_value = x[feature_index]\n                    if (feature_index, feature_value, label) in feature_dict:\n                        feature_id = feature_dict[feature_index, feature_value, label]\n                        expected_counts[feature_id] += probs[label_idx]\n        observed_counts = np.zeros(num_features)\n        for i in range(X_train.shape[0]):\n            x = X_train[i]\n            y_true = y_train[i]\n            for feature_index in range(x.shape[0]):\n                feature_value = x[feature_index]\n                if (feature_index, feature_value, y_true) in feature_dict:\n                    feature_id = feature_dict[feature_index, feature_value, y_true]\n                    observed_counts[feature_id] += 1\n        updates = observed_counts - expected_counts\n        update_magnitude = np.max(np.abs(updates))\n        if update_magnitude < epsilon:\n            break\n        weights += updates / total_examples\n    y_test_pred = []\n    for i in range(X_test.shape[0]):\n        x = X_test[i]\n        probabilities = np.zeros(num_labels)\n        for (label_idx, label) in enumerate(unique_labels):\n            score = 0\n            for feature_index in range(x.shape[0]):\n                feature_value = x[feature_index]\n                if (feature_index, feature_value, label) in feature_dict:\n                    feature_id = feature_dict[feature_index, feature_value, label]\n                    score += weights[feature_id]\n            probabilities[label_idx] = score\n        y_pred = unique_labels[np.argmax(probabilities)]\n        y_test_pred.append(int(y_pred))\n    return y_test_pred"}
{"task_id": 568, "completion_id": 5, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    (num_samples, num_features) = X_train.shape\n    num_labels = len(np.unique(y_train))\n    feature_id = {}\n    feature_list = []\n\n    def get_feature_id(feat_idx, feat_val, label):\n        key = (feat_idx, feat_val, label)\n        if key not in feature_id:\n            feature_id[key] = len(feature_id)\n            feature_list.append(key)\n        return feature_id[key]\n    feature_counts = np.zeros(len(feature_id))\n    feature_expected = np.zeros(len(feature_id))\n    for i in range(num_samples):\n        x = X_train[i]\n        y = y_train[i]\n        for j in range(num_features):\n            if x[j] != 0:\n                fid = get_feature_id(j, x[j], y)\n                feature_counts[fid] += 1\n    feature_expected = feature_counts / num_samples\n    weights = np.zeros(len(feature_id))\n    for _ in range(n_iter):\n        exp_sum = np.zeros(len(feature_id))\n        Z = np.zeros(num_samples)\n        for i in range(num_samples):\n            x = X_train[i]\n            max_p = -float('inf')\n            sum_norm_factors = 0.0\n            temp_feat_sum = defaultdict(float)\n            for y in range(num_labels):\n                score = 0.0\n                for j in range(num_features):\n                    if x[j] != 0:\n                        fid = get_feature_id(j, x[j], y)\n                        score += weights[fid]\n                temp_feat_sum[y] = math.exp(score)\n                if temp_feat_sum[y] > max_p:\n                    max_p = temp_feat_sum[y]\n            sum_norm_factors = sum(temp_feat_sum.values())\n            for y in range(num_labels):\n                prob = temp_feat_sum[y] / sum_norm_factors if sum_norm_factors > 0 else 0\n                for j in range(num_features):\n                    if x[j] != 0:\n                        fid = get_feature_id(j, x[j], y)\n                        exp_sum[fid] += prob\n        model_expected = exp_sum / num_samples\n        update = feature_expected - model_expected\n        max_step = float('-inf')\n        for i in range(len(weights)):\n            if update[i] != 0:\n                step = math.log((1 - update[i]) / abs(update[i])) if update[i] < 0 else math.log((1 + update[i]) / abs(update[i]))\n                if abs(step) > max_step:\n                    max_step = abs(step)\n        if max_step < epsilon:\n            break\n        weights += update * max_step\n    predictions = []\n    for x in X_test:\n        scores = defaultdict(float)\n        for y in range(num_labels):\n            score = 0.0\n            for j in range(num_features):\n                if x[j] != 0:\n                    fid = get_feature_id(j, x[j], y)\n                    score += weights[fid]\n            scores[y] = score\n        predicted = max(scores, key=scores.get)\n        predictions.append(predicted)\n    return predictions"}
{"task_id": 568, "completion_id": 6, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"Implements a Maximum Entropy classifier using Generalized Iterative Scaling (GIS).\"\"\"\n    (num_samples, num_features) = X_train.shape\n    num_labels = len(np.unique(y_train))\n    feature_index = {}\n    feature_count = 0\n    empirical_feature_expectations = defaultdict(float)\n    total_count = 0\n    for (x, y) in zip(X_train, y_train):\n        for col in range(num_features):\n            value = x[col]\n            if value != 0:\n                if (col, value, y) not in feature_index:\n                    feature_index[col, value, y] = feature_count\n                    feature_count += 1\n                empirical_feature_expectations[col, value, y] += 1\n                total_count += 1\n    if total_count == 0:\n        return [0] * X_test.shape[0]\n    for key in empirical_feature_expectations:\n        empirical_feature_expectations[key] /= total_count\n    weights = np.zeros(feature_count)\n    neg_log_pe = -np.log(empirical_feature_expectations) if empirical_feature_expectations else defaultdict(float)\n    labels = np.unique(y_train)\n    for _ in range(n_iter):\n        max_update = 0.0\n        for (x, y) in zip(X_train, y_train):\n            feature_map = defaultdict(float)\n            y_values = {}\n            for possible_y in labels:\n                y_values[possible_y] = 0.0\n                for col in range(num_features):\n                    value = x[col]\n                    if value != 0:\n                        feature = (col, value, possible_y)\n                        if feature in feature_index:\n                            idx = feature_index[feature]\n                            y_values[possible_y] += weights[idx]\n            max_val = max(y_values.values())\n            Z = max_val + math.log(sum((math.exp(val - max_val) for val in y_values.values())))\n            for possible_y in labels:\n                model_expected = math.exp(y_values[possible_y] - Z)\n                for col in range(num_features):\n                    value = x[col]\n                    if value != 0:\n                        feature = (col, value, possible_y)\n                        if feature in feature_index:\n                            idx = feature_index[feature]\n                            empirical = empirical_feature_expectations.get(feature, 0.0)\n                            if model_expected > 0:\n                                update = (empirical - model_expected) / model_expected\n                                weights[idx] += update\n                                if abs(update) > max_update:\n                                    max_update = abs(update)\n        if max_update < epsilon:\n            break\n    predictions = []\n    for x in X_test:\n        y_values = {}\n        for possible_y in labels:\n            score = 0.0\n            for col in range(num_features):\n                value = x[col]\n                if value != 0:\n                    feature = (col, value, possible_y)\n                    if feature in feature_index:\n                        idx = feature_index[feature]\n                        score += weights[idx]\n            y_values[possible_y] = score\n        predicted_y = max(y_values, key=y_values.get)\n        predictions.append(predicted_y)\n    return predictions"}
{"task_id": 568, "completion_id": 7, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"Maximum Entropy classifier using Generalized Iterative Scaling (GIS).\"\"\"\n    features = set()\n    for i in range(X_train.shape[0]):\n        x = X_train[i]\n        y = y_train[i]\n        for feature_idx in range(x.shape[0]):\n            feature_val = x[feature_idx]\n            if feature_val != '':\n                features.add((feature_idx, feature_val, y))\n    feature_to_idx = {feature: idx for (idx, feature) in enumerate(features)}\n    n_features = len(features)\n    empirical_expectations = defaultdict(float)\n    for i in range(X_train.shape[0]):\n        x = X_train[i]\n        y = y_train[i]\n        for feature_idx in range(x.shape[0]):\n            feature_val = x[feature_idx]\n            if feature_val != '':\n                feature = (feature_idx, feature_val, y)\n                if feature in feature_to_idx:\n                    empirical_expectations[feature] += 1.0\n    total_samples = X_train.shape[0]\n    for feature in empirical_expectations:\n        empirical_expectations[feature] /= total_samples\n    weights = np.zeros(n_features)\n    for _ in range(n_iter):\n        model_expectations = defaultdict(float)\n        for i in range(X_train.shape[0]):\n            x = X_train[i]\n            unique_labels = np.unique(y_train)\n            log_Z = float('-inf')\n            for y in unique_labels:\n                score = 0.0\n                for feature_idx in range(x.shape[0]):\n                    feature_val = x[feature_idx]\n                    if feature_val != '':\n                        feature = (feature_idx, feature_val, y)\n                        if feature in feature_to_idx:\n                            score += weights[feature_to_idx[feature]]\n                log_Z = max(log_Z, score)\n            Z = 0.0\n            for y in unique_labels:\n                score = 0.0\n                for feature_idx in range(x.shape[0]):\n                    feature_val = x[feature_idx]\n                    if feature_val != '':\n                        feature = (feature_idx, feature_val, y)\n                        if feature in feature_to_idx:\n                            score += weights[feature_to_idx[feature]]\n                Z += math.exp(score - log_Z)\n            Z = math.exp(log_Z) * Z\n            y_true = y_train[i]\n            for y in unique_labels:\n                score = 0.0\n                for feature_idx in range(x.shape[0]):\n                    feature_val = x[feature_idx]\n                    if feature_val != '':\n                        feature = (feature_idx, feature_val, y)\n                        if feature in feature_to_idx:\n                            score += weights[feature_to_idx[feature]]\n                P_y_given_x = math.exp(score - log_Z) / Z\n                for feature_idx in range(x.shape[0]):\n                    feature_val = x[feature_idx]\n                    if feature_val != '':\n                        feature = (feature_idx, feature_val, y)\n                        if feature in feature_to_idx:\n                            model_expectations[feature] += P_y_given_x * (1 / total_samples)\n        max_update = 0.0\n        for feature in features:\n            if feature in empirical_expectations:\n                empirical = empirical_expectations[feature]\n                model = model_expectations.get(feature, 0.0)\n                if model == 1.0:\n                    update = 0.0\n                else:\n                    update = math.log(empirical / model)\n                    weights[feature_to_idx[feature]] += update\n                    max_update = max(max_update, abs(update))\n            else:\n                update = math.log(1e-30 / model_expectations.get(feature, 0.0))\n                weights[feature_to_idx[feature]] += update\n                max_update = max(max_update, abs(update))\n        if max_update < epsilon:\n            break\n    y_pred = []\n    for x in X_test:\n        best_y = None\n        best_score = -float('inf')\n        for y in np.unique(y_train):\n            score = 0.0\n            for feature_idx in range(x.shape[0]):\n                feature_val = x[feature_idx]\n                if feature_val != '':\n                    feature = (feature_idx, feature_val, y)\n                    if feature in feature_to_idx:\n                        score += weights[feature_to_idx[feature]]\n            if score > best_score:\n                best_score = score\n                best_y = y\n        y_pred.append(best_y)\n    return y_pred"}
{"task_id": 568, "completion_id": 8, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    (n_samples, n_features) = X_train.shape\n    labels = np.unique(y_train)\n    n_labels = len(labels)\n    feature_index = dict()\n    index_to_feature = []\n    feature_count = 0\n    for j in range(n_features):\n        for val in np.unique(X_train[:, j]):\n            for label in labels:\n                feature = (j, val, label)\n                if feature not in feature_index:\n                    feature_index[feature] = feature_count\n                    index_to_feature.append(feature)\n                    feature_count += 1\n    E = defaultdict(int)\n    for i in range(n_samples):\n        x = X_train[i]\n        y = y_train[i]\n        for j in range(n_features):\n            val = x[j]\n            feature = (j, val, y)\n            if feature in feature_index:\n                E[feature_index[feature], y] += 1\n    n_features_total = len(feature_index)\n    w = np.zeros(n_features_total)\n    weights_update = np.zeros(n_features_total)\n    for _ in range(n_iter):\n        M = defaultdict(float)\n        for ((f_idx, y), count) in E.items():\n            M[f_idx, y] = count\n        Q = defaultdict(float)\n        for i in range(n_samples):\n            x = X_train[i]\n            for y in labels:\n                phi = 1.0\n                sum_exp = 0.0\n                for j in range(n_features):\n                    val = x[j]\n                    feature = (j, val, y)\n                    if feature in feature_index:\n                        sum_exp += w[feature_index[feature]]\n                phi = math.exp(sum_exp)\n                denominator = 0.0\n                for y_hat in labels:\n                    sum_other = 0.0\n                    for j in range(n_features):\n                        val_other = x[j]\n                        feature_other = (j, val_other, y_hat)\n                        if feature_other in feature_index:\n                            sum_other += w[feature_index[feature_other]]\n                    exp_other = math.exp(sum_other)\n                    denominator += exp_other\n                prob_y = phi / denominator\n                for j in range(n_features):\n                    val = x[j]\n                    feature = (j, val, y)\n                    if feature in feature_index:\n                        f_idx = feature_index[feature]\n                        Q[f_idx, y] += prob_y\n        D = defaultdict(float)\n        for f in range(n_features_total):\n            for y in labels:\n                if (f, y) in M or (f, y) in Q:\n                    D[f] += M[f, y] - Q[f, y]\n        delta = 1.0\n        converged = True\n        for f in range(n_features_total):\n            if D[f] != 0:\n                denom = 0.0\n                for y in labels:\n                    for j in range(n_features):\n                        val = X_train[0][j]\n                        feature = (j, val, y)\n                        if feature in feature_index:\n                            f_idx = feature_index[feature]\n                            if f_idx == f:\n                                denom += 1.0\n                if denom == 0:\n                    continue\n                delta = 2 * math.log(D[f] / denom) / (D[f] / denom - 1) if D[f] / denom != 1 else 1.0\n                delta = min(delta, 1.0)\n        if abs(delta) < epsilon:\n            break\n        for f in range(n_features_total):\n            for y in labels:\n                if (f, y) in Q:\n                    num = Q[f, y]\n                    denom = 0.0\n                    for y2 in labels:\n                        sum_inner = 0.0\n                        for j in range(n_features):\n                            val = X_train[i][j]\n                            feature = (j, val, y2)\n                            if feature in feature_index:\n                                sum_inner += w[feature_index[feature]]\n                        exp_inner = math.exp(sum_inner)\n                        denom += exp_inner\n                    weight_change = delta * math.log(num / denom + 1e-08)\n                    w[f] += weight_change\n    predictions = []\n    for x_test in X_test:\n        best_label = None\n        best_score = -np.inf\n        for y in labels:\n            score = 0.0\n            for j in range(n_features):\n                val = x_test[j]\n                feature = (j, val, y)\n                if feature in feature_index:\n                    score += w[feature_index[feature]]\n            if score > best_score:\n                best_score = score\n                best_label = y\n        predictions.append(int(best_label))\n    return predictions\nX_train = np.array([[1, 2], [3, 1], [2, 2]])\ny_train = np.array([0, 1, 0])\nX_test = np.array([[1, 1], [2, 2]])"}
{"task_id": 568, "completion_id": 9, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"Implements a Maximum Entropy classifier with Generalized Iterative Scaling (GIS).\"\"\"\n    (num_samples, num_features) = X_train.shape\n    num_classes = len(np.unique(y_train))\n    feature_to_index = {}\n    feature_index_to_tuple = {}\n    feature_counter = 0\n    for i in range(num_samples):\n        x_i = X_train[i]\n        y_i = y_train[i]\n        for f_idx in range(num_features):\n            f_val = x_i[f_idx]\n            if (f_idx, f_val, y_i) not in feature_to_index:\n                feature_to_index[f_idx, f_val, y_i] = feature_counter\n                feature_index_to_tuple[feature_counter] = (f_idx, f_val, y_i)\n                feature_counter += 1\n    num_features_total = feature_counter\n    w = np.zeros(num_features_total)\n    feature_counts = defaultdict(float)\n    label_counts = defaultdict(float)\n    for i in range(num_samples):\n        x_i = X_train[i]\n        y_i = y_train[i]\n        label_counts[y_i] += 1\n        for f_idx in range(num_features):\n            f_val = x_i[f_idx]\n            feature_counts[f_idx, f_val, y_i] += 1\n    for ((f_idx, f_val, y_i), count) in feature_counts.items():\n        feature_counts[f_idx, f_val, y_i] = count / label_counts[y_i]\n    for iteration in range(n_iter):\n        max_update = 0.0\n        for y in label_counts:\n            model_expectation = defaultdict(float)\n            for i in range(num_samples):\n                x_i = X_train[i]\n                y_i = y_train[i]\n                if y_i != y:\n                    continue\n                log_denominator = 0.0\n                for f_idx in range(num_features):\n                    f_val = x_i[f_idx]\n                    if (f_idx, f_val, y) in feature_to_index:\n                        j = feature_to_index[f_idx, f_val, y]\n                        log_denominator += w[j]\n                for f_idx in range(num_features):\n                    f_val = x_i[f_idx]\n                    if (f_idx, f_val, y) in feature_to_index:\n                        j = feature_to_index[f_idx, f_val, y]\n                        model_expectation[f_idx, f_val, y] += math.exp(w[j] - log_denominator)\n            label_count = label_counts[y]\n            for key in model_expectation:\n                model_expectation[key] /= label_count\n            update = {}\n            epsilon_y = 0.0\n            for key in feature_counts:\n                if key[2] == y:\n                    empirical = feature_counts[key]\n                    model = model_expectation.get(key, 0.0)\n                    delta = math.log(empirical / model) if model > 0 else 0.0\n                    update[key] = delta\n                    epsilon_y = max(epsilon_y, abs(delta))\n            for (key, delta) in update.items():\n                j = feature_to_index[key]\n                w[j] += delta\n            max_update = max(max_update, epsilon_y)\n        if max_update < epsilon:\n            break\n    y_pred = []\n    for x_test in X_test:\n        best_prob = -float('inf')\n        best_y = None\n        for y in label_counts:\n            log_numerator = 0.0\n            for f_idx in range(num_features):\n                f_val = x_test[f_idx]\n                if (f_idx, f_val, y) in feature_to_index:\n                    j = feature_to_index[f_idx, f_val, y]\n                    log_numerator += w[j]\n            log_denominator = 0.0\n            for y_candidate in label_counts:\n                candidate_sum = 0.0\n                for f_idx in range(num_features):\n                    f_val = x_test[f_idx]\n                    if (f_idx, f_val, y_candidate) in feature_to_index:\n                        j_candidate = feature_to_index[f_idx, f_val, y_candidate]\n                        candidate_sum += w[j_candidate]\n                log_denominator += math.exp(log_numerator - candidate_sum)\n            prob = math.exp(log_numerator - math.log(log_denominator)) if log_denominator > 0 else 0.0\n            if prob > best_prob:\n                best_prob = prob\n                best_y = y\n        y_pred.append(best_y)\n    return y_pred"}
{"task_id": 569, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of *unique* words.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_counter = Counter()\n    total_docs = len(data)\n    for (label, words) in data:\n        unique_words = set(words)\n        word_counter.update(unique_words)\n    word_freq = [(word, round(count / total_docs, 4)) for (word, count) in word_counter.items()]\n    word_freq.sort(key=lambda x: (-x[1], x[0]))\n    all_words = [word for (word, _) in word_freq]\n    if cut_off is None:\n        top_words = set(all_words)\n    elif cut_off == 0:\n        top_words = set()\n    else:\n        top_words = set(all_words[:min(cut_off, len(all_words))])\n    return (word_freq, top_words)"}
{"task_id": 569, "completion_id": 1, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_docs = len(data)\n    if total_docs == 0:\n        return ([], set())\n    doc_freq_counter = Counter()\n    for (_, words) in data:\n        unique_words_in_doc = set(words)\n        doc_freq_counter.update(unique_words_in_doc)\n    doc_freq_ratios = {word: round(count / total_docs, 4) for (word, count) in doc_freq_counter.items()}\n    sorted_words = sorted(doc_freq_ratios.items(), key=lambda item: item[1], reverse=True)\n    if cut_off is None:\n        most_common_words = set((word for (word, _) in sorted_words))\n    elif cut_off == 0:\n        most_common_words = set()\n    else:\n        most_common_words = set((word for (word, _) in sorted_words[:cut_off]))\n    return (sorted_words, most_common_words)\ndata = [('doc1', ['apple', 'banana', 'cherry']), ('doc2', ['apple', 'banana']), ('doc3', ['apple', 'orange'])]"}
{"task_id": 569, "completion_id": 2, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_documents = len(data)\n    if total_documents == 0:\n        return ([], set())\n    word_doc_count = Counter()\n    for (label, words) in data:\n        word_set = set(words)\n        word_doc_count.update(word_set)\n    word_freq_ratios = [(word, round(count / total_documents, 4)) for (word, count) in word_doc_count.items()]\n    word_freq_ratios.sort(key=lambda x: (-x[1], x[0]))\n    if cut_off is None:\n        result_set = set((word for (word, _) in word_freq_ratios))\n    elif cut_off == 0:\n        result_set = set()\n    else:\n        result_set = set((word for (word, _) in word_freq_ratios[:cut_off]))\n    return (word_freq_ratios, result_set)"}
{"task_id": 569, "completion_id": 3, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    if not data:\n        return ([], set())\n    num_docs = len(data)\n    word_doc_counts = Counter()\n    for (_, words) in data:\n        unique_words = frozenset(words)\n        for word in unique_words:\n            word_doc_counts[word] += 1\n    word_ratios = sorted([(word, round(count / num_docs, 4)) for (word, count) in word_doc_counts.items()], key=lambda x: (-x[1], x[0]))\n    words_only = [word for (word, _) in word_ratios]\n    if cut_off is None:\n        selected_words = set(words_only)\n    elif cut_off == 0:\n        selected_words = set()\n    else:\n        selected_words = set(words_only[:min(cut_off, len(words_only))])\n    return (word_ratios, selected_words)"}
{"task_id": 569, "completion_id": 4, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of *str*.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with:\n        (1) a list of (word, ratio) pairs and \n        (2) a set of the most frequent words.\n    \"\"\"\n    doc_count = len(data)\n    word_in_docs = Counter()\n    for (label, words) in data:\n        unique_words = set(words)\n        word_in_docs.update(unique_words)\n    word_freq = [(word, round(count / doc_count, 4)) for (word, count) in word_in_docs.items()]\n    word_freq_sorted = sorted(word_freq, key=lambda x: (-x[1], x[0]))\n    all_words_set = set((word for (word, _) in word_freq_sorted))\n    if cut_off is None:\n        top_words_set = all_words_set\n    elif cut_off == 0:\n        top_words_set = set()\n    else:\n        top_words_set = set((word for (word, _) in word_freq_sorted[:cut_off]))\n    return (word_freq_sorted, top_words_set)"}
{"task_id": 569, "completion_id": 5, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_docs = len(data)\n    if total_docs == 0:\n        return ([], set())\n    doc_freq = Counter()\n    for (label, words) in data:\n        unique_words_in_doc = set(words)\n        doc_freq.update(unique_words_in_doc)\n    doc_freq_list = [(word, round(count / total_docs, 4)) for (word, count) in doc_freq.items()]\n    doc_freq_list.sort(key=lambda x: (-x[1], x[0]))\n    word_set = set((word for (word, _) in doc_freq_list))\n    if cut_off is None:\n        final_set = word_set\n    elif cut_off == 0:\n        final_set = set()\n    else:\n        cut_off = min(cut_off, len(word_set))\n        final_set = set((doc_freq_list[i][0] for i in range(cut_off)))\n    return (doc_freq_list, final_set)"}
{"task_id": 569, "completion_id": 6, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    if not data:\n        return ([], set())\n    num_docs = len(data)\n    word_doc_count = Counter()\n    for (_, words) in data:\n        unique_words = set(words)\n        word_doc_count.update(unique_words)\n    word_freq_ratios = [(word, round(count / num_docs, 4)) for (word, count) in word_doc_count.items()]\n    word_freq_ratios.sort(key=lambda x: x[1], reverse=True)\n    if cut_off is not None:\n        if cut_off <= 0:\n            return (word_freq_ratios, set())\n        elif cut_off > len(word_doc_count):\n            return (word_freq_ratios, set(word_doc_count.keys()))\n        else:\n            most_common_words = set((word for (word, _) in word_freq_ratios[:cut_off]))\n            return (word_freq_ratios, most_common_words)\n    else:\n        return (word_freq_ratios, set(word_doc_count.keys()))\ndata = [('doc1', ['apple', 'banana', 'cherry']), ('doc2', ['apple', 'grape']), ('doc3', ['banana', 'cherry', 'apple']), ('doc4', ['kiwi', 'banana'])]"}
{"task_id": 569, "completion_id": 7, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    num_docs = len(data)\n    doc_freq = Counter()\n    for (_, words) in data:\n        unique_words = set(words)\n        doc_freq.update(unique_words)\n    for word in doc_freq:\n        doc_freq[word] = round(doc_freq[word] / num_docs, 4)\n    sorted_words = sorted(doc_freq.items(), key=lambda x: (-x[1], x[0]))\n    if cut_off == 0:\n        common_words = set()\n    elif cut_off is None:\n        common_words = set(doc_freq.keys())\n    else:\n        num_distinct_words = len(doc_freq)\n        effective_cutoff = min(cut_off, num_distinct_words)\n        top_words = [word for (word, _) in sorted_words[:effective_cutoff]]\n        common_words = set(top_words)\n    return (sorted_words, common_words)"}
{"task_id": 569, "completion_id": 8, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    if not data:\n        return ([], set())\n    total_docs = len(data)\n    doc_freq = Counter[str]()\n    for (_, words) in data:\n        unique_words_in_doc = set(words)\n        doc_freq.update(unique_words_in_doc)\n    word_freq_list = [(word, round(count / total_docs, 4)) for (word, count) in doc_freq.items()]\n    word_freq_list.sort(key=lambda x: x[1], reverse=True)\n    words = [word for (word, _) in word_freq_list]\n    if cut_off is None:\n        result_set = set(words)\n    elif cut_off == 0:\n        result_set = set()\n    else:\n        result_set = set(words[:cut_off])\n    return (word_freq_list, result_set)"}
{"task_id": 569, "completion_id": 9, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_docs = len(data)\n    word_doc_counter = Counter()\n    for (label, words) in data:\n        unique_words_in_doc = set(words)\n        word_doc_counter.update(unique_words_in_doc)\n    word_freq = [(word, round(count / total_docs, 4)) for (word, count) in word_doc_counter.items()]\n    word_freq.sort(key=lambda x: (-x[1], x[0]))\n    distinct_word_count = len(word_freq)\n    if cut_off is None or cut_off >= distinct_word_count:\n        top_words_set = set((word for (word, _) in word_freq))\n    elif cut_off == 0:\n        top_words_set = set()\n    else:\n        top_words_set = set((word for (word, _) in word_freq[:cut_off]))\n    return (word_freq, top_words_set)"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = X.T @ (alpha * y)\n    b = np.mean(y - X @ w)\n    w_rounded = np.round(w, 4)\n    b_rounded = round(b, 4)\n    w_list = w_rounded.tolist()\n    return (w_list, b_rounded)\nX = np.array([[1, 2], [2, 3], [3, 3]])\ny = np.array([1, -1, 1])\nalpha = np.array([0.3, 0.5, 0.2])"}
{"task_id": 571, "completion_id": 1, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = X.T @ (alpha * y)\n    b = np.mean(y - X @ w)\n    w_list = np.round(w, 4).tolist()\n    b = round(b, 4)\n    return (w_list, b)"}
{"task_id": 571, "completion_id": 2, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = X.T @ (alpha * y)\n    w_x = X @ w\n    b = np.mean(y - w_x)\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = float(np.round(b, 4))\n    return (w_rounded, b_rounded)"}
{"task_id": 571, "completion_id": 3, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = X.T @ (alpha * y)\n    w = np.round(w, 4)\n    n_samples = X.shape[0]\n    b = 1 / n_samples * np.sum(y - X @ w)\n    b = round(b, 4)\n    w_list = w.tolist()\n    return (w_list, b)"}
{"task_id": 571, "completion_id": 4, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    alpha_y = alpha * y\n    w = X.T @ alpha_y\n    b = np.mean(y - X @ w)\n    w_list = [round(val, 4) for val in w]\n    b = round(b, 4)\n    return (w_list, b)\nX = np.array([[1, 2], [2, 3], [3, 4]])\ny = np.array([1, -1, 1])\nalpha = np.array([0.2, 0.1, 0.3])"}
{"task_id": 571, "completion_id": 5, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = X.T @ (alpha * y)\n    predictions = X @ w\n    b = np.mean(y - predictions)\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 571, "completion_id": 6, "solution": "import numpy as np\nimport numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = X.T @ (alpha * y)\n    predictions = X @ w\n    b = np.mean(y - predictions)\n    w_rounded = np.round(w, 4)\n    b_rounded = round(b, 4)\n    w_list = w_rounded.tolist()\n    return (w_list, b_rounded)\nX = np.array([[1, 2], [2, 3], [3, 4]])\ny = np.array([1, 1, -1])\nalpha = np.array([0.3, 0.5, 0.2])"}
{"task_id": 571, "completion_id": 7, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = X.T @ (alpha * y)\n    n_samples = X.shape[0]\n    b = 0.0\n    for i in range(n_samples):\n        xi = X[i]\n        wi_dot_xi = np.dot(w, xi)\n        b += y[i] - wi_dot_xi\n    b /= n_samples\n    w_rounded = [round(w_j, 4) for w_j in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)\nX = np.array([[1, 2], [2, 3], [3, 3]])\ny = np.array([1, -1, 1])\nalpha = np.array([0.5, 0.0, 1.0])"}
{"task_id": 571, "completion_id": 8, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = X.T @ (alpha * y)\n    w = np.round(w, 4)\n    w_list = w.tolist()\n    if len(w_list) == 1:\n        w_list = w_list[0]\n    b = 1 / len(y) * np.sum(y - X @ w)\n    b = np.round(b, 4)\n    return (w_list, b)\nX = np.array([[1, 2], [2, 3], [3, 3]])\ny = np.array([1, -1, 1])\nalpha = np.array([0.1, 0.3, 0.2])"}
{"task_id": 571, "completion_id": 9, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = X.T @ (alpha * y)\n    w_x = X @ w\n    b = np.mean(y - w_x)\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 572, "completion_id": 0, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Implements the Local Outlier Factor (LOF) algorithm from scratch.\n    \n    Args:\n        data (np.ndarray): 2D data array with shape (n_samples, n_features).\n        k (int): Number of nearest neighbors to consider.\n        epsilon (float): Threshold for identifying outliers based on LOF score.\n    \n    Returns:\n        tuple: (list_of_scores, list_of_outlier_indices), with scores rounded to 4 decimals.\n    \"\"\"\n    (n, d) = data.shape\n    assert 1 <= k < n, 'k must satisfy 1 \u2264 k < n'\n    dists = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i, n):\n            dist = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n            dists[i][j] = dist\n            dists[j][i] = dist\n    k_distances = np.zeros(n)\n    neighbors = [[] for _ in range(n)]\n    for i in range(n):\n        sorted_indices = np.argsort(dists[i])\n        sorted_indices = sorted_indices[sorted_indices != i]\n        k_nearest = sorted_indices[:k]\n        k_distances[i] = dists[i, k_nearest[-1]]\n        neighbors[i] = k_nearest\n    reach_dists = np.zeros((n, n))\n    for i in range(n):\n        for j in neighbors[i]:\n            reach_dists[i, j] = max(k_distances[j], dists[i, j])\n    lrd = np.zeros(n)\n    for i in range(n):\n        sum_reach_dist = np.sum(reach_dists[i, neighbors[i]])\n        lrd[i] = k / sum_reach_dist\n    lof_scores = np.zeros(n)\n    for i in range(n):\n        if lrd[i] == 0:\n            lof_scores[i] = 0.0\n            continue\n        sum_lrd_neighbors = np.sum(lrd[neighbors[i]])\n        lof_scores[i] = sum_lrd_neighbors / (k * lrd[i])\n    lof_scores_rounded = np.round(lof_scores, 4).tolist()\n    outlier_indices = np.argwhere(np.array(lof_scores_rounded) > epsilon).flatten()\n    outlier_indices_sorted = np.sort(outlier_indices).tolist()\n    return (lof_scores_rounded, outlier_indices_sorted)\ndata = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [10, 10]])"}
{"task_id": 572, "completion_id": 1, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    (n_samples, n_features) = data.shape\n    diff = data[:, np.newaxis, :] - data[np.newaxis, :, :]\n    dist_matrix = np.sqrt(np.sum(diff ** 2, axis=2))\n    k_distances = np.zeros(n_samples)\n    neighbors_k = []\n    for i in range(n_samples):\n        dist = dist_matrix[i, :].copy()\n        dist[i] = np.inf\n        nearest_indices = np.argsort(dist)[:k]\n        k_neighbors = nearest_indices\n        k_dist = dist[nearest_indices[-1]]\n        neighbors_k.append(k_neighbors)\n        k_distances[i] = k_dist\n    reach_dist = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j and j in neighbors_k[i]:\n                reach_dist[i][j] = max(k_distances[j], dist_matrix[i][j])\n            else:\n                reach_dist[i][j] = np.inf\n    lrd = np.zeros(n_samples)\n    for i in range(n_samples):\n        total_reach = np.sum([reach_dist[i][j] for j in neighbors_k[i] if not np.isinf(reach_dist[i][j])])\n        lrd[i] = k / total_reach\n    lof = np.zeros(n_samples)\n    for i in range(n_samples):\n        lrd_neighbors = [lrd[j] for j in neighbors_k[i] if not np.isinf(reach_dist[i][j])]\n        lof[i] = np.sum(lrd_neighbors) / k / lrd[i]\n    lof_scores = np.round(lof, 4)\n    outlier_indices = np.argsort(lof_scores)\n    outlier_indices = [i for i in outlier_indices if lof_scores[i] > epsilon]\n    return (lof_scores.tolist(), outlier_indices)\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [8, 9], [9, 8]])"}
{"task_id": 572, "completion_id": 2, "solution": "import numpy as np\nimport numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Computes Local Outlier Factor (LOF) scores for each sample in `data`.\"\"\"\n    (n, d) = data.shape\n    if k >= n:\n        raise ValueError('k must be less than the number of samples `n`.')\n    diff = data[:, np.newaxis, :] - data[np.newaxis, :, :]\n    dist_matrix = np.sqrt(np.sum(diff ** 2, axis=2))\n    k_distances = np.zeros(n)\n    neighbors = []\n    for i in range(n):\n        idxs = np.argsort(dist_matrix[i])[1:k + 1]\n        distances = dist_matrix[i, idxs]\n        neighbors.append(idxs)\n        k_distances[i] = distances[-1]\n    reach_dist = np.zeros_like(dist_matrix)\n    for i in range(n):\n        for j in neighbors[i]:\n            reach_dist[i][j] = max(k_distances[j], dist_matrix[i][j])\n            reach_dist[j][i] = max(k_distances[i], dist_matrix[j][i])\n    LRD = np.zeros(n)\n    for i in range(n):\n        reach_sum = np.sum(reach_dist[i][neighbors[i]])\n        LRD[i] = k / reach_sum if reach_sum != 0 else np.inf\n    LOF = np.zeros(n)\n    for i in range(n):\n        lrd_sum = np.sum(LRD[neighbors[i]])\n        LOF[i] = lrd_sum / k / LRD[i] if LRD[i] != 0 else np.inf\n    LOF_rounded = np.round(LOF, 4)\n    outlier_indices = np.where(LOF_rounded > epsilon)[0].tolist()\n    outlier_indices.sort()\n    return (LOF_rounded.tolist(), outlier_indices)\ndata = np.array([[1, 1], [2, 2], [1.5, 1.5], [9, 9], [8, 8], [8.5, 8.5]])\nk = 3"}
{"task_id": 572, "completion_id": 3, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Compute the LOF for each sample in the data and identify outliers.\n\n    Parameters:\n    - data: NumPy array of shape (n, d) where n is number of samples and d is number of features.\n    - k: Number of nearest neighbors to consider.\n    - epsilon: Threshold for LOF score to consider a sample as an outlier.\n\n    Returns:\n    - Tuple (list_of_scores, list_of_outlier_indices)\n      - list_of_scores: LOF scores rounded to 4 decimals.\n      - list_of_outlier_indices: Indices of samples with LOF > epsilon, sorted in ascending order.\n    \"\"\"\n    (n, d) = data.shape\n    dist_matrix = np.sqrt(np.sum((data[:, np.newaxis, :] - data[np.newaxis, :, :]) ** 2, axis=2))\n    k_distances = np.partition(dist_matrix, k - 1, axis=1)[:, k - 1]\n    nearest_neighbors = np.argsort(dist_matrix, axis=1)[:, 1:k + 1]\n    reach_dist = np.maximum(dist_matrix, k_distances[np.newaxis, :].T)\n    lrd = k / np.sum(np.take_along_axis(reach_dist, nearest_neighbors, axis=1), axis=1)\n    lof = np.zeros(n)\n    for i in range(n):\n        neighbors = nearest_neighbors[i]\n        lof[i] = np.mean(lrd[neighbors]) / lrd[i]\n    lof_scores = np.round(lof, 4)\n    outlier_indices = np.where(lof_scores > epsilon)[0].tolist()\n    return (lof_scores.tolist(), sorted(outlier_indices))\ndata = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [10, 10]])"}
{"task_id": 572, "completion_id": 4, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    (n, m) = data.shape\n    distances = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            distances[i, j] = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n    k_distances = np.zeros(n)\n    k_neighbors = [[] for _ in range(n)]\n    for i in range(n):\n        indices = np.argsort(distances[i])[1:k + 2]\n        k_neighbors[i] = indices[:k]\n        k_distances[i] = distances[i, indices[k - 1]]\n\n    def reach_dist(i, j):\n        return max(k_distances[j], distances[i, j])\n    lrd = np.zeros(n)\n    for i in range(n):\n        denom = sum((reach_dist(i, j) for j in k_neighbors[i]))\n        lrd[i] = k / denom if denom != 0 else float('inf')\n    lof_scores = np.zeros(n)\n    for i in range(n):\n        if lrd[i] == float('inf'):\n            lof_scores[i] = float('inf')\n            continue\n        numerator = sum((lrd[j] for j in k_neighbors[i])) / k\n        lof_scores[i] = numerator / lrd[i]\n    lof_scores = np.round(lof_scores, 4)\n    outlier_indices = np.argsort(lof_scores)[np.argsort(lof_scores)]\n    outlier_indices = [i for i in outlier_indices if lof_scores[i] > epsilon]\n    return (lof_scores.tolist(), outlier_indices)\ndata = np.array([[1, 2], [2, 2], [3, 2], [10, 10], [11, 10], [12, 10]])"}
{"task_id": 572, "completion_id": 5, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Computes the LOF scores and identifies outliers based on an epsilon threshold.\n    \n    Parameters:\n    - data: numpy array of shape (n_samples, n_features)\n    - k: number of nearest neighbors to consider\n    - epsilon: threshold to identify outliers\n    \n    Returns:\n    - tuple: (list_of_lof_scores, list_of_outlier_indices)\n    \"\"\"\n    (n, m) = data.shape\n\n    def euclidean_dist(x, y):\n        return np.sqrt(np.sum((x - y) ** 2))\n    distance_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            distance_matrix[i, j] = euclidean_dist(data[i], data[j])\n    k_distances = []\n    k_neighbors = []\n    for i in range(n):\n        dists = [(distance_matrix[i, j], j) for j in range(n) if i != j]\n        dists.sort()\n        k_dist = dists[k][0]\n        k_nns = [j for (_, j) in dists[:k]]\n        k_distances.append(k_dist)\n        k_neighbors.append(k_nns)\n\n    def reach_dist(p, q):\n        return max(k_distances[q], distance_matrix[p, q])\n    lrd_scores = np.zeros(n)\n    for i in range(n):\n        denom = sum((reach_dist(i, j) for j in k_neighbors[i]))\n        lrd_scores[i] = k / denom\n    lof_scores = np.zeros(n)\n    for i in range(n):\n        numerator = sum((lrd_scores[j] for j in k_neighbors[i])) / k\n        lof_scores[i] = numerator / lrd_scores[i]\n    lof_scores_rounded = np.round(lof_scores, 4).tolist()\n    outlier_indices = sorted([i for (i, lof) in enumerate(lof_scores_rounded) if lof > epsilon])\n    return (lof_scores_rounded, outlier_indices)\ndata = np.array([[1, 1], [1.5, 1.2], [1, 2], [1.5, 2], [4, 2], [5, 2.1], [6, 2]])\nk = 2\nepsilon = 1.5"}
{"task_id": 572, "completion_id": 6, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    (n, d) = data.shape\n    if k >= n:\n        raise ValueError('k must be less than the number of samples')\n    dist_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            dist_matrix[i, j] = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n    k_distances = np.zeros(n)\n    nearest_neighbours = [[] for _ in range(n)]\n    for p in range(n):\n        distances = [(dist_matrix[p, q], q) for q in range(n) if q != p]\n        distances.sort()\n        k_nearest = distances[:k]\n        k_distances[p] = k_nearest[-1][0]\n        nearest_neighbours[p] = [q for (d, q) in k_nearest]\n\n    def reach_dist(p, q):\n        return max(k_distances[q], dist_matrix[p, q])\n    lrd_scores = np.zeros(n)\n    for p in range(n):\n        rp_reachability_sum = sum((reach_dist(p, q) for q in nearest_neighbours[p]))\n        lrd_scores[p] = k / rp_reachability_sum\n    lof_scores = np.zeros(n)\n    for p in range(n):\n        lrd_sum = sum((lrd_scores[q] for q in nearest_neighbours[p]))\n        lof_scores[p] = lrd_sum / k / lrd_scores[p]\n    lof_scores_rounded = np.round(lof_scores, 4).tolist()\n    outlier_indices = [i for (i, score) in enumerate(lof_scores_rounded) if score > epsilon]\n    outlier_indices.sort()\n    return (lof_scores_rounded, outlier_indices)\ndata = np.array([[1, 2], [2, 1], [1.5, 2.5], [4, 5], [5, 4], [4.5, 5.5], [8, 8], [10, 8], [10, 10]])\nk = 2\nepsilon = 1.5"}
{"task_id": 572, "completion_id": 7, "solution": "import numpy as np\nimport numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Compute the Local Outlier Factor (LOF) for each data point (from scratch).\n\n    Parameters:\n    - data: A numpy ndarray of shape (n, d), where n is the number of samples and d is the number of features.\n    - k: An integer representing the number of nearest neighbors to consider.\n    - epsilon: A float threshold for identifying outliers. If LOF > epsilon, it's an outlier.\n\n    Returns:\n    - A tuple (lof_scores, outlier_indices), where lof_scores contains LOF values (rounded to 4 decimals),\n      and outlier_indices is the sorted list of indices where LOF > epsilon.\n    \"\"\"\n    (n, d) = data.shape\n    distance_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            distance_matrix[i, j] = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n    k_distance = np.zeros(n)\n    nearest_neighbor_indices = []\n    for i in range(n):\n        distances = np.argsort(distance_matrix[i])\n        distances = distances[distances != i]\n        if distances.shape[0] < k:\n            raise ValueError(f'Sample {i} has less than {k} neighbors; consider reducing k.')\n        kth_index = distances[k - 1]\n        k_distance[i] = distance_matrix[i, kth_index]\n        neighbors = distances[:k]\n        nearest_neighbor_indices.append(list(neighbors))\n\n    def lrd(i):\n        reach_sum = 0\n        for j in nearest_neighbor_indices[i]:\n            reach_dist = max(k_distance[j], distance_matrix[i, j])\n            reach_sum += reach_dist\n        return k / reach_sum if reach_sum > 0 else np.inf\n    lrd_values = [lrd(i) for i in range(n)]\n    lof_scores = []\n    for i in range(n):\n        neighbor_lrd_sum = 0\n        for j in nearest_neighbor_indices[i]:\n            neighbor_lrd_sum += lrd_values[j]\n        lof = neighbor_lrd_sum / k / lrd_values[i]\n        lof_scores.append(np.round(lof, 4))\n    outlier_indices = [i for (i, lof) in enumerate(lof_scores) if lof > epsilon]\n    outlier_indices.sort()\n    return (lof_scores, outlier_indices)\ndata = np.array([[1.0, 2.0], [1.1, 2.1], [0.9, 1.9], [10.0, 20.0], [11.0, 21.0]])\nk = 2\nepsilon = 1.8"}
{"task_id": 572, "completion_id": 8, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Compute LOF scores and return indices of outliers.\n    \n    Parameters:\n    - data: numpy array (n x d) of n data points with d dimensions\n    - k: number of neighbors to consider for LOF\n    - epsilon: threshold to determine outliers\n    \n    Returns:\n    - (list_of_scores, list_of_outlier_indices)\n    \"\"\"\n    n = data.shape[0]\n    dist_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n            dist_matrix[i, j] = dist_matrix[j, i] = dist\n    k_distances = np.zeros(n)\n    Nk_indices = [[] for _ in range(n)]\n    for i in range(n):\n        indices = np.argsort(dist_matrix[i, :])\n        neighbors = indices[indices != i]\n        Nk = neighbors[:k]\n        k_distances[i] = dist_matrix[i, Nk[-1]]\n        Nk_indices[i] = Nk.tolist()\n    lrd_k = np.zeros(n)\n    for i in range(n):\n        Nk_i = Nk_indices[i]\n        rd_sum = 0.0\n        for j in Nk_i:\n            rd = max(k_distances[j], dist_matrix[i, j])\n            rd_sum += rd\n        lrd_k[i] = k / rd_sum\n    lof_scores = np.zeros(n)\n    for i in range(n):\n        Nk_i = Nk_indices[i]\n        avg_lrd_neighbors = sum((lrd_k[j] for j in Nk_i)) / k\n        lof_scores[i] = avg_lrd_neighbors / lrd_k[i]\n    lof_scores_rounded = np.round(lof_scores, 4)\n    outlier_indices = sorted(np.where(np.array(lof_scores_rounded) > epsilon)[0].tolist())\n    return (lof_scores_rounded.tolist(), outlier_indices)\ndata = np.array([[0, 0], [1, 1], [2, 2], [3, 3], [5, 5], [6, 6]])"}
{"task_id": 572, "completion_id": 9, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Implements the Local Outlier Factor (LOF) algorithm from scratch.\n    \n    Parameters:\n        data (np.ndarray): n x d array of n samples in d dimensions\n        k (int): number of nearest neighbors to consider\n        epsilon (float): threshold for outlier detection\n    \n    Returns:\n        tuple: (list_of_scores, list_of_outlier_indices)\n    \"\"\"\n    (n, d) = data.shape\n    dist_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            dist_matrix[i, j] = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n    k_distance = np.zeros(n)\n    Nk = []\n    for i in range(n):\n        nearest_indices = np.argsort(dist_matrix[i])\n        k_distance[i] = dist_matrix[i, nearest_indices[k]]\n        Nk.append(nearest_indices[1:k + 1])\n    lrd = np.zeros(n)\n    for i in range(n):\n        neighbors = Nk[i]\n        reach_dist_sum = 0\n        for j in neighbors:\n            reach_dist = max(k_distance[j], dist_matrix[i, j])\n            reach_dist_sum += reach_dist\n        lrd[i] = k / reach_dist_sum\n    lof = np.zeros(n)\n    for i in range(n):\n        neighbors = Nk[i]\n        lrd_sum = sum((lrd[j] for j in neighbors))\n        lof[i] = lrd_sum / (k * lrd[i])\n    lof = np.round(lof, 4)\n    outlier_indices = np.sort(np.where(lof > epsilon)[0])\n    return (lof.tolist(), outlier_indices.tolist())"}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"\n    Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        (x_low, x_high) = (base + 1, base + 9)\n        (y_low, y_high) = (base + 1, base + 9)\n        for _ in range(n_train):\n            x = random.uniform(x_low, x_high)\n            y = random.uniform(y_low, y_high)\n            X_train.append([round(x, 4), round(y, 4)])\n            y_train.append(c)\n        for _ in range(n_val):\n            x = random.uniform(x_low, x_high)\n            y = random.uniform(y_low, y_high)\n            X_val.append([round(x, 4), round(y, 4)])\n            y_val.append(c)\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_val = np.array(X_val)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 1, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        (x_low, x_high) = (base + 1, base + 9)\n        (y_low, y_high) = (base + 1, base + 9)\n        train_x = np.random.uniform(x_low, x_high, n_train)\n        train_y = np.random.uniform(y_low, y_high, n_train)\n        X_train.extend(np.column_stack((train_x, train_y)).tolist())\n        y_train.extend([c] * n_train)\n        val_x = np.random.uniform(x_low, x_high, n_val)\n        val_y = np.random.uniform(y_low, y_high, n_val)\n        X_val.extend(np.column_stack((val_x, val_y)).tolist())\n        y_val.extend([c] * n_val)\n    X_train = np.round(np.array(X_train), 4)\n    y_train = np.array(y_train)\n    X_val = np.round(np.array(X_val), 4)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 2, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for class_label in range(m):\n        base = 10 * (class_label // 2)\n        for _ in range(n_train):\n            x = random.uniform(base + 1, base + 9)\n            y = random.uniform(base + 1, base + 9)\n            X_train.append([round(x, 4), round(y, 4)])\n            y_train.append(class_label)\n        for _ in range(n_val):\n            x = random.uniform(base + 1, base + 9)\n            y = random.uniform(base + 1, base + 9)\n            X_val.append([round(x, 4), round(y, 4)])\n            y_val.append(class_label)\n    return (np.array(X_train), np.array(X_val), np.array(y_train), np.array(y_val))"}
{"task_id": 574, "completion_id": 3, "solution": "import numpy as np\nimport random\nimport matplotlib.pyplot as plt\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        (x_low, x_high) = (base + 1, base + 9)\n        (y_low, y_high) = (base + 1, base + 9)\n        train_x = [round(random.uniform(x_low, x_high), 4) for _ in range(n_train)]\n        train_y = [round(random.uniform(y_low, y_high), 4) for _ in range(n_train)]\n        X_train.extend(zip(train_x, train_y))\n        y_train.extend([c] * n_train)\n        val_x = [round(random.uniform(x_low, x_high), 4) for _ in range(n_val)]\n        val_y = [round(random.uniform(y_low, y_high), 4) for _ in range(n_val)]\n        X_val.extend(zip(val_x, val_y))\n        y_val.extend([c] * n_val)\n    return (np.array(X_train), np.array(X_val), np.array(y_train), np.array(y_val))"}
{"task_id": 574, "completion_id": 4, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train_list = []\n    y_train_list = []\n    X_val_list = []\n    y_val_list = []\n    for class_label in range(m):\n        base = 10 * (class_label // 2)\n        train_x = np.random.uniform(base + 1, base + 9, (n_train, 1))\n        train_y = np.random.uniform(base + 1, base + 9, (n_train, 1))\n        train = np.hstack((train_x, train_y))\n        X_train_list.append(train)\n        y_train_list.extend([class_label] * n_train)\n        val_x = np.random.uniform(base + 1, base + 9, (n_val, 1))\n        val_y = np.random.uniform(base + 1, base + 9, (n_val, 1))\n        val = np.hstack((val_x, val_y))\n        X_val_list.append(val)\n        y_val_list.extend([class_label] * n_val)\n    X_train = np.vstack(X_train_list).round(4)\n    y_train = np.array(y_train_list)\n    X_val = np.vstack(X_val_list).round(4)\n    y_val = np.array(y_val_list)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 5, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for class_label in range(m):\n        base = 10 * (class_label // 2)\n        for _ in range(n_train):\n            x = random.uniform(base + 1, base + 9)\n            y = random.uniform(base + 1, base + 9)\n            X_train.append([round(x, 4), round(y, 4)])\n            y_train.append(class_label)\n        for _ in range(n_val):\n            x = random.uniform(base + 1, base + 9)\n            y = random.uniform(base + 1, base + 9)\n            X_val.append([round(x, 4), round(y, 4)])\n            y_val.append(class_label)\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_val = np.array(X_val)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 6, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        lower = base + 1\n        upper = base + 9\n        for _ in range(n_train):\n            x = random.uniform(lower, upper)\n            y = random.uniform(lower, upper)\n            X_train.append([x, y])\n            y_train.append(c)\n        for _ in range(n_val):\n            x = random.uniform(lower, upper)\n            y = random.uniform(lower, upper)\n            X_val.append([x, y])\n            y_val.append(c)\n    X_train = np.array(X_train).round(4)\n    y_train = np.array(y_train).astype(int)\n    X_val = np.array(X_val).round(4)\n    y_val = np.array(y_val).astype(int)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 7, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility. If *None*, the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_range = (base + 1, base + 9)\n        y_range = (base + 1, base + 9)\n        for _ in range(n_train):\n            x = random.uniform(*x_range)\n            y = random.uniform(*y_range)\n            X_train.append([x, y])\n            y_train.append(c)\n        for _ in range(n_val):\n            x = random.uniform(*x_range)\n            y = random.uniform(*y_range)\n            X_val.append([x, y])\n            y_val.append(c)\n    X_train = np.round(np.array(X_train), 4)\n    y_train = np.array(y_train)\n    X_val = np.round(np.array(X_val), 4)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 8, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train_list = []\n    X_val_list = []\n    y_train_list = []\n    y_val_list = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        (x_min, x_max) = (base + 1, base + 9)\n        (y_min, y_max) = (base + 1, base + 9)\n        train_coords = np.array([[round(random.uniform(x_min, x_max), 4), round(random.uniform(y_min, y_max), 4)] for _ in range(n_train)])\n        X_train_list.append(train_coords)\n        y_train_list.extend([c] * n_train)\n        val_coords = np.array([[round(random.uniform(x_min, x_max), 4), round(random.uniform(y_min, y_max), 4)] for _ in range(n_val)])\n        X_val_list.append(val_coords)\n        y_val_list.extend([c] * n_val)\n    X_train = np.vstack(X_train_list)\n    X_val = np.vstack(X_val_list)\n    y_train = np.array(y_train_list)\n    y_val = np.array(y_val_list)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 9, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train_list = []\n    X_val_list = []\n    y_train_list = []\n    y_val_list = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        train_x = [round(random.uniform(base + 1, base + 9), 4) for _ in range(n_train)]\n        train_y = [round(random.uniform(base + 1, base + 9), 4) for _ in range(n_train)]\n        X_train_list.extend(zip(train_x, train_y))\n        y_train_list.extend([c] * n_train)\n        val_x = [round(random.uniform(base + 1, base + 9), 4) for _ in range(n_val)]\n        val_y = [round(random.uniform(base + 1, base + 9), 4) for _ in range(n_val)]\n        X_val_list.extend(zip(val_x, val_y))\n        y_val_list.extend([c] * n_val)\n    X_train = np.array(X_train_list)\n    X_val = np.array(X_val_list)\n    y_train = np.array(y_train_list)\n    y_val = np.array(y_val_list)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 579, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centres = X[:k].copy()\n    prev_labels = [-1] * m\n    for _ in range(max_iters):\n        labels = []\n        for point in X:\n            min_dist = float('inf')\n            best_cluster = -1\n            for (idx, centre) in enumerate(centres):\n                dist = np.sum((point - centre) ** 2)\n                if dist < min_dist:\n                    min_dist = dist\n                    best_cluster = idx\n                elif dist == min_dist and idx < best_cluster:\n                    best_cluster = idx\n            labels.append(best_cluster)\n        if labels == prev_labels:\n            break\n        prev_labels = labels.copy()\n        new_centres = centres.copy()\n        counts = np.zeros(k, dtype=int)\n        for (idx, label) in enumerate(labels):\n            new_centres[label] += X[idx]\n            counts[label] += 1\n        for i in range(k):\n            if counts[i] > 0:\n                centres[i] = new_centres[i] / counts[i]\n    centres_rounded = [list(map(lambda x: round(x, 4), centre)) for centre in centres]\n    return (labels, centres_rounded)"}
{"task_id": 579, "completion_id": 1, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centres = X[:k].copy()\n    prev_labels = None\n    labels = [0] * m\n    for _ in range(max_iters):\n        for i in range(m):\n            point = X[i]\n            min_dist = float('inf')\n            cluster = -1\n            for j in range(k):\n                dist = np.sum((point - centres[j]) ** 2)\n                if dist < min_dist:\n                    min_dist = dist\n                    cluster = j\n                elif dist == min_dist and j < cluster:\n                    cluster = j\n            labels[i] = cluster\n        if labels == prev_labels:\n            break\n        prev_labels = labels.copy()\n        for j in range(k):\n            cluster_points = [X[i] for i in range(m) if labels[i] == j]\n            if cluster_points:\n                centres[j] = np.mean(cluster_points, axis=0)\n    rounded_centres = [list(np.round(centre, 4)) for centre in centres]\n    return (labels, rounded_centres)"}
{"task_id": 579, "completion_id": 2, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centres = X[:k].copy()\n    prev_labels = None\n    for _ in range(max_iters):\n        labels = []\n        for point in X:\n            distances = np.sqrt(np.sum((point - centres) ** 2, axis=1))\n            cluster_idx = np.argmin(distances)\n            labels.append(cluster_idx)\n        if prev_labels is not None and labels == prev_labels:\n            break\n        prev_labels = labels\n        for i in range(k):\n            cluster_points = X[np.array(labels) == i]\n            if len(cluster_points) > 0:\n                centres[i] = np.mean(cluster_points, axis=0)\n    centres_rounded = [list(np.round(centre, 4)) for centre in centres]\n    return (labels, centres_rounded)"}
{"task_id": 579, "completion_id": 3, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centres = X[:k].copy()\n    prev_labels = [-1] * m\n    for _ in range(max_iters):\n        curr_labels = []\n        for i in range(m):\n            point = X[i]\n            min_dist = float('inf')\n            label = -1\n            for j in range(k):\n                dist = np.sum((point - centres[j]) ** 2)\n                if dist < min_dist or (dist == min_dist and j < label):\n                    min_dist = dist\n                    label = j\n            curr_labels.append(label)\n        if curr_labels == prev_labels:\n            break\n        prev_labels = curr_labels\n        clusters = [[] for _ in range(k)]\n        for i in range(m):\n            clusters[curr_labels[i]].append(X[i])\n        for i in range(k):\n            if clusters[i]:\n                centres[i] = np.mean(clusters[i], axis=0)\n    centres = [list(np.round(centre, 4)) for centre in centres]\n    return (curr_labels, centres)"}
{"task_id": 579, "completion_id": 4, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centres = X[:k].copy()\n    labels = np.zeros(m, dtype=int)\n    for iter in range(max_iters):\n        new_labels = np.zeros(m, dtype=int)\n        for i in range(m):\n            distances = [np.sqrt(np.sum((X[i] - centres[j]) ** 2)) for j in range(k)]\n            new_labels[i] = np.argmin(distances)\n        if np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n        for j in range(k):\n            points = X[labels == j]\n            if len(points) > 0:\n                centres[j] = np.mean(points, axis=0)\n    centres_rounded = [list(np.round(centre, 4)) for centre in centres]\n    return (labels.tolist(), centres_rounded)"}
{"task_id": 579, "completion_id": 5, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centres = X[:k].copy()\n    previous_labels = [None] * max_iters\n    iters = 0\n    while iters < max_iters:\n        labels = []\n        for point in X:\n            distances = []\n            for (i, centre) in enumerate(centres):\n                dist = np.sqrt(np.sum((point - centre) ** 2))\n                distances.append(dist)\n            nearest_centre_idx = min(range(len(distances)), key=lambda idx: (distances[idx], idx))\n            labels.append(nearest_centre_idx)\n        if previous_labels and labels == previous_labels[-1]:\n            break\n        if len(previous_labels) == max_iters:\n            previous_labels.pop(0)\n        previous_labels.append(labels)\n        clusters = [[] for _ in range(k)]\n        for (idx, label) in enumerate(labels):\n            clusters[label].append(X[idx])\n        for i in range(k):\n            if clusters[i]:\n                centres[i] = np.mean(clusters[i], axis=0)\n        iters += 1\n    centres = [[round(coord, 4) for coord in centre] for centre in centres]\n    return (labels, centres)\nX = np.array([[1, 2], [1, 4], [2, 3], [10, 11], [11, 9], [10, 9]])\nk = 2"}
{"task_id": 579, "completion_id": 6, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centres = X[:k].copy()\n    for _ in range(max_iters):\n        labels = []\n        for point in X:\n            distances = [np.linalg.norm(point - centroid) for centroid in centres]\n            min_idx = 0\n            min_dist = distances[0]\n            for (i, dist) in enumerate(distances):\n                if dist < min_dist:\n                    min_idx = i\n                    min_dist = dist\n            labels.append(min_idx)\n        if np.array_equal(np.array(labels), previous_labels):\n            break\n        previous_labels = np.array(labels).copy()\n        new_centres = centres.copy()\n        for i in range(k):\n            points_in_cluster = X[np.array(labels) == i]\n            if points_in_cluster.shape[0] > 0:\n                new_centres[i] = points_in_cluster.mean(axis=0)\n        centres = new_centres\n    centres = np.round(centres, 4)\n    return ([int(label) for label in labels], centres.tolist())\nX = np.array([[1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0]])\nk = 2"}
{"task_id": 579, "completion_id": 7, "solution": "import numpy as np"}
{"task_id": 579, "completion_id": 8, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"\n    Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres. Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre (rounded to 4 decimals).\n    \"\"\"\n    (m, d) = X.shape\n    centres = X[:k].copy()\n    centres = centres.astype(np.float64)\n    labels = [-1] * m\n    for _ in range(max_iters):\n        new_labels = []\n        for i in range(m):\n            point = X[i]\n            min_dist = float('inf')\n            closest_cluster = 0\n            for cluster_idx in range(k):\n                dist = np.linalg.norm(point - centres[cluster_idx])\n                if dist < min_dist:\n                    min_dist = dist\n                    closest_cluster = cluster_idx\n                elif dist == min_dist:\n                    closest_cluster = min(closest_cluster, cluster_idx)\n            new_labels.append(closest_cluster)\n        if new_labels == labels:\n            break\n        labels = new_labels\n        for cluster_idx in range(k):\n            points_in_cluster = X[[i for (i, label) in enumerate(labels) if label == cluster_idx]]\n            if len(points_in_cluster) > 0:\n                centres[cluster_idx] = np.mean(points_in_cluster, axis=0)\n    rounded_centres = [list(np.round(centre, 4)) for centre in centres]\n    return (labels, rounded_centres)\nX = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])"}
{"task_id": 579, "completion_id": 9, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centres = X[:k].copy()\n    labels = np.zeros(m, dtype=int)\n    for it in range(max_iters):\n        new_labels = np.zeros(m, dtype=int)\n        for i in range(m):\n            distances = [(np.sum((X[i] - centres[j]) ** 2), j) for j in range(k)]\n            distances.sort(key=lambda x: (x[0], x[1]))\n            new_labels[i] = distances[0][1]\n        if np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n        for j in range(k):\n            points_in_cluster = X[labels == j]\n            if len(points_in_cluster) > 0:\n                centres[j] = np.mean(points_in_cluster, axis=0)\n    centres_rounded = [list(np.round(centre, 4)) for centre in centres]\n    return (labels.tolist(), centres_rounded)"}
{"task_id": 581, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    if learning_rate == 0 or iterations == 0:\n        return ([0.0 for _ in range(X.shape[1])], 0.0)\n    (m, n) = X.shape\n    w = np.zeros(shape=(n,))\n    b = 0.0\n    for _ in range(iterations):\n        y_pred = X @ w + b\n        residuals = y - y_pred\n        dJdw = -2 * X.T @ residuals + l1_penalty * np.sign(w) + 2 * l2_penalty * w\n        dJdb = -2 * residuals.sum()\n        dJdw /= m\n        dJdb /= m\n        w -= learning_rate * dJdw\n        b -= learning_rate * dJdb\n    return ([round(w_j, 4) for w_j in w], round(b, 4))\nX = np.array([[1, 2], [2, 3], [3, 4]])\ny = np.array([3, 5, 7])\nlearning_rate = 0.1\niterations = 1000\nl1_penalty = 0.01\nl2_penalty = 0.1"}
{"task_id": 581, "completion_id": 1, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float. Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([round(w, 4) for w in weights], round(bias, 4))\n    for _ in range(iterations):\n        y_pred = X @ weights + bias\n        residuals = y - y_pred\n        gradient_w = -2 * X.T @ residuals + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        gradient_b = -2 * residuals.sum()\n        gradient_w /= m\n        gradient_b /= m\n        weights -= learning_rate * gradient_w\n        bias -= learning_rate * gradient_b\n    return ([round(w, 4) for w in weights.tolist()], round(bias, 4))"}
{"task_id": 581, "completion_id": 2, "solution": "import numpy as np\nimport numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float. Every number is rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if learning_rate == 0 or iterations == 0:\n        return ([round(0.0, 4) for _ in range(n)], round(0.0, 4))\n    w = np.zeros(n)\n    b = 0.0\n    for _ in range(iterations):\n        y_pred = np.dot(X, w) + b\n        residuals = y - y_pred\n        dL_dw = -2 / m * np.dot(X.T, residuals) + l1_penalty / m * np.sign(w) + 2 * l2_penalty / m * w\n        dL_db = -2 / m * np.sum(residuals)\n        w -= learning_rate * dL_dw\n        b -= learning_rate * dL_db\n    weights = [round(wi, 4) for wi in w]\n    bias = round(b, 4)\n    return (weights, bias)\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([3, 7, 11])\nlearning_rate = 0.01\niterations = 1000\nl1_penalty = 0.1\nl2_penalty = 0.1"}
{"task_id": 581, "completion_id": 3, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    w = np.zeros(n)\n    b = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([round(wj, 4) for wj in w], round(b, 4))\n    for _ in range(iterations):\n        y_pred = X @ w + b\n        residuals = y - y_pred\n        dL_dw = -2 * X.T @ residuals\n        dL_db = -2 * residuals.sum()\n        dL_dw += l1_penalty * np.sign(w)\n        dL_dw += 2 * l2_penalty * w\n        dL_dw /= m\n        dL_db /= m\n        w -= learning_rate * dL_dw\n        b -= learning_rate * dL_db\n    weights_rounded = [round(float(wj), 4) for wj in w]\n    bias_rounded = round(b, 4)\n    return (weights_rounded, bias_rounded)"}
{"task_id": 581, "completion_id": 4, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Perform batch gradient descent for the given number of iterations and\n    returns the learned weight vector and bias with Elastic-Net regularization.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([round(w, 4) for w in weights.tolist()], round(bias, 4))\n    for _ in range(iterations):\n        y_pred = X @ weights + bias\n        residuals = y - y_pred\n        dW = -2 * X.T @ residuals / m\n        db = -2 * np.sum(residuals) / m\n        dW += (l1_penalty * np.sign(weights) + 2 * l2_penalty * weights) / m\n        weights -= learning_rate * dW\n        bias -= learning_rate * db\n    rounded_weights = [round(w, 4) for w in weights.tolist()]\n    rounded_bias = round(bias, 4)\n    return (rounded_weights, rounded_bias)"}
{"task_id": 581, "completion_id": 5, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    if learning_rate == 0 or iterations == 0:\n        return ([0.0 for _ in range(X.shape[1])], 0.0)\n    weights = np.zeros(X.shape[1])\n    bias = 0.0\n    m = X.shape[0]\n    for _ in range(iterations):\n        y_pred = X @ weights + bias\n        residuals = y - y_pred\n        dw = -2 * X.T @ residuals + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        db = -2 * np.sum(residuals)\n        weights -= learning_rate * (dw / m)\n        bias -= learning_rate * (db / m)\n    rounded_weights = [round(w, 4) for w in weights]\n    rounded_bias = round(bias, 4)\n    return (rounded_weights, rounded_bias)"}
{"task_id": 581, "completion_id": 6, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    if learning_rate == 0 or iterations == 0:\n        return ([0.0] * X.shape[1], 0.0)\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    for _ in range(iterations):\n        y_pred = np.dot(X, weights) + bias\n        residuals = y - y_pred\n        d_weights = -2 * np.dot(X.T, residuals) / m\n        d_weights += (l1_penalty * np.sign(weights) + 2 * l2_penalty * weights) / m\n        d_bias = -2 * np.sum(residuals) / m\n        weights -= learning_rate * d_weights\n        bias -= learning_rate * d_bias\n    return ([round(w, 4) for w in weights.tolist()], round(bias, 4))"}
{"task_id": 581, "completion_id": 7, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    This function performs batch gradient descent with Elastic Net\n    regularisation for the specified number of iterations and returns\n    the learned weight vector and bias, both rounded to four decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    if learning_rate == 0 or iterations == 0:\n        return ([0.0] * X.shape[1], 0.0)\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    for _ in range(iterations):\n        y_hat = np.dot(X, weights) + bias\n        residuals = y - y_hat\n        d_weights = -2 * np.dot(X.T, residuals) / m\n        d_weights += (l1_penalty * np.sign(weights) + 2 * l2_penalty * weights) / m\n        d_bias = -2 * np.sum(residuals) / m\n        weights -= learning_rate * d_weights\n        bias -= learning_rate * d_bias\n    return (np.round(weights, 4).tolist(), round(bias, 4))"}
{"task_id": 581, "completion_id": 8, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if learning_rate == 0 or iterations == 0:\n        return ([0.0] * n, 0.0)\n    weights = np.zeros(n)\n    bias = 0.0\n    for _ in range(iterations):\n        y_pred = np.dot(X, weights) + bias\n        residuals = y - y_pred\n        d_weights = -2 * np.dot(X.T, residuals)\n        d_bias = -2 * np.sum(residuals)\n        d_weights += l1_penalty * np.sign(weights)\n        d_weights += 2 * l2_penalty * weights\n        d_weights /= m\n        d_bias /= m\n        weights -= learning_rate * d_weights\n        bias -= learning_rate * d_bias\n    return ([round(w, 4) for w in weights], round(bias, 4))"}
{"task_id": 581, "completion_id": 9, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    w = np.zeros(n)\n    b = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([round(w_j, 4) for w_j in w], round(b, 4))\n    for _ in range(iterations):\n        y_hat = X @ w + b\n        r = y - y_hat\n        dL_dw = -2 * X.T @ r / m + l1_penalty * np.sign(w) / m + 2 * l2_penalty * w / m\n        dL_db = -2 * r.sum() / m\n        w -= learning_rate * dL_dw\n        b -= learning_rate * dL_db\n    return ([round(w_j, 4) for w_j in w], round(b, 4))"}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    input_with_bias = np.array([1.0] + x)\n    for (layer_idx, layer_weights) in enumerate(weights):\n        W = np.array(layer_weights)\n        output = np.dot(W, input_with_bias)\n        if layer_idx < len(weights) - 1:\n            output = np.maximum(0, output)\n        if layer_idx < len(weights) - 1:\n            input_with_bias = np.insert(output, 0, 1.0)\n        else:\n            input_with_bias = output\n    if len(input_with_bias.shape) == 0:\n        return round(float(input_with_bias), 4)\n    else:\n        return [round(val, 4) for val in input_with_bias]\nweights = [[[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10]]]\nx = [1, 2]"}
{"task_id": 591, "completion_id": 1, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    current_input = np.array(x, dtype=float)\n    for (layer_idx, layer_weights) in enumerate(weights):\n        current_input = np.insert(current_input, 0, 1.0)\n        num_neurons = len(layer_weights)\n        layer_output = np.zeros(num_neurons)\n        for neuron_idx in range(num_neurons):\n            neuron_weights = np.array(layer_weights[neuron_idx], dtype=float)\n            layer_output[neuron_idx] = np.dot(current_input, neuron_weights)\n        if layer_idx < len(weights) - 1:\n            current_input = np.maximum(0, layer_output)\n        else:\n            current_input = layer_output\n        current_input = current_input\n    if len(current_input) == 1:\n        return round(float(current_input[0]), 4)\n    else:\n        return [round(x, 4) for x in current_input]\nweights = [[[2.0, 1.0, 1.0], [1.0, 2.0, 1.0]], [[0.5, 1.0, 1.0]]]\nx = [3.0, 4.0]"}
{"task_id": 591, "completion_id": 2, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    current_activation = np.array(x, dtype=np.float64)\n    for (layer_index, layer_weights) in enumerate(weights):\n        current_activation = np.insert(current_activation, 0, 1.0)\n        layer_output = np.zeros(len(layer_weights))\n        for (neuron_index, neuron_weights) in enumerate(layer_weights):\n            layer_output[neuron_index] = np.dot(current_activation, neuron_weights)\n        if layer_index != len(weights) - 1:\n            layer_output = np.maximum(layer_output, 0)\n        current_activation = layer_output\n    if len(current_activation) == 1:\n        return float(np.round(current_activation[0], 4))\n    else:\n        return [float(np.round(value, 4)) for value in current_activation]\nweights = [[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[1.0, 2.0], [3.0, 4.0]], [[1.0, 2.0]]]\nx = [0.5, 1.5]"}
{"task_id": 591, "completion_id": 3, "solution": "import numpy as np\nfrom typing import Union, List\ndef neural_net_predict(weights: List[List[List[float]]], x: List[float]) -> Union[float, List[float]]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    current_input = np.array(x, dtype=np.float64)\n    for (layer_index, layer_weights) in enumerate(weights):\n        num_neurons = len(layer_weights)\n        output = np.zeros(num_neurons)\n        is_last_layer = layer_index == len(weights) - 1\n        extended_input = np.insert(current_input, 0, 1.0)\n        for (neuron_index, weights_of_neuron) in enumerate(layer_weights):\n            output[neuron_index] = np.dot(extended_input, np.array(weights_of_neuron))\n        if not is_last_layer:\n            output = np.maximum(0, output)\n        current_input = output\n    if num_neurons == 1:\n        return float(np.round(current_input[0], 4))\n    else:\n        return [float(np.round(val, 4)) for val in current_input]"}
{"task_id": 591, "completion_id": 4, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    current_input = np.array(x, dtype=np.float64)\n    for (layer_idx, layer_weights) in enumerate(weights):\n        current_input_with_bias = np.concatenate([[1.0], current_input])\n        weight_matrix = np.array([neuron_weights for neuron_weights in layer_weights], dtype=np.float64)\n        current_input = weight_matrix @ current_input_with_bias\n        if layer_idx < len(weights) - 1:\n            current_input = np.maximum(current_input, 0)\n    if len(current_input.shape) == 0:\n        return round(float(current_input), 4)\n    else:\n        return [round(float(val), 4) for val in current_input]\nweights = [[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[7.0, 8.0], [9.0, 10.0]]]\nx = [10.0, 20.0]"}
{"task_id": 591, "completion_id": 5, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    activations = np.array(x, dtype=float)\n    for (layer_idx, layer_weights) in enumerate(weights):\n        activations = np.insert(activations, 0, 1.0)\n        layer_output = np.array([np.dot(activations, weights_of_neuron) for weights_of_neuron in layer_weights])\n        if layer_idx < len(weights) - 1:\n            layer_output = np.maximum(0, layer_output)\n        activations = layer_output\n    if len(activations) == 1:\n        return round(float(activations[0]), 4)\n    else:\n        return [round(float(val), 4) for val in activations]"}
{"task_id": 591, "completion_id": 6, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    current_input = np.array(x, dtype=float)\n    for (layer_idx, layer_weights) in enumerate(weights):\n        current_input = np.insert(current_input, 0, 1.0)\n        layer_output = np.array([np.dot(weights_of_neuron, current_input) for weights_of_neuron in layer_weights])\n        if layer_idx < len(weights) - 1:\n            layer_output = np.maximum(0, layer_output)\n        current_input = layer_output\n    prediction = np.round(current_input, 4)\n    return prediction.item() if prediction.size == 1 else prediction.tolist()"}
{"task_id": 591, "completion_id": 7, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    current_input = np.array(x, dtype=np.float64)\n    for (layer_index, layer_weights) in enumerate(weights):\n        weights_array = np.array([neuron[1:] for neuron in layer_weights], dtype=np.float64)\n        bias_array = np.array([neuron[0] for neuron in layer_weights], dtype=np.float64)\n        current_input = np.dot(current_input, weights_array.T) + bias_array\n        if layer_index != len(weights) - 1:\n            current_input = np.maximum(0, current_input)\n    output = np.around(current_input, decimals=4)\n    return output[0] if len(output) == 1 else output.tolist()"}
{"task_id": 591, "completion_id": 8, "solution": "def neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    current_input = np.array(x, dtype=float)\n    for (layer_idx, layer_weights) in enumerate(weights):\n        current_input_with_bias = np.insert(current_input, 0, 1.0)\n        layer_weights_array = np.array(layer_weights)\n        current_input = np.dot(current_input_with_bias, layer_weights_array.T)\n        if layer_idx < len(weights) - 1:\n            current_input = np.maximum(0, current_input)\n    if len(current_input) == 1:\n        return float(round(current_input[0], 4))\n    else:\n        return [round(val, 4) for val in current_input]"}
{"task_id": 591, "completion_id": 9, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    current_input = np.array(x, dtype=float)\n    for (layer_index, layer_weights) in enumerate(weights):\n        current_input_with_bias = np.insert(current_input, 0, 1)\n        layer_weights_array = np.array(layer_weights)\n        current_input = np.dot(current_input_with_bias, layer_weights_array)\n        if layer_index < len(weights) - 1:\n            current_input = np.maximum(0, current_input)\n    if len(current_input) == 1:\n        return round(float(current_input[0]), 4)\n    else:\n        return [round(float(val), 4) for val in current_input]\nweights = [[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[1.0, 2.0], [3.0, 4.0]]]\nx = [0.5, 1.5]"}
{"task_id": 595, "completion_id": 0, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Perform K-Means clustering to compute centroids from scratch.\n\n    Parameters:\n    - X: np.ndarray, shape (n_samples, n_features)\n    - k: number of clusters\n    - max_iters: maximum iteration count\n\n    Returns:\n    - list[list[float]]: sorted and rounded list of centroids\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        distances = np.zeros((n_samples, k))\n        for i in range(k):\n            diff = X - centroids[i]\n            distances[:, i] = np.sum(diff ** 2, axis=1)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = centroids.copy()\n        for i in range(k):\n            cluster_points = X[labels == i]\n            if cluster_points.shape[0] > 0:\n                new_centroids[i] = np.mean(cluster_points, axis=0)\n        centroid_shifts = np.sqrt(np.sum((new_centroids - centroids) ** 2, axis=1))\n        if np.all(centroid_shifts < 0.0001):\n            break\n        centroids = new_centroids\n    centroids = centroids.tolist()\n    centroids.sort()\n    centroids = [[round(coord, 4) for coord in point] for point in centroids]\n    return centroids\nX = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\nk = 2"}
{"task_id": 595, "completion_id": 1, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Run K-Means Clustering algorithm and return sorted list of centroids.\n\n    Parameters:\n    - X: A 2D numpy array of shape (n_samples, n_features)\n    - k: Number of clusters\n    - max_iters: Maximum number of iterations (default=100)\n\n    Returns:\n    - A list of k centroids, each centroid is a list of floats rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        distances = np.sum((X[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        old_centroids = centroids.copy()\n        centroids = np.zeros_like(old_centroids)\n        Counts = np.zeros(k, dtype=int)\n        for i in range(n_samples):\n            cluster_idx = labels[i]\n            Counts[cluster_idx] += 1\n            centroids[cluster_idx] += X[i]\n        for j in range(k):\n            if Counts[j] > 0:\n                centroids[j] /= Counts[j]\n        centroid_displacement = np.sqrt(np.sum((centroids - old_centroids) ** 2, axis=1))\n        if np.all(centroid_displacement < 0.0001):\n            break\n    order = np.lexsort([centroids[:, -1::-1].T])\n    sorted_centroids = centroids[order]\n    rounded_centroids = [list(np.round(point, 4)) for point in sorted_centroids]\n    return rounded_centroids"}
{"task_id": 595, "completion_id": 2, "solution": "import numpy as np\nimport numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Implement K-Means Clustering up to centroid computation.\n    \n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features)\n        k: Number of clusters\n        max_iters: Maximum number of iterations to perform\n        \n    Returns:\n        List of rounded centroids, sorted lexicographically\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    centroids = X[:k].copy()\n    for iteration in range(max_iters):\n        distances = np.zeros((n_samples, k))\n        for i in range(k):\n            diff = X - centroids[i]\n            distances[:, i] = np.sum(diff * diff, axis=1)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(k, dtype=int)\n        for (idx, label) in enumerate(labels):\n            new_centroids[label] += X[idx]\n            counts[label] += 1\n        for i in range(k):\n            if counts[i] > 0:\n                new_centroids[i] /= counts[i]\n        move = np.sum((new_centroids - centroids) ** 2)\n        if move < 1e-08:\n            break\n        centroids = new_centroids\n    centroids_list = [list(centroid) for centroid in centroids]\n\n    def lexicographical_sort_key(centroid):\n        return tuple((round(x, 10) for x in centroid))\n    sorted_centroids = sorted(centroids_list, key=lexicographical_sort_key)\n    rounded_centroids = [[round(coord, 4) for coord in centroid] for centroid in sorted_centroids]\n    return rounded_centroids\nX = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.1, 1.0], [9.0, 11.0]])\nk = 2"}
{"task_id": 595, "completion_id": 3, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Perform K-Means clustering and return the final centroids.\n    \n    Parameters:\n    - X: NumPy array of shape (n_samples, n_features)\n    - k: Number of clusters\n    - max_iters: Maximum number of iterations (default = 100)\n    \n    Returns:\n    - List of lists, where each inner list is a centroid rounded to 4 decimals\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    centroids = X[:k].copy()\n    prev_centroids = centroids.copy()\n    for iter in range(max_iters):\n        labels = np.zeros(n_samples, dtype=int)\n        for i in range(n_samples):\n            dists = np.sum((X[i] - centroids) ** 2, axis=1)\n            labels[i] = np.argmin(dists)\n        new_centroids = np.copy(centroids)\n        for j in range(k):\n            mask = labels == j\n            if np.sum(mask) == 0:\n                continue\n            new_centroids[j] = np.mean(X[mask], axis=0)\n        centroids = new_centroids\n        if np.max(np.sum((centroids - prev_centroids) ** 2, axis=1)) < 1e-08:\n            break\n        prev_centroids = centroids.copy()\n    centroids = centroids[[int(i) for i in np.lexsort([centroids[:, ::-1]])]]\n    return [list(np.round(centroid, 4)) for centroid in centroids]\nX = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\nk = 2"}
{"task_id": 595, "completion_id": 4, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Perform K-Means clustering and return only the updated centroids (rounded and sorted).\n    \n    Parameters:\n    - X: 2D NumPy array of shape (n_samples \u00d7 n_features)\n    - k: number of clusters\n    - max_iters: maximum number of iterations (default=100)\n    \n    Returns:\n    - A list of lists, where each inner list is a centroid rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        distances = np.sum((X[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        old_centroids = centroids.copy()\n        new_centroids = np.zeros((k, n_features))\n        counts = np.zeros(k, dtype=int)\n        for i in range(n_samples):\n            centroid_idx = labels[i]\n            new_centroids[centroid_idx] += X[i]\n            counts[centroid_idx] += 1\n        for i in range(k):\n            if counts[i] > 0:\n                centroids[i] = new_centroids[i] / counts[i]\n        if np.max(np.sqrt(np.sum((centroids - old_centroids) ** 2, axis=1))) < 0.0001:\n            break\n    sorted_indices = np.lexsort(tuple((centroids[:, i] for i in range(n_features))))\n    sorted_centroids = centroids[sorted_indices]\n    return [list(np.round(centroid, 4)) for centroid in sorted_centroids]"}
{"task_id": 595, "completion_id": 5, "solution": "import numpy as np\nimport numpy as np\ndef kmeans_centroids(X: np.ndarray, k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Perform K-Means clustering from scratch and return the centroids after convergence.\n\n    Parameters:\n    - X (np.ndarray): 2D data array of shape (n_samples, n_features).\n    - k (int): Number of clusters.\n    - max_iters (int): Maximum number of iterations (default 100).\n\n    Returns:\n    - list[list[float]]: List of sorted and rounded centroid positions.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    centroids = X[:k, :].copy()\n    for _ in range(max_iters):\n        distances = np.zeros((n_samples, k))\n        for i in range(k):\n            distances[:, i] = np.sum((X - centroids[i]) ** 2, axis=1)\n        labels = np.argmin(distances, axis=1)\n        old_centroids = centroids.copy()\n        new_centroids = []\n        for i in range(k):\n            cluster_points = X[labels == i]\n            if cluster_points.shape[0] == 0:\n                new_centroids.append(centroids[i])\n            else:\n                new_centroids.append(np.mean(cluster_points, axis=0))\n        centroids = np.array(new_centroids)\n        centroid_displacement = np.sqrt(np.sum((centroids - old_centroids) ** 2, axis=1))\n        if np.all(centroid_displacement < 0.0001):\n            break\n    centroids_sorted = centroids[np.lexsort([centroids[:, i] for i in reversed(range(n_features))])]\n    centroids_sorted_rounded = [list(np.round(point, 4)) for point in centroids_sorted]\n    return centroids_sorted_rounded\nX = np.random.rand(100, 2)\ncentroids = kmeans_centroids(X, k=3, max_iters=100)"}
{"task_id": 595, "completion_id": 6, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Perform K-Means clustering and return the final centroids.\n\n    Parameters:\n    X (np.ndarray): n_samples \u00d7 n_features data array.\n    k (int): Number of clusters.\n    max_iters (int): Maximum number of iterations.\n\n    Returns:\n    List of lists: Sorted list of final centroids.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    centroids = X[:k].copy().astype(float)\n    prev_centroids = centroids.copy()\n    for iter in range(max_iters):\n        distances = np.sum((X[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2, axis=2)\n        closest = np.argmin(distances, axis=1)\n        new_centroids = np.zeros((k, n_features))\n        count = np.zeros(k, dtype=int)\n        for idx in range(n_samples):\n            cluster_idx = closest[idx]\n            new_centroids[cluster_idx] += X[idx]\n            count[cluster_idx] += 1\n        for i in range(k):\n            if count[i] > 0:\n                new_centroids[i] /= count[i]\n            else:\n                new_centroids[i] = centroids[i]\n        centroid_shifts = np.sum((new_centroids - centroids) ** 2, axis=1) ** 0.5\n        if np.all(centroid_shifts < 0.0001):\n            break\n        centroids = new_centroids\n    centroids = centroids.tolist()\n    centroids.sort()\n    rounded_centroids = [[round(coord, 4) for coord in centroid] for centroid in centroids]\n    return rounded_centroids\nX = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.1, 1.9], [9.0, 11.0]])\nk = 2"}
{"task_id": 595, "completion_id": 7, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Perform K-Means clustering and return the final centroids.\n    \n    Parameters:\n        X: Input data of shape (n_samples, n_features)\n        k: Number of clusters\n        max_iters: Maximum number of iterations (default = 100)\n    \n    Returns:\n        List of centroids, each centroid is a list of floats rounded to 4 decimals\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        distances = np.sum((X[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.copy(centroids)\n        for i in range(k):\n            if np.sum(labels == i) > 0:\n                cluster_points = X[labels == i]\n                centroids[i] = np.mean(cluster_points, axis=0)\n        centroid_shift = np.sqrt(np.sum((centroids - new_centroids) ** 2, axis=1))\n        if np.all(centroid_shift < 0.0001):\n            break\n    centroids_sorted = sorted(centroids, key=lambda x: tuple(x))\n    return [[round(coord, 4) for coord in centroid] for centroid in centroids_sorted]"}
{"task_id": 595, "completion_id": 8, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Implement K-Means clustering algorithm to compute centroids only.\n    \n    Parameters:\n    - X: np.ndarray (n_samples \u00d7 n_features)\n    - k: int (number of clusters)\n    - max_iters: int (max number of iterations for algorithm)\n    \n    Returns:\n    - list of lists of floats representing centroids, rounded to 4 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    centroids = X[:k, :].copy()\n    for iter in range(max_iters):\n        distances = np.zeros((n_samples, k))\n        for i in range(k):\n            diff = X - centroids[i]\n            distances[:, i] = np.sum(diff * diff, axis=1)\n        labels = np.argmin(distances, axis=1)\n        prev_centroids = centroids.copy()\n        for i in range(k):\n            cluster_points = X[labels == i]\n            if cluster_points.shape[0] > 0:\n                centroids[i] = np.mean(cluster_points, axis=0)\n        centroid_moves = np.sqrt(np.sum((centroids - prev_centroids) ** 2, axis=1))\n        if np.all(centroid_moves < 0.0001):\n            break\n    sorted_indices = np.lexsort(centroids[:, ::-1].T)\n    sorted_centroids = centroids[sorted_indices]\n    return [list(np.round(centroid, 4)) for centroid in sorted_centroids]"}
{"task_id": 595, "completion_id": 9, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Implements K-Means clustering from scratch, returning only the sorted centroids.\n    \n    Args:\n        X (np.ndarray): 2D input data array of shape (n_samples, n_features)\n        k (int): Number of clusters\n        max_iters (int, optional): Maximum number of iterations. Defaults to 100.\n        \n    Returns:\n        list[list[float]]: List of sorted centroids with 4 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    centroids = X[:k, :].copy()\n    prev_centroids = centroids.copy()\n    for _ in range(max_iters):\n        distances = np.zeros((n_samples, k))\n        for i in range(k):\n            diff = X - centroids[i]\n            distances[:, i] = np.sum(diff ** 2, axis=1)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.copy(centroids)\n        for i in range(k):\n            points_in_cluster = X[labels == i]\n            if len(points_in_cluster) > 0:\n                new_centroids[i] = np.mean(points_in_cluster, axis=0)\n        centroid_shift = np.max(np.abs(new_centroids - prev_centroids))\n        if centroid_shift < 0.0001:\n            break\n        centroids = new_centroids\n        prev_centroids = centroids.copy()\n    centroids = np.round(centroids, 4)\n    centroids = centroids[np.lexsort([centroids[:, i] for i in reversed(range(n_features))])]\n    return centroids.tolist()\nX = np.array([[1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0]])"}
