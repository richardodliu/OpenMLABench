{"task_id": 0, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Perform ridge regression to estimate the coefficients of the model\n    using the closed-form equation. Adds an intercept term and applies\n    L2 regularization. Returns the coefficients rounded to 4 decimal\n    places, or -1 if the necessary matrix is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X_b = np.c_[np.ones((X.shape[0], 1)), X]\n    I = np.identity(X_b.shape[1])\n    try:\n        inv_part = np.linalg.inv(X_b.T @ X_b + alpha * I)\n        w = np.round(inv_part @ X_b.T @ y, decimals=4)\n    except np.linalg.LinAlgError:\n        return -1\n    return w.tolist()"}
{"task_id": 0, "completion_id": 1, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    This function calculates the Ridge Regression weights for a given data using the closed-form solution.\n    \n    Parameters:\n    - data: A numpy ndarray where the last column is the target y and all preceding columns are the features X.\n    - alpha: The regularization strength. Default value is 0.0, which results in standard linear regression.\n    \n    Returns:\n    A list of floats corresponding to the ridge regression weights, rounded to 4 decimal places.\n    If the matrix to invert is not invertible, returns -1.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X = np.concatenate((np.ones((X.shape[0], 1)), X), axis=1)\n    reg_matrix = np.dot(X.T, X) + alpha * np.eye(X.shape[1])\n    if np.linalg.det(reg_matrix) == 0:\n        return -1\n    weights = np.dot(np.linalg.inv(reg_matrix), np.dot(X.T, y))\n    return [round(float(w), 4) for w in weights]\ndata = np.array([[1.0, 2.0, 3.0], [0.0, 4.0, 2.0], [2.0, 1.0, 1.0]])"}
{"task_id": 0, "completion_id": 2, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implementation of Ridge Regression's closed-form solution.\n    \n    Parameters:\n    data (np.ndarray): A 2D data array where the last column is the target vector y,\n                       and the preceding columns are the feature vectors X.\n    alpha (float): Regularisation strength. Must be a non-negative number. Default is 0.0.\n    \n    Returns:\n    list[float]: The weight vector rounded to 4 decimal places, or -1 if the matrix is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X_bias = np.column_stack((np.ones(X.shape[0]), X))\n    Xtx = X_bias.T @ X_bias + alpha * np.eye(X_bias.shape[1])\n    if np.linalg.det(Xtx) == 0:\n        return -1\n    w = np.linalg.inv(Xtx) @ X_bias.T @ y\n    return [round(coef, 4) for coef in w]"}
{"task_id": 0, "completion_id": 3, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implements Ridge Regression using its closed-form solution.\n    \n    Parameters:\n    - data: A (n_samples, n_features + 1) ndarray with the last column as target y and the preceding as feature X\n    - alpha: Regularisation strength (default 0.0)\n    \n    Returns:\n    - A list of float representing the weight vector rounded to 4 decimal places, or -1 if the matrix is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X = np.c_[np.ones(X.shape[0]), X]\n    I = np.eye(X.shape[1])\n    reg_matrix = alpha * I\n    try:\n        inv_matrix = np.linalg.inv(X.T @ X + reg_matrix)\n    except np.linalg.LinAlgError:\n        return -1\n    w = np.round(inv_matrix @ X.T @ y, 4)\n    return list(w)"}
{"task_id": 0, "completion_id": 4, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Computes the Ridge Regression weight vector using the closed-form solution.\n    \n    Parameters:\n    - data (np.ndarray): An array where the last column is the target and \n      the preceding columns are the features.\n    - alpha (float): Regularization strength. Default is 0.0.\n    \n    Returns:\n    - list[float]: The weight vector rounded to 4 decimal places. Returns -1\n      if the regularized matrix is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X = np.c_[np.ones(X.shape[0]), X]\n    identity_matrix = np.identity(X.shape[1])\n    regularized_matrix = np.dot(X.T, X) + alpha * identity_matrix\n    if np.linalg.det(regularized_matrix) == 0:\n        return -1\n    weight_vector = np.dot(np.linalg.inv(regularized_matrix), np.dot(X.T, y))\n    return [round(val, 4) for val in weight_vector]\ndata = np.array([[1.0, 2.0, 30.0], [2.0, 3.0, 38.0], [3.0, 4.0, 48.0]])\nalpha = 0.1"}
{"task_id": 0, "completion_id": 5, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"Perform Ridge Regression to predict the target from the features.\n\n    Args:\n        data (np.ndarray): The input data array where the last column is the target.\n        alpha (float): The regularisation strength.\n\n    Returns:\n        list[float]: The weight vector or -1 if the matrix is not invertible.\n    \"\"\"\n    X = data[:, :-1].astype(float)\n    y = data[:, -1].astype(float)\n    X = np.hstack([np.ones((X.shape[0], 1)), X])\n    I = np.eye(X.shape[1])\n    matrix = np.dot(X.T, X) + alpha * I\n    if np.linalg.det(matrix) == 0:\n        return -1\n    inverse_matrix = np.linalg.inv(matrix)\n    weights = np.dot(np.dot(inverse_matrix, X.T), y)\n    return [round(w, 4) for w in weights]"}
{"task_id": 0, "completion_id": 6, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Solves Ridge Regression using the closed-form solution.\n\n    :param data: An ndarray where the last column is the target y and\n                 the other columns are the features X.\n    :param alpha: The regularisation strength. Default is 0.0.\n    :return: A list of floats representing the weight vector. Returns -1\n             if the matrix is not invertible.\n    \"\"\"\n    X = np.hstack([np.ones((data.shape[0], 1)), data[:, :-1]])\n    y = data[:, -1]\n    XTX = X.T @ X\n    identity_matrix = np.eye(XTX.shape[0])\n    regularized_matrix = XTX + alpha * identity_matrix\n    if np.linalg.det(regularized_matrix) == 0:\n        return -1\n    w = np.linalg.inv(regularized_matrix) @ (X.T @ y)\n    w_rounded = [round(coeff, 4) for coeff in w]\n    return w_rounded"}
{"task_id": 0, "completion_id": 7, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge Regression using the closed-form solution.\n    \n    Args:\n    data (np.ndarray): An ndarray where the last column is the target y and all\n                       preceding columns are the features X.\n    alpha (float): Regularization strength.\n\n    Returns:\n    list[float]: The weight vector including bias term, rounded to 4 decimal places,\n                 or -1 if the matrix is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X = np.concatenate([np.ones((X.shape[0], 1)), X], axis=1)\n    identity_matrix = np.eye(X.shape[1])\n    matrix_a = X.T @ X + alpha * identity_matrix\n    try:\n        if np.linalg.det(matrix_a) == 0:\n            return -1\n        w = np.linalg.inv(matrix_a) @ X.T @ y\n    except np.linalg.LinAlgError:\n        return -1\n    return [round(weight, 4) for weight in w]"}
{"task_id": 0, "completion_id": 8, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge Regression using its closed-form solution.\n    \n    Parameters:\n    data (np.ndarray): An n by m+1 ndarray where m is the number of features and the last column is the target.\n    alpha (float): Regularization strength, must be a non-negative float.\n    \n    Returns:\n    list[float]: Weight vector as a list of floats rounded to 4 decimal places, or -1 if the matrix is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X_bias = np.hstack([np.ones((data.shape[0], 1)), X])\n    I = np.eye(X_bias.shape[1])\n    try:\n        weights = np.linalg.inv(X_bias.T @ X_bias + alpha * I) @ X_bias.T @ y\n        return [round(weight, 4) for weight in weights]\n    except np.linalg.LinAlgError:\n        return -1"}
{"task_id": 0, "completion_id": 9, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implements Ridge Regression using its closed-form solution and returns the weight vector.\n    \n    Parameters:\n    data (np.ndarray): The input dataset, where the last column is the target and the others are the features.\n    alpha (float): The regularisation strength. Default is 0.0 (no regularisation).\n    \n    Returns:\n    list[float]: Weight vector computed by ridge regression, rounded to 4 decimal places. Returns -1 if the computation cannot be done due to numerical instability.\n    \"\"\"\n    (X, y) = (data[:, :-1], data[:, -1])\n    X = np.column_stack((np.ones(X.shape[0]), X))\n    I = alpha * np.eye(X.shape[1])\n    try:\n        A = np.linalg.inv(X.T @ X + I)\n        w = A @ X.T @ y\n        return [round(c, 4) for c in w]\n    except np.linalg.LinAlgError:\n        return -1"}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or -1) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    K = np.dot(X_train, X_train.T)\n    update = True\n    iterations = 0\n    while update and iterations < n_iter:\n        update = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                update = True\n                break\n        iterations += 1\n    w = np.dot(alpha * y_train, X_train)\n    w_rounded = [round(i, 4) for i in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 1, "completion_id": 1, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or -1) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0\n    updates = 0\n    K = np.dot(X_train, X_train.T)\n    while updates < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                updates += 1\n        if not updated:\n            break\n    w = np.dot(alpha * y_train, X_train).tolist()\n    w = [round(val, 4) for val in w]\n    b = round(b, 4)\n    return (w, b)\nX_train = np.array([[1, 2], [2, 3], [3, 4], [-1, -2], [-2, -3], [-3, -4]])\ny_train = np.array([1, 1, 1, -1, -1, -1])"}
{"task_id": 1, "completion_id": 2, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    gram_matrix = np.dot(X_train, X_train.T)\n    updates = 0\n    while updates < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * gram_matrix[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n        if not updated:\n            break\n        updates += 1\n    w = np.dot(alpha * y_train, X_train).tolist()\n    w = [round(x, 4) for x in w]\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 1, "completion_id": 3, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    for _ in range(n_iter):\n        updated = False\n        for i in range(n_samples):\n            activation = np.sum([alpha[j] * y_train[j] * np.dot(X_train[j], X_train[i]) for j in range(n_samples)])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n        if not updated:\n            break\n    w = list(np.round(np.sum([alpha[i] * y_train[i] * X_train[i] for i in range(n_samples)], axis=0), 4))\n    b = np.round(b, 4)\n    return (w, b)"}
{"task_id": 1, "completion_id": 4, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    K = np.dot(X_train, X_train.T)\n    update = True\n    iter_count = 0\n    while update and iter_count < n_iter:\n        update = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                update = True\n                break\n        if not update:\n            break\n        iter_count += 1\n    w = np.sum((alpha * y_train)[:, np.newaxis] * X_train, axis=0).tolist()\n    w = [round(val, 4) for val in w]\n    b = round(b, 4)\n    return (w, b)\nX_train = np.array([[3, 3], [4, 3], [1, 1]])\ny_train = np.array([1, 1, -1])"}
{"task_id": 1, "completion_id": 5, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n    \n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0\n    updates = 0\n    K = np.dot(X_train, X_train.T)\n    while updates < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[:, i])\n            if y_train[i] * (activation + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n        if not updated:\n            break\n    w = np.sum((alpha * y_train).reshape(-1, 1) * X_train, axis=0).tolist()\n    w = [round(val, 4) for val in w]\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 1, "completion_id": 6, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or -1) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    iter_count = 0\n    while iter_count < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.sum([alpha[j] * y_train[j] * np.dot(X_train[j], X_train[i]) for j in range(n_samples)])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n        if not updated:\n            break\n        iter_count += 1\n    w = np.round(np.sum([alpha[i] * y_train[i] * X_train[i] for i in range(n_samples)], axis=0), 4)\n    b = np.round(b, 4)\n    return (w.tolist(), b)"}
{"task_id": 1, "completion_id": 7, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or -1) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    update_count = 0\n    K = np.dot(X_train, X_train.T)\n    while update_count < n_iter:\n        updates_made = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updates_made = True\n                update_count += 1\n        if not updates_made:\n            break\n    weights = np.sum(alpha[:, np.newaxis] * y_train[:, np.newaxis] * X_train, axis=0)\n    return (list(np.round(weights, 4)), round(b, 4))"}
{"task_id": 1, "completion_id": 8, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    K = np.dot(X_train, X_train.T)\n    updates = 0\n    n_passes = 0\n    while updates < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                updates += 1\n        if not updated:\n            break\n        n_passes += 1\n    w = np.dot(alpha * y_train, X_train).tolist()\n    w_rounded = [round(w_i, 4) for w_i in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 1, "completion_id": 9, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    gram_matrix = np.dot(X_train, X_train.T)\n    update_count = 0\n    while update_count < n_iter:\n        updates_made = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * gram_matrix[:, i])\n            if y_train[i] * (activation + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updates_made = True\n                update_count += 1\n                break\n        if not updates_made:\n            break\n    w = np.round(np.sum(alpha[:, np.newaxis] * y_train[:, np.newaxis] * X_train, axis=0), 4).tolist()\n    b = np.round(b, 4)\n    return (w, b)\nX_train = np.array([[3, 3], [4, 3], [1, 1]])\ny_train = np.array([1, 1, -1])"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n    \n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    identity_link = lambda mu: mu\n    identity_inv_link = lambda eta: eta\n    identity_derivative = lambda mu: np.ones_like(mu)\n    log_link = lambda mu: np.log(mu)\n    log_inv_link = lambda eta: np.exp(eta)\n    log_derivative = lambda mu: 1 / mu\n    logit_link = lambda mu: np.log(mu / (1 - mu))\n    logit_inv_link = lambda eta: 1 / (1 + np.exp(-eta))\n    logit_derivative = lambda mu: 1 / (mu * (1 - mu))\n    return {'identity': {'link': identity_link, 'inv_link': identity_inv_link, 'derivative': identity_derivative}, 'log': {'link': log_link, 'inv_link': log_inv_link, 'derivative': log_derivative}, 'logit': {'link': logit_link, 'inv_link': logit_inv_link, 'derivative': logit_derivative}}\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 2, "completion_id": 1, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def _identity_link(mu):\n        return mu\n\n    def _identity_inv_link(eta):\n        return eta\n\n    def _identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def _log_link(mu):\n        return np.log(mu)\n\n    def _log_inv_link(eta):\n        return np.exp(eta)\n\n    def _log_derivative(mu):\n        return 1 / mu\n\n    def _logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def _logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def _logit_derivative(mu):\n        return mu * (1 - mu)\n    return {'identity': {'link': _identity_link, 'inv_link': _identity_inv_link, 'derivative': _identity_derivative}, 'log': {'link': _log_link, 'inv_link': _log_inv_link, 'derivative': _log_derivative}, 'logit': {'link': _logit_link, 'inv_link': _logit_inv_link, 'derivative': _logit_derivative}}\nmu = np.array([0.2, 0.8])"}
{"task_id": 2, "completion_id": 2, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return mu * (1 - mu)\n    return {'identity': {'link': identity_link, 'inv_link': identity_inv_link, 'derivative': identity_derivative}, 'log': {'link': log_link, 'inv_link': log_inv_link, 'derivative': log_derivative}, 'logit': {'link': logit_link, 'inv_link': logit_inv_link, 'derivative': logit_derivative}}\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 2, "completion_id": 3, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    links = {}\n    links['identity'] = {'link': lambda mu: mu, 'inv_link': lambda eta: eta, 'deriv': lambda mu: np.ones_like(mu)}\n    links['log'] = {'link': lambda mu: np.log(mu), 'inv_link': lambda eta: np.exp(eta), 'deriv': lambda mu: 1 / mu}\n    links['logit'] = {'link': lambda mu: np.log(mu / (1 - mu)), 'inv_link': lambda eta: 1 / (1 + np.exp(-eta)), 'deriv': lambda mu: 1 / (mu * (1 - mu))}\n    return links\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 2, "completion_id": 4, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return mu * (1 - mu)\n    return {'identity': {'link': identity_link, 'inv_link': identity_inv_link, 'derivative': identity_derivative}, 'log': {'link': log_link, 'inv_link': log_inv_link, 'derivative': log_derivative}, 'logit': {'link': logit_link, 'inv_link': logit_inv_link, 'derivative': logit_derivative}}\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 2, "completion_id": 5, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    link_functions = {'identity': {'link': lambda mu: mu, 'inv_link': lambda eta: eta, 'dlink': lambda mu: np.ones_like(mu, dtype=np.float64)}, 'log': {'link': lambda mu: np.log(mu), 'inv_link': lambda eta: np.exp(eta), 'dlink': lambda mu: 1 / mu}, 'logit': {'link': lambda mu: np.log(mu / (1 - mu)), 'inv_link': lambda eta: 1 / (1 + np.exp(-eta)), 'dlink': lambda mu: mu * (1 - mu)}}\n    return link_functions"}
{"task_id": 2, "completion_id": 6, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def id_link(mu):\n        return mu\n\n    def id_inv_link(eta):\n        return eta\n\n    def id_link_deriv(mu):\n        return np.full_like(mu, 1.0)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_link_deriv(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_link_deriv(mu):\n        return 1 / (mu * (1 - mu))\n    return {'identity': {'link': id_link, 'inv_link': id_inv_link, 'deriv': id_link_deriv}, 'log': {'link': log_link, 'inv_link': log_inv_link, 'deriv': log_link_deriv}, 'logit': {'link': logit_link, 'inv_link': logit_inv_link, 'deriv': logit_link_deriv}}\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 2, "completion_id": 7, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return mu * (1 - mu)\n    return {'identity': {'link': identity_link, 'inv_link': identity_inv_link, 'derivative': identity_derivative}, 'log': {'link': log_link, 'inv_link': log_inv_link, 'derivative': log_derivative}, 'logit': {'link': logit_link, 'inv_link': logit_inv_link, 'derivative': logit_derivative}}"}
{"task_id": 2, "completion_id": 8, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return mu * (1 - mu)\n    return {'identity': {'link': identity_link, 'inv_link': identity_inv_link, 'derivative': identity_derivative}, 'log': {'link': log_link, 'inv_link': log_inv_link, 'derivative': log_derivative}, 'logit': {'link': logit_link, 'inv_link': logit_inv_link, 'derivative': logit_derivative}}\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 2, "completion_id": 9, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    links = {}\n    links['identity'] = {'link': lambda mu: mu, 'inv_link': lambda eta: eta, 'derivative': lambda mu: np.ones_like(mu)}\n    links['log'] = {'link': lambda mu: np.log(mu), 'inv_link': lambda eta: np.exp(eta), 'derivative': lambda mu: 1 / mu}\n    links['logit'] = {'link': lambda mu: np.log(mu / (1 - mu)), 'inv_link': lambda eta: 1 / (1 + np.exp(-eta)), 'derivative': lambda mu: 1 / (mu * (1 - mu))}\n    return links"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n\n    def build_tree(indices, depth=0):\n        if len(indices) < 3:\n            return [(idx, depth) for idx in indices]\n        f = np.random.randint(data.shape[1])\n        down = np.min(data[indices, f])\n        up = np.max(data[indices, f])\n        v = np.random.uniform(down, up)\n        left_indices = indices[data[indices, f] <= v]\n        right_indices = indices[data[indices, f] > v]\n        path_lengths = []\n        if len(left_indices) > 0:\n            path_lengths.extend(build_tree(left_indices, depth + 1))\n        if len(right_indices) > 0:\n            path_lengths.extend(build_tree(right_indices, depth + 1))\n        return path_lengths\n    depth_list = build_tree(np.arange(data.shape[0]))\n    depth_list.sort(key=lambda x: x[0])\n    return [depth for (idx, depth) in depth_list]\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 1, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n    \n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n    \n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n    \n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    (n_samples, n_features) = data.shape\n\n    def build_tree(indices, depth=0):\n        if len(indices) < 3:\n            return (depth, Counter(indices))\n        feature_idx = np.random.randint(n_features)\n        feature_values = data[indices, feature_idx]\n        split_val = np.random.uniform(min(feature_values), max(feature_values))\n        left_indices = indices[data[indices, feature_idx] <= split_val]\n        right_indices = indices[data[indices, feature_idx] > split_val]\n        (left_depth, left_counter) = build_tree(left_indices, depth + 1)\n        (right_depth, right_counter) = build_tree(right_indices, depth + 1)\n        total_counter = left_counter + right_counter\n        return (max(left_depth, right_depth), total_counter)\n    all_indices = np.arange(n_samples)\n    (depth, sample_depths) = build_tree(all_indices)\n    path_lengths = [0] * n_samples\n    for (sample, count) in sample_depths.items():\n        path_lengths[sample] = depth - count + 1\n    return path_lengths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 2, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    (n_samples, n_features) = data.shape\n    indices = list(range(n_samples))\n    depths = [0] * n_samples\n\n    def build_tree(sample_indices, depth=1):\n        if len(sample_indices) < 3:\n            for idx in sample_indices:\n                depths[idx] = depth - 1\n            return\n        f = np.random.randint(n_features)\n        down = data[sample_indices, f].min()\n        up = data[sample_indices, f].max()\n        if down == up:\n            for idx in sample_indices:\n                depths[idx] = depth - 1\n            return\n        v = np.random.uniform(down, up)\n        left_indices = [idx for idx in sample_indices if data[idx, f] <= v]\n        right_indices = [idx for idx in sample_indices if data[idx, f] > v]\n        build_tree(left_indices, depth + 1)\n        build_tree(right_indices, depth + 1)\n    build_tree(indices)\n    return depths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 3, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n\n    def build_tree(indices, depth=0):\n        \"\"\"Recursively builds the isolation tree and returns depth for each sample.\"\"\"\n        if len(indices) < 3:\n            return {idx: depth for idx in indices}\n        feature_idx = np.random.randint(data.shape[1])\n        feature_values = data[indices, feature_idx]\n        down = feature_values.min()\n        up = feature_values.max()\n        split_val = np.random.uniform(down, up)\n        left_indices = indices[feature_values <= split_val]\n        right_indices = indices[feature_values > split_val]\n        left_depths = build_tree(left_indices, depth + 1)\n        right_depths = build_tree(right_indices, depth + 1)\n        left_depths.update(right_depths)\n        return left_depths\n    sample_indices = np.arange(data.shape[0])\n    depths = build_tree(sample_indices)\n    return [depths[idx] for idx in range(data.shape[0])]\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 4, "solution": "import numpy as np\nfrom typing import List\nclass Node:\n\n    def __init__(self, indices: List[int]):\n        self.indices = indices\n        self.left = None\n        self.right = None\n        self.split_feature = None\n        self.split_threshold = None\n\n    def is_leaf(self):\n        return self.left is None and self.right is None\ndef build_tree(node: Node, data: np.ndarray):\n    if len(node.indices) < 3:\n        return\n    feature_idx = np.random.randint(data.shape[1])\n    node.split_feature = feature_idx\n    feature_values = data[node.indices, feature_idx]\n    (down, up) = (np.min(feature_values), np.max(feature_values))\n    if down == up:\n        return\n    node.split_threshold = np.random.uniform(down, up)\n    left_indices = [index for index in node.indices if data[index, feature_idx] <= node.split_threshold]\n    right_indices = [index for index in node.indices if data[index, feature_idx] > node.split_threshold]\n    if len(left_indices) < 3 or len(right_indices) < 3:\n        return\n    node.left = Node(left_indices)\n    node.right = Node(right_indices)\n    build_tree(node.left, data)\n    build_tree(node.right, data)\ndef get_depth(sample_idx: int, node: Node) -> int:\n    \"\"\"Traverse the tree and record the depth of the leaf containing the sample.\"\"\"\n    if node is None or node.is_leaf():\n        return 0\n    feature_idx = node.split_feature\n    threshold = node.split_threshold\n    if data[sample_idx, feature_idx] <= threshold:\n        depth = get_depth(sample_idx, node.left) + 1\n    else:\n        depth = get_depth(sample_idx, node.right) + 1\n    return depth\ndef isolation_tree_path_length(data: np.ndarray) -> List[int]:\n    np.random.seed(0)\n    root = Node(list(range(data.shape[0])))\n    build_tree(root, data)\n    depths = [get_depth(i, root) for i in range(data.shape[0])]\n    return depths"}
{"task_id": 3, "completion_id": 5, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the\n        number of edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    (n_samples, n_features) = data.shape\n\n    def build_tree(indices, depth=0):\n        if len(indices) < 3:\n            return (depth, indices)\n        f = np.random.randint(0, n_features)\n        subset = data[indices, f]\n        v = np.random.uniform(subset.min(), subset.max())\n        left_indices = indices[data[indices, f] <= v]\n        right_indices = indices[data[indices, f] > v]\n        (left_depth, left_leaf_indices) = build_tree(left_indices, depth + 1)\n        (right_depth, right_leaf_indices) = build_tree(right_indices, depth + 1)\n        result = {}\n        for idx in left_leaf_indices:\n            result[idx] = left_depth\n        for idx in right_leaf_indices:\n            result[idx] = right_depth\n        return (-1, result)\n    (_, leaf_depths) = build_tree(np.arange(n_samples))\n    depth_list = [leaf_depths[i] for i in range(n_samples)]\n    return depth_list\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 6, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n\n    def grow_tree(indices, depth=0):\n        if len(indices) < 3:\n            return [(i, depth) for i in indices]\n        else:\n            f = np.random.randint(data.shape[1])\n            down = data[indices, f].min()\n            up = data[indices, f].max()\n            v = np.random.uniform(down, up)\n            left_indices = np.array([i for i in indices if data[i, f] <= v])\n            right_indices = np.array([i for i in indices if data[i, f] > v])\n            return grow_tree(left_indices, depth + 1) + grow_tree(right_indices, depth + 1)\n    all_indices = np.arange(data.shape[0])\n    depths = grow_tree(all_indices)\n    sorted_depths = sorted(depths, key=lambda x: x[0])\n    return [d for (_, d) in sorted_depths]"}
{"task_id": 3, "completion_id": 7, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n    \n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n    \n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n\n    def build_tree(indices, depth=0):\n        if len(indices) < 3:\n            return (depth, indices)\n        f = np.random.randint(0, data.shape[1])\n        (down, up) = (data[indices, f].min(), data[indices, f].max())\n        if down == up:\n            return (depth, indices)\n        v = np.random.uniform(down, up)\n        left_indices = indices[data[indices, f] <= v]\n        right_indices = indices[data[indices, f] > v]\n        (left_depth, left_indices) = build_tree(left_indices, depth + 1)\n        (right_depth, right_indices) = build_tree(right_indices, depth + 1)\n        return [(d, idx) for (d, idx) in [(left_depth, left_indices), (right_depth, right_indices)]]\n    n_samples = data.shape[0]\n    result = [0] * n_samples\n    tree = build_tree(np.arange(n_samples))\n    stack = [(0, idx, d) for (d, idx) in tree]\n    while stack:\n        (depth, indices, subtree) = stack.pop()\n        if isinstance(subtree, int):\n            for i in indices:\n                result[i] = depth\n        else:\n            stack.extend(((d, idx, s) for (idx, d, s) in subtree))\n    return result\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 8, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n\n    def build_tree(indices, depth=0):\n        if len(indices) < 3:\n            return (indices, depth)\n        np.random.seed(0 + depth)\n        feature = np.random.randint(data.shape[1])\n        (down, up) = (np.min(data[indices, feature]), np.max(data[indices, feature]))\n        v = np.random.uniform(down, up)\n        left_indices = indices[data[indices, feature] <= v]\n        right_indices = indices[data[indices, feature] > v]\n        (left_leaf, left_depth) = build_tree(left_indices, depth + 1)\n        (right_leaf, right_depth) = build_tree(right_indices, depth + 1)\n        return (left_leaf + right_leaf, max(left_depth, right_depth))\n    np.random.seed(0)\n    (tree_leafs, _) = build_tree(np.arange(data.shape[0]))\n    depths = [0] * data.shape[0]\n    for index in range(data.shape[0]):\n        depth = 0\n        indices = np.arange(data.shape[0])\n        while True:\n            if len(indices) < 3:\n                depths[index] = depth\n                break\n            np.random.seed(0 + depth)\n            feature = np.random.randint(data.shape[1])\n            (down, up) = (np.min(data[indices, feature]), np.max(data[indices, feature]))\n            v = np.random.uniform(down, up)\n            left_indices = indices[data[indices, feature] <= v]\n            right_indices = indices[data[indices, feature] > v]\n            if index in left_indices:\n                indices = left_indices\n            else:\n                indices = right_indices\n            depth += 1\n    return depths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 9, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    np.random.seed(0)\n\n    def build_tree(indices, depth=0):\n        if len(indices) < 3:\n            return {'depth': depth, 'indices': indices}\n        feature_idx = np.random.randint(data.shape[1])\n        down = np.min(data[indices, feature_idx])\n        up = np.max(data[indices, feature_idx])\n        split_val = np.random.uniform(down, up)\n        left_indices = [i for i in indices if data[i, feature_idx] <= split_val]\n        right_indices = [i for i in indices if data[i, feature_idx] > split_val]\n        tree = {}\n        if left_indices:\n            tree['left'] = build_tree(left_indices, depth + 1)\n        if right_indices:\n            tree['right'] = build_tree(right_indices, depth + 1)\n        return tree\n\n    def get_depths(tree, index_to_depth):\n        if 'indices' in tree:\n            for idx in tree['indices']:\n                index_to_depth[idx] = tree['depth']\n        else:\n            if 'left' in tree:\n                get_depths(tree['left'], index_to_depth)\n            if 'right' in tree:\n                get_depths(tree['right'], index_to_depth)\n    tree = build_tree(list(range(data.shape[0])))\n    index_to_depth = {}\n    get_depths(tree, index_to_depth)\n    return [index_to_depth[i] for i in range(data.shape[0])]\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                      itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    min_supp_count = math.ceil(minsup * len(transactions))\n    unique_items = set()\n    for t in transactions:\n        unique_items.update(set(t))\n\n    def is_frequent(itemset):\n        return sum((set(itemset).issubset(t) for t in transactions)) >= min_supp_count\n    frequent_itemsets = {}\n    for i in range(1, len(unique_items) + 1):\n        for itemset in combinations(sorted(unique_items), i):\n            if is_frequent(itemset):\n                frequent_itemsets[itemset] = sum((set(itemset).issubset(t) for t in transactions))\n    return frequent_itemsets\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 1, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                      itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    if not transactions or minsup <= 0:\n        return {}\n    N = len(transactions)\n    min_support = math.ceil(minsup * N)\n    transactions = [set(transaction) for transaction in transactions]\n    unique_items = set((item for transaction in transactions for item in transaction))\n    itemsets = {item: 0 for item in unique_items}\n    for transaction in transactions:\n        for item in transaction:\n            itemsets[item,] += 1\n    frequent_itemsets = {itemset: support for (itemset, support) in itemsets.items() if support >= min_support}\n    k = 2\n    while True:\n        new_combinations = set(combinations(unique_items, k))\n        candidates = {}\n        for candidate in new_combinations:\n            candidate = tuple(sorted(candidate))\n            if all(((subset,) in frequent_itemsets for subset in combinations(candidate, k - 1))):\n                candidates[candidate] = 0\n        for candidate in candidates:\n            for transaction in transactions:\n                if set(candidate).issubset(transaction):\n                    candidates[candidate] += 1\n        k_frequent_itemsets = {itemset: support for (itemset, support) in candidates.items() if support >= min_support}\n        if not k_frequent_itemsets:\n            break\n        frequent_itemsets.update(k_frequent_itemsets)\n        unique_items = {i for itemset in k_frequent_itemsets for i in itemset}\n        k += 1\n    return frequent_itemsets\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6\nfrequent_itemsets = find_frequent_itemsets(transactions, minsup)"}
{"task_id": 7, "completion_id": 2, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n\n    def generate_candidates(itemset, size):\n        \"\"\"Generate candidate itemsets of a given size.\"\"\"\n        if size == 1:\n            all_items = set.union(*[set(transaction) for transaction in transactions])\n            return map(lambda x: (x,), all_items)\n        else:\n            return combinations(itemset, size)\n\n    def calcualte_support(candidates):\n        \"\"\"Calculate the support of each candidate itemset.\"\"\"\n        support_counts = Counter()\n        for candidate in candidates:\n            candidate_set = set(candidate)\n            for transaction in transactions:\n                if candidate_set.issubset(transaction):\n                    support_counts[candidate] += 1\n        return support_counts\n    total_transactions = len(transactions)\n    min_support_count = math.ceil(minsup * total_transactions)\n    itemset = set()\n    for transaction in transactions:\n        itemset.update(transaction)\n    frequent_itemsets = {}\n    itemset_size = 1\n    while itemset_size > 0:\n        candidates = generate_candidates(itemset, itemset_size)\n        support_counts = calcualte_support(candidates)\n        frequent_itemsets.update({candidate: support for (candidate, support) in support_counts.items() if support >= min_support_count})\n        itemset = set().union(*[set(item) for item in frequent_itemsets.keys()])\n        itemset_size += 1\n    return frequent_itemsets\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 3, "solution": "from typing import List, Dict, Tuple, Hashable\nfrom collections import Counter\nfrom itertools import combinations\nimport math\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    minsup_count = math.ceil(minsup * len(transactions))\n    item_counter = Counter((item for transaction in transactions for item in set(transaction)))\n    frequent_items = [item for (item, count) in item_counter.items() if count >= minsup_count]\n    support = {}\n\n    def find_frequent_itemsets_rec(k, itemset):\n        if k == 1:\n            for item in itemset:\n                support[tuple([item])] = item_counter[item]\n        else:\n            for combo in combinations(itemset, k):\n                combo = tuple(sorted(combo))\n                count = sum((1 for transaction in transactions if all((item in transaction for item in combo))))\n                if count >= minsup_count:\n                    support[combo] = count\n    find_frequent_itemsets_rec(1, frequent_items)\n    k = 2\n    while support:\n        new_frequent_items = list(support.keys())\n        support.clear()\n        find_frequent_itemsets_rec(k, [item for itemset in new_frequent_items for item in itemset])\n        k += 1\n    return support\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 4, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                      itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count. If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    threshold = math.ceil(minsup * len(transactions))\n    item_counts = Counter()\n    for transaction in transactions:\n        item_counts.update(set(transaction))\n    frequent_itemsets = {}\n    items = {item for (item, count) in item_counts.items() if count >= threshold}\n    frequent_itemsets.update({(item,): item_counts[item] for item in items})\n    k = 2\n    while True:\n        item_candidates = set(combinations(sorted(items), k))\n        item_counts = Counter()\n        for transaction in transactions:\n            transaction_set = set(transaction)\n            for candidate in item_candidates:\n                if set(candidate).issubset(transaction_set):\n                    item_counts[candidate] += 1\n        items = {item for (item, count) in item_counts.items() if count >= threshold}\n        if not items:\n            break\n        frequent_itemsets.update({item: item_counts[item] for item in items})\n        k += 1\n    return dict(((tuple(sorted(k)), v) for (k, v) in frequent_itemsets.items()))\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 5, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is \n                      itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of \n        sorted items) to its absolute support count.  If no itemset reaches \n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    transactions = [sorted(set(t)) for t in transactions]\n    item_counter = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: count for (item, count) in item_counter.items() if count >= min_support_count}\n    frequent_itemsets = {tuple([item]): count for (item, count) in frequent_items.items()}\n    k = 2\n    while frequent_items:\n        candidates = {tuple(sorted(candidate)): 0 for candidate in combinations(frequent_items.keys(), k)}\n        for transaction in transactions:\n            for candidate in candidates:\n                if set(candidate).issubset(set(transaction)):\n                    candidates[candidate] += 1\n        frequent_items = {candidate: count for (candidate, count) in candidates.items() if count >= min_support_count}\n        frequent_itemsets.update(frequent_items)\n        k += 1\n    return frequent_itemsets\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 6, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                      itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    min_support_count = math.ceil(minsup * len(transactions))\n    all_items = set((item for transaction in transactions for item in transaction))\n    frequent_itemsets = {}\n\n    def find_combinations(items, k):\n        itemsets = list(combinations(items, k))\n        return {tuple(sorted(s)): sum((all((i in t for i in s)) for t in transactions)) for s in itemsets}\n    for k in range(1, len(all_items) + 1):\n        candidate_itemsets = find_combinations(all_items, k)\n        frequent = {itemset: count for (itemset, count) in candidate_itemsets.items() if count >= min_support_count}\n        if not frequent:\n            break\n        frequent_itemsets.update(frequent)\n    return frequent_itemsets\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 7, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    all_items = set((item for transaction in transactions for item in transaction))\n    itemset_counter = Counter()\n    frequent_itemsets = {}\n    for transaction in transactions:\n        for item in set(transaction):\n            itemset_counter[tuple([item])] += 1\n    for size in range(1, len(all_items) + 1):\n        candidates = [set(cand) for cand in combinations(all_items, size) if itemset_counter.get(tuple(sorted(cand)), 0) >= min_support_count]\n        if not candidates:\n            break\n        itemset_counter = Counter()\n        for transaction in transactions:\n            filtered_items = [item for item in set(transaction) if (tuple([item]), size) not in frequent_itemsets]\n            for candidate in combinations(filtered_items, size):\n                itemset_counter[candidate] += 1\n        for (candidate, count) in itemset_counter.items():\n            if count >= min_support_count:\n                frequent_itemsets[tuple(sorted(candidate))] = count\n    return frequent_itemsets\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 8, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                      itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    min_support_count = math.ceil(minsup * len(transactions))\n    all_items = set((item for transaction in transactions for item in transaction))\n    candidate_itemsets = {item: 0 for item in all_items}\n    for transaction in transactions:\n        for item in candidate_itemsets:\n            if item in transaction:\n                candidate_itemsets[item] += 1\n    frequent_itemsets = {item: sup for (item, sup) in candidate_itemsets.items() if sup >= min_support_count}\n    result = {tuple([k]): v for (k, v) in frequent_itemsets.items()}\n    k = 2\n    while frequent_itemsets:\n        k_itemsets = set(combinations(frequent_itemsets.keys(), k))\n        candidate_itemsets.clear()\n        for transaction in transactions:\n            transaction_set = set(transaction)\n            for candidate in k_itemsets:\n                if set(candidate).issubset(transaction_set):\n                    if candidate not in candidate_itemsets:\n                        candidate_itemsets[candidate] = 1\n                    else:\n                        candidate_itemsets[candidate] += 1\n        frequent_itemsets = {item: sup for (item, sup) in candidate_itemsets.items() if sup >= min_support_count}\n        result.update(frequent_itemsets)\n        k += 1\n    return result\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6\nresult = find_frequent_itemsets(transactions, minsup)"}
{"task_id": 7, "completion_id": 9, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                      itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    modified_transactions = [set(transaction) for transaction in transactions]\n    min_support_count = math.ceil(minsup * len(transactions))\n    frequent_itemsets = {}\n    all_items = set((item for transaction in modified_transactions for item in transaction))\n    for length in range(1, len(all_items) + 1):\n        candidates = combinations(all_items, length)\n        for candidate in candidates:\n            candidate_set = set(candidate)\n            support = sum((1 for transaction in modified_transactions if candidate_set <= transaction))\n            if support >= min_support_count:\n                frequent_itemsets[tuple(sorted(candidate))] = support\n    return frequent_itemsets\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centroids = data[:k].copy()\n    for iteration in range(max_iter):\n        distances = np.sqrt(((data - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.array([data[labels == i].mean(axis=0) if np.any(labels == i) else data[np.random.randint(n_samples)] for i in range(k)])\n        max_movement = np.max(np.linalg.norm(centroids - new_centroids, axis=1))\n        if max_movement < epsilon:\n            break\n        centroids = new_centroids\n    rounded_centroids = [centroid.round(4).tolist() for centroid in centroids]\n    return (rounded_centroids, labels.tolist())"}
{"task_id": 11, "completion_id": 1, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n    \n    This function will operate with a set number of clusters k and iteratively\n    assign data points to clusters based on the squared Euclidean distance, update\n    cluster centers, and stop either when centers have minimal movement or\n    max iterations have been reached.\n    \"\"\"\n    centroids = data[:k].copy()\n    for _ in range(max_iter):\n        labels = np.argmin(np.sum(((data - c) ** 2 for c in centroids), axis=1), axis=0)\n        new_centroids = np.array([data[labels == i].mean(axis=0) if np.sum(labels == i) > 0 else data[np.random.randint(data.shape[0])] for i in range(k)])\n        if np.all(np.abs(centroids - new_centroids) < epsilon):\n            break\n        centroids = new_centroids.copy()\n    centroids = np.around(centroids, decimals=4)\n    return (centroids.tolist(), labels.tolist())"}
{"task_id": 11, "completion_id": 2, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    centres = data[:k].copy()\n    (n_samples, n_features) = data.shape\n    labels = np.zeros(n_samples, dtype=int)\n    distances = np.zeros(k)\n    for iter_count in range(max_iter):\n        for i in range(n_samples):\n            for j in range(k):\n                distances[j] = np.dot(data[i] - centres[j], data[i] - centres[j])\n            labels[i] = np.argmin(distances)\n        new_centres = np.zeros((k, n_features))\n        counts = np.zeros(k, dtype=int)\n        for i in range(n_samples):\n            new_centres[labels[i]] += data[i]\n            counts[labels[i]] += 1\n        for j in range(k):\n            if counts[j] > 0:\n                new_centres[j] /= counts[j]\n            else:\n                new_centres[j] = data[np.random.randint(n_samples)]\n        max_movement = np.max(np.sqrt(((centres - new_centres) ** 2).sum(axis=1)))\n        if max_movement < epsilon:\n            break\n        centres = new_centres\n    centres_rounded = [list(np.round(centre, 4)) for centre in centres]\n    labels_list = list(labels)\n    return (centres_rounded, labels_list)"}
{"task_id": 11, "completion_id": 3, "solution": "import numpy as np\ndef squared_euclidean_distance(a: np.ndarray, b: np.ndarray) -> float:\n    return np.sum((a - b) ** 2)\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centres = data[:k].copy()\n    labels = np.zeros(n_samples, dtype=int)\n    for _ in range(max_iter):\n        for (i, sample) in enumerate(data):\n            distances = [squared_euclidean_distance(sample, centre) for centre in centres]\n            labels[i] = np.argmin(distances)\n        new_centres = np.zeros((k, n_features))\n        counts = np.zeros(k)\n        for (i, label) in enumerate(labels):\n            new_centres[label] += data[i]\n            counts[label] += 1\n        for j in range(k):\n            if counts[j] > 0:\n                new_centres[j] /= counts[j]\n            else:\n                new_centres[j] = data[np.random.randint(n_samples)]\n        max_change = np.max(np.linalg.norm(new_centres - centres, axis=1))\n        if max_change < epsilon:\n            break\n        centres = new_centres\n    centres = np.round(centres, decimals=4)\n    return (centres.tolist(), labels.tolist())"}
{"task_id": 11, "completion_id": 4, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centres = np.array([data[i].tolist() for i in range(k)])\n    for _ in range(max_iter):\n        distances = np.sqrt(((data - centres[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centres = np.array([data[labels == i].mean(axis=0) if np.sum(labels == i) > 0 else data[np.random.randint(n_samples)].tolist() for i in range(k)])\n        change = np.sqrt(((new_centres - centres) ** 2).sum(axis=1))\n        centres = new_centres\n        if np.all(change < epsilon):\n            break\n    cents = [list(np.around(centre, decimals=4)) for centre in centres]\n    return (cents, list(labels))"}
{"task_id": 11, "completion_id": 5, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    centroids = data[:k].copy()\n    num_samples = data.shape[0]\n    for iteration in range(max_iter):\n        distances = np.sqrt(((data - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.zeros((k, data.shape[1]))\n        counts = np.zeros(k)\n        for i in range(num_samples):\n            new_centroids[labels[i]] += data[i]\n            counts[labels[i]] += 1\n        for i in range(k):\n            if counts[i] > 0:\n                new_centroids[i] /= counts[i]\n            else:\n                new_centroids[i] = data[np.random.randint(0, num_samples), :]\n        max_change = np.max(np.linalg.norm(new_centroids - centroids, axis=1))\n        if max_change < epsilon:\n            break\n        centroids = new_centroids\n    centroids = np.round(centroids, 4)\n    return (centroids.tolist(), labels.tolist())"}
{"task_id": 11, "completion_id": 6, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centers = data[:k].copy()\n    for _ in range(max_iter):\n        distances = np.linalg.norm(data[:, np.newaxis] - centers, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centers = np.array([data[labels == i].mean(axis=0) for i in range(k)])\n        for i in range(k):\n            if np.isnan(new_centers[i]).any():\n                new_centers[i] = data[np.random.randint(n_samples)]\n        max_change = np.max(np.linalg.norm(new_centers - centers, axis=1))\n        if max_change <= epsilon:\n            break\n        centers = new_centers\n    rounded_centers = np.round(centers, decimals=4)\n    return (rounded_centers.tolist(), labels.tolist())"}
{"task_id": 11, "completion_id": 7, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    num_samples = data.shape[0]\n    centroids = data[:k].copy()\n    labels = np.zeros(num_samples, dtype=int)\n    iterations = 0\n    while iterations < max_iter:\n        distances = np.linalg.norm(data[:, None] - centroids, axis=-1)\n        labels = np.argmin(distances, axis=-1)\n        new_centroids = np.zeros_like(centroids)\n        cluster_sizes = np.zeros(k)\n        for i in range(k):\n            cluster_data = data[labels == i]\n            if len(cluster_data) > 0:\n                new_centroids[i] = np.mean(cluster_data, axis=0)\n                cluster_sizes[i] = len(cluster_data)\n            else:\n                random_index = np.random.randint(num_samples)\n                new_centroids[i] = data[random_index]\n        max_change = np.max(np.linalg.norm(centroids - new_centroids, axis=1))\n        if max_change < epsilon:\n            break\n        centroids = new_centroids\n        iterations += 1\n    rounded_centroids = np.round(centroids, decimals=4).tolist()\n    return (rounded_centroids, labels.tolist())"}
{"task_id": 11, "completion_id": 8, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    centres = data[:k].copy()\n    prev_centres = np.zeros_like(centres)\n    cluster_labels = np.zeros(data.shape[0], dtype=int)\n    samples_change = epsilon + 1\n    iter_num = 0\n    while samples_change > epsilon and iter_num < max_iter:\n        iter_num += 1\n        for (i, sample) in enumerate(data):\n            distances = [np.sum((sample - centre) ** 2) for centre in centres]\n            cluster_labels[i] = np.argmin(distances)\n        for j in range(k):\n            indexed = data[cluster_labels == j]\n            if len(indexed) > 0:\n                centres[j] = np.mean(indexed, axis=0)\n            else:\n                centres[j] = data[np.random.randint(data.shape[0])]\n        samples_change = np.max(np.sqrt(np.sum((centres - prev_centres) ** 2, axis=1)))\n        prev_centres = centres.copy()\n    centres = np.round(centres, 4)\n    return (centres.tolist(), cluster_labels.tolist())"}
{"task_id": 11, "completion_id": 9, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (num_samples, num_features) = data.shape\n    centres = np.array(data[:k])\n    for iter_count in range(max_iter):\n        clusters = [[] for _ in range(k)]\n        for sample in data:\n            distances = np.linalg.norm(sample - centres, axis=1) ** 2\n            cluster_idx = np.argmin(distances)\n            clusters[cluster_idx].append(sample)\n        for (i, cluster) in enumerate(clusters):\n            if not cluster:\n                centres[i] = data[np.random.randint(num_samples)]\n            else:\n                new_centre = np.mean(cluster, axis=0)\n                centres[i] = new_centre\n        max_change = np.max(np.linalg.norm(centres - centres, axis=1))\n        if max_change < epsilon:\n            break\n    labels = []\n    for sample in data:\n        distances = np.linalg.norm(sample - centres, axis=1) ** 2\n        labels.append(np.argmin(distances))\n    centres_rounded = [np.round(centre, decimals=4).tolist() for centre in centres]\n    return (centres_rounded, labels)"}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n    \n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user. It\n    finally returns the indices of the k most promising items.\n    \n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n    \n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            rated_users = [user for user in range(n_user) if data[user, i] > 0 and data[user, j] > 0]\n            if not rated_users:\n                S[i, j] = 0\n                S[j, i] = 0\n            else:\n                v1 = [data[user, i] for user in rated_users]\n                v2 = [data[user, j] for user in rated_users]\n                if criterion == 'cosine':\n                    (std_v1, std_v2) = (np.std(v1), np.std(v2))\n                    if std_v1 > 0.001:\n                        v1 -= np.mean(v1)\n                    if std_v2 > 0.001:\n                        v2 -= np.mean(v2)\n                    cosine_sim = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2) + 1e-08)\n                    S[i, j] = cosine_sim\n                    S[j, i] = cosine_sim\n                elif criterion == 'pearson':\n                    pearson_corr = np.corrcoef(v1, v2)[0, 1]\n                    S[i, j] = pearson_corr\n                    S[j, i] = pearson_corr\n    rated_items = [item for item in range(n_item) if data[user_ind, item] > 0]\n    if len(rated_items) == n_item:\n        return []\n    ratings = np.array([data[user_ind, item] for item in rated_items])\n    prediction_scores = defaultdict(float)\n    for item_t in range(n_item):\n        if item_t not in rated_items:\n            numerator = sum((ratings[i] * S[item_t, item] for (i, item) in enumerate(rated_items)))\n            denominator = sum((abs(S[item_t, item]) for item in rated_items))\n            if denominator == 0:\n                prediction_scores[item_t] = 0\n            else:\n                prediction_scores[item_t] = numerator / denominator\n    sorted_items = sorted(prediction_scores.items(), key=lambda x: (-x[1], x[0]))\n    return [item for (item, score) in sorted_items][:k]\ndata = np.array([[0, 2, 0, 4], [5, 0, 2, 0], [1, 1, 0, 3]])"}
{"task_id": 13, "completion_id": 1, "solution": "import numpy as np\nfrom collections import defaultdict\ndef mean_center(v):\n    \"\"\"Mean-center a vector if its sample standard deviation is larger than a threshold.\"\"\"\n    threshold = 0.001\n    std = np.std(v)\n    if std > threshold:\n        return v - np.mean(v)\n    return v\ndef cosine_similarity(v1, v2):\n    \"\"\"Compute cosine similarity between two vectors.\"\"\"\n    norm1 = np.linalg.norm(v1)\n    norm2 = np.linalg.norm(v2)\n    if norm1 == 0 or norm2 == 0:\n        return 0\n    return np.dot(v1, v2) / (norm1 * norm2)\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function builds an item\u2013item similarity matrix and then predicts\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_items = data.shape[1]\n    S = np.zeros((n_items, n_items))\n    for i in range(n_items):\n        for j in range(i + 1, n_items):\n            rating_indices = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if rating_indices.size == 0:\n                S[i, j] = S[j, i] = 0\n            else:\n                v1 = data[rating_indices, i]\n                v2 = data[rating_indices, j]\n                if criterion == 'cosine':\n                    S[i, j] = S[j, i] = cosine_similarity(mean_center(v1), mean_center(v2))\n                elif criterion == 'pearson':\n                    S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1]\n    rated_items = np.where(data[user_ind, :] > 0)[0]\n    user_ratings = data[user_ind, rated_items]\n    unseen_items = set(range(n_items)) - set(rated_items)\n    scores = defaultdict(float)\n    for t in unseen_items:\n        nominator = np.dot(user_ratings, S[t, rated_items])\n        denominator = np.sum(np.abs(S[t, rated_items]))\n        if denominator > 0:\n            scores[t] = nominator / denominator\n    top_items = sorted(scores, key=scores.get, reverse=True)[:k]\n    return top_items"}
{"task_id": 13, "completion_id": 2, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    similarity = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            user_ratings = np.where((data[:, i] > 0) & (data[:, j] > 0))\n            if len(user_ratings[0]) == 0:\n                similarity[i, j] = similarity[j, i] = 0\n            else:\n                v1 = data[user_ratings, i].flatten()\n                v2 = data[user_ratings, j].flatten()\n                if criterion == 'cosine':\n                    if v1.std() > 0.001:\n                        v1 = v1 - v1.mean()\n                    if v2.std() > 0.001:\n                        v2 = v2 - v2.mean()\n                    cos_sim = v1.dot(v2) / (np.linalg.norm(v1) * np.linalg.norm(v2) + 1e-08)\n                    similarity[i, j] = similarity[j, i] = cos_sim\n                elif criterion == 'pearson':\n                    similarity[i, j] = similarity[j, i] = np.corrcoef(v1, v2)[0, 1]\n    rated_items = np.where(data[user_ind, :] > 0)[0]\n    unrated_items = np.where(data[user_ind, :] == 0)[0]\n    scores = defaultdict(int)\n    for t in unrated_items:\n        numerator = 0\n        denominator = 0\n        for i in rated_items:\n            numerator += data[user_ind, i] * similarity[t, i]\n            denominator += abs(similarity[t, i])\n        if denominator != 0:\n            scores[t] = numerator / denominator\n    top_k = sorted(scores.items(), key=lambda x: x[1], reverse=True)\n    return [item[0] for item in top_k[:k] if item[0] in unrated_items]"}
{"task_id": 13, "completion_id": 3, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_users, n_items) = data.shape\n    S = np.zeros((n_items, n_items))\n    for i in range(n_items):\n        for j in range(i, n_items):\n            common_users = np.nonzero((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(common_users) > 0:\n                v1 = data[common_users, i]\n                v2 = data[common_users, j]\n                if criterion == 'cosine':\n                    if v1.std() > 0.001:\n                        v1 -= v1.mean()\n                    if v2.std() > 0.001:\n                        v2 -= v2.mean()\n                    sim = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                else:\n                    sim = np.corrcoef(v1, v2)[0, 1]\n                S[i, j] = S[j, i] = sim if not np.isnan(sim) else 0\n    rated_items = np.nonzero(data[user_ind] > 0)[0]\n    ratings = data[user_ind, rated_items]\n    scores = defaultdict(float)\n    for t in np.setdiff1d(np.arange(n_items), rated_items):\n        num = np.sum(ratings * S[t, rated_items])\n        den = np.sum(np.abs(S[t, rated_items]))\n        scores[t] = num / den if den > 0 else 0\n    top_items = sorted(scores, key=scores.get, reverse=True)[:k]\n    return top_items\ndata = np.array([[5, 3, 0, 1], [4, 0, 0, 1], [1, 1, 0, 5], [1, 0, 0, 4], [0, 1, 5, 4]])\nuser_ind = 0\nk = 2\ncriterion = 'cosine'"}
{"task_id": 13, "completion_id": 4, "solution": "import numpy as np\nfrom collections import defaultdict\ndef mean_centre(v):\n    if np.std(v) > 0.001:\n        return v - np.mean(v)\n    return v\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_users, n_items) = data.shape\n    S = np.zeros((n_items, n_items))\n    for i in range(n_items):\n        for j in range(i, n_items):\n            common_ratings_mask = (data[:, i] > 0) & (data[:, j] > 0)\n            if np.any(common_ratings_mask):\n                v1 = data[:, i][common_ratings_mask]\n                v2 = data[:, j][common_ratings_mask]\n                if criterion == 'cosine':\n                    v1 = mean_centre(v1)\n                    v2 = mean_centre(v2)\n                    similarity = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                else:\n                    similarity = np.corrcoef(v1, v2)[0, 1]\n            else:\n                similarity = 0\n            S[i, j] = S[j, i] = similarity\n    rated_items = [i for i in range(n_items) if data[user_ind, i] > 0]\n    rated_scores = data[user_ind][rated_items]\n    predictions = defaultdict(float)\n    for t in range(n_items):\n        if t not in rated_items:\n            similarity_sum = S[t, rated_items].sum()\n            if similarity_sum != 0:\n                score = np.dot(rated_scores, S[t, rated_items]) / similarity_sum\n                predictions[t] = score\n    recommended_items = sorted(predictions.keys(), key=lambda x: (predictions[x], -x), reverse=True)[:k]\n    return recommended_items\ndata = np.array([[5, 3, 0, 1], [4, 0, 0, 1], [1, 1, 0, 5], [1, 0, 0, 4], [0, 1, 5, 4], [0, 0, 0, 0]])"}
{"task_id": 13, "completion_id": 5, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user. It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            common_users = np.intersect1d(np.where(data[:, i] > 0)[0], np.where(data[:, j] > 0)[0])\n            if common_users.size > 0:\n                ratings_i = data[common_users, i]\n                ratings_j = data[common_users, j]\n                if criterion == 'cosine':\n                    if np.std(ratings_i) > 0.001:\n                        ratings_i = ratings_i - np.mean(ratings_i)\n                    if np.std(ratings_j) > 0.001:\n                        ratings_j = ratings_j - np.mean(ratings_j)\n                    S[i, j] = np.dot(ratings_i, ratings_j) / (np.linalg.norm(ratings_i) * np.linalg.norm(ratings_j))\n                elif criterion == 'pearson':\n                    if np.std(ratings_i) > 0 and np.std(ratings_j) > 0:\n                        S[i, j] = np.corrcoef(ratings_i, ratings_j)[0, 1]\n                    else:\n                        S[i, j] = 0\n                S[j, i] = S[i, j]\n    rated_items = np.where(data[user_ind] > 0)[0]\n    if len(rated_items) == n_item:\n        return []\n    pred_scores = defaultdict(float)\n    for t in range(n_item):\n        if t not in rated_items:\n            for i in rated_items:\n                if S[t, i] != 0:\n                    pred_scores[t] += data[user_ind, i] * S[t, i]\n            denom = max(np.sum(np.abs(S[t, rated_items])), 1e-09)\n            pred_scores[t] /= denom\n    top_k = sorted(pred_scores.items(), key=lambda x: (-x[1], x[0]))[:k]\n    return [item for (item, score) in top_k]"}
{"task_id": 13, "completion_id": 6, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n    \n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user. It\n    finally returns the indices of the *k* most promising items.\n    \n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n    \n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_item = data.shape[1]\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i, n_item):\n            rated_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(rated_users) == 0:\n                S[i][j] = S[j][i] = 0\n            else:\n                v1 = data[rated_users, i]\n                v2 = data[rated_users, j]\n                if criterion == 'cosine':\n                    if v1.std() > 0.001:\n                        v1 = v1 - v1.mean()\n                    if v2.std() > 0.001:\n                        v2 = v2 - v2.mean()\n                    S[i][j] = S[j][i] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                elif criterion == 'pearson':\n                    S[i][j] = S[j][i] = np.corrcoef(v1, v2)[0, 1]\n    rated_items = np.where(data[user_ind] > 0)[0]\n    rated_ratings = data[user_ind, rated_items]\n    scores = defaultdict(float)\n    for i in range(n_item):\n        if i not in rated_items:\n            numerator = np.sum(rated_ratings * S[i, rated_items])\n            denominator = np.sum(np.abs(S[i, rated_items]))\n            if denominator > 0:\n                scores[i] = numerator / denominator\n    sorted_items = sorted(scores.items(), key=lambda x: (-x[1], x[0]))\n    result = [item[0] for item in sorted_items[:k]]\n    return result"}
{"task_id": 13, "completion_id": 7, "solution": "import numpy as np\nfrom collections import defaultdict\ndef mean_center(v):\n    \"\"\"Mean center the vector v if its standard deviation is greater than 1e-3.\"\"\"\n    std = np.std(v)\n    if std > 0.001:\n        return v - np.mean(v)\n    else:\n        return v\ndef item_similarity(i, j, data, criterion):\n    \"\"\"Calculate the similarity score between items i and j based on a criterion.\"\"\"\n    common_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n    if len(common_users) == 0:\n        return 0\n    v1 = data[common_users, i]\n    v2 = data[common_users, j]\n    if criterion == 'cosine':\n        v1 = mean_center(v1)\n        v2 = mean_center(v2)\n        sim = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n    else:\n        sim = np.corrcoef(v1, v2)[0, 1]\n    return sim\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i, n_item):\n            S[i, j] = S[j, i] = item_similarity(i, j, data, criterion)\n    rated_items = [i for i in range(n_item) if data[user_ind, i] > 0]\n    if len(rated_items) == n_item:\n        return []\n    scores = defaultdict(float)\n    for t in range(n_item):\n        if data[user_ind, t] == 0:\n            pred_score = 0.0\n            denom = 0.0\n            for i in rated_items:\n                pred_score += data[user_ind, i] * S[t, i]\n                denom += abs(S[t, i])\n            if denom > 0:\n                scores[t] = pred_score / denom\n    recommended_items = [item for (item, score) in sorted(scores.items(), key=lambda x: x[1], reverse=True)]\n    return recommended_items[:k]\ndata = np.array([[0, 5, 3], [1, 0, 2], [2, 2, 1], [0, 2, 1], [5, 4, 0]])\nuser_ind = 0\nk = 2"}
{"task_id": 13, "completion_id": 8, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_users, n_items) = data.shape\n    S = np.zeros((n_items, n_items))\n    for i in range(n_items):\n        for j in range(i, n_items):\n            ratings_users = [u for u in range(n_users) if data[u, i] > 0 and data[u, j] > 0]\n            if len(ratings_users) == 0:\n                S[i, j] = S[j, i] = 0\n            else:\n                ratings_i = np.array([data[u, i] for u in ratings_users])\n                ratings_j = np.array([data[u, j] for u in ratings_users])\n                if criterion == 'cosine':\n                    if np.std(ratings_i) > 0.001:\n                        ratings_i -= np.mean(ratings_i)\n                    if np.std(ratings_j) > 0.001:\n                        ratings_j -= np.mean(ratings_j)\n                    S[i, j] = S[j, i] = np.dot(ratings_i, ratings_j) / (np.linalg.norm(ratings_i) * np.linalg.norm(ratings_j))\n                elif criterion == 'pearson':\n                    S[i, j] = S[j, i] = np.corrcoef(ratings_i, ratings_j)[0, 1]\n    rated_items = [i for i in range(n_items) if data[user_ind, i] > 0]\n    rated_ratings = np.array([data[user_ind, i] for i in rated_items])\n    if len(rated_items) == n_items:\n        return []\n    unrated_items = [i for i in range(n_items) if i not in rated_items]\n    scores = defaultdict(float)\n    for t in unrated_items:\n        numer = sum((rated_ratings[i] * S[t, rated_items[i]] for i in range(len(rated_items)) if abs(S[t, rated_items[i]]) > 0))\n        denom = sum((abs(S[t, rated_items[i]]) for i in range(len(rated_items)) if abs(S[t, rated_items[i]]) > 0))\n        score = numer / denom if denom > 0 else 0\n        scores[t] = score\n    recommended_items = sorted(scores.items(), key=lambda item: item[1], reverse=True)\n    return [item[0] for item in recommended_items[:k]]\ndata = np.array([[5, 3, 0, 1], [4, 0, 0, 1], [1, 1, 0, 5], [1, 0, 0, 4], [0, 1, 5, 4]])\nuser_ind = 0\nk = 2"}
{"task_id": 13, "completion_id": 9, "solution": "import numpy as np\nfrom collections import defaultdict\ndef mean_center(v):\n    \"\"\"Mean center a vector only when its standard deviation is over a threshold.\"\"\"\n    if np.std(v) > 0.001:\n        return v - np.mean(v)\n    return v\ndef cosine_similarity(v1, v2):\n    \"\"\"Compute cosine similarity between two vectors.\"\"\"\n    norm_v1 = np.linalg.norm(v1)\n    norm_v2 = np.linalg.norm(v2)\n    if norm_v1 == 0 or norm_v2 == 0:\n        return 0.0\n    return np.dot(v1, v2) / (norm_v1 * norm_v2)\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i, n_item):\n            rated_users = [u for u in range(n_user) if data[u, i] > 0 and data[u, j] > 0]\n            if not rated_users:\n                S[i, j] = S[j, i] = 0\n                continue\n            v1 = data[rated_users, i]\n            v2 = data[rated_users, j]\n            if criterion == 'cosine':\n                v1 = mean_center(v1)\n                v2 = mean_center(v2)\n                S[i, j] = S[j, i] = cosine_similarity(v1, v2)\n            elif criterion == 'pearson':\n                S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1]\n    rated_items = [i for i in range(n_item) if data[user_ind, i] > 0]\n    if not rated_items:\n        return []\n    scores = defaultdict(float)\n    for t in range(n_item):\n        if data[user_ind, t] == 0:\n            denominator = sum((abs(S[t, i]) for i in rated_items))\n            if denominator == 0:\n                scores[t] = 0\n            else:\n                scores[t] = sum((data[user_ind, i] * S[t, i] for i in rated_items)) / denominator\n    top_items = sorted(scores, key=lambda x: (-scores[x], x))[:k]\n    return top_items\ndata = np.random.randint(0, 6, (10, 10))"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef calculate_leaf_score(g, h, gamma, lam):\n    \"\"\"Calculate the regularised loss for a leaf node.\"\"\"\n    numerator = np.sum(g) ** 2\n    denominator = np.sum(h) + lam\n    return -0.5 * (numerator / denominator) + gamma\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\"\"\"\n    (n_samples, n_features) = X.shape\n    best_gain = -1\n    best_split_info = None\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_thresholds = np.unique(feature_values)\n        for threshold in unique_thresholds:\n            left_indices = feature_values < threshold\n            right_indices = feature_values >= threshold\n            (left_g, right_g) = (g[left_indices], g[right_indices])\n            (left_h, right_h) = (h[left_indices], h[right_indices])\n            if len(left_g) < 2 or len(right_g) < 2:\n                continue\n            left_gain = calculate_leaf_score(left_g, left_h, gamma, lam)\n            right_gain = calculate_leaf_score(right_g, right_h, gamma, lam)\n            parent_gain = calculate_leaf_score(g, h, gamma, lam)\n            split_gain = parent_gain - left_gain - right_gain\n            if split_gain > best_gain:\n                best_gain = split_gain\n                best_split_info = (feature_index, threshold)\n    return best_split_info\nX = np.array([[1, 2], [2, 1], [3, 4], [4, 3]])\ng = np.array([1, 1, -1, -1])\nh = np.array([1, 1, 1, 1])\ngamma = 0\nlam = 1"}
{"task_id": 19, "completion_id": 1, "solution": "import numpy as np\ndef regularised_loss(g, h, gamma, lam):\n    \"\"\"Calculate the regularised loss for a set of instances.\"\"\"\n    if len(g) == 0:\n        return 0\n    return -0.5 * np.square(np.sum(g)) / (np.sum(h) + lam) + gamma\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n    \"\"\"\n    best_gain = -np.inf\n    (n_samples, n_features) = X.shape\n    overall_loss = regularised_loss(g, h, gamma, lam)\n    best_feature_idx = best_threshold = None\n    for feature_idx in range(n_features):\n        sorted_idx = np.argsort(X[:, feature_idx])\n        sorted_g = g[sorted_idx]\n        sorted_h = h[sorted_idx]\n        sorted_X = X[sorted_idx, feature_idx]\n        (left_g_sum, left_h_sum) = (0, 0)\n        for i in range(1, n_samples):\n            left_g_sum += sorted_g[i - 1]\n            left_h_sum += sorted_h[i - 1]\n            right_g_sum = np.sum(sorted_g) - left_g_sum\n            right_h_sum = np.sum(sorted_h) - left_h_sum\n            split_value = (sorted_X[i - 1] + sorted_X[i]) / 2.0\n            left_loss = regularised_loss(sorted_g[:i], sorted_h[:i], gamma, lam)\n            right_loss = regularised_loss(sorted_g[i:], sorted_h[i:], gamma, lam)\n            loss_after_split = left_loss + right_loss\n            gain = overall_loss - loss_after_split\n            if i >= 2 and n_samples - i >= 2 and (gain > best_gain):\n                best_gain = gain\n                best_feature_idx = feature_idx\n                best_threshold = split_value\n    if best_gain > 0:\n        return (best_feature_idx, best_threshold)\n    else:\n        return None\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ng = np.array([0.3, -0.3, 0.6])\nh = np.array([0.2, 0.4, 0.6])\ngamma = 1\nlam = 1"}
{"task_id": 19, "completion_id": 2, "solution": "import numpy as np\ndef calc_leaf_value(g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> float:\n    \"\"\"Calculate the regularised loss value for a leaf.\"\"\"\n    if g.size == 0:\n        return float('inf')\n    return -0.5 * np.sum(g) ** 2 / (np.sum(h) + lam) + gamma\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees. If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    (best_feature, best_threshold, best_gain) = (None, None, -np.inf)\n    original_loss = calc_leaf_value(g, h, gamma, lam)\n    for feature in range(n_features):\n        sorted_indices = np.argsort(X[:, feature])\n        for index in range(1, n_samples):\n            if np.all(X[sorted_indices[:index], feature] == X[sorted_indices[0], feature]):\n                continue\n            left_indices = sorted_indices[:index]\n            right_indices = sorted_indices[index:]\n            if len(left_indices) < 2 or len(right_indices) < 2:\n                continue\n            (left_g, right_g) = (g[left_indices], g[right_indices])\n            (left_h, right_h) = (h[left_indices], h[right_indices])\n            left_loss = calc_leaf_value(left_g, left_h, gamma, lam)\n            right_loss = calc_leaf_value(right_g, right_h, gamma, lam)\n            current_gain = original_loss - left_loss - right_loss\n            if current_gain > best_gain:\n                best_gain = current_gain\n                best_feature = feature\n                best_threshold = (X[sorted_indices[index - 1], feature] + X[sorted_indices[index], feature]) / 2\n    return (best_feature, best_threshold) if best_gain > 0 else None"}
{"task_id": 19, "completion_id": 3, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_gain = -np.inf\n    best_split = None\n    for feature_idx in range(n_features):\n        thresholds = np.unique(X[:, feature_idx])\n        for threshold in thresholds:\n            left_idx = X[:, feature_idx] < threshold\n            right_idx = ~left_idx\n            if np.sum(left_idx) >= 2 and np.sum(right_idx) >= 2:\n                gain = gain_for_split(g, h, left_idx, right_idx, gamma, lam)\n                if gain > best_gain:\n                    best_gain = gain\n                    best_split = (feature_idx, threshold)\n    return best_split if best_gain > 0 else None\ndef gain_for_split(g, h, left_idx, right_idx, gamma, lam):\n    parent_num = np.sum(g) ** 2 / (np.sum(h) + lam)\n    left_num = np.sum(g[left_idx]) ** 2 / (np.sum(h[left_idx]) + lam)\n    right_num = np.sum(g[right_idx]) ** 2 / (np.sum(h[right_idx]) + lam)\n    parent_loss = -0.5 * parent_num + gamma\n    left_loss = -0.5 * left_num + gamma\n    right_loss = -0.5 * right_num + gamma\n    gain = parent_loss - left_loss - right_loss\n    return gain\nX = np.random.rand(100, 2)\ng = np.random.randn(100)\nh = np.abs(np.random.randn(100))\ngamma = 0.1\nlam = 1"}
{"task_id": 19, "completion_id": 4, "solution": "import numpy as np\ndef calculate_leaf_value(sum_g, sum_h, gamma, lam):\n    \"\"\"Calculate the regularised loss for a leaf given sums of gradients and Hessians.\"\"\"\n    return -0.5 * sum_g ** 2 / (sum_h + lam) + gamma\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n    \n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees. If no split achieves a positive gain\n    the function returns ``None``.\n    \n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n    \n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_gain = -np.inf\n    best_split = None\n    total_sum_g = np.sum(g)\n    total_sum_h = np.sum(h)\n    total_loss = calculate_leaf_value(total_sum_g, total_sum_h, gamma, lam)\n    for feature_index in range(n_features):\n        unique_feature_values = np.unique(X[:, feature_index])\n        for threshold in unique_feature_values:\n            left_indices = X[:, feature_index] < threshold\n            right_indices = X[:, feature_index] >= threshold\n            if sum(left_indices) < 2 or sum(right_indices) < 2:\n                continue\n            left_sum_g = np.sum(g[left_indices])\n            left_sum_h = np.sum(h[left_indices])\n            right_sum_g = np.sum(g[right_indices])\n            right_sum_h = np.sum(h[right_indices])\n            left_loss = calculate_leaf_value(left_sum_g, left_sum_h, gamma, lam)\n            right_loss = calculate_leaf_value(right_sum_g, right_sum_h, gamma, lam)\n            loss_after_split = left_loss + right_loss\n            gain = total_loss - loss_after_split\n            if gain > best_gain:\n                best_gain = gain\n                best_split = (feature_index, threshold)\n    return best_split if best_gain > 0 else None\nX = np.array([[1], [2], [3], [4]])\ng = np.array([2.1, 2.5, -0.5, -0.2])\nh = np.array([0.5, 0.5, 1.5, 1.5])\ngamma = 0.1\nlam = 1.0"}
{"task_id": 19, "completion_id": 5, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    total_g = np.sum(g)\n    total_h = np.sum(h)\n    parent_loss = loss(total_g, total_h, gamma, lam)\n    best_gain = -float('inf')\n    (best_feature, best_threshold) = (-1, -1)\n    for feature_idx in range(X.shape[1]):\n        unique_values = np.unique(X[:, feature_idx])\n        possible_splits = (unique_values[:-1] + unique_values[1:]) / 2\n        for threshold in possible_splits:\n            left_mask = X[:, feature_idx] <= threshold\n            right_mask = ~left_mask\n            if left_mask.sum() < 2 or right_mask.sum() < 2:\n                continue\n            (left_g, left_h) = (g[left_mask], h[left_mask])\n            (right_g, right_h) = (g[right_mask], h[right_mask])\n            left_loss = loss(np.sum(left_g), np.sum(left_h), gamma, lam)\n            right_loss = loss(np.sum(right_g), np.sum(right_h), gamma, lam)\n            gain = parent_loss - left_loss - right_loss\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_idx\n                best_threshold = threshold\n    if best_gain > 0:\n        return (best_feature, best_threshold)\n    else:\n        return None\ndef loss(g_sum, h_sum, gamma, lam):\n    return -0.5 * (g_sum ** 2 / (h_sum + lam)) + gamma"}
{"task_id": 19, "completion_id": 6, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n\n    def score_partition(i_left, i_right):\n\n        def score(left=True):\n            sides = i_left if left else i_right\n            g_sum = g[sides].sum()\n            h_sum = h[sides].sum()\n            return -0.5 * g_sum ** 2 / (h_sum + lam) + gamma\n        lhs_score = score(left=True)\n        rhs_score = score(left=False)\n        return lhs_score + rhs_score\n\n    def find_optimal_split_for_feature(feature_idx):\n        feature_column = X[:, feature_idx]\n        gain = -np.inf\n        best_split = None\n        for threshold in np.unique(feature_column):\n            mask = feature_column <= threshold\n            if np.sum(mask) >= 2 and np.sum(~mask) >= 2:\n                current_gain = L - score_partition(mask, ~mask)\n                if current_gain > gain:\n                    gain = current_gain\n                    best_split = threshold\n        return (best_split, gain)\n    L = -0.5 * g.sum() ** 2 / (h.sum() + lam) + gamma\n    max_gain = -np.inf\n    best_feature = None\n    best_threshold = None\n    for feature_idx in range(n_features):\n        (threshold, feature_gain) = find_optimal_split_for_feature(feature_idx)\n        if feature_gain > max_gain and feature_gain > 0:\n            max_gain = feature_gain\n            best_threshold = threshold\n            best_feature = feature_idx\n    if best_feature is not None:\n        return (best_feature, best_threshold)\n    else:\n        return None"}
{"task_id": 19, "completion_id": 7, "solution": "import numpy as np\ndef loss(stats_g, stats_h, gamma, lam):\n    \"\"\"Calculate the regularised loss for given gradient and Hessian stats.\"\"\"\n    g_sum = np.sum(stats_g)\n    h_sum = np.sum(stats_h)\n    loss_val = -g_sum ** 2 / (h_sum + lam) / 2 + gamma\n    return max(loss_val, 0)\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_gain = -1\n    best_split = None\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_thresholds = np.unique(feature_values)\n        for threshold in unique_thresholds:\n            left_indices = feature_values <= threshold\n            right_indices = feature_values > threshold\n            if np.sum(left_indices) >= 2 and np.sum(right_indices) >= 2:\n                left_g = g[left_indices]\n                left_h = h[left_indices]\n                right_g = g[right_indices]\n                right_h = h[right_indices]\n                gain = loss(g, h, gamma, lam) - loss(left_g, left_h, gamma, lam) - loss(right_g, right_h, gamma, lam)\n                if gain > best_gain:\n                    best_gain = gain\n                    best_split = (feature_index, threshold)\n    return best_split"}
{"task_id": 19, "completion_id": 8, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    best_gain = -np.inf\n    best_split = None\n\n    def compute_loss(indices):\n        if not indices.size:\n            return 0\n        g_sum = g[indices].sum()\n        h_sum = h[indices].sum()\n        return -0.5 * g_sum ** 2 / (h_sum + lam) + gamma\n    for feature_idx in range(X.shape[1]):\n        unique_thresholds = np.unique(X[:, feature_idx])\n        for threshold in unique_thresholds:\n            left_indices = X[:, feature_idx] < threshold\n            right_indices = X[:, feature_idx] >= threshold\n            if left_indices.sum() < 2 or right_indices.sum() < 2:\n                continue\n            current_loss = compute_loss(np.arange(X.shape[0]))\n            left_loss = compute_loss(np.where(left_indices)[0])\n            right_loss = compute_loss(np.where(right_indices)[0])\n            gain = current_loss - left_loss - right_loss\n            if gain > best_gain:\n                best_gain = gain\n                best_split = (feature_idx, threshold)\n    if best_gain > 0:\n        return best_split\n    else:\n        return None"}
{"task_id": 19, "completion_id": 9, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n\n    def gain(leaf_g, leaf_h, left_g, left_h, right_g, right_h, gamma, lam):\n        leaf_gain = -0.5 * leaf_g ** 2 / (leaf_h + lam) + gamma\n        left_gain = -0.5 * left_g ** 2 / (left_h + lam) + gamma\n        right_gain = -0.5 * right_g ** 2 / (right_h + lam) + gamma\n        return leaf_gain - (left_gain + right_gain)\n    best_gain = -np.inf\n    best_split = None\n    all_g = g.sum()\n    all_h = h.sum()\n    leaf_gain = -0.5 * all_g ** 2 / (all_h + lam) + gamma\n    for feature_idx in range(X.shape[1]):\n        sorted_indices = X[:, feature_idx].argsort()\n        sorted_X = X[sorted_indices]\n        sorted_g = g[sorted_indices]\n        sorted_h = h[sorted_indices]\n        left_g = 0\n        left_h = 0\n        for i in range(1, len(sorted_X) - 1):\n            left_g += sorted_g[i - 1]\n            left_h += sorted_h[i - 1]\n            right_g = all_g - left_g\n            right_h = all_h - left_h\n            g_diff = sorted_X[i, feature_idx] - sorted_X[i - 1, feature_idx]\n            if np.isclose(g_diff, 0):\n                continue\n            threshold_gain = leaf_gain - (-0.5 * right_g ** 2 / (right_h + lam) - 0.5 * left_g ** 2 / (left_h + lam) + 2 * gamma)\n            if threshold_gain > best_gain:\n                best_gain = threshold_gain\n                best_split = (feature_idx, (sorted_X[i, feature_idx] + sorted_X[i - 1, feature_idx]) / 2)\n    if best_gain <= 0:\n        return None\n    else:\n        return best_split"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    array_x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-array_x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    if array_x.size == 1:\n        return (round(float(sigmoid_x), 4), round(float(gradient_x), 4))\n    sigmoid_x = [round(float(num), 4) for num in sigmoid_x.flatten()]\n    gradient_x = [round(float(num), 4) for num in gradient_x.flatten()]\n    if array_x.ndim == 2:\n        sigmoid_x = np.array(sigmoid_x).reshape(array_x.shape).tolist()\n        gradient_x = np.array(gradient_x).reshape(array_x.shape).tolist()\n    else:\n        sigmoid_x = sigmoid_x\n        gradient_x = gradient_x\n    return (sigmoid_x, gradient_x)"}
{"task_id": 20, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    is_scalar = np.isscalar(x)\n    x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n    if is_scalar:\n        return (float(sigmoid_x), float(gradient_x))\n    else:\n        return (sigmoid_x.tolist(), gradient_x.tolist())"}
{"task_id": 20, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n    if np.isscalar(x):\n        sigmoid_x = float(sigmoid_x)\n        gradient_x = float(gradient_x)\n    else:\n        sigmoid_x = sigmoid_x.tolist()\n        gradient_x = gradient_x.tolist()\n    return (sigmoid_x, gradient_x)"}
{"task_id": 20, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n    if x.shape == ():\n        return (float(sigmoid_x), float(gradient_x))\n    else:\n        return (sigmoid_x.tolist(), gradient_x.tolist())"}
{"task_id": 20, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    arr = np.array(x) if not isinstance(x, np.ndarray) else x\n    sigmoid_x = 1 / (1 + np.exp(-arr))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n    if isinstance(x, (int, float)):\n        return (float(sigmoid_x), float(gradient_x))\n    else:\n        return (sigmoid_x.tolist(), gradient_x.tolist())"}
{"task_id": 20, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    is_scalar = np.isscalar(x)\n    x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n    if is_scalar:\n        sigmoid_x = float(sigmoid_x)\n        gradient_x = float(gradient_x)\n    else:\n        sigmoid_x = sigmoid_x.tolist()\n        gradient_x = gradient_x.tolist()\n    return (sigmoid_x, gradient_x)"}
{"task_id": 20, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    is_scalar = True\n    x_is_array = isinstance(x, np.ndarray)\n    if not x_is_array and (not isinstance(x, (float, int))):\n        x = np.array(x)\n        is_scalar = False\n    elif isinstance(x, (float, int)):\n        x = np.array([x])\n        is_scalar = False\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n    if not is_scalar:\n        sigmoid_x = sigmoid_x.tolist()\n        gradient_x = gradient_x.tolist()\n    if is_scalar:\n        sigmoid_x = float(sigmoid_x[0])\n        gradient_x = float(gradient_x[0])\n    return (sigmoid_x, gradient_x)"}
{"task_id": 20, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    if x.size == 1:\n        return (round(float(sigmoid_x), 4), round(float(gradient_x), 4))\n    else:\n        sigmoid_x = [round(num, 4) for num in sigmoid_x.tolist()]\n        gradient_x = [round(num, 4) for num in gradient_x.tolist()]\n        return (sigmoid_x, gradient_x)"}
{"task_id": 20, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n    \n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n        \n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    is_scalar = np.isscalar(x)\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x = np.round(sigmoid_x, decimals=4)\n    gradient_x = np.round(gradient_x, decimals=4)\n    if is_scalar:\n        sigmoid_x = float(sigmoid_x)\n        gradient_x = float(gradient_x)\n    else:\n        sigmoid_x = sigmoid_x.tolist()\n        gradient_x = gradient_x.tolist()\n    return (sigmoid_x, gradient_x)"}
{"task_id": 20, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_rounded = np.round(sigmoid_x, 4)\n    gradient_rounded = np.round(gradient_x, 4)\n    if x.shape == ():\n        return (float(sigmoid_rounded), float(gradient_rounded))\n    else:\n        return (sigmoid_rounded.tolist(), gradient_rounded.tolist())"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n    \n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n    \n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    N_train = len(x_train)\n    N_test = len(x_test)\n    weights = np.full(N_train, 1.0 / N_train)\n    stumps = []\n    alphas = []\n    while True:\n        best_stump = None\n        best_error = 1.0\n        best_prediction = None\n        indices = np.argsort(x_train)\n        x_train_sorted = np.array(x_train)[indices]\n        y_train_sorted = np.array(y_train)[indices]\n        for i in range(1, N_train):\n            threshold = (x_train_sorted[i] + x_train_sorted[i - 1]) / 2\n            for d in [0, 1]:\n                predictions = d * (2 * (x_train_sorted < threshold).astype(int) - 1)\n                prediction = np.empty(N_train)\n                prediction[indices] = predictions\n                error = sum((w for (x, y, w, p) in zip(x_train, y_train, weights, prediction) if y != p))\n                if error < best_error:\n                    best_error = error\n                    best_stump = (d, threshold)\n                    best_prediction = predictions\n        if best_error <= epsilon:\n            break\n        error_rate = best_error / sum(weights)\n        alpha = 0.5 * math.log((1 - error_rate) / error_rate)\n        for i in range(N_train):\n            if y_train[i] != best_prediction[indices[i]]:\n                weights[i] *= math.exp(alpha)\n            else:\n                weights[i] *= math.exp(-alpha)\n        weights /= sum(weights)\n        stumps.append(best_stump)\n        alphas.append(alpha)\n        ensemble_prediction = np.sign(np.sum([alpha * (2 * (x_train < threshold).astype(int) - 1) for (d, threshold) in stumps] * alphas, axis=0))\n        ensemble_error = sum((1 for (y, pred) in zip(y_train, ensemble_prediction) if y != pred)) / N_train\n        if ensemble_error <= epsilon:\n            break\n    predictions = [int(np.sign(sum([alpha * (2 * (x < threshold) - 1) for ((d, threshold), alpha) in zip(stumps, alphas)]))) for x in x_test]\n    return predictions\nx_train = [1, 2, 3, 4, 5]\ny_train = [1, 1, -1, -1, 1]\nx_test = [1.5, 3.5]\npredictions = adaboost_1d_predict(x_train, y_train, x_test, epsilon=0.2)"}
{"task_id": 21, "completion_id": 1, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_samples = len(x_train)\n    sample_weights = np.full(n_samples, 1.0 / n_samples)\n    stumps = []\n    alpha_list = []\n    while True:\n        min_error = float('inf')\n        best_stump = None\n        sorted_indices = np.argsort(x_train)\n        sorted_x = np.array(x_train)[sorted_indices]\n        sorted_y = np.array(y_train)[sorted_indices]\n        sorted_weights = np.array(sample_weights)[sorted_indices]\n        for i in range(n_samples - 1):\n            theta0 = (sorted_x[i] + sorted_x[i + 1]) / 2\n            predict0 = np.where(sorted_x <= theta0, 1, -1)\n            error0 = np.sum(sorted_weights[predict0 != sorted_y])\n            theta1 = (sorted_x[i] + sorted_x[i + 1]) / 2\n            predict1 = np.where(sorted_x > theta1, 1, -1)\n            error1 = np.sum(sorted_weights[predict1 != sorted_y])\n            if error0 < error1:\n                error = error0\n                stump = (-1, theta0)\n            else:\n                error = error1\n                stump = (1, theta1)\n            if error < min_error:\n                min_error = error\n                best_stump = stump\n        if min_error > 1e-10:\n            alpha = 0.5 * math.log((1 - min_error) / min_error)\n        else:\n            alpha = 10000000000.0\n        (d, theta) = best_stump\n        stumps.append(best_stump)\n        alpha_list.append(alpha)\n        predict = np.where(x_train > theta, 1, -1) if d == 1 else np.where(x_train <= theta, 1, -1)\n        error = np.where(predict != y_train, 1, 0)\n        sample_weights *= np.exp([alpha * e for e in error])\n        sample_weights /= np.sum(sample_weights)\n        training_preds = sum((a * predict_stump(x_train, d, theta) for (a, (d, theta)) in zip(alpha_list, stumps)))\n        training_error = sum(y_train != np.sign(training_preds)) / n_samples\n        if training_error <= epsilon:\n            break\n    test_preds = sum((a * predict_stump(x_test, d, theta) for (a, (d, theta)) in zip(alpha_list, stumps)))\n    return np.sign(test_preds).tolist()\ndef predict_stump(x, d, theta):\n    \"\"\" Predicts using the given stump.\"\"\"\n    return np.where(x > theta, 1, -1) if d == 1 else np.where(x <= theta, 1, -1)"}
{"task_id": 21, "completion_id": 2, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n = len(x_train)\n    sample_weights = np.ones(n) / n\n    stumps = []\n    alphas = []\n    data = sorted(zip(x_train, y_train), key=lambda x: x[0])\n    while True:\n        min_error = float('inf')\n        best_stump = None\n        for i in range(1, n):\n            theta = (data[i - 1][0] + data[i][0]) / 2\n            for d in [0, 1]:\n                preds = []\n                for x in x_train:\n                    if d == 0:\n                        preds.append(1 if x <= theta else -1)\n                    else:\n                        preds.append(1 if x > theta else -1)\n                error = sum((w for (w, p, y) in zip(sample_weights, preds, y_train) if p != y))\n                if error < min_error:\n                    min_error = error\n                    best_stump = {'d': d, 'theta': theta, 'preds': preds}\n        if min_error > 0.5 * n:\n            break\n        alpha = 0.5 * math.log((1 - min_error / n) / (min_error / n))\n        alphas.append(alpha)\n        stumps.append(best_stump)\n        for (i, (x, y)) in enumerate(data):\n            if best_stump['preds'][x_train.index(x)] == y:\n                sample_weights[i] *= math.exp(-alpha)\n            else:\n                sample_weights[i] *= math.exp(alpha)\n        sample_weights /= sample_weights.sum()\n        train_preds = predict(data, stumps, alphas)\n        train_error = sum((1 for (y1, y2) in zip(train_preds, y_train) if y1 != y2)) / n\n        if train_error <= epsilon:\n            break\n    test_data = sorted(zip(x_test, [0] * len(x_test)), key=lambda x: x[0])\n    test_preds = predict(test_data, stumps, alphas)\n    return test_preds\ndef predict(data, stumps, alphas):\n    \"\"\"Calculates the prediction for a given dataset.\"\"\"\n    preds = [0] * len(data)\n    for (stump, alpha) in zip(stumps, alphas):\n        for (i, (x, y)) in enumerate(data):\n            (d, theta, preds) = (stump['d'], stump['theta'], stump['preds'])\n            if d == 0 and x <= theta or (d == 1 and x > theta):\n                preds[i] += alpha\n            else:\n                preds[i] -= alpha\n    return [1 if p >= 0 else -1 for p in preds]\nx_train = [1, 2, 3, 6, 7, 8]\ny_train = [1, 1, -1, -1, 1, -1]\nx_test = [0.5, 4, 5, 8.5]\nepsilon = 0.01"}
{"task_id": 21, "completion_id": 3, "solution": "import numpy as np\nimport math\nfrom typing import List\ndef adaboost_1d_predict(x_train: List[float], y_train: List[int], x_test: List[float], epsilon: float=0.0) -> List[int]:\n\n    def decision_stump_error(input_data: List[float], target_labels: List[int], stump_d: int, stump_theta: float) -> float:\n        \"\"\"Calculate weighted error of a decision stump.\"\"\"\n        predictions = []\n        for value in input_data:\n            if stump_d == 0 and value <= stump_theta or (stump_d == 1 and value > stump_theta):\n                predictions.append(1)\n            else:\n                predictions.append(-1)\n        err = 0\n        for i in range(len(input_data)):\n            if predictions[i] != target_labels[i]:\n                err += weights[i]\n        return err\n\n    def best_stump(input_data: List[float], target_labels: List[int], weights: List[float]) -> (int, float, float):\n        \"\"\"\n        Finds the decision stump with minimum error.\n        Returns: (decision value (d), threshold value (theta), minimum error)\n        \"\"\"\n        data_sorted = sorted(input_data)\n        min_error = math.inf\n        (best_d, best_theta) = (None, None)\n        for i in range(1, len(data_sorted)):\n            mid_point = (data_sorted[i - 1] + data_sorted[i]) / 2\n            for d in [0, 1]:\n                err = decision_stump_error(input_data, target_labels, d, mid_point)\n                if err < min_error:\n                    min_error = err\n                    best_d = d\n                    best_theta = mid_point\n        return (best_d, best_theta, min_error)\n    weights = [1 / len(x_train)] * len(x_train)\n    stumps = []\n    stump_coeffs = []\n    num_rounds = 0\n    training_error = 1\n    while training_error > epsilon and num_rounds < 1000:\n        (d, theta, error) = best_stump(x_train, y_train, weights)\n        stumps.append((d, theta))\n        alpha = 0.5 * math.log((1 - error) / error)\n        stump_coeffs.append(alpha)\n        for (i, value) in enumerate(x_train):\n            if (d == 0 and value <= theta) != (y_train[i] == 1):\n                weights[i] *= math.exp(alpha)\n            elif (d == 1 and value > theta) != (y_train[i] == 1):\n                weights[i] *= math.exp(alpha)\n        sum_weights = sum(weights)\n        weights = [w / sum_weights for w in weights]\n        training_error = 1\n        for (x, t) in zip(x_train, y_train):\n            prediction = 0\n            for (i, (d, theta)) in enumerate(stumps):\n                if d == 0 and x <= theta or (d == 1 and x > theta):\n                    prediction += stump_coeffs[i]\n                else:\n                    prediction -= stump_coeffs[i]\n            if not np.sign(prediction) == t:\n                training_error -= 1 / len(x_train)\n        num_rounds += 1\n    predictions = []\n    for x in x_test:\n        prediction = 0\n        for (i, (d, theta)) in enumerate(stumps):\n            if d == 0 and x <= theta or (d == 1 and x > theta):\n                prediction += stump_coeffs[i]\n            else:\n                prediction -= stump_coeffs[i]\n        predictions.append(np.sign(prediction))\n    return predictions"}
{"task_id": 21, "completion_id": 4, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n\n    def stump_error(d, theta):\n        errors = 0.0\n        for (i, x) in enumerate(x_train):\n            if d == 0 and x > theta and (y_train[i] == 1) or (d == 0 and x <= theta and (y_train[i] == -1)) or (d == 1 and x <= theta and (y_train[i] == 1)) or (d == 1 and x > theta and (y_train[i] == -1)):\n                errors += weights[i]\n        return errors\n    (x_train, y_train) = zip(*sorted(zip(x_train, y_train)))\n    thresholds = [(x_train[i] + x_train[i + 1]) / 2.0 for i in range(len(x_train) - 1)]\n    weights = [1.0 / len(x_train)] * len(x_train)\n    stumps = []\n    alphas = []\n    N = len(x_train)\n    while True:\n        (min_error, best_d, best_theta) = (1, 0, thresholds[0])\n        for d in range(2):\n            for theta in thresholds:\n                error = stump_error(d, theta)\n                if error < min_error:\n                    min_error = error\n                    best_d = d\n                    best_theta = theta\n        alpha = 0.5 * math.log((1 - min_error) / min_error)\n        stumps.append((best_d, best_theta))\n        alphas.append(alpha)\n        misplaced = 0\n        for i in range(N):\n            if best_d == 0 and x_train[i] <= best_theta and (y_train[i] == -1) or (best_d == 0 and x_train[i] > best_theta and (y_train[i] == 1)) or (best_d == 1 and x_train[i] > best_theta and (y_train[i] == -1)) or (best_d == 1 and x_train[i] <= best_theta and (y_train[i] == 1)):\n                weights[i] *= math.exp(alpha)\n                misplaced += 1\n        Z_t = sum(weights)\n        weights = [w / Z_t for w in weights]\n        if misplaced / N <= epsilon:\n            break\n\n    def predict(x):\n        return sign(sum((alpha * predict_stump(stump, x) for (stump, alpha) in zip(stumps, alphas))))\n\n    def sign(num):\n        return 1 if num >= 0 else -1\n\n    def predict_stump(stump, x):\n        (d, theta) = stump\n        if d == 0:\n            return 1 if x <= theta else -1\n        else:\n            return 1 if x > theta else -1\n    return [predict(x) for x in x_test]"}
{"task_id": 21, "completion_id": 5, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error. Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n = len(x_train)\n    weights = np.ones(n) / n\n    weak_learners = []\n    alpha_values = []\n    x_sorted_indices = np.argsort(x_train)\n    x_sorted = np.array(x_train)[x_sorted_indices]\n    y_sorted = np.array(y_train)[x_sorted_indices]\n    while True:\n        min_error = float('inf')\n        best_theta = best_d = None\n        for i in range(n - 1):\n            if y_sorted[i] != y_sorted[i + 1]:\n                theta = (x_sorted[i] + x_sorted[i + 1]) / 2\n                for d in range(2):\n                    if d == 0:\n                        pred = np.where(x_train <= theta, 1, -1)\n                    else:\n                        pred = np.where(x_train > theta, 1, -1)\n                    error = np.sum(weights[pred != y_train])\n                    if error < min_error:\n                        min_error = error\n                        (best_theta, best_d) = (theta, d)\n                        best_pred = pred\n        if min_error <= 0.5:\n            alpha = 0.5 * math.log((1 - min_error) / min_error)\n            alpha_values.append(alpha)\n            weak_learners.append((best_d, best_theta))\n            weights *= np.exp(-alpha * np.array(y_train) * best_pred)\n            weights /= np.sum(weights)\n            ensemble_pred = np.zeros(n)\n            for (alpha, (d, theta)) in zip(alpha_values, weak_learners):\n                if d == 0:\n                    ensemble_pred += alpha * np.where(x_train <= theta, 1, -1)\n                else:\n                    ensemble_pred += alpha * np.where(x_train > theta, 1, -1)\n            train_error = np.mean(ensemble_pred * np.array(y_train) < 0)\n            if train_error <= epsilon:\n                break\n\n    def strong_classifier(X):\n        predictions = np.zeros(len(X))\n        for (alpha, (d, theta)) in zip(alpha_values, weak_learners):\n            if d == 0:\n                predictions += alpha * np.where(X <= theta, 1, -1)\n            else:\n                predictions += alpha * np.where(X > theta, 1, -1)\n        return np.sign(predictions)\n    return [int(k) for k in strong_classifier(x_test)]"}
{"task_id": 21, "completion_id": 6, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n    \n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n    \n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_samples = len(x_train)\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    weak_learners = []\n    weak_learner_weights = []\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    while True:\n        error = float('inf')\n        best_stump = None\n        best_theta = None\n        sorted_indices = np.argsort(x_train)\n        sorted_x_train = x_train[sorted_indices]\n        sorted_y_train = y_train[sorted_indices]\n        sorted_sample_weights = sample_weights[sorted_indices]\n        for i in range(1, n_samples):\n            theta = (sorted_x_train[i - 1] + sorted_x_train[i]) / 2.0\n            for d in [0, 1]:\n                if d == 0:\n                    predictions = np.where(sorted_x_train <= theta, 1, -1)\n                else:\n                    predictions = np.where(sorted_x_train > theta, 1, -1)\n                current_error = np.sum(sorted_sample_weights * (predictions != sorted_y_train))\n                if current_error < error:\n                    error = current_error\n                    best_stump = d\n                    best_theta = theta\n        alpha = 0.5 * math.log((1 - error) / error)\n        if best_stump == 0:\n            predictions = np.where(x_train <= best_theta, 1, -1)\n        else:\n            predictions = np.where(x_train > best_theta, 1, -1)\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n        weak_learners.append((best_stump, best_theta))\n        weak_learner_weights.append(alpha)\n        accumulation = np.zeros(n_samples)\n        for i in range(len(weak_learners)):\n            (stump, theta) = weak_learners[i]\n            alpha = weak_learner_weights[i]\n            if stump == 0:\n                predictions = np.where(x_train <= theta, 1, -1)\n            else:\n                predictions = np.where(x_train > theta, 1, -1)\n            accumulation += alpha * predictions\n        ensemble_predictions = np.sign(accumulation)\n        training_error = np.sum(ensemble_predictions != y_train) / n_samples\n        if training_error <= epsilon:\n            break\n    test_accumulation = np.zeros(len(x_test))\n    for i in range(len(weak_learners)):\n        (stump, theta) = weak_learners[i]\n        alpha = weak_learner_weights[i]\n        if stump == 0:\n            predictions = np.where(x_test <= theta, 1, -1)\n        else:\n            predictions = np.where(x_test > theta, 1, -1)\n        test_accumulation += alpha * predictions\n    test_predictions = np.sign(test_accumulation)\n    return test_predictions.tolist()"}
{"task_id": 21, "completion_id": 7, "solution": "import numpy as np\nimport math\nfrom typing import List\ndef adaboost_1d_predict(x_train: List[float], y_train: List[int], x_test: List[float], epsilon: float=0.0) -> List[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : List[float]\n        Training sample values (one-dimensional).\n    y_train : List[int]\n        Labels corresponding to x_train (each value must be 1 or -1).\n    x_test : List[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble's training error <= epsilon.\n\n    Returns\n    -------\n    List[int]\n        Predicted labels (1 or -1) for every value in x_test.\n    \"\"\"\n    n_samples = len(x_train)\n    sample_weights = np.ones(n_samples) / n_samples\n    stumps = []\n    weights = []\n    while True:\n        min_error = float('inf')\n        best_stump = {}\n        sorted_indices = np.argsort(x_train)\n        sorted_x = np.array(x_train)[sorted_indices]\n        sorted_y = np.array(y_train)[sorted_indices]\n        for i in range(1, n_samples):\n            theta = (sorted_x[i - 1] + sorted_x[i]) / 2.0\n            for d in range(2):\n                if d == 0:\n                    pred = (sorted_x <= theta).astype(int) * 2 - 1\n                else:\n                    pred = (sorted_x > theta).astype(int) * 2 - 1\n                err = np.sum(sample_weights[sorted_indices] * (pred != sorted_y).astype(int))\n                if err < min_error:\n                    min_error = err\n                    best_stump = {'d': d, 'theta': theta}\n        if min_error == 0:\n            alpha = 1\n        else:\n            alpha = 0.5 * np.log((1 - min_error) / min_error)\n        mistakes = (make_prediction(x_train, best_stump) != y_train).astype(int)\n        sample_weights *= np.exp(alpha * mistakes)\n        sample_weights /= np.sum(sample_weights)\n        stumps.append(best_stump)\n        weights.append(alpha)\n        train_predict = make_prediction(x_train, stumps, weights)\n        train_error = np.mean(train_predict != y_train)\n        if train_error <= epsilon:\n            break\n    test_predict = make_prediction(x_test, stumps, weights)\n    return test_predict.tolist()\ndef make_prediction(X, stumps=None, alphas=None, d=None, theta=None):\n    if d is not None and theta is not None:\n        return (X > theta).astype(int) * 2 - 1 if d == 1 else (X <= theta).astype(int) * 2 - 1\n    predictions = [make_prediction(x, stumps=[stump], alphas=[alpha]) for (x, stump, alpha) in zip([X] * len(stumps), stumps, alphas)]\n    predictions = np.sum(np.array(predictions) * alphas, axis=0)\n    return np.sign(predictions).astype(int)"}
{"task_id": 21, "completion_id": 8, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    N = len(x_train)\n    sample_weights = np.full(N, 1 / N)\n    stumps = []\n    while True:\n        (best_stump, best_error) = (None, float('inf'))\n        for index in range(1, N):\n            (x1, x2) = (sorted([x_train[i] for i in range(N) if y_train[i] == 1]), sorted([x_train[i] for i in range(N) if y_train[i] == -1]))\n            theta = (x1[index] + x2[index]) / 2\n            for d in [0, 1]:\n                stump_predictions = [d == 0 if value <= theta else d == 1 for value in x_train]\n                stump_error = sum((w for (x_t, y_t, w) in zip(stump_predictions, y_train, sample_weights) if x_t != y_t))\n                if stump_error < best_error:\n                    best_stump = (d, theta)\n                    best_error = stump_error\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n        stumps.append((best_stump, alpha))\n        new_weights = []\n        for (i, (x_t, y_t)) in enumerate(zip(x_train, y_train)):\n            stump_prediction = best_stump[0] == 0 if x_t <= best_stump[1] else best_stump[0] == 1\n            new_weight = sample_weights[i] * math.exp(-alpha * y_t * stump_prediction)\n            new_weights.append(new_weight)\n        sample_weights = np.array(new_weights) / np.sum(new_weights)\n        train_predictions = np.sum(([alpha * (d == 0 if value <= theta else d == 1) for ((d, theta), alpha) in stumps] for value in x_train))\n        train_error = np.mean(np.sign(train_predictions) != y_train)\n        if train_error <= epsilon:\n            break\n    test_predictions = [np.sign(np.sum([alpha * (d == 0 if value <= theta else d == 1) for ((d, theta), alpha) in stumps])) for value in x_test]\n    return test_predictions\nx_train = [1, 4, 5]\ny_train = [1, -1, 1]\nx_test = [2, 3]\nepsilon = 0.0"}
{"task_id": 21, "completion_id": 9, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n    \n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error. Training stops once\n        the ensemble's training error <= *epsilon*.\n    \n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    assert len(x_train) == len(y_train), 'x_train and y_train must have the same length'\n    sorted_indices = np.argsort(x_train)\n    x_train = np.array(x_train)[sorted_indices]\n    y_train = np.array(y_train)[sorted_indices]\n    n_samples = len(x_train)\n    w = np.full(n_samples, 1.0 / n_samples)\n    stumps = []\n    alphas = []\n    training_error = 1.0\n    while training_error > epsilon:\n        best_theta = best_d = None\n        min_error = float('inf')\n        for i in range(n_samples - 1):\n            theta = (x_train[i] + x_train[i + 1]) / 2\n            for d in [0, 1]:\n                error = 0\n                for (x, y, weight) in zip(x_train, y_train, w):\n                    prediction = 1 if d == 0 and x <= theta or (d == 1 and x > theta) else -1\n                    if prediction != y:\n                        error += weight\n                if error < min_error:\n                    min_error = error\n                    best_theta = theta\n                    best_d = d\n        alpha = 0.5 * math.log((1 - min_error) / min_error) if min_error > 0 else float('inf')\n        stumps.append((best_d, best_theta))\n        alphas.append(alpha)\n        for i in range(n_samples):\n            (x, y) = (x_train[i], y_train[i])\n            prediction = 1 if best_d == 0 and x <= best_theta or (best_d == 1 and x > best_theta) else -1\n            w[i] *= math.exp(-alpha * y * prediction)\n        w /= np.sum(w)\n        predictions = np.zeros(n_samples)\n        for ((d, theta), alpha) in zip(stumps, alphas):\n            p = np.array([1 if d == 0 and x <= theta or (d == 1 and x > theta) else -1 for x in x_train])\n            predictions += alpha * p\n        training_error = np.mean(np.sign(predictions) != y_train)\n    test_predictions = np.zeros(len(x_test))\n    for ((d, theta), alpha) in zip(stumps, alphas):\n        p = np.array([1 if d == 0 and x <= theta or (d == 1 and x > theta) else -1 for x in x_test])\n        test_predictions += alpha * p\n    return [int(pred) for pred in np.sign(test_predictions)]\nx_train = [1, 2, 3, 4, 5, 6]\ny_train = [1, -1, 1, 1, -1, 1]\nx_test = [0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5]"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n\n    def gaussian_kernel(X1: np.ndarray, X2: np.ndarray, gamma: float):\n        norm1 = np.sum(X1 ** 2, axis=1, keepdims=True)\n        norm2 = np.sum(X2 ** 2, axis=1, keepdims=True)\n        dist = -2.0 * X1 @ X2.T + norm1 + norm2.T\n        return np.exp(-gamma * dist)\n    K = gaussian_kernel(X_test, X_train, gamma)\n    y_train = y_train.reshape(-1, 1)\n    alpha_y_train = np.multiply(alpha, y_train)\n    g = np.matmul(K, alpha_y_train) + b\n    predictions = np.sign(g).flatten().astype(int)\n    return predictions.tolist()"}
{"task_id": 25, "completion_id": 1, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    (n_samples_train, n_features) = X_train.shape\n    (n_samples_test, _) = X_test.shape\n    dist_matrix = np.sum(X_test ** 2, axis=1)[:, np.newaxis] + np.sum(X_train ** 2, axis=1)[np.newaxis, :] - 2 * np.dot(X_test, X_train.T)\n    K = np.exp(-gamma * dist_matrix)\n    decision_values = np.sum(np.dot(K, y_train * alpha), axis=1) + b\n    predictions = np.sign(decision_values)\n    predictions[predictions == 0] = 1\n    return list(predictions.astype(int))"}
{"task_id": 25, "completion_id": 2, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n\n    def gaussian_kernel(X1, X2, gamma):\n        sq_distances = np.sum(X1 ** 2, axis=1).reshape(-1, 1) + np.sum(X2 ** 2, axis=1) - 2 * np.dot(X1, X2.T)\n        return np.exp(-gamma * sq_distances)\n    K = gaussian_kernel(X_test, X_train, gamma)\n    alpha = alpha.reshape(-1, 1)\n    y_train = y_train.reshape(-1, 1)\n    g_z = np.sum(alpha * y_train * K, axis=1) + b\n    predicted_labels = np.sign(g_z).astype(int).tolist()\n    return predicted_labels"}
{"task_id": 25, "completion_id": 3, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    (n, d) = X_train.shape\n    (m, d) = X_test.shape\n    dist = np.sum(X_test[:, np.newaxis] ** 2, axis=2) + np.sum(X_train ** 2, axis=1) - 2 * np.dot(X_test, X_train.T)\n    kernel = np.exp(-gamma * dist)\n    decision_values = (alpha * y_train).dot(kernel.T) + b\n    labels = np.sign(decision_values).astype(int).tolist()\n    return labels"}
{"task_id": 25, "completion_id": 4, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    (n, d) = X_train.shape\n    m = X_test.shape[0]\n    K = np.zeros((n, m))\n    for i in range(n):\n        differences = X_test - X_train[i]\n        sq_distances = np.sum(differences ** 2, axis=1)\n        K[i, :] = np.exp(-gamma * sq_distances)\n    decision_values = np.dot(alpha * y_train, K) + b\n    predictions = np.sign(decision_values)\n    return predictions.tolist()"}
{"task_id": 25, "completion_id": 5, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    (n, d) = X_train.shape\n    m = X_test.shape[0]\n    X_train_expanded = X_train[:, np.newaxis, :]\n    X_test_expanded = X_test[np.newaxis, :, :]\n    distances_squared = np.sum((X_train_expanded - X_test_expanded) ** 2, axis=2)\n    kernel = np.exp(-gamma * distances_squared)\n    weighted_kernel = alpha[:, np.newaxis] * y_train[:, np.newaxis] * kernel\n    predictions = np.sum(weighted_kernel, axis=0) + b\n    predicted_labels = np.sign(predictions)\n    predicted_labels[predicted_labels == 0] = -1\n    return list(predicted_labels.astype(int))"}
{"task_id": 25, "completion_id": 6, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    (n, d) = X_train.shape\n    m = X_test.shape[0]\n    kernel_matrix = np.zeros((m, n))\n    norms_train = np.sum(X_train ** 2, axis=1)\n    norms_test = np.sum(X_test ** 2, axis=1)\n    distances = -2 * np.dot(X_test, X_train.T) + norms_train + norms_test[:, np.newaxis]\n    kernel_matrix = np.exp(-gamma * distances)\n    decision_function = np.sum(alpha * y_train * kernel_matrix, axis=1) + b\n    predictions = np.sign(decision_function)\n    return predictions.astype(int).tolist()"}
{"task_id": 25, "completion_id": 7, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    dists = np.sum(X_train ** 2, axis=1).reshape(-1, 1) + np.sum(X_test ** 2, axis=1) - 2 * X_train.dot(X_test.T)\n    K = np.exp(-gamma * dists)\n    scores = np.sum(alpha * y_train.reshape(-1, 1) * K, axis=0) + b\n    predictions = [1 if score >= 0 else -1 for score in scores]\n    return predictions"}
{"task_id": 25, "completion_id": 8, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    n = X_train.shape[0]\n    m = X_test.shape[0]\n    kernel_matrix = np.exp(-gamma * np.sum((X_train[:, np.newaxis] - X_test) ** 2, axis=2))\n    decision_values = np.sum(alpha[:, np.newaxis] * y_train[:, np.newaxis] * kernel_matrix, axis=0) + b\n    predicted_labels = np.sign(decision_values).astype(int)\n    return predicted_labels.tolist()"}
{"task_id": 25, "completion_id": 9, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    (n, d) = X_train.shape\n    m = X_test.shape[0]\n    distances = np.sum(X_test[:, np.newaxis, :] - X_train) ** 2\n    kernel_matrix = np.exp(-gamma * distances)\n    scores = np.dot(kernel_matrix, alpha * y_train) + b\n    predictions = np.sign(scores).astype(int)\n    return predictions.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X)\n    (m, n) = X_np.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, singular_values, Vt) = np.linalg.svd(X_np, full_matrices=False)\n    k = min(k, len(singular_values))\n    sigma_k = np.diag(singular_values[:k])\n    U_k = U[:, :k]\n    Vt_k = Vt[:k, :]\n    X_hat_np = np.dot(U_k, np.dot(sigma_k, Vt_k))\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    mse = round(float(mse), 4)\n    X_hat = X_hat_np.round(4).tolist()\n    return (X_hat, mse)\nX = [[1, 2], [3, 4]]\nk = 1"}
{"task_id": 28, "completion_id": 1, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef linear_autoencoder(X: List[List[int | float]], k: int) -> Tuple[List[List[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X = np.array(X)\n    (m, n) = X.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, S, VT) = np.linalg.svd(X, full_matrices=False)\n    Uk = U[:, :k]\n    Sk = S[:k]\n    VTk = VT[:k, :]\n    X_hat = Uk @ np.diag(Sk) @ VTk\n    X_hat_rounded = np.round(X_hat, 4).tolist()\n    error = np.square(X - X_hat).mean()\n    mse = round(error, 4)\n    return (X_hat_rounded, mse)"}
{"task_id": 28, "completion_id": 2, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef linear_autoencoder(X: List[List[float]], k: int) -> Tuple[List[List[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X)\n    (m, n) = X_np.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, Sigma, VT) = np.linalg.svd(X_np, full_matrices=False)\n    U_k = U[:, :k]\n    VT_k = VT[:k, :]\n    Sigma_k = np.diag(Sigma)[:k, :k]\n    X_hat = U_k @ Sigma_k @ VT_k\n    mse = np.mean((X_np - X_hat) ** 2)\n    X_hat_list = X_hat.tolist()\n    X_hat_rounded = [[round(n, 4) for n in row] for row in X_hat_list]\n    mse_rounded = round(mse, 4)\n    return (X_hat_rounded, mse_rounded)\nX = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk = 2"}
{"task_id": 28, "completion_id": 3, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n    \n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n        \n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error. Both are rounded to\n        four decimals. If `k` is invalid the function returns -1.\n    \"\"\"\n    (m, n) = (len(X), len(X[0]))\n    if k < 1 or k > min(m, n):\n        return -1\n    X_np = np.array(X)\n    (U, S, VT) = np.linalg.svd(X_np, full_matrices=False)\n    S[k:] = 0\n    X_approx = np.dot(U, np.dot(np.diag(S), VT))\n    mse = np.mean((X_np - X_approx) ** 2)\n    X_hat = X_approx.round(4).tolist()\n    mse = round(mse, 4)\n    return (X_hat, mse)\nX = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\nk = 2"}
{"task_id": 28, "completion_id": 4, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X)\n    (m, n) = X_np.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, S, Vt) = np.linalg.svd(X_np, full_matrices=False)\n    S[k:] = 0\n    X_hat = np.round(U @ np.diag(S) @ Vt, decimals=4)\n    mse = np.round(np.mean((X_np - X_hat) ** 2), decimals=4)\n    return (X_hat.tolist(), float(mse))\nX = [[1.5, 1.1], [2.3, 3.2]]\nk = 1"}
{"task_id": 28, "completion_id": 5, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    if k < 1 or k > min(len(X), len(X[0])):\n        return -1\n    X_np = np.array(X)\n    (U, S, VT) = np.linalg.svd(X_np, full_matrices=False)\n    S[k:] = 0\n    X_hat = np.dot(U, np.dot(np.diag(S), VT))\n    mse = np.mean(np.square(X_np - X_hat))\n    mse = np.round(mse, 4)\n    X_hat = [list(np.round(row, 4)) for row in X_hat]\n    return (X_hat, mse)\nX = [[1, 2], [3, 4], [5, 6]]\nk = 1"}
{"task_id": 28, "completion_id": 6, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef linear_autoencoder(X: List[List[float]], k: int) -> Tuple[List[List[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X = np.array(X)\n    (m, n) = X.shape\n    if not 1 <= k <= min(m, n):\n        return -1\n    (U, S, Vt) = np.linalg.svd(X, full_matrices=False)\n    X_hat = np.dot(U[:, :k] * S[:k], Vt[:k, :])\n    mse = np.square(np.subtract(X, X_hat)).mean()\n    mse = round(mse, 4)\n    X_hat = X_hat.tolist()\n    X_hat = [[round(val, 4) for val in row] for row in X_hat]\n    return (X_hat, mse)"}
{"task_id": 28, "completion_id": 7, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef linear_autoencoder(X: List[List[float]], k: int) -> Tuple[List[List[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X)\n    (m, n) = X_np.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, S, VT) = np.linalg.svd(X_np, full_matrices=False)\n    S_truncated = np.diag(S[:k])\n    U_reduced = U[:, :k]\n    VT_reduced = VT[:k, :]\n    X_hat_np = U_reduced @ S_truncated @ VT_reduced\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    mse_rounded = round(mse, 4)\n    X_hat = np.round(X_hat_np, decimals=4).tolist()\n    return (X_hat, mse_rounded)\nX = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk = 2"}
{"task_id": 28, "completion_id": 8, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef linear_autoencoder(X: List[List[float]], k: int) -> Tuple[List[List[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X)\n    if k < 1 or k > min(X_np.shape):\n        return -1\n    (U, singular_vals, VT) = np.linalg.svd(X_np, full_matrices=False)\n    Sigma_k = np.diag(singular_vals[:k])\n    U_k = U[:, :k]\n    VT_k = VT[:k, :]\n    X_hat_np = U_k @ Sigma_k @ VT_k\n    mse = np.square(X_np - X_hat_np).mean()\n    X_hat_np_rounded = np.round(X_hat_np, 4)\n    mse_rounded = np.round(mse, 4)\n    X_hat = X_hat_np_rounded.tolist()\n    return (X_hat, mse_rounded)\nX = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk = 2"}
{"task_id": 28, "completion_id": 9, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef linear_autoencoder(X: List[List[float]], k: int) -> Tuple[List[List[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    m = len(X)\n    n = len(X[0]) if m > 0 else 0\n    if k < 1 or k > min(m, n):\n        return -1\n    X_array = np.array(X)\n    (U, singular_values, VT) = np.linalg.svd(X_array, full_matrices=False)\n    Sigma = np.diag(singular_values)\n    U_k = U[:, :k]\n    Sigma_k = Sigma[:k, :k]\n    VT_k = VT[:k, :]\n    X_hat = U_k @ Sigma_k @ VT_k\n    mse = np.mean((X_array - X_hat) ** 2)\n    X_hat_list = np.round(X_hat, 4).tolist()\n    mse_rounded = round(mse, 4)\n    return (X_hat_list, mse_rounded)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    idx = np.argsort(x_train)\n    (x_train, y_train) = (x_train[idx], y_train[idx])\n    initial_prediction = np.mean(y_train)\n    predictions = np.full_like(y_train, initial_prediction)\n    residuals = y_train - predictions\n    stumps = []\n    while True:\n        candidate_splits = (x_train[:-1] + x_train[1:]) / 2.0\n        best_split = None\n        best_rss = float('inf')\n        best_model = None\n        best_residuals = None\n        for split in candidate_splits:\n            idx_left = x_train <= split\n            idx_right = x_train > split\n            c1 = np.mean(residuals[idx_left]) if any(idx_left) else 0\n            c2 = np.mean(residuals[idx_right]) if any(idx_right) else 0\n            predictions_new = np.where(idx_left, c1, c2) + predictions\n            rss = np.sum((y_train - predictions_new) ** 2)\n            if rss < best_rss:\n                best_split = split\n                best_rss = rss\n                best_model = (split, c1, c2)\n                best_residuals = y_train - predictions_new\n        if best_model is None or best_rss >= predictions.shape[0] * epsilon:\n            break\n        predictions += np.where(x_train <= best_split, best_model[1], best_model[2])\n        residuals = best_residuals\n        stumps.append(best_model)\n    prediction_query = initial_prediction\n    for (split, c1, c2) in stumps:\n        if x_query <= split:\n            prediction_query += c1\n        else:\n            prediction_query += c2\n    return round(prediction_query, 4)"}
{"task_id": 29, "completion_id": 1, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = np.array(x_train)[sorted_indices]\n    y_train_sorted = np.array(y_train)[sorted_indices]\n    split_points = (x_train_sorted[1:] + x_train_sorted[:-1]) / 2\n    residuals = np.copy(y_train_sorted)\n    predictions = np.zeros_like(x_train_sorted, dtype=float)\n    stumps = []\n    while True:\n        min_rss = float('inf')\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        for s in split_points:\n            left = x_train_sorted <= s\n            right = x_train_sorted > s\n            c1 = np.mean(residuals[left]) if np.sum(left) > 0 else 0\n            c2 = np.mean(residuals[right]) if np.sum(right) > 0 else 0\n            pred = np.where(x_train_sorted <= s, c1, c2)\n            rss = np.sum((residuals - pred) ** 2)\n            if rss < min_rss:\n                min_rss = rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n        if min_rss < epsilon:\n            break\n        stumps.append((best_split, best_c1, best_c2))\n        pred = np.where(x_train_sorted <= best_split, best_c1, best_c2)\n        predictions += pred\n        residuals = y_train_sorted - predictions\n    query_pred = 0\n    for (split, c1, c2) in stumps:\n        if x_query <= split:\n            query_pred += c1\n        else:\n            query_pred += c2\n    return round(query_pred, 4)\nx_train = [0, 1, 2, 3, 4, 5]\ny_train = [1, 2, 3, 2, 1, 2]\nx_query = 2.5"}
{"task_id": 29, "completion_id": 2, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = x_train[sorted_indices]\n    y_train_sorted = y_train[sorted_indices]\n    residuals = np.copy(y_train_sorted)\n    pred_y = 0\n    splits = (x_train_sorted[:-1] + x_train_sorted[1:]) / 2\n    while True:\n        best_rss = float('inf')\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        for s in splits:\n            c1 = residuals[x_train_sorted <= s].mean()\n            c2 = residuals[x_train_sorted > s].mean()\n            rss = np.sum((residuals - np.where(x_train_sorted <= s, c1, c2)) ** 2)\n            if rss < best_rss:\n                best_rss = rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n        if best_rss < epsilon:\n            break\n        residuals -= np.where(x_train_sorted <= best_split, best_c1, best_c2)\n        pred_y += best_c1 if x_query <= best_split else best_c2\n    return round(pred_y, 4)\nx_train = [1, 2, 3, 4, 5]\ny_train = [1, 4, 9, 16, 25]\nx_query = 3\nepsilon = 0.01"}
{"task_id": 29, "completion_id": 3, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    if not isinstance(x_train, np.ndarray):\n        x_train = np.array(x_train)\n    if not isinstance(y_train, np.ndarray):\n        y_train = np.array(y_train)\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    split_points = (x_train[:-1] + x_train[1:]) / 2.0\n    residuals = y_train.copy()\n    predictions = np.zeros_like(y_train)\n    stump_predictions = []\n    while True:\n        best_rss = np.inf\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        for s in split_points:\n            left_mask = x_train <= s\n            c1 = np.mean(residuals[left_mask])\n            c2 = np.mean(residuals[~left_mask])\n            pred_left = np.full_like(residuals, c1)\n            pred_right = np.full_like(residuals, c2)\n            pred_left[~left_mask] = c2\n            pred_right[left_mask] = c1\n            rss = np.sum((residuals - pred_left) ** 2)\n            if rss < best_rss:\n                best_rss = rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n        stump_predictions.append((best_split, best_c1, best_c2))\n        pred_left = np.full_like(residuals, best_c1)\n        pred_right = np.full_like(residuals, best_c2)\n        left_mask = x_train <= best_split\n        pred_left[~left_mask] = best_c2\n        pred_right[left_mask] = best_c1\n        predictions += pred_left\n        residuals = y_train - predictions\n        if best_rss < epsilon:\n            break\n    query_pred = np.sum([c1 if x_query <= s else c2 for (s, c1, c2) in stump_predictions])\n    return round(query_pred, 4)"}
{"task_id": 29, "completion_id": 4, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    (x_train, y_train) = zip(*sorted(zip(x_train, y_train)))\n    (x_train, y_train) = (np.array(x_train), np.array(y_train))\n    nan_indices = np.where(~np.isfinite(x_train))[0]\n    if nan_indices.size > 0:\n        x_train = np.delete(x_train, nan_indices)\n        y_train = np.delete(y_train, nan_indices)\n    residuals = np.copy(y_train)\n    stumps = []\n    while True:\n        candidate_splits = np.array([x_train[i] + 0.5 * (x_train[i + 1] - x_train[i]) for i in range(len(x_train) - 1)])\n        best_rss = np.inf\n        for split in candidate_splits:\n            mask_left = x_train <= split\n            c1 = np.mean(residuals[mask_left])\n            c2 = np.mean(residuals[~mask_left])\n            rss = np.sum((residuals[mask_left] - c1) ** 2) + np.sum((residuals[~mask_left] - c2) ** 2)\n            if rss < best_rss:\n                best_split = split\n                best_c1 = c1\n                best_c2 = c2\n                best_rss = rss\n        residuals[mask_left] -= best_c1\n        residuals[~mask_left] -= best_c2\n        stumps.append((best_split, best_c1, best_c2))\n        if best_rss < epsilon:\n            break\n    prediction = 0.0\n    for (split, c1, c2) in stumps:\n        if x_query <= split:\n            prediction += c1\n        else:\n            prediction += c2\n    return round(prediction, 4)\nx_train = [1, 2, 4, 5, 6]\ny_train = [2, 3, 5, 7, 9]\nx_query = 3"}
{"task_id": 29, "completion_id": 5, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:\n    1. Determine all possible split points (mid-points between consecutive *x_train* values).\n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.\n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.\n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    predictions = np.zeros_like(y_train)\n    residuals = y_train - predictions\n    ensemble = []\n    while True:\n        x_sorted = np.sort(x_train)\n        splits = (x_sorted[:-1] + x_sorted[1:]) / 2\n        best_rss = float('inf')\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        for s in splits:\n            mask1 = x_train <= s\n            mask2 = x_train > s\n            c1 = residuals[mask1].mean() if mask1.any() else 0\n            c2 = residuals[mask2].mean() if mask2.any() else 0\n            prediction = np.piecewise(residuals, [x_train <= s, x_train > s], [c1, c2])\n            rss = ((residuals - prediction) ** 2).sum()\n            if rss < best_rss:\n                best_rss = rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n        if best_rss < epsilon:\n            break\n        ensemble.append((best_split, best_c1, best_c2))\n        new_prediction = np.piecewise(predictions, [x_train <= best_split, x_train > best_split], [lambda p: p + best_c1, lambda p: p + best_c2], predictions)\n        predictions = new_prediction\n        residuals = y_train - predictions\n    prediction = 0\n    for (split, c1, c2) in ensemble:\n        if x_query <= split:\n            prediction += c1\n        else:\n            prediction += c2\n    return round(prediction, 4)\nx_train = [1, 2, 3, 4, 5]\ny_train = [1, 4, 9, 16, 25]\nx_query = 2.5"}
{"task_id": 29, "completion_id": 6, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    (x_train, y_train) = (np.array(x_train), np.array(y_train))\n    order = np.argsort(x_train)\n    (x_train, y_train) = (x_train[order], y_train[order])\n    n_samples = x_train.shape[0]\n    residuals = y_train\n    total_rss = np.inf\n    stumps = []\n    while total_rss > epsilon:\n        total_rss = np.sum(residuals ** 2)\n        split_candidates = (x_train[:-1] + x_train[1:]) / 2.0\n        rss_arr = []\n        for s in split_candidates:\n            idx_left = x_train <= s\n            idx_right = x_train > s\n            c1 = np.mean(residuals[idx_left]) if np.any(idx_left) else 0\n            c2 = np.mean(residuals[idx_right]) if np.any(idx_right) else 0\n            rss_left = np.sum((residuals[idx_left] - c1) ** 2)\n            rss_right = np.sum((residuals[idx_right] - c2) ** 2)\n            rss_arr.append(rss_left + rss_right)\n        best_split_idx = np.argmin(rss_arr)\n        s_best = split_candidates[best_split_idx]\n        c1 = np.mean(residuals[x_train <= s_best]) if np.any(x_train <= s_best) else 0\n        c2 = np.mean(residuals[x_train > s_best]) if np.any(x_train > s_best) else 0\n        stumps.append((s_best, c1, c2))\n        residuals -= c1 * (x_train <= s_best) + c2 * (x_train > s_best)\n    prediction = sum((c1 if x_query <= s else c2 for (s, c1, c2) in stumps))\n    return round(prediction, 4)\nx_train = [0.4, 2.6, 1.2, 3.4, 2.0, 3.8, 2.8, 3.1, 4.1, 5.0]\ny_train = [0.2, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.97, 0.99, 1.0]\nx_query = 3.0\nepsilon = 0.01"}
{"task_id": 29, "completion_id": 7, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    n_samples = x_train.size\n    sort_indices = np.argsort(x_train)\n    x_train = x_train[sort_indices]\n    y_train = y_train[sort_indices]\n    residuals = np.copy(y_train)\n    predictions = np.zeros_like(x_train)\n    split_points = (x_train[1:] + x_train[:-1]) / 2\n    while True:\n        best_rss = float('inf')\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        for s in split_points:\n            c1 = np.mean(residuals[x_train <= s])\n            c2 = np.mean(residuals[x_train > s])\n            rss = np.sum((residuals - (c1 * (x_train <= s) + c2 * (x_train > s))) ** 2)\n            if rss < best_rss:\n                best_rss = rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n        if best_rss < epsilon:\n            break\n        predictions += best_c1 * (x_train <= best_split) + best_c2 * (x_train > best_split)\n        residuals = y_train - predictions\n    query_prediction = predictions[0] + (best_c1 if x_query <= best_split else best_c2)\n    for (i, s) in enumerate(split_points[:-1]):\n        c1 = np.mean(residuals[x_train <= s])\n        c2 = np.mean(residuals[x_train > s])\n        if x_query <= s:\n            query_prediction += c1\n        else:\n            query_prediction += c2\n    return round(query_prediction, 4)"}
{"task_id": 29, "completion_id": 8, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    sorted_indices = np.argsort(x_train)\n    sorted_x = np.array(x_train)[sorted_indices]\n    sorted_y = np.array(y_train)[sorted_indices]\n    mid_points = (sorted_x[:-1] + sorted_x[1:]) / 2\n    prediction = np.mean(sorted_y)\n    residuals = sorted_y - prediction\n    rss = np.sum(residuals ** 2)\n    stumps = []\n    while rss > epsilon:\n        min_rss = float('inf')\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        for split in mid_points:\n            left_residuals = residuals[sorted_x <= split]\n            c1 = np.mean(left_residuals) if len(left_residuals) > 0 else 0\n            right_residuals = residuals[sorted_x > split]\n            c2 = np.mean(right_residuals) if len(right_residuals) > 0 else 0\n            residuals_after_split = [c1 if x <= split else c2 for x in sorted_x]\n            rss_after_split = np.sum((residuals - residuals_after_split) ** 2)\n            if rss_after_split < min_rss:\n                min_rss = rss_after_split\n                (best_split, best_c1, best_c2) = (split, c1, c2)\n        stumps.append((best_split, best_c1, best_c2))\n        new_residuals = [best_c1 if x <= best_split else best_c2 for x in sorted_x]\n        residuals -= new_residuals\n        rss = np.sum(residuals ** 2)\n    query_predict = prediction\n    for (split, c1, c2) in stumps:\n        if x_query <= split:\n            query_predict += c1\n        else:\n            query_predict += c2\n    return round(query_predict, 4)"}
{"task_id": 29, "completion_id": 9, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    sorted_indices = np.argsort(x_train)\n    x_train = np.array(x_train)[sorted_indices]\n    y_train = np.array(y_train)[sorted_indices]\n    candidate_splits = (x_train[:-1] + x_train[1:]) / 2.0\n    f_pred = np.zeros_like(y_train)\n    residuals = y_train - f_pred\n    rss = np.sum(residuals ** 2)\n    stumps = []\n    while rss > epsilon:\n        best_rss = float('inf')\n        best_stump = None\n        for split in candidate_splits:\n            c1 = np.mean(residuals[x_train <= split])\n            c2 = np.mean(residuals[x_train > split])\n            rss_stump = np.sum((residuals - (c1 * (x_train <= split) + c2 * (x_train > split))) ** 2)\n            if rss_stump < best_rss:\n                best_rss = rss_stump\n                best_stump = (split, c1, c2)\n        stumps.append(best_stump)\n        f_pred += best_stump[1] * (x_train <= best_stump[0]) + best_stump[2] * (x_train > best_stump[0])\n        residuals = y_train - f_pred\n        rss = np.sum(residuals ** 2)\n    query_pred = sum((c1 if x_query <= s else c2 for (s, c1, c2) in stumps))\n    return round(query_pred, 4)\nx_train = [1.5, 2.1, 2.3, 2.8, 3.2, 4.5, 5.0]\ny_train = [1.0, 1.2, 1.5, 2.0, 3.0, 3.5, 4.0]\nx_query = 3.0\nepsilon = 0.01"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generates a tensor filled with 0.0s and 1.0s based on the specified\n    shape and sparsity (probability of generating a 1.0). Optionally, a seed can be specified for reproducibility.\n\n    Parameters:\n    shape (tuple of int): The desired shape of the tensor.\n    sparsity (float): The probability of an entry being 1.0. Must be in the range [0,1].\n    seed (int, optional): Seed for the random number generator to ensure reproducibility.\n\n    Returns:\n    numpy.ndarray: A tensor of the specified shape, with values 0.0 or 1.0 as per the sparsity.\n                    Returns -1 if sparsity is outside the range [0,1].\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    rand_tensor = np.random.rand(*shape)\n    binary_tensor = (rand_tensor < sparsity).astype(float)\n    return binary_tensor\nshape = (2, 3)\nsparsity = 0.3\nseed = 42"}
{"task_id": 34, "completion_id": 1, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray | int:\n    \"\"\"\n    Generates a binary NumPy tensor filled with 1.0s and 0.0s.\n\n    Parameters:\n    - shape: tuple[int, ...] - the shape of the desired tensor.\n    - sparsity: float - probability of an entry being 1.0, within [0, 1].\n    - seed: int or None - seed for np.random.seed(seed) to ensure reproducibility.\n\n    Returns:\n    - A numpy.ndarray with dtype=float, containing only 0.0 and 1.0.\n    - -1 if sparsity is outside the [0, 1] range.\n    \"\"\"\n    if sparsity < 0 or sparsity > 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_tensor = np.random.rand(*shape)\n    binary_tensor = (random_tensor >= 1 - sparsity).astype(float)\n    return binary_tensor\nshape = (2, 3)\nsparsity = 0.3\nseed = 42"}
{"task_id": 34, "completion_id": 2, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray | int:\n    \"\"\"\n    Generates a tensor filled with 0.0s and 1.0s with given shape and sparsity.\n    \n    Parameters:\n    - shape: A tuple specifying the shape of the returned tensor.\n    - sparsity: A float in the interval [0, 1] representing the probability of an entry being 1.0.\n    - seed: An optional integer. If provided, used to seed the numpy random generator for reproducibility.\n    \n    Returns:\n    - A numpy.ndarray of dtype float containing 0.0s and 1.0s.\n    - Returns -1 if sparsity is outside the interval [0, 1].\n    \n    Example:\n    >>> random_binary_tensor((2, 3), sparsity=0.3, seed=42)\n    array([[0., 1., 1.],\n           [0., 0., 0.]])\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    threshold = 1 - sparsity\n    random_numbers = np.random.rand(*shape)\n    binary_tensor = (random_numbers >= threshold).astype(float)\n    return binary_tensor"}
{"task_id": 34, "completion_id": 3, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generates a NumPy tensor of the given shape filled with 0.0s and 1.0s.\n    The value of 1.0 is determined by the sparsity probability.\n    \n    Parameters:\n    - shape: tuple[int, ...] - the desired shape of the tensor.\n    - sparsity: float - the probability of generating a 1.0 in the tensor.\n                        Should be between 0.0 and 1.0, inclusive.\n    - seed: int or None - seed value for the random generator for reproducibility.\n                          If None, the random generator is not seeded.\n    \n    Returns:\n    A NumPy ndarray of the specified shape and sparsity, containing only 0.0s and 1.0s.\n    If sparsity is not in the range [0, 1], returns -1.\n    \n    Examples:\n    random_binary_tensor((2, 3), 0.3, 42) might return:\n    np.array([[0.0, 1.0, 1.0], [0.0, 0.0, 0.0]], dtype=float)\n    \"\"\"\n    if sparsity < 0 or sparsity > 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    return (np.random.rand(*shape) < sparsity).astype(float)\nsparsity = 0.3\nseed = 42"}
{"task_id": 34, "completion_id": 4, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray:\n    \"\"\"\n    Generates a random binary tensor based on the given shape and sparsity.\n    The sparsity parameter defines the probability for an entry to be 1.0.\n\n    :param shape: The shape of the tensor to be generated.\n    :param sparsity: The probability of a 1.0 occurrence in the tensor (must be in [0, 1]).\n    :param seed: An optional seed for the random number generator to ensure reproducibility.\n    :return: A numpy.ndarray of the requested shape and sparsity, with 0.0 and 1.0 values only.\n             If sparsity is outside the legal range, returns -1.\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return np.array(-1)\n    if seed is not None:\n        np.random.seed(seed)\n    threshold_array = np.random.rand(*shape)\n    binary_tensor = (threshold_array < 1 - sparsity).astype(float)\n    return binary_tensor\nshape = (2, 3)\nsparsity = 0.3\nseed = 42"}
{"task_id": 34, "completion_id": 5, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray | int:\n    \"\"\"\n    Generates a random binary tensor with the specified shape and sparsity level.\n    \n    Parameters:\n    - shape: tuple of int specifying the desired shape of the output tensor.\n    - sparsity: float in [0, 1] indicating the proportion of entries that should be 1.0.\n      Default is 0.5.\n    - seed: int or None to seed the random number generator for reproducibility.\n      Default is None.\n    \n    Returns:\n    - A numpy.ndarray of the specified shape, with dtype float, containing 0.0s and 1.0s.\n    - If sparsity is outside the [0, 1] interval, returns -1.\n    \"\"\"\n    if sparsity < 0 or sparsity > 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_tensor = np.random.rand(*shape)\n    binary_tensor = (random_tensor < sparsity).astype(float)\n    return binary_tensor"}
{"task_id": 34, "completion_id": 6, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray | int:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s according to the specified shape and sparsity.\n    \n    Parameters:\n    - shape (tuple of ints): The desired shape of the output tensor.\n    - sparsity (float): The probability (in [0, 1]) of generating a 1.0. Default is 0.5.\n    - seed (int, optional): The seed for the random number generator. If provided, results are deterministic.\n    \n    Returns:\n    np.ndarray: A tensor of the specified shape and sparsity.\n    int: Returns -1 if the sparsity value is outside the [0,1] interval.\n    \"\"\"\n    if not 0.0 <= sparsity <= 1.0:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_tensor = np.random.rand(*shape)\n    binary_tensor = (random_tensor < sparsity).astype(float)\n    return binary_tensor"}
{"task_id": 34, "completion_id": 7, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray | int:\n    \"\"\"\n    Generate a random binary tensor with specified shape and sparsity.\n    \n    Parameters:\n    - shape (tuple): The shape of the tensor to generate.\n    - sparsity (float): The probability of a 1.0 occurring in the tensor.\n    - seed (int, optional): Seed for the random number generator for reproducibility.\n    \n    Returns:\n    - numpy.ndarray: A NumPy array filled with 0.0s and 1.0s based on the sparsity.\n      If sparsity is outside of [0, 1], returns -1.\n    \"\"\"\n    if not 0.0 <= sparsity <= 1.0:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_tensor = np.random.rand(*shape)\n    binary_tensor = (random_tensor >= 1 - sparsity).astype(float)\n    return binary_tensor"}
{"task_id": 34, "completion_id": 8, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray | int:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s according to the specified shape and sparsity.\n    \n    :param shape: A tuple specifying the tensor's shape.\n    :param sparsity: Probability (in [0, 1]) of generating a 1.0 in an entry.\n    :param seed: An optional seed for the random number generator to achieve reproducibility.\n    :return: numpy.ndarray with dtype float32 containing 0.0s and 1.0s, \n             or -1 if sparsity is not in the range [0, 1].\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_array = np.random.rand(*shape)\n    binary_tensor = (random_array <= 1 - sparsity).astype(np.float32)\n    return binary_tensor"}
{"task_id": 34, "completion_id": 9, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray | int:\n    \"\"\"\n    Generate a random binary tensor using the given shape, sparsity, and seed.\n    \n    Parameters:\n    - shape (tuple[int, ...]): The shape of the output tensor.\n    - sparsity (float): The probability of generating a 1.0 value (must be in [0,1]).\n    - seed (int | None): The seed for random number generation for reproducibility.\n    \n    Returns:\n    - np.ndarray: A NumPy array of the specified shape, dtype float, with values 0.0 or 1.0.\n    - int: -1 if sparsity is outside the legal range.\n    \n    Examples:\n    >>> random_binary_tensor((2,3), sparsity=0.3, seed=42)\n    array([[0., 1., 1.],\n           [0., 0., 0.]])\n    >>> random_binary_tensor((2,3), sparsity=1.1)\n    -1\n    \"\"\"\n    if not 0.0 <= sparsity <= 1.0:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    threshold = 1 - sparsity\n    return (np.random.rand(*shape) >= threshold).astype(np.float64)"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    kth = n_samples // 2\n    pivot = np.argpartition(data[:, d], kth=kth)[kth]\n    pivot_value = data[pivot, d]\n    left = sorted([i for i in range(n_samples) if data[i, d] < pivot_value])\n    right = sorted([i for i in range(n_samples) if data[i, d] > pivot_value])\n    return (pivot, left, right)\ndata = np.array([[5, 3], [10, 15], [1, 2], [6, 1], [3, 4]])"}
{"task_id": 39, "completion_id": 1, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_i = n_samples // 2\n    partitioned_indices = np.argpartition(data[:, d], kth=median_i)\n    median_index = partitioned_indices[median_i]\n    pivot = median_index\n    left_indices = partitioned_indices[:median_i]\n    right_indices = partitioned_indices[median_i + 1:]\n    left = sorted(left_indices)\n    right = sorted(right_indices)\n    return (pivot, left, right)\ndata = np.array([[1, 5], [2, 3], [1, 8], [4, 0], [7, 1], [9, 10]])\nd = 1"}
{"task_id": 39, "completion_id": 2, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    partition_index = np.argpartition(data[:, d], n_samples // 2)\n    pivot = partition_index[n_samples // 2]\n    partitioned_indices = partition_index[partition_index.argsort()]\n    left = partitioned_indices[partitioned_indices < n_samples // 2].tolist()\n    right = partitioned_indices[partitioned_indices > n_samples // 2].tolist()\n    is_pivot_smaller_or_equal_to_left = data[pivot, d] <= data[left[-1], d]\n    is_pivot_greater_than_right = data[pivot, d] > data[right[0], d]\n    if is_pivot_smaller_or_equal_to_left:\n        left.remove(left[-1])\n    elif not is_pivot_greater_than_right:\n        right.remove(right[0])\n    return (pivot, sorted(left), sorted(right))\nn = 1000\ndata = np.random.randn(n, 2)\nd = 1"}
{"task_id": 39, "completion_id": 3, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    median_pos = np.argpartition(data[:, d], len(data) // 2, axis=0)[len(data) // 2]\n    pivot = median_pos\n    if len(data) % 2 == 0:\n        potential_medians = np.sort(data[median_pos - 1:median_pos + 1, d])\n        if data[median_pos, d] == potential_medians[0]:\n            pivot = median_pos - 1\n        else:\n            pivot = median_pos\n    pivot_value = data[pivot, d]\n    left = np.where(data[:, d] < pivot_value)[0]\n    right = np.where(data[:, d] > pivot_value)[0]\n    return (pivot, sorted(left.tolist()), sorted(right.tolist()))"}
{"task_id": 39, "completion_id": 4, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    median_index = data.shape[0] // 2\n    partition_indices = np.argpartition(data[:, d], median_index)\n    pivot = partition_indices[median_index]\n    left = partition_indices[data[partition_indices, d] < data[pivot, d]].tolist()\n    right = partition_indices[data[partition_indices, d] > data[pivot, d]].tolist()\n    left.sort()\n    right.sort()\n    return (pivot, left, right)\ndata = np.array([[3, 4], [1, 2], [5, 0], [2, 3], [4, 1]])\nd = 0"}
{"task_id": 39, "completion_id": 5, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.        \n    \"\"\"\n    n_samples = data.shape[0]\n    median_pos = np.argpartition(data[:, d], n_samples // 2)[n_samples // 2]\n    left_indices = []\n    right_indices = []\n    for i in range(n_samples):\n        if i == median_pos:\n            pivot = i\n            continue\n        if data[i, d] < data[median_pos, d]:\n            left_indices.append(i)\n        else:\n            right_indices.append(i)\n    return (pivot, sorted(left_indices), sorted(right_indices))\nn = 10\ndata = rng.random((n, 2))\nd = 1"}
{"task_id": 39, "completion_id": 6, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    median_idx = np.argpartition(data[:, d], len(data) // 2)[len(data) // 2]\n    pivot = median_idx\n    left_indices = data[:, d] < data[median_idx, d]\n    right_indices = data[:, d] > data[median_idx, d]\n    left = sorted(np.where(left_indices)[0])\n    right = sorted(np.where(right_indices)[0])\n    return (pivot, left, right)"}
{"task_id": 39, "completion_id": 7, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_index = n_samples // 2\n    partitioned_indices = np.argpartition(data[:, d], median_index)\n    median_row_index = partitioned_indices[median_index]\n    pivot = median_row_index\n    left_indices = partitioned_indices[:median_index][data[partitioned_indices[:median_index], d] < data[pivot, d]].tolist()\n    right_indices = partitioned_indices[median_index + 1:][data[partitioned_indices[median_index + 1:], d] > data[pivot, d]].tolist()\n    return (pivot, sorted(left_indices), sorted(right_indices))"}
{"task_id": 39, "completion_id": 8, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    median_idx = np.argpartition(data[:, d], len(data) // 2)[len(data) // 2]\n    pivot = median_idx\n    left_right_partition = np.argpartition(data[:, d], len(data) // 2)\n    pivot_value = data[median_idx, d]\n    left = [idx for idx in left_right_partition if data[idx, d] < pivot_value]\n    right = [idx for idx in left_right_partition if data[idx, d] > pivot_value]\n    return (pivot, sorted(left), sorted(right))\ndata = np.random.rand(n_samples, n_features)"}
{"task_id": 39, "completion_id": 9, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    median_index = np.argpartition(data[:, d], len(data) // 2)[len(data) // 2]\n    median_value = data[median_index, d]\n    row_indices = np.arange(len(data))\n    left_indices = row_indices[data[:, d] < median_value]\n    right_indices = row_indices[data[:, d] > median_value]\n    left_indices = sorted(left_indices)\n    right_indices = sorted(right_indices)\n    return (median_index, left_indices, right_indices)\ndata = np.array([[1, 3], [2, 2], [3, 1], [4, 4], [5, 5]])\nd = 1"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input array must be one-dimensional'\n    assert stride >= 1, 'Stride must be a positive integer'\n    assert len(x) >= frame_width, 'Length of the input signal must be greater than or equal to frame_width'\n    n_samples = len(x)\n    n_frames = (n_samples - frame_width) // stride + 1\n    shape = (n_frames, frame_width)\n    strides = (stride * x.itemsize, x.itemsize)\n    framed_signal = as_strided(x, shape=shape, strides=strides)\n    if not writeable:\n        framed_signal.setflags(write=False)\n    return framed_signal"}
{"task_id": 40, "completion_id": 1, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'The input signal must be one-dimensional.'\n    assert stride >= 1, 'The stride must be a positive integer.'\n    assert len(x) >= frame_width, 'The length of the input signal must be greater than or equal to frame_width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    new_shape = (n_frames, frame_width)\n    new_strides = (x.itemsize * stride, x.itemsize)\n    frames = as_strided(x, shape=new_shape, strides=new_strides)\n    frames.flags.writeable = writeable and x.flags.writeable\n    return frames\nx = np.arange(25)\nframe_width = 5\nstride = 2\nframes = to_frames(x, frame_width, stride, writeable=True)"}
{"task_id": 40, "completion_id": 2, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert len(x.shape) == 1, \"Input array 'x' must be one-dimensional.\"\n    assert stride > 0, 'Stride must be a positive integer.'\n    assert len(x) >= frame_width, \"Length of 'x' must be >= frame_width.\"\n    n_frames = (len(x) - frame_width) // stride + 1\n    new_shape = (n_frames, frame_width)\n    new_strides = (stride * x.itemsize, x.itemsize)\n    framed_array = as_strided(x, shape=new_shape, strides=new_strides)\n    if not writeable:\n        framed_array.setflags(write=False)\n    else:\n        framed_array.setflags(write=x.flags.write)\n    return framed_array"}
{"task_id": 40, "completion_id": 3, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input x must be one-dimensional.'\n    assert stride >= 1, 'The stride value must be a positive integer.'\n    assert len(x) >= frame_width, 'The signal length must be at least the frame width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    view_shape = (n_frames, frame_width)\n    strides = (x.strides[0] * stride, x.strides[0])\n    x_view = as_strided(x, shape=view_shape, strides=strides, subok=True)\n    x_view.setflags(write=writeable)\n    return x_view\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7], dtype=np.float32)\nframe_width = 3\nstride = 2"}
{"task_id": 40, "completion_id": 4, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input array must be one-dimensional.'\n    assert stride >= 1, 'Stride must be at least 1.'\n    assert len(x) >= frame_width, 'Input signal must be at least as long as frame width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    frame_strides = (x.itemsize * stride, x.itemsize)\n    framed_signal = as_strided(x, shape=(n_frames, frame_width), strides=frame_strides)\n    framed_signal.setflags(write=writeable)\n    return framed_signal\nsignal = np.array([0, 1, 2, 3, 4, 5, 6, 7], dtype=np.float32)\nframe_width = 3\nstride = 1\nwriteable = False\nframed_signal = to_frames(signal, frame_width, stride, writeable)"}
{"task_id": 40, "completion_id": 5, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'The input signal must be one-dimensional.'\n    assert stride >= 1, 'The stride must be a positive integer.'\n    assert len(x) >= frame_width, 'The length of the signal must be at least as long as the frame width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    if not writeable:\n        x.flags.writeable = False\n    result = as_strided(x, shape=(n_frames, frame_width), strides=(stride * x.itemsize, x.itemsize))\n    return result"}
{"task_id": 40, "completion_id": 6, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'The input array must be one-dimensional.'\n    assert stride >= 1, 'The stride must be a positive integer.'\n    assert len(x) >= frame_width, 'The length of the input array must be at least the frame width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    if (len(x) - frame_width) % stride != 0:\n        x = x[:n_frames * stride + frame_width - 1]\n    x_strides = x.strides[0]\n    frame_strides = (x_strides * stride, x_strides)\n    framed_x = as_strided(x, shape=(n_frames, frame_width), strides=frame_strides)\n    framed_x.setflags(write=writeable)\n    return framed_x\nx = np.linspace(0, 9, 10)\nframe_width = 4\nstride = 2"}
{"task_id": 40, "completion_id": 7, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input array x must be one-dimensional.'\n    assert stride >= 1, 'Stride must be at least 1.'\n    assert len(x) >= frame_width, 'The length of x must be greater than or equal to frame_width.'\n    elem_size = x.itemsize\n    n_frames = (len(x) - frame_width) // stride + 1\n    new_shape = (n_frames, frame_width)\n    new_strides = (stride * elem_size, elem_size)\n    frames_view = as_strided(x[:len(x) - (len(x) - frame_width) % stride], shape=new_shape, strides=new_strides)\n    frames_view.setflags(write=writeable)\n    return frames_view"}
{"task_id": 40, "completion_id": 8, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input array must be one-dimensional'\n    assert stride >= 1, 'Stride must be a positive integer'\n    assert len(x) >= frame_width, 'Length of x must be greater than or equal to frame_width'\n    x_size = len(x)\n    n_frames = (x_size - frame_width) // stride + 1\n    output_shape = (n_frames, frame_width)\n    writeable = writeable and x.flags.writeable\n    strides = (x.strides[0] * stride, x.strides[0])\n    framed_x = as_strided(x, shape=output_shape, strides=strides, writeable=writeable)\n    return framed_x"}
{"task_id": 40, "completion_id": 9, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input array must be 1-Dimensional'\n    assert stride >= 1, 'Stride must be a positive integer'\n    assert len(x) >= frame_width, 'Input array length must be greater than or equal to frame_width'\n    n_frames = (len(x) - frame_width) // stride + 1\n    byte_stride_x = x.strides[0]\n    byte_strides = (stride * byte_stride_x, byte_stride_x)\n    framed_signal = as_strided(x, shape=(n_frames, frame_width), strides=byte_strides)\n    if not writeable:\n        framed_signal.setflags(write=False)\n    return framed_signal\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nframe_width = 3\nstride = 2"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    if not isinstance(X, np.ndarray) or len(X.shape) != 2 or (not np.all((X >= 0) & (X <= 1))):\n        return False\n    row_sums = X.sum(axis=1)\n    return np.allclose(row_sums, np.ones(X.shape[0]), atol=1e-08)"}
{"task_id": 48, "completion_id": 1, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | np.ndarray) -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X) if not isinstance(X, np.ndarray) else X\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    row_sums = X.sum(axis=1)\n    return np.allclose(row_sums, 1, atol=1e-08)"}
{"task_id": 48, "completion_id": 2, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if np.any(X < 0) or np.any(X > 1):\n        return False\n    if not np.allclose(np.sum(X, axis=1), 1, atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 3, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n    \n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n    \n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n    \n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    row_sums = np.sum(X, axis=1)\n    return np.allclose(row_sums, 1, atol=1e-08)"}
{"task_id": 48, "completion_id": 4, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if not np.all(0 <= X) or not np.all(X <= 1):\n        return False\n    row_sums = X.sum(axis=1)\n    return np.allclose(row_sums, np.ones(row_sums.shape), atol=1e-08)"}
{"task_id": 48, "completion_id": 5, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if np.any(X < 0) or np.any(X > 1):\n        return False\n    row_sums = np.sum(X, axis=1)\n    return np.allclose(row_sums, np.ones(row_sums.shape), atol=1e-08)"}
{"task_id": 48, "completion_id": 6, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    if not np.allclose(X.sum(axis=1), np.ones(X.shape[0]), atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 7, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, 1, atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 8, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    try:\n        if isinstance(X, list):\n            X = np.array(X)\n        if X.ndim != 2:\n            return False\n        if not np.all(0 <= X) or not np.all(X <= 1):\n            return False\n        if not np.allclose(np.sum(X, axis=1), 1, atol=1e-08):\n            return False\n        return True\n    except:\n        return False"}
{"task_id": 48, "completion_id": 9, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    row_sums = X.sum(axis=1)\n    if not np.allclose(row_sums, 1, atol=1e-08):\n        return False\n    return True"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"\n    Train a linear regression model with RMSprop.\n\n    :param X: Feature matrix.\n    :param y: Target vector.\n    :param epsilon: Norm threshold for early stopping.\n    :param max_iter: Maximum number of iterations.\n    :param eta: Learning rate.\n    :param rho: Decay factor for the squared gradient running average.\n    :param batch_size: Mini-batch size.\n    :param eps_station: Small constant for numerical stability.\n    :return: Learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    (n_full_batches, remainder) = divmod(n, batch_size)\n    for iteration in range(max_iter):\n        for batch in range(n_full_batches):\n            (start, end) = (batch * batch_size, (batch + 1) * batch_size)\n            (X_batch, y_batch) = (X[start:end, :], y[start:end])\n            gradient = X_batch.T.dot(X_batch.dot(w) - y_batch) / batch_size\n            s = rho * s + (1 - rho) * gradient ** 2\n            w = w - eta * gradient / (np.sqrt(s) + eps_station)\n        if 0 < remainder:\n            (X_batch, y_batch) = (X[-remainder:, :], y[-remainder:])\n            gradient = X_batch.T.dot(X_batch.dot(w) - y_batch) / remainder\n            s = rho * s + (1 - rho) * gradient ** 2\n            w = w - eta * gradient / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(gradient) < epsilon:\n            break\n    return [round(val, 4) for val in w]"}
{"task_id": 55, "completion_id": 1, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    if n < batch_size:\n        batch_size = n\n    for iteration in range(max_iter):\n        indices = np.random.permutation(n)\n        X_shuffled = X[indices]\n        y_shuffled = y[indices]\n        for batch_start in range(0, n, batch_size):\n            batch_end = min(batch_start + batch_size, n)\n            X_batch = X_shuffled[batch_start:batch_end]\n            y_batch = y_shuffled[batch_start:batch_end]\n            predictions = X_batch @ w\n            error = predictions - y_batch\n            gradient = X_batch.T @ error / len(y_batch)\n            s = rho * s + (1 - rho) * gradient ** 2\n            update = eta * gradient / (np.sqrt(s) + eps_station)\n            w -= update\n        if np.linalg.norm(gradient) < epsilon:\n            break\n    return [round(val, 4) for val in w.tolist()]"}
{"task_id": 55, "completion_id": 2, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    if n_samples < batch_size:\n        batch_size = n_samples\n    w = np.zeros(n_features)\n    s = np.zeros(n_features)\n    for _ in range(max_iter):\n        for i in range(0, n_samples, batch_size):\n            batch_end = min(i + batch_size, n_samples)\n            X_batch = X[i:batch_end]\n            y_batch = y[i:batch_end]\n            prediction = X_batch @ w\n            error = prediction - y_batch\n            grad = X_batch.T @ error / n_samples\n            s = rho * s + (1 - rho) * grad ** 2\n            w -= eta * grad / (np.sqrt(s) + eps_station)\n            if np.linalg.norm(grad) < epsilon:\n                break\n        if np.linalg.norm(grad) < epsilon:\n            break\n    w_rounded = [round(weight, 4) for weight in w]\n    return w_rounded"}
{"task_id": 55, "completion_id": 3, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    n_batches = (n + batch_size - 1) // batch_size\n    for _ in range(max_iter):\n        for batch_idx in range(n_batches):\n            start_idx = batch_idx * batch_size\n            end_idx = min(start_idx + batch_size, n)\n            X_batch = X[start_idx:end_idx]\n            y_batch = y[start_idx:end_idx]\n            g = 1 / n * X_batch.T @ (X_batch @ w - y_batch)\n            s = rho * s + (1 - rho) * g ** 2\n            w = w - eta * g / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(g) < epsilon:\n            break\n    return [round(wi, 4) for wi in w]"}
{"task_id": 55, "completion_id": 4, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"\n    Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    w = np.zeros(n_features)\n    s = np.zeros_like(w)\n    for _ in range(max_iter):\n        for batch_start in range(0, n_samples, batch_size):\n            batch_end = batch_start + batch_size\n            X_batch = X[batch_start:batch_end]\n            y_batch = y[batch_start:batch_end]\n            y_pred = np.dot(X_batch, w)\n            g = 1 / n_samples * np.dot(X_batch.T, y_pred - y_batch)\n            s = rho * s + (1 - rho) * np.square(g)\n            w -= eta * g / (np.sqrt(s) + eps_station)\n            if np.linalg.norm(g) < epsilon:\n                return np.round(w.tolist(), 4)\n    return np.round(w.tolist(), 4)\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([5, 7, 9, 11])"}
{"task_id": 55, "completion_id": 5, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    w = np.zeros(n_features)\n    s = np.zeros(n_features)\n    for _ in range(max_iter):\n        batch_indices = np.random.choice(n_samples, min(batch_size, n_samples), replace=False)\n        X_batch = X[batch_indices]\n        y_batch = y[batch_indices]\n        error = X_batch.dot(w) - y_batch\n        g = 1 / len(batch_indices) * X_batch.T.dot(error)\n        s = rho * s + (1 - rho) * g ** 2\n        w -= eta * g / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(g) < epsilon:\n            break\n    return list(np.round(w, 4))"}
{"task_id": 55, "completion_id": 6, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    num_batches = (n - 1) // batch_size + 1\n    for _ in range(max_iter):\n        for batch in range(num_batches):\n            start = batch * batch_size\n            end = start + batch_size\n            X_batch = X[start:end]\n            y_batch = y[start:end]\n            n_batch = X_batch.shape[0]\n            if n_batch > 0:\n                grad = 1 / n_batch * X_batch.T @ (X_batch @ w - y_batch)\n                s = rho * s + (1 - rho) * grad ** 2\n                w = w - eta * grad / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(grad) < epsilon:\n            break\n    return np.round(w, decimals=4).tolist()\nX = np.random.rand(100, 5)\ny = np.dot(X, np.random.rand(5, 1)).flatten()"}
{"task_id": 55, "completion_id": 7, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n    \n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n    \n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for iter in range(max_iter):\n        for i in range(0, n, batch_size):\n            X_batch = X[i:i + batch_size]\n            y_batch = y[i:i + batch_size]\n            batch_gradient = 1 / X_batch.shape[0] * X_batch.T @ (X_batch @ w - y_batch)\n            s = rho * s + (1 - rho) * batch_gradient ** 2\n            w -= eta * batch_gradient / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(batch_gradient) < epsilon:\n            break\n    return [round(val, 4) for val in w]"}
{"task_id": 55, "completion_id": 8, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    (n_samples, n_features) = X.shape\n    w = np.zeros(n_features)\n    s = np.zeros(n_features)\n    for _ in range(max_iter):\n        if batch_size < n_samples:\n            indices = np.random.permutation(n_samples)\n            for start in range(0, n_samples, batch_size):\n                end = min(start + batch_size, n_samples)\n                batch_indices = indices[start:end]\n                (X_batch, y_batch) = (X[batch_indices], y[batch_indices])\n                g = 1 / batch_size * X_batch.T @ (X_batch @ w - y_batch)\n        else:\n            g = 1 / n_samples * X.T @ (X @ w - y)\n        s = rho * s + (1 - rho) * g ** 2\n        w -= eta * g / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(g) < epsilon:\n            break\n    return list(np.round(w, 4))\nX = np.random.rand(100, 5)\ny = np.random.rand(100)"}
{"task_id": 55, "completion_id": 9, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    w = np.zeros(n_features)\n    s = np.zeros(n_features)\n    for i in range(max_iter):\n        if n_samples > batch_size:\n            indices = np.random.permutation(n_samples)\n            X = X[indices]\n            y = y[indices]\n        for start in range(0, n_samples, batch_size):\n            end = min(start + batch_size, n_samples)\n            X_batch = X[start:end]\n            y_batch = y[start:end]\n            n_batch = X_batch.shape[0]\n            g = 1 / n_batch * X_batch.T @ (X_batch @ w - y_batch)\n            s = rho * s + (1 - rho) * g ** 2\n            w -= eta * g / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(g) < epsilon:\n            break\n    return [round(w_j, 4) for w_j in w]"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute the SoftPlus function or its gradient with numerical stability.\n    \n    If deriv is False, it computes SoftPlus(x) = log(1 + e^x) for each value in x.\n    If deriv is True, it computes the derivative which is the logistic function.\n    \n    Args:\n        x: A scalar, list, or numpy array.\n        deriv: Boolean flag indicating whether to return the gradient (default is False).\n    \n    Returns:\n        A list or float with the SoftPlus values or their gradients, rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x)\n    if not deriv:\n        high_threshold_mask = x > 18\n        low_threshold_mask = x <= 18\n        res = np.zeros_like(x, dtype=float)\n        res[high_threshold_mask] = x[high_threshold_mask]\n        res[low_threshold_mask] = np.log1p(np.exp(x[low_threshold_mask]))\n        return res.round(4).tolist() if isinstance(x, np.ndarray) else res.round(4).item()\n    else:\n        res = 1 / (1 + np.exp(-x))\n        return res.round(4).tolist() if isinstance(x, np.ndarray) else res.round(4).item()"}
{"task_id": 56, "completion_id": 1, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Computes the SoftPlus activation function or its derivative (sigmoid function) on the input x.\n    \n    Args:\n        x: A scalar, list, or NumPy array of real values.\n        deriv: A boolean flag indicating whether to compute the SoftPlus (False) or its derivative (True).\n    \n    Returns:\n        A Python list of the computed values of SoftPlus or sigmoid, rounded to 4 decimal places.\n    \"\"\"\n    x_arr = np.array(x)\n    if deriv:\n        result = 1 / (1 + np.exp(-x_arr))\n    else:\n        result = np.log1p(np.exp(-np.abs(x_arr))) + np.maximum(x_arr, 0)\n    rounded_result = np.round(result, decimals=4)\n    return rounded_result.tolist() if isinstance(x, list) or isinstance(x, np.ndarray) else float(rounded_result)"}
{"task_id": 56, "completion_id": 2, "solution": "import numpy as np\ndef softplus(x, deriv=False):\n    \"\"\"\n    Computes the SoftPlus function or its derivative (the sigmoid function)\n    with numerically stable formulation and returns the result rounded to\n    the nearest 4th decimal as a Python list or float.\n\n    Parameters:\n    x (float or list or np.ndarray): The input real values.\n    deriv (bool): If True, compute derivative (sigmoid).\n\n    Returns:\n    list or float: The SoftPlus or sigmoid values of x, rounded to 4 decimals.\n    \"\"\"\n    x = np.array(x)\n    if deriv:\n        result = 1.0 / (1 + np.exp(-x))\n    else:\n        result = np.log1p(np.exp(-np.abs(x))) + np.maximum(x, 0)\n    rounded_result = np.round(result, 4)\n    return rounded_result.tolist() if isinstance(x, (list, np.ndarray)) else rounded_result.item()"}
{"task_id": 56, "completion_id": 3, "solution": "import numpy as np\ndef softplus(x, deriv=False):\n    \"\"\"\n    Compute the SoftPlus activation function or its derivative (sigmoid) on the input.\n    \n    Args:\n    x: A scalar, list, or numpy array of real values.\n    deriv: A boolean flag indicating whether to compute SoftPlus (False) or its derivative (True).\n    \n    Returns:\n    A Python list (or a single float if input is a scalar) containing the rounded values.\n    \"\"\"\n    x = np.array(x)\n\n    def stable_softplus(x):\n        return np.where(x >= 0, x + np.log1p(np.exp(-x)), np.log1p(np.exp(x)))\n\n    def sigmoid(x):\n        return np.where(x >= 0, 1 / (1 + np.exp(-x)), np.exp(x) / (1 + np.exp(x)))\n    if deriv:\n        result = sigmoid(x)\n    else:\n        result = stable_softplus(x)\n    rounded_result = np.round(result, 4)\n    if isinstance(x, np.ndarray) and x.size > 1:\n        return rounded_result.tolist()\n    else:\n        return float(rounded_result)"}
{"task_id": 56, "completion_id": 4, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Computes the SoftPlus of a scalar, list or NumPy array for deriv=False,\n    and the gradient of the SoftPlus (sigmoid) for deriv=True, rounding each value to the 4th decimal.\"\"\"\n    x = np.array(x)\n    if not deriv:\n        y = np.where(x >= 0, x + np.log1p(np.exp(-x)), np.log1p(np.exp(x)))\n    else:\n        y = 1 / (1 + np.exp(-x))\n    y_rounded = np.around(y, decimals=4).tolist()\n    return y_rounded[0] if isinstance(x, float) else y_rounded"}
{"task_id": 56, "completion_id": 5, "solution": "import numpy as np\ndef softplus(x, deriv=False):\n    \"\"\"\n    Implements the SoftPlus activation function and its derivative.\n    \n    Args:\n    - x: A scalar, list, or NumPy array of real numbers.\n    - deriv: A boolean flag indicating whether to return the SoftPlus function\n             or its derivative (sigmoid function). Default is False.\n    \n    Returns:\n    - A scalar or a list of rounded values to the 4th decimal place.\n    \"\"\"\n    x = np.array(x)\n    if deriv:\n        result = 1 / (1 + np.exp(-np.clip(x, -10, 10)))\n    else:\n        result = np.log1p(np.exp(-abs(x))) + np.maximum(x, 0)\n    rounded_result = np.round(result, 4)\n    return rounded_result.item() if isinstance(x, np.ndarray) and x.size == 1 else rounded_result.tolist()"}
{"task_id": 56, "completion_id": 6, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Computes the SoftPlus activation or its derivative on an element-wise basis.\n    \n    Parameters:\n    x (float, list, np.ndarray): input to the SoftPlus function.\n    deriv (bool): if True, computes the derivative (sigmoid function).\n    \n    Returns:\n    float or list: The element-wise SoftPlus or sigmoid values, rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x, dtype=float) if not isinstance(x, np.ndarray) else x\n    if not deriv:\n        result = np.where(x > 0, x + np.log1p(np.exp(-x)), np.log1p(np.exp(x)))\n    else:\n        result = 1 / (1 + np.exp(-x))\n    rounded_result = np.around(result, decimals=4)\n    return float(rounded_result) if x.size == 1 else rounded_result.tolist()"}
{"task_id": 56, "completion_id": 7, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n\n    def softplus_scalar(value, deriv=False):\n        if deriv:\n            m = max(0, value)\n            return round(np.exp(-m) / (1 + np.exp(-abs(value))), 4)\n        else:\n            return round(np.log1p(np.exp(-abs(value))) - np.minimum(0, value), 4)\n    if isinstance(x, (list, np.ndarray)):\n        return [softplus_scalar(val, deriv=deriv) for val in np.ravel(x)]\n    else:\n        return softplus_scalar(x, deriv=deriv)"}
{"task_id": 56, "completion_id": 8, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"\n    Compute the SoftPlus activation or its derivative (sigmoid) for a given input.\n    \n    Parameters:\n    - x: A scalar, Python list, or NumPy array of real numbers.\n    - deriv: Boolean flag to indicate whether to return the SoftPlus (False, default) or its derivative (True).\n    \n    Returns:\n    - A Python list or scalar float with each value rounded to the 4th decimal place.\n    \"\"\"\n    x = np.array(x)\n    if deriv:\n        sig = np.where(x >= 0, 1 / (1 + np.exp(-x)), np.exp(x) / (1 + np.exp(x)))\n    else:\n        softp = np.log1p(np.exp(x))\n    output = sig if deriv else softp\n    return np.round(output, 4).tolist() if isinstance(x, list) or x.size > 1 else float(np.round(output, 4))"}
{"task_id": 56, "completion_id": 9, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Computes the SoftPlus of a scalar, list, or NumPy array.\n    \n    If deriv is True, computes the derivative (sigmoid).\n    Input can be a single float, a Python list, or a NumPy array.\n    \"\"\"\n\n    def element_wise_softplus(z):\n        if z >= 0:\n            return z + np.log1p(np.exp(-z))\n        else:\n            return np.log1p(np.exp(z))\n\n    def element_wise_derivative(z):\n        return 1 / (1 + np.exp(-z))\n    if isinstance(x, (int, float)):\n        numeric_x = np.array([x])\n    else:\n        numeric_x = np.array(x) if not isinstance(x, np.ndarray) else x\n    if deriv:\n        result = element_wise_derivative(numeric_x)\n    else:\n        result = np.vectorize(element_wise_softplus)(numeric_x)\n    if isinstance(x, (int, float)):\n        return round(float(result), 4)\n    else:\n        return [round(float(r), 4) for r in result.flatten()]"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    corpus = tuple(corpus)\n    sequence = tuple(sequence)\n    ngram_counter = Counter(zip(*[corpus[i:] for i in range(N)]))\n    context_counter = Counter(zip(*[corpus[i:] for i in range(N - 1)])) if N > 1 else Counter([()])\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = sequence[i:i + N]\n        context = ngram[:-1] if N > 1 else ()\n        ngram_count = ngram_counter[ngram]\n        context_count = context_counter[context]\n        if ngram_count == 0 or context_count == 0:\n            return float('-inf')\n        prob = ngram_count / context_count\n        log_prob += np.log(prob)\n    return round(log_prob, 4)\ncorpus = 'the cat sat on the mat and the cat barked'.split()\nsequence = 'the cat sat'.split()\nN = 3"}
{"task_id": 58, "completion_id": 1, "solution": "from typing import List\nfrom collections import Counter\nimport math\ndef unsmoothed_ngram_log_prob(corpus: List[str], sequence: List[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n\n    def ngrams(lst, n):\n        t_grams = zip(*[lst[i:] for i in range(n)])\n        return [' '.join(ngram) for ngram in t_grams]\n    corpus_ngrams = ngrams(corpus, N)\n    corpus_ngrams_counts = Counter(corpus_ngrams)\n    if N > 1:\n        corpus_nminus1grams = ngrams(corpus, N - 1)\n        corpus_nminus1grams_counts = Counter(corpus_nminus1grams)\n    else:\n        corpus_nminus1grams_counts = Counter(corpus)\n    seq_ngrams = ngrams(sequence, N)\n    log_prob = 0.0\n    for ngram in seq_ngrams:\n        if N == 1:\n            if corpus_ngrams_counts[ngram] == 0:\n                return float('-inf')\n            log_prob += math.log(corpus_ngrams_counts[ngram] / len(corpus))\n        else:\n            ngram_count = corpus_ngrams_counts[ngram]\n            prefix = ' '.join(ngram.split(' ')[:-1])\n            prefix_count = corpus_nminus1grams_counts[prefix]\n            if ngram_count == 0 or prefix_count == 0:\n                return float('-inf')\n            log_prob += math.log(ngram_count / prefix_count)\n    return round(log_prob, 4)"}
{"task_id": 58, "completion_id": 2, "solution": "from collections import Counter\nimport numpy as np\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    The function builds N-gram count tables from *corpus* and then returns\n    the total log-probability of *sequence* under the resulting unsmoothed\n    language model.\n\n    The return value is rounded to 4 decimal places. If any required count\n    is zero, it returns ``float('-inf')``.\n    \"\"\"\n\n    def n_gram_counts(corpus: list[str], n: int) -> Counter:\n        \"\"\"Generate counts of n-grams from the corpus.\"\"\"\n        ngrams = [' '.join(corpus[i:i + n]) for i in range(len(corpus) - n + 1)]\n        return Counter(ngrams)\n    n_grams = n_gram_counts(corpus, N)\n    n_minus_1_grams = n_gram_counts(corpus, N - 1) if N > 1 else Counter([corpus[0]])\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = ' '.join(sequence[i:i + N])\n        ngram_count = n_grams[ngram]\n        prefix = ' '.join(sequence[i:i + N - 1]) if N > 1 else sequence[i]\n        if ngram_count == 0 or (N > 1 and n_minus_1_grams[prefix] == 0):\n            return float('-inf')\n        if N > 1:\n            prob = ngram_count / n_minus_1_grams[prefix]\n        else:\n            prob = ngram_count / len(corpus)\n        log_prob += np.log(prob)\n    return round(log_prob, 4)\ncorpus = ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nsequence = ['the', 'quick', 'brown']\nN = 3"}
{"task_id": 58, "completion_id": 3, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n\n    def ngrams(tokens, n):\n        return zip(*[tokens[i:] for i in range(n)])\n    ngram_counter = Counter(ngrams(corpus, N))\n    if N > 1:\n        n_minus_1_gram_counter = Counter(ngrams(corpus, N - 1))\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        current_ngram = tuple(sequence[i:i + N])\n        if N > 1:\n            n_minus_1_gram = current_ngram[:-1]\n            current_ngram_count = ngram_counter[current_ngram]\n            n_minus_1_gram_count = n_minus_1_gram_counter[n_minus_1_gram]\n            if current_ngram_count == 0 or n_minus_1_gram_count == 0:\n                return float('-inf')\n            prob = current_ngram_count / n_minus_1_gram_count\n        else:\n            current_ngram_count = ngram_counter[current_ngram]\n            total_tokens = len(corpus)\n            if current_ngram_count == 0:\n                return float('-inf')\n            prob = current_ngram_count / total_tokens\n        total_log_prob += np.log(prob)\n    return round(total_log_prob, 4)"}
{"task_id": 58, "completion_id": 4, "solution": "from typing import List\nfrom collections import Counter\nimport numpy as np\ndef unsmoothed_ngram_log_prob(corpus: List[str], sequence: List[str], N: int) -> float:\n\n    def generate_ngrams(tokens: List[str], ngram_length: int):\n        \"\"\"Generate ngrams from a list of tokens.\"\"\"\n        for i in range(len(tokens) - ngram_length + 1):\n            yield tuple(tokens[i:i + ngram_length])\n    ngrams = list(generate_ngrams(corpus, N))\n    prefix_ngrams = list(generate_ngrams(corpus, N - 1)) if N > 1 else [()]\n    ngram_counts = Counter(ngrams)\n    prefix_counts = Counter(prefix_ngrams)\n    log_prob = 0.0\n    sequence_ngrams = list(generate_ngrams(sequence, N))\n    for ngram in sequence_ngrams:\n        ngram_count = ngram_counts[ngram]\n        prefix_count = prefix_counts[ngram[:-1]] if N > 1 else len(corpus)\n        if ngram_count == 0 or prefix_count == 0:\n            return float('-inf')\n        log_prob += np.log(ngram_count / prefix_count)\n    return round(log_prob, 4)\ncorpus = ['a', 'b', 'c', 'a', 'b', 'b', 'a', 'c']\nsequence = ['b', 'c', 'a']\nN = 2"}
{"task_id": 58, "completion_id": 5, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    ngrams = [' '.join(corpus[i:i + N]) for i in range(len(corpus) - N + 1)]\n    n_minus_1_grams = [' '.join(corpus[i:i + N - 1]) for i in range(len(corpus) - N + 2)]\n    ngrams_freq = Counter(ngrams)\n    n_minus_1_grams_freq = Counter(n_minus_1_grams)\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        seq_ngram = ' '.join(sequence[i:i + N])\n        seq_n_minus_1_gram = ' '.join(sequence[i:i + N - 1])\n        ngram_count = ngrams_freq[seq_ngram]\n        n_minus_1_gram_count = n_minus_1_grams_freq[seq_n_minus_1_gram]\n        if ngram_count == 0 or n_minus_1_gram_count == 0:\n            return float('-inf')\n        else:\n            this_log_prob = np.log(ngram_count) - np.log(n_minus_1_gram_count)\n            log_prob += this_log_prob\n    return round(log_prob, 4)\ncorpus = ['I', 'like', 'cat', 'the', 'dog', 'eats', 'bones', 'I', 'like', 'dog']\nsequence = ['I', 'like', 'dog']\nN = 2"}
{"task_id": 58, "completion_id": 6, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    corpus_str = ' '.join(corpus)\n    sequence_str = ' '.join(sequence)\n    ngram_counts = Counter([corpus_str[i:i + N * 2 - 1] for i in range(len(corpus_str) - N * 2 + 2) if i % 2 == 0])\n    n_minus_1_gram_counts = Counter([corpus_str[i:i + (N - 1) * 2 - 1] for i in range(len(corpus_str) - (N - 1) * 2 + 2) if i % 2 == 0])\n    total_log_prob = 0\n    if N == 1:\n        corpus_length = len(corpus)\n        for token in sequence:\n            token_count = corpus.count(token)\n            if token_count == 0:\n                return float('-inf')\n            else:\n                total_log_prob += np.log(token_count / corpus_length)\n    else:\n        for i in range(len(sequence_str) - N * 2 + 2):\n            if i % 2 == 0:\n                ngram = sequence_str[i:i + N * 2 - 1]\n                ngram_count = ngram_counts[ngram]\n                if ngram_count == 0:\n                    return float('-inf')\n                prefix = ngram[:N * 2 - 3]\n                prefix_count = n_minus_1_gram_counts[prefix]\n                if prefix_count == 0:\n                    return float('-inf')\n                total_log_prob += np.log(ngram_count / prefix_count)\n    return round(total_log_prob, 4)"}
{"task_id": 58, "completion_id": 7, "solution": "from typing import List\nfrom collections import Counter\nimport numpy as np\ndef unsmoothed_ngram_log_prob(corpus: List[str], sequence: List[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n\n    def get_ngram_counts(token_list: List[str], n: int) -> Counter:\n        return Counter((tuple(token_list[i:i + n]) for i in range(len(token_list) - n + 1)))\n\n    def get_log_prob(numerator, denominator):\n        if numerator == 0 or denominator == 0:\n            return float('-inf')\n        return np.log(numerator / denominator)\n    training_corpus_count = get_ngram_counts(corpus, N)\n    if N > 1:\n        prefix_count = get_ngram_counts(corpus, N - 1)\n    else:\n        total_count = sum(training_corpus_count.values())\n        prefix_count = {(): total_count}\n    sequence_count = get_ngram_counts(sequence, N)\n    log_prob_sum = 0\n    for (ngram, count) in sequence_count.items():\n        if ngram in training_corpus_count and ngram[:-1] in prefix_count:\n            lp = get_log_prob(training_corpus_count[ngram], prefix_count[ngram[:-1]])\n            if lp == float('-inf'):\n                return float('-inf')\n            log_prob_sum += lp\n        else:\n            return float('-inf')\n    return round(log_prob_sum, 4)\ncorpus = 'the cat and the dog and the mouse'.split()\nsequence = 'the cat and the'.split()\nN = 2"}
{"task_id": 58, "completion_id": 8, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n    \n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n    \n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n\n    def generate_ngrams(tokens, n):\n        return [' '.join(tokens[i:i + n]) for i in range(len(tokens) - n + 1)]\n    if N > 1:\n        corpus_ngrams = generate_ngrams(corpus, N)\n        corpus_ngrams_counter = Counter(corpus_ngrams)\n        corpus_nminus1grams = generate_ngrams(corpus, N - 1)\n        corpus_nminus1grams_counter = Counter(corpus_nminus1grams)\n    else:\n        corpus_ngrams_counter = Counter(corpus)\n    sequence_ngrams = generate_ngrams(sequence, N) if N > 1 else sequence\n    total_log_prob = 0.0\n    for ngram in sequence_ngrams:\n        if N > 1:\n            prefix = ' '.join(ngram.split()[:-1])\n            numerator = corpus_ngrams_counter[ngram]\n            denominator = corpus_nminus1grams_counter[prefix]\n        else:\n            numerator = corpus_ngrams_counter[ngram]\n            denominator = len(corpus)\n        if numerator == 0 or denominator == 0:\n            return float('-inf')\n        prob = numerator / denominator\n        log_prob = np.log(prob)\n        total_log_prob += log_prob\n    return round(total_log_prob, 4)\ncorpus = 'hi hello he hi there'.split()\nsequence = 'hi there'.split()\nN = 2"}
{"task_id": 58, "completion_id": 9, "solution": "from typing import List\nfrom collections import Counter\nimport numpy as np\ndef ngram_counts(corpus: List[str], N: int) -> tuple[Counter, Counter]:\n    \"\"\"Build the n-gram count tables for n-gram and (n-1)-gram counts.\"\"\"\n    lower_order_counts = Counter(zip(*[corpus[i:] for i in range(N - 1)]))\n    ngram_counts = Counter(zip(*[corpus[i:] for i in range(N)]))\n    return (ngram_counts, lower_order_counts)\ndef unsmoothed_ngram_log_prob(corpus: List[str], sequence: List[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be >= 1')\n    (ngram_counts_corpus, lower_order_counts_corpus) = ngram_counts(corpus, N)\n    sequence_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        lower_order_ngram = tuple(sequence[i:i + N - 1])\n        ngram_count = ngram_counts_corpus[ngram]\n        lower_order_count = lower_order_counts_corpus[lower_order_ngram] if lower_order_counts_corpus[lower_order_ngram] else 1\n        if ngram_count == 0 or lower_order_count == 0:\n            return float('-inf')\n        prob = ngram_count / lower_order_count\n        if prob == 0:\n            return float('-inf')\n        sequence_log_prob += np.log(prob)\n    return round(sequence_log_prob, 4)\ncorpus = ['the', 'dog', 'chased', 'the', 'cat', 'the', 'cat', 'sat', 'on', 'the', 'mat']\nsequence = ['the', 'dog', 'sat', 'in', 'the', 'box']\nN = 2"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest absolute change in any coefficient between two consecutive passes is smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    m = len(X)\n    X_poly = np.column_stack([X ** i for i in range(degree + 1)])\n    w = np.zeros(degree + 1)\n    w_prev = np.copy(w)\n    for _ in range(n_iterations):\n        w[0] = np.mean(y - np.dot(X_poly[:, 1:], w[1:]))\n        for j in range(1, degree + 1):\n            rho = np.dot(X_poly[:, j], y - (np.dot(X_poly, w) - X_poly[:, j] * w[j]))\n            w[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / np.dot(X_poly[:, j], X_poly[:, j])\n        if np.abs(w - w_prev).max() < tol:\n            break\n        w_prev = np.copy(w)\n    return [round(weight, 4) for weight in w]"}
{"task_id": 62, "completion_id": 1, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | np.ndarray, y: list[float] | np.ndarray, degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X, dtype=float).reshape(-1, 1)\n    y = np.array(y, dtype=float)\n    m = X.shape[0]\n    design_matrix = np.power(X, np.arange(degree + 1))\n    w = np.zeros(degree + 1)\n    for iteration in range(n_iterations):\n        w_prev = w.copy()\n        w[0] = np.mean(y - design_matrix[:, 1:].dot(w[1:]))\n        for j in range(1, degree + 1):\n            rho = design_matrix[:, j].T.dot(y - design_matrix.dot(w) + w[j] * design_matrix[:, j])\n            w[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / design_matrix[:, j].T.dot(design_matrix[:, j])\n        if np.abs(w - w_prev).max() < tol:\n            break\n    return [round(coef, 4) for coef in w.tolist()]\nX = [1, 2, 3, 4, 5]\ny = [2, 3, 5, 7, 11]\ndegree = 2\nreg_factor = 0.1"}
{"task_id": 62, "completion_id": 2, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | np.ndarray, y: list[float] | np.ndarray, degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n    \n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n    \n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n    \n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, ..., w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    m = len(y)\n    X_poly = np.column_stack([X ** i for i in range(degree + 1)])\n    weights = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        weights_prev = np.copy(weights)\n        residuals = y - X_poly @ weights\n        weights[0] = np.mean(residuals)\n        for j in range(1, degree + 1):\n            rho = np.dot(X_poly[:, j], residuals + weights[j] * X_poly[:, j])\n            weights[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / (X_poly[:, j] @ X_poly[:, j])\n            residuals += X_poly[:, j] * (weights[j] - weights_prev[j])\n        if np.abs(weights - weights_prev).max() < tol:\n            break\n    return [round(w, 4) for w in weights]"}
{"task_id": 62, "completion_id": 3, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, ..., w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    X_polynomial = np.vander(X, degree + 1, increasing=True)\n    (m, d) = X_polynomial.shape\n    w = np.zeros(d)\n    for iteration in range(n_iterations):\n        w_prev = w.copy()\n        for j in range(d):\n            if j == 0:\n                w[0] = np.mean(y - X_polynomial[:, 1:] @ w[1:])\n            else:\n                residuals = y - X_polynomial @ w + w[j] * X_polynomial[:, j]\n                rho = X_polynomial[:, j] @ residuals\n                w[j] = soft_threshold(rho, reg_factor) / (X_polynomial[:, j] @ X_polynomial[:, j])\n        if np.max(np.abs(w - w_prev)) < tol:\n            break\n    return [round(float(coef), 4) for coef in w]\ndef soft_threshold(rho, lam):\n    return np.sign(rho) * max(abs(rho) - lam, 0)\nX = [1, 2, 3, 4, 5]\ny = [1, 4, 9, 16, 25]\ndegree = 2\nreg_factor = 0.1"}
{"task_id": 62, "completion_id": 4, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n    \n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n    \n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n    \n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X).reshape(-1, 1)\n    y = np.array(y).reshape(-1, 1)\n    X_design = np.vander(X.squeeze(), degree + 1, increasing=True)\n    w_old = np.zeros((degree + 1, 1), dtype=float)\n    w_new = np.zeros((degree + 1, 1), dtype=float)\n    n_samples = X_design.shape[0]\n    for iter_ in range(n_iterations):\n        for j in range(degree + 1):\n            if j == 0:\n                w_new[0] = np.mean(y - X_design[:, 1:] @ w_new[1:])\n            else:\n                rho = X_design[:, j].T @ (y - X_design @ w_old + w_old[j] * X_design[:, j:j + 1])\n                w_new[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / (X_design[:, j].T @ X_design[:, j])\n        if np.all(np.abs(w_new - w_old) < tol):\n            break\n        w_old[:] = w_new\n    return [round(weight[0], 4) for weight in w_new]\nX = [1, 2, 3, 4, 5]\ny = [1, 4, 9, 16, 25]\ndegree = 2\nreg_factor = 0.1"}
{"task_id": 62, "completion_id": 5, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    m = len(X)\n    X_transformed = np.vander(X, degree + 1, increasing=True)\n    w = np.zeros(degree + 1)\n    for k in range(n_iterations):\n        previous_w = w.copy()\n        residuals = y - X_transformed @ w\n        w[0] = np.mean(residuals)\n        residuals = y - X_transformed @ w\n        for j in range(1, degree + 1):\n            rho = X_transformed[:, j] @ (residuals + w[j] * X_transformed[:, j])\n            soft_threshold = np.sign(rho) * max(abs(rho) - reg_factor * m, 0)\n            w[j] = soft_threshold / (X_transformed[:, j].T @ X_transformed[:, j])\n        if np.max(np.abs(previous_w - w)) < tol:\n            break\n    return [round(c, 4) for c in w]"}
{"task_id": 62, "completion_id": 6, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | np.ndarray, y: list[float] | np.ndarray, degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X).reshape(-1, 1)\n    y = np.array(y)\n    m = X.shape[0]\n    design_matrix = np.hstack([X ** d for d in range(degree + 1)])\n    weights = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        old_weights = np.copy(weights)\n        residual = y - design_matrix[:, 1:].dot(weights[1:])\n        weights[0] = np.mean(residual)\n        for j in range(1, degree + 1):\n            residual += design_matrix[:, j] * weights[j]\n            rho = design_matrix[:, j].T.dot(y - residual)\n            residual -= design_matrix[:, j] * weights[j]\n            weights[j] = soft_threshold(rho, reg_factor) / design_matrix[:, j].T.dot(design_matrix[:, j])\n        if np.max(np.abs(weights - old_weights)) < tol:\n            break\n    return [round(w, 4) for w in weights]\ndef soft_threshold(rho, lambda_):\n    if rho > lambda_:\n        return rho - lambda_\n    elif rho < -lambda_:\n        return rho + lambda_\n    else:\n        return 0"}
{"task_id": 62, "completion_id": 7, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, ..., w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X).reshape(-1, 1)\n    y = np.array(y)\n    X_poly = np.hstack([np.ones((X.shape[0], 1)), *[X ** i for i in range(1, degree + 1)]])\n    (m, d) = X_poly.shape\n    w = np.zeros(d)\n    for _ in range(n_iterations):\n        w_old = w.copy()\n        for j in range(1, d):\n            residual = y - X_poly @ w\n            residual += w[j] * X_poly[:, j]\n            rho = X_poly[:, j].T @ residual\n            w[j] = soft_threshold(rho, reg_factor) / (X_poly[:, j].T @ X_poly[:, j])\n        w[0] = np.mean(y - X_poly[:, 1:] @ w[1:])\n        if np.max(np.abs(w_old - w)) < tol:\n            break\n    return [round(weight, 4) for weight in w]\ndef soft_threshold(rho, lambda_):\n    return np.sign(rho) * max(np.abs(rho) - lambda_, 0)\nX = [1, 2, 3, 4, 5]\ny = [2, 4, 5, 4, 5.5]\ndegree = 2\nreg_factor = 0.5"}
{"task_id": 62, "completion_id": 8, "solution": "import numpy as np\ndef polynomial_features(X: list[float] | np.ndarray, degree: int) -> np.ndarray:\n    \"\"\"Generate polynomial features from the input array X up to the given degree.\"\"\"\n    X = np.array(X)\n    X = X.reshape((-1, 1))\n    X_poly = np.hstack([X ** i for i in range(1, degree + 1)])\n    return np.hstack([np.ones((X_poly.shape[0], 1)), X_poly])\ndef soft_threshold(rho: float, lambda_: float) -> float:\n    \"\"\"Compute the soft-threshold operator.\"\"\"\n    return np.sign(rho) * max(abs(rho) - lambda_, 0)\ndef lasso_regression(X: list[float] | np.ndarray, y: list[float] | np.ndarray, degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    X_design = polynomial_features(X, degree)\n    (m, d) = X_design.shape\n    weights = np.zeros(d)\n    for iteration in range(n_iterations):\n        prev_weights = np.copy(weights)\n        for j in range(d):\n            if j == 0:\n                weights[j] = np.mean(y - X_design[:, 1:] @ weights[1:])\n            else:\n                Xj = X_design[:, j]\n                rho = Xj.T @ (y - X_design @ weights + weights[j] * Xj)\n                weights[j] = soft_threshold(rho, reg_factor * m) / np.dot(Xj, Xj)\n        if np.max(np.abs(weights - prev_weights)) < tol:\n            break\n    return np.round(weights, decimals=4).tolist()\nX = [1, 2, 3, 4, 5]\ny = [1, 2, 3, 4, 5]\ndegree = 2\nreg_factor = 0.1"}
{"task_id": 62, "completion_id": 9, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | np.ndarray, y: list[float] | np.ndarray, degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    if isinstance(y, list):\n        y = np.array(y)\n    X_design = np.vander(X, degree + 1, increasing=True)\n    (m, d) = X_design.shape\n    w = np.zeros(d)\n    for iteration in range(n_iterations):\n        w_prev = w.copy()\n        w[0] = np.mean(y - X_design[:, 1:] @ w[1:])\n        for j in range(1, d):\n            rho = X_design[:, j].T @ (y - X_design @ w + w[j] * X_design[:, j])\n            w[j] = soft_threshold(rho, reg_factor) / (X_design[:, j] @ X_design[:, j])\n        if np.max(np.abs(w - w_prev)) < tol:\n            break\n    return [round(wi, 4) for wi in w]\ndef soft_threshold(rho, lambd):\n    return np.sign(rho) * max(abs(rho) - lambd, 0)\nX = [1, 2, 3, 4, 5]\ny = [1, 4, 9, 16, 25]\ndegree = 2\nreg_factor = 0.1"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef backward_beta(A: np.ndarray, B: np.ndarray, obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculates the backward probability vector at time t for the given HMM parameters.\n    \n    Parameters:\n    A (np.ndarray): A N x N transition-probability matrix.\n    B (np.ndarray): A N x M emission-probability matrix.\n    obs (list[int]): Sequence of observations where each observation is the index of the symbol observed.\n    t (int): Time index at which the backward probability vector is calculated.\n\n    Returns:\n    list[float]: A list of backward probabilities for each state at time t.\n    \"\"\"\n    (T, N) = (len(obs), A.shape[0])\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1\n    for i in range(T - 2, t - 1, -1):\n        for j in range(N):\n            beta[i, j] = np.sum(A[j, :] * B[:, obs[i + 1]] * beta[i + 1, :])\n    return [round(prob, 4) for prob in beta[t]]"}
{"task_id": 63, "completion_id": 1, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Function to compute the backward probability vector for a given time index.\n    \n    Parameters:\n    A (list of list of float): The transition-probability matrix of shape (N, N).\n    B (list of list of float): The emission-probability matrix of shape (N, M).\n    obs (list of int): The list of observation indices (length T).\n    t (int): The integer time index (0 \u2264 t < T).\n    \n    Returns:\n    list of float: The backward probability vector at time t, rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    N = A.shape[0]\n    T = len(obs)\n    beta = np.zeros((T, N))\n    for i in range(N):\n        beta[T - 1, i] = 1\n    for i in range(T - 2, t - 1, -1):\n        for state in range(N):\n            beta[i, state] = np.sum(A[state, :] * B[:, obs[i + 1]] * beta[i + 1, :])\n    beta_t = beta[t]\n    return [round(x, 4) for x in beta_t]\nA = [[0.7, 0.3], [0.3, 0.7]]\nB = [[0.4, 0.6], [0.6, 0.4]]\nobs = [0, 1, 0]\nt = 1"}
{"task_id": 63, "completion_id": 2, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Computes the backward probability vector beta_t for a given time index t in a Hidden Markov Model.\n    \n    Parameters:\n    A (list[list[float]]): Transition probability matrix, shape (N, N)\n    B (list[list[float]]): Emission probability matrix, shape (N, M)\n    obs (list[int]): List of observation indices.\n    t (int): Integer time index.\n    \n    Returns:\n    list[float]: The backward probability vector rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    obs = np.array(obs)\n    N = A.shape[0]\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1\n    for s in range(T - 2, t - 1, -1):\n        for j in range(N):\n            beta[s, j] = np.sum(A[j, :] * B[:, obs[s + 1]] * beta[s + 1, :])\n    return [round(beta[t, i], 4) for i in range(N)]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.7, 0.2, 0.1]]\nobs = [2, 1, 0]\nt = 1"}
{"task_id": 63, "completion_id": 3, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector for a given time step in a Hidden Markov Model (HMM).\n    \n    Parameters:\n    A (list[list[float]]): The transition probability matrix of shape (N, N).\n    B (list[list[float]]): The emission probability matrix of shape (N, M).\n    obs (list[int]): The list of observation indices (length T).\n    t (int): The time step index (0 <= t < T) for which to calculate the backward probability vector.\n    \n    Returns:\n    list[float]: The backward probability vector for time step t, rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)\n    T = len(obs)\n    beta = [[0.0] * N for _ in range(T)]\n    for i in range(N):\n        beta[T - 1][i] = 1\n    for time_step in range(T - 2, -1, -1):\n        for i in range(N):\n            prob = 0.0\n            for j in range(N):\n                prob += A[i][j] * B[j][obs[time_step + 1]] * beta[time_step + 1][j]\n            beta[time_step][i] = prob\n    return [round(b, 4) for b in beta[t]]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.5], [0.8, 0.2]]\nobs = [0, 1, 0]\nt = 1"}
{"task_id": 63, "completion_id": 4, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Computes the backward probability vector beta_t for given states at time t.\n    \n    :param A: Transition probability matrix of shape (N, N).\n    :param B: Emission probability matrix of shape (N, M).\n    :param obs: List of indices of observed symbols, with length T.\n    :param t: Time index, for which to compute the backward probability vector.\n    :return: A list containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A, dtype=float)\n    B = np.array(B, dtype=float)\n    obs = np.array(obs)\n    N = A.shape[0]\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1\n    for time in range(T - 2, t - 1, -1):\n        for state in range(N):\n            beta[time, state] = np.sum(A[state, :] * B[:, obs[time + 1]] * beta[time + 1, :])\n    return [round(prob, 4) for prob in beta[t]]"}
{"task_id": 63, "completion_id": 5, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculates the backward probability vector at a specific time index for a Hidden Markov Model.\n\n    Args:\n    A: A transition-probability matrix of shape (N, N).\n    B: An emission-probability matrix of shape (N, M).\n    obs: A list of observation indices (length T).\n    t: An integer time index (0 \u2264 t < T).\n\n    Returns:\n    A list containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)\n    T = len(obs)\n    A_np = np.array(A, dtype=float)\n    B_np = np.array(B, dtype=float)\n    beta = np.zeros((T, N), dtype=float)\n    beta[T - 1] = np.ones(N, dtype=float)\n    for i in range(T - 2, t - 1, -1):\n        for j in range(N):\n            beta[i][j] = np.sum(A_np[j, :] * B_np[:, obs[i + 1]] * beta[i + 1, :])\n    return [round(beta[t][i], 4) for i in range(N)]"}
{"task_id": 63, "completion_id": 6, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector for a given time index in a Hidden Markov Model.\n\n    :param A: Transition-probability matrix of shape (N, N).\n    :param B: Emission-probability matrix of shape (N, M).\n    :param obs: List of observation indices.\n    :param t: Time index.\n    :return: List containing backward probabilities for each state at time index t.\n    \"\"\"\n    N = len(A)\n    T = len(obs)\n    beta = np.ones((T, N))\n    for i in range(T - 2, t - 1, -1):\n        for state in range(N):\n            beta[i][state] = np.sum(A[state, :] * B[:, obs[i + 1]] * beta[i + 1, :])\n    return [round(prob, 4) for prob in beta[t].tolist()]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.9, 0.1], [0.2, 0.8]]\nobs = [0, 1, 0]\nt = 0"}
{"task_id": 63, "completion_id": 7, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Computes the backward probability vector for a given Hidden Markov Model and observation sequence.\n    :param A: (list[list[float]]) - The transition-probability matrix of shape (N, N).\n    :param B: (list[list[float]]) - The emission-probability matrix of shape (N, M).\n    :param obs: (list[int]) - List of observation indices (length T).\n    :param t: (int) - Integer time index (0 \u2264 t < T).\n    :return: (list[float]) - The backward probability vector containing N probabilities, rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    obs = np.array(obs)\n    N = A.shape[0]\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1\n    for i in range(T - 2, t - 1, -1):\n        for s in range(N):\n            beta[i, s] = np.sum(A[s, :] * B[:, obs[i + 1]] * beta[i + 1, :])\n    return [float(f'{x:.4f}') for x in beta[t]]\nA = [[0.7, 0.3], [0.3, 0.7]]\nB = [[0.9, 0.1], [0.2, 0.8]]\nobs = [0, 1, 0]\nt = 0"}
{"task_id": 63, "completion_id": 8, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector for a given time index t in a Hidden Markov Model.\n\n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices (length T).\n    t (int): Integer time index (0 \u2264 t < T).\n\n    Returns:\n    list[float]: A list containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    T = len(obs)\n    N = A.shape[0]\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1\n    for i in range(T - 2, t - 1, -1):\n        for j in range(N):\n            prob = np.sum(A[j, :] * B[:, obs[i + 1]] * beta[i + 1, :])\n            beta[i, j] = prob\n    return [round(x, 4) for x in beta[t]]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.4, 0.1], [0.1, 0.3, 0.6]]\nobs = [0, 1, 2]\nt = 1"}
{"task_id": 63, "completion_id": 9, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculates the backward probability vector beta for a given time index t.\n    \n    Parameters:\n    A (list[list[float]]): Transition-probability matrix of shape (N, N).\n    B (list[list[float]]): Emission-probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices (length T).\n    t (int): Integer time index, 0 \u2264 t < T.\n\n    Returns:\n    list[float]: List containing the N backward probabilities.\n    \"\"\"\n    T = len(obs)\n    N = len(A)\n    A = np.array(A)\n    B = np.array(B)\n    beta = np.ones((T, N))\n    for time in range(T - 2, t - 1, -1):\n        for state in range(N):\n            beta[time, state] = np.sum(A[state, :] * B[:, obs[time + 1]] * beta[time + 1, :])\n    return [round(prob, 4) for prob in beta[t]]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.5], [0.3, 0.7]]\nobs = [0, 1, 1]\nt = 1"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(A)\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for t in reversed(range(T - 1)):\n        for i in range(N):\n            beta[t, i] = sum((A[i][j] * B[j][obs[t + 1]] * beta[t + 1][j] for j in range(N)))\n    P_O_lambda = sum((pi[i] * B[i][obs[0]] * beta[0][i] for i in range(N)))\n    return round(P_O_lambda, 6)\nA = [[0.7, 0.3], [0.3, 0.7]]\nB = [[0.6, 0.4], [0.4, 0.6]]\npi = [0.5, 0.5]\nobs = [0, 1, 0, 1]"}
{"task_id": 65, "completion_id": 1, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not all([A, B, pi, obs]):\n        return 0.0\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    T = len(obs)\n    N = A.shape[0]\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i] * B[:, obs[t + 1]] * beta[t + 1])\n    seq_prob = np.sum(pi * B[:, obs[0]] * beta[0])\n    return round(seq_prob, 6)\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\npi = [0.8, 0.2]\nobs = [0, 2, 1]"}
{"task_id": 65, "completion_id": 2, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(A)\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = sum((A[i][j] * B[j][obs[t + 1]] * beta[t + 1, j] for j in range(N)))\n    seq_prob = sum((pi[i] * B[i][obs[0]] * beta[0, i] for i in range(N)))\n    return round(seq_prob, 6)"}
{"task_id": 65, "completion_id": 3, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    obs = np.array(obs)\n    T = len(obs)\n    N = A.shape[0]\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t + 1]] * beta[t + 1, :])\n    seq_prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n    return round(seq_prob, 6)"}
{"task_id": 65, "completion_id": 4, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    T = len(obs)\n    N = len(A)\n    assert len(pi) == N\n    assert all((len(row) == N for row in A))\n    assert all((len(row) >= max(obs) + 1 for row in B))\n    beta = np.ones(N)\n    for t in range(T - 2, -1, -1):\n        new_beta = np.zeros(N)\n        for i in range(N):\n            for j in range(N):\n                new_beta[i] += A[i][j] * B[j][obs[t + 1]] * beta[j]\n        beta = new_beta\n    prob = sum((pi[i] * B[i][obs[0]] * beta[i] for i in range(N)))\n    return round(prob, 6)\nA = [[0.7, 0.3], [0.1, 0.9]]\nB = [[0.25, 0.75], [0.55, 0.45]]\npi = [0.65, 0.35]\nobs = [0, 1, 0]"}
{"task_id": 65, "completion_id": 5, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(A)\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            for j in range(N):\n                beta[t, i] += A[i][j] * B[j][obs[t + 1]] * beta[t + 1][j]\n    seq_prob = 0.0\n    for i in range(N):\n        seq_prob += pi[i] * B[i][obs[0]] * beta[0][i]\n    return round(seq_prob, 6)\nA = [[0.6, 0.4], [0.3, 0.7]]\nB = [[0.5, 0.5], [0.2, 0.8]]\npi = [0.8, 0.2]\nobs = [0, 1]"}
{"task_id": 65, "completion_id": 6, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    N = A.shape[0]\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for t in range(T - 2, -1, -1):\n        for j in range(N):\n            beta[t, j] = np.sum(A[j, :] * B[:, obs[t + 1]] * beta[t + 1, :])\n    P_obs = np.sum(pi * B[:, obs[0]] * beta[0, :])\n    return np.round(P_obs, 6)\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.5], [0.4, 0.6]]\npi = [0.6, 0.4]\nobs = [0, 1]"}
{"task_id": 65, "completion_id": 7, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(pi)\n    T = len(obs)\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    beta = np.ones((T, N))\n    for t in reversed(range(T - 1)):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t + 1]] * beta[t + 1, :])\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n    return round(prob, 6)\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.4, 0.1], [0.1, 0.3, 0.6]]\npi = [0.6, 0.4]\nobs = [0, 1, 2]"}
{"task_id": 65, "completion_id": 8, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if len(A) == 0 or len(B) == 0 or len(pi) == 0 or (len(obs) == 0):\n        return 0.0\n    (A, B, pi) = (np.array(A), np.array(B), np.array(pi))\n    N = len(A)\n    T = len(obs)\n    beta = np.ones((T, N))\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = sum((A[i, j] * B[j, obs[t + 1]] * beta[t + 1, j] for j in range(N)))\n    seq_prob = sum((pi[i] * B[i, obs[0]] * beta[0, i] for i in range(N)))\n    return round(seq_prob, 6)\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.7, 0.2, 0.1]]\npi = [0.5, 0.5]\nobs = [0, 1, 2]"}
{"task_id": 65, "completion_id": 9, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(A)\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1] = 1\n    for t in range(T - 2, -1, -1):\n        for s in range(N):\n            beta[t][s] = sum([A[s][j] * B[j][obs[t + 1]] * beta[t + 1][j] for j in range(N)])\n    final_prob = round(sum([pi[i] * B[i][obs[0]] * beta[0][i] for i in range(N)]), 6)\n    return final_prob"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    n = S.size\n    if A.shape != (n, n) or B.shape[0] != n:\n        return -1\n    if not observations or any((obs >= B.shape[1] for obs in observations)):\n        return -1\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    alpha[0] = np.multiply(S, B[:, observations[0]])\n    for t in range(1, T):\n        for j in range(n):\n            alpha[t][j] = B[j][observations[t]] * np.dot(alpha[t - 1], A[:, j])\n    return round(np.sum(alpha[-1]), 4)"}
{"task_id": 69, "completion_id": 1, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    n_states = len(S)\n    if n_states == 0 or len(A) != n_states or any((len(row) != n_states for row in A)):\n        return -1\n    if B.shape != (n_states, B.shape[1]):\n        return -1\n    if not observations or not all((0 <= obs < B.shape[1] for obs in observations)):\n        return -1\n    T = len(observations)\n    alpha = np.zeros((T, n_states))\n    alpha[0] = S * B[:, observations[0]]\n    for t in range(1, T):\n        for j in range(n_states):\n            alpha[t, j] = alpha[t - 1].dot(A[:, j]) * B[j, observations[t]]\n    likelihood = round(alpha[-1].sum(), 4)\n    return likelihood\nS = [0.6, 0.4]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\nobservations = [0, 1, 2]"}
{"task_id": 69, "completion_id": 2, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    n = S.shape[0]\n    if A.shape != (n, n) or B.shape[0] != n or (not observations):\n        return -1\n    m = B.shape[1]\n    for obs in observations:\n        if obs >= m or obs < 0:\n            return -1\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    alpha[0, :] = S * B[:, observations[0]]\n    for t in range(1, T):\n        for j in range(n):\n            alpha[t, j] = np.sum(alpha[t - 1, :] * A[:, j]) * B[j, observations[t]]\n    p = np.sum(alpha[-1])\n    return round(p, 4)"}
{"task_id": 69, "completion_id": 3, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    if not (n > 0 and len(A) == n and all((len(row) == n for row in A)) and (len(B) == n) and all((len(row) == len(B[0]) for row in B))):\n        return -1\n    m = len(B[0])\n    if not all((0 <= o < m for o in observations)):\n        return -1\n    if len(observations) == 0:\n        return -1\n    forward_prob = np.zeros((len(observations), n))\n    forward_prob[0] = np.multiply(S, [B[i][observations[0]] for i in range(n)])\n    for t in range(1, len(observations)):\n        for i in range(n):\n            forward_prob[t][i] = B[i][observations[t]] * np.dot(forward_prob[t - 1], np.array(A)[:, i])\n    return round(np.sum(forward_prob[-1]), 4)\nS = [0.5, 0.5]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.7, 0.2, 0.1]]\nobservations = [2, 1, 0]"}
{"task_id": 69, "completion_id": 4, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n    n = S.shape[0]\n    if A.shape != (n, n) or B.shape[0] != n or observations.size == 0:\n        return -1\n    m = B.shape[1]\n    if not np.all((observations >= 0) & (observations < m)):\n        return -1\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    alpha[0, :] = S * B[:, observations[0]]\n    for t in range(1, T):\n        for j in range(n):\n            alpha[t, j] = np.dot(alpha[t - 1], A[:, j]) * B[j, observations[t]]\n    return round(np.sum(alpha[-1]), 4)"}
{"task_id": 69, "completion_id": 5, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n    \n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n    \n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    if not all([len(row) == n for row in A]):\n        return -1\n    if not all([len(row) == len(B[0]) for row in B]):\n        return -1\n    if not observations or any([obs < 0 or obs >= len(B[0]) for obs in observations]):\n        return -1\n    T = len(observations)\n    F = np.zeros((T, n))\n    for i in range(n):\n        F[0, i] = S[i] * B[i][observations[0]]\n    for t in range(1, T):\n        for i in range(n):\n            F[t, i] = B[i][observations[t]] * sum((F[t - 1, j] * A[j][i] for j in range(n)))\n    return round(sum(F[T - 1, :]), 4)"}
{"task_id": 69, "completion_id": 6, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    m = len(B[0])\n    if len(A) != n or len(A[0]) != n:\n        return -1\n    if len(B) != n:\n        return -1\n    for obs in observations:\n        if obs < 0 or obs >= m:\n            return -1\n    if not observations:\n        return -1\n    T = len(observations)\n    alpha = [[0.0] * n for _ in range(T)]\n    for i in range(n):\n        alpha[0][i] = S[i] * B[i][observations[0]]\n    for t in range(1, T):\n        for i in range(n):\n            alpha[t][i] = B[i][observations[t]] * sum((A[j][i] * alpha[t - 1][j] for j in range(n)))\n    return round(sum((alpha[T - 1][i] for i in range(n))), 4)\nS = [0.5, 0.5]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\nobservations = [2, 1, 0]"}
{"task_id": 69, "completion_id": 7, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    (n, m) = B.shape\n    if len(S) != n or A.shape != (n, n) or len(observations) == 0:\n        return -1\n    if any((observation not in range(m) for observation in observations)):\n        return -1\n    alpha = S * B[:, observations[0]]\n    for t in range(1, len(observations)):\n        alpha = alpha.reshape(-1, 1) * A @ B[:, observations[t]]\n    result = np.sum(alpha)\n    return round(result, 4)\nS = [0.6, 0.4]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.4, 0.1], [0.1, 0.3, 0.6]]\nobservations = [0, 1, 2]"}
{"task_id": 69, "completion_id": 8, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n    (n, m) = B.shape\n    if S.shape != (n,) or A.shape != (n, n) or m <= 0:\n        return -1\n    if not np.all((observations >= 0) & (observations < m)):\n        return -1\n    if len(observations) == 0:\n        return -1\n    forward = S * B[:, observations[0]]\n    for t in range(1, len(observations)):\n        forward = np.dot(forward, A) * B[:, observations[t]]\n    result = np.sum(forward)\n    return round(result, 4)\nS = [0.5, 0.5]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.7, 0.2, 0.1]]\nobservations = [0, 2, 1]"}
{"task_id": 69, "completion_id": 9, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    m = len(B[0])\n    if not observations or not all((0 <= obs < m for obs in observations)) or len(A) != n or any((len(row) != n for row in A)) or (len(B) != n) or any((len(row) != m for row in B)):\n        return -1\n    alpha = np.zeros((len(observations), n))\n    alpha[0] = np.array(S) * np.array([B[i][observations[0]] for i in range(n)])\n    for t in range(1, len(observations)):\n        previous = alpha[t - 1]\n        alpha[t] = previous.dot(np.array(A)) * np.array([B[i][observations[t]] for i in range(n)])\n    likelihood = np.sum(alpha[-1])\n    return round(likelihood, 4)\nS = [0.5, 0.5]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.7, 0.2, 0.1]]\nobservations = [0, 1, 2]"}
{"task_id": 70, "completion_id": 0, "solution": "from collections import Counter, defaultdict\nfrom typing import List\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions:\n        return []\n    item_counts = Counter((item for transaction in transactions for item in set(transaction)))\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    if not frequent_items:\n        return []\n    sorted_frequent_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n    root = Node(None, None)\n    for transaction in transactions:\n        frequent_transaction = [item for item in transaction if item in frequent_items]\n        frequent_transaction.sort(key=lambda x: sorted_frequent_items.index((x, frequent_items[x])))\n        update_tree(frequent_transaction, root, frequent_items)\n    frequent_itemsets = []\n    mine_tree(root, None, frequent_items, min_support, frequent_itemsets)\n    return frequent_itemsets\nclass Node:\n\n    def __init__(self, name, parent):\n        self.name = name\n        self.parent = parent\n        self.children = defaultdict(Node)\n        self.support = 0\n        self.link = None\n\n    def add_child(self, name):\n        if name not in self.children:\n            self.children[name] = Node(name, self)\ntransactions = [['A', 'B', 'C', 'D'], ['B', 'C', 'E'], ['A', 'B', 'C'], ['B', 'E'], ['A', 'B', 'C', 'D']]\nmin_support = 2\nfrequent_itemsets = fp_growth(transactions, min_support)"}
{"task_id": 70, "completion_id": 1, "solution": "from collections import Counter, defaultdict\nfrom typing import List\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n\n    def build_tree(transactions, item_counts):\n        tree = {}\n        header_table = defaultdict(list)\n        for transaction in transactions:\n            transaction_count = Counter([item for item in transaction if item_counts[item] >= min_support])\n            if transaction_count:\n                transaction_count = dict(sorted(transaction_count.items(), key=lambda item: (-item[1], item[0])))\n                curr_node = tree\n                for (item, count) in transaction_count.items():\n                    if item not in curr_node:\n                        curr_node[item] = {'count': 0, 'children': {}}\n                    curr_node[item]['count'] += count\n                    header_table[item].append(curr_node[item])\n                    curr_node = curr_node[item]['children']\n        return (tree, header_table)\n\n    def find_paths(tree, node):\n        if not node:\n            return [()]\n        if 'children' not in node:\n            return [()]\n        paths = []\n        for (child, child_node) in node['children'].items():\n            for path in find_paths(tree, child_node):\n                paths.append((child,) + path)\n        return paths\n\n    def build_patterns(tree, header_table, prefix, min_support, frequent_itemsets):\n        items = [item for item in header_table.keys()]\n        for item in sorted(items, key=lambda x: header_table[x][0]['count']):\n            new_prefix = prefix + (item,)\n            frequent_itemsets.append(list(new_prefix))\n            conditional_tree_input = []\n            for node in header_table[item]:\n                path = []\n                curr_node = tree\n                while curr_node is not node:\n                    for (k, v) in curr_node.items():\n                        if v['children'] is node:\n                            path.append(k)\n                            curr_node = v\n                            break\n                path_counts = {new_prefix[-i - 1]: v['count'] for (i, v) in enumerate(find_paths(tree, curr_node))}\n                if path_counts:\n                    conditional_tree_input.append((path, path_counts))\n            if conditional_tree_input:\n                (new_conditional_tree, new_header_table) = build_tree(conditional_tree_input, dict.fromkeys(new_prefix, min_support))\n                build_patterns(new_conditional_tree, new_header_table, new_prefix, min_support, frequent_itemsets)\n    item_counts = Counter([item for transaction in transactions for item in transaction])\n    item_counts = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    if not item_counts:\n        return []\n    (tree, header_table) = build_tree(transactions, item_counts)\n    frequent_itemsets = []\n    build_patterns(tree, header_table, (), min_support, frequent_itemsets)\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\ntransactions = [['r', 'z', 'h', 'j', 'p'], ['z', 'y', 'x', 'w', 'v', 'u', 't', 's'], ['z'], ['r', 'x', 'n', 'o', 's'], ['y', 'r', 'x', 'z', 'q', 't', 'p'], ['y', 'z', 'x', 'e', 'q', 's', 't', 'm']]\nmin_support = 2\nfrequent_itemsets = fp_growth(transactions, min_support)"}
{"task_id": 70, "completion_id": 2, "solution": "from collections import Counter, defaultdict\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions or min_support < 1:\n        return []\n\n    def build_tree(transactions):\n        count = Counter()\n        for transaction in transactions:\n            count.update(set(transaction))\n        header_table = {item: {'count': count_, 'nodes': []} for (item, count_) in count.items() if count_ >= min_support}\n        if not header_table:\n            return (None, None)\n\n        def insert(transaction):\n            node = root\n            for item in transaction:\n                if item in node.children:\n                    child = node.children[item]\n                else:\n                    child = TreeNode(item, node)\n                    node.children[item] = child\n                    header_table[item]['nodes'].append(child)\n                child.count += 1\n                node = child\n        root = TreeNode('root', None)\n        for transaction in transactions:\n            transaction.sort()\n            insert([item for item in transaction if item in header_table])\n        return (root, header_table)\n\n    def mine(tree, header_table, prefix, frequent_itemsets):\n        for (item, item_data) in header_table.items():\n            new_prefix = prefix.copy()\n            new_prefix.append(item)\n            frequent_itemsets.append(new_prefix)\n            items_before = [item_ for (item_, data) in header_table.items() if data['nodes'][0].count > item_data['nodes'][0].count]\n            conditional_tree_input = []\n            for node in item_data['nodes']:\n                path = []\n                current_node = node.parent\n                while current_node is not tree:\n                    if current_node.item in items_before:\n                        path.append(current_node.item)\n                    current_node = current_node.parent\n                if path:\n                    path.append(item)\n                    conditional_tree_input.append(path)\n            if conditional_tree_input:\n                (conditional_tree, new_header_table) = build_tree(conditional_tree_input)\n                if new_header_table:\n                    mine(conditional_tree, new_header_table, new_prefix, frequent_itemsets)\n    (root, header_table) = build_tree(transactions)\n    if not root or not header_table:\n        return []\n    frequent_itemsets = []\n    mine(root, header_table, [], frequent_itemsets)\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\nclass TreeNode:\n\n    def __init__(self, name, parent):\n        self.name = name\n        self.count = 0\n        self.parent = parent\n        self.children = {}\ntransactions = [['A', 'B', 'C', 'D'], ['B', 'C', 'E'], ['A', 'B', 'C'], ['B', 'E']]\nmin_support = 2"}
{"task_id": 70, "completion_id": 3, "solution": "from collections import Counter, defaultdict\nfrom typing import List\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n\n    def build_fptree(transactions: List[List[str]], headers: defaultdict):\n        \"\"\"Builds the FP-tree from the transactions.\"\"\"\n        root = Node(None)\n        item_counts = Counter([item for transaction in transactions for item in transaction])\n        frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_support}\n        for transaction in transactions:\n            frequent_in_trans = [item for item in transaction if item in frequent_items]\n            frequent_in_trans.sort(key=lambda item: frequent_items[item], reverse=True)\n            root.add(frequent_in_trans, headers)\n        return (root, headers)\n\n    def mine_tree(node: Node, prefix_path: List[str], frequent_itemsets: List[List[str]], min_support: int):\n        \"\"\"Mines the FP-tree to find frequent itemsets.\"\"\"\n        for (item, header_node) in sorted(node.path_conditional.items()):\n            new_freq_set = prefix_path + [item]\n            frequent_itemsets.append(new_freq_set)\n            suffix_transactions = find_prefix_paths(header_node)\n            if suffix_transactions:\n                (conditional_tree, _) = build_fptree(suffix_transactions, defaultdict(list))\n                mine_tree(conditional_tree, new_freq_set, frequent_itemsets, min_support)\n\n    def find_prefix_paths(node):\n        \"\"\"Finds the prefix paths for the node in the FP Tree.\"\"\"\n        paths = []\n        while node is not None:\n            path = []\n            current = node\n            while current.parent is not None:\n                if current.item is not None:\n                    path.append(current.item)\n                current = current.parent\n            if path:\n                paths.append(path)\n            node = node.link\n        return paths\n\n    class Node:\n        \"\"\"Represents a node in the FP-tree.\"\"\"\n\n        def __init__(self, item):\n            self.item = item\n            self.count = 0\n            self.children = {}\n            self.parent = None\n            self.link = None\n\n        def add(self, items: List[str], headers: defaultdict):\n            \"\"\"Adds a transaction (list of items) to the tree.\"\"\"\n            if items:\n                first = items[0]\n                child = self.children.get(first)\n                if child is None:\n                    child = Node(first)\n                    child.parent = self\n                    self.children[first] = child\n                    headers[first].append(child)\n                child.count += 1\n                child.add(items[1:], headers)\n    headers = defaultdict(list)\n    (root, headers) = build_fptree(transactions, headers)\n    frequent_itemsets = []\n    for item in headers:\n        suffix_patterns = find_prefix_paths(headers[item][0])\n        if suffix_patterns:\n            (conditional_tree, _) = build_fptree(suffix_patterns, defaultdict(list))\n            mine_tree(conditional_tree, [item], frequent_itemsets, min_support)\n    for itemset in frequent_itemsets:\n        itemset.sort()\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\ntransactions = [['bread', 'milk'], ['bread', 'diapers', 'beer', 'eggs'], ['milk', 'diapers', 'beer', 'cola'], ['bread', 'milk', 'diapers', 'beer'], ['bread', 'milk', 'diapers', 'cola']]\nmin_support = 3"}
{"task_id": 70, "completion_id": 4, "solution": "from collections import Counter, defaultdict\nfrom typing import List\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n\n    def update_tree(item_set: List[str]):\n        node = root\n        for item in item_set:\n            if item not in node.children:\n                node.children[item] = FPNode(item, node)\n                index = len(frequent_items)\n                for i in range(len(frequent_items)):\n                    if frequent_items[i][0] < item:\n                        index = i\n                        break\n                frequent_items.insert(index, (item, Counter()))\n            node = node.children[item]\n            node.count += 1\n        for item in item_set:\n            frequent_items[frequent_items.index((item, Counter()))][1][item_set[-1]] += 1\n\n    def generate_patterns(node: FPNode, prefix: List[str]):\n        if node:\n            for child in node.children.values():\n                new_prefix = prefix.copy()\n                new_prefix.append(child.item)\n                patterns.append(new_prefix)\n                generate_patterns(child, new_prefix)\n\n    def count_patterns(itemset: List[str]) -> int:\n        path = []\n        node = root\n        for item in itemset:\n            if item in node.children:\n                node = node.children[item]\n                path.append(node.count)\n            else:\n                return 0\n        return min(path)\n\n    class FPNode:\n\n        def __init__(self, item: str, parent: 'FPNode'):\n            self.item = item\n            self.count = 0\n            self.children = {}\n            self.parent = parent\n    if not transactions:\n        return []\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = [(item, count) for (item, count) in item_counts.items() if count >= min_support]\n    if not frequent_items:\n        return []\n    frequent_items.sort(key=lambda x: (-x[1], x[0]))\n    root = FPNode(None, None)\n    for transaction in transactions:\n        filtered_transaction = [item for item in transaction if item_counts[item] >= min_support]\n        filtered_transaction.sort(key=lambda item: (-item_counts[item], item))\n        update_tree(filtered_transaction)\n    patterns = []\n    for (item, _) in frequent_items:\n        path = []\n        node = root\n        while node:\n            if item in node.children:\n                node = node.children[item]\n                path.append(node)\n            else:\n                break\n        if path:\n            generate_patterns(path[-1], [item])\n    frequent_itemsets = [itemset for itemset in patterns if count_patterns(itemset) >= min_support]\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    single_items = [[item] for (item, count) in frequent_items]\n    single_items.extend(frequent_itemsets)\n    single_items.sort(key=lambda x: (len(x), x))\n    return single_items\ntransactions = [['milk', 'bread', 'eggs'], ['milk', 'bread'], ['milk', 'eggs'], ['milk'], ['bread', 'eggs'], ['bread', 'butter'], ['bread', 'butter', 'eggs'], ['butter', 'eggs'], ['milk', 'bread', 'butter', 'eggs'], ['milk', 'bread', 'butter']]\nmin_support = 2"}
{"task_id": 70, "completion_id": 5, "solution": "from collections import Counter, defaultdict\nfrom typing import List\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n\n    def create_initial_header_table(transactions):\n        item_counts = Counter((item for transaction in transactions for item in transaction))\n        frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_support}\n        sorted_items = sorted(frequent_items.items(), key=lambda x: x[1])\n        header_table = {item: {'frequency': freq, 'nodes': []} for (item, freq) in sorted_items}\n        return header_table\n\n    def insert_tree(transaction, header_table, tree, tail):\n        if transaction:\n            (item, frequency) = transaction[0]\n            if item in tree:\n                tree[item][1] += frequency\n            else:\n                new_node = [item, frequency, tail]\n                tree[item] = new_node\n                header_table[item]['nodes'].append(new_node)\n                if tail:\n                    tail.append(new_node)\n            insert_tree(transaction[1:], header_table, tree[item][2], new_node)\n\n    def create_fp_tree(transactions, header_table):\n        tree = {}\n        for transaction in transactions:\n            transaction = sorted([(item, transaction.count(item)) for item in set(transaction) if item in header_table], key=lambda x: header_table[x[0]]['frequency'])\n            insert_tree(transaction, header_table, tree, None)\n        return tree\n\n    def gather_paths(node, path, paths):\n        if node:\n            (item, frequency, children) = node\n            new_path = path + [(item, frequency)]\n            if children:\n                for child in children.values():\n                    gather_paths(child, new_path, paths)\n            else:\n                paths.append(new_path)\n\n    def mine_fp_tree(tree, header_table, prefix, frequent_itemsets):\n        for item in header_table:\n            new_prefix = prefix + [item]\n            frequent_itemsets.append(new_prefix)\n            suffix_patterns = []\n            for node in header_table[item]['nodes']:\n                path = []\n                trunk = node\n                while trunk:\n                    path.append(trunk[0])\n                    if trunk[2]:\n                        gather_paths(trunk[2], [], suffix_patterns)\n                    trunk = next(iter(trunk[2].values())) if trunk[2] else None\n                suffix_patterns.append([(-1, i) for i in path[:-1][::-1]])\n            conditional_tree = create_fp_tree(suffix_patterns, create_initial_header_table(suffix_patterns))\n            mine_fp_tree(conditional_tree, create_initial_header_table(suffix_patterns), new_prefix, frequent_itemsets)\n    header_table = create_initial_header_table(transactions)\n    if not header_table:\n        return []\n    fp_tree = create_fp_tree(transactions, header_table)\n    frequent_itemsets = []\n    mine_fp_tree(fp_tree, header_table, [], frequent_itemsets)\n    frequent_itemsets = [list(set([x[0] for x in pattern])) for pattern in frequent_itemsets]\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 70, "completion_id": 6, "solution": "from collections import Counter, defaultdict\nfrom typing import List\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n\n    def build_fptree(transactions, headers, min_support):\n        root = FPNode(None, None)\n        for transaction in transactions:\n            sorted_transaction = sorted(transaction, key=lambda x: headers[x][1], reverse=True)\n            current_node = root\n            for item in sorted_transaction:\n                if item in current_node.children:\n                    child = current_node.children[item]\n                else:\n                    child = FPNode(item, current_node)\n                    current_node.children[item] = child\n                    headers[item][0].next = child\n                    headers[item][0] = child\n                child.count += 1\n        return root\n\n    class FPNode:\n\n        def __init__(self, item, parent):\n            self.item = item\n            self.parent = parent\n            self.children = {}\n            self.count = 0\n            self.next = None\n\n    def mine_patterns_with_suffix(tree, headers, min_support, suffix):\n        for header in headers:\n            new_freq_set = [header] + suffix\n            yield new_freq_set\n            conditional_patterns = []\n            node = headers[header][0]\n            while node:\n                path = []\n                parent = node.parent\n                while parent and parent.item is not None:\n                    path.append(parent.item)\n                    parent = parent.parent\n                if len(path) > 0:\n                    conditional_patterns.append((path, node.count))\n                node = node.next\n            if len(conditional_patterns) > 0:\n                (fp_tree, conditional_headers) = build_conditional_fptree(conditional_patterns, min_support)\n                for pattern in mine_patterns_with_suffix(fp_tree, conditional_headers, min_support, new_freq_set):\n                    yield pattern\n\n    def build_conditional_fptree(patterns, min_support):\n        headers = {}\n        all_items_count = Counter()\n        for (pattern, count) in patterns:\n            for item in pattern:\n                all_items_count[item] += count\n        ordered_items = [item for (item, count) in all_items_count.items() if count >= min_support]\n        for item in ordered_items:\n            headers[item] = [FPNode(item, None), FPNode(item, None)]\n        tree = FPNode(None, None)\n        for (pattern, count) in patterns:\n            frequency_sort_pattern = sorted(pattern, key=lambda x: ordered_items.index(x))\n            node = tree\n            for item in frequency_sort_pattern:\n                if item in node.children:\n                    child = node.children[item]\n                else:\n                    child = FPNode(item, node)\n                    node.children[item] = child\n                    headers[item][0].next = child\n                    headers[item][0] = child\n                child.count += count\n        return (tree, headers)\n    if not transactions:\n        return []\n    all_items = Counter()\n    for transaction in transactions:\n        all_items.update(transaction)\n    frequent_items = sorted([item for (item, count) in all_items.items() if count >= min_support], key=lambda x: (-all_items[x], x))\n    headers = defaultdict(lambda : [FPNode(None, None), FPNode(None, None)])\n    for item in frequent_items:\n        headers[item] = [FPNode(item, None), FPNode(item, None)]\n    tree = build_fptree(transactions, headers, min_support)\n    found_patterns = []\n    for pattern in mine_patterns_with_suffix(tree, headers, min_support, []):\n        found_patterns.append(pattern)\n    found_patterns.sort(key=lambda x: (len(x), x))\n    return found_patterns"}
{"task_id": 70, "completion_id": 7, "solution": "from collections import Counter, defaultdict\nfrom typing import List\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in set(transaction):\n            item_counts[item] += 1\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    if not frequent_items:\n        return []\n    transactions = [[item for item in transaction if item in frequent_items] for transaction in transactions]\n    frequent_items = {item: count for (item, count) in sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))}\n    header_table = {item: [0, []] for item in frequent_items}\n    root = FPTreeNode()\n    for transaction in transactions:\n        if transaction:\n            update_tree(root, transaction, header_table)\n    frequent_item_sets = []\n    mine_tree(root, header_table, frequent_item_sets, [], min_support)\n    frequent_item_sets.sort(key=lambda x: (len(x), x))\n    return frequent_item_sets\nclass FPTreeNode:\n\n    def __init__(self, item=None, count=0, parent=None):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.link = None\ntransactions = [['a', 'b', 'e'], ['b', 'c'], ['a', 'c', 'd', 'e'], ['a', 'd', 'e'], ['a', 'b', 'c', 'd'], ['b', 'c', 'd'], ['a', 'b', 'c', 'e'], ['b'], ['a', 'c', 'e'], ['b', 'c', 'd']]\nmin_support = 2"}
{"task_id": 70, "completion_id": 8, "solution": "from collections import Counter, defaultdict\nfrom typing import List\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n\n    def update_tree(frequent_items, transaction, header_table):\n        \"\"\"Update the FP-tree with items in the transaction.\"\"\"\n        sorted_items = [item for item in frequent_items if item in transaction]\n        for item in sorted_items:\n            transaction_node = node_id_map[item]\n            if (child := current[transaction_node]):\n                child.increment_count()\n            else:\n                child = TreeNode(item, 1, current)\n                current.add_child(child)\n                node_id_map[item] = len(nodes)\n                nodes.append(child)\n                if item not in header_table:\n                    header_table[item] = []\n                header_table[item].append(child)\n            current = child\n\n    def build_tree(transactions, min_support):\n        \"\"\"Build the Frequent Pattern tree.\"\"\"\n        header_table = defaultdict(list)\n        for transaction in transactions:\n            update_tree(filtered_items, transaction, header_table)\n        return header_table\n\n    def build_conditional_tree(header_table, item, min_support):\n        \"\"\"Build the conditional FP-tree for each frequent item.\"\"\"\n        suffix_transactions = []\n        for node in header_table[item]:\n            suffix_transaction = []\n            current_node = node.parent\n            while current_node is not root:\n                suffix_transaction.append(current_node.name)\n                current_node = current_node.parent\n            suffix_transaction.reverse()\n            suffix_transactions.append((suffix_transaction, node.count))\n        new_transactions = []\n        for (transaction, count) in suffix_transactions:\n            new_transactions.extend([transaction] * count)\n        return build_tree(new_transactions, min_support)\n\n    def mine_tree(header_table, min_support, prefix):\n        \"\"\"Mine frequent itemsets recursively.\"\"\"\n        frequent_items = [item for item in header_table if header_table[item][-1].count >= min_support]\n        for item in sorted(frequent_items):\n            new_prefix = prefix + [item]\n            frequent_itemsets.append(new_prefix)\n            conditional_tree = build_conditional_tree(header_table, item, min_support)\n            mine_tree(conditional_tree, min_support, new_prefix)\n    root = TreeNode('root', 1)\n    nodes = [root]\n    node_id_map = {}\n    all_items = [item for trans in transactions for item in trans]\n    item_counts = Counter(all_items)\n    filtered_items = [item for item in item_counts if item_counts[item] >= min_support]\n    filtered_items.sort()\n    header_table = build_tree(transactions, min_support)\n    frequent_itemsets = []\n    mine_tree(header_table, min_support, [])\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\nclass TreeNode:\n\n    def __init__(self, name, count, parent):\n        self.name = name\n        self.count = count\n        self.parent = parent\n        self.children = []\n\n    def increment_count(self):\n        self.count += 1\n\n    def add_child(self, child):\n        self.children.append(child)\ntransactions = [['milk', 'bread', 'eggs'], ['milk', 'bread', 'butter'], ['bread', 'butter', 'jam'], ['milk', 'bread', 'butter', 'jam'], ['milk', 'bread', 'eggs']]\nmin_support = 2"}
{"task_id": 70, "completion_id": 9, "solution": "from collections import Counter, defaultdict\nfrom typing import List\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    frequent_items = dict(sorted(frequent_items.items()))\n    if not frequent_items:\n        return []\n    header_table = {}\n    for item in frequent_items.keys():\n        header_table[item] = {'node': None, 'frequency': frequent_items[item]}\n\n    def add_to_tree(item_set, frequency, tree, header_table):\n        if not item_set:\n            return\n        first_item = item_set[0]\n        if first_item not in tree:\n            tree[first_item] = {'count': frequency, 'children': {}}\n            if first_item not in header_table:\n                header_table[first_item] = {'node': tree[first_item], 'frequency': frequency}\n            else:\n                header_table[first_item]['frequency'] += frequency\n        else:\n            tree[first_item]['count'] += frequency\n        add_to_tree(item_set[1:], frequency, tree[first_item]['children'], header_table)\n    sorted_transactions = [[item for item in transaction if item in frequent_items] for transaction in transactions]\n    fp_tree = {}\n    for transaction in sorted_transactions:\n        transaction = [item for item in transaction if item in frequent_items]\n        transaction = sorted(transaction, key=lambda item: frequent_items[item], reverse=True)\n        add_to_tree(transaction, 1, fp_tree, header_table)\n\n    def conditional_pattern_base(item, header_table):\n        \"\"\"Generate the conditional pattern base for an item.\"\"\"\n        patterns = []\n        for (path, node) in find_path(item, header_table):\n            patterns.append(([item for item in path if item != node]['item'], node['count']))\n        return patterns\n\n    def find_path(item, header_table):\n        \"\"\"Traverse the tree for all paths containing `item` and return paths and exit nodes.\"\"\"\n        paths = []\n        to_visit = [(item, header_table[item]['node'])]\n        while to_visit:\n            (path, node) = to_visit.pop()\n            while 'parent' in node:\n                node = node['parent']\n                path = [node['item']] + path\n            paths.append((path, node))\n            if 'children' in node:\n                to_visit.extend([(path, child) for child in node['children'].values()])\n        return paths\n\n    def generate_patterns(tree):\n        \"\"\"Recursively generate frequent item sets.\"\"\"\n        patterns = []\n        items = list(tree.keys())\n        for item in items:\n            conditional_tree = {}\n            patterns.append([item])\n            for (prefix_path, count) in conditional_pattern_base(item, header_table):\n                if len(prefix_path) > 0:\n                    add_to_tree(prefix_path, count, conditional_tree, header_table)\n            if len(conditional_tree) > 0:\n                for pattern in generate_patterns(conditional_tree):\n                    patterns.append([item] + pattern)\n        return patterns\n    patterns = generate_patterns(fp_tree)\n    frequent_itemsets = list(set([tuple(sorted(pattern)) for pattern in patterns]))\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return [list(itemset) for itemset in frequent_itemsets]\ntransactions = [['r', 'z', 'h', 'j', 'p'], ['z', 'y', 'x', 'w', 'v', 'u', 't', 's'], ['z'], ['r', 'x', 'n', 'o', 's'], ['y', 'r', 'x', 'z', 'q', 't', 'p'], ['y', 'z', 'x', 'e', 'q', 's', 't', 'm']]\nmin_support = 2"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n    \n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n    \n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not 1 <= k <= len(X_train):\n        return -1\n    (X_train_np, y_train_np, X_test_np) = (np.array(X_train), np.array(y_train), np.array(X_test))\n\n    def distance(test_point, train_point):\n        \"\"\"Calculate the Euclidean distance without square root.\"\"\"\n        return np.sum((test_point - train_point) ** 2)\n    predictions = []\n    for test_point in X_test_np:\n        distances = np.array([distance(test_point, train_point) for train_point in X_train_np])\n        k_nearest_indices = np.argsort(distances)[:k]\n        k_nearest_labels = y_train_np[k_nearest_indices]\n        label_counts = np.bincount(k_nearest_labels)\n        sorted_counts_indices = np.argsort(-label_counts)\n        prediction = sorted_counts_indices[np.argmax(label_counts[sorted_counts_indices])]\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 75, "completion_id": 1, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1 for all test samples.\n    \"\"\"\n    X_train = np.array(X_train)\n    X_test = np.array(X_test)\n    y_train = np.array(y_train)\n    if not 1 <= k <= X_train.shape[0]:\n        return [-1] * len(X_test)\n    predictions = []\n    for test_sample in X_test:\n        distances = np.sum((X_train - test_sample) ** 2, axis=1)\n        knn_indices = np.argsort(distances)[:k]\n        knn_classes = y_train[knn_indices]\n        (values, counts) = np.unique(knn_classes, return_counts=True)\n        max_count = max(counts)\n        candidates = values[counts == max_count]\n        prediction = min(candidates)\n        predictions.append(prediction)\n    return predictions\nX_train = [[1, 1], [2, 2], [1, 2], [3, 3], [2, 1]]\ny_train = [0, 0, 1, 1, 0]\nX_test = [[1.5, 1.5], [2.5, 2.5]]\nk = 3"}
{"task_id": 75, "completion_id": 2, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not 1 <= k <= len(X_train):\n        return [-1]\n    X_train_np = np.array(X_train)\n    X_test_np = np.array(X_test)\n    y_train_np = np.array(y_train)\n    predictions = []\n    for test_sample in X_test_np:\n        distances_to_test_sample = np.sum((X_train_np - test_sample) ** 2, axis=1)\n        nearest_indices = np.argsort(distances_to_test_sample)[:k]\n        nearest_labels = y_train_np[nearest_indices]\n        (unique_labels, counts) = np.unique(nearest_labels, return_counts=True)\n        max_count = counts.max()\n        top_labels = unique_labels[counts == max_count]\n        predictions.append(int(top_labels.min()))\n    return predictions"}
{"task_id": 75, "completion_id": 3, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not 1 <= k <= len(X_train):\n        return [-1]\n    predictions = []\n    for test_sample in X_test:\n        distances = []\n        for (i, train_sample) in enumerate(X_train):\n            dist = sum([(a - b) ** 2 for (a, b) in zip(test_sample, train_sample)])\n            distances.append((dist, y_train[i]))\n        distances.sort(key=lambda x: x[0])\n        k_nearest_labels = [label for (_, label) in distances[:k]]\n        label_counts = {label: k_nearest_labels.count(label) for label in set(k_nearest_labels)}\n        max_count = max(label_counts.values())\n        candidates = [label for (label, count) in label_counts.items() if count == max_count]\n        predictions.append(min(candidates))\n    return predictions\nX_train = [[1.0, 2.0], [2.0, 1.0], [0.0, 0.0]]\ny_train = [1, 1, 0]\nX_test = [[1.5, 1.5], [0.5, 0.5]]\nk = 2\npredictions = knn_predict(X_train, y_train, X_test, k)"}
{"task_id": 75, "completion_id": 4, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not 1 <= k <= len(X_train):\n        return [-1]\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    predictions = []\n    for test_point in X_test:\n        distances = np.sum((X_train - test_point) ** 2, axis=1)\n        knearest_indices = np.argsort(distances)[:k]\n        knearest_labels = y_train[knearest_indices]\n        (unique_labels, counts) = np.unique(knearest_labels, return_counts=True)\n        most_common = unique_labels[np.argmax(counts)]\n        predictions.append(most_common)\n    return predictions\nX_train = [[1, 2], [2, 3], [3, 4], [4, 5]]\ny_train = [1, 1, 2, 2]\nX_test = [[1.5, 2.5], [3.5, 4.5]]\nk = 3"}
{"task_id": 75, "completion_id": 5, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not 1 <= k <= len(X_train):\n        return -1\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    predictions = []\n    for sample in X_test:\n        distances = np.sum((X_train - sample) ** 2, axis=1)\n        k_indices = np.argsort(distances)[:k]\n        k_nearest_labels = y_train[k_indices]\n        label_counts = np.bincount(k_nearest_labels)\n        max_vote_count = max(label_counts)\n        tied_labels = [i for (i, count) in enumerate(label_counts) if count == max_vote_count]\n        predicted_label = min(tied_labels)\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 75, "completion_id": 6, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n    \n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n    \n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    train = np.array(X_train)\n    test = np.array(X_test)\n    if k < 1 or k > len(X_train):\n        return [-1]\n    predictions = []\n    for x in test:\n        distances = np.sum((train - x) ** 2, axis=1)\n        sorted_indices = np.argsort(distances)[:k]\n        k_nearest_labels = [y_train[i] for i in sorted_indices]\n        vote_counts = {}\n        for label in k_nearest_labels:\n            vote_counts[label] = vote_counts.get(label, 0) + 1\n        max_votes = max(vote_counts.values())\n        prediction = min([key for (key, value) in vote_counts.items() if value == max_votes])\n        predictions.append(prediction)\n    return predictions\nX_train = [[1, 2], [2, 3], [3, 3], [2, 1], [3, 2], [4, 5]]\ny_train = [0, 0, 0, 1, 1, 1]\nX_test = [[2, 2], [4, 4]]\nk = 3"}
{"task_id": 75, "completion_id": 7, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not 1 <= k <= len(X_train):\n        return -1\n    X_train = np.array(X_train)\n    X_test = np.array(X_test)\n    y_train = np.array(y_train)\n    pred_labels = []\n    for test_vector in X_test:\n        dists = np.sum((X_train - test_vector) ** 2, axis=1)\n        kneighbors_idx = np.argsort(dists)[:k]\n        kneighbor_labels = y_train[kneighbors_idx]\n        (labels, counts) = np.unique(kneighbor_labels, return_counts=True)\n        max_count_idx = np.argmax(counts)\n        predicted_label = labels[max_count_idx]\n        pred_labels.append(predicted_label)\n    return pred_labels\nX_train = [[1, 1], [1, 2], [2, 2], [2, 3], [3, 4], [4, 4]]\ny_train = [0, 0, 1, 1, 2, 2]\nX_test = [[1.5, 2.5], [4.5, 5]]\nk = 3"}
{"task_id": 75, "completion_id": 8, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid, return -1.\n    \"\"\"\n    if not (isinstance(k, int) and 1 <= k <= len(X_train)):\n        return -1\n    X_train_np = np.array(X_train)\n    X_test_np = np.array(X_test)\n    distances = np.sum(X_test_np[:, np.newaxis, :] ** 2, axis=2) - 2 * np.dot(X_test_np, X_train_np.T) + np.sum(X_train_np[np.newaxis, :, :] ** 2, axis=2)\n    k_nearest_indices = np.argsort(distances, axis=1)[:, :k]\n    predictions = []\n    for indices in k_nearest_indices:\n        classes = [y_train[i] for i in indices]\n        count = np.bincount(classes)\n        most_common = np.array([i for (i, c) in enumerate(count) if c == np.max(count)])\n        predictions.append(most_common[0])\n    return predictions\nX_train = [[1.0, 2.0], [4.0, 6.0], [2.0, 2.0], [4.0, 4.0]]\ny_train = [0, 1, 0, 1]\nX_test = [[3.0, 3.0]]\nk = 3"}
{"task_id": 75, "completion_id": 9, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if k < 1 or k > len(y_train):\n        return [-1]\n    np_X_train = np.array(X_train)\n    np_y_train = np.array(y_train)\n    np_X_test = np.array(X_test)\n    distances = np.sum((np_X_train[:, None, :] - np_X_test[None, :, :]) ** 2, axis=2)\n    indices = np.argpartition(distances, kth=k, axis=0)[:k, :]\n    closest_classes = np_y_train[indices]\n    (unique_classes, class_counts) = np.unique(closest_classes, return_counts=True, axis=0)\n    vote_winner_indices = class_counts.argmax(axis=0)\n    predicted_classes = unique_classes[vote_winner_indices]\n    return predicted_classes.tolist()\nX_train = [[2, 2], [2, 2], [2, 2], [8, 9], [8, 9], [8, 9]]\ny_train = [0, 0, 0, 1, 1, 1]\nX_test = [[3, 3], [4, 4]]\nk = 3"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n    \n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n        \n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(y_pred.dtype).eps\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(loss, 4)"}
{"task_id": 76, "completion_id": 1, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1.0 - epsilon)\n    loss = -np.sum(y * np.log(y_pred))\n    return round(loss, 4)\ny = [[1, 0], [0, 1]]\ny_pred = [[0.01, 0.99], [0.9, 0.1]]"}
{"task_id": 76, "completion_id": 2, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | np.ndarray, y_pred: list | np.ndarray) -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    loss = -np.sum(y * np.log(y_pred))\n    return round(loss, 4)"}
{"task_id": 76, "completion_id": 3, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | np.ndarray, y_pred: list | np.ndarray) -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(y_pred.dtype).eps\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(loss, 4)"}
{"task_id": 76, "completion_id": 4, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | np.ndarray, y_pred: list | np.ndarray) -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(y_pred.dtype).eps\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(loss, 4)\ny_pred = [[0.7, 0.2, 0.1], [0.2, 0.6, 0.2], [0.1, 0.1, 0.8]]"}
{"task_id": 76, "completion_id": 5, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y_np = np.array(y)\n    y_pred_np = np.array(y_pred)\n    epsilon = np.finfo(y_pred_np.dtype).eps\n    loss = -np.sum(y_np * np.log(y_pred_np + epsilon))\n    return round(loss, 4)\ny = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\ny_pred = [[0.9, 0.05, 0.05], [0.1, 0.8, 0.1], [0.1, 0.1, 0.8]]"}
{"task_id": 76, "completion_id": 6, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    loss = -np.sum(y * np.log(y_pred))\n    return round(loss, 4)\ny_pred = [[0.7, 0.2, 0.1], [0.2, 0.6, 0.2], [0.1, 0.1, 0.8]]"}
{"task_id": 76, "completion_id": 7, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1.0 - epsilon)\n    loss = -np.sum(y * np.log(y_pred))\n    return round(loss, 4)"}
{"task_id": 76, "completion_id": 8, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(y_pred.dtype).eps\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(loss, 4)\ny_pred = [[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.2, 0.2, 0.6]]"}
{"task_id": 76, "completion_id": 9, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    assert y.shape == y_pred.shape\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    loss = -np.sum(y * np.log(y_pred))\n    return round(loss, 4)\ny = [[1, 0], [0, 1]]\ny_pred = [[0.7, 0.3], [0.2, 0.8]]"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple[list, list]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    tuple[list, list]\n        The final activation AL rounded to 4 decimals and the caches list.\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        (A, cache) = linear_activation_forward(A_prev, parameters['W' + str(l)], parameters['b' + str(l)], activation='relu')\n        caches.append(cache)\n    (AL, cache) = linear_activation_forward(A, parameters['W' + str(L)], parameters['b' + str(L)], activation='sigmoid')\n    caches.append(cache)\n    AL_list = np.around(AL, decimals=4).tolist()\n    return (AL_list, caches)\ndef linear_activation_forward(A_prev, W, b, activation):\n    \"\"\"\n    Implement the forward propagation for the LINEAR->ACTIVATION layer.\n    \n    Parameters:\n    A_prev (np.ndarray) -- activations from previous layer\n    W (np.ndarray) -- weights matrix, shape (size of current layer, size of prev)\n    b (np.ndarray) -- bias vector, shape (size of current layer, 1)\n    activation (str) -- the activation function to be used in this layer\n    \n    Returns:\n    A (np.ndarray) -- the output of the activation function, also called the post-activation value \n    cache (tuple) -- contains pre-activation and post-activation values\n    \"\"\"\n    Z = np.dot(W, A_prev) + b\n    linear_cache = (A_prev, W, b)\n    if activation == 'sigmoid':\n        (A, activation_cache) = sigmoid(Z)\n    elif activation == 'relu':\n        (A, activation_cache) = relu(Z)\n    cache = (linear_cache, activation_cache)\n    return (A, cache)\ndef relu(Z):\n    \"\"\"\n    Implement the RELU function.\n    \"\"\"\n    A = np.maximum(0, Z)\n    activation_cache = Z\n    return (A, activation_cache)\ndef sigmoid(Z):\n    \"\"\"\n    Implement the SIGMOID function.\n    \"\"\"\n    A = 1 / (1 + np.exp(-Z))\n    activation_cache = Z\n    return (A, activation_cache)\nX = np.random.rand(784, 10)\nparameters = {'W1': np.random.rand(128, 784), 'b1': np.random.rand(128, 1), 'W2': np.random.rand(64, 128), 'b2': np.random.rand(64, 1), 'W3': np.random.rand(1, 64), 'b3': np.random.rand(1, 1)}"}
{"task_id": 77, "completion_id": 1, "solution": "import numpy as np\ndef relu(Z):\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\ndef sigmoid(Z):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\ndef linear_forward(A, W, b):\n    \"\"\"Linear forward step.\"\"\"\n    Z = np.dot(W, A) + b\n    cache = (A, W, b)\n    return (Z, cache)\ndef linear_activation_forward(A_prev, W, b, activation):\n    \"\"\"Linear forward followed by activation.\"\"\"\n    if activation == 'relu':\n        (Z, linear_cache) = linear_forward(A_prev, W, b)\n        (A, activation_cache) = (relu(Z), Z)\n        cache = (linear_cache, activation_cache)\n    elif activation == 'sigmoid':\n        (Z, linear_cache) = linear_forward(A_prev, W, b)\n        (A, activation_cache) = (sigmoid(Z), Z)\n        cache = (linear_cache, activation_cache)\n    else:\n        raise ValueError('Activation function not recognized')\n    return (A, cache)\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]):\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        (A, cache) = linear_activation_forward(A_prev, parameters['W' + str(l)], parameters['b' + str(l)], activation='relu')\n        caches.append(cache)\n    (AL, cache) = linear_activation_forward(A, parameters['W' + str(L)], parameters['b' + str(L)], activation='sigmoid')\n    caches.append(cache)\n    return ([np.round(AL, 4).tolist()], caches)"}
{"task_id": 77, "completion_id": 2, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple[list[float], list]:\n\n    def linear_forward(A_prev, W, b):\n        Z = np.dot(W, A_prev) + b\n        return Z\n\n    def linear_activation_forward(A_prev, W, b, activation):\n        Z = linear_forward(A_prev, W, b)\n        linear_cache = (A_prev, W, b)\n        if activation == 'relu':\n            A = np.maximum(0, Z)\n        elif activation == 'sigmoid':\n            A = 1 / (1 + np.exp(-Z))\n        cache = (linear_cache, Z)\n        return (A, cache)\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        (A, cache) = linear_activation_forward(A_prev, parameters[f'W{l}'], parameters[f'b{l}'], activation='relu')\n        caches.append(cache)\n    (AL, cache) = linear_activation_forward(A, parameters[f'W{L}'], parameters[f'b{L}'], activation='sigmoid')\n    caches.append(cache)\n    AL = AL.tolist()\n    return (AL, caches)"}
{"task_id": 77, "completion_id": 3, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> (list, list):\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        A tuple containing the final activation AL rounded to 4 decimals and \n        converted to a plain Python list and a list of caches for each layer.\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        (A, cache) = linear_activation_forward(A_prev, parameters['W' + str(l)], parameters['b' + str(l)], activation='relu')\n        caches.append(cache)\n    (AL, cache) = linear_activation_forward(A, parameters['W' + str(L)], parameters['b' + str(L)], activation='sigmoid')\n    caches.append(cache)\n    AL_list = [list(map(lambda x: round(x, 4), row)) for row in AL.tolist()]\n    return (AL_list, caches)\ndef linear_forward(A, W, b):\n    \"\"\"\n    Implement the linear part of a layer's forward propagation.\n    \n    Arguments:\n    A -- activations from previous layer (or input data): (size of previous layer, number of examples)\n    W -- weights matrix: numpy array of shape (size of current layer, size of previous layer)\n    b -- bias vector, numpy array of shape (size of the current layer, 1)\n\n    Returns:\n    Z -- the input of the activation function, also called pre-activation parameter \n    cache -- a python tuple containing \"A\", \"W\" and \"b\" ; stored for computing the backward pass efficiently\n    \"\"\"\n    Z = np.dot(W, A) + b\n    cache = (A, W, b)\n    return (Z, cache)\ndef relu(Z):\n    \"\"\"\n    Implement the RELU function.\n    Arguments:\n    Z -- Output of the linear layer, of any shape\n    Returns:\n    A -- Post-ReLU activation\n    \"\"\"\n    A = np.maximum(0, Z)\n    return A\ndef sigmoid(Z):\n    \"\"\"\n    Implement the sigmoid activation in numpy.\n    Arguments:\n    Z -- numpy array of any shape\n    Returns:\n    A -- output of sigmoid(z), same shape as Z\n    \"\"\"\n    A = 1 / (1 + np.exp(-Z))\n    return A\ndef linear_activation_forward(A_prev, W, b, activation):\n    \"\"\"\n    Implement the forward propagation for the LINEAR->ACTIVATION layer\n\n    Arguments:\n    A_prev -- activations from previous layer (or input data): (size of previous layer, number of examples)\n    W -- weights matrix: numpy array of shape (size of current layer, size of previous layer)\n    b -- bias vector, numpy array of shape (size of the current layer, 1)\n    activation -- the activation to be used in this layer, stored as a text string: \"sigmoid\" or \"relu\"\n\n    Returns:\n    A -- the output of the activation function, also called the post-activation value \n    cache -- a python tuple containing \"linear_cache\" and \"activation_cache\";\n             stored for computing the backward pass efficiently\n    \"\"\"\n    if activation == 'sigmoid':\n        (Z, linear_cache) = linear_forward(A_prev, W, b)\n        A = sigmoid(Z)\n    elif activation == 'relu':\n        (Z, linear_cache) = linear_forward(A_prev, W, b)\n        A = relu(Z)\n    assert A.shape == (W.shape[0], A_prev.shape[1])\n    activation_cache = Z\n    cache = (linear_cache, activation_cache)\n    return (A, cache)\nparameters = {'W1': np.array([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]), 'b1': np.array([[0.0], [0.0], [0.0]]), 'W2': np.array([[7.0], [8.0], [9.0]]), 'b2': np.array([[0.0]])}\nX = np.array([[0.1, 0.8], [0.05, 0.9]])"}
{"task_id": 77, "completion_id": 4, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L + 1):\n        A_prev = A\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A_prev) + b\n        if l == L:\n            AL = 1 / (1 + np.exp(-Z))\n            activation = 'sigmoid'\n        else:\n            AL = np.maximum(0, Z)\n            activation = 'relu'\n        cache = (A_prev, W, b, Z)\n        caches.append(cache)\n        A = AL\n    return (AL.round(4).tolist(), caches)"}
{"task_id": 77, "completion_id": 5, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"\n    Performs forward propagation for an L-layer neural network (ReLU...ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1...WL and b1...bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        W = parameters['W' + str(l)]\n        b = parameters['b' + str(l)]\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        caches.append((A_prev, W, b, Z))\n    W_L = parameters['W' + str(L)]\n    b_L = parameters['b' + str(L)]\n    Z_L = np.dot(W_L, A) + b_L\n    A_L = sigmoid(Z_L)\n    caches.append((A, W_L, b_L, Z_L))\n    return ([list(map(lambda x: round(x, 4), A_L.tolist()[0]))], caches)\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the ReLU activation function element-wise to Z.\n\n    Parameters:\n    Z (np.ndarray): An input array.\n\n    Returns:\n    A (np.ndarray): Output array of the same shape as Z.\n    \"\"\"\n    return np.maximum(0, Z)\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Applies the sigmoid activation function element-wise to Z.\n\n    Parameters:\n    Z (np.ndarray): An input array.\n\n    Returns:\n    A (np.ndarray): Output array of the same shape as Z.\n    \"\"\"\n    return 1 / (1 + np.exp(-Z))\nX = np.array([[0.1, 0.2], [0.3, 0.4]])\nparameters = {'W1': np.array([[0.2, 0.3], [0.1, 0.5]]), 'b1': np.array([[0.1], [0.2]]), 'W2': np.array([[0.4], [0.1]]), 'b2': np.array([[0.3]])}"}
{"task_id": 77, "completion_id": 6, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple[list[float], list]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU -> Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    tuple[list[float], list]\n        A tuple containing the final activation AL rounded to 4 decimals and converted to a plain Python list, and a list of caches for each layer.\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        Z = np.dot(parameters['W' + str(l)], A_prev) + parameters['b' + str(l)]\n        A = relu(Z)\n        caches.append((A_prev, Z))\n    Z = np.dot(parameters['W' + str(L)], A) + parameters['b' + str(L)]\n    AL = sigmoid(Z)\n    caches.append((A, Z))\n    AL_rounded = [round(item, 4) for item in AL.tolist()[0]]\n    return (AL_rounded, caches)\ndef relu(Z):\n    return np.maximum(0, Z)\ndef sigmoid(Z):\n    return 1 / (1 + np.exp(-Z))"}
{"task_id": 77, "completion_id": 7, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple[list[list[float]], list]:\n    \"\"\"\n    Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    tuple[list[list[float]], list]\n        The final activation AL and a list of caches for each layer.\n        The final activation AL is rounded to 4 decimals and converted to a plain Python list.\n        The shape is (1, m).\n    \"\"\"\n    L = len(parameters) // 2\n    caches = []\n    A = X\n    for l in range(1, L):\n        A_prev = A\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        cache = (A_prev, W, b, Z)\n        caches.append(cache)\n    W = parameters[f'W{L}']\n    b = parameters[f'b{L}']\n    Z = np.dot(W, A) + b\n    AL = sigmoid(Z)\n    cache = (A, W, b, Z)\n    caches.append(cache)\n    AL_list = [[round(num, 4) for num in sublist] for sublist in AL.tolist()]\n    return (AL_list, caches)\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))"}
{"task_id": 77, "completion_id": 8, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple[list[float], list[dict[str, np.ndarray]]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[float], list[dict[str, np.ndarray]]\n        The final activation AL rounded to 4 decimals, and the cache for each layer.\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        W = parameters['W' + str(l)]\n        b = parameters['b' + str(l)]\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        cache = {'Z': Z, 'A': A}\n        caches.append(cache)\n    W = parameters['W' + str(L)]\n    b = parameters['b' + str(L)]\n    Z = np.dot(W, A) + b\n    AL = sigmoid(Z)\n    cache = {'Z': Z, 'A': AL}\n    caches.append(cache)\n    AL_rounded = AL.round(4).tolist()\n    return (AL_rounded[0], caches)\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"ReLU activation function\"\"\"\n    return np.maximum(0, Z)\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Sigmoid activation function\"\"\"\n    return 1 / (1 + np.exp(-Z))"}
{"task_id": 77, "completion_id": 9, "solution": "import numpy as np\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Implements the ReLU activation function for a given input matrix.\n\n    Parameters\n    ----------\n    Z : np.ndarray\n        Input matrix.\n\n    Returns\n    -------\n    np.ndarray\n        The output matrix after applying the ReLU activation function.\n    \"\"\"\n    return np.maximum(0, Z)\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Implements the sigmoid activation function for a given input matrix.\n\n    Parameters\n    ----------\n    Z : np.ndarray\n        Input matrix.\n\n    Returns\n    -------\n    np.ndarray\n        The output matrix after applying the sigmoid activation function.\n    \"\"\"\n    return 1 / (1 + np.exp(-Z))\ndef linear_forward(A: np.ndarray, W: np.ndarray, b: np.ndarray) -> tuple:\n    \"\"\"\n    Implements the linear forward propagation function.\n\n    Parameters\n    ----------\n    A : np.ndarray\n        Activations from the previous layer.\n    W : np.ndarray\n        Weight matrix for the current layer.\n    b : np.ndarray\n        Bias vector for the current layer.\n\n    Returns\n    -------\n    tuple\n        The output matrix Z and a cache containing the inputs A, W, b for the backpropagation process.\n    \"\"\"\n    Z = np.dot(W, A) + b\n    cache = (A, W, b)\n    return (Z, cache)\ndef linear_activation_forward(A_prev: np.ndarray, W: np.ndarray, b: np.ndarray, activation: str) -> tuple:\n    \"\"\"\n    Implements the forward propagation for a layer with an activation function.\n\n    Parameters\n    ----------\n    A_prev : np.ndarray\n        Activations from the previous layer.\n    W : np.ndarray\n        Weight matrix for the current layer.\n    b : np.ndarray\n        Bias vector for the current layer.\n    activation : str\n        The activation function to use ('relu' | 'sigmoid').\n\n    Returns\n    -------\n    tuple\n        The output matrix A and a cache containing the Z (preactivations) and the A, W, b cache for backpropagation.\n    \"\"\"\n    (Z, linear_cache) = linear_forward(A_prev, W, b)\n    if activation == 'relu':\n        A = relu(Z)\n    elif activation == 'sigmoid':\n        A = sigmoid(Z)\n    else:\n        raise ValueError('Activation function not supported')\n    activation_cache = Z\n    cache = (linear_cache, activation_cache)\n    return (A, cache)\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple[np.ndarray, list]:\n    \"\"\"\n    Implements forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    tuple[np.ndarray, list]\n        The final activation AL and a list containing the caches for each layer.\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        (A, cache) = linear_activation_forward(A_prev, parameters[f'W{l}'], parameters[f'b{l}'], 'relu')\n        caches.append(cache)\n    (AL, cache) = linear_activation_forward(A, parameters[f'WL'], parameters[f'bL'], 'sigmoid')\n    caches.append(cache)\n    AL = np.round(AL, decimals=4)\n    AL_list = AL.tolist()\n    return (AL_list, caches)\nX = np.array([[0.5, -0.2], [0.1, 0.9]])\nparameters = {'W1': np.array([[0.2, -0.3], [-0.1, 0.5]]), 'b1': np.array([[0.1], [-0.2]]), 'W2': np.array([[0.4], [-0.3]]), 'b2': np.array([[0.1]])}"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    assert A2.shape == Y.shape, 'A2 and Y must have the same shape.'\n    m = Y.shape[1 if len(Y.shape) > 1 else 0]\n    eps = 1e-15\n    A2 = np.clip(A2, eps, 1 - eps)\n    cost = -(1 / m) * np.sum(Y * np.log(A2) + (1 - Y) * np.log(1 - A2))\n    return round(float(cost), 6)\nA2 = np.array([[0.3, 0.7, 0.95]])\nY = np.array([[0, 1, 0]])"}
{"task_id": 81, "completion_id": 1, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2 = np.clip(A2, epsilon, 1 - epsilon)\n    m = Y.shape[1] if Y.ndim > 1 else Y.size\n    cost = -1 / m * np.sum(Y * np.log(A2) + (1 - Y) * np.log(1 - A2))\n    return round(cost, 6)"}
{"task_id": 81, "completion_id": 2, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    m = Y.shape[1] if Y.ndim == 2 else Y.size\n    A2_clipped = np.clip(A2, 1e-15, 1 - 1e-15)\n    logloss = np.multiply(Y, np.log(A2_clipped)) + np.multiply(1 - Y, np.log(1 - A2_clipped))\n    cost = -1 / m * np.sum(logloss)\n    return round(cost, 6)"}
{"task_id": 81, "completion_id": 3, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    log_loss = Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped)\n    m = Y.shape[1] if len(Y.shape) > 1 else Y.size\n    cost = -np.sum(log_loss) / m\n    return np.round(cost, decimals=6)"}
{"task_id": 81, "completion_id": 4, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n    \n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2 = np.clip(A2, epsilon, 1 - epsilon)\n    m = Y.shape[1] if Y.ndim == 2 else Y.size\n    cost = -1 / m * np.sum(Y * np.log(A2) + (1 - Y) * np.log(1 - A2))\n    return round(cost, 6)"}
{"task_id": 81, "completion_id": 5, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    m = Y.shape[1] if len(Y.shape) > 1 else Y.size\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    cost = -np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped)) / m\n    return round(cost, 6)"}
{"task_id": 81, "completion_id": 6, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    m = Y.shape[1] if Y.ndim == 2 else Y.size\n    A2_clipped = np.clip(A2, 1e-15, 1 - 1e-15)\n    cost = -1 / m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return round(cost, 6)\nA2 = np.array([[0.2, 0.6, 0.9, 0.4]])\nY = np.array([[0, 1, 1, 0]])\ncost = compute_cost(A2, Y)"}
{"task_id": 81, "completion_id": 7, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    A2 = A2.reshape(Y.shape)\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    m = Y.shape[1] if Y.ndim == 2 else Y.size\n    cost = -np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped)) / m\n    return round(cost, 6)\nA2 = np.array([[0.2, 0.6, 0.8, 0.1]])\nY = np.array([[0, 1, 1, 0]])"}
{"task_id": 81, "completion_id": 8, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    m = Y.shape[1] if Y.ndim == 2 else Y.size\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    cost = -(1 / m) * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return np.round(cost, 6)\nA2 = np.array([[0.9, 0.1, 0.8, 0.7]])\nY = np.array([[1, 0, 1, 0]])\ncost = compute_cost(A2, Y)"}
{"task_id": 81, "completion_id": 9, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    m = Y.shape[1] if len(Y.shape) > 1 else Y.size\n    cost = -1 / m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return round(cost, 6)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    n = len(Q)\n    greedy_index = np.argmax(Q)\n    base_prob = epsilon / n\n    greedy_prob = 1 - epsilon + base_prob\n    p = [base_prob] * n\n    p[greedy_index] = greedy_prob\n    p_rounded = [round(prob, 4) for prob in p]\n    total = sum(p_rounded)\n    if not np.isclose(total, 1.0, atol=1e-12):\n        p_rounded[greedy_index] += 1 - total\n    return p_rounded\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 1, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_index = np.argmax(Q)\n    base_prob = epsilon / n\n    greedy_prob = 1 - epsilon + base_prob\n    probs = [base_prob] * n\n    probs[greedy_index] = greedy_prob\n    total = sum(probs)\n    if not np.isclose(total, 1, atol=1e-12):\n        adjustment = (1 - total) / n\n        probs = [p + adjustment for p in probs]\n    return [round(p, 4) for p in probs]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 2, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | np.ndarray, epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    n = len(Q)\n    action_values = np.array(Q)\n    greedy_action_idx = np.argmax(action_values)\n    base_prob = epsilon / n\n    max_action_prob = 1 - epsilon + base_prob\n    probs = [base_prob] * n\n    probs[greedy_action_idx] = max_action_prob\n    probs = [round(p, 4) for p in probs]\n    if sum(probs) != 1:\n        probs[greedy_action_idx] += 1 - sum(probs)\n    return probs\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 3, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    n = len(Q)\n    Q = np.array(Q)\n    best_action_index = np.argmax(Q)\n    base_prob = epsilon / n\n    policy_probs = np.full(n, base_prob)\n    policy_probs[best_action_index] += 1 - epsilon\n    policy_probs = np.round(policy_probs, 4)\n    if np.sum(policy_probs) != 1.0:\n        diff = 1.0 - np.sum(policy_probs)\n        policy_probs[np.argmax(policy_probs)] += diff\n    return list(policy_probs)"}
{"task_id": 82, "completion_id": 4, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    base = epsilon / n\n    greedy_index = np.argmax(Q)\n    probabilities = [base] * n\n    probabilities[greedy_index] = 1 - epsilon + base\n    probabilities = [round(p, 4) for p in probabilities]\n    sum_probs = sum(probabilities)\n    if round(sum_probs, 12) != 1:\n        probabilities[greedy_index] += 1 - sum_probs\n    return probabilities"}
{"task_id": 82, "completion_id": 5, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q_values = np.array(Q)\n    n_actions = Q_values.shape[0]\n    greedy_action_index = np.argmax(Q_values)\n    base_prob = epsilon / n_actions\n    prob_greedy_action = 1 - epsilon + base_prob\n    output_probs = [base_prob] * n_actions\n    output_probs[greedy_action_index] = prob_greedy_action\n    output_probs = np.round(output_probs, decimals=4)\n    if np.sum(output_probs) != 1.0:\n        output_probs[greedy_action_index] += 1.0 - np.sum(output_probs)\n    return output_probs.tolist()"}
{"task_id": 82, "completion_id": 6, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | np.ndarray, epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    n = len(Q)\n    greedy_action = np.argmax(Q)\n    base_prob = epsilon / n\n    probs = [round(base_prob, 4) for _ in range(n)]\n    probs[greedy_action] = round(1 - epsilon + base_prob, 4)\n    if sum(probs) < 1 - 1e-12:\n        probs[greedy_action] += 1 - sum(probs)\n    return probs\nQ = [1.0]\nepsilon = 0.0"}
{"task_id": 82, "completion_id": 7, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | np.ndarray, epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    n = len(Q)\n    greedy_action = np.argmax(Q)\n    base_prob = epsilon / n\n    optimal_prob = 1 - epsilon + base_prob\n    Q_probs = [base_prob] * n\n    Q_probs[greedy_action] = optimal_prob\n    return [round(p, 4) for p in Q_probs]\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 8, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n    \n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n    \n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    n = len(Q)\n    greedy_index = Q.index(max(Q))\n    base_prob = epsilon / n\n    prob_list = [round(base_prob, 4) for _ in range(n)]\n    prob_list[greedy_index] += 1 - epsilon\n    prob_list[greedy_index] = round(prob_list[greedy_index], 4)\n    assert np.isclose(sum(prob_list), 1, atol=1e-12)\n    return prob_list"}
{"task_id": 82, "completion_id": 9, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    n = len(Q)\n    greedy_action_index = np.argmax(Q)\n    base_prob = epsilon / n\n    greedy_action_prob = 1 - epsilon + base_prob\n    probabilities = [base_prob] * n\n    probabilities[greedy_action_index] = greedy_action_prob\n    probabilities = [round(prob, 4) for prob in probabilities]\n    return probabilities\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import List, Union\ndef aggregate_random_forest_votes(predictions: List[List[Union[int, float, str]]]) -> List[Union[int, float, str]]:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    transposed_predictions = list(zip(*predictions))\n    aggregated_predictions = []\n    for sample_votes in transposed_predictions:\n        vote_counts = Counter(sample_votes)\n        most_common_vote = min(vote_counts.items(), key=lambda x: (-x[1], x[0]))\n        aggregated_predictions.append(most_common_vote[0])\n    return aggregated_predictions"}
{"task_id": 86, "completion_id": 1, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n    \n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    aggregated_votes = []\n    for sample in range(num_samples):\n        sample_votes = [tree[sample] for tree in predictions]\n        vote_count = Counter(sample_votes)\n        highest_vote_count = max(vote_count.values())\n        winning_classes = [cls for (cls, count) in vote_count.items() if count == highest_vote_count]\n        aggregated_votes.append(min(winning_classes))\n    return aggregated_votes\npredictions = [[1, 2, 3, 1, 2], [1, 3, 3, 2, 2], [2, 2, 2, 1, 2], [1, 1, 3, 2, 2], [1, 2, 3, 1, 1]]"}
{"task_id": 86, "completion_id": 2, "solution": "from collections import Counter\nfrom typing import List, Union\ndef aggregate_random_forest_votes(predictions: List[List[Union[int, float, str]]]) -> List:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    transposed_predictions = list(zip(*predictions))\n    aggregated_predictions = []\n    for sample_votes in transposed_predictions:\n        vote_count = Counter(sample_votes)\n        (label, _) = vote_count.most_common(1)[0]\n        aggregated_predictions.append(label)\n    return aggregated_predictions"}
{"task_id": 86, "completion_id": 3, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    transposed_predictions = list(zip(*predictions))\n    aggregated_votes = []\n\n    def custom_sort(tup):\n        return (-tup[0], tup[1])\n    for sample_votes in transposed_predictions:\n        vote_counter = Counter(sample_votes)\n        most_common_votes = sorted(vote_counter.items(), key=custom_sort)\n        aggregated_votes.append(most_common_votes[0][0])\n    return aggregated_votes\npredictions = [['A', 'B', 'A', 'C'], ['B', 'A', 'A', 'A'], ['A', 'B', 'B', 'C']]"}
{"task_id": 86, "completion_id": 4, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    transposed_predictions = list(zip(*predictions))\n    final_predictions = []\n    for sample_votes in transposed_predictions:\n        vote_counts = Counter(sample_votes)\n        predicted_class = min(vote_counts, key=lambda k: (-vote_counts[k], k))\n        final_predictions.append(predicted_class)\n    return final_predictions"}
{"task_id": 86, "completion_id": 5, "solution": "from collections import Counter\nfrom typing import Union, List\ndef aggregate_random_forest_votes(predictions: List[List[Union[int, float, str]]]) -> List[Union[int, float, str]]:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n    \n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n    \n    Returns\n    -------\n    list[Union[int, float, str]]\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    n_samples = len(predictions[0])\n    aggregated_predictions = []\n    for i in range(n_samples):\n        column_votes = [row[i] for row in predictions]\n        vote_counter = Counter(column_votes)\n        most_common_count = vote_counter.most_common(1)[0][1]\n        most_common_items = [item for (item, count) in vote_counter.items() if count == most_common_count]\n        final_prediction = min(most_common_items)\n        aggregated_predictions.append(final_prediction)\n    return aggregated_predictions"}
{"task_id": 86, "completion_id": 6, "solution": "from collections import Counter\nfrom typing import List, Union\ndef aggregate_random_forest_votes(predictions: List[List[Union[int, float, str]]]) -> List[Union[int, float, str]]:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    transposed_predictions = list(zip(*predictions))\n    aggregated_predictions = []\n    for sample_predictions in transposed_predictions:\n        counter = Counter(sample_predictions)\n        aggregated_predictions.append(min(counter, key=lambda x: (-counter[x], x)))\n    return aggregated_predictions\npredictions = [['a', 'b', 'a', 'b', 'c'], ['a', 'a', 'a', 'c', 'b'], ['c', 'b', 'a', 'b', 'a']]"}
{"task_id": 86, "completion_id": 7, "solution": "from collections import Counter\nfrom typing import List, Union\ndef aggregate_random_forest_votes(predictions: List[List[Union[int, float, str]]]) -> List[Union[int, float, str]]:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    transposed_predictions = list(zip(*predictions))\n    aggregated_predictions = []\n    for sample_votes in transposed_predictions:\n        vote_counts = Counter(sample_votes)\n        most_common = vote_counts.most_common()\n        aggregated_predictions.append(most_common[0][0])\n    return aggregated_predictions\npredictions = [['A', 'B', 'C', 'B'], ['B', 'B', 'A', 'C'], ['C', 'A', 'A', 'B'], ['A', 'B', 'B', 'C'], ['B', 'B', 'A', 'B']]"}
{"task_id": 86, "completion_id": 8, "solution": "from collections import Counter\nfrom typing import List, Union\ndef aggregate_random_forest_votes(predictions: List[List[Union[int, float, str]]]) -> List[Union[int, float, str]]:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n    \n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    n_samples = len(predictions[0])\n    aggregated_predictions = []\n    for sample_idx in range(n_samples):\n        vote_counts = Counter()\n        for tree_predictions in predictions:\n            vote_counts[tree_predictions[sample_idx]] += 1\n        highest_vote = max(vote_counts.values())\n        majority_class = min([label for (label, count) in vote_counts.items() if count == highest_vote])\n        aggregated_predictions.append(majority_class)\n    return aggregated_predictions\npredictions = [[1, 2, 1, 1], [1, 3, 1, 2], [2, 2, 2, 3], [1, 3, 3, 1]]"}
{"task_id": 86, "completion_id": 9, "solution": "from collections import Counter\nfrom typing import List, Union\ndef aggregate_random_forest_votes(predictions: List[List[Union[int, float, str]]]) -> List[Union[int, float, str]]:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n\n    def majority_vote(sample_votes: List[Union[int, float, str]]) -> Union[int, float, str]:\n        \"\"\"Helper function to determine the majority vote for a given sample's votes.\"\"\"\n        count = Counter(sample_votes)\n        highest = max(count.items(), key=lambda x: (x[1], -x[0] if isinstance(x[0], (int, float)) else x[0]))\n        return highest[0]\n    transposed_predictions = list(zip(*predictions))\n    return [majority_vote(sample) for sample in transposed_predictions]\npredictions = [['A', 'B', 'A', 'C', 'A'], ['A', 'B', 'B', 'C', 'A'], ['B', 'B', 'A', 'C', 'B'], ['A', 'A', 'A', 'C', 'A']]"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return round(np.logaddexp(0.0, z), 4)\n    else:\n        arr = np.array(z)\n        softplus_values = np.round(np.logaddexp(0.0, arr), 4)\n        return softplus_values.tolist()"}
{"task_id": 88, "completion_id": 1, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_array = np.array(z)\n    result = np.logaddexp(0.0, z_array)\n    result_rounded = np.round(result, decimals=4)\n    if z_array.size == 1:\n        return result_rounded.item()\n    else:\n        return result_rounded.tolist()\nz = np.array([-1000, 0, 3])"}
{"task_id": 88, "completion_id": 2, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z = np.asarray(z)\n    result = np.logaddexp(0.0, z)\n    result = np.round(result, 4)\n    if result.size == 1:\n        return float(result)\n    else:\n        return result.tolist()\nz = np.array([-1000, 0, 3])"}
{"task_id": 88, "completion_id": 3, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    array_z = np.atleast_1d(z)\n    result = np.round(np.logaddexp(0.0, array_z), 4)\n    if isinstance(z, (list, np.ndarray)):\n        return result.tolist()\n    else:\n        return result.item()"}
{"task_id": 88, "completion_id": 4, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z = np.asarray(z)\n    result = np.logaddexp(0.0, z)\n    result = np.round(result, decimals=4)\n    if z.shape == ():\n        return float(result)\n    else:\n        return result.tolist()\nz = np.array([-1000, 0, 3])"}
{"task_id": 88, "completion_id": 5, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_array = np.asarray(z)\n    result = np.logaddexp(0.0, z_array)\n    result = np.around(result, 4)\n    if isinstance(z, np.ndarray):\n        return result.tolist()\n    elif isinstance(z, list):\n        return result.tolist()\n    else:\n        return float(result)"}
{"task_id": 88, "completion_id": 6, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z). This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z = np.asarray(z)\n    result = np.round(np.logaddexp(0.0, z), decimals=4)\n    return result.tolist() if isinstance(z, (list, np.ndarray)) else float(result)"}
{"task_id": 88, "completion_id": 7, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z). This implementation\n    uses numpy.logaddexp to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z = np.array(z, dtype=float)\n    result = np.logaddexp(0.0, z)\n    result = np.round(result, decimals=4)\n    if z.size == 1:\n        return result.item()\n    else:\n        return result.tolist()\nz = np.array([-1000, 0, 3])"}
{"task_id": 88, "completion_id": 8, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_array = np.array(z)\n    result = np.logaddexp(0.0, z_array)\n    result_rounded = np.round(result, 4)\n    if isinstance(z, (list, np.ndarray)):\n        return result_rounded.tolist()\n    else:\n        return float(result_rounded)"}
{"task_id": 88, "completion_id": 9, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_np = np.asarray(z)\n    softplus_values = np.logaddexp(0.0, z_np)\n    rounded_values = np.round(softplus_values, 4)\n    if rounded_values.size == 1:\n        return float(rounded_values.tolist())\n    else:\n        return rounded_values.tolist()"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    try:\n        true_arms = bandit['arm_evs']\n        estimated_arms = policy['ev_estimates']\n    except KeyError:\n        return np.nan\n    if not estimated_arms:\n        return np.nan\n    estimated_list = [estimated_arms[i] for i in sorted(estimated_arms.keys())]\n    squared_errors = [(est - true_val) ** 2 for (est, true_val) in zip(estimated_list, true_arms)]\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)\nbandit = {'arm_evs': [0.5, 0.2, 0.9]}\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 90, "completion_id": 1, "solution": "import numpy as np\ndef mse(bandit: dict, policy: dict) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n    \n    Parameters\n    ----------\n    bandit : dict\n        Dictionary that stores the true expected payout of each arm under the \n        key 'arm_evs'.\n    policy : dict\n        Dictionary that stores the policy's current estimate of each arm's \n        expectation under the key 'ev_estimates'. The field must be a dictionary \n        mapping an arm index (int) to a float value.\n    \n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does \n        not provide any estimates the function returns numpy.nan.\n    \"\"\"\n    arm_evs = bandit.get('arm_evs', [])\n    ev_estimates = policy.get('ev_estimates', {})\n    if not ev_estimates:\n        return np.nan\n    sorted_estimates = [ev_estimates.get(i, None) for i in sorted(ev_estimates)]\n    if len(sorted_estimates) != len(arm_evs) or any((e is None for e in sorted_estimates)):\n        raise ValueError(\"Policy's estimates should cover all arms and should not have null estimates\")\n    squared_errors = [(sorted_estimates[i] - arm_evs[i]) ** 2 for i in range(len(arm_evs))]\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)"}
{"task_id": 90, "completion_id": 2, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    arm_evs = bandit.arm_evs\n    estimates = [policy.ev_estimates[i] for i in sorted(policy.ev_estimates.keys())]\n    squared_errors = [(estimates[i] - arm_evs[i]) ** 2 for i in range(len(arm_evs))]\n    mse = np.mean(squared_errors)\n    return round(mse, 4)\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 90, "completion_id": 3, "solution": "import numpy as np\ndef mse(bandit: dict, policy: dict) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n    \n    Parameters\n    ----------\n    bandit : dict\n        Dictionary that stores the true expected payout of each arm under the key `arm_evs`.\n    policy : dict\n        Dictionary that stores the policy's current estimate of each arm's expectation\n        under the key `ev_estimates`. The field must be a dictionary mapping an arm\n        index (int) to a float value.\n    \n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does not\n        provide any estimates the function returns `numpy.nan`.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy['ev_estimates']:\n        return np.nan\n    true_evs = bandit['arm_evs']\n    estimates = policy['ev_estimates']\n    sorted_estimates = [estimates[i] for i in range(len(true_evs))]\n    true_evs = np.array(true_evs)\n    sorted_estimates = np.array(sorted_estimates)\n    squared_errors = (true_evs - sorted_estimates) ** 2\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)\nbandit = {'arm_evs': [0.5, 0.2, 0.9]}\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 90, "completion_id": 4, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    true_values = getattr(bandit, 'arm_evs', bandit.get('arm_evs', []))\n    estimates = getattr(policy, 'ev_estimates', policy.get('ev_estimates', {}))\n    if not estimates:\n        return np.nan\n    sorted_estimates = [estimates[i] for i in range(len(true_values))]\n    squared_errors = [(est - true_val) ** 2 for (est, true_val) in zip(sorted_estimates, true_values)]\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)\nbandit = {'arm_evs': [0.5, 0.2, 0.9]}\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 90, "completion_id": 5, "solution": "import numpy as np\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    arm_evs = bandit.arm_evs\n    ev_estimates = policy.ev_estimates\n    sorted_estimates = [ev_estimates[i] for i in sorted(ev_estimates.keys())]\n    mse_value = np.mean((np.array(arm_evs) - np.array(sorted_estimates)) ** 2)\n    return round(mse_value, 4)\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 90, "completion_id": 6, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    try:\n        true_values = bandit['arm_evs']\n        estimates = dict(sorted(policy['ev_estimates'].items()))\n        if not estimates:\n            return np.nan\n        estimated_values = [estimates[i] for i in range(len(true_values))]\n    except KeyError:\n        return np.nan\n    squared_errors = [(true_values[i] - estimated_values[i]) ** 2 for i in range(len(true_values))]\n    mse = np.mean(squared_errors)\n    return round(mse, 4)\nbandit = {'arm_evs': [0.5, 0.2, 0.9]}"}
{"task_id": 90, "completion_id": 7, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    try:\n        true_evs = bandit['arm_evs']\n        estimates = policy['ev_estimates']\n    except KeyError:\n        return np.nan\n    if not estimates:\n        return np.nan\n    sorted_estimates = [estimates[i] for i in sorted(estimates.keys())]\n    squared_errors = [(true - est) ** 2 for (true, est) in zip(true_evs, sorted_estimates)]\n    mse_result = np.mean(squared_errors)\n    return round(mse_result, 4)"}
{"task_id": 90, "completion_id": 8, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    true_evs = bandit.arm_evs\n    estimate_evs = policy.ev_estimates\n    if not true_evs or len(estimate_evs) != len(true_evs):\n        return np.nan\n    sorted_estimates = [estimate_evs[i] for i in range(len(true_evs))]\n    squared_errors = [(true - estimated) ** 2 for (true, estimated) in zip(true_evs, sorted_estimates)]\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)"}
{"task_id": 90, "completion_id": 9, "solution": "import numpy as np\ndef mse(bandit: dict, policy: dict) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : dict\n        Dictionary that stores the true expected payout of each arm under the key\n        ``arm_evs``.\n    policy : dict\n        Dictionary that stores the policy's current estimate of each arm's expectation\n        under the key ``ev_estimates``. The field must be a dictionary mapping an arm\n        index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does not\n        provide any estimates, the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or len(policy['ev_estimates']) == 0:\n        return np.nan\n    true_evs = bandit['arm_evs']\n    policy_estimates = policy['ev_estimates']\n    sorted_estimates = [policy_estimates[i] for i in range(len(true_evs))]\n    squared_errors = [(sorted_estimates[i] - true_evs[i]) ** 2 for i in range(len(true_evs))]\n    msel = np.mean(squared_errors)\n    return np.round(msel, 4)\nbandit = {'arm_evs': [0.5, 0.2, 0.9]}\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Lidstone when !=1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    tokens = [word for sentence in corpus for word in sentence.split()]\n    vocab = set(tokens)\n    vocab.add('<UNK>')\n    ngram_counts = defaultdict(int)\n    context_counts = defaultdict(int)\n    for sentence in corpus:\n        words = ['<UNK>'] * (N - 1) + sentence.split(' ') + ['<UNK>'] * (N - 1)\n        for i in range(len(words) - N + 1):\n            ngram = tuple(words[i:i + N])\n            context = tuple(words[i:i + N - 1])\n            ngram_counts[ngram] += 1\n            context_counts[context] += 1\n    seq_tokens = sequence.split(' ')\n    if len(seq_tokens) < N:\n        return 0.0\n    log_prob = 0.0\n    for i in range(len(seq_tokens) - N + 1):\n        ngram = tuple(['<UNK>' if token not in vocab else token for token in seq_tokens[i:i + N]])\n        context = tuple(ngram[:-1])\n        ngram_prob = (ngram_counts[ngram] + K) / (context_counts[context] + K * len(vocab))\n        log_prob += math.log(ngram_prob)\n    return round(log_prob, 4)\ncorpus = ['the sky is blue', 'the sun is bright', 'the sun is scarcely blue', 'the sun in the east is bright and blue']\nN = 3\nK = 1.0"}
{"task_id": 96, "completion_id": 1, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    tokens = [sentence.split() for sentence in corpus]\n    all_unigrams = [word for sentence in tokens for word in sentence]\n    vocab = set(all_unigrams).union({'<UNK>'})\n    ngram_counts = defaultdict(Counter)\n    for sentence in tokens:\n        for n in range(1, N + 1):\n            for i in range(len(sentence) - n + 1):\n                ngram = tuple(sentence[i:i + n])\n                ngram_counts[n][ngram] += 1\n    seq_tokens = sequence.split()\n    for (i, word) in enumerate(seq_tokens):\n        if word not in vocab:\n            seq_tokens[i] = '<UNK>'\n    log_prob = 0.0\n    for i in range(len(seq_tokens) - N + 1):\n        ngram = tuple(seq_tokens[i:i + N])\n        context = ngram[:-1]\n        count_of_ngram = ngram_counts[N][ngram]\n        count_of_context = sum((ngram_counts[N - 1][context + (w,)] for w in vocab))\n        probability = (count_of_ngram + K) / (count_of_context + K * len(vocab))\n        log_prob += math.log(probability)\n    if len(seq_tokens) < N:\n        return 0.0\n    return round(log_prob, 4)\ncorpus = ['this is a sentence', 'this is another sentence', 'yet another example', 'this is different']\nN = 3\nK = 1.0"}
{"task_id": 96, "completion_id": 2, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    all_words = set()\n    for sentence in corpus:\n        all_words.update(sentence.split())\n    all_words.add('<UNK>')\n    V = len(all_words)\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        words = ['<s>'] * (N - 1) + words + ['</s>']\n        for i in range(len(words) - N + 1):\n            ngram = tuple(words[i:i + N])\n            if any((word not in all_words for word in ngram)):\n                context = tuple(('<UNK>' if word not in all_words else word for word in ngram[:-1]))\n                ngram_counts[N - 1][context + ('<UNK>',)] += 1\n            else:\n                ngram_counts[N - 1][ngram] += 1\n            for j in range(1, N):\n                ngram = tuple(words[i:i + N - j])\n                ngram_counts[N - j - 1][ngram] += 1\n    sequence_words = sequence.split()\n    sequence_words = ['<s>'] * (N - 1) + sequence_words + ['</s>']\n    log_prob = 0.0\n    for i in range(len(sequence_words) - N + 1):\n        ngram = tuple(sequence_words[i:i + N])\n        if any((word not in all_words for word in ngram)):\n            context = tuple(('<UNK>' if word not in all_words else word for word in ngram[:-1]))\n            ngram = context + ('<UNK>',)\n        else:\n            context = tuple(sequence_words[i:i + N - 1])\n        numerator = ngram_counts[N - 1][ngram] + K\n        denominator = ngram_counts[N - 2][context] + K * V if N > 1 else len(corpus) + K * V\n        prob = numerator / denominator\n        log_prob += math.log(prob)\n    return round(log_prob, 4)\ncorpus = ['the sky is blue', 'the earth is round', 'the moon is round']\nsentence = 'the moon is bright'\nN = 2\nK = 1.0"}
{"task_id": 96, "completion_id": 3, "solution": "import math\nfrom collections import defaultdict, Counter\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    flattened_corpus = []\n    for sentence in corpus:\n        flattened_corpus.extend(sentence.split())\n    flattened_corpus = ['<UNK>'] + flattened_corpus + ['<UNK>']\n    all_unique_words = set(flattened_corpus)\n    vocab = list(all_unique_words)\n    vocab_size = len(vocab)\n    freq_tables = [defaultdict(Counter) for _ in range(N)]\n    for sentence in corpus:\n        tokens = sentence.split()\n        tokens_with_start = ['<UNK>'] * (N - 1) + tokens\n        for i in range(len(tokens_with_start) - N + 1):\n            context = tuple(tokens_with_start[i:i + N - 1])\n            word = tokens_with_start[i + N - 1]\n            freq_tables[N - 1][context][word] += 1\n    seq_tokens = sequence.split()\n    seq_tokens_with_start = ['<UNK>'] * (N - 1) + seq_tokens\n    seq_length = len(seq_tokens)\n    if seq_length < 1:\n        return 0.0\n    log_prob = 0.0\n    for i in range(seq_length):\n        context_seq = tuple(seq_tokens_with_start[i:i + N - 1])\n        word_seq = seq_tokens_with_start[i + N - 1]\n        if word_seq not in vocab:\n            word_seq = '<UNK>'\n        sum_counts_context = sum(freq_tables[N - 1][context_seq].values())\n        total_count = sum_counts_context + K * vocab_size\n        if total_count == 0:\n            return float('-inf')\n        word_count = freq_tables[N - 1][context_seq][word_seq] + K\n        prob = word_count / total_count\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 96, "completion_id": 4, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n\n    def ngrams(tokens, n):\n        return zip(*[tokens[i:] for i in range(n)])\n    vocab = set()\n    tables = {i: Counter() for i in range(1, N + 1)}\n    for sentence in corpus:\n        tokens = sentence.split()\n        vocab.update(tokens)\n        for n in range(1, N + 1):\n            for ngram in ngrams(tokens, n):\n                tables[n][' '.join(ngram)] += 1\n    vocab.add('<UNK>')\n    V = len(vocab)\n    for sentence in corpus:\n        tokens = sentence.split()\n        for (i, token) in enumerate(tokens):\n            if token not in vocab:\n                tokens[i] = '<UNK>'\n    log_prob = 0.0\n    tokens = sequence.split()\n    if len(tokens) < N:\n        return 0.0\n    for ngram in ngrams(tokens, N):\n        context = ' '.join(ngram[:-1])\n        word = ngram[-1]\n        ngram_str = ' '.join(ngram)\n        if word not in vocab:\n            word = '<UNK>'\n            ngram_str = ' '.join(ngram[:-1] + ('<UNK>',))\n        numerator = tables[N].get(ngram_str, 0) + K\n        denominator = tables[N - 1].get(context, 0) + K * V\n        probability = numerator / denominator\n        log_prob += math.log(probability)\n    return round(log_prob, 4)"}
{"task_id": 96, "completion_id": 5, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n\n    def ngrams(tokens, n):\n        return zip(*[tokens[i:] for i in range(n)])\n    all_words = ' '.join(corpus).split()\n    vocab = list(set(all_words) | {'<UNK>'})\n    vocab_size = len(vocab)\n    freq_tables = [defaultdict(int) for _ in range(N)]\n    for sentence in corpus:\n        words = sentence.split()\n        for n in range(1, N + 1):\n            for ngram in ngrams(['<s>'] * (n - 1) + words + ['</s>'], n):\n                freq_tables[n - 1][' '.join(ngram)] += 1\n    seq_words = sequence.split()\n    for (i, word) in enumerate(seq_words):\n        if not seq_words[i] in all_words:\n            seq_words[i] = '<UNK>'\n    seq_prob = 0.0\n    if len(seq_words) >= N - 1:\n        seq_words = ['<s>'] * (N - 1) + seq_words + ['</s>']\n        for ngram in ngrams(seq_words, N):\n            next_word = ngram[-1]\n            context = ' '.join(ngram[:-1])\n            context_count = freq_tables[N - 2][context]\n            context_count = context_count if context_count > 0 else K\n            if ' '.join(ngram) not in freq_tables[N - 1]:\n                next_word_count = K\n            else:\n                next_word_count = freq_tables[N - 1][' '.join(ngram)]\n            smoothed_prob = (next_word_count + K) / (context_count + K * vocab_size)\n            seq_prob += math.log(smoothed_prob)\n    return round(seq_prob, 4)"}
{"task_id": 96, "completion_id": 6, "solution": "import math\nfrom collections import Counter, defaultdict\ndef tokenize(sequence: str) -> list[str]:\n    \"\"\"Tokenize a sentence into a list of words.\"\"\"\n    return sequence.split()\ndef build_ngram_counts(corpus: list[str], N: int) -> dict:\n    \"\"\"Build n-gram frequency counts for all n-grams up to N.\"\"\"\n    all_counts = defaultdict(Counter)\n    for sentence in corpus:\n        tokens = tokenize('<UNK> ' + sentence + ' <UNK>')\n        for gram_length in range(1, N + 1):\n            for i in range(len(tokens) - gram_length + 1):\n                ngram = tuple(tokens[i:i + gram_length])\n                if ngram in all_counts[gram_length]:\n                    all_counts[gram_length][ngram] += 1\n                else:\n                    all_counts[gram_length][ngram] = 1\n    return all_counts\ndef vocabulary_size(all_counts: dict) -> int:\n    \"\"\"Calculate the size of the vocabulary including the <UNK> token.\"\"\"\n    unique_words = set()\n    for ngrams in all_counts.values():\n        for ngram in ngrams:\n            unique_words.update(ngram)\n    return len(unique_words)\ndef compute_prob(ngram: tuple[str], context: tuple[str], all_counts: dict, K: float, vocab_size: int) -> float:\n    \"\"\"Compute the smoothed probability of an ngram given its context.\"\"\"\n    assert len(ngram) == len(context) + 1, 'Invalid ngram and context lengths.'\n    num = all_counts[len(ngram)].get(ngram, 0) + K if ngram in all_counts[len(ngram)] else K\n    denom = all_counts[len(context)].get(context, 0) + K * vocab_size if context in all_counts[len(context)] else K * vocab_size\n    return num / denom\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\"\"\"\n    all_counts = build_ngram_counts(corpus, N)\n    vocab_size = vocabulary_size(all_counts)\n    tokens = tokenize(sequence)\n    if len(tokens) < N:\n        return 0.0\n    log_prob = 0.0\n    for i in range(len(tokens) - N + 1):\n        ngram = tuple(tokens[i:i + N])\n        context = tuple(tokens[i:i + N - 1])\n        probability = compute_prob(ngram, context, all_counts, K, vocab_size)\n        log_prob += math.log(probability)\n    return round(log_prob, 4)\ncorpus = ['I like fruit', 'I like to play']\nsequence = 'I like to fruit'\nN = 3"}
{"task_id": 96, "completion_id": 7, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    vocab = set()\n    for sentence in corpus:\n        vocab.update(sentence.split())\n    vocab_size = len(vocab) + 1\n    ngram_freq = [defaultdict(Counter) for _ in range(N)]\n    for sentence in corpus:\n        words = ['<s>'] * (N - 1) + sentence.split() + ['</s>']\n        for i in range(len(words) - N + 1):\n            ngram = tuple(words[i:i + N - 1])\n            ngram_freq[N - 2][ngram][words[i + N - 1]] += 1\n    sequence_words = sequence.split()\n    if len(sequence_words) < N:\n        return 0.0\n    sequence_words = ['<s>'] * (N - 1) + sequence_words + ['</s>']\n    log_prob_sum = 0.0\n    for i in range(N - 1, len(sequence_words)):\n        ngram = tuple(sequence_words[i - N + 1:i])\n        word = sequence_words[i]\n        if word not in vocab:\n            word = '<UNK>'\n        prob_sum = sum(ngram_freq[N - 2][ngram].values()) + K * vocab_size\n        prob = (ngram_freq[N - 2][ngram][word] + K) / prob_sum\n        log_prob_sum += math.log(prob)\n    return round(log_prob_sum, 4)\ncorpus = ['i love you', 'i love you too', 'you love me', 'she loves you not']\nN = 2\nK = 1.0"}
{"task_id": 96, "completion_id": 8, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n\n    def build_ngram_freqs(corpus, n):\n        \"\"\"Build n-gram frequency tables from the corpus.\"\"\"\n        ngrams = defaultdict(Counter)\n        for sentence in corpus:\n            words = sentence.split()\n            for i in range(len(words) - n + 1):\n                (context, word) = (tuple(words[i:i + n - 1]), words[i + n - 1])\n                ngrams[context][word] += 1\n        return ngrams\n\n    def update_vocabulary(ngrams):\n        \"\"\"Add unseen words to the vocabulary.\"\"\"\n        vocabs = set()\n        for counts in ngrams.values():\n            vocabs.update(counts.keys())\n        if '<UNK>' not in vocabs:\n            vocabs.add('<UNK>')\n        return vocabs\n\n    def estimate_prob(word, context, ngrams, vocabulary, k=K):\n        \"\"\"Estimate the probability of word given context with additive smoothing.\"\"\"\n        vocab_size = len(vocabulary)\n        context_freq = sum(ngrams[context].values())\n        context_word_freq = ngrams[context][word]\n        prob = (context_word_freq + k) / (context_freq + k * vocab_size)\n        return prob\n    text = ' '.join(corpus)\n    words = text.split()\n    vocabulary = set(words) | {'<UNK>'}\n    ngrams = build_ngram_freqs(corpus, N)\n    vocabulary = update_vocabulary(ngrams)\n    seq_words = sequence.split()\n    if len(seq_words) < N:\n        return 0.0\n    log_prob_sum = 0.0\n    for i in range(len(seq_words) - N + 1):\n        context = tuple(seq_words[i:i + N - 1])\n        word = seq_words[i + N - 1] if seq_words[i + N - 1] in vocabulary else '<UNK>'\n        p = estimate_prob(word, context, ngrams, vocabulary)\n        log_prob_sum += math.log(p)\n    return round(log_prob_sum, 4)\ncorpus = ['the cat sat on the mat', 'cat on the mat', 'the dog sat on the bed']\nN = 3\nK = 1.0"}
{"task_id": 96, "completion_id": 9, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    words = ' '.join(corpus).split()\n    counter = Counter(words)\n    vocab = list(counter.keys())\n    vocab.append('<UNK>')\n    vocab_size = len(vocab)\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus:\n        tokens = ['<s>'] * (N - 1) + sentence.split() + ['</s>']\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            ngram_counts[N - 1][ngram[:-1]]['total'] += 1\n            ngram_counts[N - 1][ngram[:-1]][ngram[-1]] += 1\n    seq_words = sequence.split()\n    if len(seq_words) < N:\n        return 0.0\n    for (i, word) in enumerate(seq_words.copy()):\n        if word not in words:\n            seq_words[i] = '<UNK>'\n    seq_words = ['<s>'] * (N - 1) + seq_words + ['</s>']\n    log_prob = 0.0\n    for i in range(len(seq_words) - N + 1):\n        context = tuple(seq_words[i:i + N - 1])\n        word = seq_words[i + N - 1]\n        count_context = ngram_counts[N - 1][context].get('total', 0)\n        count_context_word = ngram_counts[N - 1][context].get(word, 0)\n        prob = (count_context_word + K) / (count_context + K * vocab_size)\n        log_prob += math.log(prob) if prob > 0 else float('-inf')\n    return round(log_prob, 4)"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    for _ in range(max_iter):\n        for i in range(N):\n            A = np.dot(H, H.T) + alpha * np.eye(K)\n            b = np.dot(X[i, :], H.T)\n            W[i, :] = np.linalg.solve(A, b)\n        for j in range(M):\n            A = np.dot(W.T, W) + alpha * np.eye(K)\n            b = np.dot(X[:, j].T, W)\n            H[:, j] = np.linalg.solve(A, b)\n        X_hat = np.dot(W, H)\n        loss = np.linalg.norm(X - X_hat) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n        if loss < tol:\n            break\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 1, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    rng = np.random.default_rng(seed=0)\n    W = rng.uniform(0, 1, (N, K))\n    H = rng.uniform(0, 1, (K, M))\n    for i in range(max_iter):\n        for n in range(N):\n            Xn = X[n, :].reshape(-1)\n            Hn = H.T\n            A = Hn.T @ Hn + alpha * np.eye(K)\n            W[n] = np.linalg.solve(A, Hn.T @ Xn)\n        for m in range(M):\n            Xm = X[:, m].reshape(-1, 1)\n            Wm = W.T\n            A = Wm.T @ Wm + alpha * np.eye(K)\n            H[:, m] = np.linalg.solve(A, Wm.T @ Xm)\n        X_hat = W @ H\n        loss = np.linalg.norm(X - X_hat) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n        if loss < tol:\n            print(f'Algorithm converged after {i + 1} iterations, loss: {loss}')\n            break\n    X_hat = (W @ H).round(4).tolist()\n    return X_hat\nX = np.array([[1.0, 2.0, 2.0, 1.0], [2.0, 1.0, 1.0, 2.0], [2.0, 2.0, 1.0, 1.0], [1.0, 1.0, 2.0, 2.0], [2.0, 1.0, 1.0, 2.0]])\nK = 2\nalpha = 0.01\nmax_iter = 1000\ntol = 1e-06\nX_hat = als_factorization(X, K, alpha, max_iter, tol)"}
{"task_id": 108, "completion_id": 2, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    for i in range(max_iter):\n        for n in range(N):\n            W[n, :] = np.linalg.solve(H.T.dot(H) + alpha * np.eye(K), H.T.dot(X[n, :]))\n        for m in range(M):\n            H[:, m] = np.linalg.solve(W.T.dot(W) + alpha * np.eye(K), W.T.dot(X[:, m]))\n        X_hat = W.dot(H)\n        loss = np.linalg.norm(X - X_hat) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n        if loss < tol:\n            break\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 3, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    reg = np.eye(K) * alpha\n    for _ in range(max_iter):\n        for i in range(N):\n            numerator = X[i:i + 1, :].dot(H.T)\n            denominator = H.T.dot(H) + alpha * np.eye(K)\n            W[i, :] = numerator.dot(np.linalg.inv(denominator))\n        for j in range(M):\n            numerator = W.T.dot(X[:, j:j + 1])\n            denominator = W.T.dot(W) + alpha * np.eye(K)\n            H[:, j:j + 1] = np.linalg.inv(denominator).dot(numerator)\n        X_hat = W.dot(H)\n        loss = np.linalg.norm(X - X_hat, 'fro') ** 2 + alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n        if loss < tol:\n            break\n    X_hat = W.dot(H).round(4).tolist()\n    return X_hat"}
{"task_id": 108, "completion_id": 4, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n    \n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    for _ in range(max_iter):\n        for n in range(N):\n            W[n, :] = np.linalg.solve(H @ H.T + alpha * np.eye(K), H @ X[n, :].T)\n        for m in range(M):\n            H[:, m] = np.linalg.solve(W.T @ W + alpha * np.eye(K), W.T @ X[:, m])\n        reconstruction_loss = np.linalg.norm(X - W @ H, 'fro') ** 2\n        l2_reg = alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n        regularized_loss = reconstruction_loss + l2_reg\n        if regularized_loss < tol:\n            break\n    X_hat = W @ H\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 5, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    def frobenius_norm(M):\n        return np.sqrt(np.sum(M ** 2))\n\n    def regularised_loss(X, W, H, alpha):\n        WH = np.dot(W, H)\n        reconstruction_loss = frobenius_norm(X - WH)\n        l2_penalty = alpha * (frobenius_norm(W) + frobenius_norm(H))\n        return reconstruction_loss + l2_penalty\n    for it in range(max_iter):\n        HHT = np.dot(H, H.T) + alpha * np.eye(K)\n        HXT = np.dot(H, X.T)\n        W = np.linalg.solve(HHT, HXT).T\n        WTW = np.dot(W.T, W) + alpha * np.eye(K)\n        XWT = np.dot(X, W)\n        H = np.linalg.solve(WTW, XWT)\n        current_loss = regularised_loss(X, W, H, alpha)\n        if current_loss < tol:\n            break\n    X_hat = np.dot(W, H)\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 6, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    for i in range(max_iter):\n        HHT = H @ H.T\n        HHT_inv = np.linalg.inv(HHT + alpha * np.eye(K))\n        HX = H @ X.T\n        W = HX @ HHT_inv\n        WWT = W.T @ W\n        WWT_inv = np.linalg.inv(WWT + alpha * np.eye(K))\n        WX = W.T @ X\n        H = WWT_inv @ WX\n        loss = np.linalg.norm(X - W @ H) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n        if loss < tol:\n            break\n    X_hat = (W @ H).round(4).tolist()\n    return X_hat"}
{"task_id": 108, "completion_id": 7, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    def update_W(X, H, alpha):\n        HT_H = H.T @ H + alpha * np.eye(K)\n        return np.linalg.solve(HT_H, X @ H.T).T\n\n    def update_H(X, W, alpha):\n        W_T_W = W.T @ W + alpha * np.eye(K)\n        return np.linalg.solve(W_T_W, W.T @ X)\n    for _ in range(max_iter):\n        W = update_W(X, H, alpha).T\n        H = update_H(X, W, alpha)\n        X_hat = W @ H\n        loss = np.linalg.norm(X - X_hat, ord='fro') ** 2 + alpha * (np.linalg.norm(W, ord='fro') ** 2 + np.linalg.norm(H, ord='fro') ** 2)\n        if loss < tol:\n            break\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 8, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    for i in range(max_iter):\n        for n in range(N):\n            W[n] = np.linalg.solve(H.T.dot(H) + alpha * np.eye(K), H.T.dot(X[n]))\n        for m in range(M):\n            H[:, m] = np.linalg.solve(W.T.dot(W) + alpha * np.eye(K), W.T.dot(X[:, m]))\n        X_reconstructed = W.dot(H)\n        loss = np.linalg.norm(X - X_reconstructed) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n        if loss < tol:\n            break\n    X_hat = W.dot(H).round(4)\n    return X_hat.tolist()\nX = np.array([[1.0, 0.0, 1.0], [0.0, 1.0, 1.0], [1.0, 1.0, 0.0]])\nK = 2"}
{"task_id": 108, "completion_id": 9, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    for i in range(max_iter):\n        for n in range(N):\n            W[n] = np.linalg.solve(np.dot(H, H.T) + alpha * np.eye(K), np.dot(H, X[n].T)).T\n        for m in range(M):\n            H[:, m] = np.linalg.solve(np.dot(W.T, W) + alpha * np.eye(K), np.dot(W.T, X[:, m]))\n        reconstruction = np.dot(W, H)\n        loss = np.linalg.norm(X - reconstruction) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n        if loss < tol:\n            break\n    X_hat = np.dot(W, H).round(4).tolist()\n    return X_hat"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    centroids = [X[np.random.choice(X.shape[0])].tolist()]\n    for _ in range(1, K):\n        distances = np.array([min([np.linalg.norm(x - c) for c in centroids]) for x in X])\n        probs = distances / distances.sum()\n        new_centroid = X[np.random.choice(X.shape[0], p=probs)]\n        centroids.append(new_centroid.tolist())\n    labels = np.zeros(X.shape[0])\n    for _ in range(max_iter):\n        old_labels = labels.copy()\n        for (index, x) in enumerate(X):\n            labels[index] = np.argmin([np.linalg.norm(x - c) for c in centroids])\n        for k in range(K):\n            if not np.any(labels == k):\n                continue\n            centroids[k] = np.mean(X[labels == k], axis=0).tolist()\n        if np.array_equal(labels, old_labels):\n            break\n    centroids = [list(map(lambda x: round(x, 4), c)) for c in centroids]\n    centroids.sort(key=lambda c: (c[0], c))\n    return centroids"}
{"task_id": 109, "completion_id": 1, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    def euclidean_distance(a, b):\n        return np.linalg.norm(a - b)\n\n    def kmeans_initialization(X, K):\n        centroids = [X[random.randint(0, len(X) - 1)]]\n        for _ in range(1, K):\n            dist = np.array([min([euclidean_distance(x, c) for c in centroids]) for x in X])\n            probs = dist / dist.sum()\n            cumulative_probs = probs.cumsum()\n            r = random.random()\n            for (j, p) in enumerate(cumulative_probs):\n                if r < p:\n                    i = j\n                    break\n            centroids.append(X[i])\n        return np.array(centroids)\n\n    def assign_clusters(X, centroids):\n        distance_matrix = np.array([[euclidean_distance(x, c) for c in centroids] for x in X])\n        cluster_assignments = np.argmin(distance_matrix, axis=1)\n        return cluster_assignments\n\n    def update_centroids(X, clusters, K):\n        centroids = np.empty((K, X.shape[1]))\n        for k in range(K):\n            member_samples = X[clusters == k]\n            if len(member_samples) > 0:\n                centroids[k] = np.mean(member_samples, axis=0)\n        return centroids\n    centroids = kmeans_initialization(X, K)\n    for _ in range(max_iter):\n        clusters = assign_clusters(X, centroids)\n        new_centroids = update_centroids(X, clusters, K)\n        if np.array_equal(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    sorted_centroids = sorted(centroids, key=lambda x: (x[0], tuple(x)))\n    return [list(map(lambda x: round(x, 4), centroid)) for centroid in sorted_centroids]"}
{"task_id": 109, "completion_id": 2, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    (m, n) = X.shape\n    centroids = choose_initial_centroids(X, K)\n    assignments = np.zeros(m, dtype=int)\n    old_assignments = np.ones(m, dtype=int)\n    for iteration in range(max_iter):\n        if np.array_equal(assignments, old_assignments):\n            break\n        old_assignments[:] = assignments[:]\n        for (i, x) in enumerate(X):\n            assignments[i] = np.argmin([np.linalg.norm(x - c) for c in centroids])\n        for k in range(K):\n            cluster_points = X[assignments == k]\n            if len(cluster_points) > 0:\n                centroids[k] = np.mean(cluster_points, axis=0)\n    centroids = sorted(centroids, key=lambda c: (c[0], list(c)))\n    return [list(map(lambda coord: round(coord, 4), centroid)) for centroid in centroids]\ndef choose_initial_centroids(X: np.ndarray, K: int) -> np.ndarray:\n    m = X.shape[0]\n    centroids = np.zeros((K, X.shape[1]))\n    centroids[0] = X[random.randint(0, m - 1)]\n    for k in range(1, K):\n        D = np.min([np.linalg.norm(X - c, axis=1) for c in centroids[:k]], axis=0)\n        probs = D / np.sum(D)\n        cum_probs = np.cumsum(probs)\n        r = random.random()\n        idx = np.searchsorted(cum_probs, r)\n        centroids[k] = X[idx]\n    return centroids\nX = np.array([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [3.0, 0.0, 0.0], [2.0, 1.0, 0.0], [2.2, 0.8, 0.0], [5.0, 0.0, 0.0], [4.0, 0.5, 0.0], [4.1, 0.6, 0.0], [0.0, 0.0, 3.0], [0.0, 0.0, 4.0]])"}
{"task_id": 109, "completion_id": 3, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    centroids = [random.choice(X)]\n    for _ in range(1, K):\n        dist = np.min(([np.linalg.norm(x - c) for c in centroids] for x in X))\n        probs = dist / np.sum(dist)\n        new_centroid_idx = np.random.choice(range(len(X)), p=probs)\n        centroids.append(X[new_centroid_idx])\n    centroids = np.array(centroids)\n    labels = np.zeros(len(X))\n    for it in range(max_iter):\n        for (i, x) in enumerate(X):\n            distances = np.linalg.norm(x - centroids, axis=1)\n            labels[i] = np.argmin(distances)\n        new_centroids = np.zeros(centroids.shape)\n        for j in range(K):\n            assigned_points = X[labels == j]\n            if len(assigned_points) > 0:\n                new_centroids[j] = np.mean(assigned_points, axis=0)\n            else:\n                new_centroids[j] = centroids[j]\n        if np.linalg.norm(centroids - new_centroids) == 0:\n            break\n        centroids = new_centroids\n    centroids = np.round(centroids, 4)\n    centroids = sorted(centroids, key=lambda x: x[0])\n    return [c.tolist() for c in centroids]"}
{"task_id": 109, "completion_id": 4, "solution": "import numpy as np\nimport random\ndef euclidean_distance(x, y):\n    return np.sqrt(np.sum((x - y) ** 2))\ndef kmeans_plusplus_initialization(X, K, random_state):\n    random.seed(random_state)\n    np.random.seed(random_state)\n    (m, n) = X.shape\n    centroids = [X[np.random.choice(m)]]\n    for _ in range(1, K):\n        distances = np.array([min([euclidean_distance(x, c) for c in centroids]) for x in X])\n        probabilities = distances / distances.sum()\n        new_centroid_index = np.random.choice(m, p=probabilities)\n        centroids.append(X[new_centroid_index])\n    return np.array(centroids)\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    centroids = kmeans_plusplus_initialization(X, K, random_state)\n    old_centroids = np.zeros(centroids.shape)\n    labels = np.zeros(len(X))\n    for iteration in range(max_iter):\n        for i in range(len(X)):\n            distances = [euclidean_distance(X[i], centroid) for centroid in centroids]\n            labels[i] = np.argmin(distances)\n        for i in range(K):\n            points_with_label_i = X[labels == i]\n            if len(points_with_label_i) > 0:\n                centroids[i] = np.mean(points_with_label_i, axis=0)\n        if np.all(old_centroids == centroids):\n            break\n        old_centroids = centroids.copy()\n    final_centroids = centroids.round(4).tolist()\n    final_centroids.sort()\n    return final_centroids"}
{"task_id": 109, "completion_id": 5, "solution": "import numpy as np\nimport random\ndef initialize_centroids(X: np.ndarray, K: int, random_state: int | None=None) -> np.ndarray:\n    \"\"\"Initialize K centroids using the K-Means++ method.\"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    centroids = [X[random.randint(0, X.shape[0] - 1)]]\n    for _ in range(1, K):\n        D2 = np.array([min([np.linalg.norm(x - c) ** 2 for c in centroids]) for x in X])\n        probs = D2 / D2.sum()\n        cumprobs = probs.cumsum()\n        r = random.random()\n        for (j, p) in enumerate(cumprobs):\n            if r < p:\n                i = j\n                break\n        centroids.append(X[i])\n    return np.array(centroids)\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    centroids = initialize_centroids(X, K, random_state)\n    for _ in range(max_iter):\n        clusters = [[] for _ in range(K)]\n        for x in X:\n            idx = np.argmin([np.linalg.norm(x - c) for c in centroids])\n            clusters[idx].append(x)\n        for i in range(K):\n            if clusters[i]:\n                centroids[i] = np.mean(clusters[i], axis=0)\n    centroids = np.round(centroids, decimals=4)\n    centroids = centroids[centroids[:, 0].argsort()]\n    centroids = [centroid.tolist() for centroid in centroids]\n    return centroids"}
{"task_id": 109, "completion_id": 6, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\"\"\"\n\n    def initialize_centroids(X, K, random_state):\n        if random_state is not None:\n            np.random.seed(random_state)\n            random.seed(random_state)\n        centroids = [random.choice(X)]\n        for _ in range(1, K):\n            dist_sq = np.array([min([np.linalg.norm(x - c) ** 2 for c in centroids]) for x in X])\n            probs = dist_sq / dist_sq.sum()\n            cumulative_probs = probs.cumsum()\n            r = np.random.rand()\n            for (i, cp) in enumerate(cumulative_probs):\n                if r < cp:\n                    new_centroid = X[i]\n                    break\n            centroids.append(new_centroid)\n        return np.array(centroids)\n\n    def assign_labels(X, centroids):\n        dist = np.array([np.linalg.norm(X - c, axis=1) for c in centroids])\n        return np.argmin(dist, axis=0)\n\n    def update_centroids(X, labels, centroids):\n        new_centroids = np.array([X[labels == k].mean(axis=0) for k in range(K)])\n        empty_clusts = np.isnan(new_centroids).any(axis=1)\n        new_centroids[empty_clusts] = centroids[empty_clusts]\n        return new_centroids\n    centroids = initialize_centroids(X, K, random_state)\n    for i in range(max_iter):\n        old_centroids = centroids.copy()\n        labels = assign_labels(X, centroids)\n        centroids = update_centroids(X, labels, centroids)\n        if np.all(old_centroids == centroids):\n            break\n    centroids = centroids.round(4)\n    centroids = centroids[centroids[:, 0].argsort()]\n    return centroids.tolist()"}
{"task_id": 109, "completion_id": 7, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    (m, n) = X.shape\n    assert K >= 1 and K <= m, 'Number of clusters K must be between 1 and the number of samples.'\n    centroids = np.zeros((K, n))\n    centroid_idx = random.randint(0, m - 1)\n    centroids[0] = X[centroid_idx]\n    D2 = np.full(m, np.inf)\n    for k in range(1, K):\n        dist_sq = np.sum((X - centroids[k - 1]) ** 2, axis=1)\n        D2 = np.minimum(dist_sq, D2)\n        prob = D2 / D2.sum()\n        cum_prob = prob.cumsum()\n        r = random.random()\n        for (i, cump) in enumerate(cum_prob):\n            if r < cump:\n                centroid_idx = i\n                break\n        centroids[k] = X[centroid_idx]\n    old_labels = np.zeros(m, dtype=int)\n    for _ in range(max_iter):\n        distances = np.sqrt(((X[:, np.newaxis] - centroids) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=1)\n        if np.all(labels == old_labels):\n            break\n        old_labels = labels\n        for k in range(K):\n            cluster = X[labels == k]\n            if len(cluster) > 0:\n                centroids[k] = cluster.mean(axis=0)\n    centroids = np.round(centroids, 4)\n    centroids = sorted(centroids.tolist())\n    return centroids"}
{"task_id": 109, "completion_id": 8, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    centroids = [random.choice(X)]\n    for _ in range(1, K):\n        distances = np.array([min([np.linalg.norm(x - c) for c in centroids]) for x in X])\n        probs = distances / distances.sum()\n        cumulative_probs = probs.cumsum()\n        r = random.random()\n        for (i, cp) in enumerate(cumulative_probs):\n            if r < cp:\n                centroids.append(X[i])\n                break\n    centroids = np.array(centroids)\n    for _ in range(max_iter):\n        distances = np.array([np.linalg.norm(X - c, axis=1) for c in centroids])\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.array([X[labels == k].mean(axis=0) for k in range(K)])\n        for i in range(K):\n            if not np.isfinite(new_centroids[i]).all():\n                new_centroids[i] = centroids[i]\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    centroids = np.round(centroids, 4)\n    centroids = sorted(centroids, key=lambda centroid: tuple(centroid))\n    return centroids.tolist()"}
{"task_id": 109, "completion_id": 9, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    centroids = [random.choice(X)]\n    for k in range(1, K):\n        dist = np.array([min([np.linalg.norm(x - c) for c in centroids]) ** 2 for x in X])\n        probs = dist / dist.sum()\n        cumulative_probs = probs.cumsum()\n        r = random.random()\n        for i in range(len(cumulative_probs)):\n            if r < cumulative_probs[i]:\n                new_centroid = X[i]\n                break\n        centroids.append(new_centroid)\n    for _ in range(max_iter):\n        clusters = [[] for _ in range(K)]\n        for x in X:\n            distances = [np.linalg.norm(x - c) for c in centroids]\n            clusters[np.argmin(distances)].append(x)\n        new_centroids = [centroid.copy() for centroid in centroids]\n        for (i, cluster) in enumerate(clusters):\n            if cluster:\n                new_centroids[i] = np.mean(cluster, axis=0)\n        if np.all([np.array_equal(c_old, c_new) for (c_old, c_new) in zip(centroids, new_centroids)]):\n            break\n        centroids = new_centroids\n    centroids = [[round(c, 4) for c in centroid] for centroid in centroids]\n    centroids.sort()\n    return centroids"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes a raw text string into a fixed-length list of integers based on the provided vocabulary.\"\"\"\n    encoded = np.zeros(time_steps, dtype=int)\n    for (idx, char) in enumerate(text):\n        if idx >= time_steps:\n            break\n        encoded[idx] = vocabulary.get(char, 0)\n    return encoded.tolist()\ndef int_to_string(indices: list[int], inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Decodes a list of integer indices into a human-readable string, ignoring padding tokens.\"\"\"\n    return ''.join((inverse_vocab[idx] for idx in indices if idx != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the input text, predicts using the model, and decodes the prediction.\"\"\"\n    time_steps = TIME_STEPS\n    encoded_input = string_to_int(text, time_steps, input_vocabulary)\n    encoded_input = np.array([encoded_input])\n    model_output = np.random.rand(1, time_steps, len(input_vocabulary))\n    predicted_ids = np.argmax(model_output, axis=-1)\n    predicted_text = int_to_string(predicted_ids[0], inv_output_vocabulary)\n    return predicted_text"}
{"task_id": 111, "completion_id": 1, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    encoded = [vocabulary.get(char, 0) for char in text]\n    encoded = encoded[:time_steps] + [0] * (time_steps - len(encoded))\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    return ''.join((inverse_vocab.get(idx, '') for idx in indices if idx != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    encoded_text = np.array([string_to_int(text, TIME_STEPS, input_vocabulary)])\n    predictions = model.predict(encoded_text)\n    predicted_indices = np.argmax(predictions, axis=-1)\n    return int_to_string(predicted_indices, inv_output_vocabulary)"}
{"task_id": 111, "completion_id": 2, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Converts a string to a fixed-length list of integer IDs using a provided vocabulary.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    if len(encoded) < time_steps:\n        encoded.extend([0] * (time_steps - len(encoded)))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\ndef int_to_string(indices: list[int], inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list of integer IDs back to a string using an inverse vocabulary.\"\"\"\n    decoded = [inverse_vocab[id] for id in indices if id in inverse_vocab]\n    return ''.join(decoded)\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the text, predicts with the model, decodes the prediction.\"\"\"\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_input = np.expand_dims(encoded_input, axis=0)\n    prediction = np.argmax(model.predict(encoded_input), axis=-1)\n    predicted_string = int_to_string(prediction[0], inv_output_vocabulary)\n    return predicted_string\ntext = 'hello world'"}
{"task_id": 111, "completion_id": 3, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encode a string into a list of integer token ids with fixed length.\"\"\"\n    token_ids = [vocabulary.get(char, 0) for char in text]\n    if len(token_ids) < time_steps:\n        token_ids += [0] * (time_steps - len(token_ids))\n    else:\n        token_ids = token_ids[:time_steps]\n    return token_ids\ndef int_to_string(indices: list[int], inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Convert a list/array of integer ids back to a string, ignoring padding tokens.\"\"\"\n    return ''.join([inverse_vocab[id] for id in indices if id != 0])\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encode the text, predict with the model, and decode the prediction.\"\"\"\n    input_ids = string_to_int(text, TIME_STEPS, input_vocabulary)\n    input_batch = np.array(input_ids).reshape(1, -1)\n    predictions = model.predict(input_batch).argmax(axis=-1)\n    decoded_predictions = int_to_string(predictions[0], inv_output_vocabulary)\n    return decoded_predictions"}
{"task_id": 111, "completion_id": 4, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes a string into fixed-length list of token IDs based on provided vocabulary.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\ndef int_to_string(indices: list[int], inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Decodes a list of token IDs into string using an inverse vocabulary and ignores padding tokens.\"\"\"\n    return ''.join([inverse_vocab[i] for i in indices if i != 0])\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes text, passes it through a model, gets prediction, and decodes back to text.\"\"\"\n    time_steps = TIME_STEPS\n    encoded_input = string_to_int(text, time_steps, input_vocabulary)\n    input_batch = np.array([encoded_input])\n    predictions = model.predict(input_batch)\n    predicted_classes = predictions.argmax(axis=-1)\n    prediction_string = int_to_string(predicted_classes[0], inv_output_vocabulary)\n    return prediction_string\ninput_vocabulary = {chr(i): i for i in range(97, 123)}\ninv_output_vocabulary = {v: k for (k, v) in input_vocabulary.items()}"}
{"task_id": 111, "completion_id": 5, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes a text string into a fixed-length list of integer token ids.\"\"\"\n    encoded = []\n    for char in text:\n        encoded.append(vocabulary.get(char, 0))\n        if len(encoded) == time_steps:\n            break\n    while len(encoded) < time_steps:\n        encoded.append(0)\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Decodes a list of integer ids back to text, ignoring padding tokens.\"\"\"\n    decoded = ''\n    for idx in indices:\n        if idx != 0:\n            decoded += inverse_vocab.get(idx, '')\n    return decoded\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes input text, predicts with model, and decodes output.\"\"\"\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_text_batch = np.array([encoded_text])\n    pred_probs = np.random.rand(1, TIME_STEPS, len(inv_output_vocabulary))\n    pred_ids = np.argmax(pred_probs, axis=-1)\n    decoded_prediction = int_to_string(pred_ids[0], inv_output_vocabulary)\n    return decoded_prediction\ninput_vocabulary = {char: i + 1 for (i, char) in enumerate('abcdefghijklmnopqrstuvwxyz')}\ninv_output_vocabulary = {i + 1: char for (i, char) in enumerate('abcdefghijklmnopqrstuvwxyz')}"}
{"task_id": 111, "completion_id": 6, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encodes the text into a fixed-length list of integer token ids using the provided vocabulary.\n    \"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    if len(encoded) < time_steps:\n        encoded.extend([0] * (time_steps - len(encoded)))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Decodes a list/array of integer ids back to text ignoring padding tokens (0).\n    \"\"\"\n    return ''.join((inverse_vocab.get(i, '') for i in indices if i != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Encodes raw text to integers, runs a model's prediction on it, decodes prediction to text.\n    \"\"\"\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    model_output = model.predict([encoded_text])[0]\n    predicted_ids = np.argmax(model_output, axis=-1)\n    return int_to_string(predicted_ids, inv_output_vocabulary)"}
{"task_id": 111, "completion_id": 7, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes the input string into a list of token IDs of a fixed length.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    if len(encoded) < time_steps:\n        encoded.extend([0] * (time_steps - len(encoded)))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Decodes a list of integer token IDs back into a string, ignoring padding tokens.\"\"\"\n    return ''.join((inverse_vocab.get(idx) for idx in indices if idx != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes text, gets model prediction, converts back to text.\"\"\"\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    predictions = model.predict([encoded_text])[0]\n    predicted_ids = np.argmax(predictions, axis=-1)\n    decoded_string = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_string"}
{"task_id": 111, "completion_id": 8, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encodes the input text string into a fixed-length list of integer token ids using the provided vocabulary.\n    If the string is shorter than time_steps, it is padded with zeros. If it is longer, it is truncated.\n    Unknown characters are encoded as zeros (padding token).\n    \"\"\"\n    encoded = []\n    for char in text:\n        encoded.append(vocabulary.get(char, 0))\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    else:\n        encoded = encoded[:time_steps]\n    return list(encoded)\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Decode a list of integer indices back into a string, ignoring index 0 (padding tokens).\n    \"\"\"\n    decoded_chars = [inverse_vocab[i] for i in indices if i != 0]\n    return ''.join(decoded_chars)\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Encode the input text, run a mock model prediction, and decode the output ids back into a string.\n    \"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded = np.expand_dims(encoded, 0)\n    mock_prediction = encoded\n    predicted_ids = np.argmax(mock_prediction, axis=-1)[0]\n    decoded_text = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_text\nvocabulary = {char: idx for (idx, char) in enumerate('abc', 1)}\ninverse_vocab = {idx: char for (char, idx) in vocabulary.items()}\ntext_input = 'ab'\nmodel = None\ndecoded_text = run_example(model, vocabulary, inverse_vocab, text_input)"}
{"task_id": 111, "completion_id": 9, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encodes every character of the input string using the provided vocabulary.\n    Truncates or pads the sequence to the specified time_steps length.\n\n    Args:\n    text (str): The input string to encode.\n    time_steps (int): The fixed length of the output list.\n    vocabulary (dict[str, int]): A dictionary mapping characters to integer IDs.\n\n    Returns:\n    list[int]: The encoded sequence with fixed length.\n    \"\"\"\n    encoded = [0] * time_steps\n    for (i, char) in enumerate(text):\n        if i >= time_steps:\n            break\n        encoded[i] = vocabulary.get(char, 0)\n    return encoded\ndef int_to_string(indices: list[int], inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Converts a list of integer IDs back to text using the inverse vocabulary.\n    Ignores the padding token (0) during decoding.\n\n    Args:\n    indices (list[int]): A list of integer IDs.\n    inverse_vocab (dict[int, str]): A dictionary mapping integer IDs to characters.\n\n    Returns:\n    str: The decoded text string without padding tokens.\n    \"\"\"\n    return ''.join((inverse_vocab[i] for i in indices if i != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Encodes the input text, makes a model prediction, and decodes the prediction string.\n\n    Args:\n    model: A neural model with a predict method.\n    input_vocabulary (dict[str, int]): The vocabulary used for encoding the input text.\n    inv_output_vocabulary (dict[int, str]): The inverse vocabulary used for decoding the prediction.\n    text (str): The raw text to process.\n\n    Returns:\n    str: The decoded prediction string.\n    \"\"\"\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_text = np.array([encoded_text])\n    prediction = model.predict(encoded_text)\n    prediction = np.argmax(prediction, axis=-1)\n    prediction_str = int_to_string(prediction[0], inv_output_vocabulary)\n    return prediction_str"}
{"task_id": 113, "completion_id": 0, "solution": "EXAMPLES = ['hello world', 'example input', 'another example']\ndef run_example(model, input_vocabulary, inv_output_vocabulary, example):\n    \"\"\"Dummy function to simulate the example running process\n    \n    In practice this function would interact with a model using the provided\n    `input_vocabulary` and `inv_output_vocabulary`. However, for this task\n    it merely simulates output for testing and demonstration purposes.\n    \n    Args:\n        model (callable): The model used to generate predictions.\n        input_vocabulary (dict): A dummy parameter kept for compatibility.\n        inv_output_vocabulary (dict): Another dummy parameter for compatibility.\n        example (str): The input string for prediction.\n        \n    Returns:\n        list: A list of characters representing the model's output.\n    \"\"\"\n    return [char.upper() for char in example]\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        output_string = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {output_string}')\n        predictions.append(output_string)\n    return predictions"}
{"task_id": 113, "completion_id": 1, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    predictions = []\n    if examples is None:\n        examples = EXAMPLES\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_str = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {predicted_str}')\n        predictions.append(predicted_str)\n    return predictions"}
{"task_id": 113, "completion_id": 2, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        global EXAMPLES\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        output_str = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {output_str}')\n        predictions.append(output_str)\n    return predictions\ndef run_example(model, input_vocabulary, inv_output_vocabulary, example):\n    return list(model(example))\nEXAMPLES = ['hello', 'world']"}
{"task_id": 113, "completion_id": 3, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        prediction_list = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(prediction_list)\n        print(f'input:  {example}')\n        print(f'output: {predicted_string}')\n        predictions.append(predicted_string)\n    return predictions\nEXAMPLES = ['example1', 'example2', 'example3']"}
{"task_id": 113, "completion_id": 4, "solution": "EXAMPLES = ['hello', 'world', 'python', 'code']\ndef run_example(model, input_vocabulary, inv_output_vocabulary, example):\n    \"\"\"Simulate running an example through a model and returning a list of characters.\"\"\"\n    return list(model(example))\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        output_str = ''.join(output_chars)\n        predictions.append(output_str)\n        print(f'input:  {example}')\n        print(f'output: {output_str}')\n    return predictions\ndef mirroring_model(input_string):\n    return input_string[::-1]\nvocabulary = {char: idx for (idx, char) in enumerate('abcdefghijklmnopqrstuvwxyz')}\ninv_vocabulary = {idx: char for (char, idx) in vocabulary.items()}\npredictions = run_examples(mirroring_model, vocabulary, inv_vocabulary)"}
{"task_id": 113, "completion_id": 5, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 run_examples does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    predictions = []\n    if examples is None:\n        examples = EXAMPLES\n    for example in examples:\n        output_characters = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(output_characters)\n        print(f'input:  {example}')\n        print(f'output: {predicted_string}')\n        predictions.append(predicted_string)\n    return predictions\nEXAMPLES = ['Hello world', 'This is a test', 'Another example']\ndef run_example(model, input_vocabulary, inv_output_vocabulary, example):\n    return list(model(example))"}
{"task_id": 113, "completion_id": 6, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices. Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters. Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings. If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    predictions = []\n    if examples is None:\n        examples = EXAMPLES\n    for example in examples:\n        output_list = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        output_str = ''.join(output_list)\n        print(f'input:  {example}')\n        print(f'output: {output_str}')\n        predictions.append(output_str)\n    return predictions"}
{"task_id": 113, "completion_id": 7, "solution": "def run_example(model, input_vocabulary, inv_output_vocabulary, example):\n    output = model(example)\n    return list(output)\nEXAMPLES = ['hello', 'world', 'python', 'programming']\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n    \n    Parameters:\n    model : callable\n        A function that receives a single input string and returns the corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices. Provided only for API compatibility.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters. Also unused inside this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings. If None, the function should use the global constant `EXAMPLES`.\n    \n    Returns:\n    list[str]\n        The list of model predictions, one for each input example, in the same order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        predicted_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_str = ''.join(predicted_chars)\n        print(f'input:  {example}')\n        print(f'output: {predicted_str}\\n')\n        predictions.append(predicted_str)\n    return predictions\ndef model(input_string):\n    return input_string[::-1]\ninput_vocabulary = {'a': 0, 'b': 1, 'c': 2}\ninv_output_vocabulary = {0: 'a', 1: 'b', 2: 'c'}\npredictions = run_examples(model, input_vocabulary, inv_output_vocabulary, ['ai', 'worlds', 'python3'])"}
{"task_id": 113, "completion_id": 8, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices. Provided only for API\n        compatibility \u2013 run_examples does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters. Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings. If None, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        global EXAMPLES\n        examples = EXAMPLES\n    predicted_strings = []\n    for example in examples:\n        output_list = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(output_list)\n        print(f'input:  {example}')\n        print(f'output: {predicted_string}')\n        predicted_strings.append(predicted_string)\n    return predicted_strings\nEXAMPLES = ['hello world', 'how are you', 'what is your name']\ndef run_example(model, input_vocabulary, inv_output_vocabulary, example):\n    return list(model(example))"}
{"task_id": 113, "completion_id": 9, "solution": "def run_example(model, input_vocabulary, inv_output_vocabulary, example):\n    result = model(example)\n    return list(result)\nEXAMPLES = ['Hello, world!', 'How are you today?', 'Programming is fun.']\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        output_list = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        output_str = ''.join(output_list)\n        predictions.append(output_str)\n        print(f'input:  {example}')\n        print(f'output: {output_str}')\n    return predictions"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Sigmoid function.\"\"\"\n    return 1 / (1 + np.exp(-z))\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    if X.shape[1] == w.shape[0] - 1:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        w = np.insert(w, 0, 0)\n    y = y.reshape(-1, 1)\n    w = w.reshape(-1, 1)\n    z = X @ w\n    p = sigmoid(z)\n    p = np.clip(p, 1e-20, 1 - 1e-20)\n    loss = -1 / m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = round(float(np.squeeze(loss)), 4)\n    gradient = 1 / m * X.T @ (p - y)\n    gradient = np.round(gradient, 4).tolist()\n    return (loss, gradient)"}
{"task_id": 115, "completion_id": 1, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = X.shape[0]\n    z = X.dot(w)\n    p = 1 / (1 + np.exp(-z))\n    p = np.clip(p, 1e-20, 1 - 1e-20)\n    loss = -np.sum(y * np.log(p) + (1 - y) * np.log(1 - p)) / m\n    loss = np.round(loss, 4)\n    gradient = X.T.dot(p - y) / m\n    gradient = np.round(gradient, 4).tolist()\n    return (float(loss), gradient)\ny = np.array([0, 1, 1])\nw = np.array([0.5, -0.5])"}
{"task_id": 115, "completion_id": 2, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = X.shape[0]\n    z = np.dot(X, w).flatten()\n    p = 1 / (1 + np.exp(-z))\n    p = np.clip(p, 1e-20, 1 - 1e-20)\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = np.dot(X.T, p - y) / m\n    return (round(loss, 4), gradient.round(4).tolist())"}
{"task_id": 115, "completion_id": 3, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded\n               to 4 decimals and converted to a (nested) Python list via tolist().\n    \"\"\"\n    y = y.reshape(-1, 1)\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    p = np.clip(p, 1e-20, 1 - 1e-20)\n    loss = -1 / X.shape[0] * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = round(loss, 4)\n    gradient = 1 / X.shape[0] * X.T @ (p - y)\n    gradient = np.round(gradient, 4).tolist()\n    return (loss, gradient)"}
{"task_id": 115, "completion_id": 4, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = len(y)\n    epsilon = 1e-20\n    p = 1 / (1 + np.exp(-X @ w))\n    p = np.clip(p, epsilon, 1 - epsilon)\n    loss = -1 / m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = round(loss, 4)\n    gradient = 1 / m * X.T @ (p - y)\n    gradient = np.around(gradient, 4).tolist()\n    return (loss, gradient)"}
{"task_id": 115, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid(z: np.ndarray) -> np.ndarray:\n    \"\"\"Applies the sigmoid function to every element in z.\"\"\"\n    return 1 / (1 + np.exp(-z))\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing:\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via tolist().\n    \"\"\"\n    m = X.shape[0]\n    z = X.dot(w)\n    p = sigmoid(z)\n    epsilon = 1e-20\n    p[p == 0] = epsilon\n    p[p == 1] = 1 - epsilon\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = round(loss, 4)\n    gradient = 1 / m * X.T.dot(p - y.reshape(-1, 1))\n    gradient = np.round(gradient, 4).tolist()\n    return (loss, gradient)"}
{"task_id": 115, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid(z: np.ndarray) -> np.ndarray:\n    \"\"\"Sigmoid function applied element-wise.\"\"\"\n    return 1 / (1 + np.exp(-z))\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = y.size\n    z = X @ w\n    p = sigmoid(z)\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    loss = -np.sum(y * np.log(p) + (1 - y) * np.log(1 - p)) / m\n    gradient = X.T @ (p - y) / m\n    return (round(loss, 4), np.round(gradient, 4).tolist())"}
{"task_id": 115, "completion_id": 7, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = X.shape[0]\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    loss = -1.0 / m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = np.round(loss, 4)\n    gradient = 1.0 / m * np.dot(X.T, p - y)\n    gradient = np.round(gradient, 4).tolist()\n    return (loss, gradient)\nX = np.array([[1, 2], [3, 4]])\ny = np.array([0, 1])\nw = np.array([0.1, 0.2])"}
{"task_id": 115, "completion_id": 8, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via tolist().\n    \"\"\"\n    m = X.shape[0]\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    p = np.clip(p, a_min=1e-20, a_max=1 - 1e-20)\n    loss = -(1 / m) * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = np.round(loss, decimals=4)\n    gradient = 1 / m * np.dot(X.T, p - y)\n    gradient = np.round(gradient, decimals=4).tolist()\n    return (loss, gradient)\nX = np.array([[1, 0], [0, 1], [1, 1]])\ny = np.array([0, 1, 1])\nw = np.array([0.1, 0.2])"}
{"task_id": 115, "completion_id": 9, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n    \n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n    \n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    epsilon = 1e-20\n    m = len(y)\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    p[p == 0] = epsilon\n    p[p == 1] = 1 - epsilon\n    loss = -1 / m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = 1 / m * X.T @ (p - y)\n    loss_rounded = round(loss, 4)\n    gradient_rounded = np.round(gradient, 4).tolist()\n    return (loss_rounded, gradient_rounded)\nX = np.array([[1, 2], [3, 4]])\ny = np.array([0, 1])\nw = np.array([0.5, -0.5])"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    n_clf = max(1, n_clf)\n    weights = np.full(m, 1 / m)\n    clfs = []\n    alphas = []\n    for _ in range(n_clf):\n        (clf, min_error, feature_idx, threshold, polarity) = find_best_stump(X_train, y_train, weights)\n        error = min_error\n        alpha = 0.5 * np.log((1 - error) / error)\n        alphas.append(alpha)\n        clfs.append((clf, feature_idx, threshold, polarity))\n        predictions = clf.predict(X_train) * polarity\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n    predictions_sum = np.zeros(len(X_test))\n    for (alpha, (clf, feature_idx, threshold, polarity)) in zip(alphas, clfs):\n        prediction = clf.predict(X_test) * polarity\n        predictions_sum += alpha * prediction\n    return [1 if p > 0 else -1 for p in predictions_sum]\ndef find_best_stump(X, y, weights):\n    \"\"\"Find the best decision stump.\"\"\"\n    (m, n) = X.shape\n    best_clf = None\n    best_error = float('inf')\n    best_feature_idx = 0\n    best_threshold = 0\n    best_polarity = 1\n    for feature_idx in range(n):\n        for threshold in np.unique(X[:, feature_idx]):\n            for polarity in [1, -1]:\n                prediction = np.where(X[:, feature_idx] > threshold, polarity, -polarity)\n                error = np.sum(weights[y != prediction])\n                if error < best_error:\n                    best_error = error\n                    best_clf = DecisionStump()\n                    best_clf.fit(X, y, feature_idx, threshold)\n                    best_feature_idx = feature_idx\n                    best_threshold = threshold\n                    best_polarity = polarity\n    return (best_clf, best_error, best_feature_idx, best_threshold, best_polarity)\nclass DecisionStump:\n\n    def __init__(self):\n        self.feature_idx = 0\n        self.threshold = 0.0\n\n    def fit(self, X, y, feature_idx, threshold):\n        self.feature_idx = feature_idx\n        self.threshold = threshold\n\n    def predict(self, X):\n        return np.where(X[:, self.feature_idx] > self.threshold, 1, -1)"}
{"task_id": 118, "completion_id": 1, "solution": "import numpy as np\ndef decision_stump(X, y, weights):\n    \"\"\" Create a decision stump, a weak learner. \"\"\"\n    best_error = float('inf')\n    best_threshold = 0.0\n    best_feature = 0\n    best_polarity = 1\n    for i in range(X.shape[1]):\n        for threshold in np.unique(X[:, i]):\n            for polarity in [-1, 1]:\n                predicted = polarity * np.where(X[:, i] > threshold, 1, -1)\n                error = np.sum(weights[predicted != y])\n                if error < best_error:\n                    best_error = error\n                    best_threshold = threshold\n                    best_feature = i\n                    best_polarity = polarity\n    return ((best_feature, best_threshold, best_polarity), best_error)\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (n_samples, n_features) = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    alpha_values = []\n    for _ in range(n_clf):\n        (stump, error) = decision_stump(X_train, y_train, weights)\n        epsilon = error / np.sum(weights)\n        if epsilon > 0.5:\n            continue\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        stump = (*stump, alpha)\n        stumps.append(stump)\n        alpha_values.append(alpha)\n        predicted = stump[2] * np.where(X_train[:, stump[0]] > stump[1], 1, -1)\n        weights *= np.exp(-alpha * y_train * predicted)\n        weights /= np.sum(weights)\n\n    def predict_single(x):\n        return np.sign(sum((alpha * np.sign(x[feature] - threshold) * polarity for (feature, threshold, polarity, alpha) in zip(*stumps, alpha_values))))\n    predictions = [predict_single(x) for x in X_test]\n    return list(map(int, predictions))"}
{"task_id": 118, "completion_id": 2, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf: Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_clf = max(n_clf, 1)\n    (m, n) = X_train.shape\n    weights = np.full(m, 1 / m)\n    stumps = []\n    stump_weights = []\n    for _ in range(n_clf):\n        best_feature = None\n        best_threshold = 0\n        best_error = float('inf')\n        best_prediction = None\n        best_sign = 1\n        for feature in range(n):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for sign in [-1, 1]:\n                    prediction = sign * (X_train[:, feature] < threshold)\n                    error = np.sum(weights[prediction != y_train])\n                    if error < best_error:\n                        best_error = error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_prediction = prediction\n                        best_sign = sign\n        if best_error > 0.5:\n            continue\n        stump_weight = 0.5 * np.log((1 - best_error) / best_error)\n        stump_weights.append(stump_weight)\n        stumps.append((best_sign, best_feature, best_threshold))\n        alpha_error = np.exp(-stump_weight * y_train * best_prediction)\n        weights *= alpha_error\n        weights /= np.sum(weights)\n    test_predictions = []\n    for x in X_test:\n        total_vote = 0\n        for (idx, stump) in enumerate(stumps):\n            (sign, feature, threshold) = stump\n            vote = sign * (x[feature] < threshold)\n            total_vote += stump_weights[idx] * vote\n        test_predictions.append(np.sign(total_vote))\n    return test_predictions.tolist()"}
{"task_id": 118, "completion_id": 3, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    n_clf = max(1, n_clf)\n    weak_learners = []\n    stump_weights = []\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    for _ in range(n_clf):\n        best_error = np.inf\n        best_threshold = 0\n        best_feature = 0\n        best_polarity = 1\n        stump = {}\n        for feature in range(n_features):\n            for threshold in np.unique(X_train[:, feature]):\n                for polarity in [1, -1]:\n                    predictions = np.where(polarity * X_train[:, feature] > polarity * threshold, 1, -1)\n                    error = np.sum(sample_weights[predictions != y_train])\n                    if error < best_error:\n                        best_error = error\n                        best_threshold = threshold\n                        best_feature = feature\n                        best_polarity = polarity\n        stump_weight = 0.5 * np.log((1 - best_error) / best_error)\n        stump = {'feature': best_feature, 'threshold': best_threshold, 'polarity': best_polarity}\n        weak_learners.append(stump)\n        stump_weights.append(stump_weight)\n        update = np.where(best_polarity * X_train[:, best_feature] > best_polarity * best_threshold, 1, -1)\n        update = np.where(update != y_train, 1, 0)\n        sample_weights *= np.exp(update * stump_weight)\n        sample_weights /= np.sum(sample_weights)\n    predictions_test = np.zeros(X_test.shape[0])\n    for (i, stump) in enumerate(weak_learners):\n        predictions = np.where(stump['polarity'] * X_test[:, stump['feature']] > stump['polarity'] * stump['threshold'], 1, -1)\n        predictions_test += predictions * stump_weights[i]\n    predictions_test = np.sign(predictions_test).astype(int)\n    return predictions_test.tolist()"}
{"task_id": 118, "completion_id": 4, "solution": "import numpy as np\nfrom typing import Tuple\ndef build_decision_stump(X, y, sample_weights):\n    \"\"\"Return the stump and its error.\"\"\"\n    best_stump = None\n    lowest_error = float('inf')\n    (m, n) = X.shape\n    for idx in range(n):\n        for val in np.unique(X[:, idx]):\n            for polarity in (-1, 1):\n                predictions = np.where(X[:, idx] >= val if polarity > 0 else X[:, idx] < val, 1, -1)\n                error = np.sum(sample_weights * (predictions != y))\n                if error < lowest_error:\n                    lowest_error = error\n                    best_stump = {'dim': idx, 'val': val, 'polarity': polarity}\n    return (best_stump, lowest_error)\ndef predict_stump(x, stump):\n    \"\"\"Predict using a decision stump.\"\"\"\n    prediction = 1 if (x[stump['dim']] >= stump['val']) == (stump['polarity'] > 0) else -1\n    return prediction\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    sample_weights = np.full(X_train.shape[0], 1.0 / X_train.shape[0])\n    stumps = []\n    weights = []\n    for _ in range(n_clf):\n        (stump, stump_error) = build_decision_stump(X_train, y_train, sample_weights)\n        stump_weight = 0.5 * np.log((1 - stump_error) / stump_error)\n        stumps.append(stump)\n        weights.append(stump_weight)\n        predictions = np.array([predict_stump(x, stump) for x in X_train])\n        error_indicator = predictions != y_train\n        sample_weights *= np.exp(stump_weight * error_indicator)\n        sample_weights /= np.sum(sample_weights)\n    predictions = []\n    for x in X_test:\n        weighted_vote = sum((w * predict_stump(x, s) for (w, s) in zip(weights, stumps)))\n        predictions.append(np.sign(weighted_vote))\n    return list(predictions)"}
{"task_id": 118, "completion_id": 5, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\"\"\"\n    n_clf = max(n_clf, 1)\n    (n_samples, n_features) = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    stump_weights = []\n    stump_features = []\n    stump_thresholds = []\n    stump_polarities = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        stump_clf = None\n        feature_idx = None\n        threshold = None\n        polarity = 1\n        for j in range(n_features):\n            thresholds = np.unique(X_train[:, j])\n            for t in thresholds:\n                for p in [-1, 1]:\n                    prediction = np.where(X_train[:, j] > t, p, -p)\n                    error = np.sum(weights[prediction != y_train])\n                    weighted_error = np.sum(error)\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        stump_clf = prediction\n                        feature_idx = j\n                        threshold = t\n                        polarity = p\n        error_rate = np.sum(weights[stump_clf != y_train]) / np.sum(weights)\n        alpha = 0.5 * np.log((1 - error_rate) / error_rate)\n        stump_weights.append(alpha)\n        stump_features.append(feature_idx)\n        stump_thresholds.append(threshold)\n        stump_polarities.append(polarity)\n        weights *= np.exp(-alpha * y_train * stump_clf)\n        weights /= np.sum(weights)\n    predictions = np.zeros(X_test.shape[0])\n    for (alpha, feature, threshold, polarity) in zip(stump_weights, stump_features, stump_thresholds, stump_polarities):\n        stump_prediction = np.where(X_test[:, feature] > threshold, polarity, -polarity)\n        predictions += alpha * stump_prediction\n    return list(np.sign(predictions))"}
{"task_id": 118, "completion_id": 6, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf: Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_clf = max(1, n_clf)\n    (m, n) = X_train.shape\n    w = np.full(m, 1 / m)\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = {'feature': -1, 'threshold': 0.0, 'polarity': 1}\n        for feature in range(n):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.where(polarity * X_train[:, feature] > polarity * threshold, 1, -1)\n                    error = np.sum(w[y_train != predictions])\n                    if error < min_error:\n                        min_error = error\n                        best_stump['feature'] = feature\n                        best_stump['threshold'] = threshold\n                        best_stump['polarity'] = polarity\n        alpha = 0.5 * np.log((1 - min_error) / min_error)\n        alphas.append(alpha)\n        stumps.append(best_stump)\n        predictions = np.where(best_stump['polarity'] * X_train[:, best_stump['feature']] > best_stump['polarity'] * best_stump['threshold'], 1, -1)\n        w *= np.exp(-alpha * y_train * predictions)\n        w /= np.sum(w)\n    test_predictions = np.zeros(X_test.shape[0])\n    for (stump, alpha) in zip(stumps, alphas):\n        stump_predictions = np.where(stump['polarity'] * X_test[:, stump['feature']] > stump['polarity'] * stump['threshold'], 1, -1)\n        test_predictions += alpha * stump_predictions\n    return np.sign(test_predictions).astype(int).tolist()"}
{"task_id": 118, "completion_id": 7, "solution": "import numpy as np\ndef decision_stump(X, y, w):\n    \"\"\"Fits a 1-level decision tree (stump) on data (X, y) with weight w.\"\"\"\n    (m, n) = X.shape\n    best_error = np.inf\n    best_j = best_t = best_side = None\n    for j in range(n):\n        thresholds = np.unique(X[:, j])\n        for t in thresholds:\n            for side in [-1, 1]:\n                preds = np.ones_like(y)\n                if side == 1:\n                    preds[X[:, j] < t] = -1\n                else:\n                    preds[X[:, j] > t] = -1\n                error = np.sum(w * (preds != y))\n                if error < best_error:\n                    best_error = error\n                    best_j = j\n                    best_t = t\n                    best_side = side\n    if best_side == 1:\n        pred = np.where(X[:, best_j] < best_t, -1, 1)\n    else:\n        pred = np.where(X[:, best_j] > best_t, -1, 1)\n    return ((best_j, best_t, best_side), pred, best_error)\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, _) = X_train.shape\n    k = X_test.shape[0]\n    w = np.ones(m) / m\n    classifiers = []\n    alphas = []\n    for t in range(max(1, n_clf)):\n        (stump, stump_pred, error) = decision_stump(X_train, y_train, w)\n        alpha = 0.5 * np.log((1.0 - error) / error)\n        w *= np.exp(-alpha * y_train * stump_pred)\n        w /= np.sum(w)\n        classifiers.append(stump)\n        alphas.append(alpha)\n    preds = np.zeros(k)\n    for (i, stump) in enumerate(classifiers):\n        (j, t, side) = stump\n        if side == 1:\n            pred = np.where(X_test[:, j] < t, -1, 1)\n        else:\n            pred = np.where(X_test[:, j] > t, -1, 1)\n        preds += alphas[i] * pred\n    return list(np.sign(preds))\nX_train = np.array([[0.1, 0.2], [0.9, 1.1], [1.2, 1.5], [0.8, 0.7]])\ny_train = np.array([-1, -1, 1, 1])\nX_test = np.array([[0.2, 0.3], [1.0, 1.2]])\nn_clf = 3"}
{"task_id": 118, "completion_id": 8, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    n_clf = max(1, n_clf)\n    weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    stump_weights = []\n    for _ in range(n_clf):\n        (best_split_val, best_feature, best_polarity) = (0, 0, 0)\n        (best_error, best_prediction) = (1, np.zeros(n_samples))\n        for feature in range(n_features):\n            for split_val in np.unique(X_train[:, feature]):\n                prediction = np.ones_like(y_train)\n                prediction[X_train[:, feature] < split_val] = -1\n                error = np.sum(weights[y_train != prediction])\n                if error > 0.5:\n                    error = 1 - error\n                    prediction = -prediction\n                if error < best_error:\n                    (best_split_val, best_feature, best_polarity) = (split_val, feature, np.sign(prediction[0]))\n                    best_error = error\n                    best_prediction = prediction\n        alpha = 0.5 * np.log((1 - best_error) / best_error)\n        stump_weights.append(alpha)\n        stumps.append((best_feature, best_split_val, best_polarity))\n        weights *= np.exp(-alpha * y_train * best_prediction)\n        weights /= np.sum(weights)\n    predictions = np.zeros(X_test.shape[0])\n    for (i, (feature, split_val, polarity)) in enumerate(stumps):\n        prediction = np.ones(X_test.shape[0])\n        prediction[X_test[:, feature] < split_val] = -1\n        prediction *= polarity\n        predictions += stump_weights[i] * prediction\n    return [int(np.sign(pred)) for pred in predictions]\nX_train = np.array([[1, 2], [2, 1], [3, 1], [4, 1]])\ny_train = np.array([1, 1, -1, -1])\nX_test = np.array([[2, 1], [3, 1]])\npredictions = adaboost_predict(X_train, y_train, X_test)"}
{"task_id": 118, "completion_id": 9, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    if n_clf < 1:\n        n_clf = 1\n    weights = np.full(m, 1 / m)\n    stumps = []\n    for _ in range(n_clf):\n        (best_stump, min_error) = (None, 1)\n        for feature in range(n):\n            for threshold in np.unique(X_train[:, feature]):\n                for polarity in [-1, 1]:\n                    pred = np.where(polarity * X_train[:, feature] > polarity * threshold, 1, -1)\n                    error = np.sum(weights[pred != y_train])\n                    if error < min_error:\n                        (min_error, best_stump) = (error, (feature, threshold, polarity))\n        (feature, threshold, polarity) = best_stump\n        alpha = 0.5 * np.log((1 - min_error) / min_error)\n        pred = np.where(polarity * X_train[:, feature] > polarity * threshold, 1, -1)\n        weights *= np.exp(-alpha * y_train * pred)\n        weights /= np.sum(weights)\n        stumps.append((best_stump, alpha))\n    combined_preds = np.zeros(X_test.shape[0])\n    for ((feature, threshold, polarity), alpha) in stumps:\n        pred = np.where(polarity * X_test[:, feature] > polarity * threshold, 1, -1)\n        combined_preds += alpha * pred\n    return [1 if pred > 0 else -1 for pred in combined_preds]\nX_train = np.array([[1, 2], [2, 1], [1, 1], [2, 3], [3, 1]])\ny_train = np.array([-1, -1, 1, -1, 1])\nX_test = np.array([[2, 2], [1, 2]])\nn_clf = 5"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    mean_overall = np.mean(X, axis=0)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    class_labels = np.unique(y)\n    for label in class_labels:\n        class_members = X[y == label]\n        mean_class = np.mean(class_members, axis=0)\n        S_W += (class_members - mean_class).T.dot(class_members - mean_class)\n        mean_diff = (mean_class - mean_overall).reshape(X.shape[1], 1)\n        S_B += class_members.shape[0] * mean_diff.dot(mean_diff.T)\n    (eig_vals, eig_vecs) = np.linalg.eigh(np.linalg.pinv(S_W).dot(S_B))\n    eig_pairs = [(np.abs(eig_vals[i]), eig_vecs[:, i]) for i in range(len(eig_vals))]\n    eig_pairs = sorted(eig_pairs, key=lambda k: k[0], reverse=True)\n    for i in range(n_components):\n        eig_vecs[:, i] = eig_pairs[i][1]\n        flip_sign = eig_vecs[0, i] < 0\n        if flip_sign:\n            eig_vecs[:, i] = -eig_vecs[:, i]\n    W = eig_vecs[:, :n_components]\n    X_transformed = X.dot(W)\n    return X_transformed.round(4).tolist()\nX = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\nn_components = 1"}
{"task_id": 128, "completion_id": 1, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    classes = np.unique(y)\n    global_mean = np.mean(X, axis=0)\n    S_W = np.zeros((n_features, n_features))\n    S_B = np.zeros((n_features, n_features))\n    for cls in classes:\n        class_samples = X[y == cls]\n        class_mean = np.mean(class_samples, axis=0)\n        S_W += np.dot((class_samples - class_mean).T, class_samples - class_mean)\n        overall_diff = class_mean - global_mean\n        S_B += class_samples.shape[0] * np.dot(overall_diff[:, np.newaxis], overall_diff[np.newaxis, :])\n    (eigen_values, eigen_vectors) = np.linalg.eigh(np.linalg.pinv(S_W).dot(S_B))\n    eigen_pairs = [(eigen_values[i], eigen_vectors[:, i]) for i in range(len(eigen_values))]\n    eigen_pairs = sorted(eigen_pairs, key=lambda k: k[0], reverse=True)\n    W = np.array([flip_eigenvector_sign(pair[1]) for pair in eigen_pairs[:n_components]]).T\n    transformed = X.dot(W)\n    transformed = np.round(transformed, decimals=4)\n    return transformed.tolist()\nX = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])"}
{"task_id": 128, "completion_id": 2, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    classes = np.unique(y)\n    dim = X.shape[1]\n    total_mean = np.mean(X, axis=0)\n    S_W = np.zeros((dim, dim))\n    for cls in classes:\n        X_class = X[y == cls]\n        mean_vec = np.mean(X_class, axis=0)\n        S_W += (X_class - mean_vec).T.dot(X_class - mean_vec)\n    S_B = np.zeros((dim, dim))\n    for cls in classes:\n        X_class = X[y == cls]\n        mean_vec = np.mean(X_class, axis=0)\n        S_B += X_class.shape[0] * (mean_vec - total_mean).dot((mean_vec - total_mean).T)\n    (eigen_values, eigen_vectors) = np.linalg.eigh(np.linalg.pinv(S_W).dot(S_B))\n    sorted_idx = eigen_values.argsort()[::-1]\n    eigen_values = eigen_values[sorted_idx]\n    eigen_vectors = eigen_vectors[:, sorted_idx]\n    for ev in eigen_vectors.T:\n        ev /= np.sign(ev[np.argmax(np.abs(ev))])\n    W = eigen_vectors[:, :n_components]\n    X_lda = X.dot(W)\n    return X_lda.round(4).tolist()\nX = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\nn_components = 1"}
{"task_id": 128, "completion_id": 3, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    unique_labels = np.unique(y)\n    n_classes = unique_labels.size\n    n_features = X.shape[1]\n    S_W = np.zeros((n_features, n_features))\n    S_B = np.zeros((n_features, n_features))\n    global_mean = np.mean(X, axis=0)\n    for label in unique_labels:\n        class_samples = X[y == label]\n        class_mean = np.mean(class_samples, axis=0)\n        S_W += np.dot((class_samples - class_mean).T, class_samples - class_mean)\n        S_B += len(class_samples) * np.dot((class_mean - global_mean).reshape(-1, 1), (class_mean - global_mean).reshape(1, -1))\n    S_W_inv = np.linalg.pinv(S_W)\n    A = np.dot(S_W_inv, S_B)\n    (eigen_values, eigen_vectors) = np.linalg.eigh(A)\n    sorted_indices = np.argsort(eigen_values)[::-1]\n    sorted_eigen_vectors = eigen_vectors[:, sorted_indices]\n    for i in range(sorted_eigen_vectors.shape[1]):\n        if sorted_eigen_vectors[0, i] < 0:\n            sorted_eigen_vectors[:, i] *= -1\n    projection_matrix = sorted_eigen_vectors[:, :n_components]\n    projected_X = np.dot(X, projection_matrix)\n    rounded_projected_X = np.round(projected_X, 4).tolist()\n    return rounded_projected_X\nX = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\nn_components = 1"}
{"task_id": 128, "completion_id": 4, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    mean_overall = np.mean(X, axis=0)\n    n_features = X.shape[1]\n    S_W = np.zeros((n_features, n_features))\n    S_B = np.zeros((n_features, n_features))\n    classes = np.unique(y)\n    for c in classes:\n        X_class = X[y == c]\n        mean_class = np.mean(X_class, axis=0)\n        S_W += (X_class - mean_class).T @ (X_class - mean_class)\n        n_c = X_class.shape[0]\n        S_B += n_c * (mean_class - mean_overall).reshape(n_features, 1) @ (mean_class - mean_overall).reshape(1, n_features)\n    S_W_inv = np.linalg.pinv(S_W)\n    A = S_W_inv @ S_B\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvectors = eigenvectors[:, sorted_indices[:n_components]]\n    for i in range(eigenvectors.shape[1]):\n        first_non_zero_idx = np.argmax(eigenvectors[:, i] != 0)\n        eigenvectors[:, i] *= -1 if eigenvectors[first_non_zero_idx, i] < 0 else 1\n    X_lda = X @ eigenvectors\n    X_lda_rounded = np.round(X_lda, decimals=4)\n    return X_lda_rounded.tolist()"}
{"task_id": 128, "completion_id": 5, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n    \n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n    \n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    classes = np.unique(y)\n    (m, d) = X.shape\n    n_classes = len(classes)\n    mean_overall = np.mean(X, axis=0)\n    S_W = np.zeros((d, d))\n    S_B = np.zeros((d, d))\n    for c in classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        S_W += (X_c - mean_c).T.dot(X_c - mean_c)\n        temp = (mean_c - mean_overall).reshape(d, 1)\n        S_B += X_c.shape[0] * temp.dot(temp.T)\n    A = np.linalg.pinv(S_W).dot(S_B)\n    (eigen_values, eigen_vectors) = np.linalg.eigh(A)\n    sorted_indices = np.argsort(eigen_values)[::-1]\n    sorted_eigen_vectors = eigen_vectors[:, sorted_indices]\n    W = sorted_eigen_vectors[:, :n_components]\n    for i in range(W.shape[1]):\n        if W[0, i] < 0:\n            W[:, i] *= -1\n    transformed = X.dot(W)\n    transformed = np.round(transformed, 4)\n    return transformed.tolist()"}
{"task_id": 128, "completion_id": 6, "solution": "import numpy as np\ndef compute_within_class_scatter_matrix(X: np.ndarray, y: np.ndarray) -> np.ndarray:\n    \"\"\"Compute the within-class scatter matrix for LDA.\"\"\"\n    class_labels = np.unique(y)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for c in class_labels:\n        X_c = X[y == c]\n        mu_c = np.mean(X_c, axis=0)\n        S_C = (X_c - mu_c).T.dot(X_c - mu_c)\n        S_W += S_C\n    return S_W\ndef compute_between_class_scatter_matrix(X: np.ndarray, y: np.ndarray) -> np.ndarray:\n    \"\"\"Compute the between-class scatter matrix for LDA.\"\"\"\n    overall_mean = np.mean(X, axis=0)\n    S_B = np.zeros_like(X.T.dot(X))\n    for c in set(y):\n        X_c = X[y == c]\n        mu_c = np.mean(X_c, axis=0)\n        n_c = X_c.shape[0]\n        S_B += n_c * (mu_c - overall_mean).reshape(-1, 1).dot((mu_c - overall_mean).reshape(1, -1))\n    return S_B\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    if n_components == 0:\n        return []\n    S_W = compute_within_class_scatter_matrix(X, y)\n    S_B = compute_between_class_scatter_matrix(X, y)\n    A = np.linalg.pinv(S_W).dot(S_B)\n    (eigen_values, eigen_vectors) = np.linalg.eigh(A)\n    idx = eigen_values.argsort()[::-1]\n    eigen_values = eigen_values[idx]\n    eigen_vectors = eigen_vectors[:, idx]\n    W = eigen_vectors[:, :n_components]\n    for col in range(W.shape[1]):\n        first_non_zero = np.argmax(W[:, col] != 0)\n        if W[first_non_zero, col] < 0:\n            W[:, col] *= -1\n    X_projected = X.dot(W)\n    return np.round(X_projected, 4).tolist()\nX = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\nn_components = 1"}
{"task_id": 128, "completion_id": 7, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    labels = np.unique(y)\n    n_classes = len(labels)\n    np_i = np.linalg.pinv\n    S_W = np.zeros((n_features, n_features))\n    for label in labels:\n        class_data = X[y == label]\n        class_scatter = np.zeros((n_features, n_features))\n        mu_c = np.mean(class_data, axis=0)\n        for x in class_data:\n            x_mu = x - mu_c\n            class_scatter += np.outer(x_mu, x_mu)\n        S_W += class_scatter\n    overall_mean = np.mean(X, axis=0)\n    S_B = np.zeros((n_features, n_features))\n    for label in labels:\n        class_data = X[y == label]\n        mu_c = np.mean(class_data, axis=0)\n        Nc = class_data.shape[0]\n        S_B += Nc * np.outer(mu_c - overall_mean, mu_c - overall_mean)\n    A = np_i(S_W) @ S_B\n    (eig_vals, eig_vecs) = np.linalg.eigh(A)\n    sorted_pairs = sorted(zip(eig_vals, eig_vecs.T), key=lambda x: x[0], reverse=True)\n    (sorted_eig_vals, sorted_eig_vecs) = zip(*sorted_pairs)\n    eigen_vector_subset = np.column_stack(sorted_eig_vecs[:n_components])\n    for i in range(n_components):\n        if eigen_vector_subset[0, i] < 0:\n            eigen_vector_subset[:, i] *= -1\n    X_lda = np.dot(X, eigen_vector_subset)\n    X_lda_rounded = np.round(X_lda, decimals=4).tolist()\n    return X_lda_rounded\nX = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\nn_components = 1"}
{"task_id": 128, "completion_id": 8, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    global_mean = np.mean(X, axis=0)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for cls in np.unique(y):\n        class_samples = X[y == cls]\n        class_mean = np.mean(class_samples, axis=0)\n        S_W += np.dot((class_samples - class_mean).T, class_samples - class_mean)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for cls in np.unique(y):\n        class_samples = X[y == cls]\n        class_mean = np.mean(class_samples, axis=0)\n        S_B += X[y == cls].shape[0] * np.dot((class_mean - global_mean).reshape(-1, 1), (class_mean - global_mean).reshape(1, -1))\n    A = np.dot(np.linalg.pinv(S_W), S_B)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    sorted_indices = eigenvalues.argsort()[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    W = sorted_eigenvectors[:, :n_components]\n    for column_idx in range(W.shape[1]):\n        sign = np.sign(W[0, column_idx])\n        if sign == 0.0:\n            sign = 1.0 if np.sign(W[1, column_idx]) == 0.0 else np.sign(W[1, column_idx])\n        W[:, column_idx] *= sign\n    X_proj = np.dot(X, W)\n    return np.round(X_proj, 4).tolist()\nX = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])"}
{"task_id": 128, "completion_id": 9, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    class_labels = np.unique(y)\n    for label in class_labels:\n        X_class = X[y == label]\n        S_W += (X_class.shape[0] - 1) * np.cov(X_class.T)\n    mu = np.mean(X, axis=0)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for label in class_labels:\n        X_class = X[y == label]\n        mu_class = np.mean(X_class, axis=0)\n        S_B += X_class.shape[0] * (mu_class - mu).reshape(-1, 1).dot((mu_class - mu).reshape(1, -1))\n    A = np.linalg.pinv(S_W).dot(S_B)\n    (eig_vals, eig_vecs) = np.linalg.eigh(A)\n    sorted_indices = np.argsort(eig_vals)[::-1]\n    eig_vals_sorted = eig_vals[sorted_indices]\n    eig_vecs_sorted = eig_vecs[:, sorted_indices]\n    for i in range(eig_vecs_sorted.shape[1]):\n        first_nonzero_idx = np.argmax(eig_vecs_sorted[:, i] != 0)\n        if eig_vecs_sorted[first_nonzero_idx, i] < 0:\n            eig_vecs_sorted[:, i] *= -1\n    W = eig_vecs_sorted[:, :n_components]\n    X_transformed = X.dot(W).round(4)\n    return X_transformed.tolist()\nX = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\nn_components = 1"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    fire_queue = deque()\n    agent_queue = deque([(0, 0, 0)])\n    for row in range(n):\n        for col in range(n):\n            if grid[row][col] == 'F':\n                fire_queue.append((row, col, 0))\n    fire_time = [[math.inf] * n for _ in range(n)]\n    while fire_queue:\n        (r, c, t) = fire_queue.popleft()\n        if grid[r][c] == '#':\n            continue\n        fire_time[r][c] = t\n        for (dr, dc) in directions:\n            (next_r, next_c) = (r + dr, c + dc)\n            if 0 <= next_r < n and 0 <= next_c < n and (fire_time[next_r][next_c] > t + 1):\n                fire_time[next_r][next_c] = t + 1\n                fire_queue.append((next_r, next_c, t + 1))\n    agent_visited = [[False] * n for _ in range(n)]\n    agent_visited[0][0] = True\n    while agent_queue:\n        (r, c, t) = agent_queue.popleft()\n        if r == n - 1 and c == n - 1:\n            return t\n        for (dr, dc) in directions:\n            (next_r, next_c) = (r + dr, c + dc)\n            if 0 <= next_r < n and 0 <= next_c < n and (not agent_visited[next_r][next_c]) and (grid[next_r][next_c] != '#') and (fire_time[next_r][next_c] > t + 1):\n                agent_queue.append((next_r, next_c, t + 1))\n                agent_visited[next_r][next_c] = True\n    return -1"}
{"task_id": 140, "completion_id": 1, "solution": "from typing import List, Tuple\nfrom collections import deque\ndef escape_fire_maze(grid: List[str]) -> int:\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    fire_queue = deque()\n    agent_queue = deque([(0, 0, 0)])\n    visited = set()\n    for (i, row) in enumerate(grid):\n        for (j, cell) in enumerate(row):\n            if cell == 'F':\n                fire_queue.append((i, j, 0))\n    while agent_queue:\n        for _ in range(len(fire_queue)):\n            (x, y, time) = fire_queue.popleft()\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.'):\n                    grid[nx][ny] = 'F'\n                    fire_queue.append((nx, ny, time + 1))\n        for _ in range(len(agent_queue)):\n            (x, y, time) = agent_queue.popleft()\n            if (x, y) == (n - 1, n - 1):\n                return time\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.') and ((nx, ny) not in visited):\n                    visited.add((nx, ny))\n                    agent_queue.append((nx, ny, time + 1))\n    return -1"}
{"task_id": 140, "completion_id": 2, "solution": "from collections import deque\nimport math\nfrom collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n\n    def bfs(starts, is_agent=False):\n        q = deque([(start, 0) for start in starts])\n        distances = {start: 0 for start in starts}\n        while q:\n            ((x, y), time) = q.popleft()\n            if is_agent:\n                distances[x, y] = min(distances.get((x, y), math.inf), time)\n            for (nx, ny) in ((x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)):\n                if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.') and (not is_agent or time + 1 < distances.get((nx, ny), math.inf)):\n                    q.append(((nx, ny), time + 1))\n                    distances[nx, ny] = time + 1\n        return distances\n    n = len(grid)\n    if grid[0][0] == '#' or grid[-1][-1] == '#' or grid[0][0] == 'F' or (grid[-1][-1] == 'F'):\n        return -1\n    fires = [(r, c) for r in range(n) for c in range(n) if grid[r][c] == 'F']\n    fire_spread = bfs(fires)\n    agent_path = bfs([(0, 0)], is_agent=True)\n    goal = (n - 1, n - 1)\n    if goal in agent_path and goal in fire_spread and (agent_path[goal] < fire_spread[goal]):\n        return agent_path[goal]\n    return -1"}
{"task_id": 140, "completion_id": 3, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    fire_times = [[math.inf for _ in range(n)] for _ in range(n)]\n    queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_times[i][j] = 0\n                queue.append((i, j, 0))\n    while queue:\n        (x, y, t) = queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (fire_times[nx][ny] == math.inf):\n                fire_times[nx][ny] = t + 1\n                queue.append((nx, ny, t + 1))\n    agent_queue = deque([(0, 0, 0)])\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    visited[0][0] = True\n    while agent_queue:\n        (x, y, agent_time) = agent_queue.popleft()\n        if (x, y) == (n - 1, n - 1):\n            return agent_time\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (not visited[nx][ny]) and (fire_times[nx][ny] > agent_time + 1) and (grid[nx][ny] != '#'):\n                visited[nx][ny] = True\n                agent_queue.append((nx, ny, agent_time + 1))\n    return -1"}
{"task_id": 140, "completion_id": 4, "solution": "from collections import deque\nimport math\nfrom collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    if grid[0][0] == 'F' or grid[-1][-1] == 'F':\n        return -1\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j, 0))\n    fire_spread = [[math.inf] * n for _ in range(n)]\n    while fire_queue:\n        (x, y, t) = fire_queue.popleft()\n        if t < fire_spread[x][y]:\n            fire_spread[x][y] = t\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (fire_spread[nx][ny] > t + 1):\n                    fire_queue.append((nx, ny, t + 1))\n    agent_queue = deque()\n    agent_queue.append((0, 0, 0))\n    visited = set()\n    visited.add((0, 0))\n    while agent_queue:\n        (x, y, t) = agent_queue.popleft()\n        if x == n - 1 and y == n - 1:\n            return t\n        if t + 1 >= fire_spread[x][y]:\n            continue\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.') and ((nx, ny) not in visited) and (t + 1 < fire_spread[nx][ny]):\n                visited.add((nx, ny))\n                agent_queue.append((nx, ny, t + 1))\n    return -1"}
{"task_id": 140, "completion_id": 5, "solution": "from collections import deque\ndef escape_fire_maze(grid: list[str]) -> int:\n    n = len(grid)\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    if n == 1 and grid[0] == '.':\n        return 0\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    start = {(0, 0)}\n    queue = deque([(0, {0, 0})])\n    fire_times = {}\n    fire_queue = deque()\n    for r in range(n):\n        for c in range(n):\n            if grid[r][c] == 'F':\n                fire_queue.append((0, r, c))\n    while fire_queue:\n        (time, r, c) = fire_queue.popleft()\n        fire_times[r, c] = time\n        for (dr, dc) in directions:\n            (nr, nc) = (r + dr, c + dc)\n            if 0 <= nr < n and 0 <= nc < n and (grid[nr][nc] == '.') and ((nr, nc) not in fire_times):\n                fire_times[nr, nc] = time + 1\n                fire_queue.append((time + 1, nr, nc))\n    visited = {start}\n    while queue:\n        (time, positions) = queue.popleft()\n        next_positions = set()\n        for pos in positions:\n            (r, c) = pos\n            if (r, c) == (n - 1, n - 1):\n                return time\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if 0 <= nr < n and 0 <= nc < n and (grid[nr][nc] == '.') and ((nr, nc, time + 1) not in visited):\n                    if (nr, nc) not in fire_times or fire_times[nr, nc] > time + 1:\n                        next_positions.add((nr, nc))\n                        visited.add((nr, nc, time + 1))\n        if next_positions:\n            queue.append((time + 1, next_positions))\n    return -1"}
{"task_id": 140, "completion_id": 6, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    (rows, cols) = (len(grid), len(grid[0]))\n    agent_queue = deque([(0, 0, 0)])\n    fire_queue = deque()\n    visited = [[[False for _ in range(2)] for _ in range(cols)] for _ in range(rows)]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == 'F':\n                fire_queue.append((r, c, 0))\n                visited[r][c][1] = True\n            elif grid[r][c] == '#' or (r == rows - 1 and c == cols - 1):\n                visited[r][c][0] = True\n    if visited[0][0][1] or visited[rows - 1][cols - 1][1]:\n        return -1\n    while agent_queue and fire_queue:\n        for _ in range(len(fire_queue)):\n            (fr, fc, ft) = fire_queue.popleft()\n            for (dr, dc) in directions:\n                (nr, nc) = (fr + dr, fc + dc)\n                if 0 <= nr < rows and 0 <= nc < cols and (not visited[nr][nc][1]):\n                    if grid[nr][nc] != '#':\n                        visited[nr][nc][1] = True\n                        fire_queue.append((nr, nc, ft + 1))\n        for _ in range(len(agent_queue)):\n            (ar, ac, at) = agent_queue.popleft()\n            if (ar, ac) == (rows - 1, cols - 1):\n                return at\n            if visited[ar][ac][1]:\n                continue\n            for (dr, dc) in directions:\n                (nr, nc) = (ar + dr, ac + dc)\n                if 0 <= nr < rows and 0 <= nc < cols and (not visited[nr][nc][0]) and (not visited[nr][nc][1]):\n                    if grid[nr][nc] != '#':\n                        visited[nr][nc][0] = True\n                        agent_queue.append((nr, nc, at + 1))\n    return -1"}
{"task_id": 140, "completion_id": 7, "solution": "from collections import deque\nimport math\nfrom collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    fire_map = {}\n    for r in range(n):\n        for c in range(n):\n            if grid[r][c] == 'F':\n                fire_map[r, c] = 0\n\n    def spread_fire():\n        to_process = deque(fire_map.items())\n        while to_process:\n            ((r, c), time) = to_process.popleft()\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if 0 <= nr < n and 0 <= nc < n:\n                    if grid[nr][nc] != '#' and (nr, nc) not in fire_map:\n                        fire_map[nr, nc] = time + 1\n                        to_process.append(((nr, nc), time + 1))\n    spread_fire()\n    queue = deque([(0, 0, 0)])\n    visited = set()\n    visited.add((0, 0))\n    while queue:\n        (r, c, t) = queue.popleft()\n        if (r, c) == (n - 1, n - 1):\n            return t\n        for (dr, dc) in directions:\n            (nr, nc) = (r + dr, c + dc)\n            if 0 <= nr < n and 0 <= nc < n:\n                if grid[nr][nc] != '#' and ((nr, nc) not in fire_map or fire_map[nr, nc] > t + 1) and ((nr, nc) not in visited):\n                    queue.append((nr, nc, t + 1))\n                    visited.add((nr, nc))\n    return -1"}
{"task_id": 140, "completion_id": 8, "solution": "from collections import deque\ndef escape_fire_maze(grid: list[str]) -> int:\n    directions = ((0, 1), (1, 0), (-1, 0), (0, -1))\n    n = len(grid)\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    person_queue = deque([(0, 0, 0)])\n    fire_queue = deque()\n    visited = [[False] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            cell = grid[i][j]\n            if cell == 'F':\n                fire_queue.append((i, j, 0))\n            elif cell == '#':\n                visited[i][j] = True\n\n    def propagate_fire(queue):\n        new_fire_queue = deque()\n        while queue:\n            (x, y, time) = queue.popleft()\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if 0 <= nx < n and 0 <= ny < n and (not visited[nx][ny]):\n                    visited[nx][ny] = True\n                    new_fire_queue.append((nx, ny, time + 1))\n        return new_fire_queue\n    while person_queue:\n        (px, py, time) = person_queue.popleft()\n        if (px, py) == (n - 1, n - 1):\n            return time\n        fire_queue = propagate_fire(fire_queue)\n        for (dx, dy) in directions:\n            (nx, ny) = (px + dx, py + dy)\n            if 0 <= nx < n and 0 <= ny < n and (not visited[nx][ny]):\n                visited[nx][ny] = True\n                person_queue.append((nx, ny, time + 1))\n    return -1"}
{"task_id": 140, "completion_id": 9, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    fire_time_grid = [[math.inf] * n for _ in range(n)]\n    (fire_queue, player_queue) = (deque(), deque([(0, 0, 0)]))\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '#':\n                fire_time_grid[i][j] = -1\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j, 0))\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    while fire_queue:\n        (x, y, time) = fire_queue.popleft()\n        if fire_time_grid[x][y] == math.inf:\n            fire_time_grid[x][y] = time\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if 0 <= nx < n and 0 <= ny < n and (fire_time_grid[nx][ny] == math.inf):\n                    fire_queue.append((nx, ny, time + 1))\n    visited = [[False] * n for _ in range(n)]\n    visited[0][0] = True\n    while player_queue:\n        (x, y, time) = player_queue.popleft()\n        if (x, y) == (n - 1, n - 1):\n            return time\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (not visited[nx][ny]) and (fire_time_grid[nx][ny] > time + 1):\n                player_queue.append((nx, ny, time + 1))\n                visited[nx][ny] = True\n    return -1"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement k-NN classifier based on the given metric.\"\"\"\n\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2, axis=1))\n\n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2), axis=1)\n\n    def cosine_distance(x1, x2):\n        dot_product = np.sum(x1 * x2, axis=1)\n        norm_product = np.linalg.norm(x1, axis=1) * np.linalg.norm(x2, axis=1)\n        return 1 - dot_product / norm_product\n    if metric == 'manhattan':\n        dist_func = manhattan_distance\n    elif metric == 'cosine':\n        dist_func = cosine_distance\n    else:\n        dist_func = euclidean_distance\n    y_pred = np.zeros(X_test.shape[0])\n    for (i, x) in enumerate(X_test):\n        distances = dist_func(X_train, np.tile(x, (X_train.shape[0], 1)))\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = y_train[nearest_indices]\n        (unique_labels, label_counts) = np.unique(nearest_labels, return_counts=True)\n        max_count = max(label_counts)\n        candidates = unique_labels[label_counts == max_count]\n        y_pred[i] = min(candidates)\n    return y_pred"}
{"task_id": 141, "completion_id": 1, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum(np.square(x1 - x2)))\n\n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2))\n\n    def cosine_distance(x1, x2):\n        return 1 - np.dot(x1, x2) / (np.sqrt(np.dot(x1, x1)) * np.sqrt(np.dot(x2, x2)))\n    if metric == 'euclidean':\n        dist_func = euclidean_distance\n    elif metric == 'manhattan':\n        dist_func = manhattan_distance\n    elif metric == 'cosine':\n        dist_func = cosine_distance\n    else:\n        dist_func = euclidean_distance\n    predictions = np.zeros(X_test.shape[0])\n    for (i, test_sample) in enumerate(X_test):\n        distances = np.array([dist_func(test_sample, train_sample) for train_sample in X_train])\n        k_nearest_indices = np.argsort(distances)[:k]\n        k_nearest_labels = y_train[k_nearest_indices]\n        (labels, counts) = np.unique(k_nearest_labels, return_counts=True)\n        majority_label = labels[np.argmax(counts)]\n        predictions[i] = majority_label\n    return predictions"}
{"task_id": 141, "completion_id": 2, "solution": "import numpy as np\nfrom scipy.spatial.distance import pdist, cdist, cosine\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    if metric.lower() not in ['euclidean', 'manhattan', 'cosine']:\n        metric = 'euclidean'\n    if metric == 'euclidean':\n        distance_matrix = cdist(X_test, X_train, metric='euclidean')\n    elif metric == 'manhattan':\n        distance_matrix = cdist(X_test, X_train, metric='cityblock')\n    elif metric == 'cosine':\n        distance_matrix = cdist(X_test, X_train, metric=lambda u, v: 1 - cosine(u, v))\n    k_nearest_indices = np.argsort(distance_matrix, axis=1)[:, :k]\n    y_pred = []\n    for indices in k_nearest_indices:\n        k_labels = y_train[indices]\n        (values, counts) = np.unique(k_labels, return_counts=True)\n        max_count_indices = np.where(counts == np.max(counts))[0]\n        y_pred.append(min(values[max_count_indices]))\n    return np.array(y_pred)"}
{"task_id": 141, "completion_id": 3, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n\n    def euclidean_distance(X_train, X_test_sample):\n        return np.sqrt(np.sum((X_train - X_test_sample) ** 2, axis=1))\n\n    def manhattan_distance(X_train, X_test_sample):\n        return np.sum(np.abs(X_train - X_test_sample), axis=1)\n\n    def cosine_distance(X_train, X_test_sample):\n        cos_sim = np.dot(X_train, X_test_sample) / (np.linalg.norm(X_train, axis=1) * np.linalg.norm(X_test_sample))\n        return 1 - cos_sim\n    if metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        distance_func = euclidean_distance\n    predictions = []\n    for test_sample in X_test:\n        distances = distance_func(X_train, test_sample)\n        k_nearest_indices = np.argsort(distances)[:k]\n        k_nearest_labels = y_train[k_nearest_indices]\n        (values, counts) = np.unique(k_nearest_labels, return_counts=True)\n        index = np.argmax(counts)\n        tied_indices = np.where(counts == counts[index])[0]\n        if len(tied_indices) > 1:\n            prediction = np.min(values[tied_indices])\n        else:\n            prediction = values[index]\n        predictions.append(prediction)\n    return np.array(predictions)\nX_train = np.array([[2, 3], [6, 7], [3, 4]])\ny_train = np.array([1, 2, 2])\nX_test = np.array([[3, 4], [5, 6]])\nk = 2"}
{"task_id": 141, "completion_id": 4, "solution": "import numpy as np\ndef compute_distance(x, y, metric='euclidean'):\n    \"\"\"Compute the distance between two data points based on the specified metric.\"\"\"\n    if metric == 'euclidean':\n        return np.linalg.norm(x - y)\n    elif metric == 'manhattan':\n        return np.sum(np.abs(x - y))\n    elif metric == 'cosine':\n        return 1 - x @ y / (np.linalg.norm(x) * np.linalg.norm(y))\n    else:\n        return np.linalg.norm(x - y)\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Predict the labels for a set of test samples based on the given training samples and k-NN logic.\"\"\"\n    num_test_samples = X_test.shape[0]\n    predictions = np.zeros(num_test_samples, dtype=int)\n    for i in range(num_test_samples):\n        distances = np.array([compute_distance(X_test[i], x_t, metric) for x_t in X_train])\n        k_indices = np.argsort(distances)[:k]\n        k_nearest_labels = y_train[k_indices]\n        (unique_labels, label_counts) = np.unique(k_nearest_labels, return_counts=True)\n        predictions[i] = unique_labels[np.argmax(label_counts)]\n    return predictions"}
{"task_id": 141, "completion_id": 5, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Predict the class label for samples in `X_test`, given a training set `X_train` and labels `y_train`, using the k-Nearest Neighbors algorithm.\"\"\"\n\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2))\n\n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2))\n\n    def cosine_distance(x1, x2):\n        return 1 - np.dot(x1, x2) / (np.sqrt(np.dot(x1, x1)) * np.sqrt(np.dot(x2, x2)))\n    predictions = []\n    if metric == 'manhattan':\n        dist_func = manhattan_distance\n    elif metric == 'cosine':\n        dist_func = cosine_distance\n    else:\n        dist_func = euclidean_distance\n    for test_sample in X_test:\n        distances = [dist_func(test_sample, x) for x in X_train]\n        k_indices = np.argsort(distances)[:k]\n        k_nearest_labels = y_train[k_indices]\n        mode_label = np.bincount(k_nearest_labels).argmax()\n        predictions.append(mode_label)\n    return np.array(predictions)"}
{"task_id": 141, "completion_id": 6, "solution": "import numpy as np\ndef distance(x1, x2, metric='euclidean'):\n    \"\"\"Calculate the distance between two vectors based on the given metric.\"\"\"\n    if metric == 'euclidean':\n        return np.sqrt(np.sum((x1 - x2) ** 2))\n    elif metric == 'manhattan':\n        return np.sum(np.abs(x1 - x2))\n    elif metric == 'cosine':\n        cos_sim = np.dot(x1, x2) / (np.linalg.norm(x1) * np.linalg.norm(x2))\n        return 1 - np.clip(cos_sim, -1, 1)\n    else:\n        return np.sqrt(np.sum((x1 - x2) ** 2))\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    predictions = []\n    for x_test in X_test:\n        distances = []\n        for (i, x_train) in enumerate(X_train):\n            distances.append((distance(x_test, x_train, metric), y_train[i]))\n        distances.sort(key=lambda x: x[0])\n        k_nearest = distances[:k]\n        labels = [label for (_, label) in k_nearest]\n        most_common = max(set(labels), key=labels.count)\n        prediction = min([label for label in set(labels) if labels.count(label) == labels.count(most_common)])\n        predictions.append(prediction)\n    return np.array(predictions)"}
{"task_id": 141, "completion_id": 7, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement k-Nearest Neighbors classifier as a single function.\"\"\"\n    if metric not in ['euclidean', 'manhattan', 'cosine']:\n        metric = 'euclidean'\n\n    def compute_distance(a, b, metric):\n        if metric == 'euclidean':\n            return np.sqrt(((a - b) ** 2).sum(axis=-1))\n        elif metric == 'manhattan':\n            return np.abs(a - b).sum(axis=-1)\n        elif metric == 'cosine':\n            dot_product = (a * b).sum(axis=-1)\n            a_norm = np.sqrt((a ** 2).sum(axis=-1))\n            b_norm = np.sqrt((b ** 2).sum(axis=-1))\n            cosine_similarity = dot_product / (a_norm * b_norm)\n            return 1 - cosine_similarity\n    distances = np.array([compute_distance(x_test, X_train, metric) for x_test in X_test])\n    nearest_neighbors_indices = distances.argsort(axis=1)[:, :k]\n    y_pred = []\n    for indices in nearest_neighbors_indices:\n        knn_labels = y_train[indices]\n        label_counts = np.bincount(knn_labels)\n        majority_label = np.argwhere(label_counts == np.max(label_counts)).flatten()\n        y_pred.append(min(majority_label))\n    return np.array(y_pred)"}
{"task_id": 141, "completion_id": 8, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    Implements the k-Nearest Neighbors classifier.\n    \n    Parameters:\n    X_train (np.ndarray): The training dataset.\n    y_train (np.ndarray): The labels corresponding to the training samples.\n    X_test (np.ndarray): The test samples for which predictions are to be made.\n    k (int): The number of nearest neighbors to consider.\n    metric (str): The distance metric to use, can be 'euclidean', 'manhattan', or 'cosine'.\n    \n    Returns:\n    np.ndarray: A 1-D array of predicted labels for the test samples.\n    \"\"\"\n    if metric not in {'euclidean', 'manhattan', 'cosine'}:\n        metric = 'euclidean'\n\n    def compute_distances(X_test_row):\n        if metric == 'euclidean':\n            return np.sqrt(((X_train - X_test_row) ** 2).sum(axis=1))\n        elif metric == 'manhattan':\n            return np.abs(X_train - X_test_row).sum(axis=1)\n        elif metric == 'cosine':\n\n            def cosine_similarity(a, b):\n                return np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b))\n            return 1 - np.apply_along_axis(lambda x: cosine_similarity(x, X_test_row), 1, X_train)\n    distances = np.apply_along_axis(compute_distances, 1, X_test)\n    sorted_indices = np.argsort(distances, axis=1)\n    y_pred = []\n    for i in range(X_test.shape[0]):\n        nearest_labels = y_train[sorted_indices[i, :k]]\n        (unique_labels, counts) = np.unique(nearest_labels, return_counts=True)\n        prediction = unique_labels[np.argmax(counts)]\n        if np.count_nonzero(counts == counts.max()) > 1:\n            prediction = unique_labels[np.where(counts == counts.max())[0][0]]\n        y_pred.append(prediction)\n    return np.array(y_pred)"}
{"task_id": 141, "completion_id": 9, "solution": "import numpy as np\ndef euclidean_distance(x1, x2):\n    return np.sqrt(np.sum((x1 - x2) ** 2, axis=1))\ndef manhattan_distance(x1, x2):\n    return np.sum(np.abs(x1 - x2), axis=1)\ndef cosine_distance(x1, x2):\n    dot_product = np.sum(x1 * x2, axis=1)\n    norm_x1 = np.sqrt(np.sum(x1 ** 2, axis=1))\n    norm_x2 = np.sqrt(np.sum(x2 ** 2, axis=1))\n    cosine_similarity = dot_product / (norm_x1 * norm_x2)\n    return 1 - cosine_similarity\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    if metric == 'manhattan':\n        dist_func = manhattan_distance\n    elif metric == 'cosine':\n        dist_func = cosine_distance\n    else:\n        dist_func = euclidean_distance\n    predictions = np.zeros((X_test.shape[0],), dtype=y_train.dtype)\n    for (i, test_sample) in enumerate(X_test):\n        dists = dist_func(X_train, np.array([test_sample] * X_train.shape[0]))\n        closest_k = np.argsort(dists)[:k]\n        closest_k_labels = y_train[closest_k]\n        (values, counts) = np.unique(closest_k_labels, return_counts=True)\n        ind = np.argmax(counts)\n        if np.sum(counts == counts[ind]) > 1:\n            predictions[i] = values[np.argmin(values[counts == counts[ind]])]\n        else:\n            predictions[i] = values[ind]\n    return predictions"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    predictions = []\n\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2, axis=1))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b), axis=1)\n\n    def cosine_distance(a, b):\n        dot_product = np.sum(a * b, axis=1)\n        magnitude = np.linalg.norm(a, axis=1) * np.linalg.norm(b, axis=1) + 1e-12\n        return 1 - dot_product / magnitude\n    for x in X_test:\n        distances = None\n        if metric == 'euclidean':\n            distances = euclidean_distance(X, x)\n        elif metric == 'manhattan':\n            distances = manhattan_distance(X, x)\n        elif metric == 'cosine':\n            distances = cosine_distance(X, x)\n        if k > X.shape[0]:\n            k = X.shape[0]\n        nearest_indices = distances.argsort()[:k]\n        nearest_labels = y[nearest_indices]\n        (values, counts) = np.unique(nearest_labels, return_counts=True)\n        index = np.argmax(counts)\n        arg_max_counts = np.argsort(-counts)\n        min_label_tie = np.min(values[arg_max_counts[counts[arg_max_counts] == counts[arg_max_counts][0]]])\n        predictions.append(min_label_tie)\n    return predictions"}
{"task_id": 146, "completion_id": 1, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b))\n\n    def cosine_distance(a, b):\n        dot_product = np.dot(a, b)\n        norm_a = np.linalg.norm(a)\n        norm_b = np.linalg.norm(b)\n        cos_sim = dot_product / ((norm_a + 1e-12) * (norm_b + 1e-12))\n        return 1 - cos_sim\n    distance_funcs = {'euclidean': euclidean_distance, 'manhattan': manhattan_distance, 'cosine': cosine_distance}\n    if metric not in distance_funcs:\n        raise ValueError('Invalid distance metric')\n    y_pred = []\n    for test_instance in X_test:\n        distances = [distance_funcs[metric](x_train, test_instance) for x_train in X]\n        nearest_indices = np.argsort(distances)\n        nearest_labels = y[nearest_indices][:min(k, len(y))]\n        (unique_labels, label_counts) = np.unique(nearest_labels, return_counts=True)\n        predicted_label = unique_labels[np.argwhere(label_counts == np.max(label_counts)).flatten()[0]]\n        y_pred.append(predicted_label)\n    return y_pred\nX_test = np.array([[3, 5], [7, 6], [5, 7]])"}
{"task_id": 146, "completion_id": 2, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def euclidean_dist(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2))\n\n    def manhattan_dist(x1, x2):\n        return np.sum(np.abs(x1 - x2))\n\n    def cosine_dist(x1, x2, eps=1e-12):\n        numerator = np.dot(x1, x2)\n        denominator = np.linalg.norm(x1) * np.linalg.norm(x2) + eps\n        return 1 - numerator / denominator\n\n    def get_neighbours_indices(distances):\n        return np.argsort(distances)[:k]\n\n    def majority_vote(labels):\n        (unique_labels, counts) = np.unique(labels, return_counts=True)\n        if len(counts) > 1 and np.max(counts) == np.min(counts):\n            return int(np.min(unique_labels))\n        else:\n            majority_label = unique_labels[np.argmax(counts)]\n            return int(majority_label)\n    if metric == 'euclidean':\n        dist = euclidean_dist\n    elif metric == 'manhattan':\n        dist = manhattan_dist\n    elif metric == 'cosine':\n        dist = cosine_dist\n    else:\n        raise ValueError('Invalid metric specified.')\n    predictions = []\n    for test_sample in X_test:\n        distances = np.array([dist(test_sample, train_sample) for train_sample in X])\n        nn_indices = get_neighbours_indices(distances)\n        nn_labels = y[nn_indices]\n        prediction = majority_vote(nn_labels)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 146, "completion_id": 3, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2))\n\n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2))\n\n    def cosine_distance(x1, x2, epsilon=1e-12):\n        numerator = np.dot(x1, x2)\n        denominator = np.linalg.norm(x1) * np.linalg.norm(x2) + epsilon\n        return 1 - numerator / denominator\n    distances = []\n    if k > X.shape[0]:\n        k = X.shape[0]\n    distances_func = {'euclidean': euclidean_distance, 'manhattan': manhattan_distance, 'cosine': cosine_distance}\n    distance_func = distances_func[metric]\n    for sample in X_test:\n        dist = np.array([distance_func(sample, x) for x in X])\n        distances.append(dist)\n    distances = np.array(distances)\n    y_pred = []\n    for sample in distances:\n        neighbors = np.argsort(sample)[:k]\n        target = y[neighbors]\n        (unique, counts) = np.unique(target, return_counts=True)\n        majority = unique[np.argmax(counts)]\n        if len(counts) > 1 and counts[0] == counts[1]:\n            majority = unique.min()\n        y_pred.append(majority)\n    return y_pred"}
{"task_id": 146, "completion_id": 4, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    k = min(k, n_samples)\n    distances = np.zeros((X_test.shape[0], n_samples))\n    if metric == 'euclidean':\n        for i in range(X_test.shape[0]):\n            distances[i] = np.sqrt(np.sum((X_test[i] - X) ** 2, axis=1))\n    elif metric == 'manhattan':\n        for i in range(X_test.shape[0]):\n            distances[i] = np.sum(np.abs(X_test[i] - X), axis=1)\n    elif metric == 'cosine':\n        epsilon = 1e-12\n        for i in range(X_test.shape[0]):\n            dot_product = X_test[i].dot(X.T)\n            norm_X_test = np.linalg.norm(X_test[i])\n            norm_X = np.linalg.norm(X, axis=1)\n            norm_product = norm_X_test * norm_X\n            cosine_distances = 1 - dot_product / (norm_product + epsilon)\n            distances[i] = cosine_distances\n    else:\n        raise ValueError('Invalid distance metric')\n    predictions = []\n    for i in range(X_test.shape[0]):\n        idx = np.argsort(distances[i])[:k]\n        labels = y[idx]\n        (values, counts) = np.unique(labels, return_counts=True)\n        index = np.argmax(counts)\n        predictions.append(values[index])\n    return predictions"}
{"task_id": 146, "completion_id": 5, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    n_train = X.shape[0]\n    n_test = X_test.shape[0]\n    y_pred = []\n    for i in range(n_test):\n        if metric == 'euclidean':\n            distances = np.sqrt(((X - X_test[i]) ** 2).sum(axis=1))\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X - X_test[i]), axis=1)\n        elif metric == 'cosine':\n            similarities = (X.dot(X_test[i]) + 1e-12) / (np.sqrt((X ** 2).sum(axis=1)) * np.sqrt((X_test[i] ** 2).sum()) + 1e-12)\n            distances = 1 - similarities\n        k_indices = np.argsort(distances)[:k]\n        k_nearest_labels = y[k_indices]\n        unique_labels = np.unique(k_nearest_labels)\n        prediction = unique_labels[0]\n        max_count = 0\n        for label in unique_labels:\n            count = np.sum(k_nearest_labels == label)\n            if count > max_count or (count == max_count and label < prediction):\n                prediction = label\n                max_count = count\n        y_pred.append(prediction)\n    return y_pred"}
{"task_id": 146, "completion_id": 6, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    num_samples = X_test.shape[0]\n    predictions = []\n    for i in range(num_samples):\n        if metric == 'euclidean':\n            distances = np.sqrt(np.sum((X - X_test[i]) ** 2, axis=1))\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X - X_test[i]), axis=1)\n        elif metric == 'cosine':\n            numerator = np.dot(X, X_test[i])\n            denominator = np.linalg.norm(X, axis=1) * np.linalg.norm(X_test[i]) + 1e-12\n            distances = 1 - numerator / denominator\n        else:\n            raise ValueError(\"Invalid metric specified. Please choose 'euclidean', 'manhattan', or 'cosine'.\")\n        sorted_indices = np.argsort(distances)\n        k_indices = y[sorted_indices[:min(k, len(y))]]\n        (unique_labels, counts) = np.unique(k_indices, return_counts=True)\n        max_count = np.max(counts)\n        possible_labels = unique_labels[counts == max_count]\n        prediction = min(possible_labels)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 146, "completion_id": 7, "solution": "import numpy as np\ndef euclidean_distance(X1: np.ndarray, X2: np.ndarray) -> np.ndarray:\n    return np.sqrt(((X1 - X2) ** 2).sum(axis=1))\ndef manhattan_distance(X1: np.ndarray, X2: np.ndarray) -> np.ndarray:\n    return np.abs(X1 - X2).sum(axis=1)\ndef cosine_distance(X1: np.ndarray, X2: np.ndarray) -> np.ndarray:\n    eps = 1e-12\n    dot_product = np.dot(X1, X2.T)\n    norm_a = np.linalg.norm(X1, axis=1)[:, np.newaxis]\n    norm_b = np.linalg.norm(X2, axis=1)\n    return 1 - dot_product / (norm_a * norm_b + eps)\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    n_samples = len(X_test)\n    predictions = []\n    for i in range(n_samples):\n        if metric == 'euclidean':\n            distances = euclidean_distance(X, X_test[i])\n        elif metric == 'manhattan':\n            distances = manhattan_distance(X, X_test[i])\n        elif metric == 'cosine':\n            distances = cosine_distance(X, X_test[i].reshape(1, -1))\n        else:\n            raise ValueError(f\"Metric {metric} is not supported, please choose 'euclidean', 'manhattan', or 'cosine'.\")\n        k = min(k, len(X))\n        indices = distances.argsort()[:k]\n        labels = y[indices]\n        majority_label = np.bincount(labels).argmax()\n        predictions.append(majority_label)\n    return predictions"}
{"task_id": 146, "completion_id": 8, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    n_samples = X.shape[0]\n    m_samples = X_test.shape[0]\n    distances = np.empty((m_samples, n_samples))\n    for (i, x) in enumerate(X_test):\n        if metric == 'euclidean':\n            distances[i] = np.sqrt(((X - x) ** 2).sum(axis=1))\n        elif metric == 'manhattan':\n            distances[i] = np.abs(X - x).sum(axis=1)\n        elif metric == 'cosine':\n            numer = np.dot(X, x)\n            denom = np.linalg.norm(X, axis=1) * np.linalg.norm(x) + 1e-12\n            distances[i] = 1 - numer / denom\n    knn_indices = np.argsort(distances, axis=1)[:, :k]\n    y_pred = []\n    for indices in knn_indices:\n        knn_labels = y[indices]\n        (labels, counts) = np.unique(knn_labels, return_counts=True)\n        max_count_indexes = np.where(counts == max(counts))[0]\n        predicted_label = min(labels[max_count_indexes])\n        y_pred.append(predicted_label)\n    return y_pred"}
{"task_id": 146, "completion_id": 9, "solution": "import numpy as np\ndef compute_distance(X: np.ndarray, X_test: np.ndarray, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Compute the distance between each training sample and test sample.\"\"\"\n    if metric == 'euclidean':\n        return np.sqrt(((X[:, np.newaxis] - X_test) ** 2).sum(axis=2))\n    elif metric == 'manhattan':\n        return np.abs(X[:, np.newaxis] - X_test).sum(axis=2)\n    elif metric == 'cosine':\n        X_len = np.sqrt(np.sum(X ** 2, axis=1, keepdims=True))\n        X_test_len = np.sqrt(np.sum(X_test ** 2, axis=1, keepdims=True))\n        dot_products = np.dot(X, X_test.T)\n        cosine_similarities = dot_products / (X_len * X_test_len.T)\n        cosine_distances = 1 - cosine_similarities.clip(-1.0 + 10 ** (-12), 1.0)\n        return cosine_distances\n    else:\n        raise ValueError('Unsupported metric: {}'.format(metric))\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\"\"\"\n    distances = compute_distance(X, X_test, metric)\n    indices_of_nearest = np.argsort(distances, axis=0)\n    indices_of_nearest = indices_of_nearest[:k]\n    labels = []\n    for sample_indices in indices_of_nearest.T:\n        sample_labels = y[sample_indices]\n        (values, counts) = np.unique(sample_labels, return_counts=True)\n        max_count_index = np.argmax(counts)\n        labels.append(values[max_count_index] if np.all(counts[0] != counts) else np.min(values))\n    return labels\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([0, 0, 1, 1])\nX_test = np.array([[2.5, 3.5], [4.5, 5.5]])"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    z1 = state @ weights['W1'] + weights['b1']\n    a1 = np.maximum(z1, 0)\n    z2 = a1 @ weights['W2'] + weights['b2']\n    a2 = np.maximum(z2, 0)\n    z3 = a2 @ weights['W3'] + weights['b3']\n    action = np.tanh(z3)\n    return np.round(action, decimals=4).tolist()"}
{"task_id": 155, "completion_id": 1, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    z1 = np.dot(state, weights['W1']) + weights['b1']\n    a1 = np.maximum(z1, 0)\n    z2 = np.dot(a1, weights['W2']) + weights['b2']\n    a2 = np.maximum(z2, 0)\n    z3 = np.dot(a2, weights['W3']) + weights['b3']\n    action = np.tanh(z3)\n    return [round(component, 4) for component in action]"}
{"task_id": 155, "completion_id": 2, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    hidden1 = state.dot(weights['W1']) + weights['b1']\n    hidden1 = np.maximum(hidden1, 0)\n    hidden2 = hidden1.dot(weights['W2']) + weights['b2']\n    hidden2 = np.maximum(hidden2, 0)\n    action = hidden2.dot(weights['W3']) + weights['b3']\n    action = np.tanh(action)\n    return [float(round(x, 4)) for x in action]\nweights = {'W1': np.random.rand(4, 3), 'b1': np.random.rand(3), 'W2': np.random.rand(3, 2), 'b2': np.random.rand(2), 'W3': np.random.rand(2, 1), 'b3': np.random.rand(1)}\nstate = [0.1, 0.2, 0.3, 0.4]\naction = actor_forward(state, weights)"}
{"task_id": 155, "completion_id": 3, "solution": "import numpy as np\ndef relu(x):\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, x)\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state_np = np.array(state)\n    layer1_out = relu(np.dot(state_np, weights['W1']) + weights['b1'])\n    layer2_out = relu(np.dot(layer1_out, weights['W2']) + weights['b2'])\n    output = np.tanh(np.dot(layer2_out, weights['W3']) + weights['b3'])\n    return [round(x, 4) for x in output]\nstate = [1.0, 2.0, 3.0]\nweights = {'W1': np.array([[0.5, -0.2], [-0.3, 0.4], [0.1, 0.6]]), 'b1': np.array([0.1, -0.1]), 'W2': np.array([[0.4, -0.2], [-0.1, 0.3]]), 'b2': np.array([-0.1, 0.1]), 'W3': np.array([[0.2, 0.3], [-0.4, 0.4]]), 'b3': np.array([0.1, -0.1])}"}
{"task_id": 155, "completion_id": 4, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state).reshape((1, -1))\n    x = np.maximum(0, state @ weights['W1'] + weights['b1'])\n    x = np.maximum(0, x @ weights['W2'] + weights['b2'])\n    x = np.tanh(x @ weights['W3'] + weights['b3'])\n    return [round(attr, 4) for attr in x.flatten().tolist()]\nweights = {'W1': np.array([[0.5, 0.5], [-0.5, -0.5]]), 'b1': np.array([1.0, 1.0]), 'W2': np.array([[2.0], [2.0]]), 'b2': np.array([0.5]), 'W3': np.array([[1.0]]), 'b3': np.array([0.0])}\nstate = [1.0, 2.0]"}
{"task_id": 155, "completion_id": 5, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    hidden1 = np.maximum(0, np.dot(state, weights['W1']) + weights['b1'])\n    hidden2 = np.maximum(0, np.dot(hidden1, weights['W2']) + weights['b2'])\n    action = np.tanh(np.dot(hidden2, weights['W3']) + weights['b3'])\n    return list((round(x, 4) for x in action))\nstate_dim = 5\naction_dim = 2\nhidden1 = 10\nhidden2 = 5\nweights = {'W1': np.random.randn(state_dim, hidden1), 'b1': np.random.randn(hidden1), 'W2': np.random.randn(hidden1, hidden2), 'b2': np.random.randn(hidden2), 'W3': np.random.randn(hidden2, action_dim), 'b3': np.random.randn(action_dim)}\nstate = np.linspace(-1, 1, state_dim)"}
{"task_id": 155, "completion_id": 6, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    if isinstance(state, list):\n        state = np.array(state)\n    hidden1 = np.maximum(np.dot(state, weights['W1']) + weights['b1'], 0)\n    hidden2 = np.maximum(np.dot(hidden1, weights['W2']) + weights['b2'], 0)\n    action = np.tanh(np.dot(hidden2, weights['W3']) + weights['b3'])\n    action_list = np.round(action, 4).tolist()\n    return action_list\nstate_example = [1.0, 2.0, 3.0, 2.5]\nweights_example = {'W1': np.array([[1, 2], [3, 4], [5, 6], [7, 8]]), 'b1': np.array([0.1, 0.2]), 'W2': np.array([[1, 2], [3, 4]]), 'b2': np.array([0.3, 0.4]), 'W3': np.array([[1, 2]]), 'b3': np.array([0.5])}\naction = actor_forward(state_example, weights_example)"}
{"task_id": 155, "completion_id": 7, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    hidden1_pre = np.dot(state, weights['W1']) + weights['b1']\n    hidden1_post = np.maximum(0, hidden1_pre)\n    hidden2_pre = np.dot(hidden1_post, weights['W2']) + weights['b2']\n    hidden2_post = np.maximum(0, hidden2_pre)\n    output_pre = np.dot(hidden2_post, weights['W3']) + weights['b3']\n    output_post = np.tanh(output_pre)\n    action = np.round(output_post, decimals=4).tolist()\n    return action\nstate = np.random.rand(10)\nweights = {'W1': np.random.rand(10, 64), 'b1': np.random.rand(64), 'W2': np.random.rand(64, 32), 'b2': np.random.rand(32), 'W3': np.random.rand(32, 2), 'b3': np.random.rand(2)}\naction = actor_forward(state, weights)"}
{"task_id": 155, "completion_id": 8, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (np.ndarray | list[float]): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    layer1 = np.maximum(0, np.dot(state, weights['W1']) + weights['b1'])\n    layer2 = np.maximum(0, np.dot(layer1, weights['W2']) + weights['b2'])\n    action = np.tanh(np.dot(layer2, weights['W3']) + weights['b3'])\n    action_rounded = [round(x, 4) for x in action.tolist()]\n    return action_rounded"}
{"task_id": 155, "completion_id": 9, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n    \n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n    \n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n    \n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    z1 = state @ weights['W1'] + weights['b1']\n    a1 = np.maximum(z1, 0)\n    z2 = a1 @ weights['W2'] + weights['b2']\n    a2 = np.maximum(z2, 0)\n    z3 = a2 @ weights['W3'] + weights['b3']\n    a3 = np.tanh(z3)\n    action = [round(x, 4) for x in a3]\n    return action\nweights = {'W1': np.array([[1.0, 2.0], [3.0, 4.0]]), 'b1': np.array([1.0, 1.0]), 'W2': np.array([[1.0, 2.0], [3.0, 4.0]]), 'b2': np.array([1.0, 1.0]), 'W3': np.array([[1.0], [1.0]]), 'b3': np.array([1.0])}\nstate = [1.0, 2.0]\naction = actor_forward(state, weights)"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n        weights = np.zeros(n + 1)\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n        weights = np.zeros(n + 1)\n    for _ in range(max_iters):\n        if fit_intercept:\n            weights[0] = np.mean(y - X[:, 1:].dot(weights[1:]))\n        for j in range(1, len(weights)):\n            old_wj = weights[j].copy()\n            weights[j] = 0\n            r_j = y - X.dot(weights)\n            rho_j = X[:, j].dot(r_j)\n            weights[j] = soft_threshold(rho_j, lambda_param * m) / np.sum(X[:, j] ** 2)\n    bias = weights[0]\n    weights_list = weights[1:].tolist()\n    return ([round(w, 4) for w in weights_list], round(bias, 4))\ndef soft_threshold(a: float, tau: float) -> float:\n    \"\"\"Implementation of the soft-thresholding operator.\"\"\"\n    return np.sign(a) * max(abs(a) - tau, 0)"}
{"task_id": 160, "completion_id": 1, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u00b7L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n        n += 1\n    w = np.zeros(n)\n    for _ in range(max_iters):\n        if fit_intercept:\n            w[0] = np.mean(y - X[:, 1:] @ w[1:])\n        for j in range(1, n):\n            temp_w = w.copy()\n            temp_w[j] = 0\n            r_j = y - X @ temp_w\n            dot_product = X[:, j] @ r_j\n            soft_threshold = np.sign(dot_product) * max(abs(dot_product) - lambda_param * m, 0)\n            w[j] = soft_threshold / (X[:, j] @ X[:, j])\n    bias = w[0]\n    weights = w[1:].tolist()\n    return ([round(x, 4) for x in weights], round(bias, 4))"}
{"task_id": 160, "completion_id": 2, "solution": "import numpy as np\ndef soft_thresholding(a: float, tau: float) -> float:\n    \"\"\"Apply the soft-thresholding operator to a given value.\"\"\"\n    return np.sign(a) * np.maximum(np.abs(a) - tau, 0)\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    weights = np.zeros(n + 1)\n    bias = 0.0 if fit_intercept else 0.0\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n    for _ in range(max_iters):\n        if fit_intercept:\n            bias = np.mean(y - X[:, 1:].dot(weights[1:]))\n            residuals = y - (bias + X[:, 1:].dot(weights[1:]))\n        else:\n            residuals = y - X[:, 1:].dot(weights[1:])\n        for j in range(1, n + 1):\n            old_weight = weights[j]\n            weights[j] = 0\n            residuals += X[:, j] * old_weight\n            weighted_sum = X[:, j].dot(residuals)\n            weights[j] = soft_thresholding(weighted_sum, lambda_param * m) / np.sum(X[:, j] ** 2)\n            residuals -= X[:, j] * weights[j]\n    if not fit_intercept:\n        weights = weights[1:]\n    return (list(np.round(weights, 4)), np.round(bias, 4))\nX = np.array([[0, 0], [1, 1], [2, 2]])\ny = np.array([0, 1, 2])"}
{"task_id": 160, "completion_id": 3, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    n += 1\n    w = np.zeros(n)\n    X = np.column_stack((np.ones(m), X))\n    for _ in range(max_iters):\n        if fit_intercept:\n            w[0] = np.mean(y - X[:, 1:] @ w[1:])\n        for j in range(1, n):\n            X_j = X[:, j]\n            r_j = y - np.dot(X, w) + w[j] * X_j\n            numerator = np.dot(X_j, r_j)\n            soft_thres = np.sign(numerator) * max(abs(numerator) - lambda_param * m, 0)\n            w[j] = soft_thres / np.dot(X_j, X_j)\n    bias_float = w[0]\n    weights_list = w[1:].round(4).tolist()\n    return (weights_list, round(bias_float, 4))\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([3, 4, 5])\nlambda_param = 0.1"}
{"task_id": 160, "completion_id": 4, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.column_stack((np.ones(m), X))\n        n += 1\n    else:\n        X = np.column_stack((np.zeros(m), X))\n    weights = np.zeros(n)\n    bias = 0 if fit_intercept else np.nan\n    for _ in range(max_iters):\n        if fit_intercept:\n            bias = y - X[:, 1:].dot(weights[1:])\n            bias = np.mean(bias)\n            r_j = y - bias - X[:, 1:].dot(weights[1:])\n        else:\n            r_j = y - X.dot(weights)\n        for j in range(1 if fit_intercent else 0, n):\n            X_j = X[:, j]\n            product = X_j.dot(r_j)\n            l1_threshold = lambda_param * m\n            weights[j] = np.sign(product) * max(abs(product) - l1_threshold, 0) / sum(X_j ** 2)\n            r_j += X_j * weights[j]\n    if fit_intercept:\n        weights = np.around(weights[1:], decimals=4).tolist()\n    else:\n        weights = np.around(weights, decimals=4).tolist()\n    bias = np.around(bias, decimals=4) if fit_intercept else bias\n    return (weights, bias)"}
{"task_id": 160, "completion_id": 5, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n        n += 1\n    w = np.zeros(n)\n    for _ in range(max_iters):\n        if fit_intercept:\n            w[0] = np.mean(y - X[:, 1:] @ w[1:])\n        for j in range(1, n):\n            residual = y - X @ w + X[:, j] * w[j]\n            w_j = soft_thresholding(X[:, j] @ residual, lambda_param * m) / (X[:, j] ** 2).sum()\n            w[j] = w_j\n    weights_list = list(np.round(w[1:], 4))\n    bias_float = np.round(w[0], 4) if fit_intercept else 0.0\n    return (weights_list, bias_float)\ndef soft_thresholding(a, tau):\n    \"\"\"Soft-thresholding operator used in Lasso regression.\"\"\"\n    return np.sign(a) * np.maximum(np.abs(a) - tau, 0)"}
{"task_id": 160, "completion_id": 6, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack((np.ones((m, 1)), X))\n        n += 1\n    w = np.zeros(n)\n    for _ in range(max_iters):\n        if fit_intercept:\n            w[0] = np.mean(y - np.dot(X[:, 1:], w[1:]))\n        for j in range(1, n if fit_intercept else n + 1):\n            r = y - np.dot(X, w) + X[:, j] * w[j]\n            corr = np.dot(X[:, j], r)\n            part_w = np.sign(corr) * max(0, abs(corr) - lambda_param * m) / np.dot(X[:, j], X[:, j])\n            if fit_intercept or j != 0:\n                w[j] = part_w\n    bias = w[0] if fit_intercept else 0\n    weights = w[1:] if fit_intercept else w\n    return ([float(f'{x:.4f}') for x in weights], float(f'{bias:.4f}'))"}
{"task_id": 160, "completion_id": 7, "solution": "import numpy as np\ndef soft_threshold(x, threshold):\n    \"\"\"Apply soft-threshold operator to x with given threshold.\"\"\"\n    if x > threshold:\n        return x - threshold\n    elif x < -threshold:\n        return x + threshold\n    else:\n        return 0.0\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n        n += 1\n    w = np.zeros(n)\n    for _ in range(max_iters):\n        if fit_intercept:\n            w[0] = np.mean(y - np.dot(X[:, 1:], w[1:]))\n            residuals = y - np.dot(X[:, 1:], w[1:])\n        else:\n            residuals = y - np.dot(X, w)\n        for j in range(1, n if fit_intercept else n):\n            temp_w = np.copy(w)\n            temp_w[j] = 0\n            r_j = y - np.dot(X, temp_w)\n            numerator = 2 * np.dot(X[:, j], r_j)\n            denominator = 2 * np.sum(X[:, j] ** 2)\n            w[j] = soft_threshold(numerator, lambda_param * m) / denominator\n    weights = list(w[1:]) if fit_intercept else list(w)\n    bias = float(w[0]) if fit_intercept else 0.0\n    return ([round(w, 4) for w in weights], round(bias, 4))"}
{"task_id": 160, "completion_id": 8, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb \u00b7 L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    n += fit_intercept\n    if fit_intercept:\n        X = np.column_stack((np.ones(m), X))\n    w = np.zeros(n)\n    for _ in range(max_iters):\n        if fit_intercept:\n            w[0] = np.mean(y - X[:, 1:].dot(w[1:]))\n        for j in range(1 if fit_intercept else 0, n):\n            w_prev = w[j]\n            w[j] = 0\n            r_j = y - X.dot(w)\n            inner_prod = X[:, j].dot(r_j)\n            sum_squares = np.sum(X[:, j] ** 2)\n            w[j] = soft_threshold(inner_prod, lambda_param * m) / sum_squares\n            if not np.isfinite(w[j]):\n                w[j] = w_prev\n    weights_list = list(np.round(w[1:], 4)) if fit_intercept else list(np.round(w, 4))\n    bias_float = np.round(w[0], 4) if fit_intercept else 0.0\n    return (weights_list, bias_float)\ndef soft_threshold(z, threshold):\n    return np.sign(z) * max(abs(z) - threshold, 0)\nX = np.array([[1, 2], [3, 4]])\ny = np.array([1, 2])"}
{"task_id": 160, "completion_id": 9, "solution": "import numpy as np\ndef soft_thresholding(a: float, tau: float):\n    \"\"\"Soft thresholding operator used in the Lasso regression update step.\"\"\"\n    if a > tau:\n        return a - tau\n    elif a < -tau:\n        return a + tau\n    else:\n        return 0.0\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    Args:\n        X: 2-D array of shape (m, n) \u2013 feature matrix.\n        y: 1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float. Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.column_stack((np.ones(m), X))\n        n += 1\n    w = np.zeros(n)\n    for _ in range(max_iters):\n        if fit_intercept:\n            w[0] = np.mean(y - X[:, 1:].dot(w[1:]))\n        for j in range(1, n):\n            residual = y - X.dot(w)\n            dot_product = X[:, j].dot(residual)\n            w[j] = soft_thresholding(dot_product, lambda_param * m) / X[:, j].dot(X[:, j])\n    bias = w[0] if fit_intercept else 0.0\n    weights = w[1:] if fit_intercept else w\n    return ([round(weight, 4) for weight in weights], round(bias, 4))\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\ny = np.array([1, 2, 3, 4])"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n    \n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n    \n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n    \n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    if not isinstance(y, np.ndarray):\n        y = np.array(y)\n    if x.shape != y.shape:\n        return -1\n    distance = np.sum(x != y) / len(x)\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 1, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n    \n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n    \n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n    if len(x_arr) != len(y_arr):\n        return -1\n    distance = np.mean(x_arr != y_arr)\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 2, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(y, list):\n        y = np.array(y)\n    if x.shape != y.shape:\n        return -1\n    distance = np.mean(x != y)\n    return round(distance, 4)\nx = [1, 0, 1]\ny = [0, 1, 1, 0]"}
{"task_id": 165, "completion_id": 3, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | np.ndarray, y: list[int] | np.ndarray) -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(y, list):\n        y = np.array(y)\n    if len(x) != len(y):\n        return -1\n    distance = np.sum(x != y) / len(x)\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 4, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | np.ndarray, y: list[int] | np.ndarray) -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    if not isinstance(y, np.ndarray):\n        y = np.array(y)\n    if x.shape != y.shape:\n        return -1\n    dist = np.sum(x != y) / x.size\n    return round(float(dist), 4)"}
{"task_id": 165, "completion_id": 5, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(y, list):\n        y = np.array(y)\n    if x.shape != y.shape:\n        return -1\n    distance = np.sum(x != y)\n    normalized_distance = distance / x.size\n    return round(normalized_distance, 4)"}
{"task_id": 165, "completion_id": 6, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    x = np.array(x, dtype=int)\n    y = np.array(y, dtype=int)\n    if x.shape != y.shape:\n        return -1\n    diffs = np.sum(x != y)\n    distance = round(diffs / x.size, 4)\n    return distance"}
{"task_id": 165, "completion_id": 7, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | np.ndarray, y: list[int] | np.ndarray) -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    x = np.asarray(x)\n    y = np.asarray(y)\n    if x.shape != y.shape:\n        return -1\n    diff_elements = np.sum(x != y)\n    distance = diff_elements / x.size\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 8, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x, dtype=int)\n    if not isinstance(y, np.ndarray):\n        y = np.array(y, dtype=int)\n    if x.shape != y.shape:\n        return -1\n    distance = np.sum(x != y) / x.size\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 9, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if x.shape != y.shape:\n        return -1\n    dist = np.sum(x != y) / x.size\n    return round(dist, 4)\nx = [1, 0, 1, 1, 0, 1, 0, 1]\ny = [1, 0, 0, 1, 0, 1, 1, 1]"}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer')\n    if N == 1:\n        return [1.0]\n    if window not in ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']:\n        raise ValueError('Unsupported window type')\n    n = np.arange(N)\n    if window == 'hamming':\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'hann':\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'blackman_harris':\n        a = [0.35875, 0.48829, 0.14128, 0.01168]\n        w = a[0] - a[1] * np.cos(2 * np.pi * n / (N - 1)) + a[2] * np.cos(4 * np.pi * n / (N - 1)) - a[3] * np.cos(6 * np.pi * n / (N - 1))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Coefficients must be supplied for generalized_cosine')\n        w = sum((coef * np.cos(2 * np.pi * k * n / (N - 1)) for (k, coef) in enumerate(coefficients)))\n    return [round(x, 4) for x in w]"}
{"task_id": 169, "completion_id": 1, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError('N must be a positive integer.')\n    n = np.arange(N)\n    coefficients_dict = {'hamming': [0.54, 0.46], 'hann': [0.5, 0.5], 'blackman_harris': [0.35875, 0.48829, 0.14128, 0.01168]}\n    coefficients = coefficients_dict.get(window, coefficients)\n    if window == 'generalized_cosine' and coefficients is None:\n        raise ValueError(\"Coefficients must be provided for 'generalized_cosine' window.\")\n    if coefficients is None:\n        raise ValueError(f'Unknown window type: {window}')\n    window_function = 0\n    for (k, a_k) in enumerate(coefficients):\n        window_function += a_k * np.cos(2 * np.pi * k / (N - 1) * n)\n    if window != 'generalized_cosine':\n        window_function = -window_function[1:] + coefficients[0]\n    if N == 1:\n        return [1.0]\n    window_function = np.round(window_function, decimals=4).tolist()\n    return window_function"}
{"task_id": 169, "completion_id": 2, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if N == 1:\n        return [1.0]\n    n = np.arange(N)\n    denom = N - 1\n    if window == 'hamming':\n        window_values = 0.54 - 0.46 * np.cos(2 * np.pi * n / denom)\n    elif window == 'hann':\n        window_values = 0.5 - 0.5 * np.cos(2 * np.pi * n / denom)\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        window_values = a0 - a1 * np.cos(2 * np.pi * n / denom) + a2 * np.cos(4 * np.pi * n / denom) - a3 * np.cos(6 * np.pi * n / denom)\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('coefficients must be supplied for generalized_cosine.')\n        window_values = sum((a * np.cos(2 * k * np.pi * n / denom) for (k, a) in enumerate(coefficients)))\n    else:\n        raise ValueError('Unknown window name.')\n    return [round(val, 4) for val in window_values]"}
{"task_id": 169, "completion_id": 3, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if window not in ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']:\n        raise ValueError(f'Unknown window type {window}.')\n    if window == 'hamming':\n        coefficients = [0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == 'hann':\n        coefficients = [0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        coefficients = [a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == 'generalized_cosine':\n        if coefficients is None or not isinstance(coefficients, list):\n            raise ValueError('Coefficients must be provided for generalized_cosine window.')\n        coefficients = [sum((a * np.cos(2 * np.pi * k * n / (N - 1)) for (k, a) in enumerate(coefficients))) for n in range(N)]\n    return [round(coeff, 4) for coeff in coefficients]"}
{"task_id": 169, "completion_id": 4, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\"\"\"\n    if N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if window not in ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']:\n        raise ValueError('Unknown window name.')\n    if N == 1:\n        return [1.0]\n    if window == 'hamming':\n        (a0, a1) = (0.54, 0.46)\n        return [round(a0 - a1 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'hann':\n        (a0, a1) = (0.5, 0.5)\n        return [round(a0 - a1 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        return [round(a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Coefficients must be provided for generalized_cosine.')\n        return [round(sum((a_k * np.cos(2 * np.pi * k * n / (N - 1)) for (k, a_k) in enumerate(coefficients))), 4) for n in range(N)]"}
{"task_id": 169, "completion_id": 5, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n    \n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError('N must be a positive integer')\n    if N == 1:\n        return [1.0]\n    if window not in ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']:\n        raise ValueError('Unknown window type')\n    n = np.arange(N)\n    window_coefficients = []\n    if window == 'hamming':\n        window_coefficients = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'hann':\n        window_coefficients = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        window_coefficients = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Coefficients must be provided for generalized_cosine')\n        window_coefficients = sum((a_k * np.cos(2 * np.pi * k * n / (N - 1)) for (k, a_k) in enumerate(coefficients)))\n    return [round(val, 4) for val in window_coefficients.tolist()]"}
{"task_id": 169, "completion_id": 6, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer')\n    if window not in ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']:\n        raise ValueError('Unknown window type')\n\n    def round_coeff(coefficient):\n        return round(coefficient, 4)\n    n = np.arange(N)\n    coefficients_list = [round_coeff(1.0)] * N if N == 1 else []\n    if window == 'hamming':\n        coefficients_list = [round_coeff(0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))) for n in np.arange(N)]\n    elif window == 'hann':\n        coefficients_list = [round_coeff(0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))) for n in np.arange(N)]\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        coefficients_list = [round_coeff(a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))) for n in np.arange(N)]\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for 'generalized_cosine'\")\n        computed_coeffs = [np.sum([coeff * np.cos(2 * np.pi * k * n / (N - 1)) for (k, coeff) in enumerate(coefficients)]) for n in np.arange(N)]\n        coefficients_list = [round_coeff(coeff) for coeff in computed_coeffs]\n    return coefficients_list"}
{"task_id": 169, "completion_id": 7, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if N == 1:\n        return [1.0]\n    if window not in ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']:\n        raise ValueError('Unsupported window type.')\n    n = np.arange(N)\n    normalized_n = 2 * np.pi * n / (N - 1)\n    if window == 'hamming':\n        w = 0.54 - 0.46 * np.cos(normalized_n)\n    elif window == 'hann':\n        w = 0.5 - 0.5 * np.cos(normalized_n)\n    elif window == 'blackman_harris':\n        w = 0.35875 - 0.48829 * np.cos(normalized_n) + 0.14128 * np.cos(2 * normalized_n) - 0.01168 * np.cos(3 * normalized_n)\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for 'generalized_cosine'.\")\n        w = sum((a * np.cos(2 * np.pi * k * n / (N - 1)) for (k, a) in enumerate(coefficients)))\n        w = np.array(w, dtype=float)\n    return [round(x, 4) for x in w]"}
{"task_id": 169, "completion_id": 8, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be a positive integer.')\n\n    def general_coeffs(coeffs):\n        return sum((a * np.cos(2 * np.pi * k * n / (N - 1)) for (k, a) in enumerate(coeffs)))\n    if window == 'hamming':\n        coeffs = 0.54 - 0.46 * np.cos(2 * np.pi * np.arange(N) / (N - 1))\n    elif window == 'hann':\n        coeffs = 0.5 - 0.5 * np.cos(2 * np.pi * np.arange(N) / (N - 1))\n    elif window == 'blackman_harris':\n        a = [0.35875, -0.48829, 0.14128, -0.01168]\n        n = np.arange(N)\n        coeffs = sum((ai * np.cos(2 * np.pi * k * n / (N - 1)) for (k, ai) in enumerate(a)))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('coefficients must be provided for generalized_cosine window.')\n        coeffs = general_coeffs(coefficients)\n    else:\n        raise ValueError('Unknown window type.')\n    if N == 1:\n        if window == 'hamming' or window == 'hann':\n            return [1.0]\n        elif window == 'blackman_harris':\n            return [0.35875]\n        elif window == 'generalized_cosine':\n            return [coefficients[0]]\n        else:\n            raise ValueError('Unknown window type with N=1.')\n    return [round(x, 4) for x in coeffs.tolist()]"}
{"task_id": 169, "completion_id": 9, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n    \n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n    \n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError('N must be a positive integer.')\n\n    def hamming(N):\n        return 0.54 - 0.46 * np.cos(2 * np.pi * np.arange(N) / (N - 1))\n\n    def hann(N):\n        return 0.5 - 0.5 * np.cos(2 * np.pi * np.arange(N) / (N - 1))\n\n    def blackman_harris(N):\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        n = np.arange(N)\n        return a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n\n    def generalized_cosine(N, coefficients):\n        n = np.arange(N)\n        return sum((a * np.cos(2 * np.pi * k * n / (N - 1)) for (k, a) in enumerate(coefficients)))\n    window_functions = {'hamming': hamming, 'hann': hann, 'blackman_harris': blackman_harris}\n    if window in window_functions:\n        window_coefficients = window_functions[window](N)\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for 'generalized_cosine'.\")\n        window_coefficients = generalized_cosine(N, coefficients)\n    else:\n        raise ValueError(f'Unknown window type: {window}')\n    return [round(c, 4) for c in window_coefficients.tolist()]"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) != 2:\n        raise ValueError('y_train must consist of exactly two distinct numeric values.')\n    label_mapping = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_mapping[label] for label in y_train])\n    X_train = np.concatenate([X_train, np.ones((X_train.shape[0], 1))], axis=1)\n    X_test = np.concatenate([X_test, np.ones((X_test.shape[0], 1))], axis=1)\n    weights = np.zeros(X_train.shape[1])\n    if unique_labels[0] == unique_labels[1]:\n        return [unique_labels[0]] * len(X_test)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    for epoch in range(epochs):\n        shuffled_indices = np.random.permutation(X_train.shape[0])\n        X_train_shuffled = X_train[shuffled_indices]\n        y_train_shuffled = y_train_mapped[shuffled_indices]\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n            predictions = sigmoid(np.dot(X_batch, weights))\n            gradient = np.dot(X_batch.T, predictions - y_batch) / batch_size\n            weights -= learning_rate * gradient\n    predictions = sigmoid(np.dot(X_test, weights))\n    predicted_labels = (predictions >= 0.5).astype(int)\n    predicted_labels = [unique_labels[label] for label in predicted_labels]\n    return predicted_labels"}
{"task_id": 171, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the sigmoid function.\"\"\"\n    return 1 / (1 + np.exp(-z))\ndef map_labels(y, label_map):\n    \"\"\"Map the labels from the original to {0,1}. Also map predictions back.\"\"\"\n    return [label_map[y[i]] for i in range(len(y))]\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    X_test = np.array(X_test)\n    X_train = np.insert(X_train, 0, 1, axis=1)\n    X_test = np.insert(X_test, 0, 1, axis=1)\n    original_labels = sorted(set(y_train))\n    label_map = {original_labels[0]: 0, original_labels[1]: 1}\n    mapped_y_train = map_labels(y_train, label_map)\n    if len(original_labels) == 1:\n        return [original_labels[0]] * X_test.shape[0]\n    weights = np.zeros(X_train.shape[1])\n    for _ in range(epochs):\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train[i:i + batch_size]\n            y_batch = mapped_y_train[i:i + batch_size]\n            predictions = sigmoid(np.dot(X_batch, weights))\n            gradient = np.dot(X_batch.T, predictions - y_batch) / X_batch.shape[0]\n            weights -= learning_rate * gradient\n    test_predictions = sigmoid(np.dot(X_test, weights))\n    binary_predictions = (test_predictions > 0.5).astype(int)\n    final_predictions = map_labels(binary_predictions, {0: original_labels[0], 1: original_labels[1]})\n    return final_predictions"}
{"task_id": 171, "completion_id": 2, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) != 2:\n        raise ValueError('y_train must contain exactly two distinct values.')\n    label_mapping = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_mapping[label] for label in y_train])\n    X_train = np.c_[np.ones((X_train.shape[0], 1)), X_train]\n    X_test = np.c_[np.ones((X_test.shape[0], 1)), X_test]\n    if unique_labels[0] == unique_labels[1]:\n        return [unique_labels[0]] * X_test.shape[0]\n    weights = np.zeros(X_train.shape[1])\n    for epoch in range(epochs):\n        for i in range(0, X_train.shape[0], batch_size):\n            batch_X = X_train[i:i + batch_size]\n            batch_y = y_train_mapped[i:i + batch_size]\n            predictions = sigmoid(np.dot(batch_X, weights))\n            gradient = np.dot(batch_X.T, predictions - batch_y) / batch_size\n            weights -= learning_rate * gradient\n    test_predictions = sigmoid(np.dot(X_test, weights))\n    test_labels = (test_predictions >= 0.5).astype(int)\n    test_labels_unmapped = [unique_labels[label] for label in test_labels]\n    return test_labels_unmapped\ndef sigmoid(z):\n    \"\"\"Sigmoid function.\"\"\"\n    return 1 / (1 + np.exp(-z))\nX_train = [[-2, -1], [-1, -2], [1, 1], [2, 1]]\ny_train = [0, 0, 1, 1]\nX_test = [[-1, -1], [1, -1], [-2, 2]]\npredictions = logistic_regression_train_predict(X_train, y_train, X_test)"}
{"task_id": 171, "completion_id": 3, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    X_train = np.column_stack((np.ones(X_train.shape[0]), X_train))\n    X_test = np.column_stack((np.ones(X_test.shape[0]), X_test))\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) != 2:\n        raise ValueError('y_train must have exactly two distinct labels.')\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n    if unique_labels[0] == unique_labels[1]:\n        return [unique_labels[0]] * len(X_test)\n    weights = np.zeros(X_train.shape[1])\n\n    def logistic(z):\n        return 1 / (1 + np.exp(-z))\n    for epoch in range(epochs):\n        shuffled_indices = np.random.permutation(len(X_train))\n        X_shuffled = X_train[shuffled_indices]\n        y_shuffled = y_train_mapped[shuffled_indices]\n        for batch_start in range(0, len(X_train), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_train))\n            X_batch = X_shuffled[batch_start:batch_end]\n            y_batch = y_shuffled[batch_start:batch_end]\n            predictions = logistic(np.dot(X_batch, weights))\n            errors = y_batch - predictions\n            gradient = np.dot(X_batch.T, errors) / batch_size\n            weights += learning_rate * gradient\n    y_pred_prob = logistic(np.dot(X_test, weights))\n    y_pred = (y_pred_prob >= 0.5).astype(int)\n    y_pred = [unique_labels[1] if pred == 1 else unique_labels[0] for pred in y_pred]\n    return y_pred\nX_train = [[0], [1], [2], [3]]\ny_train = [0, 0, 1, 1]\nX_test = [[1.5], [4], [2.5]]\npredictions = logistic_regression_train_predict(X_train, y_train, X_test)"}
{"task_id": 171, "completion_id": 4, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) != 2:\n        raise ValueError('y_train must contain exactly two distinct labels.')\n    label_mapping = {original: mapped for (mapped, original) in enumerate(unique_labels)}\n    inverse_label_mapping = {mapped: original for (original, mapped) in label_mapping.items()}\n    y_train_mapped = np.array([label_mapping[l] for l in y_train])\n    intercept = np.ones((X_train.shape[0], 1))\n    X_train = np.hstack((intercept, X_train))\n    intercept = np.ones((X_test.shape[0], 1))\n    X_test = np.hstack((intercept, X_test))\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    num_features = X_train.shape[1]\n    weights = np.zeros(num_features)\n    for epoch in range(epochs):\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train[i:i + batch_size]\n            y_batch = y_train_mapped[i:i + batch_size]\n            logit = np.dot(X_batch, weights)\n            predictions = 1 / (1 + np.exp(-logit))\n            errors = predictions - y_batch\n            gradient = np.dot(X_batch.T, errors) / len(y_batch)\n            weights -= learning_rate * gradient\n    logit = np.dot(X_test, weights)\n    predictions = 1 / (1 + np.exp(-logit))\n    binary_predictions = (predictions >= 0.5).astype(int)\n    y_pred = [inverse_label_mapping[pred] for pred in binary_predictions]\n    return y_pred"}
{"task_id": 171, "completion_id": 5, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    class_labels = np.unique(y_train)\n    if len(class_labels) != 2:\n        raise ValueError('There must be exactly two distinct labels in y_train')\n    y_mapped = np.where(y_train == class_labels[0], 0, 1)\n    X_train = np.hstack([np.ones((X_train.shape[0], 1)), X_train])\n    X_test = np.hstack([np.ones((X_test.shape[0], 1)), X_test])\n    weights = np.zeros(X_train.shape[1])\n    if np.all(y_mapped == y_mapped[0]):\n        return [class_labels[0]] * len(X_test)\n    for epoch in range(epochs):\n        shuffle_idx = np.random.permutation(len(X_train))\n        X_train_shuffled = X_train[shuffle_idx]\n        y_train_shuffled = y_mapped[shuffle_idx]\n        for i in range(0, len(X_train), batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n            predictions = sigmoid(np.dot(X_batch, weights))\n            error = predictions - y_batch\n            gradient = np.dot(X_batch.T, error)\n            weights -= learning_rate * gradient\n    test_predictions = np.dot(X_test, weights)\n    sigmoid_predictions = sigmoid(test_predictions)\n    final_predictions = np.where(sigmoid_predictions >= 0.5, class_labels[1], class_labels[0])\n    return list(final_predictions)\ndef sigmoid(x):\n    return np.where(x >= 0, 1 / (1 + np.exp(-x)), np.exp(x) / (1 + np.exp(x)))"}
{"task_id": 171, "completion_id": 6, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    X_train = np.concatenate([np.ones((X_train.shape[0], 1)), X_train], axis=1)\n    X_test = np.concatenate([np.ones((X_test.shape[0], 1)), X_test], axis=1)\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) != 2:\n        raise ValueError('Training labels should contain exactly two unique values.')\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n    if unique_labels[0] == unique_labels[1]:\n        return list((unique_labels[0] for _ in range(X_test.shape[0])))\n    weights = np.zeros(X_train.shape[1])\n    for _ in range(epochs):\n        indices = np.random.permutation(X_train.shape[0])\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_mapped[indices]\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n            predictions = sigmoid(np.dot(X_batch, weights))\n            error = y_batch - predictions\n            gradient = np.dot(X_batch.T, error) / batch_size\n            weights += learning_rate * gradient\n    test_predictions = sigmoid(np.dot(X_test, weights))\n    test_predictions = (test_predictions > 0.5).astype(np.int64)\n    predictions = [unique_labels[p] for p in test_predictions]\n    return list(predictions)\ndef sigmoid(x):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-x))"}
{"task_id": 171, "completion_id": 7, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    labels = np.unique(y_train)\n    if len(labels) != 2:\n        raise ValueError('There must be exactly two distinct labels.')\n    label_mapping = {labels[0]: 0, labels[1]: 1}\n    y_train_mapped = np.array([label_mapping[y] for y in y_train])\n    X_train = np.array(X_train)\n    X_test = np.array(X_test)\n    X_train = np.column_stack([np.ones(X_train.shape[0]), X_train])\n    X_test = np.column_stack([np.ones(X_test.shape[0]), X_test])\n    weights = np.zeros(X_train.shape[1])\n    for epoch in range(epochs):\n        shuffled_indices = np.random.permutation(X_train.shape[0])\n        (X_train, y_train_mapped) = (X_train[shuffled_indices], y_train_mapped[shuffled_indices])\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train[i:i + batch_size]\n            y_batch = y_train_mapped[i:i + batch_size]\n            z = np.dot(X_batch, weights)\n            predictions = sigmoid(z)\n            errors = y_batch - predictions\n            gradient = -np.dot(X_batch.T, errors) / batch_size\n            weights -= learning_rate * gradient\n    z = np.dot(X_test, weights)\n    predictions = sigmoid(z)\n    predictions = np.where(predictions > 0.5, labels[1], labels[0])\n    return predictions.tolist()"}
{"task_id": 171, "completion_id": 8, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    unique_labels = np.unique(y_train)\n    assert len(unique_labels) == 2, 'y_train must have exactly two unique labels.'\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n    X_train = np.column_stack((np.ones(X_train.shape[0]), X_train))\n    X_test = np.column_stack((np.ones(X_test.shape[0]), X_test))\n    if y_train_mapped.min() == y_train_mapped.max():\n        return [unique_labels[0]] * len(X_test)\n    weights = np.zeros(X_train.shape[1])\n    for _ in range(epochs):\n        indices = np.random.permutation(X_train.shape[0])\n        X_train = X_train[indices]\n        y_train_mapped = y_train_mapped[indices]\n        for i in range(0, X_train.shape[0], batch_size):\n            batch_X = X_train[i:i + batch_size]\n            batch_y = y_train_mapped[i:i + batch_size]\n            predictions = 1 / (1 + np.exp(-batch_X.dot(weights)))\n            gradient = batch_X.T.dot(predictions - batch_y) / len(batch_y)\n            weights -= learning_rate * gradient\n    probabilities = 1 / (1 + np.exp(-X_test.dot(weights)))\n    y_pred = (probabilities >= 0.5).astype(int)\n    y_pred = np.array([unique_labels[0] if pred == 0 else unique_labels[1] for pred in y_pred])\n    return y_pred.tolist()\nX_train = [[1, 2], [2, 3], [3, 4], [4, 5]]\ny_train = [0, 0, 1, 1]\nX_test = [[1, 3], [2, 4], [3, 5]]"}
{"task_id": 171, "completion_id": 9, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    labels = np.unique(y_train)\n    label_mapping = {labels[0]: 0, labels[1]: 1}\n    reverse_label_mapping = {0: labels[0], 1: labels[1]}\n    y_train = np.array([label_mapping[label] for label in y_train])\n    intercept = np.ones((X_train.shape[0], 1))\n    X_train = np.hstack((intercept, X_train))\n    intercept = np.ones((X_test.shape[0], 1))\n    X_test = np.hstack((intercept, X_test))\n    if len(labels) < 2:\n        return [int(labels[0])] * X_test.shape[0]\n    weights = np.zeros(X_train.shape[1])\n    for _ in range(epochs):\n        indices = np.arange(X_train.shape[0])\n        np.random.shuffle(indices)\n        X_train = X_train[indices]\n        y_train = y_train[indices]\n        for batch_start in range(0, len(y_train), batch_size):\n            X_batch = X_train[batch_start:batch_start + batch_size]\n            y_batch = y_train[batch_start:batch_start + batch_size]\n            predictions = sigmoid(np.dot(X_batch, weights))\n            error = predictions - y_batch\n            gradient = np.dot(X_batch.T, error)\n            weights -= learning_rate * gradient / batch_size\n    test_predictions = sigmoid(np.dot(X_test, weights))\n    test_predictions = test_predictions > 0.5\n    return [reverse_label_mapping[pred] for pred in test_predictions.astype(int)]\ndef sigmoid(z):\n    return 1 / (1 + np.exp(-z))"}
{"task_id": 176, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n\n    def build_stump(X, y, weights):\n        (num_samples, num_features) = np.array(X).shape\n        best_stump = {}\n        min_error = float('inf')\n        majority_label = 1 if np.sum(np.sign(y)) > 0 else -1\n        for feature_idx in range(num_features):\n            thresholds = list(set((row[feature_idx] for row in X)))\n            thresholds.sort()\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = [polarity if x[feature_idx] < threshold else -polarity for x in X]\n                    error = np.sum(weights[predictions != np.sign(y)])\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {'feature_idx': feature_idx, 'threshold': threshold, 'polarity': polarity}\n        return (best_stump, min_error)\n    X_train = np.array(X_train)\n    y_train = np.array(y_train).astype(float)\n    X_test = np.array(X_test)\n    num_samples = X_train.shape[0]\n    weights = np.full(num_samples, 1 / num_samples)\n    weak_classifiers = []\n    for _ in range(n_estimators):\n        (best_stump, error) = build_stump(X_train, y_train, weights)\n        if error == 0:\n            break\n        alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        predict_testing_data = [best_stump['polarity'] if x[best_stump['feature_idx']] < best_stump['threshold'] else -best_stump['polarity'] for x in X_train]\n        predict_error = np.sign(predict_testing_data) != np.sign(y_train)\n        weights *= np.exp(-alpha * np.sign(y_train) * predict_testing_data)\n        weights /= np.sum(weights)\n        weak_classifiers.append((best_stump, alpha))\n        if error == 0:\n            break\n\n    def aggregate_predictions(x):\n        prediction = sum((alpha * stump['polarity'] * (1 if x[stump['feature_idx']] < stump['threshold'] else -1) for (stump, alpha) in weak_classifiers))\n        return 1 if prediction > 0 else 0\n    predictions = [aggregate_predictions(x) for x in X_test]\n    return predictions"}
{"task_id": 176, "completion_id": 1, "solution": "import numpy as np\ndef find_best_stump(X, y, weights):\n    best_error = np.inf\n    best_threshold = None\n    best_feature_index = None\n    best_polarity = None\n    for feature_index in range(X.shape[1]):\n        for polarity in [1, -1]:\n            for threshold in np.unique(X[:, feature_index]):\n                prediction = polarity * (X[:, feature_index] < threshold)\n                prediction[prediction == -1] = 0\n                error = np.sum(weights * (prediction != y))\n                if error < best_error:\n                    best_error = error\n                    best_threshold = threshold\n                    best_feature_index = feature_index\n                    best_polarity = polarity\n    return (best_feature_index, best_threshold, best_polarity, best_error)\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    weights = np.full_like(y_train, 1 / len(y_train), dtype=float)\n    y_train_transformed = y_train * 2 - 1\n    stump_weights = []\n    stumps = []\n    for _ in range(n_estimators):\n        (feature_index, threshold, polarity, error) = find_best_stump(X_train, y_train_transformed, weights)\n        if error == 0:\n            break\n        alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        stump_weights.append(alpha)\n        predictions = polarity * (X_train[:, feature_index] < threshold)\n        predictions[predictions == -1] = 0\n        incorrect_predictions = (predictions != y_train).astype(int)\n        weights *= np.exp(-alpha * y_train_transformed * (polarity * (X_train[:, feature_index] < threshold)))\n        weights /= np.sum(weights)\n        stumps.append((feature_index, threshold, polarity))\n    predictions = np.zeros(X_test.shape[0])\n    for (i, (feature_index, threshold, polarity)) in enumerate(stumps):\n        predictions += stump_weights[i] * polarity * ((X_test[:, feature_index] < threshold) * 2 - 1)\n    predictions = (predictions > 0).astype(int)\n    return list(predictions)"}
{"task_id": 176, "completion_id": 2, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n    y_train_np[y_train_np == 0] = -1\n    (n_samples, n_features) = X_train_np.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    weak_learners = []\n    for _ in range(n_estimators):\n        best_error = float('inf')\n        best_weak_learner = None\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train_np[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.where((X_train_np[:, feature_index] < threshold) == (polarity == 1), polarity, -polarity)\n                    error = np.sum(sample_weights[y_train_np != predictions])\n                    if error < best_error:\n                        best_error = error\n                        best_weak_learner = (feature_index, threshold, polarity)\n        if best_error == 0:\n            break\n        (feature_index, threshold, polarity) = best_weak_learner\n        predictions = np.where((X_train_np[:, feature_index] < threshold) == (polarity == 1), polarity, -polarity)\n        alpha = 0.5 * np.log((1 - best_error) / (best_error + 1e-10))\n        sample_weights *= np.exp(-alpha * y_train_np * predictions)\n        sample_weights /= np.sum(sample_weights)\n        weak_learners.append((alpha, feature_index, threshold, polarity))\n    predictions_test = np.zeros(X_test_np.shape[0])\n    for (alpha, feature_index, threshold, polarity) in weak_learners:\n        predictions_test += alpha * np.array(np.where((X_test_np[:, feature_index] < threshold) == (polarity == 1), polarity, -polarity))\n    final_predictions = np.where(predictions_test >= 0, 1, 0).tolist()\n    return final_predictions\nX_train = [[-1, -1], [-2, -1], [1, 1], [2, 1]]\ny_train = [1, 1, 0, 0]\nX_test = [[0, 0], [1, -1]]\npredictions = adaboost_predict(X_train, y_train, X_test, n_estimators=5)"}
{"task_id": 176, "completion_id": 3, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    def decision_stump(X, y, w):\n        \"\"\"Find the stump with the smallest weighted error.\"\"\"\n        (min_error, best_stump) = (np.inf, None)\n        for idx in range(X.shape[1]):\n            for thr in X[:, idx]:\n                for pol in [-1, 1]:\n                    preds = np.where((X[:, idx] >= thr) ^ (pol == -1), 1, -1)\n                    error = np.sum(w[y != preds])\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {'feature_index': idx, 'threshold': thr, 'polarity': pol}\n                    elif error == min_error:\n                        if idx < best_stump['feature_index'] or (idx == best_stump['feature_index'] and thr < best_stump['threshold']) or (idx == best_stump['feature_index'] and thr == best_stump['threshold'] and (pol == 1)):\n                            best_stump = {'feature_index': idx, 'threshold': thr, 'polarity': pol}\n            if min_error == 0:\n                break\n        return (best_stump, min_error)\n\n    def stump_pred(stump, X):\n        return np.where((X[:, stump['feature_index']] >= stump['threshold']) ^ (stump['polarity'] == -1), 1, -1)\n    y_train_polarity = np.where(y_train == 0, -1, 1)\n    weights = np.ones(len(y_train)) / len(y_train)\n    (stumps, alphas) = ([], [])\n    for _ in range(n_estimators):\n        (stump, error) = decision_stump(X_train, y_train, weights)\n        if error == 0:\n            break\n        alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        stumps.append(stump)\n        alphas.append(alpha)\n        predicted = stump_pred(stump, X_train)\n        weights *= np.exp(-alpha * y_train_polarity * predicted)\n        weights /= np.sum(weights)\n    test_preds = []\n    for data in X_test:\n        agg_vote = sum((alpha * stump_pred(stump, [data]) for (stump, alpha) in zip(stumps, alphas)))\n        class_label = 0 if agg_vote <= 0 else 1\n        test_preds.append(class_label)\n    return test_preds\nX_train = [[1, 3], [2, 2], [3, 1], [-1, 1], [-2, 2], [-3, 3]]\ny_train = [1, 1, 1, 0, 0, 0]\nX_test = [[0, 2], [4, 0]]"}
{"task_id": 176, "completion_id": 4, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    n_samples = X_train.shape[0]\n    n_features = X_train.shape[1]\n    sample_weights = np.ones(n_samples) / n_samples\n    weak_learners = []\n    alpha_t_values = []\n    threshold_candidates = []\n    for j in range(n_features):\n        thresholds = np.unique(X_train[:, j])\n        thresholds = (thresholds[:-1] + thresholds[1:]) / 2\n        threshold_candidates.append(thresholds)\n    for t in range(n_estimators):\n        min_error = float('inf')\n        min_stump = (0, 0, 1)\n        for j in range(n_features):\n            for th in threshold_candidates[j]:\n                for pol in [-1, 1]:\n                    pred = (X_train[:, j] >= th) * pol * 2 - 1 if pol == -1 else (X_train[:, j] < th) * pol * 2 - 1\n                    error = np.sum(sample_weights * (pred != y_train * 2 - 1))\n                    if error < min_error or (error == min_error and (j, th, pol) < min_stump):\n                        min_error = error\n                        min_stump = (j, th, pol)\n        if min_error == 0:\n            break\n        weak_learners.append(min_stump)\n        (feature_index, threshold, polarity) = min_stump\n        alpha_t = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        alpha_t_values.append(alpha_t)\n        predictions = (X_train[:, feature_index] >= threshold) * polarity * 2 - 1 if polarity == -1 else (X_train[:, feature_index] < threshold) * polarity * 2 - 1\n        sample_weights *= np.exp(-alpha_t * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n    test_predictions = np.zeros(X_test.shape[0])\n    for (i, stump) in enumerate(weak_learners):\n        (feature_index, threshold, polarity) = stump\n        pred = (X_test[:, feature_index] >= threshold) * polarity * 2 - 1 if polarity == -1 else (X_test[:, feature_index] < threshold) * polarity * 2 - 1\n        test_predictions += pred * alpha_t_values[i]\n    test_predictions = (test_predictions > 0) * 1\n    return test_predictions.tolist()"}
{"task_id": 176, "completion_id": 5, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n\n    def build_stump(X, y, weights):\n        (min_error, best_stump, best_unnormalized) = (float('inf'), None, float('inf'))\n        (n_samples, n_features) = (len(X), len(X[0]))\n        for feature in range(n_features):\n            for threshold in np.unique([x[feature] for x in X]):\n                for polarity in (1, -1):\n                    predict = lambda values: (polarity * 1 if value < threshold else polarity * -1 for value in values)\n                    y_pred = np.array([pred for pred in predict([x[feature] for x in X])])\n                    error = np.sum(weights[y != y_pred])\n                    unnormalized = np.sum(weights)\n                    if error < min_error or (error == min_error and unnormalized < best_unnormalized):\n                        min_error = error\n                        best_stump = {'feature_index': feature, 'threshold': threshold, 'polarity': polarity}\n                        best_unnormalized = unnormalized\n        return (best_stump, min_error)\n\n    def update_weights(weights, alpha, y, y_pred):\n        exponential = np.exp(-alpha * y * y_pred)\n        weights *= exponential\n        weights /= np.sum(weights)\n        return weights\n\n    def predict_single(x, stumps, alphas):\n        weighted_vote = np.sum([alpha * (1 if (stump['polarity'] * 1 if x[stump['feature_index']] < stump['threshold'] else stump['polarity'] * -1) > 0 else -1) for (stump, alpha) in zip(stumps, alphas)])\n        return 0 if weighted_vote < 0 else 1\n    (X_train, y_train, X_test) = (np.array(X_train), np.array(y_train), np.array(X_test))\n    y_train = np.where(y_train == 0, -1, 1)\n    (stumps, alphas) = ([], [])\n    weights = np.full(y_train.shape, 1 / len(y_train))\n    for _ in range(n_estimators):\n        (stump, error) = build_stump(X_train, y_train, weights)\n        alpha = 0.5 * np.log((1 - error + 1e-10) / (error + 1e-10))\n        weights = update_weights(weights, alpha, y_train, np.array([1 if (stump['polarity'] * 1 if x[stump['feature_index']] < stump['threshold'] else stump['polarity'] * -1) > 0 else -1 for x in X_train]))\n        stumps.append(stump)\n        alphas.append(alpha)\n        if error == 0:\n            break\n    y_pred_test = [predict_single(x, stumps, alphas) for x in X_test]\n    return y_pred_test\nX_train = [[-1], [0], [1], [3], [4], [6]]\ny_train = [0, 0, 0, 1, 1, 1]\nX_test = [[-2], [2], [5]]"}
{"task_id": 176, "completion_id": 6, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    (n_samples, n_features) = X_train.shape\n    n_estimators = min(n_estimators, n_samples)\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    best_stumps = []\n    alphas = []\n    for _ in range(n_estimators):\n        best_error = 1\n        best_stump = None\n        for feature_idx in range(n_features):\n            feature = X_train[:, feature_idx]\n            unique_vals = np.unique(feature)\n            thresholds = (unique_vals[:-1] + unique_vals[1:]) / 2.0\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = (polarity * (feature < threshold)).astype(int)\n                    predictions[predictions == 0] = -1\n                    weighted_error = np.sum(sample_weights * (predictions != y_train))\n                    if weighted_error < best_error:\n                        best_error = weighted_error\n                        best_stump = (feature_idx, threshold, polarity)\n        if best_error == 0:\n            alphas.append(np.inf)\n            best_stumps.append(best_stump)\n            break\n        alpha = 0.5 * np.log((1 - best_error) / (best_error + 1e-10))\n        alphas.append(alpha)\n        best_stumps.append(best_stump)\n        (feature_idx, threshold, polarity) = best_stump\n        predictions = (polarity * (X_train[:, feature_idx] < threshold)).astype(int)\n        predictions[predictions == 0] = -1\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n    test_predictions = np.zeros((n_estimators, X_test.shape[0]))\n    for t in range(n_estimators):\n        (feature_idx, threshold, polarity) = best_stumps[t]\n        test_predictions[t] = alphas[t] * (polarity * (X_test[:, feature_idx] < threshold)).astype(int)\n    overall_predictions = np.sign(test_predictions.sum(axis=0)).astype(int)\n    overall_predictions[overall_predictions == -1] = 0\n    return list(overall_predictions)"}
{"task_id": 176, "completion_id": 7, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n\n    def build_stump(X, y, weights):\n        best_error = np.inf\n        best_stump = None\n        for feature_index in range(len(X[0])):\n            for threshold in np.unique(X[:, feature_index]):\n                for polarity in [1, -1]:\n                    predicted = np.where(polarity * X[:, feature_index] < polarity * threshold, 1, -1) == y\n                    error = np.sum(weights[~predicted])\n                    if error < best_error:\n                        best_error = error\n                        best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n                    elif error == best_error:\n                        if feature_index < best_stump['feature_index']:\n                            best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n                        elif threshold < best_stump['threshold']:\n                            best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n                        elif polarity == -1 and best_stump['polarity'] == 1:\n                            best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n        return (best_stump, best_error)\n\n    def update_weights(weights, errors, alpha, y_train, stump):\n        new_weights = weights * np.exp(-alpha * y_train * (2 * (X_train[:, stump['feature_index']] < stump['threshold']) - 1) * stump['polarity'])\n        return new_weights / np.sum(new_weights)\n\n    def stump_predict(stump, X):\n        return (2 * (X[:, stump['feature_index']] < stump['threshold']) - 1) * stump['polarity']\n    X_train = np.array(X_train)\n    y_train = 2 * np.array(y_train) - 1\n    X_test = np.array(X_test)\n    n_samples = X_train.shape[0]\n    weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    alphas = []\n    for _ in range(n_estimators):\n        (stump, error) = build_stump(X_train, y_train, weights)\n        if error == 0:\n            break\n        alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        weights = update_weights(weights, error, alpha, y_train, stump)\n        stumps.append(stump)\n        alphas.append(alpha)\n    predictions = np.zeros(len(X_test))\n    for (alpha, stump) in zip(alphas, stumps):\n        predictions += alpha * stump_predict(stump, X_test)\n    predictions = np.sign(predictions)\n    predictions[predictions == -1] = 0\n    return predictions.tolist()"}
{"task_id": 176, "completion_id": 8, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n\n    def decision_stump_error(data: np.ndarray, labels: np.array, weights: np.ndarray, feature_index: int, threshold: float, polarity: int) -> float:\n        predictions = np.where(data[:, feature_index] * polarity < threshold * polarity, 1, -1)\n        return np.sum(weights * (predictions != labels))\n\n    def best_decision_stump(data: np.ndarray, labels: np.array, weights: np.ndarray) -> tuple:\n        (best_error, best_threshold, best_polarity, best_feature_index) = (float('inf'), None, 1, 0)\n        for feature_index in range(data.shape[1]):\n            for polarity in [1, -1]:\n                for threshold in np.unique(data[:, feature_index]):\n                    error = decision_stump_error(data, labels, weights, feature_index, threshold, polarity)\n                    if error < best_error:\n                        (best_error, best_threshold, best_polarity, best_feature_index) = (error, threshold, polarity, feature_index)\n        return (best_feature_index, best_threshold, best_polarity, best_error)\n\n    def predict(data: np.ndarray, learners: list[tuple], alphas: list[float]) -> np.ndarray:\n        results = []\n        for x in data:\n            stump_votes = 0\n            for ((feature_index, threshold, polarity), alpha) in zip(learners, alphas):\n                prediction = 1 if x[feature_index] * polarity < threshold * polarity else -1\n                stump_votes += alpha * prediction\n            results.append(1 if stump_votes >= 0 else 0)\n        return np.array(results)\n    (n_samples, n_features) = (len(X_train), len(X_train[0]))\n    weights = np.ones(n_samples) / n_samples\n    learners = []\n    alphas = []\n    (X_train, y_train) = (np.array(X_train), np.array(y_train))\n    y_train_b = np.where(y_train == 0, -1, 1)\n    for _ in range(n_estimators):\n        (best_feature_index, best_threshold, best_polarity, best_error) = best_decision_stump(X_train, y_train_b, weights)\n        if best_error == 0:\n            break\n        better_than_expected = best_error <= 0.5\n        alpha = 0.5 * np.log((1 - best_error) / (best_error + 1e-10) if better_than_expected else 1)\n        learners.append((best_feature_index, best_threshold, best_polarity))\n        alphas.append(alpha)\n        predictions = np.where(X_train[:, best_feature_index] * best_polarity < best_threshold * best_polarity, 1, -1)\n        error = 1 - better_than_expected\n        adjustment = error / (1 - error)\n        weights *= np.where(predictions == y_train_b, adjustment, 1 / adjustment)\n        weights /= np.sum(weights)\n    return predict(np.array(X_test), learners, alphas).tolist()\nX_train = [[-1, -1], [-2, -1], [1, 1], [2, 1]]\ny_train = [0, 0, 1, 1]"}
{"task_id": 176, "completion_id": 9, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    y_train[y_train == 0] = -1\n    X_test = np.array(X_test)\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    estimators = []\n    estimator_weights = []\n    for t in range(n_estimators):\n        min_error = float('inf')\n        best_stump = None\n        for feature_index in range(n_features):\n            feature_values = X_train[:, feature_index]\n            thresholds = np.unique(feature_values)\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    prediction = polarity * (feature_values < threshold)\n                    error = np.sum(sample_weights[prediction * y_train < 0])\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n                    if error == min_error and polarity == 1:\n                        best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n        if min_error == 0:\n            break\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        prediction = best_stump['polarity'] * (X_train[:, best_stump['feature_index']] < best_stump['threshold'])\n        sample_weights *= np.exp(-alpha * y_train * prediction)\n        sample_weights /= np.sum(sample_weights)\n        estimators.append(best_stump)\n        estimator_weights.append(alpha)\n    final_predictions = np.zeros(X_test.shape[0])\n    for (estimator, weight) in zip(estimators, estimator_weights):\n        prediction = weight * estimator['polarity'] * (X_test[:, estimator['feature_index']] < estimator['threshold'])\n        final_predictions += prediction\n    final_labels = np.where(final_predictions >= 0, 1, 0)\n    return final_labels.tolist()"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = np.zeros((num_particles, n_dims))\n    personal_best_positions = positions.copy()\n    personal_best_values = np.apply_along_axis(np.sum, 1, np.square(positions))\n    global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n    global_best_value = np.min(personal_best_values)\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    for _ in range(num_iterations):\n        r1 = rng.uniform(0, 1, (num_particles, n_dims))\n        r2 = rng.uniform(0, 1, (num_particles, n_dims))\n        velocities = w * velocities + c1 * r1 * (personal_best_positions - positions) + c2 * r2 * (global_best_position - positions)\n        positions = np.clip(positions + velocities, -1, 1)\n        current_values = np.apply_along_axis(np.sum, 1, np.square(positions))\n        better_positions = current_values < personal_best_values\n        personal_best_positions[better_positions] = positions[better_positions]\n        personal_best_values[better_positions] = current_values[better_positions]\n        current_global_best_position = positions[np.argmin(personal_best_values)]\n        current_global_best_value = np.min(personal_best_values)\n        if current_global_best_value < global_best_value:\n            global_best_position = current_global_best_position\n            global_best_value = current_global_best_value\n    return round(global_best_value, 4)"}
{"task_id": 178, "completion_id": 1, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    np.random.seed(seed)\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = np.zeros((num_particles, n_dims))\n    personal_best = positions.copy()\n    personal_best_scores = np.apply_along_axis(lambda x: np.sum(x ** 2), 1, positions)\n    global_best = positions[np.argmin(personal_best_scores)].copy()\n    global_best_value = np.min(personal_best_scores)\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    for _ in range(num_iterations):\n        (r1, r2) = rng.uniform(0, 1, 2)\n        velocities = w * velocities + c1 * r1 * (personal_best - positions) + c2 * r2 * (global_best - positions)\n        positions = np.clip(positions + velocities, -1, 1)\n        current_scores = np.apply_along_axis(lambda x: np.sum(x ** 2), 1, positions)\n        updated = np.where(current_scores < personal_best_scores)\n        personal_best[updated] = positions[updated]\n        personal_best_scores[updated] = current_scores[updated]\n        maybe_new_global_best = positions[np.argmin(current_scores)]\n        maybe_new_global_best_value = np.min(current_scores)\n        if maybe_new_global_best_value < global_best_value:\n            global_best = maybe_new_global_best\n            global_best_value = maybe_new_global_best_value\n    return round(global_best_value, 4)"}
{"task_id": 178, "completion_id": 2, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    lower_bound = -1\n    upper_bound = 1\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = np.zeros((num_particles, n_dims))\n    personal_best_positions = positions.copy()\n    personal_best_values = np.array([sphere(p) for p in positions])\n    global_best_position = positions[np.argmin(personal_best_values)]\n    global_best_value = min(personal_best_values)\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            velocities[i] = w * velocities[i] + c1 * rng.random(n_dims) * (personal_best_positions[i] - positions[i]) + c2 * rng.random(n_dims) * (global_best_position - positions[i])\n            positions[i] = np.clip(positions[i] + velocities[i], lower_bound, upper_bound)\n            value = sphere(positions[i])\n            if value < personal_best_values[i]:\n                personal_best_positions[i] = positions[i]\n                personal_best_values[i] = value\n                if value < global_best_value:\n                    global_best_position = positions[i]\n                    global_best_value = value\n    return round(global_best_value, 4)\ndef sphere(x):\n    \"\"\"Sphere function minimized by the PSO algorithm.\"\"\"\n    return np.sum(x ** 2)"}
{"task_id": 178, "completion_id": 3, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1\n    upper_bound = 1\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = rng.uniform(-0.1, 0.1, (num_particles, n_dims))\n    pbest = positions.copy()\n    gbest = positions[0]\n    pbest_scores = np.array([sum((x ** 2 for x in pos)) for pos in positions])\n    gbest_score = pbest_scores.min()\n    for _ in range(num_iterations):\n        (r1, r2) = rng.random((2, num_particles, n_dims))\n        velocities = w * velocities + c1 * r1 * (pbest - positions) + c2 * r2 * (gbest - positions)\n        positions = np.clip(positions + velocities, lower_bound, upper_bound)\n        current_scores = np.array([sum((x ** 2 for x in pos)) for pos in positions])\n        better_than_pbest = current_scores < pbest_scores\n        pbest[better_than_pbest] = positions[better_than_pbest]\n        pbest_scores[better_than_pbest] = current_scores[better_than_pbest]\n        if current_scores.min() < gbest_score:\n            gbest = positions[current_scores.argmin()]\n            gbest_score = current_scores.min()\n    return round(gbest_score, 4)"}
{"task_id": 178, "completion_id": 4, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = np.zeros((num_particles, n_dims))\n    p_bests = positions.copy()\n    g_best = positions[np.argmin([np.sum(p * p) for p in positions])]\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            r1 = rng.uniform(0, 1, n_dims)\n            r2 = rng.uniform(0, 1, n_dims)\n            velocities[i] = w * velocities[i] + c1 * r1 * (p_bests[i] - positions[i]) + c2 * r2 * (g_best - positions[i])\n            positions[i] = np.clip(positions[i] + velocities[i], -1, 1)\n            sphere_value = np.sum(positions[i] ** 2)\n            if sphere_value < np.sum(p_bests[i] ** 2):\n                p_bests[i] = positions[i]\n                if sphere_value < np.sum(g_best ** 2):\n                    g_best = positions[i]\n    best_value = np.round(np.sum(g_best ** 2), decimals=4)\n    return best_value"}
{"task_id": 178, "completion_id": 5, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    pos = rng.uniform(-1, 1, (num_particles, n_dims))\n    vel = np.zeros((num_particles, n_dims))\n    pbest = pos\n    pbest_obj = np.sum(pos ** 2, axis=1)\n    gbest = pbest_obj.argmin()\n    gbest_obj = pbest_obj[gbest]\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    for _ in range(num_iterations):\n        (r1, r2) = rng.random((2, num_particles, n_dims))\n        vel = w * vel + c1 * r1 * (pbest - pos) + c2 * r2 * (pbest[gbest] - pos)\n        pos = np.clip(pos + vel, -1, 1)\n        obj = np.sum(pos ** 2, axis=1)\n        pbest = np.where(obj.reshape(-1, 1) < pbest_obj.reshape(-1, 1), pos, pbest)\n        pbest_obj = np.where(obj < pbest_obj, obj, pbest_obj)\n        gbest = pbest_obj.argmin()\n        gbest_obj = pbest_obj[gbest]\n    return round(gbest_obj, 4)"}
{"task_id": 178, "completion_id": 6, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = np.zeros_like(positions)\n    pbest_positions = positions.copy()\n    pbest_values = np.array([np.sum(pos ** 2) for pos in positions])\n    gbest_index = np.argmin(pbest_values)\n    gbest_position = pbest_positions[gbest_index]\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    for _ in range(num_iterations):\n        (r1, r2) = rng.uniform(0, 1, 2)\n        velocities = w * velocities + c1 * r1 * (pbest_positions - positions) + c2 * r2 * (gbest_position - positions)\n        positions = np.clip(positions + velocities, -1, 1)\n        current_values = np.array([np.sum(pos ** 2) for pos in positions])\n        mask = current_values < pbest_values\n        pbest_positions[mask] = positions[mask]\n        pbest_values[mask] = current_values[mask]\n        current_gbest_index = np.argmin(pbest_values)\n        if pbest_values[current_gbest_index] < pbest_values[gbest_index]:\n            gbest_index = current_gbest_index\n            gbest_position = pbest_positions[gbest_index]\n    return round(np.sum(gbest_position ** 2), 4)"}
{"task_id": 178, "completion_id": 7, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(-1.0, 1.0, size=(num_particles, n_dims))\n    velocities = np.zeros_like(positions)\n    pbest_positions = positions.copy()\n    gbest_position = pbest_positions[np.argmin([sphere(p) for p in positions])]\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1.0\n    upper_bound = 1.0\n    for _ in range(num_iterations):\n        (r1, r2) = (rng.uniform(size=positions.shape), rng.uniform(size=positions.shape))\n        velocities = w * velocities + c1 * r1 * (pbest_positions - positions) + c2 * r2 * (gbest_position - positions)\n        positions += velocities\n        positions = np.clip(positions, lower_bound, upper_bound)\n        for (i, pos) in enumerate(positions):\n            if sphere(pos) < sphere(pbest_positions[i]):\n                pbest_positions[i] = pos\n        current_best_pos = pbest_positions[np.argmin([sphere(p) for p in pbest_positions])]\n        if sphere(current_best_pos) < sphere(gbest_position):\n            gbest_position = current_best_pos\n    return round(sphere(gbest_position), 4)\ndef sphere(x):\n    \"\"\"Sphere function to be minimized.\"\"\"\n    return np.sum(x ** 2)"}
{"task_id": 178, "completion_id": 8, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = np.zeros((num_particles, n_dims))\n    p_best_positions = positions.copy()\n    p_best_values = np.apply_along_axis(lambda x: np.sum(x ** 2), 1, positions)\n    g_best_index = np.argmin(p_best_values)\n    g_best_position = p_best_positions[g_best_index]\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    for _ in range(num_iterations):\n        r1 = rng.uniform(0, 1, (num_particles, n_dims))\n        r2 = rng.uniform(0, 1, (num_particles, n_dims))\n        velocities = w * velocities + c1 * r1 * (p_best_positions - positions) + c2 * r2 * (g_best_position - positions)\n        positions = np.clip(positions + velocities, -1, 1)\n        current_values = np.apply_along_axis(lambda x: np.sum(x ** 2), 1, positions)\n        improved = current_values < p_best_values\n        p_best_positions[improved] = positions[improved]\n        p_best_values[improved] = current_values[improved]\n        new_best_index = np.argmin(p_best_values)\n        if p_best_values[new_best_index] < p_best_values[g_best_index]:\n            g_best_index = new_best_index\n            g_best_position = p_best_positions[g_best_index]\n    return round(np.sum(g_best_position ** 2), 4)"}
{"task_id": 178, "completion_id": 9, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1\n    upper_bound = 1\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = np.zeros((num_particles, n_dims))\n    personal_best_positions = positions.copy()\n    personal_best_values = [np.sum(x ** 2) for x in positions]\n    global_best_value = min(personal_best_values)\n    global_best_position = positions[np.argmin(personal_best_values)]\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            (r1, r2) = rng.random(2)\n            velocities[i] = w * velocities[i] + c1 * r1 * (personal_best_positions[i] - positions[i]) + c2 * r2 * (global_best_position - positions[i])\n            positions[i] = np.clip(positions[i] + velocities[i], lower_bound, upper_bound)\n            current_value = np.sum(positions[i] ** 2)\n            if current_value < personal_best_values[i]:\n                personal_best_positions[i] = positions[i]\n                personal_best_values[i] = current_value\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = positions[i]\n    return round(global_best_value, 4)"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculates the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    if k <= 0 or k > len(X_train):\n        k = len(X_train)\n    predictions = []\n    for test_point in X_test:\n        distances = [(euclidean_distance(test_point, x_train), y) for (x_train, y) in zip(X_train, y_train)]\n        k_nearest = sorted(distances, key=lambda x: x[0])[:k]\n        if task == 'classification':\n            labels = [label for (dist, label) in k_nearest]\n            most_common = Counter(labels).most_common()\n            predictions.append(min(most_common, key=lambda x: (-x[1], x[0]))[0])\n        elif task == 'regression':\n            values = [label for (dist, label) in k_nearest]\n            predictions.append(round(sum(values) / k, 4))\n    return predictions\nX_train = [[1, 2], [2, 3], [3, 1], [1, 1]]\ny_train = [0, 0, 1, 1]\nX_test = [[1.5, 2.5], [2.5, 2.5]]\nk = 3"}
{"task_id": 180, "completion_id": 1, "solution": "import numpy as np\nfrom collections import Counter\ndef euclidean_distance(x1, x2):\n    \"\"\"Compute the Euclidean distance between two vectors x1 and x2.\"\"\"\n    return np.sqrt(np.sum((np.array(x1) - np.array(x2)) ** 2))\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    predictions = []\n    n_train_samples = len(X_train)\n    k = min(max(k, 1), n_train_samples)\n    for test_sample in X_test:\n        distances = [euclidean_distance(test_sample, x) for x in X_train]\n        sorted_indices = np.argsort(distances)\n        k_nearest_labels = [y_train[i] for i in sorted_indices[:k]]\n        if task == 'classification':\n            most_common_label = Counter(k_nearest_labels).most_common(1)[0][0]\n            predictions.append(most_common_label)\n        elif task == 'regression':\n            mean_label = round(np.mean(k_nearest_labels), 4)\n            predictions.append(mean_label)\n        else:\n            raise ValueError(\"task must be 'classification' or 'regression'\")\n    return predictions"}
{"task_id": 180, "completion_id": 2, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    if k <= 0 or k > len(y_train):\n        k = len(y_train)\n\n    def compute_euclidean_distance(x1, x2):\n        \"\"\"Compute Euclidean distance between two vectors x1 and x2.\"\"\"\n        return np.sqrt(sum([(a - b) ** 2 for (a, b) in zip(x1, x2)]))\n    predictions = []\n    for x in X_test:\n        distances = [(compute_euclidean_distance(x, x_train), y) for (x_train, y) in zip(X_train, y_train)]\n        distances.sort(key=lambda x: x[0])\n        nearest_k = distances[:k]\n        if task == 'classification':\n            prediction = Counter([label for (_, label) in nearest_k]).most_common(1)[0][0]\n            predictions.append(prediction)\n        elif task == 'regression':\n            prediction = round(np.mean([label for (_, label) in nearest_k]), 4)\n            predictions.append(prediction)\n        else:\n            raise ValueError('Unrecognized task type')\n    return predictions"}
{"task_id": 180, "completion_id": 3, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n    \n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n    \n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    if k == 0 or k > len(X_train):\n        k = len(X_train)\n    predictions = []\n    for x in X_test:\n        distances = []\n        for (i, x_train) in enumerate(X_train):\n            dist = np.linalg.norm(np.array(x) - np.array(x_train))\n            distances.append((dist, y_train[i]))\n        distances.sort(key=lambda x: x[0])\n        top_k = distances[:k]\n        if task == 'classification':\n            labels = [label for (dist, label) in top_k]\n            prediction = Counter(labels).most_common(1)[0][0]\n        else:\n            values = [label for (dist, label) in top_k]\n            prediction = np.mean(values).round(4)\n        predictions.append(prediction)\n    return predictions\nX_train = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [4.0, 5.0], [5.0, 6.0]]\nX_test = [[2.5, 3.5], [4.5, 5.5]]"}
{"task_id": 180, "completion_id": 4, "solution": "import numpy as np\nfrom typing import List\nfrom collections import Counter\ndef knn_predict(X_train: List[List[float]], y_train: List, X_test: List[List[float]], k: int=5, task: str='classification') -> List:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : List[List[float]]\n        Training feature vectors.\n    y_train : List\n        Targets associated with *X_train*.\n    X_test : List[List[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    List\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n\n    def euclidean_distance(sample1, sample2):\n        return np.sqrt(np.sum((np.array(sample1) - np.array(sample2)) ** 2))\n\n    def predict_instance(instance):\n        distances = [euclidean_distance(instance, x) for x in X_train]\n        sorted_indices = np.argsort(distances)[:min(k, len(distances))]\n        if task == 'classification':\n            labels = [y_train[i] for i in sorted_indices]\n            label_counts = Counter(labels)\n            return min(label_counts.most_common(), key=lambda x: (-x[1], x[0]))[0]\n        else:\n            values = [y_train[i] for i in sorted_indices]\n            return round(np.mean(values), 4)\n    if k == 0 or k > len(X_train):\n        k = len(X_train)\n    return [predict_instance(x) for x in X_test]"}
{"task_id": 180, "completion_id": 5, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    n_train = len(X_train)\n    if k <= 0 or k > n_train:\n        k = n_train\n    predictions = []\n    for test_sample in X_test:\n        distances = [(np.linalg.norm(np.array(test_sample) - np.array(train_sample)), y_train[i]) for (i, train_sample) in enumerate(X_train)]\n        k_nearest = sorted(distances, key=lambda x: x[0])[:k]\n        if task == 'classification':\n            labels = [label for (_, label) in k_nearest]\n            prediction = Counter(labels).most_common(1)[0][0]\n        else:\n            values = [value for (_, value) in k_nearest]\n            prediction = round(sum(values) / k, 4)\n        predictions.append(prediction)\n    return predictions\nX_train = [[1.0, 1.1], [2.1, 2.2], [1.1, 1.2], [4.0, 4.1], [2.3, 2.4], [2.5, 2.6]]\nX_test = [[1.5, 1.5], [4.5, 4.5]]"}
{"task_id": 180, "completion_id": 6, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n    \n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n    \n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((np.array(x1) - np.array(x2)) ** 2))\n    predictions = []\n    for test_sample in X_test:\n        distances = [euclidean_distance(test_sample, train_sample) for train_sample in X_train]\n        k_indices = np.argsort(distances)\n        effective_k = min(k if k > 0 else len(X_train), len(X_train))\n        knearest = [y_train[i] for i in k_indices[:effective_k]]\n        if task == 'classification':\n            most_common = Counter(knearest).most_common(1)\n            predictions.append(most_common[0][0])\n        elif task == 'regression':\n            predictions.append(round(sum(knearest) / len(knearest), 4))\n    return predictions"}
{"task_id": 180, "completion_id": 7, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbors to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n\n    def euclidean_distance(vec1, vec2):\n        return np.sqrt(np.sum((vec1 - vec2) ** 2))\n\n    def predict_instance(train_set, train_labels, test_instance, k):\n        distances = [(euclidean_distance(test_instance, train_instance), index) for (index, train_instance) in enumerate(train_set)]\n        distances.sort()\n        k_indices = [index for (distance, index) in distances[:k]]\n        if task == 'classification':\n            k_nearest_labels = [train_labels[i] for i in k_indices]\n            most_common = Counter(k_nearest_labels).most_common()\n            highest_vote = max(most_common, key=lambda x: (x[1], -x[0][0] if isinstance(x[0], str) else -x[0]))[0]\n            return highest_vote\n        else:\n            k_nearest_values = [train_labels[i] for i in k_indices]\n            avg = np.mean(k_nearest_values)\n            return round(avg, 4)\n    if k == 0 or k >= len(X_train):\n        k = len(X_train)\n    predictions = [predict_instance(X_train, y_train, test_instance, k) for test_instance in X_test]\n    return predictions\nX_train = [[1, 2], [2, 3], [3, 4], [5, 6], [6, 7]]\ny_train = [0, 0, 1, 1, 1]\nX_test = [[1.5, 2.5], [3.5, 4.5], [7, 8]]"}
{"task_id": 180, "completion_id": 8, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"\n    k-Nearest Neighbours prediction (classification or regression).\n    \n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    num_train = len(X_train)\n    if k == 0 or k > num_train:\n        k = num_train\n    predictions = []\n    for test_sample in X_test:\n        distances = []\n        for (i, train_sample) in enumerate(X_train):\n            dist = np.linalg.norm(np.array(test_sample) - np.array(train_sample))\n            distances.append((dist, i))\n        distances.sort(key=lambda tup: tup[0])\n        k_nearest_neighbors = [y_train[tup[1]] for tup in distances[:k]]\n        if task == 'classification':\n            prediction = Counter(k_nearest_neighbors).most_common(1)[0][0]\n        elif task == 'regression':\n            prediction = round(np.mean(k_nearest_neighbors), 4)\n        else:\n            raise ValueError(\"Task must be either 'classification' or 'regression'.\")\n        predictions.append(prediction)\n    return predictions\nX_train = [[1, 1], [1, -1], [-1, 1], [-1, -1]]\ny_train = [0, 0, 1, 1]\nX_test = [[0, 0], [-1, 0]]"}
{"task_id": 180, "completion_id": 9, "solution": "import numpy as np\nfrom collections import Counter\ndef euclidean_distance(a, b):\n    \"\"\"Calculate the Euclidean distance between two vectors.\"\"\"\n    return np.sqrt(np.sum((np.array(a) - np.array(b)) ** 2))\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    predictions = []\n    n_samples = len(X_train)\n    if k == 0 or k > n_samples:\n        k = n_samples\n    for x in X_test:\n        distances = [(euclidean_distance(x, x_train), y) for (x_train, y) in zip(X_train, y_train)]\n        k_nearest_neighbours = [x[1] for x in sorted(distances)[:k]]\n        if task == 'classification':\n            prediction = Counter(k_nearest_neighbours).most_common(1)[0][0]\n        else:\n            prediction = sum(k_nearest_neighbours) / len(k_nearest_neighbours)\n            prediction = round(prediction, 4)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n\n    def gini(data):\n        counts = np.bincount(data)\n        probabilities = counts / len(data)\n        return 1 - np.sum(probabilities ** 2)\n\n    def split(data, labels, feature_index, threshold):\n        left_mask = data[:, feature_index] <= threshold\n        right_mask = ~left_mask\n        return (data[left_mask], labels[left_mask], data[right_mask], labels[right_mask])\n\n    def find_best_split(data, labels):\n        best_feature = None\n        best_threshold = None\n        best_gini_gain = 0\n        gini_parent = gini(labels)\n        for feature_index in range(data.shape[1]):\n            sorted_indices = np.argsort(data[:, feature_index])\n            for i in range(len(data) - 1):\n                if data[sorted_indices[i], feature_index] != data[sorted_indices[i + 1], feature_index]:\n                    threshold = (data[sorted_indices[i], feature_index] + data[sorted_indices[i + 1], feature_index]) / 2\n                    (left_data, left_labels, right_data, right_labels) = split(data, labels, feature_index, threshold)\n                    if len(left_labels) == 0 or len(right_labels) == 0:\n                        continue\n                    gini_left = gini(left_labels)\n                    gini_right = gini(right_labels)\n                    gini_children = len(left_labels) / len(labels) * gini_left + len(right_labels) / len(labels) * gini_right\n                    gini_gain = gini_parent - gini_children\n                    if gini_gain > best_gini_gain:\n                        best_feature = feature_index\n                        best_threshold = threshold\n                        best_gini_gain = gini_gain\n        return (best_feature, best_threshold, best_gini_gain)\n\n    def build_tree(data, labels, depth=0):\n        if len(np.unique(labels)) == 1 or (max_depth is not None and depth >= max_depth):\n            return {'label': np.argmax(np.bincount(labels))}\n        (feature, threshold, gain) = find_best_split(data, labels)\n        if gain <= 0:\n            return {'label': np.argmax(np.bincount(labels))}\n        (left_data, left_labels, right_data, right_labels) = split(data, labels, feature, threshold)\n        left_subtree = build_tree(left_data, left_labels, depth + 1)\n        right_subtree = build_tree(right_data, right_labels, depth + 1)\n        return {'feature': feature, 'threshold': threshold, 'left': left_subtree, 'right': right_subtree}\n\n    def predict_one(tree, x):\n        if 'label' in tree:\n            return tree['label']\n        if x[tree['feature']] <= tree['threshold']:\n            return predict_one(tree['left'], x)\n        else:\n            return predict_one(tree['right'], x)\n    tree = build_tree(X_train, y_train)\n    predictions = [predict_one(tree, x) for x in X_test]\n    return predictions"}
{"task_id": 184, "completion_id": 1, "solution": "import numpy as np\ndef gini_impurity(labels: np.ndarray) -> float:\n    \"\"\"Calculate the Gini impurity for a set of labels.\"\"\"\n    (unique_labels, counts) = np.unique(labels, return_counts=True)\n    proportions = counts / np.sum(counts)\n    return 1 - np.sum(proportions ** 2)\ndef find_best_split(X: np.ndarray, y: np.ndarray) -> (int, float, float):\n    \"\"\"Find the best split for the given data (X, y) using Gini impurity.\"\"\"\n    best_gini_gain = -np.inf\n    best_feature_idx = None\n    best_threshold = None\n    unique_features = [np.unique(X[:, f]) for f in range(X.shape[1])]\n    for (feature_idx, unique_values) in enumerate(unique_features):\n        sorted_values = np.unique(unique_values)\n        if len(sorted_values) <= 1:\n            continue\n        for i in range(len(sorted_values) - 1):\n            threshold = (sorted_values[i] + sorted_values[i + 1]) / 2\n            left_labels = y[X[:, feature_idx] <= threshold]\n            right_labels = y[X[:, feature_idx] > threshold]\n            gini_left = gini_impurity(left_labels)\n            gini_right = gini_impurity(right_labels)\n            gini_gain = gini_impurity(y) - (len(left_labels) * gini_left + len(right_labels) * gini_right) / len(y)\n            if gini_gain > best_gini_gain:\n                best_gini_gain = gini_gain\n                best_feature_idx = feature_idx\n                best_threshold = threshold\n    return (best_feature_idx, best_threshold, best_gini_gain)\ndef majority_vote(labels: np.ndarray) -> int:\n    \"\"\"Return the most common label in the given array.\"\"\"\n    (unique_labels, counts) = np.unique(labels, return_counts=True)\n    return unique_labels[np.argmax(counts)]\nclass Node:\n    \"\"\"Tree Node class.\"\"\"\n\n    def __init__(self, depth, feature_idx=None, threshold=None, gini=None, label=None):\n        self.feature_idx = feature_idx\n        self.threshold = threshold\n        self.gini = gini\n        self.label = label\n        self.left = None\n        self.right = None\n        self.depth = depth\ndef build_tree(X: np.ndarray, y: np.ndarray, depth: int, max_depth: int | None=None) -> Node:\n    \"\"\"Build a decision tree recursively.\"\"\"\n    node = Node(depth=depth)\n    if len(np.unique(y)) == 1:\n        node.label = y[0]\n        return node\n    if max_depth is not None and depth >= max_depth or gini_impurity(y) == 0:\n        node.label = majority_vote(y)\n        return node\n    (feature_idx, threshold, gini_gain) = find_best_split(X, y)\n    if gini_gain <= 0:\n        node.label = majority_vote(y)\n        return node\n    else:\n        node.feature_idx = feature_idx\n        node.threshold = threshold\n    left_idx = X[:, feature_idx] <= threshold\n    right_idx = ~left_idx\n    if np.sum(left_idx) == 0 or np.sum(right_idx) == 0:\n        node.label = majority_vote(y)\n        return node\n    node.left = build_tree(X[left_idx], y[left_idx], depth + 1, max_depth)\n    node.right = build_tree(X[right_idx], y[right_idx], depth + 1, max_depth)\n    return node\ndef predict_single(tree: Node, x: np.ndarray) -> int:\n    \"\"\"Traverse the tree and predict the class of the single sample x.\"\"\"\n    if tree.left is None and tree.right is None:\n        return tree.label\n    if x[tree.feature_idx] <= tree.threshold:\n        return predict_single(tree.left, x)\n    return predict_single(tree.right, x)\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    tree = build_tree(X_train, y_train, 0, max_depth)\n    return [predict_single(tree, x) for x in X_test]\nX_train = np.array([[0, 0], [1, 1]])\ny_train = np.array([0, 1])\nX_test = np.array([[2, 2], [3, 3]])"}
{"task_id": 184, "completion_id": 2, "solution": "import numpy as np\ndef gini_impurity(y):\n    \"\"\"Calculate the Gini impurity for a set of labels.\"\"\"\n    (unique, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    return 1 - np.sum(probabilities ** 2)\ndef find_best_split(X, y):\n    \"\"\"Find the feature and threshold value that maximizes the Gini gain.\"\"\"\n    best_gini_gain = 0\n    best_feature_idx = None\n    best_threshold = None\n    parent_gini = gini_impurity(y)\n    for feature_idx in range(X.shape[1]):\n        sorted_indices = np.argsort(X[:, feature_idx])\n        sorted_X = X[sorted_indices, feature_idx]\n        sorted_y = y[sorted_indices]\n        threshold_candidates = (sorted_X[:-1] + sorted_X[1:]) / 2\n        threshold_candidates = np.unique(threshold_candidates)\n        for threshold in threshold_candidates:\n            left_indices = np.where(X[:, feature_idx] <= threshold)[0]\n            right_indices = np.where(X[:, feature_idx] > threshold)[0]\n            if len(left_indices) == 0 or len(right_indices) == 0:\n                continue\n            left_gini = gini_impurity(y[left_indices])\n            right_gini = gini_impurity(y[right_indices])\n            weighted_gini = (len(left_indices) * left_gini + len(right_indices) * right_gini) / len(y)\n            gini_gain = parent_gini - weighted_gini\n            if gini_gain > best_gini_gain:\n                best_gini_gain = gini_gain\n                best_feature_idx = feature_idx\n                best_threshold = threshold\n    if best_gini_gain == 0:\n        return (None, None, None)\n    return (best_feature_idx, best_threshold, best_gini_gain)\ndef majority_class(y):\n    \"\"\"Return the majority class among the labels.\"\"\"\n    (unique, counts) = np.unique(y, return_counts=True)\n    return unique[np.argmax(counts)]\ndef build_tree(X, y, max_depth=None, depth=0):\n    \"\"\"Recursively build the decision tree.\"\"\"\n    if len(np.unique(y)) == 1:\n        return {'label': y[0]}\n    elif max_depth is not None and depth >= max_depth:\n        return {'label': majority_class(y)}\n    else:\n        (feature_idx, threshold, gini_gain) = find_best_split(X, y)\n        if gini_gain == 0:\n            return {'label': majority_class(y)}\n        left_indices = np.where(X[:, feature_idx] <= threshold)[0]\n        right_indices = np.where(X[:, feature_idx] > threshold)[0]\n        left_tree = build_tree(X[left_indices], y[left_indices], max_depth, depth + 1)\n        right_tree = build_tree(X[right_indices], y[right_indices], max_depth, depth + 1)\n        return {'feature': feature_idx, 'threshold': threshold, 'left': left_tree, 'right': right_tree}\ndef predict_x(tree, x):\n    \"\"\"Predict the class label for a single input vector.\"\"\"\n    if 'label' in tree:\n        return tree['label']\n    elif x[tree['feature']] <= tree['threshold']:\n        return predict_x(tree['left'], x)\n    else:\n        return predict_x(tree['right'], x)\ndef decision_tree_predict(X_train, y_train, X_test, max_depth=None):\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    tree = build_tree(X_train, y_train, max_depth)\n    predictions = [predict_x(tree, x) for x in X_test]\n    return predictions"}
{"task_id": 184, "completion_id": 3, "solution": "import numpy as np\ndef gini_impurity(labels):\n    (_, counts) = np.unique(labels, return_counts=True)\n    probabilities = counts / counts.sum()\n    return 1 - np.sum(probabilities ** 2)\ndef find_best_split(X, y, max_depth):\n    best_gain = 0\n    best_feature = None\n    best_threshold = None\n    if max_depth == 0 or len(set(y)) == 1:\n        return (None, np.argmax(np.bincount(y)), None)\n    gini_parent = gini_impurity(y)\n    for feature_idx in range(X.shape[1]):\n        feature_values = X[:, feature_idx]\n        unique_values = np.unique(feature_values)\n        for i in range(len(unique_values) - 1):\n            mid_point = (unique_values[i] + unique_values[i + 1]) / 2\n            left_mask = feature_values <= mid_point\n            right_mask = ~left_mask\n            if np.any(left_mask) and np.any(right_mask):\n                (n_left, n_right) = (np.sum(left_mask), np.sum(right_mask))\n                gini_left = gini_impurity(y[left_mask])\n                gini_right = gini_impurity(y[right_mask])\n                gini_child = (n_left * gini_left + n_right * gini_right) / (n_left + n_right)\n                gini_gain = gini_parent - gini_child\n                if gini_gain > best_gain:\n                    best_gain = gini_gain\n                    best_feature = feature_idx\n                    best_threshold = mid_point\n    if best_gain == 0:\n        return (None, np.argmax(np.bincount(y)), None)\n    else:\n        return (best_feature, best_threshold, best_gain)\ndef build_tree(X, y, max_depth=None):\n    tree = {}\n    (tree['split_feature'], tree['split_threshold'], tree['gini_gain']) = find_best_split(X, y, max_depth)\n    if tree['split_feature'] is None:\n        tree['left_child'] = tree['right_child'] = None\n        tree['label'] = np.argmax(np.bincount(y))\n    else:\n        left_mask = X[:, tree['split_feature']] <= tree['split_threshold']\n        right_mask = ~left_mask\n        tree['left_child'] = build_tree(X[left_mask], y[left_mask], max_depth - 1 if max_depth is not None else None)\n        tree['right_child'] = build_tree(X[right_mask], y[right_mask], max_depth - 1 if max_depth is not None else None)\n    return tree\ndef predict_tree(tree, X):\n    predictions = []\n    for sample in X:\n        node = tree\n        while node['split_feature'] is not None:\n            if sample[node['split_feature']] <= node['split_threshold']:\n                node = node['left_child']\n            else:\n                node = node['right_child']\n        predictions.append(node['label'])\n    return predictions\ndef decision_tree_predict(X_train, y_train, X_test, max_depth=None):\n    tree = build_tree(X_train, y_train, max_depth)\n    return predict_tree(tree, X_test)"}
{"task_id": 184, "completion_id": 4, "solution": "import numpy as np\nclass DecisionTreeNode:\n\n    def __init__(self, feature=None, threshold=None, n_samples=None, values=None, majority_class=None):\n        self.feature = feature\n        self.threshold = threshold\n        self.n_samples = n_samples\n        self.values = values\n        self.left = None\n        self.right = None\n        self.majority_class = majority_class\ndef gini_impurity(values):\n    (_, counts) = np.unique(values, return_counts=True)\n    probabilities = counts / counts.sum()\n    return 1 - np.sum(probabilities ** 2)\ndef best_split(X, y, max_depth):\n    best_impurity = -1\n    (feature, threshold) = (None, None)\n    if max_depth is not None and max_depth == 0:\n        return (feature, threshold)\n    for feature_idx in range(X.shape[1]):\n        X_current = X[:, feature_idx]\n        unique_X_current = np.unique(X_current)\n        sorted_idx = np.argsort(unique_X_current)\n        for i in range(len(sorted_idx) - 1):\n            if unique_X_current[sorted_idx[i]] != unique_X_current[sorted_idx[i + 1]]:\n                mid_point = (unique_X_current[sorted_idx[i]] + unique_X_current[sorted_idx[i + 1]]) / 2\n                left_idx = X_current <= mid_point\n                right_idx = X_current > mid_point\n                n_left = np.sum(left_idx)\n                n_right = np.sum(right_idx)\n                gini_left = gini_impurity(y[left_idx])\n                gini_right = gini_impurity(y[right_idx])\n                weighted_gini = (n_left * gini_left + n_right * gini_right) / (n_left + n_right)\n                gini_gain = gini_impurity(y) - weighted_gini\n                if gini_gain > best_impurity:\n                    best_impurity = gini_gain\n                    (feature, threshold) = (feature_idx, mid_point)\n    return (feature, threshold)\ndef build_tree(X, y, criterion, max_depth=None, depth=0):\n    if len(np.unique(y)) == 1 or (max_depth is not None and max_depth == depth):\n        return DecisionTreeNode(values=y, majority_class=np.bincount(y).argmax())\n    (feature, threshold) = best_split(X, y, max_depth - depth if max_depth else None)\n    if feature is None:\n        return DecisionTreeNode(values=y, majority_class=np.bincount(y).argmax())\n    left_idx = X[:, feature] <= threshold\n    right_idx = X[:, feature] > threshold\n    node = DecisionTreeNode(feature=feature, threshold=threshold)\n    node.left = build_tree(X[left_idx], y[left_idx], criterion=gini_impurity, max_depth=max_depth, depth=depth + 1)\n    node.right = build_tree(X[right_idx], y[right_idx], criterion=gini_impurity, max_depth=max_depth, depth=depth + 1)\n    node.n_samples = y.shape[0]\n    return node\ndef predict_single_sample(node, X, y):\n    if node.left is None and node.right is None:\n        return node.majority_class\n    if X[node.feature] <= node.threshold:\n        return predict_single_sample(node.left, X, y)\n    return predict_single_sample(node.right, X, y)\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    root = build_tree(X_train, y_train, gini_impurity, max_depth=max_depth)\n    return [predict_single_sample(root, x, y_train) for x in X_test]"}
{"task_id": 184, "completion_id": 5, "solution": "import numpy as np\ndef gini_impurity(labels):\n    \"\"\"Calculate the Gini impurity for a list of labels.\"\"\"\n    (_, counts) = np.unique(labels, return_counts=True)\n    probabilities = counts / len(labels)\n    return 1 - np.sum(probabilities ** 2)\ndef best_split(X, y, max_depth):\n    \"\"\"Find the best split given the data and its labels.\"\"\"\n    if gini_impurity(y) == 0 or (max_depth is not None and max_depth == 0):\n        return (None, None, np.bincount(y).argmax())\n    (best_feature, best_threshold, best_gain) = (None, None, -1)\n    current_gini = gini_impurity(y)\n    n_features = X.shape[1]\n    for f in range(n_features):\n        thresholds = np.unique(X[:, f])\n        for i in range(len(thresholds) - 1):\n            if thresholds[i] == thresholds[i + 1]:\n                continue\n            threshold = (thresholds[i] + thresholds[i + 1]) / 2\n            left_indices = X[:, f] <= threshold\n            right_indices = X[:, f] > threshold\n            (left_y, right_y) = (y[left_indices], y[right_indices])\n            if len(left_y) == 0 or len(right_y) == 0:\n                continue\n            gain = current_gini - len(left_y) / len(y) * gini_impurity(left_y) - len(right_y) / len(y) * gini_impurity(right_y)\n            if gain > best_gain:\n                (best_gain, best_feature, best_threshold) = (gain, f, threshold)\n    return (best_feature, best_threshold, None if best_gain > 0 else np.bincount(y).argmax())\ndef build_tree(X, y, max_depth=None):\n    (feature, threshold, label) = best_split(X, y, max_depth)\n    if max_depth is not None:\n        max_depth -= 1\n    if label is not None:\n        return {'label': label}\n    lmask = X[:, feature] <= threshold\n    return {'feature': feature, 'threshold': threshold, 'left': build_tree(X[lmask], y[lmask], max_depth=max_depth), 'right': build_tree(X[~lmask], y[~lmask], max_depth=max_depth)}\ndef predict_one(row, tree):\n    \"\"\"Predict a single sample using the decision tree.\"\"\"\n    if 'label' in tree:\n        return tree['label']\n    (feature, threshold) = (tree['feature'], tree['threshold'])\n    if row[feature] <= threshold:\n        return predict_one(row, tree['left'])\n    else:\n        return predict_one(row, tree['right'])\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    tree = build_tree(X_train, y_train, max_depth)\n    predictions = [predict_one(row, tree) for row in X_test]\n    return predictions"}
{"task_id": 184, "completion_id": 6, "solution": "import numpy as np\ndef gini_impurity(labels):\n    \"\"\"Calculate the Gini impurity of a list of labels.\n    \n    Parameters:\n    -----------\n    labels : List[int]\n        The list of class labels.\n        \n    Returns:\n    --------\n    float\n        The Gini impurity of the labels.\n    \"\"\"\n    (unique_labels, counts) = np.unique(labels, return_counts=True)\n    probabilities = counts / len(labels)\n    return 1 - np.sum(probabilities ** 2)\ndef split_gini_gain(parent_gini, left_gini, right_gini, left_size, right_size):\n    \"\"\"Calculate the Gini gain after a split.\n    \n    Parameters:\n    -----------\n    parent_gini : float\n        Gini impurity of the parent node.\n    left_gini : float\n        Gini impurity of the left child.\n    right_gini : float\n        Gini impurity of the right child.\n    left_size : int\n        Number of samples in the left child.\n    right_size : int\n        Number of samples in the right child.\n        \n    Returns:\n    --------\n    float\n        The Gini gain.\n    \"\"\"\n    return parent_gini - left_gini * left_size / (left_size + right_size) - right_gini * right_size / (left_size + right_size)\ndef best_split(X, y):\n    \"\"\"Find the best split for the data, according to the Gini impurity gain.\n    \n    Parameters:\n    -----------\n    X : np.ndarray\n        Training feature matrix.\n    y : np.ndarray\n        Training class labels.\n    \n    Returns:\n    --------\n    tuple\n        The best feature index, the best threshold value, and the Gini gain.\n    \"\"\"\n    best_gain = 0\n    best_feature = 0\n    best_threshold = 0\n    parent_gini = gini_impurity(y)\n    (n_samples, n_features) = X.shape\n    for feature in range(n_features):\n        sort_indices = np.argsort(X[:, feature])\n        sorted_feature = X[sort_indices, feature]\n        sorted_y = y[sort_indices]\n        for index in range(1, n_samples):\n            if sorted_feature[index] != sorted_feature[index - 1]:\n                threshold = (sorted_feature[index] + sorted_feature[index - 1]) / 2\n                left_indices = X[:, feature] < threshold\n                right_indices = X[:, feature] >= threshold\n                left_gini = gini_impurity(y[left_indices])\n                right_gini = gini_impurity(y[right_indices])\n                left_size = np.sum(left_indices)\n                right_size = np.sum(right_indices)\n                gain = split_gini_gain(parent_gini, left_gini, right_gini, left_size, right_size)\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = feature\n                    best_threshold = threshold\n    return (best_feature, best_threshold, best_gain)\ndef build_tree(X, y, depth, max_depth):\n    \"\"\"Recursively builds a decision tree.\n    \n    Parameters:\n    -----------\n    X : np.ndarray\n        Training feature matrix.\n    y : np.ndarray\n        Training class labels.\n    depth : int\n        The current depth of the recursion.\n    max_depth : int | None\n        Maximum depth of the tree.\n    \n    Returns:\n    --------\n    dict\n        The decision tree node (with recursive children).\n    \"\"\"\n    if len(np.unique(y)) == 1:\n        return {'label': y[0]}\n    if max_depth is not None and depth >= max_depth:\n        return {'label': np.argmax(np.bincount(y))}\n    (feature, threshold, gain) = best_split(X, y)\n    if gain == 0:\n        return {'label': np.argmax(np.bincount(y))}\n    left_indices = X[:, feature] < threshold\n    right_indices = X[:, feature] >= threshold\n    left_node = build_tree(X[left_indices], y[left_indices], depth + 1, max_depth)\n    right_node = build_tree(X[right_indices], y[right_indices], depth + 1, max_depth)\n    return {'feature': feature, 'threshold': threshold, 'left': left_node, 'right': right_node}\ndef traverse_tree(x, node):\n    \"\"\"Traverses a decision tree node for a given data point.\n    \n    Parameters:\n    -----------\n    x : np.ndarray\n        A single feature vector.\n    node : dict\n        The decision tree node.\n        \n    Returns:\n    --------\n    int\n        The class label.\n    \"\"\"\n    if 'label' in node:\n        return node['label']\n    if x[node['feature']] < node['threshold']:\n        return traverse_tree(x, node['left'])\n    else:\n        return traverse_tree(x, node['right'])\ndef decision_tree_predict(X_train, y_train, X_test, max_depth=None):\n    \"\"\"Builds a CART decision tree and predicts labels for unseen data.\n    \n    Parameters:\n    -----------\n    X_train : np.ndarray\n        Training feature matrix.\n    y_train : np.ndarray\n        Training class labels.\n    X_test : np.ndarray\n        Test feature matrix.\n    max_depth : int | None, optional\n        Maximum depth of the tree.\n    \n    Returns:\n    --------\n    list[int]\n        List of predicted labels for the test set.\n    \"\"\"\n    tree = build_tree(X_train, y_train, 0, max_depth)\n    predictions = [traverse_tree(x, tree) for x in X_test]\n    return predictions"}
{"task_id": 184, "completion_id": 7, "solution": "import numpy as np\ndef gini_impurity(labels):\n    \"\"\"Compute the Gini impurity for a set of labels.\"\"\"\n    if len(labels) == 0:\n        return 0\n    (_, counts) = np.unique(labels, return_counts=True)\n    probabilities = counts / len(labels)\n    return 1 - np.sum(probabilities ** 2)\ndef find_best_split(X, y):\n    \"\"\"Find the best split by evaluating all features and midpoints.\"\"\"\n    best_gini_gain = 0\n    best_split = (None, None)\n    (n_samples, n_features) = X.shape\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        sorted_indices = np.argsort(feature_values)\n        sorted_values = feature_values[sorted_indices]\n        sorted_y = y[sorted_indices]\n        for i in range(1, n_samples):\n            if sorted_values[i] != sorted_values[i - 1]:\n                threshold = (sorted_values[i] + sorted_values[i - 1]) / 2\n                left_labels = sorted_y[:i]\n                right_labels = sorted_y[i:]\n                gini_parent = gini_impurity(sorted_y)\n                gini_left = gini_impurity(left_labels)\n                gini_right = gini_impurity(right_labels)\n                gini_gain = gini_parent - (len(left_labels) * gini_left + len(right_labels) * gini_right) / n_samples\n                if gini_gain > best_gini_gain:\n                    best_gini_gain = gini_gain\n                    best_split = (feature_index, threshold)\n    return best_split\ndef build_tree(X, y, depth=0, max_depth=None):\n    \"\"\"Recursively build the tree using Gini impurity and recursion level.\"\"\"\n    if len(np.unique(y)) == 1:\n        return {'label': y[0]}\n    if max_depth is not None and depth >= max_depth:\n        return {'label': np.bincount(y).argmax()}\n    if len(X) == 0:\n        return {'label': np.bincount(y).argmax()}\n    (feature_index, threshold) = find_best_split(X, y)\n    if feature_index is None or threshold is None:\n        return {'label': np.bincount(y).argmax()}\n    left_indices = X[:, feature_index] <= threshold\n    (X_left, y_left) = (X[left_indices], y[left_indices])\n    (X_right, y_right) = (X[~left_indices], y[~left_indices])\n    left_subtree = build_tree(X_left, y_left, depth + 1, max_depth)\n    right_subtree = build_tree(X_right, y_right, depth + 1, max_depth)\n    return {'feature_index': feature_index, 'threshold': threshold, 'left_subtree': left_subtree, 'right_subtree': right_subtree}\ndef predict_tree(node, x):\n    \"\"\"Make a prediction for a single sample based on the tree structure.\"\"\"\n    if 'label' in node:\n        return node['label']\n    feature_index = node['feature_index']\n    threshold = node['threshold']\n    if x[feature_index] <= threshold:\n        return predict_tree(node['left_subtree'], x)\n    else:\n        return predict_tree(node['right_subtree'], x)\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    tree = build_tree(X_train, y_train, max_depth=max_depth)\n    predictions = [predict_tree(tree, x) for x in X_test]\n    return predictions"}
{"task_id": 184, "completion_id": 8, "solution": "import numpy as np\ndef gini_impurity(y):\n    \"\"\"Computes the Gini impurity for a set of labels.\"\"\"\n    (_, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    return 1 - np.sum(probabilities ** 2)\ndef find_best_split(X, y, max_depth):\n    \"\"\"Finds the best split for the given data based on Gini impurity improvement.\"\"\"\n    best_gain = 0\n    best_attribute = None\n    best_split_value = None\n    current_gini = gini_impurity(y)\n    if not max_depth:\n        max_depth = float('inf')\n    for feature in range(X.shape[1]):\n        if max_depth <= 0:\n            break\n        sorted_indexes = np.argsort(X[:, feature])\n        sorted_y = y[sorted_indexes]\n        candidate_splits = np.unique(X[:, feature])\n        for i in range(len(candidate_splits) - 1):\n            mid_point = (candidate_splits[i] + candidate_splits[i + 1]) / 2\n            left_y = sorted_y[:i + 1]\n            right_y = sorted_y[i + 1:]\n            if len(left_y) == 0 or len(right_y) == 0:\n                continue\n            gini_left = gini_impurity(left_y) * (len(left_y) / len(y))\n            gini_right = gini_impurity(right_y) * (len(right_y) / len(y))\n            weighted_gini = gini_left + gini_right\n            gain = current_gini - weighted_gini\n            if gain > best_gain:\n                best_gain = gain\n                best_attribute = feature\n                best_split_value = mid_point\n    return (best_gain, best_attribute, best_split_value)\ndef majority_vote(y):\n    \"\"\"Return the majority class for a subset of labels.\"\"\"\n    (values, counts) = np.unique(y, return_counts=True)\n    index = np.argmax(counts)\n    return values[index]\ndef build_tree(X, y, max_depth):\n    \"\"\"Build a binary decision tree according to CART algorithm.\"\"\"\n    if len(np.unique(y)) == 1:\n        return y[0]\n    if max_depth is not None and max_depth <= 0:\n        return majority_vote(y)\n    (gain, attribute, value) = find_best_split(X, y, max_depth)\n    if gain <= 0:\n        return majority_vote(y)\n    left_indices = X[:, attribute] <= value\n    right_indices = X[:, attribute] > value\n    left_child = build_tree(X[left_indices], y[left_indices], max_depth - 1 if max_depth else None)\n    right_child = build_tree(X[right_indices], y[right_indices], max_depth - 1 if max_depth else None)\n    return {'attribute': attribute, 'value': value, 'left': left_child, 'right': right_child}\ndef predict_one(x, tree):\n    \"\"\"Predict one sample based on the decision tree.\"\"\"\n    if type(tree) is int:\n        return tree\n    if x[tree['attribute']] <= tree['value']:\n        return predict_one(x, tree['left'])\n    else:\n        return predict_one(x, tree['right'])\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    tree = build_tree(X_train, y_train, max_depth)\n    predictions = [predict_one(x, tree) for x in X_test]\n    return predictions"}
{"task_id": 184, "completion_id": 9, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n\n    def gini_impurity(y):\n        (_, counts) = np.unique(y, return_counts=True)\n        p = counts / len(y)\n        return 1 - np.sum(p ** 2)\n\n    def split_node(X, y):\n        best_gini = float('inf')\n        best_feature = best_threshold = None\n        for feature in range(X.shape[1]):\n            feature_values = X[:, feature]\n            feature_values = np.unique(feature_values)\n            for i in range(len(feature_values) - 1):\n                threshold = (feature_values[i] + feature_values[i + 1]) / 2\n                left_indices = X[:, feature] < threshold\n                right_indices = X[:, feature] >= threshold\n                if not (np.any(left_indices) and np.any(right_indices)):\n                    continue\n                gini = (len(y[left_indices]) * gini_impurity(y[left_indices]) + len(y[right_indices]) * gini_impurity(y[right_indices])) / len(y)\n                if gini < best_gini:\n                    best_gini = gini\n                    best_feature = feature\n                    best_threshold = threshold\n        return (best_feature, best_threshold)\n\n    def majority_class(y):\n        (values, counts) = np.unique(y, return_counts=True)\n        return values[np.argmax(counts)]\n\n    def build_tree(X, y, depth=0):\n        if len(np.unique(y)) == 1:\n            return y[0]\n        if max_depth and depth >= max_depth:\n            return majority_class(y)\n        (feature, threshold) = split_node(X, y)\n        if feature is None:\n            return majority_class(y)\n        left_indices = X[:, feature] < threshold\n        right_indices = X[:, feature] >= threshold\n        if not (np.any(left_indices) and np.any(right_indices)):\n            return majority_class(y)\n        left_tree = build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_tree = build_tree(X[right_indices], y[right_indices], depth + 1)\n        return (feature, threshold, left_tree, right_tree)\n\n    def predict_instance(tree, x_row):\n        if isinstance(tree, int):\n            return tree\n        (feature, threshold, left_tree, right_tree) = tree\n        if x_row[feature] < threshold:\n            return predict_instance(left_tree, x_row)\n        else:\n            return predict_instance(right_tree, x_row)\n    tree = build_tree(X_train, y_train)\n    return [predict_instance(tree, row) for row in X_test]"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y):\n    \"\"\"Calculate the Gini impurity of the target values in y.\"\"\"\n    (values, counts) = np.unique(y, return_counts=True)\n    proportions = counts / len(y)\n    return 1 - np.sum(proportions ** 2)\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    if n_samples <= 1 or gini_impurity(y) == 0:\n        return (-1, None, np.round(gini_impurity(y), 4))\n    best_gini = np.inf\n    best_feature_index = -1\n    best_threshold = None\n    for j in range(n_features):\n        unique_vals = np.unique(X[:, j])\n        if len(unique_vals) == 1:\n            continue\n        for v in unique_vals:\n            left_indices = X[:, j] <= v\n            right_indices = X[:, j] > v\n            if not left_indices.any() or not right_indices.any():\n                continue\n            left_labels = y[left_indices]\n            right_labels = y[right_indices]\n            n_left = np.sum(left_indices)\n            n_right = np.sum(right_indices)\n            gini_left = gini_impurity(left_labels)\n            gini_right = gini_impurity(right_labels)\n            gini_split = n_left / n_samples * gini_left + n_right / n_samples * gini_right\n            if gini_split < best_gini - 1e-12 or (np.abs(gini_split - best_gini) < 1e-12 and j < best_feature_index) or (np.abs(gini_split - best_gini) < 1e-12 and j == best_feature_index and (v < best_threshold)):\n                best_gini = gini_split\n                best_feature_index = j\n                best_threshold = v\n    if best_feature_index == -1:\n        return (-1, None, np.round(gini_impurity(y), 4))\n    else:\n        return (best_feature_index, best_threshold, np.round(best_gini, 4))"}
{"task_id": 190, "completion_id": 1, "solution": "import numpy as np\ndef gini_impurity(labels):\n    (_, counts) = np.unique(labels, return_counts=True)\n    proportions = counts / len(labels)\n    return 1 - np.sum(proportions ** 2)\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    G_whole = gini_impurity(y)\n    if G_whole <= 1e-12:\n        return (-1, None, round(G_whole, 4))\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = float('inf')\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        for threshold in unique_values:\n            left_mask = X[:, feature_index] <= threshold\n            right_mask = X[:, feature_index] > threshold\n            if not left_mask.any() or not right_mask.any():\n                continue\n            n_left = np.sum(left_mask)\n            n_right = np.sum(right_mask)\n            G_left = gini_impurity(y[left_mask])\n            G_right = gini_impurity(y[right_mask])\n            G_split = n_left / n_samples * G_left + n_right / n_samples * G_right\n            if G_split < best_gini - 1e-12:\n                best_gini = G_split\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n    if best_feature_index == -1:\n        return (-1, None, round(G_whole, 4))\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 190, "completion_id": 2, "solution": "import numpy as np\ndef gini_impurity(y):\n    \"\"\"Calculate the Gini impurity for a list of class labels.\"\"\"\n    (_, freqs) = np.unique(y, return_counts=True)\n    proportions = freqs / float(len(y))\n    return 1 - np.sum(proportions ** 2)\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimize the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_gini = gini_impurity(y)\n    best_threshold = None\n    best_feature_index = -1\n    for feature_index in range(n_features):\n        sorted_indices = np.argsort(X[:, feature_index])\n        sorted_labels = y[sorted_indices]\n        sorted_feature = X[:, feature_index][sorted_indices]\n        for i in range(1, n_samples):\n            if sorted_feature[i] == sorted_feature[i - 1]:\n                continue\n            threshold = (sorted_feature[i - 1] + sorted_feature[i]) / 2.0\n            left_labels = sorted_labels[:i]\n            right_labels = sorted_labels[i:]\n            if left_labels.size == 0 or right_labels.size == 0:\n                continue\n            left_gini = gini_impurity(left_labels)\n            right_gini = gini_impurity(right_labels)\n            n_left = left_labels.size\n            n_right = right_labels.size\n            gini_split = n_left / n_samples * left_gini + n_right / n_samples * right_gini\n            if gini_split < best_gini or (abs(best_gini - gini_split) < 1e-12 and feature_index < best_feature_index) or (abs(best_gini - gini_split) < 1e-12 and feature_index == best_feature_index and (threshold < best_threshold)):\n                best_gini = gini_split\n                best_threshold = threshold\n                best_feature_index = feature_index\n    return (best_feature_index, best_threshold, round(best_gini, 4))\nX = np.array([[1, 2], [2, 3], [3, 1], [4, 2], [5, 3]])\ny = np.array([0, 0, 1, 1, 1])"}
{"task_id": 190, "completion_id": 3, "solution": "import numpy as np\ndef gini_impurity(labels):\n    \"\"\"Calculate the Gini impurity for a set of labels.\"\"\"\n    (_, counts) = np.unique(labels, return_counts=True)\n    probabilities = counts / len(labels)\n    return 1 - np.sum(probabilities ** 2)\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimize the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    G_whole = gini_impurity(y)\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = G_whole\n    for j in range(n_features):\n        values = np.unique(X[:, j])\n        for v in values:\n            left = y[X[:, j] <= v]\n            right = y[X[:, j] > v]\n            if len(left) == 0 or len(right) == 0:\n                continue\n            G_left = gini_impurity(left)\n            G_right = gini_impurity(right)\n            G_split = len(left) / n_samples * G_left + len(right) / n_samples * G_right\n            if G_split < best_gini or (abs(G_split - best_gini) < 1e-12 and j < best_feature_index) or (abs(G_split - best_gini) < 1e-12 and j == best_feature_index and (v < best_threshold_value)):\n                best_gini = G_split\n                best_feature_index = j\n                best_threshold_value = v\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 190, "completion_id": 4, "solution": "import numpy as np\ndef gini(p):\n    \"\"\"Calculate the Gini impurity for a node given class proportions.\"\"\"\n    return 1 - np.sum(p ** 2)\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    (X, y) = (np.array(X), np.array(y))\n    (n_samples, n_features) = X.shape\n    unique_y = np.unique(y)\n    if len(unique_y) == 1:\n        gini_whole = gini(np.bincount(y) / n_samples)\n        return (-1, None, round(gini_whole, 4))\n    (best_gini, best_feature, best_threshold) = (float('inf'), -1, None)\n    for j in range(n_features):\n        unique_values = np.unique(X[:, j])\n        for v in unique_values:\n            left_mask = X[:, j] <= v\n            right_mask = X[:, j] > v\n            (left_y, right_y) = (y[left_mask], y[right_mask])\n            (n_left, n_right) = (left_y.size, right_y.size)\n            if n_left > 0 and n_right > 0:\n                g_left = gini(np.bincount(left_y) / n_left)\n                g_right = gini(np.bincount(right_y) / n_right)\n                g_split = n_left / n_samples * g_left + n_right / n_samples * g_right\n                if g_split < best_gini - 1e-12 or (abs(g_split - best_gini) < 1e-12 and (j < best_feature or (j == best_feature and v < best_threshold))):\n                    best_gini = g_split\n                    best_feature = j\n                    best_threshold = v\n    if best_feature == -1:\n        gini_whole = gini(np.bincount(y) / n_samples)\n        return (-1, None, round(gini_whole, 4))\n    else:\n        return (best_feature, best_threshold, round(best_gini, 4))"}
{"task_id": 190, "completion_id": 5, "solution": "import numpy as np\ndef gini_impurity(y):\n    (_, counts) = np.unique(y, return_counts=True)\n    proportions = counts / len(y)\n    return 1 - np.sum(proportions ** 2)\ndef best_gini_split(X, y):\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    best_gini = float('inf')\n    (best_feature, best_threshold) = (-1, None)\n    G_whole_dataset = gini_impurity(y)\n    for feature in range(n_features):\n        unique_vals = np.unique(X[:, feature])\n        for i in range(len(unique_vals) - 1):\n            threshold = (unique_vals[i] + unique_vals[i + 1]) / 2\n            left_idx = X[:, feature] <= threshold\n            right_idx = X[:, feature] > threshold\n            if not left_idx.any() or not right_idx.any():\n                continue\n            (n_left, n_right) = (np.sum(left_idx), np.sum(right_idx))\n            gini_left = gini_impurity(y[left_idx])\n            gini_right = gini_impurity(y[right_idx])\n            gini_split = n_left / n_samples * gini_left + n_right / n_samples * gini_right\n            if gini_split < best_gini or (np.abs(gini_split - best_gini) < 1e-12 and feature < best_feature) or (np.abs(gini_split - best_gini) < 1e-12 and feature == best_feature and (threshold < best_threshold)):\n                best_gini = gini_split\n                best_feature = feature\n                best_threshold = threshold\n    if best_gini == float('inf'):\n        return (-1, None, round(G_whole_dataset, 4))\n    else:\n        return (best_feature, best_threshold, round(best_gini, 4))"}
{"task_id": 190, "completion_id": 6, "solution": "import numpy as np\ndef gini_impurity(y):\n    \"\"\"Calculate the Gini impurity for a given set of class labels.\"\"\"\n    (_, counts) = np.unique(y, return_counts=True)\n    proportions = counts / len(y)\n    return 1 - np.sum(proportions ** 2)\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimize the weighted Gini impurity.\"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    if isinstance(y, list):\n        y = np.array(y)\n    (n_samples, n_features) = X.shape\n    best_gini = gini_impurity(y)\n    best_feature_index = -1\n    best_threshold_value = None\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        for value in unique_values:\n            left_indices = X[:, feature_index] <= value\n            right_indices = X[:, feature_index] > value\n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue\n            (left_y, right_y) = (y[left_indices], y[right_indices])\n            gini_left = gini_impurity(left_y)\n            gini_right = gini_impurity(right_y)\n            gini_split = (len(left_y) * gini_left + len(right_y) * gini_right) / n_samples\n            if gini_split < best_gini or np.isclose(gini_split, best_gini, atol=1e-12):\n                if gini_split < best_gini:\n                    best_gini = gini_split\n                    best_feature_index = feature_index\n                    best_threshold_value = value\n                elif gini_split == best_gini and feature_index < best_feature_index:\n                    best_feature_index = feature_index\n                    best_threshold_value = value\n                elif np.isclose(gini_split, best_gini, atol=1e-12) and feature_index == best_feature_index and (value < best_threshold_value):\n                    best_threshold_value = value\n    if best_feature_index == -1:\n        return (-1, None, round(gini_impurity(y), 4))\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 190, "completion_id": 7, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n\n    def gini_impurity(y):\n        (_, counts) = np.unique(y, return_counts=True)\n        p = counts / len(y)\n        return 1 - np.sum(p ** 2)\n    (n_samples, n_features) = X.shape\n    best_gini = float('inf')\n    best_feature_index = -1\n    best_threshold_value = None\n    G_whole_dataset = gini_impurity(y)\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        for value in unique_values:\n            if np.all(X[:, feature_index] == value):\n                continue\n            left_mask = X[:, feature_index] <= value\n            right_mask = X[:, feature_index] > value\n            left_y = y[left_mask]\n            right_y = y[right_mask]\n            n_left = len(left_y)\n            n_right = len(right_y)\n            n_total = n_left + n_right\n            if n_left == 0 or n_right == 0:\n                continue\n            G_left = gini_impurity(left_y)\n            G_right = gini_impurity(right_y)\n            G_split = n_left / n_total * G_left + n_right / n_total * G_right\n            if G_split < best_gini or (np.abs(G_split - best_gini) < 1e-12 and feature_index < best_feature_index) or (np.abs(G_split - best_gini) < 1e-12 and feature_index == best_feature_index and (value < best_threshold_value)):\n                best_gini = G_split\n                best_feature_index = feature_index\n                best_threshold_value = value\n    if best_feature_index == -1:\n        return (-1, None, round(G_whole_dataset, 4))\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 190, "completion_id": 8, "solution": "import numpy as np\ndef gini_impurity(labels):\n    (_, counts) = np.unique(labels, return_counts=True)\n    proportions = counts / len(labels)\n    return 1 - np.sum(proportions ** 2)\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    G_whole = gini_impurity(y)\n    best_gini = G_whole\n    best_feature = -1\n    best_threshold = None\n    for feature_idx in range(n_features):\n        unique_values = np.unique(X[:, feature_idx])\n        for threshold in unique_values:\n            left_indices = X[:, feature_idx] <= threshold\n            right_indices = X[:, feature_idx] > threshold\n            if np.any(left_indices) and np.any(right_indices):\n                n_left = np.sum(left_indices)\n                n_right = np.sum(right_indices)\n                left_gini = gini_impurity(y[left_indices])\n                right_gini = gini_impurity(y[right_indices])\n                current_gini = n_left / n_samples * left_gini + n_right / n_samples * right_gini\n                if current_gini < best_gini or (abs(current_gini - best_gini) < 1e-12 and feature_idx < best_feature) or (abs(current_gini - best_gini) < 1e-12 and feature_idx == best_feature and (threshold < best_threshold)):\n                    best_gini = current_gini\n                    best_feature = feature_idx\n                    best_threshold = threshold\n    best_gini = round(best_gini, 4)\n    return (best_feature, best_threshold, best_gini) if best_feature != -1 else (-1, None, round(G_whole, 4))"}
{"task_id": 190, "completion_id": 9, "solution": "import numpy as np\ndef gini_impurity(labels):\n    \"\"\"Calculate the Gini impurity for a given set of labels.\"\"\"\n    (unique_labels, count) = np.unique(labels, return_counts=True)\n    proportions = count / len(labels)\n    gini = 1 - np.sum(proportions ** 2)\n    return gini\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    best_gini = float('inf')\n    best_feature_index = -1\n    best_threshold_value = None\n    whole_gini = gini_impurity(y)\n    if whole_gini == 0 or n_samples == 0 or n_features == 0:\n        return (-1, None, round(whole_gini, 4))\n    for feature_index in range(n_features):\n        feature_values = np.unique(X[:, feature_index])\n        for threshold in feature_values:\n            left_indices = X[:, feature_index] <= threshold\n            right_indices = ~left_indices\n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue\n            left_labels = y[left_indices]\n            right_labels = y[right_indices]\n            gini = len(left_labels) / n_samples * gini_impurity(left_labels) + len(right_labels) / n_samples * gini_impurity(right_labels)\n            if gini < best_gini - 1e-12:\n                best_gini = gini\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n    if best_feature_index == -1:\n        return (-1, None, round(whole_gini, 4))\n    else:\n        return (best_feature_index, best_threshold_value, round(best_gini, 4))\nX = [[1, 2], [3, 4], [5, 6], [7, 8]]\ny = [0, 1, 0, 1]"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\"\"\"\n    if name not in ['euclidean', 'manhattan', 'chebyshev', 'cosine']:\n        raise ValueError(f'Unsupported metric name: {name}')\n\n    def validate(v1, v2):\n        if not (isinstance(v1, (list, tuple, np.ndarray)) and isinstance(v2, (list, tuple, np.ndarray))):\n            return False\n        if isinstance(v1, np.ndarray) and v1.ndim != 1:\n            return False\n        if isinstance(v2, np.ndarray) and v2.ndim != 1:\n            return False\n        if len(v1) != len(v2) or not v1 or (not v2):\n            return False\n        try:\n            v1 = np.array(v1, dtype=float)\n            v2 = np.array(v2, dtype=float)\n        except ValueError:\n            return False\n        if name == 'cosine':\n            if np.linalg.norm(v1) == 0 or np.linalg.norm(v2) == 0:\n                return False\n        return (v1, v2)\n\n    def euclidean(v1, v2):\n        (v1, v2) = validate(v1, v2)\n        return -1 if v1 is False else round(np.sqrt(np.sum((v1 - v2) ** 2)), 4)\n\n    def manhattan(v1, v2):\n        (v1, v2) = validate(v1, v2)\n        return -1 if v1 is False else round(np.sum(np.abs(v1 - v2)), 4)\n\n    def chebyshev(v1, v2):\n        (v1, v2) = validate(v1, v2)\n        return -1 if v1 is False else round(np.max(np.abs(v1 - v2)), 4)\n\n    def cosine(v1, v2):\n        (v1, v2) = validate(v1, v2)\n        return -1 if v1 is False else round(1 - np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2)), 4)\n    return {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}[name]\neuclidean = metric('euclidean')\nmanhattan = metric('manhattan')\nchebyshev = metric('chebyshev')\ncosine = metric('cosine')"}
{"task_id": 191, "completion_id": 1, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\"\"\"\n\n    def validate(v1, v2):\n        if not all((isinstance(v, (list, tuple, np.ndarray)) for v in [v1, v2])):\n            return False\n        (v1, v2) = (np.array(v1, dtype=float), np.array(v2, dtype=float))\n        if v1.shape != v2.shape or v1.ndim != 1 or v2.ndim != 1 or (len(v1) == 0):\n            return False\n        if name == 'cosine' and (np.linalg.norm(v1) == 0 or np.linalg.norm(v2) == 0):\n            return False\n        return (v1, v2)\n\n    def euclidean(v1, v2):\n        return round(np.linalg.norm(v1 - v2), 4)\n\n    def manhattan(v1, v2):\n        return round(np.sum(np.abs(v1 - v2)), 4)\n\n    def chebyshev(v1, v2):\n        return round(np.max(np.abs(v1 - v2)), 4)\n\n    def cosine(v1, v2):\n        return round(1 - np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2)), 4)\n    metrics = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n    if name not in metrics:\n        return lambda x, y: -1\n\n    def d(v1, v2):\n        validated = validate(v1, v2)\n        if not validated:\n            return -1\n        (v1, v2) = validated\n        return metrics[name](v1, v2)\n    return d"}
{"task_id": 191, "completion_id": 2, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\"\"\"\n\n    def validate_vectors(x, y):\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except ValueError:\n            return False\n        if x.ndim != 1 or y.ndim != 1:\n            return False\n        if len(x) != len(y):\n            return False\n        if len(x) == 0 or len(y) == 0:\n            return False\n        return (x, y)\n\n    def distance(x, y, metric_name):\n        (x, y) = validate_vectors(x, y)\n        if x is False or y is False:\n            return -1\n        if metric_name == 'euclidean':\n            return round(np.linalg.norm(x - y), 4)\n        elif metric_name == 'manhattan':\n            return round(np.sum(np.abs(x - y)), 4)\n        elif metric_name == 'chebyshev':\n            return round(np.max(np.abs(x - y)), 4)\n        elif metric_name == 'cosine':\n            dot_product = np.dot(x, y)\n            norm_x = np.linalg.norm(x)\n            norm_y = np.linalg.norm(y)\n            if norm_x == 0 or norm_y == 0:\n                return -1\n            return round(1 - dot_product / (norm_x * norm_y), 4)\n        else:\n            return -1\n    return lambda x, y: distance(x, y, name)"}
{"task_id": 191, "completion_id": 3, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def validate(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return False\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except ValueError:\n            return False\n        if x.ndim != 1 or y.ndim != 1:\n            return False\n        if x.size == 0 or y.size == 0 or x.size != y.size:\n            return False\n        return (x, y)\n\n    def euclidean(x, y):\n        return round(np.linalg.norm(x - y), 4)\n\n    def manhattan(x, y):\n        return round(np.sum(np.abs(x - y)), 4)\n\n    def chebyshev(x, y):\n        return round(np.max(np.abs(x - y)), 4)\n\n    def cosine(x, y):\n        if np.linalg.norm(x) == 0 or np.linalg.norm(y) == 0:\n            return -1\n        return round(1 - np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y)), 4)\n    metric_func = None\n    if name == 'euclidean':\n        metric_func = euclidean\n    elif name == 'manhattan':\n        metric_func = manhattan\n    elif name == 'chebyshev':\n        metric_func = chebyshev\n    elif name == 'cosine':\n        metric_func = cosine\n    if metric_func:\n\n        def d(x, y):\n            valid = validate(x, y)\n            if not valid:\n                return -1\n            (x, y) = valid\n            return metric_func(x, y)\n        return d\n    else:\n        return lambda x, y: -1"}
{"task_id": 191, "completion_id": 4, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def euclidean(x, y):\n        return np.around(np.sqrt(np.sum((x - y) ** 2)), decimals=4)\n\n    def manhattan(x, y):\n        return np.around(np.sum(np.abs(x - y)), decimals=4)\n\n    def chebyshev(x, y):\n        return np.around(np.max(np.abs(x - y)), decimals=4)\n\n    def cosine(x, y):\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return np.around(1 - np.dot(x, y) / (norm_x * norm_y), decimals=4)\n\n    def validate(x, y):\n        if not isinstance(x, (list, tuple, np.ndarray)) or not isinstance(y, (list, tuple, np.ndarray)):\n            return False\n        if len(x) == 0 or len(y) == 0 or len(x) != len(y):\n            return False\n        try:\n            x = np.array(x, dtype=np.float64)\n            y = np.array(y, dtype=np.float64)\n        except ValueError:\n            return False\n        return True\n    metrics = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n\n    def d(x, y):\n        if name not in metrics or not validate(x, y):\n            return -1\n        return metrics[name](np.array(x), np.array(y))\n    return d"}
{"task_id": 191, "completion_id": 5, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\"\"\"\n\n    def validate_vectors(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return False\n        if len(x) != len(y) or not x or (not y):\n            return False\n        if isinstance(x, np.ndarray) and x.ndim != 1:\n            return False\n        if isinstance(y, np.ndarray) and y.ndim != 1:\n            return False\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except ValueError:\n            return False\n        return True\n\n    def euclidean_distance(x, y):\n        return np.round(np.linalg.norm(x - y), 4)\n\n    def manhattan_distance(x, y):\n        return np.round(np.sum(np.abs(x - y)), 4)\n\n    def chebyshev_distance(x, y):\n        return np.round(np.max(np.abs(x - y)), 4)\n\n    def cosine_distance(x, y):\n        x_norm = np.linalg.norm(x)\n        y_norm = np.linalg.norm(y)\n        if x_norm == 0 or y_norm == 0:\n            return -1\n        similarity = np.dot(x, y) / (x_norm * y_norm)\n        return np.round(1 - similarity, 4)\n    metrics = {'euclidean': euclidean_distance, 'manhattan': manhattan_distance, 'chebyshev': chebyshev_distance, 'cosine': cosine_distance}\n    if name not in metrics:\n        return lambda x, y: -1\n    distance_func = metrics[name]\n\n    def d(x, y):\n        if not validate_vectors(x, y):\n            return -1\n        return distance_func(x, y)\n    return d"}
{"task_id": 191, "completion_id": 6, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\"\"\"\n\n    def distance(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return -1\n        if len(x) != len(y) or len(x) == 0:\n            return -1\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except ValueError:\n            return -1\n        (norm_x, norm_y) = (np.linalg.norm(x), np.linalg.norm(y))\n        if name == 'cosine' and (norm_x == 0 or norm_y == 0):\n            return -1\n        if name == 'euclidean':\n            return round(np.linalg.norm(x - y), 4)\n        elif name == 'manhattan':\n            return round(np.sum(np.abs(x - y)), 4)\n        elif name == 'chebyshev':\n            return round(np.max(np.abs(x - y)), 4)\n        elif name == 'cosine':\n            dot_product = np.dot(x, y)\n            return round(1 - dot_product / (norm_x * norm_y), 4)\n        else:\n            return -1\n    return distance"}
{"task_id": 191, "completion_id": 7, "solution": "import numpy as np\ndef validate_vectors(v1, v2):\n    \"\"\"Helper function to validate two vectors.\n\n    Parameters:\n    v1, v2 (list | tuple | np.array): Vectors to be validated.\n\n    Returns:\n    bool: True if vectors are valid, False otherwise.\n    \"\"\"\n    if not (isinstance(v1, (list, tuple, np.ndarray)) and isinstance(v2, (list, tuple, np.ndarray))):\n        return False\n    if len(v1) == 0 or len(v2) == 0 or len(v1) != len(v2):\n        return False\n    try:\n        v1 = np.array(v1, dtype=float)\n        v2 = np.array(v2, dtype=float)\n    except ValueError:\n        return False\n    return True\ndef norm_zero_check(v1, v2):\n    \"\"\"Check if any of the vector norms is zero.\n\n    Parameters:\n    v1, v2 (np.array): Vectors to be checked.\n\n    Returns:\n    bool: True if norms are non-zero, False if any norm is zero.\n    \"\"\"\n    norm1 = np.linalg.norm(v1)\n    norm2 = np.linalg.norm(v2)\n    return norm1 != 0 and norm2 != 0\ndef compute_distance(metric_name, v1, v2):\n    \"\"\"Computes distance based on metric name if vectors are valid.\n\n    Parameters:\n    metric_name (str): Name of the metric ('euclidean', 'manhattan', 'chebyshev', 'cosine').\n    v1, v2 (list | tuple | np.array): Vectors to compute the distance between.\n\n    Returns:\n    float: The computed distance (rounded to 4 decimals).\n    int: -1 if validation fails or metric name is unsupported.\n    \"\"\"\n    if not validate_vectors(v1, v2):\n        return -1\n    (v1, v2) = (np.array(v1, dtype=float), np.array(v2, dtype=float))\n    if metric_name == 'euclidean':\n        return round(np.linalg.norm(v1 - v2), 4)\n    elif metric_name == 'manhattan':\n        return round(np.sum(np.abs(v1 - v2)), 4)\n    elif metric_name == 'chebyshev':\n        return round(np.max(np.abs(v1 - v2)), 4)\n    elif metric_name == 'cosine':\n        if not norm_zero_check(v1, v2):\n            return -1\n        cos_sim = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n        return round(1 - cos_sim, 4)\n    else:\n        return -1\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\"\"\"\n\n    def d(v1, v2):\n        return compute_distance(name, v1, v2)\n    return d"}
{"task_id": 191, "completion_id": 8, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\"\"\"\n\n    def validate(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return False\n        x = np.array(x, dtype=float)\n        y = np.array(y, dtype=float)\n        if x.shape != y.shape or x.ndim != 1 or y.ndim != 1 or (len(x) == 0):\n            return False\n        if name == 'cosine' and (np.linalg.norm(x) == 0 or np.linalg.norm(y) == 0):\n            return False\n        return (x, y)\n\n    def euclidean_distance(x, y):\n        return round(np.sqrt(np.sum((x - y) ** 2)), 4)\n\n    def manhattan_distance(x, y):\n        return round(np.sum(np.abs(x - y)), 4)\n\n    def chebyshev_distance(x, y):\n        return round(np.max(np.abs(x - y)), 4)\n\n    def cosine_distance(x, y):\n        dot_product = np.dot(x, y)\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        return round(1 - dot_product / (norm_x * norm_y), 4)\n\n    def distance_func(x, y):\n        result = validate(x, y)\n        if not result:\n            return -1\n        (x, y) = result\n        if name == 'euclidean':\n            return euclidean_distance(x, y)\n        elif name == 'manhattan':\n            return manhattan_distance(x, y)\n        elif name == 'chebyshev':\n            return chebyshev_distance(x, y)\n        elif name == 'cosine':\n            return cosine_distance(x, y)\n        else:\n            return -1\n    return distance_func"}
{"task_id": 191, "completion_id": 9, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n    \n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n    \n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def euclidean(u, v):\n        if len(u) != len(v) or not u or (not v):\n            return -1\n        return round(np.sqrt(np.sum((np.array(u) - np.array(v)) ** 2)), 4)\n\n    def manhattan(u, v):\n        if len(u) != len(v) or not u or (not v):\n            return -1\n        return round(np.sum(np.abs(np.array(u) - np.array(v))), 4)\n\n    def chebyshev(u, v):\n        if len(u) != len(v) or not u or (not v):\n            return -1\n        return round(np.max(np.abs(np.array(u) - np.array(v))), 4)\n\n    def cosine(u, v):\n        if len(u) != len(v) or not u or (not v) or (np.linalg.norm(u) == 0) or (np.linalg.norm(v) == 0):\n            return -1\n        return round(1 - np.dot(u, v) / (np.linalg.norm(u) * np.linalg.norm(v)), 4)\n    metrics = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n    if name not in metrics:\n        return lambda u, v: -1\n    return metrics[name]"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = []\n    action_dim = 1\n    if cont_action:\n        if md_action:\n            action_dim = env.action_space.shape[0]\n            n_actions_per_dim = [np.inf] * action_dim\n        else:\n            n_actions_per_dim = [np.inf]\n        action_ids = None\n    elif md_action:\n        n_actions_per_dim = []\n        for subspace in env.action_space.spaces:\n            if hasattr(subspace, 'n'):\n                n_actions_per_dim.append(subspace.n)\n            else:\n                n_actions_per_dim.append(np.inf)\n        action_dim = len(n_actions_per_dim)\n        if np.inf in n_actions_per_dim:\n            action_ids = None\n        else:\n            action_ids = list(product(*[range(val) for val in n_actions_per_dim]))\n    else:\n        n_actions_per_dim = [env.action_space.n]\n        action_ids = list(range(env.action_space.n))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 1, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    if md_action:\n        action_spaces = env.action_space.spaces\n        n_actions_per_dim = [space.n if hasattr(space, 'n') else np.inf for space in action_spaces]\n    else:\n        action_spaces = [env.action_space]\n        if cont_action:\n            n_actions_per_dim = [np.inf]\n        else:\n            n_actions_per_dim = [env.action_space.n]\n    action_dim = len(n_actions_per_dim)\n    if np.any(np.isinf(n_actions_per_dim)):\n        action_ids = None\n    else:\n        ranges = [range(int(n)) for n in n_actions_per_dim]\n        action_ids = list(product(*ranges))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 2, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = []\n    action_dim = 0\n    if md_action and cont_action:\n        for space in env.action_space.spaces:\n            if hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n            else:\n                n_actions_per_dim.append(space.n)\n        action_ids = None\n    elif md_action:\n        for space in env.action_space.spaces:\n            n_actions_per_dim.append(space.n)\n        action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n    elif cont_action:\n        n_actions_per_dim.append(np.inf)\n        action_ids = None\n    else:\n        n_actions_per_dim.append(env.action_space.n)\n        action_ids = list(range(env.action_space.n))\n    if md_action:\n        action_dim = len(env.action_space.spaces)\n    else:\n        action_dim = len(n_actions_per_dim)\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 3, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    if md_action:\n        for space in env.action_space.spaces:\n            if space.is_continuous() or cont_action:\n                n_actions_per_dim.append(np.inf)\n            else:\n                n_actions_per_dim.append(space.n)\n        action_dim = len(n_actions_per_dim)\n    else:\n        if cont_action:\n            n_actions_per_dim.append(np.inf)\n        else:\n            n_actions_per_dim.append(env.action_space.n)\n        action_dim = 1\n    if cont_action or np.inf in n_actions_per_dim:\n        action_ids = None\n    else:\n        action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 4, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = []\n    action_dim = 0\n    if md_action and cont_action:\n        action_dim = len(env.action_space.shape)\n        n_actions_per_dim = [np.inf] * action_dim\n        action_ids = None\n    elif md_action and (not cont_action):\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            else:\n                n_actions_per_dim.append(np.inf)\n                action_ids = None\n                break\n        if action_ids is not None:\n            action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n            action_dim = len(n_actions_per_dim)\n    elif not md_action and cont_action:\n        n_actions_per_dim = [np.inf]\n        action_ids = None\n        action_dim = 1\n    else:\n        n_actions_per_dim = [env.action_space.n]\n        action_ids = list(range(env.action_space.n))\n        action_dim = 1\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 5, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    if md_action:\n        sub_spaces = env.action_space.spaces\n        action_dim = len(sub_spaces)\n        for subspace in sub_spaces:\n            if cont_action:\n                n_actions_per_dim.append(np.inf)\n            else:\n                n_actions_per_dim.append(subspace.n)\n        if not cont_action:\n            actions = [range(x) for x in n_actions_per_dim]\n            action_ids = list(product(*actions))\n    else:\n        action_dim = 1\n        if cont_action:\n            n_actions_per_dim.append(np.inf)\n        else:\n            n_actions_per_dim.append(env.action_space.n)\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 6, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    if cont_action:\n        if md_action:\n            action_dim = len(env.action_space.shape)\n            n_actions_per_dim = [np.inf] * action_dim\n        else:\n            action_dim = env.action_space.shape[0]\n            n_actions_per_dim = [np.inf]\n    elif md_action:\n        for space in env.action_space.spaces:\n            n_actions_per_dim.append(space.n)\n        action_dim = len(n_actions_per_dim)\n        if all((isinstance(space.n, int) for space in env.action_space.spaces)):\n            action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n    else:\n        n_actions_per_dim = [env.action_space.n]\n        action_dim = 1\n        if isinstance(env.action_space.n, int):\n            action_ids = [(i,) for i in range(env.action_space.n)]\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 7, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    if md_action:\n        sub_spaces = env.action_space.spaces\n        for space in sub_spaces:\n            if cont_action and space.shape:\n                n_actions_per_dim.append(np.inf)\n            else:\n                n_actions_per_dim.append(space.n)\n        action_dim = len(n_actions_per_dim)\n        if not cont_action:\n            action_ids = list(product(*[range(int(n)) for n in n_actions_per_dim]))\n    else:\n        if cont_action:\n            n_actions_per_dim.append(np.inf)\n        else:\n            n_actions_per_dim.append(env.action_space.n)\n        action_dim = len(n_actions_per_dim) if n_actions_per_dim[0] != np.inf else 1\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 8, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    if cont_action:\n        if md_action:\n            n_actions_per_dim = [np.inf for _ in env.action_space.shape]\n        else:\n            n_actions_per_dim = [np.inf]\n        action_ids = None\n        action_dim = len(env.action_space.shape) if md_action else 1\n    else:\n        if md_action:\n            n_actions_per_dim = [sub_space.n for sub_space in env.action_space.spaces]\n            action_dim = len(n_actions_per_dim)\n        else:\n            n_actions_per_dim = [env.action_space.n]\n            action_dim = 1\n        action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 9, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    if not cont_action:\n        if not md_action:\n            return ([env.action_space.n], [(i,) for i in range(env.action_space.n)], 1)\n        else:\n            action_dims = []\n            for space in env.action_space.spaces:\n                action_dims.append(space.n)\n            action_ids = list(product(*[range(x) for x in action_dims]))\n            return (action_dims, action_ids, len(action_dims))\n    elif not md_action:\n        return ([np.inf], None, 1)\n    else:\n        action_dims = []\n        action_ids = None\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                action_dims.append(space.n)\n            else:\n                action_dims.append(np.inf)\n        return (action_dims, action_ids, len(action_dims))"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T), dtype=float)\n    for d in range(len(phi)):\n        for n in range(len(corpus[d])):\n            v = corpus[d][n]\n            beta[v, :] += phi[d][n, :]\n    beta += 1e-10\n    beta = beta / beta.sum(axis=0)\n    beta = np.round(beta, 4)\n    return beta.tolist()\nphi = [np.array([[0.1, 0.5, 0.4], [0.3, 0.2, 0.5]]), np.array([[0.0, 0.9, 0.1]])]\ncorpus = [[0, 1], [1]]\nV = 5"}
{"task_id": 198, "completion_id": 1, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        contains the variational parameter \u03d5 for this document. Row *n* contains\n        the probabilities that token *n* is generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for (d, doc) in enumerate(corpus):\n        for (n, word) in enumerate(doc):\n            beta[word] += phi[d][n]\n    beta_column_sums = beta.sum(axis=0)\n    non_zero_columns = beta_column_sums != 0\n    beta[:, non_zero_columns] /= beta_column_sums[non_zero_columns]\n    beta_rounded = np.round(beta, decimals=4)\n    beta_list = beta_rounded.tolist()\n    return beta_list"}
{"task_id": 198, "completion_id": 2, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for (d, doc_phi) in enumerate(phi):\n        for (n, token) in enumerate(corpus[d]):\n            for t in range(T):\n                beta[token, t] += doc_phi[n, t]\n    beta_sum = np.sum(beta, axis=0)\n    beta_sum[beta_sum == 0] = 1\n    beta /= beta_sum\n    beta = beta.round(4).tolist()\n    return beta"}
{"task_id": 198, "completion_id": 3, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T), dtype=float)\n    for (d, doc) in enumerate(corpus):\n        for (n, word_index) in enumerate(doc):\n            beta[word_index] += phi[d][n]\n    beta_sum = beta.sum(axis=0, keepdims=True)\n    beta_normalized = np.divide(beta, beta_sum, out=np.zeros_like(beta), where=beta_sum != 0)\n    beta_rounded = np.around(beta_normalized, decimals=4)\n    return beta_rounded.tolist()"}
{"task_id": 198, "completion_id": 4, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for (d, doc) in enumerate(corpus):\n        for (n, word) in enumerate(doc):\n            beta[word] += phi[d][n]\n    beta = beta / beta.sum(axis=0, keepdims=True)\n    beta_rounded = np.around(beta, decimals=4).tolist()\n    return beta_rounded"}
{"task_id": 198, "completion_id": 5, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T), dtype=float)\n    for d in range(len(corpus)):\n        for n in range(len(corpus[d])):\n            word_v = corpus[d][n]\n            phi_dn = phi[d][n]\n            beta[word_v] += phi_dn\n    column_sums = beta.sum(axis=0, keepdims=True)\n    beta /= column_sums\n    beta = np.round(beta, decimals=4)\n    beta = beta.tolist()\n    return beta"}
{"task_id": 198, "completion_id": 6, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for (doc_phi, doc_words) in zip(phi, corpus):\n        for (n, word_index) in enumerate(doc_words):\n            beta[word_index] += doc_phi[n]\n    beta /= beta.sum(axis=0, keepdims=True)\n    beta = np.clip(beta, 0, 1)\n    beta = np.round(beta, decimals=4)\n    beta_list_of_lists = beta.tolist()\n    return beta_list_of_lists"}
{"task_id": 198, "completion_id": 7, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for d in range(len(corpus)):\n        doc = corpus[d]\n        phi_d = phi[d]\n        for n in range(len(doc)):\n            word = doc[n]\n            beta[word] += phi_d[n]\n    column_sums = beta.sum(axis=0)\n    for topic in range(T):\n        if column_sums[topic] > 0:\n            beta[:, topic] /= column_sums[topic]\n    beta_rounded = np.round(beta, decimals=4).tolist()\n    return beta_rounded"}
{"task_id": 198, "completion_id": 8, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T), dtype=np.float64)\n    for (d, doc) in enumerate(corpus):\n        for (n, word_index) in enumerate(doc):\n            beta[word_index] += phi[d][n]\n    column_sums = beta.sum(axis=0)\n    for t in range(T):\n        if column_sums[t] != 0:\n            beta[:, t] /= column_sums[t]\n    return [list(map(lambda x: round(x, 4), row)) for row in beta]\nphi = [np.array([[0.1, 0.9], [0.8, 0.2]]), np.array([[0.3, 0.7]])]\ncorpus = [[0, 1], [0]]\nV = 2\nbeta = update_beta(phi, corpus, V)"}
{"task_id": 198, "completion_id": 9, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for (d, tokens) in enumerate(corpus):\n        for (n, token) in enumerate(tokens):\n            beta[token] += phi[d][n]\n    beta /= beta.sum(axis=0, keepdims=True)\n    beta = np.round(beta, 4)\n    beta = beta.tolist()\n    return beta"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef euclidean_distance(x, y):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((x - y) ** 2))\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n = X.shape[0]\n    medoids = np.arange(k)\n    cost = float('inf')\n    while True:\n        total_cost = 0\n        assignments = np.zeros(n, dtype=int) - 1\n        valid = True\n        for i in range(n):\n            min_dist = float('inf')\n            min_index = -1\n            for (ind, medoid) in enumerate(medoids):\n                dist = euclidean_distance(X[i], X[medoid])\n                if dist < min_dist:\n                    min_dist = dist\n                    min_index = ind\n                    assignments[i] = min_index\n            total_cost += min_dist\n            if min_index == -1:\n                valid = False\n                break\n        if not valid:\n            break\n        if total_cost >= cost:\n            break\n        else:\n            cost = total_cost\n        for i in range(k):\n            for j in range(n):\n                if j not in medoids:\n                    old_medoid = medoids[i]\n                    medoids[i] = j\n                    new_cost = 0\n                    for p in range(n):\n                        min_dist = float('inf')\n                        closest_medoid = -1\n                        for (q, medoid) in enumerate(medoids):\n                            dist = euclidean_distance(X[p], X[medoid])\n                            if dist < min_dist:\n                                min_dist = dist\n                                closest_medoid = q\n                        new_cost += min_dist\n                    if new_cost < cost:\n                        cost = new_cost\n                    else:\n                        medoids[i] = old_medoid\n    labels = np.zeros(n, dtype=int)\n    for i in range(n):\n        min_dist = float('inf')\n        closest_medoid = -1\n        for (j, medoid) in enumerate(medoids):\n            dist = euclidean_distance(X[i], X[medoid])\n            if dist < min_dist:\n                min_dist = dist\n                closest_medoid = j\n        labels[i] = closest_medoid\n    return labels.tolist()\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 202, "completion_id": 1, "solution": "import numpy as np\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\ndef total_clustering_cost(X, medoids, labels):\n    \"\"\"Calculate the total clustering cost.\"\"\"\n    cost = 0\n    for (i, x) in enumerate(X):\n        cost += euclidean_distance(x, X[medoids[labels[i]]])\n    return cost\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n    \n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n    \n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n_samples = X.shape[0]\n    medoids = list(range(k))\n    while True:\n        best_swap = (-1, -1)\n        best_cost = np.inf\n        current_cost = total_clustering_cost(X, medoids, np.argmin(np.array([[euclidean_distance(x, X[j]) for j in medoids] for x in X]), axis=1))\n        for i in medoids:\n            for j in range(n_samples):\n                if j not in medoids:\n                    temp_medoids = medoids[:]\n                    temp_medoids[temp_medoids.index(i)] = j\n                    temp_cost = total_clustering_cost(X, temp_medoids, np.argmin(np.array([[euclidean_distance(x, X[m]) for m in temp_medoids] for x in X]), axis=1))\n                    if temp_cost < current_cost and temp_cost < best_cost:\n                        best_swap = (i, j)\n                        best_cost = temp_cost\n        if best_swap[0] == -1:\n            break\n        medoids[medoids.index(best_swap[0])] = best_swap[1]\n    labels = np.argmin(np.array([[euclidean_distance(x, X[j]) for j in medoids] for x in X]), axis=1)\n    return labels.tolist()\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 202, "completion_id": 2, "solution": "import numpy as np\ndef euclidean_distance(x, y):\n    return np.sqrt(np.sum((x - y) ** 2))\ndef total_clustering_cost(X, labels, medoids):\n    cost = 0\n    for (i, l) in enumerate(labels):\n        cost += euclidean_distance(X[i], medoids[l])\n    return cost\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    (n_samples, _) = X.shape\n    medoids = X[:k].copy()\n    labels = np.argmin(np.linalg.norm(X[:, None] - medoids, axis=2), axis=1)\n    while True:\n        best_cost_reduction = -np.inf\n        best_swap = None\n        current_cost = total_clustering_cost(X, labels, medoids)\n        for i in range(n_samples):\n            if X[i] in medoids:\n                continue\n            for (j, medoid) in enumerate(medoids):\n                medoids[j] = X[i]\n                updated_labels = np.argmin(np.linalg.norm(X[:, None] - medoids, axis=2), axis=1)\n                trial_cost = total_clustering_cost(X, updated_labels, medoids)\n                if trial_cost < current_cost:\n                    cost_reduction = current_cost - trial_cost\n                    if cost_reduction > best_cost_reduction:\n                        best_cost_reduction = cost_reduction\n                        best_swap = (j, X[i])\n                medoids[j] = medoid\n        if best_swap is None:\n            break\n        (j, new_medoid) = best_swap\n        medoids[j] = new_medoid\n        labels = np.argmin(np.linalg.norm(X[:, None] - medoids, axis=2), axis=1)\n    return labels.tolist()\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])"}
{"task_id": 202, "completion_id": 3, "solution": "import numpy as np\ndef euclidean_distance(x1, x2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.linalg.norm(x1 - x2)\ndef compute_cost(X, labels, medoids):\n    \"\"\"Compute the total clustering cost (sum of distances to the closest medoid for each sample).\"\"\"\n    total_cost = 0\n    for i in range(X.shape[0]):\n        total_cost += euclidean_distance(X[i], medoids[labels[i]])\n    return total_cost\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most. Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    (n_samples, _) = X.shape\n    medoids = X[:k, :].copy()\n    converged = False\n    while not converged:\n        converged = True\n        labels = [np.argmin([euclidean_distance(X[i], m) for m in medoids]) for i in range(n_samples)]\n        current_cost = compute_cost(X, labels, medoids)\n        for i in range(k):\n            for j in range(n_samples):\n                if j not in medoids.tolist():\n                    new_medoids = medoids.copy()\n                    new_medoids[i] = X[j]\n                    new_labels = [np.argmin([euclidean_distance(X[i], m) for m in new_medoids]) for i in range(n_samples)]\n                    new_cost = compute_cost(X, new_labels, new_medoids)\n                    if new_cost < current_cost:\n                        medoids = new_medoids\n                        labels = new_labels\n                        current_cost = new_cost\n                        converged = False\n    final_labels = [np.argmin([euclidean_distance(X[i], m) for m in medoids]) for i in range(n_samples)]\n    return final_labels\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2\nlabels = pam_clustering(X, k)"}
{"task_id": 202, "completion_id": 4, "solution": "import numpy as np\ndef euclidean_distance(a, b):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.linalg.norm(a - b)\ndef total_cost(X, labels, medoids):\n    \"\"\"Calculate the total cost (sum of distances to nearest medoids) for all samples.\"\"\"\n    cost = 0\n    for (i, label) in enumerate(labels):\n        cost += euclidean_distance(X[i], X[medoids[label]])\n    return cost\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n_samples = X.shape[0]\n    medoids = list(range(k))\n    labels = np.argmin([euclidean_distance(X[i], X[m]) for m in medoids], axis=0)\n    cost = total_cost(X, labels, medoids)\n    swap_happened = True\n    while swap_happened:\n        swap_happened = False\n        cost_reduction = 0\n        for m in medoids:\n            for i in range(n_samples):\n                if i not in medoids:\n                    new_medoids = medoids.copy()\n                    new_medoids[new_medoids.index(m)] = i\n                    new_labels = np.argmin([euclidean_distance(X[j], X[m]) for m in new_medoids], axis=0)\n                    new_cost = total_cost(X, new_labels, new_medoids)\n                    if new_cost < cost:\n                        cost = new_cost\n                        labels = new_labels\n                        medoids = new_medoids\n                        swap_happened = True\n                        cost_reduction = cost - new_cost\n                        break\n            if swap_happened:\n                break\n    labels = np.argmin([euclidean_distance(X[i], X[medoid]) for medoid in medoids], axis=0)\n    return labels.tolist()"}
{"task_id": 202, "completion_id": 5, "solution": "import numpy as np\ndef compute_cost(X, medoids, assignment):\n    \"\"\"Calculate the total distance of all samples to their respective medoids.\"\"\"\n    cost = 0\n    for i in range(X.shape[0]):\n        medoid = medoids[assignment[i]]\n        cost += np.linalg.norm(X[i] - medoid)\n    return cost\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n_samples = X.shape[0]\n    medoids = X[:k].copy()\n    assignment = np.argmin(np.linalg.norm(X[:, np.newaxis] - medoids, axis=-1), axis=-1)\n    cost = compute_cost(X, medoids, assignment)\n    improved = True\n    while improved:\n        improved = False\n        for i in range(n_samples):\n            if i not in medoids:\n                for j in range(k):\n                    new_medoids = medoids.copy()\n                    new_medoids[j] = X[i]\n                    new_assignment = np.argmin(np.linalg.norm(X[:, np.newaxis] - new_medoids, axis=-1), axis=-1)\n                    new_cost = compute_cost(X, new_medoids, new_assignment)\n                    if new_cost < cost:\n                        medoids = new_medoids\n                        assignment = new_assignment\n                        cost = new_cost\n                        improved = True\n                        break\n                if improved:\n                    break\n    final_assignment = np.argmin(np.linalg.norm(X[:, np.newaxis] - medoids, axis=-1), axis=-1)\n    return list(final_assignment)\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 202, "completion_id": 6, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster X into k groups using a deterministic PAM algorithm.\"\"\"\n    (n_samples, _) = X.shape\n    medoids = X[:k].copy()\n\n    def total_cost(X, medoids):\n        cost = 0\n        for point in X:\n            distances_to_medoids = np.linalg.norm(point - medoids, axis=1)\n            nearest_medoid_dist = distances_to_medoids.min()\n            cost += nearest_medoid_dist\n        return cost\n\n    def assign_labels(X, medoids):\n        labels = np.zeros(len(X), dtype=int)\n        for (i, point) in enumerate(X):\n            distances_to_medoids = np.linalg.norm(point - medoids, axis=1)\n            label = np.argmin(distances_to_medoids)\n            labels[i] = label\n        return labels\n    converged = False\n    while not converged:\n        converged = True\n        min_cost = total_cost(X, medoids)\n        best_swap = None\n        for medoid_index in range(k):\n            for non_medoid_index in range(n_samples):\n                if non_medoid_index not in range(k) or non_medoid_index in np.arange(medoid_index).tolist():\n                    new_medoids = medoids.copy()\n                    new_medoids[medoid_index] = X[non_medoid_index]\n                    new_cost = total_cost(X, new_medoids)\n                    if new_cost < min_cost:\n                        min_cost = new_cost\n                        best_swap = (medoid_index, new_medoids)\n                        converged = False\n        if not converged:\n            medoids = best_swap[1]\n    labels = assign_labels(X, medoids)\n    return labels.tolist()\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 202, "completion_id": 7, "solution": "import numpy as np\ndef euclidean_distance(x, y):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((x - y) ** 2))\ndef cost(X, assignment, medoids):\n    \"\"\"Calculate the total cost of the assignment.\"\"\"\n    cost_sum = 0\n    for (i, x) in enumerate(X):\n        cost_sum += euclidean_distance(x, medoids[assignment[i]])\n    return cost_sum\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n    \n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n    \n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n_samples = X.shape[0]\n    medoids = X[:k].copy()\n    medoid_indices = list(range(k))\n    assignment = np.arange(n_samples)\n    for i in range(n_samples):\n        min_dist = np.inf\n        for medoid_i in medoid_indices:\n            dist = euclidean_distance(X[i], medoids[medoid_indices[medoid_i]])\n            if dist < min_dist:\n                min_dist = dist\n                assignment[i] = medoid_indices[medoid_i]\n    improved = True\n    while improved:\n        improved = False\n        best_cost = cost(X, assignment, medoids)\n        for medoid_i in medoid_indices:\n            non_medoids = np.delete(np.arange(n_samples), medoid_indices)\n            for non_medoid_i in non_medoids:\n                medoids[medoid_i] = X[non_medoid_i]\n                temp_assignment = assignment.copy()\n                for i in range(n_samples):\n                    min_dist = np.inf\n                    min_med = -1\n                    for medoid_j in medoid_indices:\n                        dist = euclidean_distance(X[i], medoids[medoid_j])\n                        if dist < min_dist:\n                            min_dist = dist\n                            min_med = medoid_j\n                    temp_assignment[i] = min_med\n                new_cost = cost(X, temp_assignment, medoids)\n                if new_cost < best_cost:\n                    best_cost = new_cost\n                    assignment = temp_assignment\n                    medoid_indices[medoid_i] = non_medoid_i\n                    improved = True\n                    break\n            if improved:\n                break\n    return assignment.tolist()\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 202, "completion_id": 8, "solution": "import numpy as np\ndef euclidean_distance(x, y):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.linalg.norm(x - y)\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster X into k groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first k samples of X as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length n_samples containing integer cluster labels.\n    \"\"\"\n    n_samples = X.shape[0]\n    n_features = X.shape[1]\n    medoids = list(range(k))\n    total_cost = float('inf')\n\n    def compute_cost(X, medoids):\n        cluster_assignment = assign_to_clusters(X, medoids)\n        cost = 0\n        for i in range(n_samples):\n            cost += euclidean_distance(X[i], X[cluster_assignment[i]])\n        return (cost, cluster_assignment)\n\n    def assign_to_clusters(X, medoids):\n        return [np.argmin([euclidean_distance(x, X[medoid]) for medoid in medoids]) for x in X]\n    while True:\n        (new_total_cost, new_medoids) = (total_cost, medoids[:])\n        for i in range(n_samples):\n            if i not in medoids:\n                for j in range(k):\n                    temp_medoids = medoids[:]\n                    temp_medoids[j] = i\n                    (temp_cost, _) = compute_cost(X, temp_medoids)\n                    if temp_cost < new_total_cost:\n                        (new_total_cost, new_medoids) = (temp_cost, temp_medoids)\n        if new_total_cost >= total_cost:\n            break\n        else:\n            (total_cost, medoids) = (new_total_cost, new_medoids)\n    cluster_labels = assign_to_clusters(X, medoids)\n    return cluster_labels\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 202, "completion_id": 9, "solution": "import numpy as np\ndef euclidean_distance(x1, x2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((x1 - x2) ** 2))\ndef total_clustering_cost(X, medoids, labels):\n    \"\"\"Calculate the total clustering cost.\"\"\"\n    cost = 0\n    for (i, x) in enumerate(X):\n        cost += euclidean_distance(x, medoids[labels[i]])\n    return cost\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\"\"\"\n    (n_samples, _) = X.shape\n    medoids = X[:k].copy()\n    labels = np.array([np.argmin([euclidean_distance(x, m) for m in medoids]) for x in X])\n    improve = True\n    while improve:\n        best_swap = (-1, -1)\n        min_cost_reduction = 0\n        improve = False\n        for (i, cur_medoid) in enumerate(medoids):\n            for (j, candidate) in enumerate(X):\n                if j not in best_swap and i != j:\n                    labels_no_i = np.array([np.argmin([euclidean_distance(x, medoids[l]) for l in range(k) if l != i]) for x in X])\n                    new_medoids = medoids.copy()\n                    new_medoids[i] = candidate\n                    labels_with_j = np.array([np.argmin([euclidean_distance(x, m) for m in new_medoids]) for x in X])\n                    cost_no_i = total_clustering_cost(X, medoids, labels_no_i)\n                    cost_with_j = total_clustering_cost(X, new_medoids, labels_with_j)\n                    cost_reduction = cost_no_i - cost_with_j\n                    if cost_reduction > min_cost_reduction:\n                        min_cost_reduction = cost_reduction\n                        best_swap = (i, j)\n                        improve = True\n        if improve:\n            (i, j) = best_swap\n            medoids[i] = X[j]\n            labels = np.array([np.argmin([euclidean_distance(x, m) for m in medoids]) for x in X])\n    return list(labels)\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\"\"\"\n    if not (isinstance(x_train, np.ndarray) and isinstance(x_test, np.ndarray) and isinstance(y_train, np.ndarray)):\n        x_train = np.array(x_train)\n        y_train = np.array(y_train)\n        x_test = np.array(x_test)\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    bias_col = np.ones((x_train.shape[0], 1))\n    x_train = np.hstack((bias_col, expand_poly_features(x_train, degree)))\n    bias_col = np.ones((x_test.shape[0], 1))\n    x_test = np.hstack((bias_col, expand_poly_features(x_test, degree)))\n    x_train[:, 1:] = (x_train[:, 1:] - np.mean(x_train[:, 1:], axis=0)) / np.std(x_train[:, 1:], axis=0)\n    x_test[:, 1:] = (x_test[:, 1:] - np.mean(x_test[:, 1:], axis=0)) / np.std(x_test[:, 1:], axis=0)\n    y_train = y_train.reshape((-1, 1))\n    weights = np.zeros((x_train.shape[1], 1))\n    for _ in range(n_iterations):\n        predictions = np.dot(x_train, weights)\n        residuals = predictions - y_train\n        gradient = np.dot(x_train.T, residuals)\n        l1_penalty = np.sign(weights[1:])\n        regularization = reg_factor * (l1_ratio * l1_penalty + (1 - l1_ratio) * weights[1:])\n        gradient[1:] += regularization\n        gradient[0] = np.dot(x_train[:, 0].T, residuals)\n        weights -= learning_rate * gradient / x_train.shape[0]\n    predictions_test = np.dot(x_test, weights)\n    return np.round(predictions_test.flatten(), 4).tolist()\ndef expand_poly_features(x, degree):\n    \"\"\"Expand x to include polynomial features up to the given degree.\"\"\"\n    poly_features = x.copy()\n    for d in range(2, degree + 1):\n        for i in range(x.shape[1]):\n            poly_features = np.hstack((poly_features, x[:, i:i + 1] ** d))\n    return poly_features"}
{"task_id": 216, "completion_id": 1, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\"\"\"\n    (x_train, y_train, x_test) = (np.array(x_train), np.array(y_train), np.array(x_test))\n    if x_train.shape[1] != x_test.shape[1] or n_iterations <= 0:\n        return -1\n\n    def polynomial_features(X, degree):\n        (n_samples, n_features) = X.shape\n        X_new = [np.ones(n_samples)]\n        for degree in range(1, degree + 1):\n            for index in range(n_features):\n                X_new.append(X[:, index] ** degree)\n        return np.stack(X_new, axis=1)\n\n    def standard_scaler(X):\n        X[:, 1:] = (X[:, 1:] - X[:, 1:].mean(axis=0)) / X[:, 1:].std(axis=0)\n        return X\n    x_train = standard_scaler(polynomial_features(x_train, degree))\n    x_test = standard_scaler(polynomial_features(x_test, degree))\n    weights = np.zeros(x_train.shape[1])\n    for _ in range(n_iterations):\n        residuals = x_train @ weights - y_train\n        gradient = 2 * x_train.T @ residuals / len(y_train)\n        ridge_part = 2 * reg_factor * (1 - l1_ratio) * weights\n        lasso_part = 2 * reg_factor * l1_ratio * np.sign(weights)\n        gradient[1:] += ridge_part[1:] + lasso_part[1:]\n        weights -= learning_rate * gradient\n    predictions = x_test @ weights\n    return np.round(predictions, 4).tolist()"}
{"task_id": 216, "completion_id": 2, "solution": "import numpy as np\nimport itertools\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    x_train = np.array(x_train)\n    x_test = np.array(x_test)\n    y_train = np.array(y_train)\n    if x_train.shape[1] != x_test.shape[1] or n_iterations <= 0:\n        return -1\n    feature_mapping = []\n    for i in range(1, degree + 1):\n        feature_mapping.extend([tuple(np.sort(lst)) for lst in itertools.combinations_with_replacement(range(x_train.shape[1]), i)])\n    X_train_poly = np.array([np.prod(np.power(x_train[i], [x for x in feature if x != 0]), axis=0) for i in range(x_train.shape[0]) for feature in feature_mapping]).reshape(x_train.shape[0], -1)\n    X_test_poly = np.array([np.prod(np.power(x_test[i], [x for x in feature if x != 0]), axis=0) for i in range(x_test.shape[0]) for feature in feature_mapping]).reshape(x_test.shape[0], -1)\n    X_train_scaled = (X_train_poly - X_train_poly.mean(axis=0)) / X_train_poly.std(axis=0)\n    X_train_scaled[:, 0] = 1\n    X_test_scaled = (X_test_poly - X_test_poly.mean(axis=0)) / X_test_poly.std(axis=0)\n    X_test_scaled[:, 0] = 1\n    weights = np.zeros(X_train_scaled.shape[1])\n    for _ in range(n_iterations):\n        predictions = X_train_scaled @ weights\n        error = predictions - y_train\n        gradients = X_train_scaled.T @ error / x_train.shape[0]\n        l2_term = reg_factor * (1 - l1_ratio) * weights\n        l2_term[0] = 0\n        l1_term = reg_factor * l1_ratio * np.sign(weights)\n        l1_term[0] = 0\n        weights -= learning_rate * (gradients + l2_term + l1_term)\n    return np.round(X_test_scaled @ weights, 4).tolist()"}
{"task_id": 216, "completion_id": 3, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    if x_train.shape[-1] != x_test.shape[-1] or n_iterations <= 0:\n        return -1\n\n    def expand_poly(x, degree):\n        return np.hstack([x ** (i + 1) for i in range(degree)])\n    x_train = expand_poly(x_train, degree)\n    x_test = expand_poly(x_test, degree)\n\n    def standardize(x):\n        mu = x.mean(axis=0)\n        sigma = x.std(axis=0)\n        x_norm = (x - mu) / sigma\n        x_norm[:, 0] = 1\n        return x_norm\n    x_train = standardize(x_train)\n    x_test = standardize(x_test)\n    x_train = np.hstack([np.ones((x_train.shape[0], 1)), x_train])\n    x_test = np.hstack([np.ones((x_test.shape[0], 1)), x_test])\n    weights = np.zeros(x_train.shape[1])\n    m = len(y_train)\n    for _ in range(n_iterations):\n        predictions = np.dot(x_train, weights)\n        errors = predictions - y_train\n        grad = 2 * np.dot(x_train.T, errors) / m\n        l1_grad = l1_ratio * np.sign(weights)\n        l2_grad = (1 - l1_ratio) * 2 * weights\n        l1_grad[0] = 0\n        l2_grad[0] = 0\n        regular_grad = grad + reg_factor * (l1_grad + l2_grad)\n        weights -= learning_rate * regular_grad\n    predictions_test = np.dot(x_test, weights)\n    return np.round(predictions_test, 4).tolist()"}
{"task_id": 216, "completion_id": 4, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\"\"\"\n\n    def poly_features(mat, deg):\n        \"\"\"Return matrix with polynomial features of given degree.\"\"\"\n        expanded = []\n        for sample in mat:\n            expanded.append([1.0] + [feat ** i for i in range(1, deg + 1) for feat in sample])\n        return np.array(expanded)\n\n    def standardize_features(mat):\n        \"\"\"Standardize all features except the bias (first column).\"\"\"\n        mat[:, 1:] = (mat[:, 1:] - mat[:, 1:].mean(axis=0)) / mat[:, 1:].std(axis=0)\n        return mat\n    if not (x_train.shape[0] == len(y_train) and x_train.shape[1] == x_test.shape[1] and (n_iterations > 0)):\n        return -1\n    x_train_poly = poly_features(x_train, degree)\n    x_test_poly = poly_features(x_test, degree)\n    x_train_std = standardize_features(x_train_poly)\n    x_test_std = standardize_features(x_test_poly)\n    weights = np.zeros(x_train_std.shape[1])\n    for _ in range(n_iterations):\n        linear_pred = x_train_std @ weights\n        error = linear_pred - y_train\n        regularization = reg_factor * (l1_ratio * np.sign(weights) + (1 - l1_ratio) * weights) * (1 - (np.sign(weights) == 0).astype(int))\n        gradient = 1 / x_train_std.shape[0] * x_train_std.T @ error + regularization\n        weights -= learning_rate * gradient\n        weights[weights < 1e-10] = 0\n    predictions = x_test_std @ weights\n    return np.round(predictions, 4).tolist()"}
{"task_id": 216, "completion_id": 5, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    if x_train.shape[1] != x_test.shape[1] or n_iterations <= 0:\n        return -1\n\n    def generate_polynomial_features(X, degree):\n        \"\"\"Generate polynomial features up to the given degree.\"\"\"\n        features = [np.ones(X.shape[0])]\n        for d in range(1, degree + 1):\n            for i in range(X.shape[1]):\n                features.append(X[:, i] ** d)\n        return np.column_stack(features)\n\n    def normalize_features(X):\n        \"\"\"Standardize features (0 mean and unit variance).\"\"\"\n        return (X - X.mean(axis=0)) / X.std(axis=0)\n    x_train = generate_polynomial_features(x_train, degree)\n    x_train = normalize_features(x_train)\n    x_train = np.insert(x_train, 0, 1, axis=1)\n    x_test = generate_polynomial_features(x_test, degree)\n    x_test = normalize_features(x_test)\n    x_test = np.insert(x_test, 0, 1, axis=1)\n    weights = np.zeros(x_train.shape[1])\n    for _ in range(n_iterations):\n        predictions = x_train.dot(weights)\n        errors = predictions - y_train\n        gradient = 1 / x_train.shape[0] * x_train.T.dot(errors)\n        penalty = reg_factor * (l1_ratio * np.sign(weights) + (1 - l1_ratio) * weights)\n        penalty[0] = 0\n        weights -= learning_rate * (gradient + penalty)\n    predictions = x_test.dot(weights)\n    return np.round(predictions, 4).tolist()"}
{"task_id": 216, "completion_id": 6, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\"\"\"\n    if not (isinstance(x_train, np.ndarray) and isinstance(y_train, np.ndarray) and isinstance(x_test, np.ndarray)):\n        (x_train, y_train, x_test) = map(np.array, [x_train, y_train, x_test])\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    x_train_poly = np.vander(x_train, degree + 1, increasing=True)[:, :-1]\n    x_test_poly = np.vander(x_test, degree + 1, increasing=True)[:, :-1]\n    means = np.mean(x_train_poly, axis=0, keepdims=True)\n    std_devs = np.std(x_train_poly, axis=0, keepdims=True)\n    x_train_poly = (x_train_poly - means) / std_devs\n    x_test_poly = (x_test_poly - means) / std_devs\n    x_train_poly = np.insert(x_train_poly, 0, 1.0, axis=1)\n    x_test_poly = np.insert(x_test_poly, 0, 1.0, axis=1)\n    weights = np.zeros(x_train_poly.shape[1])\n    m = x_train_poly.shape[0]\n    l2_factor = reg_factor * (1 - l1_ratio)\n    l1_factor = reg_factor * l1_ratio\n    for _ in range(n_iterations):\n        predictions = x_train_poly @ weights\n        error = predictions - y_train\n        gradient = 1 / m * x_train_poly.T @ error\n        gradient[1:] += l2_factor * 2 * weights[1:] + l1_factor * np.sign(weights[1:])\n        weights -= learning_rate * gradient\n    predictions = x_test_poly @ weights\n    return np.round(predictions, 4).tolist()"}
{"task_id": 216, "completion_id": 7, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n\n    def generate_polynomial_features(X, degree):\n        if degree > 1:\n            X_expanded = [X]\n            for d in range(2, degree + 1):\n                X_expanded.extend([pow(X, d) for X in X_expanded])\n            return np.concatenate(X_expanded, axis=1)\n        return X\n    x_train = generate_polynomial_features(x_train, degree)\n    x_test = generate_polynomial_features(x_test, degree)\n\n    def standardize_data(X):\n        mean = np.mean(X, axis=0)\n        std = np.std(X, axis=0)\n        X_standardized = (X - mean) / std\n        X_standardized[:, 0] = 1\n        return X_standardized\n    x_train = standardize_data(x_train)\n    x_test = standardize_data(x_test)\n    n_features = x_train.shape[1]\n    weights = np.zeros(n_features)\n    for _ in range(n_iterations):\n        predictions = np.dot(x_train, weights)\n        errors = predictions - y_train\n        gradient = 2 * np.dot(x_train.T, errors) / len(y_train)\n        l1_gradient = l1_ratio * reg_factor * np.sign(weights)\n        l1_gradient[0] = 0\n        l2_gradient = (1 - l1_ratio) * reg_factor * weights\n        gradient = gradient + l1_gradient + l2_gradient\n        weights -= learning_rate * gradient\n    y_test_pred = np.dot(x_test, weights)\n    return np.round(y_test_pred, 4).tolist()"}
{"task_id": 216, "completion_id": 8, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    if not (isinstance(x_train, (list, np.ndarray)) and isinstance(y_train, (list, np.ndarray)) and isinstance(x_test, (list, np.ndarray))):\n        return -1\n    x_train = np.array(x_train)\n    y_train = np.array(y_train).reshape(-1, 1)\n    x_test = np.array(x_test)\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    (n_samples, n_features) = x_train.shape\n    poly_x_train = []\n    for d in range(1, degree + 1):\n        poly_x_train.append(np.array([x ** d for x in x_train.T]).T)\n    poly_x_train = np.hstack(poly_x_train)\n    poly_x_train = (poly_x_train - poly_x_train.mean(axis=0)) / poly_x_train.std(axis=0)\n    poly_x_train = np.hstack([np.ones((n_samples, 1)), poly_x_train])\n    poly_x_test = np.array([x ** d for d in range(1, degree + 1) for x in x_test.T]).T\n    poly_x_test = (poly_x_test - poly_x_train[:, 1:].mean(axis=0)) / poly_x_train[:, 1:].std(axis=0)\n    poly_x_test = np.hstack([np.ones((x_test.shape[0], 1)), poly_x_test])\n    n_features = poly_x_train.shape[1]\n    weights = np.zeros((n_features, 1))\n    for iteration in range(n_iterations):\n        errors = np.dot(poly_x_train, weights) - y_train\n        gradient = 2 * np.dot(poly_x_train.T, errors) + reg_factor * (l1_ratio * np.sign(weights) + (1 - l1_ratio) * weights)\n        gradient[0, 0] -= reg_factor * l1_ratio * weights[0, 0]\n        weights -= learning_rate * gradient / len(x_train)\n    predictions = np.dot(poly_x_test, weights)\n    return np.round(predictions.flatten(), 4).tolist()"}
{"task_id": 216, "completion_id": 9, "solution": "import numpy as np\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    if x_train.shape[0] != len(y_train) or x_train.shape[1] != x_test.shape[1] or n_iterations <= 0:\n        return -1\n    poly = PolynomialFeatures(degree)\n    x_train_poly = poly.fit_transform(x_train)\n    x_test_poly = poly.transform(x_test)\n    scaler = StandardScaler(with_mean=False, with_std=False)\n    scaler.mean_ = np.mean(x_train_poly[:, 1:], axis=0)\n    scaler.scale_ = np.std(x_train_poly[:, 1:], axis=0)\n    x_train_poly[:, 1:] = (x_train_poly[:, 1:] - scaler.mean_) / scaler.scale_\n    x_test_poly[:, 1:] = (x_test_poly[:, 1:] - scaler.mean_) / scaler.scale_\n    weights = np.zeros(x_train_poly.shape[1])\n    for _ in range(n_iterations):\n        y_pred = x_train_poly.dot(weights)\n        error = y_pred - y_train\n        gradient = 2 * x_train_poly.T.dot(error) / x_train_poly.shape[0] + reg_factor * (l1_ratio * np.sign(weights) + (1 - l1_ratio) * weights)\n        gradient[0] -= reg_factor * l1_ratio * np.sign(weights[0])\n        weights -= learning_rate * gradient\n    y_test_pred = x_test_poly.dot(weights)\n    return np.round(y_test_pred, 4).tolist()"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    sigmoid_scores = 1 / (1 + np.exp(-predicted))\n    grad = actual * (1 / (1 + np.exp(actual * predicted)))\n    grad = np.round(grad, decimals=6)\n    hess = sigmoid_scores * (1 - sigmoid_scores)\n    hess = np.round(hess, decimals=6)\n    prob = sigmoid_scores\n    prob = np.round(prob, decimals=6)\n    return (grad.tolist(), hess.tolist(), prob.tolist())\nactual = [1, -1, 1, -1]\npredicted = [0.5, -0.2, 0.8, -0.4]"}
{"task_id": 217, "completion_id": 1, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual, dtype=float)\n    predicted = np.array(predicted, dtype=float)\n    sigmoid_scores = 1 / (1 + np.exp(-predicted))\n    grad = actual * (sigmoid_scores - 1)\n    hess = sigmoid_scores * (1 - sigmoid_scores)\n    prob = sigmoid_scores\n    gradient_list = np.round(grad.tolist(), 6)\n    hessian_list = np.round(hess.tolist(), 6)\n    probability_list = np.round(prob.tolist(), 6)\n    return (gradient_list, hessian_list, probability_list)\nactual = [1, 1, -1]\npredicted = [0.2, 0.5, -0.3]"}
{"task_id": 217, "completion_id": 2, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    (actual, predicted) = (np.array(actual), np.array(predicted))\n    sigmoid_pred = 1 / (1 + np.exp(-predicted))\n    grad = actual * (1 / (1 + np.exp(actual * predicted)))\n    hess = sigmoid_pred * (1 - sigmoid_pred)\n    prob = sigmoid_pred\n    return (np.round(grad, 6).tolist(), np.round(hess, 6).tolist(), np.round(prob, 6).tolist())"}
{"task_id": 217, "completion_id": 3, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual, dtype=float)\n    predicted = np.array(predicted, dtype=float)\n    sigmoid_predicted = 1 / (1 + np.exp(-predicted))\n    probability_list = np.round(sigmoid_predicted, decimals=6).tolist()\n    grad = actual * (1 / (1 + np.exp(actual * predicted)))\n    gradient_list = np.round(grad, decimals=6).tolist()\n    hess = sigmoid_predicted * (1 - sigmoid_predicted)\n    hessian_list = np.round(hess, decimals=6).tolist()\n    return (gradient_list, hessian_list, probability_list)\nactual = [1, -1, 1]\npredicted = [0.5, -0.5, 1.0]"}
{"task_id": 217, "completion_id": 4, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual_np = np.array(actual, dtype=float)\n    predicted_np = np.array(predicted, dtype=float)\n    sigmoid_pred = 1 / (1 + np.exp(-predicted_np))\n    grad = actual_np * (1 / (1 + np.exp(actual_np * predicted_np)) - 1)\n    hess = sigmoid_pred * (1 - sigmoid_pred)\n    prob = sigmoid_pred\n    gradient_list = np.round(grad, 6).tolist()\n    hessian_list = np.round(hess, 6).tolist()\n    probability_list = np.round(prob, 6).tolist()\n    return (gradient_list, hessian_list, probability_list)\nactual = [1, -1, 1]\npredicted = [0.5, -0.2, 2.0]"}
{"task_id": 217, "completion_id": 5, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual_np = np.array(actual, dtype=float)\n    predicted_np = np.array(predicted, dtype=float)\n    sigmoid_z = 1 / (1 + np.exp(-predicted_np))\n    epsilon = 1e-15\n    sigmoid_z = np.clip(sigmoid_z, epsilon, 1 - epsilon)\n    grad = actual_np * sigmoid(-actual_np * predicted_np)\n    hess = sigmoid_z * (1 - sigmoid_z)\n    prob = sigmoid_z\n\n    def sigmoid(x):\n        return 1 / (1 + np.exp(-x))\n    grad_rounded = np.round(grad, 6).tolist()\n    hess_rounded = np.round(hess, 6).tolist()\n    prob_rounded = np.round(prob, 6).tolist()\n    return (grad_rounded, hess_rounded, prob_rounded)"}
{"task_id": 217, "completion_id": 6, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual_array = np.array(actual, dtype=np.int)\n    predicted_array = np.array(predicted, dtype=np.float)\n    sigmoid_pred = 1.0 / (1.0 + np.exp(-predicted_array))\n    grad = actual_array * sigmoid_pred ** (-(actual_array + 1) / 2) * (1 - sigmoid_pred ** (-(actual_array - 1) / 2))\n    hess = sigmoid_pred * (1 - sigmoid_pred)\n    grad_list = np.round(grad, 6).tolist()\n    hessian_list = np.round(hess, 6).tolist()\n    probability_list = np.round(sigmoid_pred, 6).tolist()\n    return (grad_list, hessian_list, probability_list)\nactual = [1, -1, 1]\npredicted = [0.5, 1.2, -0.8]"}
{"task_id": 217, "completion_id": 7, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual_array = np.array(actual)\n    predicted_array = np.array(predicted)\n    sigmoid_predicted = 1 / (1 + np.exp(-predicted_array))\n    sigmoid_neg_actual_predicted = 1 / (1 + np.exp(actual_array * predicted_array))\n    gradient = -actual_array * sigmoid_neg_actual_predicted\n    hessian = sigmoid_predicted * (1 - sigmoid_predicted)\n    probability = sigmoid_predicted\n    rounded_gradient = np.round(gradient, 6).tolist()\n    rounded_hessian = np.round(hessian, 6).tolist()\n    rounded_probability = np.round(probability, 6).tolist()\n    return (rounded_gradient, rounded_hessian, rounded_probability)\nactual = [1, -1, 1, -1]\npredicted = [0.5, -0.5, 1.0, -1.0]"}
{"task_id": 217, "completion_id": 8, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if len(actual) != len(predicted):\n        raise ValueError(\"The 'actual' and 'predicted' must be of the same size.\")\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    gradient = actual * sigmoid(-actual * predicted)\n    hessian = sigmoid(predicted) * (1 - sigmoid(predicted))\n    probability = sigmoid(predicted)\n    gradient_list = [round(x, 6) for x in gradient.tolist()]\n    hessian_list = [round(x, 6) for x in hessian.tolist()]\n    probability_list = [round(x, 6) for x in probability.tolist()]\n    return (gradient_list, hessian_list, probability_list)\nactual = [1, -1, 1]\npredicted = [0.7, -0.3, 1.5]"}
{"task_id": 217, "completion_id": 9, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual_np = np.array(actual, dtype=np.float64)\n    predicted_np = np.array(predicted, dtype=np.float64)\n    assert actual_np.ndim == 1 and predicted_np.ndim == 1, 'Inputs should be 1-dimensional!'\n    assert len(actual_np) == len(predicted_np), 'Inputs should be of the same length!'\n    sigmoid_predicted = 1 / (1 + np.exp(-predicted_np))\n    gradient = actual_np * (sigmoid_predicted - 1)\n    hessian = sigmoid_predicted * (1 - sigmoid_predicted)\n    probability = sigmoid_predicted\n    return (list((round(i, 6) for i in gradient)), list((round(i, 6) for i in hessian)), list((round(i, 6) for i in probability)))"}
{"task_id": 218, "completion_id": 0, "solution": "def calculate_score(hand: list[int]) -> int:\n    \"\"\"Calculate the score of a hand in Blackjack considering the Aces.\"\"\"\n    score = sum(hand)\n    aces = hand.count(1)\n    while score > 21 and aces > 0:\n        score -= 10\n        aces -= 1\n    return score\ndef has_natural_blackjack(hand: list[int]) -> bool:\n    \"\"\"Check if the hand is a natural blackjack.\"\"\"\n    return len(hand) == 2 and (hand[0] == 1 or hand[1] == 1) and (hand[0] == 10 or hand[1] == 10)\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function must follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    player_score = calculate_score(player)\n    dealer_score = calculate_score(dealer)\n    if player_score > 21:\n        return -1\n    elif dealer_score > 21:\n        return 1\n    elif has_natural_blackjack(player):\n        return 1.5\n    elif player_score > dealer_score:\n        return 1\n    elif player_score < dealer_score:\n        return -1\n    else:\n        return 0"}
{"task_id": 218, "completion_id": 1, "solution": "def calculate_hand_value(hand: list[int]) -> int:\n    value = sum(hand)\n    if 1 in hand and value + 10 <= 21:\n        value += 10\n    return value\ndef is_natural_blackjack(hand: list[int]) -> bool:\n    return len(hand) == 2 and 1 in hand and (10 in hand)\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    player_value = calculate_hand_value(player)\n    dealer_value = calculate_hand_value(dealer)\n    if player_value > 21:\n        return -1\n    elif dealer_value > 21:\n        return 1\n    elif is_natural_blackjack(player) and len(player) == 2 and (dealer_value <= 21):\n        return 1.5\n    elif player_value == dealer_value:\n        return 0\n    elif player_value > dealer_value:\n        return 1\n    else:\n        return -1"}
{"task_id": 218, "completion_id": 2, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_value(hand: list[int]) -> int:\n        \"\"\"Calculate the value of a hand.\"\"\"\n        total = sum(hand)\n        num_aces = hand.count(1)\n        if num_aces and total + 10 <= 21:\n            total += 10\n        return total\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"Check if the hand is a natural blackjack.\"\"\"\n        return len(hand) == 2 and (1 in hand and 10 in hand)\n    player_value = hand_value(player)\n    dealer_value = hand_value(dealer)\n    if player_value > 21:\n        return -1\n    if dealer_value > 21:\n        return 1\n    if is_natural_blackjack(player) and (not is_natural_blackjack(dealer)):\n        return 1.5\n    if player_value == dealer_value:\n        return 0\n    if player_value > dealer_value:\n        return 1\n    return -1"}
{"task_id": 218, "completion_id": 3, "solution": "from typing import List\ndef card_sum(cards: List[int]) -> int:\n    \"\"\"Calculate the optimal score of a hand of cards.\"\"\"\n    total = sum(cards)\n    num_aces = cards.count(1)\n    if total + 10 <= 21 and num_aces:\n        total += 10\n    return total\ndef is_21_with_ace_and_ten(hand: List[int]) -> bool:\n    \"\"\"Check if the hand constitutes a natural blackjack.\"\"\"\n    return sum(hand) == 11 and (1 in hand and 10 in hand)\ndef blackjack_outcome(player: List[int], dealer: List[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n    \n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n    \n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    player_score = card_sum(player)\n    dealer_score = card_sum(dealer)\n    if player_score > 21:\n        return -1\n    if dealer_score > 21:\n        return 1\n    if is_21_with_ace_and_ten(player) and len(player) == 2:\n        return 1.5\n    if player_score == dealer_score:\n        return 0\n    if player_score > dealer_score:\n        return 1\n    return -1"}
{"task_id": 218, "completion_id": 4, "solution": "from typing import List\ndef calculate_hand_value(cards: List[int]) -> int:\n    \"\"\"Calculate the best hand value for a given list of cards.\"\"\"\n    value = sum(cards)\n    if 1 in cards and value + 10 <= 21:\n        value += 10\n    return value\ndef blackjack_outcome(player: List[int], dealer: List[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function must follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    player_value = calculate_hand_value(player)\n    dealer_value = calculate_hand_value(dealer)\n    if player_value > 21:\n        return -1\n    elif dealer_value > 21:\n        return 1\n    elif player_value > dealer_value:\n        if len(player) == 2 and player_value == 21:\n            return 1.5\n        return 1\n    elif player_value < dealer_value:\n        return -1\n    else:\n        return 0"}
{"task_id": 218, "completion_id": 5, "solution": "def calculate_hand_value(hand: list[int]) -> int:\n    \"\"\"Calculate the score of a hand in Blackjack.\"\"\"\n    value = sum(hand)\n    if 1 in hand and value + 10 <= 21:\n        value += 10\n    return value\ndef is_bust(hand: list[int]) -> bool:\n    \"\"\"Check if the hand is a bust.\"\"\"\n    return calculate_hand_value(hand) > 21\ndef is_natural_blackjack(hand: list[int]) -> bool:\n    \"\"\"Check if the hand is a natural blackjack.\"\"\"\n    return len(hand) == 2 and (hand[0] == 1) == (hand[1] == 10)\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    player_value = calculate_hand_value(player)\n    dealer_value = calculate_hand_value(dealer)\n    if is_bust(player):\n        return -1\n    elif is_bust(dealer):\n        return 1\n    elif is_natural_blackjack(player) and (not is_bust(dealer)):\n        return 1.5\n    elif player_value > dealer_value:\n        return 1\n    elif player_value == dealer_value:\n        return 0\n    else:\n        return -1"}
{"task_id": 218, "completion_id": 6, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_value(hand):\n        value = sum(hand)\n        aces = hand.count(1)\n        while aces > 0 and value + 10 <= 21:\n            value += 10\n            aces -= 1\n        return value\n\n    def is_natural_blackjack(hand):\n        return len(hand) == 2 and 1 in hand and (10 in hand)\n    player_score = hand_value(player)\n    dealer_score = hand_value(dealer)\n    if player_score > 21:\n        return -1\n    elif dealer_score > 21:\n        return 1\n    elif is_natural_blackjack(player) and player_score > dealer_score:\n        return 1.5\n    elif player_score == dealer_score:\n        return 0\n    elif player_score > dealer_score:\n        return 1\n    else:\n        return -1"}
{"task_id": 218, "completion_id": 7, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def score(hand: list[int]) -> int:\n        \"\"\"Calculate the score of a hand, considering the value of aces.\"\"\"\n        hand_sum = sum(hand)\n        num_aces = hand.count(1)\n        while num_aces > 0 and hand_sum + 10 <= 21:\n            hand_sum += 10\n            num_aces -= 1\n        return hand_sum\n    player_score = score(player)\n    dealer_score = score(dealer)\n    if player_score > 21:\n        return -1\n    if dealer_score > 21:\n        return +1\n    if len(player) == 2 and 1 in player and (10 in player):\n        if dealer_score < 21:\n            return 1.5\n        else:\n            return 1\n    if player_score == dealer_score:\n        return 0\n    elif player_score > dealer_score:\n        return 1\n    else:\n        return -1"}
{"task_id": 218, "completion_id": 8, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_value(hand: list[int]) -> int:\n        (value, aces) = (sum((card for card in hand if card != 1)), hand.count(1))\n        while value + aces * 11 <= 21:\n            value += 10 if aces > 1 or value + 10 <= 11 else aces * 10\n            aces = 0\n        return value\n    player_score = hand_value(player)\n    dealer_score = hand_value(dealer)\n    if player_score > 21:\n        return -1\n    elif dealer_score > 21:\n        return 1\n    if player_score == 21 and len(player) == 2 and (dealer_score != 21 or len(dealer) != 2):\n        return 1.5\n    if player_score == dealer_score:\n        return 0\n    elif player_score > dealer_score:\n        return 1\n    else:\n        return -1"}
{"task_id": 218, "completion_id": 9, "solution": "def calculate_score(hand: list[int]) -> int:\n    \"\"\"Calculate the best legal score for a hand in Blackjack.\"\"\"\n    score = 0\n    aces = hand.count(1)\n    for card in hand:\n        if card == 1:\n            continue\n        score += min(card, 10)\n    if aces > 0 and score + aces * 1 + 10 <= 21:\n        score += aces - 1 + 11\n    else:\n        score += aces\n    return score\ndef has_blackjack(hand: list[int]) -> bool:\n    \"\"\"Check if the hand is a 2-card blackjack.\"\"\"\n    return len(hand) == 2 and (hand[0] == 1 and hand[1] == 10 or (hand[0] == 10 and hand[1] == 1))\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    player_score = calculate_score(player)\n    dealer_score = calculate_score(dealer)\n    if player_score > 21:\n        return -1\n    if dealer_score > 21:\n        return 1\n    if has_blackjack(player):\n        if has_blackjack(dealer):\n            return 0\n        return 1.5\n    if player_score > dealer_score:\n        return 1\n    elif player_score == dealer_score:\n        return 0\n    else:\n        return -1"}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    slErrors = squared_log_error(actual, predicted)\n    return round(np.mean(slErrors), 4)"}
{"task_id": 221, "completion_id": 1, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Calculate element-wise squared logarithmic errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    if isinstance(actual, (list, tuple)):\n        actual = np.array(actual)\n    if isinstance(predicted, (list, tuple)):\n        predicted = np.array(predicted)\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    sl_error = squared_log_error(actual, predicted)\n    msle_value = np.mean(sl_error)\n    return round(msle_value, 4)"}
{"task_id": 221, "completion_id": 2, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper that returns element-wise squared log errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    if not isinstance(actual, np.ndarray):\n        actual = np.array(actual)\n    if not isinstance(predicted, np.ndarray):\n        predicted = np.array(predicted)\n    if actual.shape != predicted.shape:\n        return -1\n    if (actual < 0).any() or (predicted < 0).any():\n        return -1\n    sq_errors = squared_log_error(actual, predicted)\n    msle = np.mean(sq_errors)\n    return np.round(msle, 4)"}
{"task_id": 221, "completion_id": 3, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper that returns element-wise squared log errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    if not isinstance(actual, (list, tuple, np.ndarray)) or not isinstance(predicted, (list, tuple, np.ndarray)):\n        return -1\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    return round(np.mean(squared_log_error(actual, predicted)), 4)"}
{"task_id": 221, "completion_id": 4, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    squared_errors = squared_log_error(actual, predicted)\n    msle = np.mean(squared_errors)\n    return round(msle, 4)"}
{"task_id": 221, "completion_id": 5, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper that returns element-wise squared log errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    try:\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n    except Exception as e:\n        print(f'An error occurred during conversion to numpy arrays: {e}')\n        return -1\n    if actual.shape != predicted.shape or np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    sq_log_errors = squared_log_error(actual, predicted)\n    msle = np.round(np.mean(sq_log_errors), 4)\n    return msle"}
{"task_id": 221, "completion_id": 6, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper that returns element-wise squared log errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    squared_errors = squared_log_error(actual, predicted)\n    msle = np.mean(squared_errors)\n    return round(msle, 4)"}
{"task_id": 221, "completion_id": 7, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Calculate the element-wise squared logarithmic errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    if not isinstance(actual, np.ndarray):\n        actual = np.array(actual)\n    if not isinstance(predicted, np.ndarray):\n        predicted = np.array(predicted)\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    mse_array = squared_log_error(actual, predicted)\n    mse = np.mean(mse_array)\n    return round(mse, 4)"}
{"task_id": 221, "completion_id": 8, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    (actual, predicted) = (np.array(actual), np.array(predicted))\n    if actual.shape != predicted.shape or np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    sl_errors = squared_log_error(actual, predicted)\n    msle = np.mean(sl_errors)\n    return round(msle, 4)"}
{"task_id": 221, "completion_id": 9, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if len(actual) != len(predicted) or np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    sl_error = squared_log_error(actual, predicted)\n    return round(np.mean(sl_error), 4)\nactual = [1, 2, 3]\npredicted = [2, 2, 2]"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n    \n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n    \n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n    \n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z = np.asanyarray(z, dtype=np.float64)\n    if z.ndim == 0:\n        if z >= 0:\n            return round(1 / (1 + np.exp(-z)), 4)\n        else:\n            return round(np.exp(z) / (1 + np.exp(z)), 4)\n    else:\n        positive_mask = z >= 0\n        sigmoid_pos = 1 / (1 + np.exp(-z))\n        sigmoid_neg = np.exp(z) / (1 + np.exp(z))\n        sigmoid_values = np.where(positive_mask, sigmoid_pos, sigmoid_neg)\n        if isinstance(z, np.ndarray) and z.ndim > 0:\n            return np.round(sigmoid_values, 4).tolist()\n        else:\n            return np.round(sigmoid_values, 4).item()"}
{"task_id": 222, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return round(1 / (1 + np.exp(-z)), 4)\n    if isinstance(z, list):\n        z = np.array(z)\n    if not isinstance(z, np.ndarray):\n        raise ValueError('Input must be an int, float, list, or np.ndarray')\n    result = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    if isinstance(z, np.ndarray):\n        result = result.round(4).tolist()\n    return result"}
{"task_id": 222, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n\n    def stable_sigmoid(x):\n        if x >= 0:\n            return 1 / (1 + np.exp(-x))\n        else:\n            return np.exp(x) / (1 + np.exp(x))\n    v_stable_sigmoid = np.vectorize(stable_sigmoid)\n    if isinstance(z, (int, float)):\n        return round(stable_sigmoid(z), 4)\n    elif isinstance(z, (list, np.ndarray)):\n        result = v_stable_sigmoid(z)\n        if isinstance(z, list):\n            result = result.tolist()\n        return [round(float(item), 4) for item in np.nditer(result)]\n    else:\n        raise ValueError('Input z must be a scalar (int/float) or an array-like object (list or np.ndarray).')"}
{"task_id": 222, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n\n    def safe_sigmoid(a):\n        \"\"\"Helper function to numerically stabilize the sigmoid.\"\"\"\n        return np.where(a >= 0, 1 / (1 + np.exp(-a)), np.exp(a) / (1 + np.exp(a)))\n    array_input = np.array(z, dtype=float)\n    results = safe_sigmoid(array_input)\n    if not isinstance(z, np.ndarray):\n        results = results.tolist()\n    if isinstance(results, (tuple, list, np.ndarray)):\n        results = [[round(item, 4) if isinstance(item, float) else item for item in sublist] if isinstance(sublist, list) else round(sublist, 4) for sublist in results]\n    else:\n        results = round(results, 4)\n    return results"}
{"task_id": 222, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    input_type = type(z)\n    array = np.array(z, dtype=float)\n    with np.errstate(over='ignore', under='ignore'):\n        array_pos = 1 / (1 + np.exp(-array[array >= 0]))\n        array_neg = np.exp(array[array < 0]) / (1 + np.exp(array[array < 0]))\n        array[array >= 0] = array_pos\n        array[array < 0] = array_neg\n    array = np.round(array, 4)\n    if input_type == float or input_type == int:\n        return float(array)\n    return array.tolist()"}
{"task_id": 222, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n\n    def stable_sigmoid(x):\n        if x >= 0:\n            return 1 / (1 + np.exp(-x))\n        else:\n            return np.exp(x) / (1 + np.exp(x))\n    vstable_sigmoid = np.vectorize(stable_sigmoid)\n    if isinstance(z, list) or isinstance(z, np.ndarray):\n        z = np.array(z)\n        sig_values = vstable_sigmoid(z)\n        return [round(x, 4) for x in sig_values.tolist()]\n    else:\n        return round(stable_sigmoid(z), 4)"}
{"task_id": 222, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n\n    def safe_sigmoid(x):\n        return np.where(x >= 0, 1 / (1 + np.exp(-x)), np.exp(x) / (1 + np.exp(x)))\n    if isinstance(z, (int, float)):\n        return round(float(safe_sigmoid(z)), 4)\n    elif isinstance(z, list):\n        z = np.array(z)\n        result = safe_sigmoid(z)\n        return [round(float(item), 4) for item in result.tolist()]\n    elif isinstance(z, np.ndarray):\n        result = safe_sigmoid(z)\n        return [round(float(item), 4) for item in result.tolist()]\n    else:\n        raise ValueError('Input must be a scalar (int/float), list, or numpy array.')"}
{"task_id": 222, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n\n    def stable_sigmoid(x):\n        return np.where(x >= 0, 1 / (1 + np.exp(-x)), np.exp(x) / (1 + np.exp(x)))\n    if isinstance(z, (int, float)):\n        result = stable_sigmoid(z)\n        return round(float(result), 4)\n    else:\n        z = np.array(z)\n        result = stable_sigmoid(z)\n        return [round(float(num), 4) for num in result.flatten().tolist()] if len(result.shape) > 1 else [round(float(num), 4) for num in result.tolist()]"}
{"task_id": 222, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n\n    def stable_sigmoid(x):\n        if x >= 0:\n            return 1 / (1 + np.exp(-x))\n        else:\n            return np.exp(x) / (1 + np.exp(x))\n    if isinstance(z, (list, np.ndarray)):\n        z = np.array(z)\n        sigmoid_values = np.vectorize(stable_sigmoid)(z)\n        return np.round(sigmoid_values, 4).tolist()\n    else:\n        return round(stable_sigmoid(z), 4)"}
{"task_id": 222, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n\n    def stable_sigmoid(x):\n        if x >= 0:\n            return 1 / (1 + np.exp(-x))\n        else:\n            return np.exp(x) / (1 + np.exp(x))\n    if isinstance(z, (int, float)):\n        return round(stable_sigmoid(z), 4)\n    if isinstance(z, list):\n        z = np.array(z)\n    result = np.vectorize(stable_sigmoid)(z)\n    if isinstance(z, list):\n        return result.round(4).tolist()\n    else:\n        return result.round(4)"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, list):\n        z = np.array(z)\n    elif not isinstance(z, np.ndarray):\n        z = np.array([z])\n    result = np.where(z >= 0, z, a * z)\n    if isinstance(z, np.ndarray):\n        return result.tolist()\n    else:\n        return result"}
{"task_id": 224, "completion_id": 1, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n\n    def apply_leaky_relu(x):\n        \"\"\"Apply Leaky ReLU to a scalar value.\"\"\"\n        return max(x, a * x)\n\n    def apply_recursively(z):\n        if isinstance(z, (list, tuple)):\n            return [apply_recursively(item) for item in z]\n        elif isinstance(z, np.ndarray):\n            return z.tolist()\n        else:\n            return apply_leaky_relu(z)\n    if not isinstance(z, np.ndarray):\n        z = np.array(z)\n    result_array = np.where(z >= 0, z, a * z)\n    result_list = apply_recursively(result_array)\n    return result_list"}
{"task_id": 224, "completion_id": 2, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return leaky_relu_calc(z, a)\n    elif isinstance(z, list):\n        return [leaky_relu(zi, a) for zi in z]\n    elif isinstance(z, np.ndarray):\n        result = leaky_relu_calc(z, a)\n        return result.tolist()\n    else:\n        raise TypeError('Input must be a scalar, list (possibly nested), or numpy array')\ndef leaky_relu_calc(x, a):\n    \"\"\"Calculation of Leaky ReLU activation.\"\"\"\n    return np.where(x >= 0, x, a * x)"}
{"task_id": 224, "completion_id": 3, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, list):\n        z = np.array(z, dtype=float)\n    elif isinstance(z, (int, float)):\n        z = np.array([z], dtype=float)\n    elif not isinstance(z, np.ndarray):\n        raise ValueError('Input type not supported. Please provide a scalar, a list, or a numpy.ndarray.')\n    z = np.where(z >= 0, z, a * z)\n    result = z.tolist()\n    return result"}
{"task_id": 224, "completion_id": 4, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n\n    def apply_leaky_relu(value):\n        return max(value, a * value)\n    z_np = np.array(z)\n    z_np = np.where(z_np >= 0, z_np, a * z_np)\n    return z_np.tolist()\nz = [-10, -5, 0, 5, 10]"}
{"task_id": 224, "completion_id": 5, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n\n    def recurse(z, a):\n        if isinstance(z, (list, tuple)):\n            return [recurse(zi, a) for zi in z]\n        elif isinstance(z, np.ndarray):\n            return z.tolist()\n        else:\n            return max(z, a * z)\n    return recurse(z, a)"}
{"task_id": 224, "completion_id": 6, "solution": "import numpy as np"}
{"task_id": 224, "completion_id": 7, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n\n    def recursive_apply_relu(z):\n        if isinstance(z, np.ndarray):\n            z[z < 0] *= a\n            return z.tolist()\n        elif isinstance(z, list):\n            return [recursive_apply_relu(item) for item in z]\n        else:\n            return max(z, a * z)\n    return recursive_apply_relu(z)"}
{"task_id": 224, "completion_id": 8, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n\n    def _leaky_relu_scalar(x, a):\n        \"\"\"Helper function to apply the Leaky ReLU to a scalar value.\"\"\"\n        return x if x >= 0 else a * x\n\n    def _apply_leaky_relu(data, a):\n        \"\"\"Recursively apply Leaky ReLU to each element of nested lists or numpy array.\"\"\"\n        if isinstance(data, np.ndarray):\n            data = data.tolist()\n        if isinstance(data, list):\n            return [_apply_leaky_relu(x, a) for x in data]\n        else:\n            return _leaky_relu_scalar(data, a)\n    return _apply_leaky_relu(z, a)"}
{"task_id": 224, "completion_id": 9, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    z_original_type = type(z)\n    z_np = np.array(z)\n    z_np = np.where(z_np >= 0, z_np, a * z_np)\n    if z_original_type == np.ndarray:\n        return z_np.tolist()\n    else:\n        return z_np.tolist() if isinstance(z, list) else z_np.item()"}
{"task_id": 226, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    sample_weight = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    for _ in range(n_clf):\n        (min_error, best_classifier) = (math.inf, None)\n        for feature_index in range(n_features):\n            for threshold in np.unique(X_train[:, feature_index]):\n                for polarity in [1, -1]:\n                    y_pred = np.where(X_train[:, feature_index] > threshold, polarity, -polarity)\n                    error = np.sum(sample_weight[y_pred != y_train])\n                    if error < min_error:\n                        min_error = error\n                        best_classifier = (feature_index, threshold, polarity)\n        alpha = 0.5 * math.log((1 - min_error + 1e-10) / (min_error + 1e-10))\n        classifiers.append((best_classifier, alpha))\n        y_pred = np.where(X_train[:, best_classifier[0]] > best_classifier[1], best_classifier[2], -best_classifier[2])\n        sample_weight *= np.exp(-alpha * y_train * y_pred)\n        sample_weight /= np.sum(sample_weight)\n    predictions = np.zeros(X_test.shape[0])\n    for (classifier, alpha) in classifiers:\n        y_pred = np.where(X_test[:, classifier[0]] > classifier[1], classifier[2], -classifier[2])\n        predictions += alpha * y_pred\n    return [1 if pred > 0 else -1 for pred in predictions]\nX_train = np.array([[1.5, 2.5], [2.5, 3.5], [3.5, 4.5], [4.5, 5.5]])\ny_train = np.array([-1, -1, 1, 1])\nX_test = np.array([[2.0, 3.0], [4.0, 5.0]])\npredictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)"}
{"task_id": 226, "completion_id": 1, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n    \n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n    \n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    stump_weights = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        for feature_idx in range(n_features):\n            feature_values = X_train[:, feature_idx]\n            thresholds = np.unique(feature_values)\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    pred = np.where(X_train[:, feature_idx] < threshold, polarity, -polarity)\n                    error = np.sum(weights * (pred != y_train))\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature_idx, threshold, polarity)\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        pred = np.where(X_train[:, best_stump[0]] < best_stump[1], best_stump[2], -best_stump[2])\n        weights *= np.exp(-alpha * y_train * pred)\n        weights /= np.sum(weights)\n        stumps.append(best_stump)\n        stump_weights.append(alpha)\n    predictions = np.zeros(X_test.shape[0])\n    for (stump, alpha) in zip(stumps, stump_weights):\n        (feature_idx, threshold, polarity) = stump\n        pred = np.where(X_test[:, feature_idx] < threshold, polarity, -polarity)\n        predictions += alpha * pred\n    return list(np.sign(predictions).astype(int))"}
{"task_id": 226, "completion_id": 2, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    alphas = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        for feature_idx in range(n_features):\n            thresholds = np.unique(X_train[:, feature_idx])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    prediction = (X_train[:, feature_idx] < threshold).astype(int) * 2 - 1\n                    if polarity == -1:\n                        prediction = -prediction\n                    error = np.sum(sample_weights * (prediction != y_train))\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature_idx, threshold, polarity)\n        (feature_idx, threshold, polarity) = best_stump\n        prediction = (X_train[:, feature_idx] < threshold).astype(int) * 2 - 1\n        if polarity == -1:\n            prediction = -prediction\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        sample_weights *= np.exp(-alpha * y_train * prediction)\n        sample_weights /= np.sum(sample_weights)\n        classifiers.append((feature_idx, threshold, polarity))\n        alphas.append(alpha)\n    predictions = np.zeros(X_test.shape[0])\n    for (alpha, (feature_idx, threshold, polarity)) in zip(alphas, classifiers):\n        prediction = (X_test[:, feature_idx] < threshold).astype(int) * 2 - 1\n        if polarity == -1:\n            prediction = -prediction\n        predictions += alpha * prediction\n    return [int(math.copysign(1, pred)) for pred in predictions]"}
{"task_id": 226, "completion_id": 3, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    w = np.full(n_samples, 1 / n_samples)\n    weak_learners = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        for feature_idx in range(n_features):\n            thresholds = np.unique(X_train[:, feature_idx])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    preds = np.where(X_train[:, feature_idx] > threshold, polarity, -polarity)\n                    weighted_error = w.dot(np.not_equal(y_train, preds).astype(float))\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = (feature_idx, threshold, polarity)\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        weak_learners.append((best_stump, alpha))\n        best_predictions = np.where(X_train[:, best_stump[0]] > best_stump[1], best_stump[2], -best_stump[2])\n        error_vector = np.not_equal(y_train, best_predictions).astype(float)\n        w *= np.exp(error_vector * alpha)\n        w /= w.sum()\n    n_test_samples = X_test.shape[0]\n    predictions = np.zeros(n_test_samples)\n    for (stump, alpha) in weak_learners:\n        predictions += np.where(X_test[:, stump[0]] > stump[1], alpha * stump[2], -alpha * stump[2])\n    return [int(math.copysign(1, p)) for p in predictions]"}
{"task_id": 226, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"\n    Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n    \n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test: 2-D numpy array of unseen samples to classify.\n        n_clf: Number of weak learners (decision stumps) to use in the ensemble.\n    \n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be \n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    sample_weight = np.full(n_samples, 1 / n_samples)\n    weak_learners = []\n    alphas = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.where(X_train[:, feature_index] < threshold, polarity, -polarity)\n                    error = np.sum(sample_weight * np.where(predictions != y_train, 1, 0))\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature_index, threshold, polarity)\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        alphas.append(alpha)\n        predictions = np.where(X_train[:, best_stump[0]] < best_stump[1], best_stump[2], -best_stump[2])\n        incorrect = predictions != y_train\n        sample_weight[incorrect] = sample_weight[incorrect] * math.exp(alpha)\n        sample_weight = sample_weight / np.sum(sample_weight)\n        weak_learners.append(best_stump)\n\n    def predict_ensemble(row):\n        weighted_sum = 0\n        for (alpha, stump) in zip(alphas, weak_learners):\n            prediction = -1 if (row[stump[0]] < stump[1]) ^ (stump[2] == 1) else 1\n            weighted_sum += alpha * prediction\n        return 1 if weighted_sum > 0 else -1\n    predictions = [predict_ensemble(row) for row in X_test]\n    return predictions"}
{"task_id": 226, "completion_id": 5, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples = X_train.shape[0]\n    n_features = X_train.shape[1]\n    sample_weights = np.full(n_samples, 1.0 / n_samples)\n    classifiers = []\n    for _ in range(n_clf):\n        error = float('inf')\n        stump = None\n        for feature_idx in range(n_features):\n            thresholds = np.unique(X_train[:, feature_idx])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predicted = np.where(X_train[:, feature_idx] < threshold, polarity, -polarity)\n                    stump_error = np.sum(sample_weights * (predicted != y_train))\n                    if stump_error < error:\n                        error = stump_error\n                        stump = (feature_idx, threshold, polarity)\n        alpha = 0.5 * math.log((1.0 - error) / (error + 1e-10))\n        classifiers.append((stump, alpha))\n        (feature_idx, threshold, polarity) = stump\n        predicted = np.where(X_train[:, feature_idx] < threshold, polarity, -polarity)\n        sample_weights *= np.exp(-alpha * y_train * predicted)\n        sample_weights /= np.sum(sample_weights)\n    predictions = []\n    for x in X_test:\n        score = 0\n        for ((feature_idx, threshold, polarity), alpha) in classifiers:\n            h_x = polarity if x[feature_idx] < threshold else -polarity\n            score += alpha * h_x\n        predictions.append(1 if score > 0 else -1)\n    return predictions"}
{"task_id": 226, "completion_id": 6, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    alphas = []\n    for _ in range(n_clf):\n        best_threshold = None\n        best_feature_index = None\n        best_polarity = None\n        min_error = float('inf')\n        for feature_index in range(n_features):\n            unique_vals = np.unique(X_train[:, feature_index])\n            for threshold in unique_vals:\n                for polarity in [-1, 1]:\n                    preds = np.where(X_train[:, feature_index] < threshold, -1 * polarity, polarity)\n                    error = np.sum(weights * (preds != y_train))\n                    if error < min_error:\n                        min_error = error\n                        best_threshold = threshold\n                        best_feature_index = feature_index\n                        best_polarity = polarity\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        predictions = np.where(X_train[:, best_feature_index] < best_threshold, -1 * best_polarity, best_polarity)\n        incorrect = predictions != y_train\n        weights[incorrect] = weights[incorrect] * math.exp(alpha)\n        weights = weights / np.sum(weights)\n        classifiers.append((best_feature_index, best_threshold, best_polarity))\n        alphas.append(alpha)\n    predictions = np.zeros(len(X_test))\n    for ((feature_index, threshold, polarity), alpha) in zip(classifiers, alphas):\n        stump_pred = np.where(X_test[:, feature_index] < threshold, -1 * polarity, polarity)\n        predictions += alpha * stump_pred\n    final_preds = np.sign(predictions)\n    return final_preds.tolist()"}
{"task_id": 226, "completion_id": 7, "solution": "import numpy as np\nimport math\ndef decision_stump(X, y, weights):\n    \"\"\"Find the decision stump that minimizes error given the sample weights.\"\"\"\n    min_error = float('inf')\n    (best_threshold, best_feature, best_polarity) = (None, None, None)\n    for feature_index in range(X.shape[1]):\n        thresholds = np.unique(X[:, feature_index])\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                predictions = np.where((X[:, feature_index] > threshold) == (polarity == 1), 1, -1)\n                misclassified = predictions != y\n                error = np.sum(misclassified * weights)\n                if error < min_error:\n                    min_error = error\n                    best_threshold = threshold\n                    best_feature = feature_index\n                    best_polarity = polarity\n    return (best_feature, best_threshold, best_polarity, min_error)\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\"\"\"\n    sample_weights = np.full(X_train.shape[0], 1.0 / X_train.shape[0])\n    alphas = []\n    stumps = []\n    for _ in range(n_clf):\n        (best_feature, best_threshold, best_polarity, error) = decision_stump(X_train, y_train, sample_weights)\n        alpha = 0.5 * math.log((1 - error + 1e-10) / (error + 1e-10))\n        stumps.append((best_feature, best_threshold, best_polarity))\n        alphas.append(alpha)\n        predictions = np.where((X_train[:, best_feature] > best_threshold) == (best_polarity == 1), 1, -1)\n        non_error = np.where(predictions == y_train, 1, 0)\n        sample_weights *= np.exp(-alpha * non_error * y_train)\n        sample_weights /= np.sum(sample_weights)\n    test_predictions = np.zeros(X_test.shape[0])\n    for (alpha, (feature_idx, thres, polar)) in zip(alphas, stumps):\n        predictions = np.where((X_test[:, feature_idx] > thres) == (polar == 1), 1, -1)\n        test_predictions += alpha * predictions\n    final_predictions = np.sign(test_predictions)\n    return final_predictions.tolist()"}
{"task_id": 226, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples = X_train.shape[0]\n    n_features = X_train.shape[1]\n    weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        best_stump = None\n        min_error = float('inf')\n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.where((X_train[:, feature] <= threshold) == (polarity > 0), 1, -1)\n                    error = np.sum(weights[predictions != y_train])\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature, threshold, polarity)\n        (feature_index, threshold, polarity) = best_stump\n        predictions = np.where((X_train[:, feature_index] <= threshold) == (polarity > 0), 1, -1)\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        alphas.append(alpha)\n        exponential_error = np.exp(-alpha * y_train * predictions)\n        weights *= exponential_error\n        weights /= np.sum(weights)\n        stumps.append(best_stump)\n    test_predictions = np.zeros(X_test.shape[0])\n    for i in range(n_clf):\n        (feature_index, threshold, polarity) = stumps[i]\n        predictions = np.where((X_test[:, feature_index] <= threshold) == (polarity > 0), 1, -1)\n        test_predictions += alphas[i] * predictions\n    return [1 if x >= 0 else -1 for x in test_predictions]"}
{"task_id": 226, "completion_id": 9, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    weak_learners = []\n    weak_learner_weights = []\n    for _ in range(n_clf):\n        best_threshold = None\n        best_feature = None\n        best_error = np.inf\n        best_polarity = None\n        for feature in range(n_features):\n            for threshold in np.unique(X_train[:, feature]):\n                for polarity in [-1, 1]:\n                    predictions = np.where(X_train[:, feature] < threshold, polarity, -polarity)\n                    error = np.sum(np.where(predictions != y_train, sample_weights, 0))\n                    if error < best_error:\n                        best_error = error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n        alpha = 0.5 * math.log((1 - best_error) / (best_error + 1e-10))\n        predictions = np.where(X_train[:, best_feature] < best_threshold, best_polarity, -best_polarity)\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n        weak_learners.append((best_feature, best_threshold, best_polarity))\n        weak_learner_weights.append(alpha)\n    test_predictions_sum = np.zeros(X_test.shape[0])\n    for (learner, alpha) in zip(weak_learners, weak_learner_weights):\n        (feature, threshold, polarity) = learner\n        predictions = np.where(X_test[:, feature] < threshold, polarity, -polarity)\n        test_predictions_sum += alpha * predictions\n    final_predictions = np.sign(test_predictions_sum)\n    return list(final_predictions.astype(int))"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    d0 = shape[0]\n    drest = np.prod(shape[1:])\n    A = np.random.randn(d0, drest)\n    (U, _, Vt) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n    result = (Q * scale).reshape(shape)\n    return result.tolist()\nshape = (2, 2)"}
{"task_id": 241, "completion_id": 1, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers. Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix. Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor. If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    linear_shape = (shape[0], np.prod(shape[1:]))\n    A = np.random.normal(size=linear_shape)\n    (U, _, V_t) = np.linalg.svd(A, full_matrices=False)\n    Q = U if U.shape == A.shape else V_t\n    Q_scaled = Q * scale\n    tensor = Q_scaled.reshape(shape)\n    return tensor.tolist()"}
{"task_id": 241, "completion_id": 2, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    total_dim = np.prod(shape[1:])\n    A = np.random.standard_normal((shape[0], total_dim))\n    (U, S, Vt) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n    result = np.reshape(Q, shape) * scale\n    return result.tolist()\nshape = (2, 2)\nscale = 0.5"}
{"task_id": 241, "completion_id": 3, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    flat_shape = (shape[0], np.prod(shape[1:]))\n    A = np.random.randn(*flat_shape)\n    (U, _, Vt) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == flat_shape:\n        Q = U\n    else:\n        Q = Vt\n    result = (scale * Q).reshape(shape)\n    return result.tolist()"}
{"task_id": 241, "completion_id": 4, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    flat_shape = (shape[0], np.prod(shape[1:]))\n    a = np.random.randn(*flat_shape)\n    (u, s, vh) = np.linalg.svd(a, full_matrices=False)\n    q = u if u.shape == a.shape else vh\n    result = (scale * q).reshape(shape)\n    return result.tolist()"}
{"task_id": 241, "completion_id": 5, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    shape_2d = (shape[0], np.prod(shape[1:]))\n    A = np.random.randn(*shape_2d)\n    (U, _, Vt) = np.linalg.svd(A, full_matrices=False)\n    Q = Vt.T if U.shape != A.shape else U\n    orthogonal_matrix = Q.reshape(shape) * scale\n    return orthogonal_matrix.tolist()\nshape = (2, 2)\nscale = 0.5"}
{"task_id": 241, "completion_id": 6, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    d0 = shape[0]\n    product_dim = 1\n    for dim in shape[1:]:\n        product_dim *= dim\n    A = np.random.randn(d0, product_dim)\n    (U, S, Vt) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt.T\n    result = (Q * scale).reshape(shape)\n    flat = result.reshape(shape[0], -1)\n    if shape[0] <= flat.shape[1]:\n        assert np.allclose(flat @ flat.T, scale ** 2 * np.eye(flat.shape[0]), atol=1e-06)\n    else:\n        assert np.allclose(flat.T @ flat, scale ** 2 * np.eye(flat.shape[1]), atol=1e-06)\n    return result.tolist()\nshape = (2, 2)\nscale = 0.5"}
{"task_id": 241, "completion_id": 7, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers. Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix. Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor. If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    flat_shape = (shape[0], np.prod(shape[1:]))\n    A = np.random.randn(*flat_shape)\n    (U, _, Vt) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n    result = (scale * Q).reshape(shape)\n    return result.tolist()"}
{"task_id": 241, "completion_id": 8, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]] | int:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    num_rows = shape[0]\n    num_cols = np.prod(shape[1:])\n    A = np.random.randn(num_rows, num_cols)\n    (U, _, Vt) = np.linalg.svd(A, full_matrices=False)\n    Q = U if U.shape == A.shape else Vt\n    result = (scale * Q).reshape(shape)\n    return result.tolist()\nshape = (2, 2)\nscale = 0.5\nresult = orthogonal(shape, scale)"}
{"task_id": 241, "completion_id": 9, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    d0 = shape[0]\n    remaining_shape = shape[1:]\n    flat_shape = (d0, np.prod(remaining_shape))\n    matrix = np.random.randn(*flat_shape)\n    (U, _, Vt) = np.linalg.svd(matrix, full_matrices=False)\n    Q = U if U.shape == flat_shape else Vt\n    orthogonal_matrix = Q.reshape(shape) * scale\n    return orthogonal_matrix.tolist()"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    w = np.ones((4, 4))\n    b = np.zeros(4)\n    z1 = np.maximum(0, state.dot(w).sum(axis=1) + b)\n    z2 = np.maximum(0, z1.dot(w) + b)\n    z3 = np.maximum(0, z2.dot(w) + b)\n    logits = z3.dot(np.ones(3))\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    action_probs = [round(prob, 4) for prob in action_probs]\n    state_value = z3.dot(np.ones(1))\n    state_value = round(float(state_value), 4)\n    return (action_probs, state_value)\nstate = [1.0, 2.0, 3.0]"}
{"task_id": 243, "completion_id": 1, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    W = np.ones((4, 4))\n    b = np.zeros(4)\n    z1 = np.maximum(0, np.dot(state, np.ones(4)))\n    z2 = np.maximum(0, np.dot(z1, W) + b)\n    z3 = np.maximum(0, np.dot(z2, W) + b)\n    logits = np.dot(z3, np.ones(3))\n    state_value = np.dot(z3, np.array([1.0, 0, 0, 0]))\n    e_x = np.exp(logits - np.max(logits))\n    action_probs = e_x / e_x.sum()\n    action_probs_rounded = [round(x, 4) for x in action_probs]\n    state_value_rounded = round(state_value[0], 4)\n    return (action_probs_rounded, state_value_rounded)\nstate = [1, 0, 1]"}
{"task_id": 243, "completion_id": 2, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    weights = np.ones((4, 4))\n    biases = np.zeros(4)\n    z1 = np.maximum(0, np.dot(state, np.ones(4)) + biases)\n    z2 = np.maximum(0, np.dot(z1, weights) + biases)\n    z3 = np.maximum(0, np.dot(z2, weights) + biases)\n    logits = np.dot(z3, weights)\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = np.dot(z3, weights)[0]\n    action_probs_rounded = [round(prob, 4) for prob in action_probs]\n    state_value_rounded = round(state_value, 4)\n    return (action_probs_rounded, state_value_rounded)"}
{"task_id": 243, "completion_id": 3, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s = np.array(state)\n    weights = np.ones((4, 4))\n    biases = np.zeros(4)\n    z1 = np.maximum(0, s @ np.ones(3))\n    z2 = np.maximum(0, z1 * 4)\n    z3 = np.maximum(0, z2 * 4)\n    logits = z3 * 4\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = z3 * 4\n    return ([round(prob, 4) for prob in action_probs[0]], round(state_value[0], 4))"}
{"task_id": 243, "completion_id": 4, "solution": "import numpy as np\ndef relu(x: np.ndarray) -> np.ndarray:\n    \"\"\"ReLU activation function - returns x if x > 0, else returns 0\"\"\"\n    return np.maximum(0, x)\ndef softmax(logits: np.ndarray) -> np.ndarray:\n    \"\"\"Softmax activation function - converts logits into probabilities.\"\"\"\n    e_x = np.exp(logits - np.max(logits))\n    return e_x / e_x.sum(axis=0)\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    input_state = np.array(state)\n    weights = np.ones((3, 4))\n    weights_actor = np.ones((4, 3))\n    weights_critic = np.ones((4, 1))\n    z1 = relu(np.dot(input_state, weights))\n    z2 = relu(np.dot(z1, weights))\n    z3 = relu(np.dot(z2, weights))\n    actor_output = np.dot(z3, weights_actor)\n    critic_output = np.dot(z3, weights_critic)\n    action_probs = softmax(actor_output)\n    state_value = critic_output[0]\n    return ([round(x, 4) for x in action_probs], round(float(state_value), 4))"}
{"task_id": 243, "completion_id": 5, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    (W1, b1) = (np.ones((3, 4)), np.zeros(4))\n    (W2, b2) = (np.ones((4, 4)), np.zeros(4))\n    (W3, b3) = (np.ones((4, 4)), np.zeros(4))\n    (Wa, ba) = (np.ones((4, 3)), np.zeros(3))\n    (Wc, bc) = (np.ones((4, 1)), np.zeros(1))\n    state = np.array(state)\n    z1 = np.maximum(0, state @ W1 + b1)\n    z2 = np.maximum(0, z1 @ W2 + b2)\n    z3 = np.maximum(0, z2 @ W3 + b3)\n    logits = z3 @ Wa + ba\n    state_value = (z3 @ Wc + bc)[0, 0]\n    exp_logits = np.exp(logits)\n    action_probs = (exp_logits / np.sum(exp_logits)).tolist()\n    action_probs = [round(p, 4) for p in action_probs]\n    state_value = round(state_value, 4)\n    return (action_probs, state_value)"}
{"task_id": 243, "completion_id": 6, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    weights = np.ones((4, 4))\n    bias = np.zeros((4,))\n    z1 = np.maximum(0, state @ weights + bias)\n    z2 = np.maximum(0, z1 @ weights + bias)\n    z3 = np.maximum(0, z2 @ weights + bias)\n    actor_weights = np.ones((4, 3))\n    actor_bias = np.zeros((3,))\n    logits = z3 @ actor_weights + actor_bias\n    action_probs = [round(1 / 3, 4), round(1 / 3, 4), round(1 / 3, 4)]\n    critic_weights = np.ones((4, 1))\n    critic_bias = np.zeros((1,))\n    state_value = round((z3 @ critic_weights + critic_bias)[0, 0], 4)\n    return (action_probs, state_value)\nstate = [1.0, 2.0, 3.0]"}
{"task_id": 243, "completion_id": 7, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    weights = np.ones((4, 4))\n    biases = np.zeros(4)\n    policy_head_weights = np.ones(4)\n    critic_head_weights = np.sum(policy_head_weights)\n    state = np.array(state)\n    z1 = np.maximum(0, np.dot(state, weights))\n    z2 = np.maximum(0, np.dot(z1, weights))\n    z3 = np.maximum(0, np.dot(z2, weights))\n    logits = np.dot(z3, policy_head_weights)\n    exp_scores = np.exp(logits)\n    action_probs = (exp_scores / np.sum(exp_scores)).tolist()\n    state_value = np.dot(z3, critic_head_weights)[0]\n    action_probs = [round(prob, 4) for prob in action_probs]\n    state_value = round(state_value, 4)\n    return (action_probs, state_value)\nstate = [1, 2, 3]"}
{"task_id": 243, "completion_id": 8, "solution": "import numpy as np\ndef relu(x):\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, x)\ndef softmax(x):\n    \"\"\"Softmax activation function.\"\"\"\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum(axis=0)\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s = np.array(state)\n    w = np.ones((4, 4))\n    w_actor = np.ones(3)\n    w_critic = np.array([1.0])\n    b = np.zeros(4)\n    z1 = relu(np.dot(s, w) + b)\n    z2 = relu(np.dot(z1, w) + b)\n    z3 = relu(np.dot(z2, w) + b)\n    logits = np.dot(z3, w_actor)\n    state_value = np.dot(z3, w_critic)\n    action_probs = softmax(logits)\n    return ([round(p, 4) for p in action_probs], round(float(state_value), 4))\nstate = [1.0, 2.0, 3.0]"}
{"task_id": 243, "completion_id": 9, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    z1 = np.maximum(0, np.dot(state, np.ones(3)))\n    z2 = np.maximum(0, np.dot(z1, np.ones(4)))\n    z3 = np.maximum(0, np.dot(z2, np.ones(4)))\n    logits = np.dot(z3, np.ones(3))\n    action_probs = [1 / 3, 1 / 3, 1 / 3]\n    state_value = np.dot(z3, np.ones(1))\n    return ([round(p, 4) for p in action_probs], round(float(state_value), 4))"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef relu(x):\n    \"\"\"Apply the ReLU activation function.\"\"\"\n    return np.maximum(0, x)\ndef softmax(x):\n    \"\"\"Apply the soft-max function to convert raw scores to probabilities.\"\"\"\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum()\ndef actor_critic_forward(state: list[float], params: dict) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                that describe NumPy-compatible arrays):\n                'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                'Wa', 'ba'                    \u2013 actor head\n                'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    for key in params:\n        params[key] = np.array(params[key])\n    x = relu(np.dot(state, params['W1']) + params['b1'])\n    x = relu(np.dot(x, params['W2']) + params['b2'])\n    x = relu(np.dot(x, params['W3']) + params['b3'])\n    actor_output = np.dot(x, params['Wa']) + params['ba']\n    action_probs = softmax(actor_output)\n    critic_output = np.dot(x, params['Wc']) + params['bc']\n    state_value = critic_output.item()\n    action_probs_rounded = [round(prob, 4) for prob in action_probs]\n    state_value_rounded = round(state_value, 4)\n    return (action_probs_rounded, state_value_rounded)\nparams = {'W1': [[1.0, 2.0], [3.0, 4.0]], 'b1': [1.0, 1.0], 'W2': [[0.5, -0.5], [-0.5, 0.5]], 'b2': [0.0, 0.0], 'W3': [[1.0, 1.0], [1.0, 1.0]], 'b3': [1.0, 1.0], 'Wa': [[1.0, 1.0], [-1.0, -1.0]], 'ba': [0.0, 0.0], 'Wc': [[1.0], [-1.0]], 'bc': [0.0]}\nstate = [1.0, 1.0]"}
{"task_id": 249, "completion_id": 1, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\"\"\"\n\n    def special_round(num):\n        rounded = round(num, 4)\n        if rounded == 0 or rounded == 1:\n            return round(num, 1)\n        return rounded\n    state = np.array(state)\n    params = {k: np.array(v) for (k, v) in params.items()}\n\n    def affine_relu(input, weight, bias):\n        z = input @ weight + bias\n        return np.maximum(z, 0)\n    hidden_1 = affine_relu(state, params['W1'], params['b1'])\n    hidden_2 = affine_relu(hidden_1, params['W2'], params['b2'])\n    hidden_3 = affine_relu(hidden_2, params['W3'], params['b3'])\n    raw_scores = hidden_3 @ params['Wa'] + params['ba']\n    exp_scores = np.exp(raw_scores - np.max(raw_scores))\n    probs = exp_scores / np.sum(exp_scores)\n    probabilities = [special_round(p) for p in probs.tolist()]\n    value = hidden_3 @ params['Wc'] + params['bc']\n    if np.isclose(value, 0) or np.isclose(value, 1):\n        value = round(value.item(), 1)\n    else:\n        value = special_round(value.item())\n    return (probabilities, value)"}
{"task_id": 249, "completion_id": 2, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    W1 = np.array(params['W1'])\n    b1 = np.array(params['b1'])\n    W2 = np.array(params['W2'])\n    b2 = np.array(params['b2'])\n    W3 = np.array(params['W3'])\n    b3 = np.array(params['b3'])\n    Wa = np.array(params['Wa'])\n    ba = np.array(params['ba'])\n    Wc = np.array(params['Wc'])\n    bc = np.array(params['bc'])\n    hidden1 = np.maximum(np.dot(state, W1) + b1, 0)\n    hidden2 = np.maximum(np.dot(hidden1, W2) + b2, 0)\n    hidden3 = np.maximum(np.dot(hidden2, W3) + b3, 0)\n    actor_output = np.dot(hidden3, Wa) + ba\n    actor_output -= np.max(actor_output)\n    exp_scores = np.exp(actor_output)\n    probabilities = exp_scores / np.sum(exp_scores, axis=-1)\n    value = np.dot(hidden3, Wc) + bc\n    probabilities = np.around(probabilities, decimals=4)\n    value = np.around(value, decimals=4)\n    if np.isclose(probabilities, 0).any() or np.isclose(probabilities, 1).any():\n        probabilities = probabilities.astype(str)\n        probabilities[np.isclose(probabilities, 0)] = '0.0'\n        probabilities[np.isclose(probabilities, 1)] = '1.0'\n        probabilities = probabilities.astype(float)\n    value_str = value.astype(str)\n    if np.isclose(value, 0) or np.isclose(value, 1):\n        value_str = '0.0' if np.isclose(value, 0) else '1.0'\n    value = float(value_str)\n    return (list(probabilities), value)"}
{"task_id": 249, "completion_id": 3, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n    \n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    (W1, b1) = (np.array(params['W1']), np.array(params['b1']))\n    (W2, b2) = (np.array(params['W2']), np.array(params['b2']))\n    (W3, b3) = (np.array(params['W3']), np.array(params['b3']))\n    (Wa, ba) = (np.array(params['Wa']), np.array(params['ba']))\n    (Wc, bc) = (np.array(params['Wc']), np.array(params['bc']))\n    hidden1 = np.maximum(0, np.dot(state, W1) + b1)\n    hidden2 = np.maximum(0, np.dot(hidden1, W2) + b2)\n    hidden3 = np.maximum(0, np.dot(hidden2, W3) + b3)\n    raw_scores = np.dot(hidden3, Wa) + ba\n    exp_scores = np.exp(raw_scores - np.max(raw_scores))\n    probabilities = exp_scores / np.sum(exp_scores)\n    value = np.dot(hidden3, Wc) + bc\n    probabilities = probabilities.round(4)\n    value = np.round(value, 4).item()\n    return (probabilities.tolist(), value)"}
{"task_id": 249, "completion_id": 4, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    z1 = np.add(np.dot(state, params['W1']), params['b1'])\n    a1 = np.maximum(z1, 0)\n    z2 = np.add(np.dot(a1, params['W2']), params['b2'])\n    a2 = np.maximum(z2, 0)\n    z3 = np.add(np.dot(a2, params['W3']), params['b3'])\n    a3 = np.maximum(z3, 0)\n    z_actor = np.add(np.dot(a3, params['Wa']), params['ba'])\n    exp_scores = np.exp(z_actor)\n    probs = exp_scores / np.sum(exp_scores)\n    rounded_probs = np.round(probs, decimals=4)\n    value = float(np.add(np.dot(a3, params['Wc']), params['bc']))\n    rounded_value = np.round(value, decimals=4)\n    rounded_probs = [float(f'{p:.4f}') for p in rounded_probs]\n    rounded_value = float(f'{rounded_value:.4f}')\n    return (rounded_probs, rounded_value)\nparams = {'W1': [[0.1, 0.3], [0.5, 0.2]], 'b1': [0.2, 0.1], 'W2': [[1.0, 1.1], [1.2, 1.3]], 'b2': [-0.2, 0.3], 'W3': [[0.5, 0.4], [0.7, 0.8]], 'b3': [0.1, -0.1], 'Wa': [[0.2, -0.1], [0.3, 0.2]], 'ba': [-0.3, 0.1], 'Wc': [[0.5], [-0.4]], 'bc': [0.2]}\nstate = [0.5, 0.7]"}
{"task_id": 249, "completion_id": 5, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    for (key, value) in params.items():\n        params[key] = np.array(value)\n    layer1_out = np.maximum(0, np.dot(state, params['W1']) + params['b1'])\n    layer2_out = np.maximum(0, np.dot(layer1_out, params['W2']) + params['b2'])\n    layer3_out = np.maximum(0, np.dot(layer2_out, params['W3']) + params['b3'])\n    actor_out = np.dot(layer3_out, params['Wa']) + params['ba']\n    actor_probabilities = np.exp(actor_out) / np.sum(np.exp(actor_out))\n    value = np.dot(layer3_out, params['Wc']) + params['bc']\n    actor_probabilities = [round(p, 4) or 1.0 if p == 0 else p for p in actor_probabilities]\n    value = round(float(value), 4) or 1.0 if value == 0 else value\n    return (actor_probabilities.tolist(), value)"}
{"task_id": 249, "completion_id": 6, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    (W1, b1) = (np.array(params['W1']), np.array(params['b1']))\n    (W2, b2) = (np.array(params['W2']), np.array(params['b2']))\n    (W3, b3) = (np.array(params['W3']), np.array(params['b3']))\n    (Wa, ba) = (np.array(params['Wa']), np.array(params['ba']))\n    (Wc, bc) = (np.array(params['Wc']), np.array(params['bc']))\n    state = np.array(state)\n    x = np.maximum(0, state @ W1 + b1)\n    x = np.maximum(0, x @ W2 + b2)\n    x = np.maximum(0, x @ W3 + b3)\n    actor_head = Wa @ x + ba\n    actor_probs = np.exp(actor_head) / np.sum(np.exp(actor_head))\n    critic_value = Wc @ x + bc\n    actor_probs = np.around(actor_probs, decimals=4)\n    critic_value = np.around(critic_value, decimals=4).item()\n    return (actor_probs.tolist(), critic_value)\nparams = {'W1': [[0.2], [0.3], [0.4]], 'b1': [0.1], 'W2': [[0.5, 0.6, 0.7]], 'b2': [0.2], 'W3': [[0.8], [0.9], [1.0]], 'b3': [0.3], 'Wa': [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], 'ba': [0.1, 0.2], 'Wc': [0.1, 0.2, 0.3], 'bc': [0.1]}\nstate = [1.0, 2.0, 3.0]"}
{"task_id": 249, "completion_id": 7, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n\n    def relu(x):\n        return np.maximum(0, x)\n\n    def softmax(x):\n        e_x = np.exp(x - np.max(x))\n        return e_x / e_x.sum()\n    shared_layers = ['W1', 'b1', 'W2', 'b2', 'W3', 'b3']\n    actor_head = ['Wa', 'ba']\n    critic_head = ['Wc', 'bc']\n    x = np.array(state)\n    for layer_name in shared_layers:\n        if 'W' in layer_name:\n            x = np.dot(x, np.array(params[layer_name]))\n        else:\n            x = x + np.array(params[layer_name])\n        x = relu(x)\n    action_scores = np.dot(x, np.array(params['Wa'])) + np.array(params['ba'])\n    action_probabilities = softmax(action_scores)\n    state_value = np.dot(x, np.array(params['Wc']))[0] + np.array(params['bc'])[0]\n    probabilities = [round(p, 4) for p in action_probabilities.tolist()]\n    value = round(state_value, 4)\n    return (probabilities, value)\nparams = {'W1': [[0.5], [0.5]], 'b1': [0.5], 'W2': [[0.5, 0.5]], 'b2': [0.5], 'W3': [[0.5]], 'b3': [0.5], 'Wa': [[0.5], [0.5]], 'ba': [0.5], 'Wc': [[1.0]], 'bc': [1.0]}\nstate = [1.0, 2.0]"}
{"task_id": 249, "completion_id": 8, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    (W1, b1) = (np.array(params['W1']), np.array(params['b1']))\n    (W2, b2) = (np.array(params['W2']), np.array(params['b2']))\n    (W3, b3) = (np.array(params['W3']), np.array(params['b3']))\n    (Wa, ba) = (np.array(params['Wa']), np.array(params['ba']))\n    (Wc, bc) = (np.array(params['Wc']), np.array(params['bc']))\n    hidden1 = np.maximum(0, np.dot(state, W1) + b1)\n    hidden2 = np.maximum(0, np.dot(hidden1, W2) + b2)\n    hidden3 = np.maximum(0, np.dot(hidden2, W3) + b3)\n    action_scores = np.dot(hidden3, Wa) + ba\n    action_probs = np.exp(action_scores) / np.sum(np.exp(action_scores))\n    action_probs = np.round(action_probs, 4)\n    state_value = np.dot(hidden3, Wc) + bc\n    state_value = np.round(state_value, 4)\n    return (action_probs.tolist(), float(state_value))\nparams = {'W1': [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], 'b1': [0.1, 0.2, 0.3], 'W2': [[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]], 'b2': [0.1, 0.2], 'W3': [[0.1], [0.2]], 'b3': [0.1], 'Wa': [[0.1, 0.2], [0.3, 0.4]], 'ba': [0.1, 0.2], 'Wc': [[0.1], [0.2]], 'bc': [0.1]}\nstate = [0.1, 0.2]"}
{"task_id": 249, "completion_id": 9, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    for key in params.keys():\n        params[key] = np.array(params[key])\n    shared_layer_1 = np.maximum(np.dot(state, params['W1']) + params['b1'], 0)\n    shared_layer_2 = np.maximum(np.dot(shared_layer_1, params['W2']) + params['b2'], 0)\n    shared_layer_3 = np.maximum(np.dot(shared_layer_2, params['W3']) + params['b3'], 0)\n    actor_output = np.dot(shared_layer_3, params['Wa']) + params['ba']\n    actor_output = np.exp(actor_output - np.max(actor_output))\n    actor_probs = actor_output / np.sum(actor_output)\n    critic_output = np.dot(shared_layer_3, params['Wc']) + params['bc']\n    probabilities = np.round(actor_probs, decimals=4)\n    value = np.round(critic_output.item(), decimals=4)\n    probabilities = np.where(probabilities == 0.0, 0.0, np.where(probabilities == 1.0, 1.0, probabilities))\n    return (probabilities.tolist(), value)\nparams = {'W1': [[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]], 'b1': [0.1, 0.2], 'W2': [[0.5, 0.6], [0.7, 0.8]], 'b2': [0.1, 0.2], 'W3': [[-1.0, 2.0], [-3.0, 4.0]], 'b3': [0.1, -0.1], 'Wa': [[-1.0, 1.0], [-1.0, 1.0]], 'ba': [0.5, -0.5], 'Wc': [[-2.0], [7.0]], 'bc': [10.0]}\nstate = [1.0, 2.0, 3.0]"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_ratio = 1 - l1_ratio\n    if gradient:\n        gradient = alpha * (l1_ratio * np.sign(w) + l2_ratio * w)\n        return [round(float(x), 4) for x in gradient.tolist()]\n    else:\n        penalty = alpha * (l1_ratio * np.linalg.norm(w, ord=1) + l2_ratio * 0.5 * np.dot(w, w))\n        return round(float(penalty), 4)\nalpha = 0.1\nl1_ratio = 0.5"}
{"task_id": 253, "completion_id": 1, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_ratio = 1.0 - l1_ratio\n    if gradient:\n        gradient_w = alpha * (l1_ratio * np.sign(w) + l2_ratio * w)\n        return list(np.round(gradient_w, decimals=4))\n    else:\n        penalty_value = alpha * (l1_ratio * np.linalg.norm(w, ord=1) + l2_ratio * 0.5 * np.dot(w, w))\n        return round(penalty_value, 4)\nweights = [1, -2, 1.5, -0.5]\nalpha = 0.5\nl1_ratio = 0.7\npenalty_value = elastic_net_regularization(weights, alpha, l1_ratio)\ngradient = elastic_net_regularization(weights, alpha, l1_ratio, gradient=True)"}
{"task_id": 253, "completion_id": 2, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_ratio = 1 - l1_ratio\n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + l2_ratio * w)\n        return [round(x, 4) for x in grad.tolist()]\n    else:\n        penalty = alpha * (l1_ratio * np.linalg.norm(w, 1) + l2_ratio * 0.5 * np.dot(w, w))\n        return round(penalty, 4)\nalpha = 0.5\nl1_ratio = 0.6"}
{"task_id": 253, "completion_id": 3, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_ratio = 1.0 - l1_ratio\n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + l2_ratio * w)\n        return [round(x, 4) for x in grad.tolist()]\n    else:\n        penalty = alpha * (l1_ratio * np.linalg.norm(w, 1) + l2_ratio * 0.5 * np.dot(w.T, w))\n        return round(penalty, 4)\nalpha = 0.5\nl1_ratio = 0.7"}
{"task_id": 253, "completion_id": 4, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l1_term = np.abs(w)\n    l2_term = 0.5 * w * w\n    if gradient:\n        gradient_l1 = l1_ratio * np.sign(w)\n        gradient_l2 = (1 - l1_ratio) * w\n        penalty_gradient = alpha * (gradient_l1 + gradient_l2)\n        return [round(x, 4) for x in penalty_gradient.tolist()]\n    else:\n        penalty_value = alpha * (l1_ratio * np.sum(l1_term) + (1 - l1_ratio) * np.sum(l2_term))\n        return round(penalty_value, 4)\nweights = [1.0, -2.0, 3.0]\nalpha_value = 0.5\nl1_ratio_value = 0.7\ngradient = elastic_net_regularization(weights, alpha_value, l1_ratio=l1_ratio_value, gradient=True)"}
{"task_id": 253, "completion_id": 5, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w, dtype=float)\n    l1_penalty = l1_ratio * np.linalg.norm(w, ord=1)\n    l2_penalty = (1 - l1_ratio) * 0.5 * np.dot(w, w)\n    penalty_value = alpha * (l1_penalty + l2_penalty)\n    if gradient:\n        l1_grad = l1_ratio * np.sign(w)\n        l2_grad = (1 - l1_ratio) * w\n        grad = alpha * (l1_grad + l2_grad)\n        return [round(x, 4) for x in grad.tolist()]\n    else:\n        return round(penalty_value, 4)\nw = [1.5, -2.0, 0.5]\nalpha = 0.1\nl1_ratio = 0.8\ngrad = elastic_net_regularization(w, alpha, l1_ratio, gradient=True)"}
{"task_id": 253, "completion_id": 6, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w_np = np.array(w)\n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w_np) + (1 - l1_ratio) * w_np)\n        return [round(num, 4) for num in grad.tolist()]\n    else:\n        penalty = alpha * (l1_ratio * np.linalg.norm(w_np, 1) + (1 - l1_ratio) * 0.5 * np.dot(w_np, w_np))\n        return round(penalty, 4)"}
{"task_id": 253, "completion_id": 7, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_ratio = 1 - l1_ratio\n    if gradient:\n        grad = l1_ratio * np.sign(w) + l2_ratio * w\n        return [round(i, 4) for i in list(alpha * grad)]\n    else:\n        penalty = l1_ratio * np.linalg.norm(w, 1) + l2_ratio * 0.5 * np.dot(w, w)\n        return round(alpha * penalty, 4)\nalpha = 0.1\nl1_ratio = 0.5"}
{"task_id": 253, "completion_id": 8, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_ratio = 1 - l1_ratio\n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + l2_ratio * w)\n        return [round(x, 4) for x in grad.tolist()]\n    else:\n        penalty = alpha * (l1_ratio * np.linalg.norm(w, ord=1) + l2_ratio * 0.5 * np.dot(w, w))\n        return round(penalty, 4)\nw = [1.0, -2.0, 1.5]\nalpha = 0.5\nl1_ratio = 0.3\npenalty = elastic_net_regularization(w, alpha, l1_ratio)\ngradient = elastic_net_regularization(w, alpha, l1_ratio, True)"}
{"task_id": 253, "completion_id": 9, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_ratio = 1 - l1_ratio\n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + l2_ratio * w)\n        return [round(x, 4) for x in grad.tolist()]\n    else:\n        penalty = alpha * (l1_ratio * np.linalg.norm(w, ord=1) + l2_ratio * 0.5 * np.dot(w, w))\n        return round(penalty, 4)"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    true_param_name = param_name.lower() if param_name in ['Ba', 'Bx'] else param_name\n    original_param = deepcopy(model.parameters[true_param_name])\n    grads = np.zeros_like(original_param)\n    for i in range(original_param.size):\n        param_flattened = original_param.flatten()\n        param_flattened[i] += epsilon\n        model.parameters[true_param_name] = param_flattened.reshape(original_param.shape)\n        y_plus = []\n        for t in range(n_t):\n            y_plus.append(model.forward(X[:, :, t]))\n        L_plus = loss_func(y_plus)\n        param_flattened[i] -= 2 * epsilon\n        model.parameters[true_param_name] = param_flattened.reshape(original_param.shape)\n        y_minus = []\n        for t in range(n_t):\n            y_minus.append(model.forward(X[:, :, t]))\n        L_minus = loss_func(y_minus)\n        grads.flat[i] = (L_plus - L_minus) / (2 * epsilon)\n        param_flattened[i] += epsilon\n    model.parameters[true_param_name] = original_param\n    return grads.T"}
{"task_id": 256, "completion_id": 1, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    key_map = {'Ba': 'ba', 'Bx': 'bx'}\n    real_param_name = key_map.get(param_name, param_name)\n    param = model.parameters[real_param_name]\n    grads = np.zeros_like(param, dtype=np.float64)\n    for idx in np.ndindex(param.shape):\n        model.flush_gradients()\n        param_plus = deepcopy(param)\n        param_plus[idx] += epsilon\n        param_minus = deepcopy(param)\n        param_minus[idx] -= epsilon\n        model.parameters[real_param_name] = param_plus\n        plus_loss = _run_forward_pass(model, loss_func, n_t, X)\n        model.parameters[real_param_name] = param_minus\n        minus_loss = _run_forward_pass(model, loss_func, n_t, X)\n        grads[idx] = (plus_loss - minus_loss) / (2 * epsilon)\n    model.parameters[real_param_name] = param\n    return grads.T\ndef _run_forward_pass(model, loss_func, n_t, X):\n    predictions = []\n    for t in range(n_t):\n        predictions.append(model.forward(X[:, :, t]))\n    return loss_func(predictions)"}
{"task_id": 256, "completion_id": 2, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    param_lower = param_name.lower() if param_name in ['Ba', 'Bx'] else param_name\n    param = model.parameters[param_lower]\n    grads = np.zeros_like(param).astype(np.float64)\n\n    def forward_and_loss(model, param_name, perturb):\n        original_param = model.parameters[param_name]\n        perturbed_param = original_param + perturb * epsilon\n        model.parameters[param_name] = perturbed_param\n        predictions = []\n        for t in range(n_t):\n            model.flush_gradients()\n            prediction = model.forward(X[:, :, t])\n            predictions.append(prediction)\n        model.parameters[param_name] = original_param\n        return loss_func(predictions)\n    for (idx, _) in np.ndenumerate(param):\n        perturb = np.zeros_like(param)\n        perturb[idx] = 1.0\n        loss_pos = forward_and_loss(deepcopy(model), param_lower, perturb=1)\n        loss_neg = forward_and_loss(deepcopy(model), param_lower, perturb=-1)\n        grad = (loss_pos - loss_neg) / (2 * epsilon)\n        grads[idx] = grad\n    return grads.T"}
{"task_id": 256, "completion_id": 3, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    param = model.parameters[param_name]\n    grads = np.zeros_like(param, dtype=np.float64)\n    for i in range(param.size):\n        param_perturbed = deepcopy(param)\n        param_perturbed.flat[i] += epsilon\n        model.parameters[param_name] = param_perturbed\n        loss_plus = 0\n        for t in range(n_t):\n            model.flush_gradients()\n            prediction = model.forward(X[:, :, t])\n            loss_plus += loss_func([prediction])\n        param_perturbed = deepcopy(param)\n        param_perturbed.flat[i] -= epsilon\n        model.parameters[param_name] = param_perturbed\n        loss_minus = 0\n        for t in range(n_t):\n            model.flush_gradients()\n            prediction = model.forward(X[:, :, t])\n            loss_minus += loss_func([prediction])\n        model.parameters[param_name] = param\n        grads.flat[i] = (loss_plus - loss_minus) / (2 * epsilon)\n    return grads.T"}
{"task_id": 256, "completion_id": 4, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    theta = model.parameters[param_name]\n    grads = np.zeros_like(theta, dtype=np.float64)\n\n    def run_forward_and_get_loss():\n        model.flush_gradients()\n        predictions = []\n        model.parameters[param_name] = theta\n        for t in range(n_t):\n            X_t = X[:, :, t]\n            pred_t = model.forward(X_t)\n            predictions.append(pred_t)\n        loss = loss_func(predictions)\n        return loss\n    for i in range(theta.size):\n        theta_perturbed = theta.copy()\n        theta_perturbed.flat[i] += epsilon\n        model.parameters[param_name] = theta_perturbed\n        loss_plus = run_forward_and_get_loss()\n        theta_perturbed = theta.copy()\n        theta_perturbed.flat[i] -= epsilon\n        model.parameters[param_name] = theta_perturbed\n        loss_minus = run_forward_and_get_loss()\n        grads.flat[i] = (loss_plus - loss_minus) / (2.0 * epsilon)\n    return grads.T"}
{"task_id": 256, "completion_id": 5, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    param_key = param_name.lower() if param_name in ['Ba', 'Bx'] else param_name\n    param_shape = model.parameters[param_key].shape\n    grads = np.zeros(param_shape, dtype=np.float64)\n    for idx in np.ndindex(param_shape):\n        perturbed_model = deepcopy(model)\n        perturbed_model.parameters[param_key][idx] += epsilon\n        perturbed_model.flush_gradients()\n        predictions = []\n        for t in range(n_t):\n            predictions.append(perturbed_model.forward(X[:, :, t]))\n        L_pos = loss_func(predictions)\n        perturbed_model.parameters[param_key][idx] -= 2 * epsilon\n        predictions = []\n        for t in range(n_t):\n            predictions.append(perturbed_model.forward(X[:, :, t]))\n        L_neg = loss_func(predictions)\n        perturbed_model.parameters[param_key][idx] += epsilon\n        grads[idx] = (L_pos - L_neg) / (2 * epsilon)\n    return grads.T"}
{"task_id": 256, "completion_id": 6, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    param_name_lower = param_name.lower() if param_name in ['Ba', 'Bx'] else param_name\n    param = model.parameters[param_name_lower]\n    grads = np.zeros_like(param, dtype=np.float64)\n    for i in range(param.size):\n        temp_param = param.ravel()\n        temp_param[i] += epsilon\n        model.parameters[param_name_lower] = temp_param.reshape(param.shape)\n        model.flush_gradients()\n        loss_pos = loss_func([model.forward(np.take(X, t, axis=2)) for t in range(n_t)])\n        temp_param[i] -= 2 * epsilon\n        model.parameters[param_name_lower] = temp_param.reshape(param.shape)\n        model.flush_gradients()\n        loss_neg = loss_func([model.forward(np.take(X, t, axis=2)) for t in range(n_t)])\n        temp_param[i] += epsilon\n        grad_est = (loss_pos - loss_neg) / (2 * epsilon)\n        grads.ravel()[i] = grad_est\n    return grads.T"}
{"task_id": 256, "completion_id": 7, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    real_param_name = param_name.lower() if param_name in ['Ba', 'Bx'] else param_name\n    param = model.parameters[real_param_name]\n    grads = np.zeros_like(param, dtype=np.float64)\n    X_unrolled = np.rollaxis(X, 2)\n    it = np.nditer(param, flags=['multi_index'], op_flags=['readwrite'])\n    while not it.finished:\n        orig_value = it[0]\n        it[0] = orig_value + epsilon\n        model.parameters[real_param_name] = param\n        model.flush_gradients()\n        predictions = [model.forward(x) for x in X_unrolled]\n        L_pos = loss_func(predictions)\n        it[0] = orig_value - epsilon\n        model.parameters[real_param_name] = param\n        model.flush_gradients()\n        predictions = [model.forward(x) for x in X_unrolled]\n        L_neg = loss_func(predictions)\n        it[0] = orig_value\n        model.parameters[real_param_name] = param\n        grads[it.multi_index] = (L_pos - L_neg) / (2 * epsilon)\n        it.iternext()\n    return grads.T"}
{"task_id": 256, "completion_id": 8, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    real_name = param_name.lower() if param_name in ['Ba', 'Bx'] else param_name\n    param = deepcopy(model.parameters[real_name])\n    grads = np.zeros_like(param, dtype=np.float64)\n    for i in np.ndindex(param.shape):\n        param_perturbed = deepcopy(param)\n        param_perturbed[i] += epsilon\n        model.parameters[real_name] = param_perturbed\n        model.flush_gradients()\n        predictions_plus = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_plus = loss_func(predictions_plus)\n        param_perturbed = deepcopy(param)\n        param_perturbed[i] -= epsilon\n        model.parameters[real_name] = param_perturbed\n        model.flush_gradients()\n        predictions_minus = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_minus = loss_func(predictions_minus)\n        grads[i] = (loss_plus - loss_minus) / (2 * epsilon)\n    model.parameters[real_name] = param\n    return grads.T"}
{"task_id": 256, "completion_id": 9, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    param_key = param_name.lower() if param_name in ['Ba', 'Bx'] else param_name\n    param = model.parameters[param_key]\n    grads = np.zeros_like(param, dtype=np.float64)\n\n    def compute_loss(modified_param):\n        original_param = deepcopy(param)\n        model.parameters[param_key] = modified_param\n        model.flush_gradients()\n        predictions = []\n        for t in range(n_t):\n            predictions.append(model.forward(X[:, :, t]))\n        loss = loss_func(predictions)\n        model.parameters[param_key] = original_param\n        return loss\n    it = np.nditer(param, flags=['multi_index'], op_flags=['readwrite'])\n    while not it.finished:\n        idx = it.multi_index\n        original_value = param[idx]\n        param[idx] = original_value + epsilon\n        loss_pos = compute_loss(param)\n        param[idx] = original_value - epsilon\n        loss_neg = compute_loss(param)\n        param[idx] = original_value\n        grads[idx] = (loss_pos - loss_neg) / (2 * epsilon)\n        it.iternext()\n    return grads.T"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\ndef build_stump(X_train, y_train, weights):\n    \"\"\"Builds the best decision stump according to weighted error.\"\"\"\n    (m, n) = X_train.shape\n    best_e = float('inf')\n    best_j = best_v = best_s = None\n    for j in range(n):\n        feature_values = X_train[:, j]\n        for value in np.unique(feature_values):\n            for s in [-1, 1]:\n                y_pred = s * (feature_values <= value)\n                e = np.sum(weights[y_pred != y_train])\n                if e < best_e:\n                    best_e = e\n                    (best_j, best_v, best_s) = (j, value, s)\n    return (best_j, best_v, best_s, best_e)\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in X_test.\n    \"\"\"\n    n_clf = max(1, n_clf)\n    (m, _) = X_train.shape\n    (k, _) = X_test.shape\n    stumps = []\n    alpha = []\n    D = np.full(m, 1 / m)\n    for _ in range(n_clf):\n        (j, v, s, e) = build_stump(X_train, y_train, D)\n        a = 0.5 * np.log((1 - e) / e)\n        stump = (j, v, s, e, a)\n        stumps.append(stump)\n        alpha.append(a)\n        y_pred = s * (X_train[:, j] <= v)\n        D *= np.exp(-a * y_train * y_pred.reshape(D.shape))\n        D /= np.sum(D)\n    predictions = np.zeros(k)\n    for (j, v, s, e, a) in stumps:\n        predictions += a * (s * (X_test[:, j] <= v))\n    predictions = np.sign(predictions).astype(int).tolist()\n    return predictions"}
{"task_id": 257, "completion_id": 1, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n    \n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_clf = max(n_clf, 1)\n    (n_samples, n_features) = X_train.shape\n    D = np.full(n_samples, 1 / n_samples)\n    h = []\n    alpha = []\n    test_preds = np.zeros((n_clf, len(X_test)))\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_threshold = 0\n        best_feature = 0\n        best_polarity = 1\n        for feature in range(n_features):\n            for threshold in np.unique(X_train[:, feature]):\n                for polarity in [-1, 1]:\n                    prediction = np.where(polarity * X_train[:, feature] > polarity * threshold, 1, -1)\n                    error = np.sum(D[prediction != y_train])\n                    if error < best_error:\n                        best_error = error\n                        best_threshold = threshold\n                        best_feature = feature\n                        best_polarity = polarity\n        stump_weight = 0.5 * np.log((1.0 - best_error) / best_error)\n        test_preds[-1] += stump_weight * np.where(best_polarity * X_test[:, best_feature] > best_polarity * best_threshold, 1, -1)\n        D *= np.exp(-stump_weight * y_train * np.where(best_polarity * X_train[:, best_feature] > best_polarity * best_threshold, 1, -1))\n        D /= np.sum(D)\n        h.append((best_feature, best_threshold, best_polarity))\n        alpha.append(stump_weight)\n    final_predictions = np.sign(np.sum(test_preds, axis=0))\n    return list(final_predictions)"}
{"task_id": 257, "completion_id": 2, "solution": "import numpy as np\ndef build_decision_stump(X, y, weights):\n    \"\"\"Build a decision stump that minimizes the weighted classification error.\n    \n    Args:\n        X: Training samples.\n        y: Training labels.\n        weights: Weights corresponding to each sample.\n        \n    Returns:\n        The index of feature, the threshold, the polarity, and the error.\n    \"\"\"\n    (m, n) = X.shape\n    best_e = float('inf')\n    best_f = None\n    best_t = None\n    best_p = None\n    for feature in range(n):\n        thresholds = np.unique(X[:, feature])\n        for threshold in thresholds:\n            for polarity in [-1, 1]:\n                prediction = np.ones_like(y) * polarity\n                if polarity == 1:\n                    prediction[X[:, feature] < threshold] = -1\n                else:\n                    prediction[X[:, feature] >= threshold] = -1\n                e = np.sum(weights * (prediction != y))\n                if e < best_e:\n                    best_e = e\n                    best_f = feature\n                    best_t = threshold\n                    best_p = polarity\n    return (best_f, best_t, best_p, best_e)\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    m = X_train.shape[0]\n    n_clf = max(1, n_clf)\n    clfs = []\n    alphas = []\n    weights = np.full(m, 1 / m)\n    for t in range(n_clf):\n        (feature, threshold, polarity, error) = build_decision_stump(X_train, y_train, weights)\n        prediction = np.ones_like(y_train) * polarity\n        if polarity == 1:\n            prediction[X_train[:, feature] < threshold] = -1\n        else:\n            prediction[X_train[:, feature] >= threshold] = -1\n        alpha = 0.5 * np.log((1 - error) / error)\n        miss = prediction != y_train\n        Z = np.sum(weights * np.exp(-alpha * y_train * prediction))\n        weights = weights * np.exp(alpha * miss) / Z\n        clfs.append((feature, threshold, polarity))\n        alphas.append(alpha)\n    predictions = np.zeros(X_test.shape[0])\n    for (i, clf) in enumerate(clfs):\n        (feature, threshold, polarity) = clf\n        prediction = np.ones(X_test.shape[0]) * polarity\n        if polarity == 1:\n            prediction[X_test[:, feature] < threshold] = -1\n        else:\n            prediction[X_test[:, feature] >= threshold] = -1\n        predictions += alphas[i] * prediction\n    return list(np.sign(predictions))"}
{"task_id": 257, "completion_id": 3, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    n_clf = max(1, n_clf)\n    weights = np.full(m, 1.0 / m)\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        best_stump = None\n        min_error = 1.0\n        for feature_idx in range(n):\n            for threshold in np.unique(X_train[:, feature_idx]):\n                stump = DecisionStump(feature_idx, threshold)\n                error = weighted_error(stump, X_train, y_train, weights)\n                if error < min_error:\n                    best_stump = stump\n                    min_error = error\n        stump_correct = best_stump.predict(X_train) == y_train\n        stump_error = np.sum(weights * np.logical_not(stump_correct))\n        alpha = 0.5 * np.log((1 - stump_error) / stump_error)\n        alphas.append(alpha)\n        stumps.append(best_stump)\n        weights *= np.exp(-alpha * y_train * best_stump.predict(X_train))\n        weights /= np.sum(weights)\n\n    def aggregate_votes(stumps, alphas, X):\n        votes_sum = np.zeros(len(X))\n        for (stump, alpha) in zip(stumps, alphas):\n            votes_sum += alpha * stump.predict(X)\n        return np.sign(votes_sum)\n    return list(aggregate_votes(stumps, alphas, X_test).astype(int))\nclass DecisionStump:\n\n    def __init__(self, feature_idx, threshold):\n        self.feature_idx = feature_idx\n        self.threshold = threshold\n\n    def predict(self, X):\n        predictions = np.ones(X.shape[0])\n        predictions[X[:, self.feature_idx] < self.threshold] = -1\n        return predictions\ndef weighted_error(stump, X, y, weights):\n    predictions = stump.predict(X)\n    error = np.sum(weights * (predictions != y))\n    return error"}
{"task_id": 257, "completion_id": 4, "solution": "import numpy as np\ndef build_decision_stump(X, y, weights):\n    \"\"\"Builds a decision stump.\n    \n    Args:\n        X: Training samples.\n        y: Labels of the samples.\n        weights: Weights of the samples for weighted error calculation.\n    \n    Returns:\n        A tuple (dim_idx, pivot, pred_left, pred_right, best_error)\n    \"\"\"\n    (m, n) = X.shape\n    best_error = np.inf\n    best_dim_idx = -1\n    best_pred_left = -1\n    best_pred_right = -1\n    best_pivot = -1\n    for dim_idx in range(n):\n        features = X[:, dim_idx]\n        for pivot in np.unique(features):\n            pred_left = np.sign(y[np.where(features < pivot)].sum())\n            pred_right = pred_left * -1\n            predictions = np.full(m, pred_right)\n            predictions[features < pivot] = pred_left\n            error = np.sum(weights * (predictions != y))\n            if error < best_error:\n                best_error = error\n                best_dim_idx = dim_idx\n                best_pred_left = pred_left\n                best_pred_right = pred_right\n                best_pivot = pivot\n    return (best_dim_idx, best_pivot, best_pred_left, best_pred_right, best_error)\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n    \n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf: Number of weak classifiers (decision stumps) to build. Must be > 0.\n    \n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    k = X_test.shape[0]\n    n_clf = max(n_clf, 1)\n    stumps = []\n    stump_weights = []\n    classifier_weights = np.full(m, 1 / m)\n    for _ in range(n_clf):\n        (best_dim_idx, best_pivot, best_pred_left, best_pred_right, best_error) = build_decision_stump(X_train, y_train, classifier_weights)\n        stump_weight = 0.5 * np.log((1 - best_error) / (best_error + 1e-10))\n        stumps.append((best_dim_idx, best_pivot, best_pred_left, best_pred_right))\n        stump_weights.append(stump_weight)\n        predictions = np.full(m, best_pred_right)\n        feature_selection = X_train[:, best_dim_idx]\n        predictions[feature_selection < best_pivot] = best_pred_left\n        new_weights = classifier_weights * np.exp(-stump_weight * y_train * predictions)\n        classifier_weights = new_weights / new_weights.sum()\n    test_predictions = np.zeros(k)\n    for (i, stump) in enumerate(stumps):\n        (dim_idx, pivot, pred_left, pred_right) = stump\n        predictions = np.full(k, pred_left)\n        predictions[X_test[:, dim_idx] >= pivot] = pred_right\n        test_predictions += stump_weights[i] * predictions\n    return np.sign(test_predictions).tolist()"}
{"task_id": 257, "completion_id": 5, "solution": "import numpy as np\nclass DecisionStump:\n\n    def __init__(self):\n        self.polarity = 1\n        self.feature_idx = None\n        self.threshold = 0\n        self.alpha = 0\n\n    def predict(self, X: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Predict class labels for samples in X.\n\n        Args:\n        X: 2-D NumPy array of shape (k, n) containing test features.\n\n        Returns:\n        A 1-D NumPy array containing predicted class labels.\n        \"\"\"\n        n_samples = X.shape[0]\n        y_pred = np.ones(n_samples)\n        if self.polarity == 1:\n            y_pred[X[:, self.feature_idx] < self.threshold] = -1\n        else:\n            y_pred[X[:, self.feature_idx] > self.threshold] = -1\n        return y_pred\ndef build_stump(X: np.ndarray, y: np.ndarray, weights: np.ndarray) -> DecisionStump:\n    \"\"\"\n    Builds a decision stump that minimizes the weighted classification error.\n\n    Args:\n    X: 2-D NumPy array of shape (m, n) containing the training features.\n    y: 1-D NumPy array of length m with labels **-1** or **1**.\n    weights: 1-D NumPy array of sample weights.\n\n    Returns:\n    The best decision stump based on minimized weighted error.\n    \"\"\"\n    stump = DecisionStump()\n    min_error = float('inf')\n    n_features = X.shape[1]\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        thresholds = np.unique(feature_values)\n        for threshold in thresholds:\n            for polarity in [-1, 1]:\n                y_guess = np.ones_like(y)\n                if polarity == 1:\n                    y_guess[feature_values < threshold] = -1\n                else:\n                    y_guess[feature_values > threshold] = -1\n                error = np.sum(weights[y_guess != y])\n                if error < min_error:\n                    min_error = error\n                    stump.polarity = polarity\n                    stump.feature_idx = feature_idx\n                    stump.threshold = threshold\n    return (stump, min_error)\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"\n    Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n    X_train: 2-D NumPy array of shape (m, n) containing the training features.\n    y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n    X_test: 2-D NumPy array of shape (k, n) containing test features.\n    n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n    A Python list of length k, each element being either -1 or 1, the\n    predicted class for the corresponding row in X_test.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    n_samples = X_train.shape[0]\n    weights = np.full(n_samples, 1 / n_samples)\n    weak_clfs = []\n    for _ in range(n_clf):\n        (stump, error) = build_stump(X_train, y_train, weights)\n        stump.alpha = 0.5 * np.log((1.0 - error) / max(error, 1e-10))\n        y_guess = stump.predict(X_train)\n        weights *= np.exp(-stump.alpha * y_train * y_guess)\n        weights /= np.sum(weights)\n        weak_clfs.append((stump, stump.alpha))\n    y_preds = [clf.predict(X_test) for (clf, alpha) in weak_clfs]\n    y_preds = np.array(y_preds) * np.array([alpha for (_, alpha) in weak_clfs])[:, np.newaxis]\n    return list(np.sign(y_preds.sum(axis=0)))"}
{"task_id": 257, "completion_id": 6, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    n_clf = max(1, n_clf)\n    weights = np.full(m, 1 / m)\n    clfs = []\n    alphas = []\n    for _ in range(n_clf):\n        (clf, err) = find_best_stump(X_train, y_train, weights)\n        if err >= 0.5:\n            break\n        alpha = 0.5 * np.log((1 - err) / err)\n        pred_y = clf.predict(X_train)\n        pred_y = np.where(pred_y > 0, 1, -1)\n        weights = update_weights(weights, pred_y, y_train, alpha)\n        weights = weights / np.sum(weights)\n        clfs.append(clf)\n        alphas.append(alpha)\n    predictions = np.zeros(X_test.shape[0])\n    for (clf, alpha) in zip(clfs, alphas):\n        predictions += alpha * clf.predict(X_test)\n    return list(np.sign(predictions))\ndef find_best_stump(X, y, weights):\n    (m, n) = X.shape\n    best_error = float('inf')\n    best_clf = None\n    for i in range(n):\n        for val in np.unique(X[:, i]):\n            cl = Stump(i, val)\n            pred_y = np.where(cl.predict(X) > 0, 1, -1)\n            error = np.sum(weights[pred_y != y])\n            if error < best_error:\n                best_error = error\n                best_clf = cl\n    if best_clf is None:\n        best_clf = Stump(0, 0)\n    return (best_clf, best_error)\ndef update_weights(weights, pred_y, y, alpha):\n    new_weights = np.copy(weights)\n    new_weights[pred_y == y] *= np.exp(-alpha)\n    new_weights[pred_y != y] *= np.exp(alpha)\n    return new_weights\nclass Stump:\n\n    def __init__(self, index, value):\n        self.index = index\n        self.value = value\n\n    def predict(self, X):\n        return (X[:, self.index] > self.value).astype(int)"}
{"task_id": 257, "completion_id": 7, "solution": "import numpy as np\nclass DecisionStump:\n\n    def __init__(self):\n        self.feature = 0\n        self.threshold = 0.0\n        self.split = 0\n        self.polarity = 1\n\n    def fit(self, X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray):\n        min_error = float('inf')\n        for idx in range(X.shape[1]):\n            thresholds = np.unique(X[:, idx])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    pred = np.ones(len(y))\n                    pred[X[:, idx] < threshold] = -1\n                    error = np.sum(sample_weights * (pred != y))\n                    if polarity == -1:\n                        error = np.sum(sample_weights * (pred == y))\n                    if error < min_error:\n                        self.feature = idx\n                        self.threshold = threshold\n                        self.split = polarity\n                        self.polarity = polarity\n                        min_error = error\n        self.err = min_error\n        self.alpha = 0.5 * np.log((1.0 - self.err) / (self.err + 1e-10))\n\n    def predict(self, X: np.ndarray):\n        pred = np.ones(X.shape[0])\n        condition = X[:, self.feature] < self.threshold\n        pred[condition if self.split == 1 else ~condition] = -1\n        return pred * self.polarity\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_clf = max(1, n_clf)\n    stumps = []\n    alphas = []\n    sample_weights = np.full(len(y_train), 1 / len(y_train))\n    for _ in range(n_clf):\n        stump = DecisionStump()\n        stump.fit(X_train, y_train, sample_weights)\n        stump_pred = stump.predict(X_train)\n        error = np.sum((stump_pred != y_train) * sample_weights)\n        stump.alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        sample_weights *= np.exp(-stump.alpha * y_train * stump_pred)\n        sample_weights /= np.sum(sample_weights)\n        stumps.append(stump)\n        alphas.append(stump.alpha)\n    stump_preds = np.array([stump.predict(X_test) for stump in stumps])\n    final_preds = np.sign(np.sum(stump_preds * alphas[:, np.newaxis], axis=0))\n    return final_preds.tolist()"}
{"task_id": 257, "completion_id": 8, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n    \n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    n_clf = max(n_clf, 1)\n    weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        best_split = None\n        best_feature_idx = 0\n        min_error = float('inf')\n        for feature_idx in range(n_features):\n            unique_values = np.unique(X_train[:, feature_idx])\n            for split in unique_values:\n                stump = (feature_idx, split)\n                prediction = np.where(X_train[:, feature_idx] > split, 1, -1)\n                misclassified = weights[prediction != y_train]\n                weighted_error = misclassified.sum()\n                if weighted_error < min_error:\n                    min_error = weighted_error\n                    best_split = stump\n        alpha = 0.5 * np.log((1 - min_error) / min_error)\n        prediction = np.where(X_train[:, best_split[0]] > best_split[1], 1, -1)\n        weights *= np.exp(-alpha * y_train * prediction)\n        weights /= weights.sum()\n        stumps.append(best_split)\n        alphas.append(alpha)\n    predictions = np.zeros(len(X_test))\n    for ((feature_idx, split), alpha) in zip(stumps, alphas):\n        prediction = np.where(X_test[:, feature_idx] > split, 1, -1)\n        predictions += alpha * prediction\n    final_predictions = np.sign(predictions).tolist()\n    return final_predictions"}
{"task_id": 257, "completion_id": 9, "solution": "import numpy as np\nclass DecisionStump:\n\n    def fit(self, X, y, weights):\n        best_err = 1.0\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        for feature in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    y_pred = polarity * np.where(X[:, feature] > threshold, 1, -1)\n                    error = np.sum(weights * (y != y_pred))\n                    if error < best_err:\n                        best_err = error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n        self.feature = best_feature\n        self.threshold = best_threshold\n        self.polarity = best_polarity\n\n    def predict(self, X):\n        return self.polarity * np.where(X[:, self.feature] > self.threshold, 1, -1)\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_clf = max(1, n_clf)\n    stumps = []\n    alpha_values = []\n    weights = np.full(X_train.shape[0], 1 / X_train.shape[0])\n    for t in range(n_clf):\n        stump = DecisionStump()\n        stump.fit(X_train, y_train, weights)\n        stumps.append(stump)\n        y_pred = stump.predict(X_train)\n        error = np.sum(weights * (y_train != y_pred))\n        alpha = 0.5 * np.log((1 - error) / error)\n        alpha_values.append(alpha)\n        weights *= np.exp(-alpha * y_train * y_pred)\n        weights /= np.sum(weights)\n    predictions = 0\n    for (alpha, stump) in zip(alpha_values, stumps):\n        predictions += alpha * stump.predict(X_test)\n    return list(np.sign(predictions))\nX_train = np.array([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]])\ny_train = np.array([-1, 1, -1])\nX_test = np.array([[0.15, 0.25], [0.45, 0.55]])\nn_clf = 3\npredictions = adaboost_predict(X_train, y_train, X_test, n_clf)"}
{"task_id": 261, "completion_id": 0, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions.')\n    fan_in = shape[1]\n    fan_out = shape[0]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    std_dev = np.sqrt(2.0 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=std_dev, size=shape)"}
{"task_id": 261, "completion_id": 1, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) == 2:\n        (fan_in, fan_out) = shape\n        receptive_field_size = 1\n    else:\n        fan_in = shape[1] * np.prod(shape[2:])\n        fan_out = shape[0] * np.prod(shape[2:])\n        receptive_field_size = np.prod(shape[2:])\n    s = np.sqrt(2 / (fan_in + fan_out))\n    rng = np.random.default_rng()\n    return rng.normal(loc=0, scale=s, size=shape)"}
{"task_id": 261, "completion_id": 2, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    assert len(shape) >= 2, 'Shape must have at least two dimensions.'\n    (fan_in, fan_out) = (shape[0], shape[1])\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    s = np.sqrt(2.0 / (fan_in + fan_out))\n    return np.random.normal(loc=0, scale=s, size=shape)"}
{"task_id": 261, "completion_id": 3, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions')\n    if len(shape) == 2:\n        (fan_in, fan_out) = shape\n    else:\n        fan_in = shape[1] * np.prod(shape[2:])\n        fan_out = shape[0] * np.prod(shape[2:])\n    std_dev = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(0, std_dev, size=shape)"}
{"task_id": 261, "completion_id": 4, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions.')\n    fan_in = shape[1]\n    fan_out = shape[0]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    std_dev = np.sqrt(2 / (fan_in + fan_out))\n    return std_dev * np.random.randn(*shape)"}
{"task_id": 261, "completion_id": 5, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    assert len(shape) >= 2, 'Shape must include at least two dimensions.'\n    fan_in = shape[1]\n    fan_out = shape[0]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    stddev = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0, scale=stddev, size=shape)\nexample_shape = (10, 15, 3, 3)\nfan_in = example_shape[1] * np.prod(example_shape[2:])\nfan_out = example_shape[0] * np.prod(example_shape[2:])"}
{"task_id": 261, "completion_id": 6, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n    \n    Args:\n        shape: Tuple describing the desired tensor shape. Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n    \n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions.')\n    fan_in = shape[1]\n    fan_out = shape[0]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    s = np.sqrt(2 / (fan_in + fan_out))\n    np.random.seed()\n    return s * np.random.randn(*shape)"}
{"task_id": 261, "completion_id": 7, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) == 2:\n        (fan_in, fan_out) = shape\n    else:\n        fan_in = shape[1] * np.prod(shape[2:])\n        fan_out = shape[0] * np.prod(shape[2:])\n    s = np.sqrt(2 / (fan_in + fan_out))\n    random_values = np.random.normal(loc=0, scale=s, size=shape)\n    return random_values.astype(np.float32)"}
{"task_id": 261, "completion_id": 8, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) == 2:\n        (fan_in, fan_out) = shape\n    else:\n        fan_in = shape[1] * np.prod(shape[2:])\n        fan_out = shape[0] * np.prod(shape[2:])\n    s = np.sqrt(2.0 / (fan_in + fan_out))\n    np.random.seed(42)\n    random_state = np.random.get_state()\n    np.random.seed(42)\n    initial_array = np.random.normal(loc=0, scale=s, size=shape)\n    np.random.set_state(random_state)\n    return initial_array\nshape = (3, 4, 5)"}
{"task_id": 261, "completion_id": 9, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions.')\n    fan_in = shape[1]\n    fan_out = shape[0]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    s = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=s, size=shape)"}
{"task_id": 266, "completion_id": 0, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n    \n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    G = [[] for _ in V]\n    vertex_index = {vertex: idx for (idx, vertex) in enumerate(V)}\n    for (u, v) in E:\n        u_idx = vertex_index[u]\n        v_idx = vertex_index[v]\n        if v not in G[u_idx]:\n            G[u_idx].append(v)\n        if u not in G[v_idx]:\n            G[v_idx].append(u)\n    for i in range(len(G)):\n        G[i].sort(key=lambda x: vertex_index[x])\n    return G"}
{"task_id": 266, "completion_id": 1, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\"\"\"\n    G = [[] for _ in V]\n    vertex_idx = {vertex: idx for (idx, vertex) in enumerate(V)}\n    for (u, v) in E:\n        if v not in G[vertex_idx[u]]:\n            G[vertex_idx[u]].append(v)\n        if u not in G[vertex_idx[v]]:\n            G[vertex_idx[v]].append(u)\n    for (i, neighbors) in enumerate(G):\n        G[i] = sorted(neighbors, key=lambda neighbor: vertex_idx[neighbor])\n    return G"}
{"task_id": 266, "completion_id": 2, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n    \n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n    \n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    adj_dict = {v: [] for v in V}\n    for edge in E:\n        (u, v) = edge\n        if v not in adj_dict[u]:\n            adj_dict[u].append(v)\n        if u not in adj_dict[v]:\n            adj_dict[v].append(u)\n    adj_list = [sorted(adj_dict[v], key=lambda x: V.index(x)) for v in V]\n    return adj_list\nV = ['A', 'B', 'C', 'D']\nE = [('A', 'B'), ('B', 'C'), ('A', 'C'), ('A', 'A')]"}
{"task_id": 266, "completion_id": 3, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        The outer list has the same length and order as `V`.\n        Inner lists contain no duplicates and are ordered by their\n        appearance order in `V`.\n    \"\"\"\n    adj_dict = {vertex: set() for vertex in V}\n    for (u, v) in E:\n        adj_dict[u].add(v)\n        adj_dict[v].add(u)\n    G = [[w for w in V if w in adj] for adj in adj_dict.values()]\n    return G"}
{"task_id": 266, "completion_id": 4, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    adj_list = [[] for _ in V]\n    V_index_map = {vertex: index for (index, vertex) in enumerate(V)}\n    for (u, v) in E:\n        adj_list[V_index_map[u]].append(v)\n        adj_list[V_index_map[v]].append(u)\n    for (index, neighbors) in enumerate(adj_list):\n        adj_list[index] = sorted(set(neighbors), key=V.index)\n    return adj_list\nV = ['A', 'B', 'C']\nE = [('A', 'B'), ('B', 'C'), ('A', 'C'), ('C', 'A')]"}
{"task_id": 266, "completion_id": 5, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    adjacency_dict = {vertex: [] for vertex in V}\n    for (u, v) in E:\n        if v not in adjacency_dict[u]:\n            adjacency_dict[u].append(v)\n        if u not in adjacency_dict[v]:\n            adjacency_dict[v].append(u)\n    for (vertex, adj_vertices) in adjacency_dict.items():\n        adj_vertices.sort(key=lambda x: V.index(x))\n    G = [adjacency_dict[vertex] for vertex in V]\n    return G"}
{"task_id": 266, "completion_id": 6, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n    \n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    adj_list = [[] for _ in V]\n    idx_map = {v: i for (i, v) in enumerate(V)}\n    for (u, v) in E:\n        adj_list[idx_map[u]].append(v)\n        adj_list[idx_map[v]].append(u)\n    for (i, neighbors) in enumerate(adj_list):\n        unique_sorted_neighbors = sorted(set(neighbors), key=idx_map.get)\n        adj_list[i] = unique_sorted_neighbors\n    return adj_list\nV = [1, 2, 3, 4]\nE = [(1, 2), (1, 3), (2, 3), (3, 4), (1, 4)]"}
{"task_id": 266, "completion_id": 7, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\"\"\"\n    adj_dict = {vertex: [] for vertex in V}\n    for (u, v) in E:\n        if u in adj_dict:\n            adj_dict[u].append(v)\n        if v in adj_dict:\n            adj_dict[v].append(u)\n    for vertex in adj_dict:\n        adj_dict[vertex] = sorted(set(adj_dict[vertex]), key=V.index)\n    G = [adj_dict[vertex] for vertex in V]\n    return G"}
{"task_id": 266, "completion_id": 8, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    adj_list = {v: [] for v in V}\n    for (u, v) in E:\n        if v not in adj_list[u]:\n            adj_list[u].append(v)\n        if u not in adj_list[v]:\n            adj_list[v].append(u)\n    sorted_adj_list = [sorted(adj_list[v], key=lambda x: V.index(x)) for v in V]\n    return sorted_adj_list"}
{"task_id": 266, "completion_id": 9, "solution": "from typing import Any, List, Tuple\nfrom collections import defaultdict\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    adj_dict = defaultdict(set)\n    for (u, v) in E:\n        adj_dict[u].add(v)\n        adj_dict[v].add(u)\n    G = [[n for n in V if n in adj_dict[v]] for v in V]\n    return G\nV = ['A', 'B', 'C', 'D', 'E']\nE = [('A', 'B'), ('B', 'C'), ('B', 'D'), ('C', 'D'), ('E', 'A')]"}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_error = float('inf')\n    best_stump = None\n    for ft_idx in range(n_features):\n        unique_values = np.unique(X[:, ft_idx])\n        for thr in unique_values:\n            for p in [-1, 1]:\n                prediction = np.where(X[:, ft_idx] < thr, 1, -1) if p == 1 else np.where(X[:, ft_idx] < thr, -1, 1)\n                error = np.sum(sample_weights * (prediction != y))\n                if error < best_error:\n                    best_error = error\n                    best_stump = {'feature_index': ft_idx, 'threshold': round(thr, 4), 'polarity': p, 'weighted_error': round(best_error, 4)}\n    return best_stump"}
{"task_id": 267, "completion_id": 1, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_stump = {'feature_index': None, 'threshold': None, 'polarity': None, 'weighted_error': np.inf}\n    for feature_index in range(n_features):\n        sorted_indices = np.argsort(X[:, feature_index])\n        sorted_feature = X[sorted_indices, feature_index]\n        sorted_labels = y[sorted_indices]\n        sorted_weights = sample_weights[sorted_indices]\n        for i in range(n_samples - 1):\n            if sorted_feature[i] != sorted_feature[i + 1]:\n                threshold = (sorted_feature[i] + sorted_feature[i + 1]) / 2\n                for polarity in [-1, 1]:\n                    predictions = polarity * (X[:, feature_index] >= threshold)\n                    error = np.sum(sorted_weights * (predictions != sorted_labels))\n                    if error < best_stump['weighted_error']:\n                        best_stump = {'feature_index': feature_index, 'threshold': np.round(threshold, 4), 'polarity': polarity, 'weighted_error': np.round(error, 4)}\n    return best_stump"}
{"task_id": 267, "completion_id": 2, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_stump = {'feature_index': -1, 'threshold': None, 'polarity': 1, 'weighted_error': np.inf}\n    for feature_index in range(n_features):\n        feature_values = np.unique(X[:, feature_index])\n        for threshold in feature_values:\n            for polarity in [-1, 1]:\n                y_pred = np.where(X[:, feature_index] < threshold, 1, -1)\n                if polarity == -1:\n                    y_pred = -y_pred\n                weighted_error = np.sum(sample_weights * (y_pred != y))\n                if weighted_error < best_stump['weighted_error']:\n                    best_stump = {'feature_index': feature_index, 'threshold': np.round(threshold, 4), 'polarity': polarity, 'weighted_error': np.round(weighted_error, 4)}\n    return best_stump\nX = np.array([[1, 2], [5, 8], [1.5, 1.8], [8, 8], [1, 0.6], [9, 11]])\ny = np.array([-1, -1, -1, 1, 1, 1])\nsample_weights = np.array([0.1] * 6)"}
{"task_id": 267, "completion_id": 3, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    min_error = float('inf')\n    optimal_params = {}\n\n    def calculate_error(threshold, feature_idx, polarity):\n        predictions = np.where(X[:, feature_idx] < threshold, 1, -1) * polarity\n        error = np.sum(sample_weights * (predictions != y))\n        return error\n    for feature_idx in range(n_features):\n        sorted_indices = np.argsort(X[:, feature_idx])\n        for i in range(n_samples - 1):\n            threshold = (X[sorted_indices[i], feature_idx] + X[sorted_indices[i + 1], feature_idx]) / 2\n            for polarity in [1, -1]:\n                error = calculate_error(threshold, feature_idx, polarity)\n                if error < min_error:\n                    min_error = error\n                    optimal_params = {'feature_index': feature_idx, 'threshold': round(threshold, 4), 'polarity': polarity, 'weighted_error': round(min_error, 4)}\n    return optimal_params\nX = np.array([[1.5, 2.1], [2.5, 2.2], [3.0, 1.2], [1.0, 1.1]])\ny = np.array([1, -1, 1, -1])\nsample_weights = np.array([0.25, 0.25, 0.25, 0.25])"}
{"task_id": 267, "completion_id": 4, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    min_error = np.inf\n    best_stump = {}\n    for feature_idx in range(n_features):\n        feature_values = np.unique(X[:, feature_idx])\n        thresholds = (feature_values[:-1] + feature_values[1:]) / 2\n        for p in [1, -1]:\n            for threshold in thresholds:\n                y_pred = np.where(X[:, feature_idx] < threshold, 1 if p == -1 else -1, -1 if p == -1 else 1)\n                error = np.sum(sample_weights * (y_pred != y))\n                if error < min_error:\n                    min_error = error\n                    best_stump = {'feature_index': feature_idx, 'threshold': np.round(threshold, 4), 'polarity': p, 'weighted_error': np.round(min_error, 4)}\n    return best_stump\nX = np.array([[0.1, 0.5], [0.6, 0.2], [0.8, 0.1], [0.4, 0.7], [0.7, 0.2]])\ny = np.array([-1, 1, -1, 1, 1])\nsample_weights = np.array([0.2, 0.3, 0.2, 0.15, 0.15])\nbest_stump = train_decision_stump(X, y, sample_weights)"}
{"task_id": 267, "completion_id": 5, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    min_error = float('inf')\n    best_stump = {'feature_index': None, 'threshold': None, 'polarity': None, 'weighted_error': None}\n    for feature_index in range(n_features):\n        sorted_indices = np.argsort(X[:, feature_index])\n        for threshold_index in range(1, n_samples):\n            threshold = (X[sorted_indices[threshold_index - 1], feature_index] + X[sorted_indices[threshold_index], feature_index]) / 2\n            for polarity in [-1, 1]:\n                predictions = np.where((X[:, feature_index] < threshold) != (polarity == 1), 1, -1)\n                error = np.sum(sample_weights * (predictions != y))\n                if error < min_error:\n                    min_error = error\n                    best_stump = {'feature_index': feature_index, 'threshold': round(threshold, 4), 'polarity': polarity, 'weighted_error': round(min_error, 4)}\n    return best_stump"}
{"task_id": 267, "completion_id": 6, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    min_error = np.inf\n    best_stump = None\n    for feature_idx in range(n_features):\n        thresholds = np.unique(X[:, feature_idx])\n        for theta in thresholds:\n            for p in [1, -1]:\n                predictions = np.where((X[:, feature_idx] < theta) == (p == -1), -1, 1)\n                errors = np.where(predictions != y, 1, 0)\n                weighted_error = np.dot(errors, sample_weights)\n                if weighted_error < min_error:\n                    min_error = weighted_error\n                    best_stump = {'feature_index': feature_idx, 'threshold': np.round(theta, 4), 'polarity': p, 'weighted_error': np.round(min_error, 4)}\n    return best_stump"}
{"task_id": 267, "completion_id": 7, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    min_error = np.inf\n    best_stump = None\n    for feature_index in range(n_features):\n        x_feature = X[:, feature_index]\n        unique_thresholds = np.unique(x_feature)\n        for threshold in unique_thresholds:\n            for polarity in [1, -1]:\n                preds = np.where(x_feature < threshold, 1, -1)\n                if polarity == -1:\n                    preds = -preds\n                error = np.sum(sample_weights * (preds != y))\n                if error < min_error:\n                    min_error = error\n                    best_stump = {'feature_index': feature_index, 'threshold': round(threshold, 4), 'polarity': polarity, 'weighted_error': round(min_error, 4)}\n    return best_stump"}
{"task_id": 267, "completion_id": 8, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_stump = {'feature_index': 0, 'threshold': 0, 'polarity': 1, 'weighted_error': np.inf}\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_vals = np.unique(feature_values)\n        thresholds = (unique_vals[:-1] + unique_vals[1:]) / 2\n        for theta in thresholds:\n            for polarity in [-1, 1]:\n                predictions = np.ones(n_samples)\n                if polarity == 1:\n                    predictions[feature_values < theta] = -1\n                else:\n                    predictions[feature_values >= theta] = -1\n                weighted_error = np.sum(sample_weights[predictions != y])\n                if weighted_error < best_stump['weighted_error']:\n                    best_stump = {'feature_index': feature_index, 'threshold': round(theta, 4), 'polarity': polarity, 'weighted_error': round(weighted_error, 4)}\n    return best_stump\nX = np.array([[1, 2], [2, 3], [3, 2], [4, 1]])\ny = np.array([1, 1, -1, -1])\nsample_weights = np.array([0.25, 0.25, 0.25, 0.25])"}
{"task_id": 267, "completion_id": 9, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    best_stump = {'feature_index': -1, 'threshold': 0.0, 'polarity': 1, 'weighted_error': np.inf}\n    for feature_index in range(X.shape[1]):\n        unique_values = sorted(set(X[:, feature_index]))\n        for i in range(len(unique_values) - 1):\n            mid_value = (unique_values[i] + unique_values[i + 1]) / 2.0\n            for polarity in [-1, 1]:\n                predictions = np.where(X[:, feature_index] < mid_value, 1 * polarity, -1 * polarity)\n                errors = np.where(predictions != y, 1, 0)\n                error = np.sum(errors * sample_weights)\n                if error < best_stump['weighted_error']:\n                    best_stump['feature_index'] = feature_index\n                    best_stump['threshold'] = round(mid_value, 4)\n                    best_stump['polarity'] = polarity\n                    best_stump['weighted_error'] = round(error, 4)\n    return best_stump\nX = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])\ny = np.array([1, -1, 1])"}
{"task_id": 273, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of class labels.\"\"\"\n    label_counts = Counter(labels)\n    n = len(labels)\n    ent = 0.0\n    for label in label_counts:\n        p = label_counts[label] / n\n        ent -= p * math.log2(p)\n    return ent\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    feature = np.array(feature)\n    target = np.array(target)\n    sorted_indices = feature.argsort()\n    feature_sorted = feature[sorted_indices]\n    target_sorted = target[sorted_indices]\n    (unique_features, unique_indices, unique_counts) = np.unique(feature_sorted, return_index=True, return_counts=True)\n    if len(unique_features) < 2:\n        return (None, 0.0)\n    max_info_gain = 0.0\n    best_threshold = None\n    parent_entropy = entropy(target)\n    thresholds = (unique_features[:-1] + unique_features[1:]) / 2\n    for t in thresholds:\n        left_indices = feature_sorted < t\n        right_indices = feature_sorted >= t\n        left_target = target_sorted[left_indices]\n        right_target = target_sorted[right_indices]\n        left_entropy = entropy(left_target)\n        right_entropy = entropy(right_target)\n        n = len(feature)\n        n_left = len(left_target)\n        n_right = len(right_target)\n        info_gain = parent_entropy - (n_left / n * left_entropy + n_right / n * right_entropy)\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_threshold = t\n    return (round(best_threshold, 4), round(max_info_gain, 4)) if best_threshold is not None else (None, 0.0)"}
{"task_id": 273, "completion_id": 1, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels):\n    \"\"\"Compute the Shannon entropy of a list of labels.\"\"\"\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    entropy = 0.0\n    for count in label_counts.values():\n        probability = count / total_labels\n        entropy -= probability * math.log2(probability)\n    return entropy\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    if len(feature) <= 1:\n        return (None, 0.0)\n    combined = sorted(zip(feature, target), key=lambda x: x[0])\n    parent_entropy = entropy([x[1] for x in combined])\n    unique_keys = sorted(set((x[0] for x in combined)))\n    if len(unique_keys) == 1:\n        return (None, 0.0)\n    best_threshold = None\n    best_info_gain = 0.0\n    for i in range(len(unique_keys) - 1):\n        threshold = (unique_keys[i] + unique_keys[i + 1]) / 2\n        left = [x for x in combined if x[0] < threshold]\n        right = [x for x in combined if x[0] >= threshold]\n        if not left or not right:\n            continue\n        left_entropy = entropy([x[1] for x in left])\n        right_entropy = entropy([x[1] for x in right])\n        info_gain = parent_entropy - len(left) / len(combined) * left_entropy - len(right) / len(combined) * right_entropy\n        if info_gain > best_info_gain:\n            best_info_gain = info_gain\n            best_threshold = threshold\n    return (round(best_threshold, 4) if best_threshold is not None else None, round(best_info_gain, 4))"}
{"task_id": 273, "completion_id": 2, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(class_counts):\n    \"\"\"Calculate the Shannon entropy of a list of class labels.\"\"\"\n    total_counts = sum(class_counts.values())\n    probs = [count / total_counts for count in class_counts.values()]\n    return -sum((p * math.log2(p) for p in probs if p > 0))\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    paired_data = sorted(zip(feature, target), key=lambda x: x[0])\n    (feature, target) = zip(*paired_data)\n    feature = np.array(feature)\n    target = np.array(target)\n    initial_entropy = entropy(Counter(target))\n    best_gain = 0.0\n    best_threshold = None\n    unique_values = np.unique(feature)\n    if len(unique_values) < 2:\n        return (None, 0.0)\n    candidate_thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n    for threshold in candidate_thresholds:\n        left_labels = target[feature < threshold]\n        right_labels = target[feature >= threshold]\n        if len(left_labels) == 0 or len(right_labels) == 0:\n            continue\n        left_entropy = entropy(Counter(left_labels))\n        right_entropy = entropy(Counter(right_labels))\n        weighted_entropy = len(left_labels) / len(target) * left_entropy + len(right_labels) / len(target) * right_entropy\n        gain = initial_entropy - weighted_entropy\n        if gain > best_gain:\n            best_gain = gain\n            best_threshold = threshold\n    return (round(best_threshold, 4) if best_threshold is not None else best_threshold, round(best_gain, 4))\nfeature = [0.5, 3.2, 2.1, 4.6, 1.8]\ntarget = [1, 2, 1, 2, 1]"}
{"task_id": 273, "completion_id": 3, "solution": "import numpy as np\nfrom collections import Counter\ndef entropy(class_counts):\n    \"\"\"Compute the Shannon entropy.\n    \n    Parameters\n    ----------\n    class_counts : dict\n        A dictionary where keys are class labels and values are their counts.\n        \n    Returns\n    -------\n    float\n        Shannon entropy.\n    \"\"\"\n    values = np.array(list(class_counts.values()))\n    probs = values / values.sum()\n    return -np.sum(probs * np.log2(probs))\ndef evaluate_split(features, targets, threshold):\n    \"\"\"Evaluate the information gain of a split.\n    \n    Parameters\n    ----------\n    features : list[float]\n        Numerical values of a single attribute.\n    targets  : list\n        Corresponding class labels.\n    threshold : float\n        The threshold to split the data.\n        \n    Returns\n    -------\n    float\n        The information gain.\n    \"\"\"\n    parent_counts = Counter(targets)\n    parent_entropy = entropy(parent_counts)\n    left_indices = np.where(features < threshold)[0]\n    right_indices = np.where(features >= threshold)[0]\n    left_targets = [targets[i] for i in left_indices]\n    right_targets = [targets[i] for i in right_indices]\n    left_weight = len(left_targets) / len(targets)\n    right_weight = len(right_targets) / len(targets)\n    left_entropy = entropy(Counter(left_targets))\n    right_entropy = entropy(Counter(right_targets))\n    ig = parent_entropy - left_weight * left_entropy - right_weight * right_entropy\n    return ig\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n    \n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n    \n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    feature = np.array(feature)\n    target = np.array(target)\n    sorted_indices = np.argsort(feature)\n    sorted_feature = feature[sorted_indices]\n    sorted_target = target[sorted_indices]\n    unique_features = np.unique(sorted_feature)\n    if len(unique_features) < 2 or len(np.unique(target)) < 2:\n        return (None, 0.0)\n    thresholds = (unique_features[:-1] + unique_features[1:]) / 2\n    best_ig = -np.inf\n    best_threshold = None\n    for t in thresholds:\n        ig = evaluate_split(sorted_feature, sorted_target, t)\n        if ig > best_ig:\n            best_ig = ig\n            best_threshold = t\n    if best_ig <= 0:\n        return (None, 0.0)\n    return (round(best_threshold, 4), round(best_ig, 4))"}
{"task_id": 273, "completion_id": 4, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(class_counts):\n    \"\"\"Calculate the entropy of a set of class labels.\"\"\"\n    total = sum(class_counts.values())\n    probabilities = [freq / total for freq in class_counts.values()]\n    return -sum((p * math.log2(p) for p in probabilities if p > 0))\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    feature = np.array(feature)\n    target = np.array(target)\n    parent_entropy = entropy(Counter(target))\n    num_samples = len(target)\n    sorted_unique_features = np.unique(feature)\n    thresholds = []\n    for i in range(len(sorted_unique_features) - 1):\n        thresholds.append((sorted_unique_features[i] + sorted_unique_features[i + 1]) / 2)\n    max_info_gain = 0.0\n    best_threshold = None\n    for threshold in thresholds:\n        left_indices = feature < threshold\n        right_indices = feature >= threshold\n        left_labels = target[left_indices]\n        right_labels = target[right_indices]\n        left_entropy = entropy(Counter(left_labels))\n        right_entropy = entropy(Counter(right_labels))\n        weighted_entropy = len(left_labels) / num_samples * left_entropy + len(right_labels) / num_samples * right_entropy\n        info_gain = parent_entropy - weighted_entropy\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_threshold = threshold\n    if best_threshold is not None:\n        return (round(best_threshold, 4), round(max_info_gain, 4))\n    else:\n        return (None, round(max_info_gain, 4))"}
{"task_id": 273, "completion_id": 5, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of the provided labels.\"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    probs = [count / len(labels) for count in label_counts.values()]\n    return -sum((p * math.log2(p) for p in probs if p > 0))\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    (feature, target) = (np.array(feature), np.array(target))\n    sorted_indices = np.argsort(feature)\n    sorted_features = feature[sorted_indices]\n    sorted_targets = target[sorted_indices]\n    unique_features = np.unique(sorted_features)\n    if len(unique_features) == 1:\n        return (None, 0.0)\n    parent_entropy = entropy(sorted_targets)\n    optimal_threshold = None\n    max_info_gain = 0.0\n    for i in range(len(unique_features) - 1):\n        mid_point = (unique_features[i] + unique_features[i + 1]) / 2.0\n        left_mask = sorted_features < mid_point\n        right_mask = sorted_features >= mid_point\n        left_labels = sorted_targets[left_mask]\n        right_labels = sorted_targets[right_mask]\n        left_entropy = entropy(left_labels)\n        right_entropy = entropy(right_labels)\n        left_weight = len(left_labels) / len(sorted_targets)\n        right_weight = len(right_labels) / len(sorted_targets)\n        info_gain = parent_entropy - (left_weight * left_entropy + right_weight * right_entropy)\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            optimal_threshold = mid_point\n    return (round(optimal_threshold, 4), round(max_info_gain, 4)) if optimal_threshold is not None else (None, 0.0)"}
{"task_id": 273, "completion_id": 6, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of class labels.\"\"\"\n    label_counts = Counter(labels)\n    probs = [count / len(labels) for count in label_counts.values()]\n    return -sum((p * math.log2(p) for p in probs))\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    if len(set(feature)) == 1:\n        return (None, 0.0)\n    parent_entropy = entropy(target)\n    n = len(feature)\n    best_info_gain = 0.0\n    best_threshold = None\n    combined = sorted(zip(feature, target))\n    unique_features = sorted(set(feature))\n    candidate_thresholds = [(unique_features[i] + unique_features[i + 1]) / 2.0 for i in range(len(unique_features) - 1)]\n    for t in candidate_thresholds:\n        left = [c for (f, c) in combined if f < t]\n        right = [c for (f, c) in combined if f >= t]\n        left_entropy = entropy(left)\n        right_entropy = entropy(right)\n        info_gain = parent_entropy - (len(left) / n * left_entropy + len(right) / n * right_entropy)\n        if info_gain > best_info_gain:\n            best_info_gain = info_gain\n            best_threshold = t\n    if best_info_gain <= 0.0:\n        return (None, 0.0)\n    return (round(best_threshold, 4), round(best_info_gain, 4))\nfeature = [1, 4, 2, 6, 7, 2, 3, 4, 2, 7]\ntarget = [0, 1, 1, 0, 0, 1, 1, 0, 1, 0]"}
{"task_id": 273, "completion_id": 7, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(class_counts):\n    \"\"\"Calculate the Shannon entropy for a given set of class counts.\n    \n    Parameters\n    ----------\n    class_counts : dict\n        A dictionary with class labels as keys and counts as values.\n    \n    Returns\n    -------\n    float\n        The entropy of the class distribution.\n    \"\"\"\n    total_counts = sum(class_counts.values())\n    if not total_counts:\n        return 0.0\n    return -sum((count / total_counts * math.log2(count / total_counts) for count in class_counts.values() if count))\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n    \n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n    \n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists.\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    pairs = sorted(zip(feature, target), key=lambda x: x[0])\n    best_gain = 0\n    best_threshold = None\n    unique_features = sorted(set(feature))\n    potential_thresholds = [(unique_features[i] + unique_features[i + 1]) / 2 for i in range(len(unique_features) - 1)]\n    root_class_counts = Counter(target)\n    root_entropy = entropy(root_class_counts)\n    left_class_counts = Counter()\n    left_size = 0\n    for threshold in potential_thresholds:\n        for (value, clazz) in pairs:\n            if value < threshold:\n                left_class_counts[clazz] += 1\n                left_size += 1\n            else:\n                right_class_counts = root_class_counts - left_class_counts\n                right_size = len(pairs) - left_size\n                break\n        left_entropy = entropy(left_class_counts)\n        right_entropy = entropy(right_class_counts)\n        ig = root_entropy - left_size / len(pairs) * left_entropy - right_size / len(pairs) * right_entropy\n        if ig > best_gain:\n            best_gain = ig\n            best_threshold = threshold\n    return (round(best_threshold, 4), round(best_gain, 4)) if best_gain != 0 else (None, 0.0)\nfeature = np.array([0.8, 1.4, 0.9, 1.1, 1.3, 2.2, 2.5, 2.7])\ntarget = np.array([0, 1, 0, 1, 1, 0, 1, 1])"}
{"task_id": 273, "completion_id": 8, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(class_counts):\n    \"\"\"Calculate the Shannon entropy for a set of class counts.\"\"\"\n    total = sum(class_counts.values())\n    ent = 0.0\n    for count in class_counts.values():\n        prob = count / total\n        ent -= prob * math.log2(prob)\n    return ent\ndef split(feature, target, threshold):\n    \"\"\"Split the feature-target pairs based on the threshold.\"\"\"\n    left_indices = [i for (i, val) in enumerate(feature) if val < threshold]\n    left_target = [target[i] for i in left_indices]\n    right_indices = [i for (i, val) in enumerate(feature) if val >= threshold]\n    right_target = [target[i] for i in right_indices]\n    return (left_target, right_target)\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    feature = np.array(feature)\n    target = np.array(target)\n    sorted_indices = np.argsort(feature)\n    feature = feature[sorted_indices]\n    target = target[sorted_indices]\n    parent_entropy = entropy(Counter(target))\n    unique_features = np.unique(feature)\n    unique_target = np.unique(target)\n    if len(unique_features) <= 1 or len(unique_target) <= 1:\n        return (None, 0.0)\n    max_gain = 0.0\n    best_threshold = None\n    for i in range(len(feature) - 1):\n        if feature[i] != feature[i + 1]:\n            threshold = (feature[i] + feature[i + 1]) / 2\n            (left_target, right_target) = split(feature, target, threshold)\n            left_entropy = entropy(Counter(left_target))\n            right_entropy = entropy(Counter(right_target))\n            left_weight = len(left_target) / len(target)\n            right_weight = len(right_target) / len(target)\n            split_entropy = left_weight * left_entropy + right_weight * right_entropy\n            gain = parent_entropy - split_entropy\n            if gain > max_gain:\n                max_gain = gain\n                best_threshold = threshold\n    if max_gain <= 0.0:\n        return (None, 0.0)\n    else:\n        return (round(best_threshold, 4), round(max_gain, 4))\nfeature = [1, 2, 3, 4, 5]\ntarget = [0, 0, 1, 1, 1]"}
{"task_id": 273, "completion_id": 9, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    P = [count / len(labels) for count in label_counts.values()]\n    H = -sum((p * math.log2(p) for p in P))\n    return H\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    combined = sorted(zip(feature, target), key=lambda x: x[0])\n    (features, labels) = zip(*combined)\n    unique_features = sorted(set(features))\n    candidate_thresholds = [(unique_features[i] + unique_features[i + 1]) / 2 for i in range(len(unique_features) - 1)]\n    if not candidate_thresholds:\n        return (None, 0.0)\n    H_parent = entropy(labels)\n    best_ig = 0.0\n    best_t = None\n    for t in candidate_thresholds:\n        left_labels = [label for (feat, label) in combined if feat < t]\n        right_labels = [label for (feat, label) in combined if feat >= t]\n        ig = round(H_parent - (len(left_labels) / len(labels) * entropy(left_labels) + len(right_labels) / len(labels) * entropy(right_labels)), 4)\n        if ig > best_ig:\n            best_ig = ig\n            best_t = round(t, 4)\n    if best_ig <= 0.0:\n        return (None, 0.0)\n    return (best_t, best_ig)\nfeature = [0.5, 0.6, 0.7, 0.65, 0.55]\ntarget = [0, 1, 1, 1, 0]"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if initializer and callable(initializer):\n        return initializer\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 1, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError('Invalid initialization function.')\nname = 'ones_init'"}
{"task_id": 286, "completion_id": 2, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 3, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str):\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if initializer is not None and callable(initializer):\n        return initializer\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 4, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError('Invalid initialization function.')\nname = 'ones_init'"}
{"task_id": 286, "completion_id": 5, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError('Invalid initialization function.')\nname = 'ones_init'"}
{"task_id": 286, "completion_id": 6, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 7, "solution": "import random\nimport random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 8, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if initializer and callable(initializer):\n        return initializer\n    raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 9, "solution": "import numpy as np\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n    \n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    new_H = (H - p_h) // s_h + 1\n    new_W = (W - p_w) // s_w + 1\n    output = np.zeros((N, C, new_H, new_W))\n    for n in range(N):\n        for c in range(C):\n            for i in range(new_H):\n                h_start = i * s_h\n                for j in range(new_W):\n                    w_start = j * s_w\n                    window = X[n, c, h_start:h_start + p_h, w_start:w_start + p_w]\n                    output[n, c, i, j] = np.mean(window)\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(new_H):\n                h_start = i * s_h\n                for j in range(new_W):\n                    w_start = j * s_w\n                    avg_grad = accum_grad[n, c, i, j] / (p_h * p_w)\n                    grad_input[n, c, h_start:h_start + p_h, w_start:w_start + p_w] += avg_grad\n    output_rounded = np.round(output, decimals=4).tolist()\n    grad_input_rounded = np.round(grad_input, decimals=4).tolist()\n    return (output_rounded, grad_input_rounded)\nX = np.random.rand(2, 3, 5, 5)\npool_shape = (2, 2)\nstride = (2, 2)\naccum_grad = np.ones((2, 3, 2, 2))"}
{"task_id": 287, "completion_id": 1, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n    \n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    (h_start, w_start) = (i * s_h, j * s_w)\n                    pooled_output[n, c, i, j] = np.mean(X[n, c, h_start:h_start + p_h, w_start:w_start + p_w])\n    (N, C, out_h, out_w) = accum_grad.shape\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    (h_start, w_start) = (i * s_h, j * s_w)\n                    grad_input[n, c, h_start:h_start + p_h, w_start:w_start + p_w] += accum_grad[n, c, i, j] / (p_h * p_w)\n    return (np.round(pooled_output, 4).tolist(), np.round(grad_input, 4).tolist())"}
{"task_id": 287, "completion_id": 2, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    (N, C, OH, OW) = accum_grad.shape\n    output = np.zeros((N, C, OH, OW))\n    for n in range(N):\n        for c in range(C):\n            for i in range(OH):\n                for j in range(OW):\n                    (h_start, w_start) = (i * s_h, j * s_w)\n                    (h_end, w_end) = (h_start + p_h, w_start + p_w)\n                    window = X[n, c, h_start:h_end, w_start:w_end]\n                    output[n, c, i, j] = np.mean(window)\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(OH):\n                for j in range(OW):\n                    (h_start, w_start) = (i * s_h, j * s_w)\n                    (h_end, w_end) = (h_start + p_h, w_start + p_w)\n                    window_shape = (h_end - h_start, w_end - w_start)\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += np.full(window_shape, accum_grad[n, c, i, j]) / (window_shape[0] * window_shape[1])\n    return (np.round(output, 4).tolist(), np.round(grad_input, 4).tolist())"}
{"task_id": 287, "completion_id": 3, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    H_out = 1 + (H - p_h) // s_h\n    W_out = 1 + (W - p_w) // s_w\n    pooled_output = np.zeros((N, C, H_out, W_out))\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(H_out):\n                for j in range(W_out):\n                    i_start = i * s_h\n                    i_end = i_start + p_h\n                    j_start = j * s_w\n                    j_end = j_start + p_w\n                    pooled_output[n, c, i, j] = np.mean(X[n, c, i_start:i_end, j_start:j_end])\n    for n in range(N):\n        for c in range(C):\n            for i in range(H_out):\n                for j in range(W_out):\n                    i_start = i * s_h\n                    i_end = i_start + p_h\n                    j_start = j * s_w\n                    j_end = j_start + p_w\n                    window_size = p_h * p_w\n                    grad_input[n, c, i_start:i_end, j_start:j_end] += accum_grad[n, c, i, j] / window_size\n    pooled_output = np.around(pooled_output, decimals=4).tolist()\n    grad_input = np.around(grad_input, decimals=4).tolist()\n    return (pooled_output, grad_input)\nX = np.array([[[[5, 4, 3], [2, 1, 0], [1, 2, 3]]]])\npool_shape = (2, 2)\nstride = (1, 1)\naccum_grad = np.array([[[[1, 2], [3, 4]]]])"}
{"task_id": 287, "completion_id": 4, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    output_height = (H - p_h) // s_h + 1\n    output_width = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, output_height, output_width))\n    for n in range(N):\n        for c in range(C):\n            for i in range(output_height):\n                for j in range(output_width):\n                    h_start = i * s_h\n                    h_end = h_start + p_h\n                    w_start = j * s_w\n                    w_end = w_start + p_w\n                    window = X[n, c, h_start:h_end, w_start:w_end]\n                    pooled_output[n, c, i, j] = np.mean(window)\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(output_height):\n                for j in range(output_width):\n                    h_start = i * s_h\n                    h_end = h_start + p_h\n                    w_start = j * s_w\n                    w_end = w_start + p_w\n                    window_shape = (h_end - h_start, w_end - w_start)\n                    gradient = accum_grad[n, c, i, j]\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += gradient / (p_h * p_w)\n    pooled_output = np.round(pooled_output, decimals=4).tolist()\n    grad_input = np.round(grad_input, decimals=4).tolist()\n    return (pooled_output, grad_input)\nX = np.random.rand(1, 1, 8, 8)\npool_shape = (2, 2)\nstride = (2, 2)\naccum_grad = np.random.rand(1, 1, 4, 4)"}
{"task_id": 287, "completion_id": 5, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    result = np.zeros((N, C, out_h, out_w))\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    (h_start, w_start) = (i * s_h, j * s_w)\n                    (h_end, w_end) = (h_start + p_h, w_start + p_w)\n                    window = X[n, c, h_start:h_end, w_start:w_end]\n                    result[n, c, i, j] = np.mean(window)\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    (h_start, w_start) = (i * s_h, j * s_w)\n                    (h_end, w_end) = (h_start + p_h, w_start + p_w)\n                    window_grad = accum_grad[n, c, i, j]\n                    num_elements = p_h * p_w\n                    grad = window_grad / num_elements\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += grad\n    result_rounded = np.round(result, decimals=4).tolist()\n    grad_input_rounded = np.round(grad_input, decimals=4).tolist()\n    return (result_rounded, grad_input_rounded)\nX = np.random.rand(2, 3, 6, 6)\npool_shape = (2, 2)\nstride = (2, 2)\naccum_grad = np.random.rand(2, 3, 3, 3)"}
{"task_id": 287, "completion_id": 6, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    OH = (H - p_h) // s_h + 1\n    OW = (W - p_w) // s_w + 1\n    output = np.zeros((N, C, OH, OW))\n    grad_input = np.zeros_like(X)\n    for i in range(OH):\n        for j in range(OW):\n            (h_start, w_start) = (i * s_h, j * s_w)\n            (h_end, w_end) = (h_start + p_h, w_start + p_w)\n            output[:, :, i, j] = np.mean(X[:, :, h_start:h_end, w_start:w_end], axis=(2, 3))\n    count = np.zeros_like(X)\n    for i in range(OH):\n        for j in range(OW):\n            (h_start, w_start) = (i * s_h, j * s_w)\n            (h_end, w_end) = (h_start + p_h, w_start + p_w)\n            count[:, :, h_start:h_end, w_start:w_end] += 1\n            grad_input[:, :, h_start:h_end, w_start:w_end] += accum_grad[:, :, i, j][:, :, np.newaxis, np.newaxis]\n    grad_input /= count\n    output = np.round(output, decimals=4).tolist()\n    grad_input = np.round(grad_input, decimals=4).tolist()\n    return (output, grad_input)"}
{"task_id": 287, "completion_id": 7, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    output = np.zeros((N, C, out_h, out_w))\n    for i in range(out_h):\n        for j in range(out_w):\n            (h_start, w_start) = (i * s_h, j * s_w)\n            window = X[:, :, h_start:h_start + p_h, w_start:w_start + p_w]\n            output[:, :, i, j] = np.mean(window, axis=(2, 3))\n    grad_input = np.zeros(X.shape)\n    for i in range(out_h):\n        for j in range(out_w):\n            (h_start, w_start) = (i * s_h, j * s_w)\n            grad_window = accum_grad[:, :, i, j][:, :, None, None]\n            grad_input[:, :, h_start:h_start + p_h, w_start:w_start + p_w] += grad_window / (p_h * p_w)\n    output = np.round(output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    return (output, grad_input)\nX = np.random.rand(2, 3, 10, 10)\npool_shape = (2, 2)\nstride = (2, 2)\naccum_grad = np.random.rand(2, 3, 5, 5)"}
{"task_id": 287, "completion_id": 8, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n    \n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    grad_input = np.zeros_like(X)\n    for i in range(out_h):\n        for j in range(out_w):\n            (h_start, w_start) = (i * s_h, j * s_w)\n            (h_end, w_end) = (h_start + p_h, w_start + p_w)\n            pooled_output[:, :, i, j] = np.mean(X[:, :, h_start:h_end, w_start:w_end], axis=(2, 3))\n    for i in range(out_h):\n        for j in range(out_w):\n            (h_start, w_start) = (i * s_h, j * s_w)\n            (h_end, w_end) = (h_start + p_h, w_start + p_w)\n            grad_input[:, :, h_start:h_end, w_start:w_end] += np.repeat(np.repeat(accum_grad[:, :, i:i + 1, j:j + 1], p_h, axis=2), p_w, axis=3) / (p_h * p_w)\n    pooled_output_rounded = np.round(pooled_output, decimals=4).tolist()\n    grad_input_rounded = np.round(grad_input, decimals=4).tolist()\n    return (pooled_output_rounded, grad_input_rounded)\nX = np.random.rand(2, 3, 8, 8)\npool_shape = (2, 2)\nstride = (2, 2)\naccum_grad = np.random.rand(2, 3, 4, 4)"}
{"task_id": 287, "completion_id": 9, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start = i * s_h\n                    h_end = h_start + p_h\n                    w_start = j * s_w\n                    w_end = w_start + p_w\n                    pooled_output[n, c, i, j] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start = i * s_h\n                    h_end = h_start + p_h\n                    w_start = j * s_w\n                    w_end = w_start + p_w\n                    window_area = p_h * p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, i, j] / window_area\n    return (np.round(pooled_output, 4).tolist(), np.round(grad_input, 4).tolist())\nX = np.random.rand(2, 3, 4, 4)\npool_shape = (2, 2)\nstride = (2, 2)\naccum_grad = np.ones((2, 3, 2, 2))"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature or not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False"}
{"task_id": 290, "completion_id": 1, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if type(tree_a) != type(tree_b):\n        return False\n    if isinstance(tree_a, Node):\n        if tree_a.feature != tree_b.feature or not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    elif isinstance(tree_a, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    else:\n        raise ValueError('Nodes must be of type Node or Leaf')"}
{"task_id": 290, "completion_id": 2, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature or not np.isclose(tree_a.threshold, tree_b.threshold):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False"}
{"task_id": 290, "completion_id": 3, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if type(tree_a) != type(tree_b):\n        return False\n    if isinstance(tree_a, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    if isinstance(tree_a, Node):\n        return np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08) and tree_a.feature == tree_b.feature and compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    return False"}
{"task_id": 290, "completion_id": 4, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    elif not isinstance(tree_a, type(tree_b)):\n        return False\n    else:\n        if tree_a.feature == tree_b.feature and np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08) and compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right):\n            return True\n        return False"}
{"task_id": 290, "completion_id": 5, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return tree_a.feature == tree_b.feature and np.allclose(tree_a.threshold, tree_b.threshold, atol=1e-08) and compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False"}
{"task_id": 290, "completion_id": 6, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    elif isinstance(tree_a, Leaf) or isinstance(tree_b, Leaf):\n        return False\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return tree_a.feature == tree_b.feature and np.allclose(tree_a.threshold, tree_b.threshold, atol=1e-08) and compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False\ntree_a = Node(0, 0.5, Leaf([1]), Node(1, 0.3, Leaf([0.8]), Leaf(1.2)))\ntree_b = Node(0, 0.5, Leaf([1]), Node(1, 0.3, Leaf(0.8), Leaf(1.2)))"}
{"task_id": 290, "completion_id": 7, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature == tree_b.feature and np.allclose([tree_a.threshold], [tree_b.threshold]):\n            return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    return False\ntree_a = Node(feature=0, threshold=0.5, left=Leaf(value=1), right=Node(feature=1, threshold=0.7, left=Leaf(value=[2.0, 2.1]), right=Leaf(value=np.array([3, 3, 3]))))\ntree_b = Node(feature=0, threshold=0.5 + 1e-09, left=Leaf(value=1), right=Node(feature=1, threshold=0.7, left=Leaf(value=[2.0, 2.1]), right=Leaf(value=np.array([3, 3, 3]))))"}
{"task_id": 290, "completion_id": 8, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return tree_a.feature == tree_b.feature and np.allclose(tree_a.threshold, tree_b.threshold) and compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    return False"}
{"task_id": 290, "completion_id": 9, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if type(tree_a) != type(tree_b):\n        return False\n    if isinstance(tree_a, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    if tree_a.feature != tree_b.feature:\n        return False\n    if not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08, equal_nan=False):\n        return False\n    return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return -1.\n    \"\"\"\n    p1 = np.array(parent1)\n    p2 = np.array(parent2)\n    if p1.shape != p2.shape:\n        return -1\n    child1 = p1.copy()\n    child2 = p2.copy()\n    if cutoff > 0:\n        child1[:, cutoff:] = p2[:, cutoff:]\n        child2[:, cutoff:] = p1[:, cutoff:]\n    return (child1.tolist(), child2.tolist())\nparent1 = [[3, 1, 4], [1, 5, 9]]\nparent2 = [[2, 6, 5], [3, 5, 8]]\ncutoff = 1"}
{"task_id": 292, "completion_id": 1, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    p1 = np.array(parent1)\n    p2 = np.array(parent2)\n    if p1.shape != p2.shape:\n        return -1\n    if 0 <= cutoff <= p1.shape[1]:\n        (part1_p1, part2_p1) = (p1[:, :cutoff], p1[:, cutoff:])\n        (part1_p2, part2_p2) = (p2[:, :cutoff], p2[:, cutoff:])\n        child1 = np.concatenate((part1_p1, part2_p2), axis=1).tolist()\n        child2 = np.concatenate((part1_p2, part2_p1), axis=1).tolist()\n        return (child1, child2)\n    else:\n        return -1"}
{"task_id": 292, "completion_id": 2, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1_np = np.array(parent1)\n    parent2_np = np.array(parent2)\n    if parent1_np.shape != parent2_np.shape:\n        return -1\n    (rows, cols) = parent1_np.shape\n    if not 0 <= cutoff <= cols:\n        return -1\n    child1_np = np.zeros((rows, cols))\n    child2_np = np.zeros((rows, cols))\n    child1_np[:, :cutoff] = parent1_np[:, :cutoff]\n    child1_np[:, cutoff:] = parent2_np[:, cutoff:]\n    child2_np[:, :cutoff] = parent2_np[:, :cutoff]\n    child2_np[:, cutoff:] = parent1_np[:, cutoff:]\n    return (child1_np.tolist(), child2_np.tolist())\nparent1 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\nparent2 = [[13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24]]\ncutoff = 2"}
{"task_id": 292, "completion_id": 3, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1_np = np.array(parent1)\n    parent2_np = np.array(parent2)\n    if parent1_np.shape != parent2_np.shape:\n        return -1\n    cols = parent1_np.shape[1]\n    if cutoff < 0 or cutoff > cols:\n        return -1\n    child1 = parent1_np.copy()\n    child2 = parent2_np.copy()\n    if cutoff > 0:\n        child1[:, cutoff:] = parent2_np[:, cutoff:]\n        child2[:, cutoff:] = parent1_np[:, cutoff:]\n    return (child1.tolist(), child2.tolist())"}
{"task_id": 292, "completion_id": 4, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    p1_array = np.array(parent1)\n    p2_array = np.array(parent2)\n    if p1_array.shape != p2_array.shape:\n        return -1\n    ncols1 = p1_array.shape[1]\n    ncols2 = p2_array.shape[1]\n    if cutoff < 0 or cutoff > ncols1:\n        raise ValueError('Cutoff must be within the range of columns.')\n    child1 = np.hstack((p1_array[:, :cutoff], p2_array[:, cutoff:]))\n    child2 = np.hstack((p2_array[:, :cutoff], p1_array[:, cutoff:]))\n    return (child1.tolist(), child2.tolist())\nparent1 = [[1, 2, 3], [4, 5, 6]]\nparent2 = [[7, 8, 9], [10, 11, 12]]\ncutoff = 2"}
{"task_id": 292, "completion_id": 5, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]] | int:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff: Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    np_child1 = np.array(np_parent1)\n    np_child2 = np.array(np_parent2)\n    if cutoff < np_parent1.shape[1]:\n        np_child1[:, cutoff:] = np_parent2[:, cutoff:]\n        np_child2[:, cutoff:] = np_parent1[:, cutoff:]\n    return (np_child1.tolist(), np_child2.tolist())"}
{"task_id": 292, "completion_id": 6, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    p1 = np.array(parent1)\n    p2 = np.array(parent2)\n    if p1.shape != p2.shape:\n        return -1\n    num_cols = p1.shape[1]\n    if 0 <= cutoff <= num_cols:\n        child1 = np.hstack((p1[:, :cutoff], p2[:, cutoff:]))\n        child2 = np.hstack((p2[:, :cutoff], p1[:, cutoff:]))\n    else:\n        return -1\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    return (child1_list, child2_list)"}
{"task_id": 292, "completion_id": 7, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]] | int:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1_array = np.array(parent1)\n    parent2_array = np.array(parent2)\n    if parent1_array.shape != parent2_array.shape:\n        return -1\n    num_rows = parent1_array.shape[0]\n    num_cols = parent1_array.shape[1]\n    if not 0 <= cutoff <= num_cols:\n        return -1\n    child1_array = np.hstack([parent1_array[:, :cutoff], parent2_array[:, cutoff:]])\n    child2_array = np.hstack([parent2_array[:, :cutoff], parent1_array[:, cutoff:]])\n    child1 = child1_array.tolist()\n    child2 = child2_array.tolist()\n    return (child1, child2)"}
{"task_id": 292, "completion_id": 8, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    num_columns = np_parent1.shape[1]\n    cutoff = max(0, min(cutoff, num_columns))\n    child1 = np.hstack((np_parent1[:, :cutoff], np_parent2[:, cutoff:]))\n    child2 = np.hstack((np_parent2[:, :cutoff], np_parent1[:, cutoff:]))\n    return (child1.tolist(), child2.tolist())\nparent1 = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]\nparent2 = [[8, 7, 6], [5, 4, 3], [2, 1, 0]]\ncutoff = 2"}
{"task_id": 292, "completion_id": 9, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1_np = np.array(parent1)\n    parent2_np = np.array(parent2)\n    if parent1_np.shape != parent2_np.shape:\n        return -1\n    (rows, cols) = parent1_np.shape\n    cutoff = max(0, min(cutoff, cols))\n    child1_np = np.copy(parent1_np)\n    child2_np = np.copy(parent2_np)\n    if cutoff < cols:\n        child1_np[:, cutoff:] = parent2_np[:, cutoff:]\n        child2_np[:, cutoff:] = parent1_np[:, cutoff:]\n    return (child1_np.tolist(), child2_np.tolist())\nparent1 = [[1, 2, 3], [4, 5, 6]]\nparent2 = [[7, 8, 9], [10, 11, 12]]\ncutoff = 1"}
{"task_id": 294, "completion_id": 0, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    is_directed = G['is_directed']\n    V2I = G['_V2I']\n    G_data = G['_G']\n    adj = {v: [] for v in V2I.keys()}\n    seen_edges = set()\n    for (src_idx, edges) in enumerate(G_data):\n        for edge in edges:\n            (src_label, tgt_label, weight) = edge\n            if (tgt_label, src_label) in seen_edges and (not is_directed):\n                continue\n            adj[src_label].append((tgt_label, weight))\n            if not is_directed:\n                adj[tgt_label].append((src_label, weight))\n                seen_edges.add((src_label, tgt_label))\n    for vertex in adj:\n        adj[vertex].sort(key=lambda x: x[0])\n    return adj\nG = {'is_directed': False, '_V2I': {'A': 0, 'B': 1, 'C': 2}, '_G': [[('A', 'B', 1.0), ('A', 'C', 2.0)], [('B', 'A', 1.0)], [('C', 'A', 2.0)]]}"}
{"task_id": 294, "completion_id": 1, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {label: [] for label in G['_V2I']}\n    for (source_label, edges) in zip(G['_V2I'], G['_G']):\n        for edge in edges:\n            (source, target, weight) = edge\n            adj[source].append((target, weight))\n            if not G['is_directed']:\n                adj[target].append((source, weight))\n    for key in adj:\n        adj[key].sort(key=lambda x: x[0])\n    return adj\nG = {'is_directed': False, '_V2I': {'A': 0, 'B': 1, 'C': 2}, '_G': [[('A', 'B', 1.0), ('A', 'C', 2.0)], [('B', 'A', 1.0), ('B', 'C', 3.0)], [('C', 'A', 2.0), ('C', 'B', 3.0)]]}"}
{"task_id": 294, "completion_id": 2, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj_dict: Dict[Any, List[Tuple[Any, float]]] = {v: [] for v in G['_V2I']}\n    for edges in G['_G']:\n        for (source_label, target_label, weight) in edges:\n            adj_dict[source_label].append((target_label, weight))\n            if not G['is_directed']:\n                adj_dict[target_label].append((source_label, weight))\n    for key in adj_dict:\n        adj_dict[key] = sorted(adj_dict[key], key=lambda x: x[0])\n    return adj_dict"}
{"task_id": 294, "completion_id": 3, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj_dict = {label: [] for label in G['_V2I']}\n    for (source_label, edges) in zip(G['_V2I'], G['_G']):\n        for (source, target, weight) in edges:\n            adj_dict[source_label].append((target, weight))\n            if not G['is_directed'] and source != target:\n                adj_dict[target].append((source_label, weight))\n    for label in adj_dict:\n        adj_dict[label].sort(key=lambda x: x[0])\n    return adj_dict"}
{"task_id": 294, "completion_id": 4, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {label: [] for label in G['_V2I']}\n    for adj_list in G['_G']:\n        for edge in adj_list:\n            (u, v, w) = edge\n            adj[u].append((v, w))\n            if not G['is_directed']:\n                adj[v].append((u, w))\n    for label in adj:\n        adj[label] = sorted(adj[label], key=lambda x: x[0])\n    return adj\nG = {'is_directed': False, '_V2I': {'A': 0, 'B': 1, 'C': 2}, '_G': [[('A', 'B', 1.0), ('A', 'C', 2.0)], [('B', 'A', 1.0)], [('C', 'A', 2.0)]]}"}
{"task_id": 294, "completion_id": 5, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n    \n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n    \n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj_dict = {label: [] for label in G['_V2I'].keys()}\n    for (index, edges) in enumerate(G['_G']):\n        source_label = [label for (label, idx) in G['_V2I'].items() if idx == index][0]\n        for edge in edges:\n            (target_label, weight) = (edge[1], edge[2])\n            adj_dict[source_label].append((target_label, weight))\n            if not G['is_directed']:\n                adj_dict[target_label].append((source_label, weight))\n    if not G['is_directed']:\n        for label in adj_dict:\n            adj_dict[label] = sorted(adj_dict[label], key=lambda x: x[0])\n    return adj_dict"}
{"task_id": 294, "completion_id": 6, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {label: [] for label in G['_V2I']}\n    for edges in G['_G']:\n        for (source_label, target_label, weight) in edges:\n            if not G['is_directed'] and (target_label, source_label, weight) not in adj[source_label]:\n                adj[target_label].append((source_label, weight))\n            adj[source_label].append((target_label, weight))\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    return adj\nG = {'is_directed': False, '_V2I': {'A': 0, 'B': 1, 'C': 2, 'D': 3}, '_G': [[('A', 'B', 1.0), ('A', 'D', 2.3)], [('B', 'A', 1.0), ('B', 'C', 2.0)], [('C', 'B', 2.0)], [('D', 'A', 2.3)]]}"}
{"task_id": 294, "completion_id": 7, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"\n    Convert a custom graph dictionary into a plain adjacency dictionary.\n    \n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n    \n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj: Dict[Any, List[Tuple[Any, float]]] = {label: [] for label in G['_V2I']}\n    for (src_label, src_index) in G['_V2I'].items():\n        for (src, dst, weight) in G['_G'][src_index]:\n            if G['is_directed'] or src_label <= dst:\n                adj[src].append((dst, weight))\n                if not G['is_directed']:\n                    adj[dst].append((src, weight))\n    for label in adj:\n        adj[label] = list(sorted(adj[label], key=lambda x: x[0]))\n    return adj"}
{"task_id": 294, "completion_id": 8, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    is_directed = G['is_directed']\n    vertex2index = G['_V2I']\n    G_list = G['_G']\n    adj: Dict[str, List[Tuple[str, float]]] = {vertex: [] for vertex in vertex2index}\n    for (i, outgoing_edges) in enumerate(G_list):\n        vertex = list(vertex2index.keys())[i]\n        for (source_label, target_label, weight) in outgoing_edges:\n            adj[vertex].append((target_label, weight))\n            if not is_directed and source_label != target_label:\n                adj[target_label].append((source_label, weight))\n    for vertex in adj.keys():\n        adj[vertex] = sorted(adj[vertex], key=lambda x: x[0])\n    return adj"}
{"task_id": 294, "completion_id": 9, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples. For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    is_directed = G['is_directed']\n    label_to_index = G['_V2I']\n    index_to_label = {index: label for (label, index) in label_to_index.items()}\n    adjacency_list = G['_G']\n    adjacency_dict = {label: [] for label in label_to_index}\n    for (index, edges) in enumerate(adjacency_list):\n        source_label = index_to_label[index]\n        for edge in edges:\n            (target_label, weight) = (edge[1], edge[2])\n            adjacency_dict[source_label].append((target_label, weight))\n            if not is_directed:\n                adjacency_dict[target_label].append((source_label, weight))\n    for (label, neighbors) in adjacency_dict.items():\n        adjacency_dict[label] = sorted(list(set(neighbors)), key=lambda x: x[0])\n    return adjacency_dict\nG = {'is_directed': False, '_V2I': {'A': 0, 'B': 1, 'C': 2}, '_G': [[('A', 'B', 2.0), ('A', 'C', 3.0)], [('B', 'A', 2.0), ('B', 'C', 4.0)], [('C', 'A', 3.0), ('C', 'B', 4.0)]]}"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all(np.isin(x, [0, 1]))"}
{"task_id": 296, "completion_id": 1, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all(np.isin(x, [0, 1]))"}
{"task_id": 296, "completion_id": 2, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all(np.logical_or(x == 0, x == 1))"}
{"task_id": 296, "completion_id": 3, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    x = x.flatten()\n    return np.all(np.logical_or(x == 0, x == 1))"}
{"task_id": 296, "completion_id": 4, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    x_flat = x.ravel()\n    return np.all(np.logical_or(x_flat == 0, x_flat == 1))"}
{"task_id": 296, "completion_id": 5, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.array(x)\n    unique_values = np.unique(x)\n    return set(unique_values) <= {0, 1}"}
{"task_id": 296, "completion_id": 6, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all(np.logical_or(x == 0, x == 1))"}
{"task_id": 296, "completion_id": 7, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    x_flat = x.flatten()\n    return np.all(np.logical_or(x_flat == 0, x_flat == 1))"}
{"task_id": 296, "completion_id": 8, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all(np.logical_or(x == 0, x == 1))"}
{"task_id": 296, "completion_id": 9, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all(np.logical_or(x == 0, x == 1))"}
{"task_id": 298, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n\n    def ngram_counts(text, n):\n        \"\"\"Helper function to create an n-gram counter.\"\"\"\n        if n == 1:\n            return Counter(text)\n        else:\n            ngrams = zip(*[text[i:] for i in range(n)])\n            return Counter(ngrams)\n    tokenized_corpus = [sentence.split() for sentence in corpus]\n    if N > 1:\n        pad_token = '<bol>'\n        end_token = '<eol>'\n        tokenized_corpus = [[pad_token] * (N - 1) + sentence + [end_token] for sentence in tokenized_corpus]\n    ngram_counter = Counter()\n    prefix_counter = Counter()\n    for sentence in tokenized_corpus:\n        ngram_counter += ngram_counts(sentence, N)\n        if N > 1:\n            prefix_counter += ngram_counts(sentence, N - 1)\n    tokenized_query = query.split()\n    if N > 1:\n        tokenized_query = [pad_token] * (N - 1) + tokenized_query + [end_token]\n    if len(tokenized_query) < N:\n        return float('-inf')\n    log_prob = 0.0\n    seen_all = True\n    for i in range(len(tokenized_query) - N + 1):\n        ngram = tuple(tokenized_query[i:i + N])\n        prefix = tuple(tokenized_query[i:i + N - 1]) if N > 1 else None\n        if ngram in ngram_counter:\n            if prefix is None:\n                log_prob += math.log(ngram_counter[ngram] / sum(ngram_counter.values()))\n            else:\n                log_prob += math.log(ngram_counter[ngram] / prefix_counter[prefix])\n        else:\n            seen_all = False\n            break\n    if not seen_all:\n        return float('-inf')\n    return round(log_prob, 4)\ncorpus = ['a b a', 'b a b']\nN = 1"}
{"task_id": 298, "completion_id": 1, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    begin_token = '<bol>'\n    end_token = '<eol>'\n\n    def tokenize(sentence, n):\n        tokens = sentence.split()\n        if n > 1:\n            tokens = [begin_token] * (n - 1) + tokens + [end_token]\n        return tokens\n\n    def ngrams_tokens(tokens, n):\n        return [' '.join(tokens[i:i + n]) for i in range(len(tokens) - n + 1)]\n\n    def create_ngram_counts(corpus, n):\n        all_ngrams = []\n        if n > 1:\n            for sentence in corpus:\n                tokens = tokenize(sentence, n)\n                ngrams = ngrams_tokens(tokens, n)"}
{"task_id": 298, "completion_id": 2, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n\n    def get_ngrams(tokens, n):\n        \"\"\"Generate a list of n-grams for given tokens.\"\"\"\n        ngrams = []\n        for i in range(len(tokens) - n + 1):\n            ngrams.append(tuple(tokens[i:i + n]))\n        return ngrams\n\n    def calculate_prob(ngram_counts, nminus1gram_counts, ngram):\n        \"\"\"Calculate the log probability of an ngram.\"\"\"\n        if ngram not in ngram_counts or ngram[:-1] not in nminus1gram_counts:\n            return float('-inf')\n        return math.log(ngram_counts[ngram] / nminus1gram_counts[ngram[:-1]])\n    tokenized_corpus = [sentence.split() for sentence in corpus]\n    if N > 1:\n        padding = ['<bol>'] * (N - 1) + ['<eol>']\n        tokenized_corpus = [padding[:N - 1] + sentence + padding[-1:] for sentence in tokenized_corpus]\n    ngram_counts = Counter()\n    nminus1gram_counts = Counter()\n    for sentence in tokenized_corpus:\n        ngrams = get_ngrams(sentence, N)\n        prefix_ngrams = get_ngrams(sentence, N - 1) if N > 1 else [[token] for token in sentence]\n        ngram_counts.update(ngrams)\n        nminus1gram_counts.update(prefix_ngrams)\n    query_tokens = query.split()\n    if N > 1:\n        query_tokens = padding[:N - 1] + query_tokens + padding[-1:]\n    if len(query_tokens) < N:\n        return float('-inf')\n    query_ngrams = get_ngrams(query_tokens, N)\n    log_prob = 0.0\n    for ngram in query_ngrams:\n        ngram_log_prob = calculate_prob(ngram_counts, nminus1gram_counts, ngram)\n        if ngram_log_prob == float('-inf'):\n            return float('-inf')\n        log_prob += ngram_log_prob\n    return round(log_prob, 4)"}
{"task_id": 298, "completion_id": 3, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef split_into_tokens(sentence: str) -> List[str]:\n    \"\"\"Split a sentence into list of tokens.\"\"\"\n    return sentence.split()\ndef pad_tokens(tokens: List[str], padding_length: int) -> List[str]:\n    \"\"\"Pad tokens with '<bol>' and '<eol>' at start and end respectively.\"\"\"\n    return ['<bol>'] * padding_length + tokens + ['<eol>']\ndef count_ngrams(tokens: List[str], N: int) -> Counter:\n    \"\"\"Count N-grams in a token sequence.\"\"\"\n    return Counter(zip(*[tokens[i:] for i in range(N)]))\ndef count_prefix_ngrams(tokens: List[str], N: int) -> Counter:\n    \"\"\"Count (N-1)-gram prefix in a token sequence.\"\"\"\n    return count_ngrams(tokens, N - 1)\ndef calculate_log_prob(ngram_counts: Counter, prefix_counts: Counter, N: int, query_tokens: List[str]) -> float:\n    \"\"\"Calculate the log probability of a padded query sequence given n-gram counts.\"\"\"\n    log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        prefix = tuple(query_tokens[i:i + N - 1])\n        if ngram_counts[ngram] == 0 or prefix_counts[prefix] == 0:\n            return float('-inf')\n        prob = ngram_counts[ngram] / prefix_counts[prefix]\n        log_prob += math.log(prob)\n    return round(log_prob, 4)\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError('The order of the N-gram model must be at least 1.')\n    query_tokens = pad_tokens(split_into_tokens(query), N - 1)\n    if len(query_tokens) < N:\n        return float('-inf')\n    total_token_counts = Counter()\n    prefix_token_counts = Counter()\n    for sentence in corpus:\n        tokens = pad_tokens(split_into_tokens(sentence), N - 1)\n        total_token_counts += count_ngrams(tokens, N)\n        prefix_token_counts += count_prefix_ngrams(tokens, N)\n    return calculate_log_prob(total_token_counts, prefix_token_counts, N, query_tokens)\ncorpus = ['a b a', 'b a b']\nquery = 'a b'\nN = 1"}
{"task_id": 298, "completion_id": 4, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n    ngram_counter = Counter()\n    prefix_counter = Counter()\n    for sentence in corpus:\n        tokens = sentence.split()\n        padded_tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        for i in range(len(padded_tokens) - N + 1):\n            ngram = tuple(padded_tokens[i:i + N])\n            prefix = tuple(padded_tokens[i:i + N - 1]) if N > 1 else ()\n            ngram_counter[ngram] += 1\n            prefix_counter[prefix] += 1\n    total_log_prob = 0.0\n    query_tokens = query.split()\n    padded_query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    if len(padded_query_tokens) < N:\n        return float('-inf')\n    for i in range(len(padded_query_tokens) - N + 1):\n        ngram = tuple(padded_query_tokens[i:i + N])\n        prefix = tuple(padded_query_tokens[i:i + N - 1]) if N > 1 else ()\n        ngram_count = ngram_counter[ngram]\n        prefix_count = prefix_counter[prefix]\n        if ngram_count == 0 or prefix_count == 0:\n            return float('-inf')\n        p = ngram_count / prefix_count\n        total_log_prob += math.log(p)\n    return round(total_log_prob, 4)\ncorpus = ['a b a', 'b a b']\nN = 1"}
{"task_id": 298, "completion_id": 5, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n\n    def pad_sentence(sentence, n):\n        return ['<bol>'] * (n - 1) + sentence.split() + ['<eol>']\n\n    def extract_ngrams(sentences, n):\n        ngrams = defaultdict(int)\n        prefixes = defaultdict(int)\n        for sentence in sentences:\n            padded_sentence = pad_sentence(sentence, n)\n            for i in range(len(padded_sentence) - n + 1):\n                ngram = tuple(padded_sentence[i:i + n])\n                ngrams[ngram] += 1\n                if n > 1:\n                    prefix = tuple(padded_sentence[i:i + n - 1])\n                    prefixes[prefix] += 1\n        return (ngrams, prefixes)\n    (ngrams, prefixes) = extract_ngrams(corpus, N)\n    total_prob = 0.0\n    query_tokens = pad_sentence(query, N)\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        prefix = ngram[:-1]\n        if ngram in ngrams:\n            if N == 1:\n                prefix_count = sum(ngrams.values())\n            else:\n                prefix_count = prefixes[prefix]\n            prob = ngrams[ngram] / prefix_count\n            total_prob += math.log(prob)\n        else:\n            return float('-inf')\n    return round(total_prob, 4)\ncorpus = ['a b a', 'b a b']\nquery = 'a b'\nN = 1"}
{"task_id": 298, "completion_id": 6, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef pad_sentence(sentence: List[str], N: int) -> List[str]:\n    \"\"\"Pad the sentence with <bol> and <eol> tokens appropriately.\"\"\"\n    return ['<bol>'] * (N - 1) + sentence + ['<eol>']\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    tokenized_corpus = [sentence.split() for sentence in corpus]\n    if N > 1:\n        tokenized_corpus = [pad_sentence(sentence, N) for sentence in tokenized_corpus]\n    ngrams = Counter()\n    n_minus_1_grams = Counter()\n    for sentence in tokenized_corpus:\n        for i in range(len(sentence) - (N - 1)):\n            ngram = tuple(sentence[i:i + N])\n            ngrams[ngram] += 1\n            prefix = tuple(sentence[i:i + N - 1])\n            n_minus_1_grams[prefix] += 1\n    tokenized_query = query.split()\n    if N > 1:\n        tokenized_query = pad_sentence(tokenized_query, N)\n    if len(tokenized_query) < N:\n        return float('-inf')\n    log_prob = 0.0\n    for i in range(len(tokenized_query) - (N - 1)):\n        ngram = tuple(tokenized_query[i:i + N])\n        prefix = tuple(tokenized_query[i:i + N - 1])\n        ngram_count = ngrams[ngram]\n        prefix_count = n_minus_1_grams[prefix]\n        if ngram_count == 0 or prefix_count == 0:\n            return float('-inf')\n        probability = ngram_count / prefix_count\n        log_prob += math.log(probability)\n    return round(log_prob, 4)\ncorpus = ['a b a', 'b a b']\nN = 1"}
{"task_id": 298, "completion_id": 7, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        return float('-inf')\n\n    def pad_sentence(tokens):\n        return ['<bol>'] * (N - 1) + tokens + ['<eol>']\n\n    def get_ngrams(tokens, n):\n        return [tuple(tokens[i:i + n]) for i in range(len(tokens) - n + 1)]\n    padded_corpus = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        padded_corpus.extend(get_ngrams(pad_sentence(tokens), N))\n    query_tokens = query.split()\n    if len(query_tokens) < N - 1:\n        return float('-inf')\n    padded_query = pad_sentence(query_tokens)\n    query_ngrams = get_ngrams(padded_query, N)\n    ngram_counter = Counter(padded_corpus)\n    prefix_counter = Counter([ngram[:-1] for ngram in padded_corpus])\n    log_prob = 0.0\n    for ngram in query_ngrams:\n        prefix = ngram[:-1]\n        if prefix not in prefix_counter:\n            return float('-inf')\n        if ngram not in ngram_counter:\n            return float('-inf')\n        else:\n            prob = ngram_counter[ngram] / prefix_counter[prefix]\n            log_prob += math.log(prob)\n    return round(log_prob, 4)\ncorpus = ['a b a', 'b a b']\nN = 1"}
{"task_id": 298, "completion_id": 8, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n\n    def update_ngrams(sentence: List[str], ngram_dict: defaultdict, n: int):\n        \"\"\"Updates n-gram counts in the dictionary.\"\"\"\n        for i in range(len(sentence) - n + 1):\n            ngram_dict[tuple(sentence[i:i + n])] += 1\n    counts = Counter()\n    ngram_counts = defaultdict(int)\n    n_1gram_counts = defaultdict(int)\n    BOL = '<bol>'\n    EOL = '<eol>'\n    for sentence in corpus:\n        tokens = sentence.split()\n        counts.update(tokens)\n        if N > 1:\n            tokens = [BOL] * (N - 1) + tokens + [EOL]\n        for n in range(1, N + 1):\n            update_ngrams(tokens, ngram_counts, n)\n            if n == N - 1:\n                update_ngrams(tokens, n_1gram_counts, n)\n    query_tokens = query.split()\n    if N > 1:\n        query_tokens = [BOL] * (N - 1) + query_tokens + [EOL]\n    log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        n_1gram = tuple(query_tokens[i:i + N - 1])\n        ngram_count = ngram_counts[ngram]\n        n_1gram_count = n_1gram_counts[n_1gram] if N > 1 else sum(counts.values())\n        if ngram_count == 0:\n            return float('-inf')\n        log_prob += math.log(ngram_count / n_1gram_count)\n    return round(log_prob, 4)\ncorpus = ['a b a', 'b a b']\nN = 1"}
{"task_id": 298, "completion_id": 9, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n\n    def tokenize(sentence, n):\n        \"\"\"Tokenize a sentence and apply necessary padding.\"\"\"\n        tokens = sentence.split()\n        if n > 1:\n            tokens = ['<bol>'] * (n - 1) + tokens + ['<eol>']\n        return tokens\n\n    def generate_ngrams(tokens, n):\n        \"\"\"Generate n-grams from a list of tokens.\"\"\"\n        return [tuple(tokens[i:i + n]) for i in range(len(tokens) - n + 1)]\n    ngram_counts = Counter()"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n    \n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n    \n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n_samples, _) = X.shape\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            dist = np.linalg.norm(X[i] - X[j])\n            weight = 1 / (1 + dist)\n            W[i][j] = weight\n            W[j][i] = weight\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    centroids = E[:k].copy()\n    prev_labels = np.zeros(n_samples, dtype=int)\n    max_iter = 100\n    for _ in range(max_iter):\n        distances = np.sqrt(((E[:, np.newaxis] - centroids) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=1)\n        for i in range(k):\n            if np.any(labels == i):\n                centroids[i] = E[labels == i].mean(axis=0)\n            else:\n                centroids[i] = E[np.random.choice(n_samples)]\n        if np.array_equal(labels, prev_labels):\n            break\n        prev_labels = labels\n    return labels.tolist()"}
{"task_id": 302, "completion_id": 1, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n_samples = X.shape[0]\n    n_features = X.shape[1]\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigvals, eigvecs) = np.linalg.eig(L)\n    sorted_indices = np.argsort(eigvals)\n    E = eigvecs[:, sorted_indices[:k]]\n    centroids = E[:k].copy()\n    for _ in range(100):\n        distances = np.array([np.linalg.norm(E - centroid, axis=1) for centroid in centroids])\n        clusters = np.argmin(distances, axis=0)\n        new_centroids = np.array([E[clusters == i].mean(axis=0) for i in range(k)])\n        if np.isnan(new_centroids).any():\n            indices = np.random.choice(n_samples, size=k, replace=False)\n            new_centroids = E[indices]\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    clusters_labels = [int(i) for i in clusters]\n    return clusters_labels\nX = np.random.rand(100, 2)\nk = 5\nclusters = spectral_clustering(X, k)"}
{"task_id": 302, "completion_id": 2, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n_samples, _) = X.shape\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            dist = np.linalg.norm(X[i] - X[j])\n            W[i, j] = W[j, i] = 1 / (1 + dist)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigvals, eigvecs) = np.linalg.eigh(L)\n    eigvecs = eigvecs[:, :k]\n    centroids = eigvecs[:k, :].copy()\n    labels = np.zeros(n_samples, dtype=int)\n    for _ in range(100):\n        new_labels = np.argmin(np.linalg.norm(eigvecs[:, :, None] - centroids.T[None, :, :], axis=1), axis=1)\n        if np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n        for j in range(k):\n            if np.sum(labels == j) > 0:\n                centroids[j] = np.mean(eigvecs[labels == j], axis=0)\n            else:\n                centroids[j] = eigvecs[np.random.randint(n_samples)]\n    return labels.tolist()"}
{"task_id": 302, "completion_id": 3, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            dist = np.linalg.norm(X[i] - X[j])\n            weight = 1 / (1 + dist)\n            W[i, j] = weight\n            W[j, i] = weight\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    centroids = E[:k].copy()\n    clusters = np.zeros(n_samples, dtype=int)\n    converged = False\n    iterations = 0\n    while not converged and iterations < 100:\n        new_clusters = np.argmin(np.sum((E[:, None, :] - centroids) ** 2, axis=-1), axis=-1)\n        converged = np.all(clusters == new_clusters)\n        clusters = new_clusters\n        for i in range(k):\n            cluster_points = E[clusters == i]\n            if len(cluster_points) > 0:\n                centroids[i] = np.mean(cluster_points, axis=0)\n            else:\n                centroids[i] = E[np.random.randint(n_samples)]\n        iterations += 1\n    return clusters.tolist()"}
{"task_id": 302, "completion_id": 4, "solution": "import numpy as np\ndef compute_adjacency_matrix(X: np.ndarray) -> np.ndarray:\n    n_samples = X.shape[0]\n    adjacency_matrix = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            dist = np.linalg.norm(X[i] - X[j])\n            adjacency_matrix[i, j] = adjacency_matrix[j, i] = 1 / (1 + dist)\n    return adjacency_matrix\ndef compute_laplacian_matrix(W: np.ndarray) -> np.ndarray:\n    degree_matrix = np.diag(np.sum(W, axis=1))\n    laplacian_matrix = degree_matrix - W\n    return laplacian_matrix\ndef spectrally_transform(X: np.ndarray, k: int) -> np.ndarray:\n    W = compute_adjacency_matrix(X)\n    L = compute_laplacian_matrix(W)\n    (vals, vecs) = np.linalg.eigh(L)\n    idx = np.argsort(vals)[:k]\n    vecs = vecs[:, idx]\n    return vecs\ndef run_k_means(E: np.ndarray, k: int, max_iterations: int=100) -> np.ndarray:\n    n_samples = E.shape[0]\n    centroids = E[:k, :].copy()\n    labels = np.zeros(n_samples, dtype=int)\n    prev_labels = labels.copy()\n    for _ in range(max_iterations):\n        for i in range(n_samples):\n            labels[i] = np.argmin([np.linalg.norm(E[i] - centroid) for centroid in centroids])\n        for i in range(k):\n            cluster_points = E[labels == i]\n            if cluster_points.shape[0] > 0:\n                centroids[i] = np.mean(cluster_points, axis=0)\n            else:\n                centroids[i] = E[np.random.choice(n_samples)]\n        if np.array_equal(labels, prev_labels):\n            break\n        prev_labels = labels.copy()\n    return labels\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    E = spectrally_transform(X, k)\n    cluster_labels = run_k_means(E, k)\n    return cluster_labels.tolist()"}
{"task_id": 302, "completion_id": 5, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n\n    def pairwise_distances(X):\n        return np.sqrt(((X[:, np.newaxis] - X) ** 2).sum(axis=2))\n    n_samples = X.shape[0]\n    distances = pairwise_distances(X)\n    W = 1 / (1 + distances)\n    np.fill_diagonal(W, 0)\n    D = np.diag(W.sum(axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    centroids = E[:k].copy()\n    prev_labels = None\n    for _ in range(100):\n        distances = pairwise_distances(E)\n        labels = np.argmin(distances[:, :, np.newaxis], axis=1).flatten()\n        if np.array_equal(labels, prev_labels):\n            break\n        prev_labels = labels\n        for i in range(k):\n            cluster_points = E[labels == i]\n            if cluster_points.size > 0:\n                centroids[i] = np.mean(cluster_points, axis=0)\n            else:\n                centroids[i] = E[np.random.choice(n_samples)]\n    return labels.tolist()"}
{"task_id": 302, "completion_id": 6, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n_samples, _) = X.shape\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j:\n                dist = np.linalg.norm(X[i] - X[j])\n                W[i, j] = 1 / (1 + dist)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    sorted_indices = np.argsort(eigenvalues)[:k]\n    E = eigenvectors[:, sorted_indices]\n\n    def run_k_means(E, k, max_iter=100):\n        centroids = E[:k].copy()\n        prev_labels = np.zeros(n_samples, dtype=int)\n        for _ in range(max_iter):\n            distances = np.array([np.linalg.norm(E - centroid, axis=1) for centroid in centroids])\n            labels = np.argmin(distances, axis=0)\n            if np.array_equal(labels, prev_labels):\n                break\n            prev_labels = labels\n            for i in range(k):\n                cluster_points = E[labels == i]\n                if cluster_points.size > 0:\n                    centroids[i] = np.mean(cluster_points, axis=0)\n                else:\n                    centroids[i] = E[np.random.randint(n_samples)]\n        return labels\n    labels = run_k_means(E, k)\n    return labels.tolist()"}
{"task_id": 302, "completion_id": 7, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n_samples, _) = X.shape\n\n    def distance_matrix(X):\n        sum_X = np.sum(np.square(X), axis=1)\n        D = sum_X.reshape([-1, 1]) + sum_X - 2 * np.dot(X, X.T)\n        np.fill_diagonal(D, 0)\n        return 1 / (1 + np.sqrt(D))\n\n    def get_eigenvectors(L, k):\n        (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n        idx = eigenvalues.argsort()\n        sorted_eigenvalues = eigenvalues[idx]\n        sorted_eigenvectors = eigenvectors[:, idx]\n        return (sorted_eigenvalues[:k], sorted_eigenvectors[:, :k])\n\n    def init_centroids(E, k):\n        return E[:k]\n\n    def kmeans(E, k, centroids):\n        (n_samples, n_features) = E.shape\n        labels = np.empty(n_samples, dtype=int)\n        prev_labels = np.empty(n_samples, dtype=int)\n        dist = np.empty(n_samples, dtype=float)\n        i = 0\n        while i < 100:\n            prev_labels.fill(-1)\n            while np.any(prev_labels != labels):\n                prev_labels[:] = labels\n                for (c, centroid) in enumerate(centroids):\n                    dist[:] = np.linalg.norm(E - centroid.reshape(1, n_features), axis=1)\n                    labels[dist == dist.min()] = c\n                for c in range(k):\n                    if (labels == c).sum() > 0:\n                        centroids[c, :] = np.mean(E[labels == c], axis=0)\n                    else:\n                        centroids[c, :] = E[np.random.randint(n_samples), :]\n            i += 1\n        return labels.tolist()\n    W = distance_matrix(X)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    eigenvectors = get_eigenvectors(L, k)[1]\n    centroids = init_centroids(eigenvectors, k)\n    return kmeans(eigenvectors, k, centroids)"}
{"task_id": 302, "completion_id": 8, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n_samples, _) = X.shape\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    sorted_indices = np.argsort(eigenvalues)[:k]\n    E = eigenvectors[:, sorted_indices]\n    row_norms = np.linalg.norm(E, axis=1, keepdims=True)\n    E /= row_norms\n    centroids = E[:k].copy()\n    prev_labels = np.zeros(n_samples)\n    for _ in range(100):\n        distances = np.linalg.norm(E[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        if np.array_equal(labels, prev_labels):\n            break\n        prev_labels = labels\n        for i in range(k):\n            cluster_points = E[labels == i]\n            if len(cluster_points) > 0:\n                centroids[i] = cluster_points.mean(axis=0)\n            else:\n                random_index = np.random.choice(n_samples)\n                centroids[i] = E[random_index]\n    return labels.tolist()"}
{"task_id": 302, "completion_id": 9, "solution": "import numpy as np\ndef euclidean_distance(x, y):\n    \"\"\"Calculate Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((x - y) ** 2))\ndef pairwise_distances(X):\n    \"\"\"Calculate the pairwise Euclidean distances between all points in X.\"\"\"\n    n = X.shape[0]\n    distances = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            distances[i, j] = euclidean_distance(X[i], X[j])\n    return distances\ndef adjacency_matrix(distances):\n    \"\"\"Build the weighted adjacency matrix W using the given distance matrix.\"\"\"\n    W = 1 / (1 + distances)\n    np.fill_diagonal(W, 0)\n    return W\ndef graph_laplacian(W):\n    \"\"\"Compute the unnormalised graph Laplacian L = D - W.\"\"\"\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    return L\ndef top_k_eigenvectors(L, k):\n    \"\"\"Compute and return the first k eigenvectors of L.\"\"\"\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    eigen_indices = np.argsort(eigenvalues)[:k]\n    return eigenvectors[:, eigen_indices]\ndef initialise_centroids(E, k):\n    \"\"\"Initialise centroids for k-means clustering.\"\"\"\n    return E[:k]\ndef assign_clusters(E, centroids):\n    \"\"\"Assign each data point to the nearest centroid.\"\"\"\n    n_samples = E.shape[0]\n    distances = np.linalg.norm(E[:, np.newaxis] - centroids, axis=-1)\n    return np.argmin(distances, axis=1)\ndef update_centroids(E, labels, k):\n    \"\"\"Update centroids to be the average of their assigned points.\"\"\"\n    centroids = np.empty((k, E.shape[1]))\n    for i in range(k):\n        cluster_points = E[labels == i]\n        if cluster_points.shape[0] > 0:\n            centroids[i] = np.mean(cluster_points, axis=0)\n        else:\n            centroids[i] = E[np.random.choice(E.shape[0])]\n    return centroids\ndef k_means(E, k):\n    \"\"\"Run k-means clustering on the rows of E.\"\"\"\n    centroids = initialise_centroids(E, k)\n    for _ in range(100):\n        old_labels = labels = assign_clusters(E, centroids)\n        centroids = update_centroids(E, labels, k)\n        if np.all(labels == old_labels):\n            break\n    return labels\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    distances = pairwise_distances(X)\n    W = adjacency_matrix(distances)\n    L = graph_laplacian(W)\n    E = top_k_eigenvectors(L, k)\n    labels = k_means(E, k)\n    return labels.tolist()"}
{"task_id": 303, "completion_id": 0, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(0, min(ix - 1, len(params) - 1))\n    (prev_mine, prev_label) = params[prev_ix]\n    (curr_mine, curr_label) = params[ix]\n    output = '------------------------- DEBUG -------------------------\\n'\n    output += f'Mine (prev) [{prev_label}]:\\n{prev_mine}\\n'\n    output += f'Theirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n'\n    output += f'Mine [{curr_label}]:\\n{curr_mine}\\n'\n    output += f'Theirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}'\n    output += '\\n----------------------- END DEBUG -----------------------'\n    return output"}
{"task_id": 303, "completion_id": 1, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_ix]\n    (curr_mine, curr_label) = params[ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    formatted_string = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return formatted_string\nparams = [('1', 'label1'), ('2', 'label2'), ('3', 'label3')]\ngolds = {'label1': '1', 'label2': '20', 'label3': '30'}"}
{"task_id": 303, "completion_id": 2, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    header_footer_len = 25\n    header = '-' * header_footer_len + ' DEBUG ' + '-' * header_footer_len\n    footer = '-' * (header_footer_len - 1) + ' END DEBUG ' + '-' * (header_footer_len - 1)\n    prev_ix = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_ix]\n    (curr_mine, curr_label) = params[ix]\n    output = f'{header}\\n'\n    output += f'Mine (prev) [{prev_label}]:\\n{prev_mine}\\n'\n    output += f'Theirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n'\n    output += f'Mine [{curr_label}]:\\n{curr_mine}\\n'\n    output += f'Theirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n'\n    output += f'{footer}'\n    return output"}
{"task_id": 303, "completion_id": 3, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    ix = max(min(ix, len(params) - 1), 0)\n    prev_ix = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_ix]\n    (curr_mine, curr_label) = params[ix]\n    formatted_str = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return formatted_str\nparams = [('mine output 1', 'label1'), ('mine output 2', 'label2')]\ngolds = {'label1': 'gold output 1', 'label2': 'gold output 2'}\nix = 1\nwarn_str = '\\nAdditional warning message here.'"}
{"task_id": 303, "completion_id": 4, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_ix]\n    (curr_mine, curr_label) = params[ix]\n    result = '------------------------- DEBUG -------------------------\\n'\n    result += f'Mine (prev) [{prev_label}]:\\n{prev_mine}\\n\\n'\n    result += f'Theirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\n'\n    result += f'Mine [{curr_label}]:\\n{curr_mine}\\n\\n'\n    result += f'Theirs [{curr_label}]:\\n{golds[curr_label]}\\n'\n    result += f'{warn_str}'\n    result += '----------------------- END DEBUG -----------------------'\n    return result"}
{"task_id": 303, "completion_id": 5, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_ix]\n    (curr_mine, curr_label) = params[ix]\n    output = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return output\nparams = [('mine1', 'label1'), ('mine2', 'label2')]\ngolds = {'label1': 'gold1', 'label2': 'gold2'}\nix = 1\nwarn_str = ' Warning: Something is wrong.'"}
{"task_id": 303, "completion_id": 6, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_label = params[prev_ix][1]\n    prev_mine = params[prev_ix][0]\n    curr_label = params[ix][1]\n    curr_mine = params[ix][0]\n    formatted_str = '------------------------- DEBUG -------------------------\\n'\n    formatted_str += f'Mine (prev) [{prev_label}]:\\n{prev_mine}\\n'\n    formatted_str += f'Theirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n'\n    formatted_str += f'Mine [{curr_label}]:\\n{curr_mine}\\n'\n    formatted_str += f'Theirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}'\n    formatted_str += '\\n----------------------- END DEBUG -----------------------'\n    return formatted_str\nparams = [('mine1_output', 'label1'), ('mine2_output', 'label2'), ('mine3_output', 'label3')]\ngolds = {'label1': 'gold1_output', 'label2': 'gold2_output', 'label3': 'gold3_output'}\nix = 2\nwarn_str = '\\nWarn: This is a warning!'"}
{"task_id": 303, "completion_id": 7, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_idx = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_idx]\n    prev_gold = golds[prev_label]\n    (curr_mine, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    result = ['-' * 25 + ' DEBUG ' + '-' * 25, f'Mine (prev) [{prev_label}]:', prev_mine, f'Theirs (prev) [{prev_label}]:', prev_gold, '', f'Mine [{curr_label}]:', curr_mine, f'Theirs [{curr_label}]:', curr_gold, warn_str, '-' * 23 + ' END DEBUG ' + '-' * 23]\n    return '\\n'.join(result)\nparams = [('value1', 'label1'), ('value2', 'label2'), ('value3', 'label3')]\ngolds = {'label1': 'gold1', 'label2': 'gold2', 'label3': 'gold3'}\nix = 2\nwarn_str = '\\nPlease check the value2, it seems incorrect.'"}
{"task_id": 303, "completion_id": 8, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(0, ix - 1)\n    (prev_label, curr_label) = (params[prev_ix][1], params[ix][1])\n    (prev_mine, curr_mine) = (params[prev_ix][0], params[ix][0])\n    top_bottom = '-' * 25\n    mid_bottom = '-' * 23\n    return f'{top_bottom} DEBUG {top_bottom}\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n{mid_bottom} END DEBUG {mid_bottom}'"}
{"task_id": 303, "completion_id": 9, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_ix]\n    (curr_mine, curr_label) = params[ix]\n    result = '-' * 25 + ' DEBUG ' + '-' * 25 + '\\n'\n    result += f'Mine (prev) [{prev_label}]:\\n{prev_mine}\\n\\n'\n    result += f'Theirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\n'\n    result += f'Mine [{curr_label}]:\\n{curr_mine}\\n\\n'\n    result += f'Theirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n'\n    result += '-' * 23 + ' END DEBUG ' + '-' * 23 + '\\n'\n    return result\nparams = [('mine1', 'label1'), ('mine2', 'label2'), ('mine3', 'label3')]\ngolds = {'label1': 'gold1', 'label2': 'gold2', 'label3': 'gold3'}\nix = 1\nwarn_str = '\\nWarning: This is an example warning message.'"}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    (N, M) = X.shape\n    if fit_intercept:\n        ones_col = np.ones(N).reshape(-1, 1)\n        X = np.hstack([ones_col, X])\n        if isinstance(mu, (int, float)):\n            mu = np.ones(M + 1) * mu\n    if V is None:\n        V_inv = np.eye(len(mu))\n    elif isinstance(V, (int, float)):\n        V_inv = np.eye(len(mu)) / V\n    else:\n        V_inv = np.array(V)\n        if V_inv.ndim == 1:\n            V_inv = np.diag(V_inv)\n        V_inv = np.linalg.inv(V_inv)\n    X_transpose = X.T\n    XTX = X_transpose @ X\n    M_inv = np.linalg.inv(V_inv + XTX)\n    mu_prior_trans = V_inv @ mu\n    mu_posterior = M_inv @ (mu_prior_trans + X_transpose @ y)\n    return [round(value, 4) for value in mu_posterior]\nX = np.random.randn(100, 2)\ntrue_betas = np.array([1, 2])\ny = X @ true_betas + np.random.randn(100)\nmu = 0.0\nV = None\nfit_intercept = False"}
{"task_id": 304, "completion_id": 1, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.concatenate([np.ones((X.shape[0], 1)), X], axis=1)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(X.shape[1])\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    Sigma_b = np.linalg.inv(V_inv + X.T @ X)\n    if isinstance(mu, (int, float)):\n        mu = np.full(X.shape[1], mu)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    return [round(val, 4) for val in mu_b.tolist()]\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([2.5, 4.1, 6.9])"}
{"task_id": 304, "completion_id": 2, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.column_stack([np.ones(X.shape[0]), X])\n    (N, M) = X.shape\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    if V is None:\n        V = np.eye(M)\n    elif np.isscalar(V):\n        V = V * np.eye(M)\n    elif hasattr(V, '__iter__') and (not isinstance(V, np.ndarray)):\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    XtX = X.T @ X\n    Sigma_b_inv = V_inv + XtX\n    Sigma_b = np.linalg.inv(Sigma_b_inv)\n    Xt_y = X.T @ y\n    mu_b = Sigma_b @ (V_inv @ mu + Xt_y)\n    return [round(coeff, 4) for coeff in mu_b]\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([1, 2, 3])\nmu = 0.5\nV = 2"}
{"task_id": 304, "completion_id": 3, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (for API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.column_stack([np.ones(X.shape[0]), X])\n    if np.isscalar(mu):\n        mu = np.full(X.shape[1], mu)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif np.isscalar(V):\n        V = V * np.eye(X.shape[1])\n    elif len(V) == X.shape[1]:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    XTX = X.T @ X\n    Sigma_b = np.linalg.inv(V_inv + XTX)\n    XTy = X.T @ y\n    mu_b = Sigma_b @ (V_inv @ mu + XTy)\n    return [round(coeff, 4) for coeff in mu_b]\nX = np.array([[2, 3], [4, 5], [6, 7]])\ny = np.array([1, 2, 3])\nmu = 0\nV = None\nfit_intercept = True"}
{"task_id": 304, "completion_id": 4, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    if isinstance(mu, (int, float)):\n        mu = np.full(X.shape[1], mu)\n    if V is None:\n        V_inv = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V_inv = np.eye(X.shape[1]) / V\n    elif isinstance(V, (list, tuple, np.ndarray)):\n        V_inv = np.diag(1 / np.array(V))\n    else:\n        raise ValueError('V must be None, a scalar, or a 1-D sequence')\n    X_t_X = X.T @ X\n    sum_term = V_inv @ mu + X.T @ y\n    Sigma_b = np.linalg.inv(V_inv + X_t_X)\n    mu_b = Sigma_b @ sum_term\n    return [round(x, 4) for x in mu_b]"}
{"task_id": 304, "completion_id": 5, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=None, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        ones_column = np.ones((X.shape[0], 1))\n        X = np.hstack([ones_column, X])\n    (N, M) = X.shape\n    if V is None:\n        V = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(M)\n    elif isinstance(V, (np.ndarray, list, tuple)):\n        if len(V) == M:\n            V = np.diag(V)\n        else:\n            raise ValueError('Length of V must match number of features when provided as a list.')\n    if isinstance(mu, (int, float)):\n        mu = mu * np.ones(M)\n    V_inv = np.linalg.inv(V)\n    Sigma_b_inv = V_inv + X.T @ X\n    Sigma_b = np.linalg.inv(Sigma_b_inv)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    return [round(x, 4) for x in mu_b]\nX = np.random.rand(10, 2)\ny = np.random.rand(10)\nmu = 0.0\nV = None\nfit_intercept = True"}
{"task_id": 304, "completion_id": 6, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n    (N, M) = X.shape\n    if np.isscalar(V):\n        V = V * np.eye(M)\n    elif V is None:\n        V = np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    V_inv = np.linalg.inv(V)\n    Sigma_b = np.linalg.inv(V_inv + X.T @ X)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    return [round(coef, 4) for coef in mu_b]\nX = np.array([[1, 1], [1, 2], [2, 3]])\ny = np.array([1, 2, 3])"}
{"task_id": 304, "completion_id": 7, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n    \n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n    \n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n    \n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    M = X.shape[1]\n    prior_precision = np.eye(M)\n    if V is not None:\n        if np.isscalar(V):\n            prior_precision *= 1 / V\n        elif type(V) in [list, tuple, np.ndarray]:\n            if len(V) == M:\n                prior_precision = np.diag(1 / np.array(V))\n            else:\n                raise ValueError('Length of V does not match number of features.')\n    X_t_X = X.T @ X\n    X_t_y = X.T @ y\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    Sigma_b = np.linalg.inv(prior_precision + X_t_X)\n    mu_b = Sigma_b @ (prior_precision @ mu + X_t_y)\n    return [round(val, 4) for val in mu_b]\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\ny = np.array([1, 2, 3, 4])"}
{"task_id": 304, "completion_id": 8, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    if np.isscalar(mu):\n        mu = np.full(X.shape[1], mu)\n    if V is None:\n        V_inv = np.eye(X.shape[1])\n    elif np.isscalar(V):\n        V_inv = np.eye(X.shape[1]) / V\n    else:\n        V_inv = np.diag(1 / V)\n    Sigma_b = np.linalg.inv(V_inv + X.T @ X)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    return [round(coef, 4) for coef in mu_b]\nX = np.array([[1.0, 1.0], [2.0, 2.0], [3.0, 3.0]])\ny = np.array([[4.0], [5.0], [6.0]])\nmu = 0.0\nV = None\nfit_intercept = True"}
{"task_id": 304, "completion_id": 9, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n    \n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n    \n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n    \n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n    M = X.shape[1]\n    mu = np.full(M, mu) if np.isscalar(mu) else np.array(mu)\n    if V is None:\n        V = np.eye(M)\n    elif np.isscalar(V):\n        V = V * np.eye(M)\n    else:\n        V = np.eye(M) * np.array(V) if len(V) == M else V\n    V_inv = np.linalg.inv(V) if V is not None else np.eye(M)\n    Sigma_b = np.linalg.inv(V_inv + X.T @ X)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    return list(np.round(mu_b, decimals=4))\nX = np.array([[0.1, 0.7], [0.9, 0.3]])\ny = np.array([0.4, 0.6])\nmu = 0.5\nV = [1.0, 0.5]"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef mel_to_hz(mel):\n    \"\"\"Convert mel bin numbers to frequencies.\"\"\"\n    return 700 * (10 ** (mel / 2595) - 1)\ndef hz_to_mel(frequencies):\n    \"\"\"Convert frequencies in Hz to mel.\"\"\"\n    return 2595 * np.log10(1 + frequencies / 700)\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n    freqs = mel_to_hz(mel_points)\n    bin_trans = N * freqs / fs\n    bin_trans = np.round(bin_trans).astype(int)\n    filter_banks = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        m = bin_trans[i]\n        mf = bin_trans[i + 1]\n        mf2 = bin_trans[i + 2]\n        for k in range(N // 2 + 1):\n            if k >= m and k <= mf:\n                filter_banks[i, k] = (k - m) / (mf - m)\n            elif k >= mf and k <= mf2:\n                filter_banks[i, k] = (mf2 - k) / (mf2 - mf)\n        if normalize:\n            filter_banks[i] *= 2 / (freqs[i + 2] - freqs[i])\n    return [list(np.round(row, decimals=4)) for row in filter_banks]"}
{"task_id": 308, "completion_id": 1, "solution": "import numpy as np\ndef hz_to_mel(f):\n    return 2595 * np.log10(1 + f / 700)\ndef mel_to_hz(mel):\n    return 700 * (10 ** (mel / 2595) - 1)\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n    freq_points = mel_to_hz(mel_points)\n    bins = np.floor((N + 1) * freq_points / fs).astype(int)\n    fbank = np.zeros((n_filters, N // 2 + 1))\n    for m in range(1, n_filters + 1):\n        for k in range(bins[m - 1], bins[m]):\n            fbank[m - 1, k] = (k - bins[m - 1]) / (bins[m] - bins[m - 1])\n        for k in range(bins[m], bins[m + 1]):\n            fbank[m - 1, k] = (bins[m + 1] - k) / (bins[m + 1] - bins[m])\n    if normalize:\n        fbank = np.multiply(fbank, np.divide(2, freq_points[2:n_filters + 2] - freq_points[:n_filters]))\n    fbank = fbank.tolist()\n    for i in range(len(fbank)):\n        for j in range(len(fbank[i])):\n            fbank[i][j] = round(fbank[i][j], 4)\n    return fbank"}
{"task_id": 308, "completion_id": 2, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10 ** (mel / 2595) - 1)\n    mels = np.linspace(hz_to_mel(min_freq), hz_to_mel(max_freq), n_filters + 2)\n    hz_points = mel_to_hz(mels)\n    fbank = np.zeros((n_filters, N // 2 + 1))\n    bin_width = fs / N\n    for i in range(1, n_filters + 1):\n        left_hz = hz_points[i - 1]\n        center_hz = hz_points[i]\n        right_hz = hz_points[i + 1]\n        left_bin = int(left_hz / bin_width)\n        center_bin = int(center_hz / bin_width)\n        right_bin = int(right_hz / bin_width)\n        for k in range(left_bin, center_bin):\n            fbank[i - 1, k] = (k - left_bin) / (center_bin - left_bin)\n        for k in range(center_bin, right_bin):\n            fbank[i - 1, k] = (right_bin - k) / (right_bin - center_bin)\n    if normalize:\n        for i in range(n_filters):\n            fbank[i] = fbank[i] * (2 / (hz_points[i + 2] - hz_points[i]))\n    fbank_list = [list(np.round(row, decimals=4)) for row in fbank]\n    return fbank_list"}
{"task_id": 308, "completion_id": 3, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10 ** (mel / 2595) - 1)\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n    mels = np.linspace(min_mel, max_mel, n_filters + 2)\n    hz_points = mel_to_hz(mels)\n    fbin = np.fft.rfftfreq(N, d=1 / fs)\n    mel_matrix = np.zeros((n_filters, len(fbin)))\n    for i in range(1, n_filters + 1):\n        left_side = hz_points[i - 1]\n        center = hz_points[i]\n        right_side = hz_points[i + 1]\n        for (k, freq) in enumerate(fbin):\n            if left_side <= freq <= center:\n                mel_matrix[i - 1, k] = (freq - left_side) / (center - left_side)\n            elif center <= freq <= right_side:\n                mel_matrix[i - 1, k] = (right_side - freq) / (right_side - center)\n    if normalize:\n        for i in range(n_filters):\n            mel_matrix[i, :] *= 2 / (hz_points[i + 2] - hz_points[i])\n    return [[round(x, 4) for x in row] for row in mel_matrix.tolist()]\nN = 512\nn_filters = 10\nfs = 8000\nmin_freq = 0\nmax_freq = None\nnormalize = True"}
{"task_id": 308, "completion_id": 4, "solution": "import numpy as np\ndef hz_to_mel(f):\n    \"\"\"Convert a value in Hertz to Mels.\"\"\"\n    return 2595 * np.log10(1 + f / 700)\ndef mel_to_hz(m):\n    \"\"\"Convert a value in Mels to Hertz.\"\"\"\n    return 700 * (10 ** (m / 2595) - 1)\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n    \n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n    for i in range(1, n_filters + 1):\n        (left_hz, center_hz, right_hz) = hz_points[i - 1:i + 2]\n        for k in range(N // 2 + 1):\n            freq_k = k * fs / N\n            if freq_k >= left_hz and freq_k <= center_hz:\n                slope = (freq_k - left_hz) / (center_hz - left_hz)\n            elif freq_k <= right_hz:\n                slope = (right_hz - freq_k) / (right_hz - center_hz)\n            else:\n                slope = 0\n            filterbank[i - 1, k] = np.maximum(0, slope)\n    if normalize:\n        scaling_factors = 2 / (hz_points[2:] - hz_points[:-2])\n        filterbank *= scaling_factors.reshape(-1, 1)\n    return [list(map(lambda x: round(x, 4), row)) for row in filterbank]\nN = 2048\nfs = 44100\nn_filters = 40"}
{"task_id": 308, "completion_id": 5, "solution": "import numpy as np\ndef hz_to_mel(freq):\n    \"\"\"Convert frequency in Hertz to Mel scale.\"\"\"\n    return 2595 * np.log10(1 + freq / 700)\ndef mel_to_hz(mel):\n    \"\"\"Convert frequency in Mel scale to Hertz.\"\"\"\n    return 700 * (10 ** (mel / 2595) - 1)\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n    filter_bank = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        for k in range(N // 2 + 1):\n            freq_k = k * fs / N\n            slope_left = (freq_k - hz_points[i]) / (hz_points[i + 1] - hz_points[i])\n            slope_right = (hz_points[i + 2] - freq_k) / (hz_points[i + 2] - hz_points[i + 1])\n            filter_bank[i, k] = np.max([0, np.min([slope_left, slope_right])])\n    if normalize:\n        for i in range(n_filters):\n            filter_bank[i] *= 2 / (hz_points[i + 2] - hz_points[i])\n    return [list(np.round(row, 4)) for row in filter_bank]\nN = 512\nn_filters = 20\nfs = 44000\nmin_freq = 0\nmax_freq = None\nnormalize = True"}
{"task_id": 308, "completion_id": 6, "solution": "import numpy as np\ndef hz_to_mel(f: float) -> float:\n    \"\"\"Convert Hertz to Mel.\"\"\"\n    return 2595.0 * np.log10(1 + f / 700.0)\ndef mel_to_hz(mel: float) -> float:\n    \"\"\"Convert Mel to Hertz.\"\"\"\n    return 700.0 * (10.0 ** (mel / 2595.0) - 1.0)\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n    mels = np.linspace(min_mel, max_mel, n_filters + 2)\n    freqs = mel_to_hz(mels)\n    freqs = np.floor((N + 1) * freqs / fs).astype(np.int32)\n    fbank = np.zeros([n_filters, N // 2 + 1], dtype=np.float32)\n    for i in range(1, n_filters + 1):\n        fleft = freqs[i - 1]\n        fcenter = freqs[i]\n        fright = freqs[i + 1]\n        for k in range(N // 2 + 1):\n            f = fs / N * k\n            if fleft <= f <= fcenter:\n                gain = (f - fleft) / (fcenter - fleft)\n            elif fcenter < f <= fright:\n                gain = (fright - f) / (fright - fcenter)\n            else:\n                gain = 0\n            fbank[i - 1, k] = gain\n    if normalize:\n        fbank = np.dot(np.diag(2.0 / (freqs[2:n_filters + 2] - freqs[:n_filters])), fbank)\n    return [[round(x, 4) for x in row] for row in fbank.tolist()]\nN = 512\nn_filters = 20\nfs = 16000"}
{"task_id": 308, "completion_id": 7, "solution": "import numpy as np\ndef hz_to_mel(freq: float) -> float:\n    \"\"\"Convert a frequency in Hz to Mel scale.\"\"\"\n    return 2595.0 * np.log10(1 + freq / 700)\ndef mel_to_hz(mel: float) -> float:\n    \"\"\"Convert a frequency in Mel scale to Hz.\"\"\"\n    return 700 * (10 ** (mel / 2595.0) - 1)\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n    mel_points = np.linspace(hz_to_mel(min_freq), hz_to_mel(max_freq), n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n    dft_bins = np.arange(N // 2 + 1)\n    freqs = dft_bins / N * fs\n    filters = []\n    for i in range(n_filters):\n        lower_side = hz_points[i]\n        center = hz_points[i + 1]\n        upper_side = hz_points[i + 2]\n        freqs = dft_bins * fs / N\n        lower_slope = (freqs - lower_side) / (center - lower_side)\n        upper_slope = (upper_side - freqs) / (upper_side - center)\n        weights = np.maximum(0, np.minimum(lower_slope, upper_slope))\n        if normalize:\n            weights *= 2 / (upper_side - lower_side)\n        filters.append(list(np.round(weights, 4)))\n    return filters\nN = 512\nn_filters = 20\nfs = 44100\nmin_freq = 0\nmax_freq = 8000\nnormalize = True"}
{"task_id": 308, "completion_id": 8, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def freq_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_freq(mel):\n        return 700 * (10 ** (mel / 2595) - 1)\n    min_mel = freq_to_mel(min_freq)\n    max_mel = freq_to_mel(max_freq)\n    mels = np.linspace(min_mel, max_mel, n_filters + 2)\n    freqs = mel_to_freq(mels)\n    bins = np.fft.rfftfreq(N, 1 / fs)[:N // 2 + 1]\n    mel_fb = np.zeros((n_filters, N // 2 + 1))\n    for i in range(1, n_filters + 1):\n        left_slope = (bins - freqs[i - 1]) / (freqs[i] - freqs[i - 1])\n        right_slope = (freqs[i + 1] - bins) / (freqs[i + 1] - freqs[i])\n        triangle = np.maximum(0, np.minimum(left_slope, right_slope))\n        if normalize:\n            mel_fb[i - 1] = 2 * triangle / (freqs[i + 1] - freqs[i - 1])\n        else:\n            mel_fb[i - 1] = triangle\n    mel_fb_list = [list(map(lambda x: round(x, 4), row)) for row in mel_fb.tolist()]\n    return mel_fb_list\nN = 512\nn_filters = 20\nfs = 44100\nmin_freq = 0\nmax_freq = None\nnormalize = True"}
{"task_id": 308, "completion_id": 9, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n\n    def hertz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hertz(mel):\n        return 700 * (10 ** (mel / 2595) - 1)\n    if max_freq is None:\n        max_freq = fs / 2\n    mel_min = hertz_to_mel(min_freq)\n    mel_max = hertz_to_mel(max_freq)\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n    hz_points = mel_to_hertz(mel_points)\n    dft_bins = np.linspace(0, fs // 2, N // 2 + 1)\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n    for i in range(1, n_filters + 1):\n        (left_hz, center_hz, right_hz) = (hz_points[i - 1], hz_points[i], hz_points[i + 1])\n        left_slope = (dft_bins - left_hz) / (center_hz - left_hz)\n        right_slope = (right_hz - dft_bins) / (right_hz - center_hz)\n        filterbank[i - 1] = np.maximum(0, np.minimum(left_slope, right_slope))\n        if normalize:\n            filterbank[i - 1] *= 2 / (right_hz - left_hz)\n    filterbank = np.round(filterbank, 4).tolist()\n    return filterbank"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    N = window_len - 1 if symmetric else window_len\n    coefficients = [0.35875, 0.48829, 0.14128, 0.01168]\n    window = [sum((c * np.cos(2 * np.pi * i * (n / N)) for (i, c) in enumerate(coefficients) if i == 0 or (n != 0 or symmetric))) for n in range(window_len)]\n    return [round(val, 4) for val in window]"}
{"task_id": 312, "completion_id": 1, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        if symmetric:\n            N = window_len - 1\n            n = np.arange(window_len)\n        else:\n            N = window_len\n            n = np.arange(window_len + 1)[:-1]\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        bh_window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n        return [round(x, 4) for x in bh_window]"}
{"task_id": 312, "completion_id": 2, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if not symmetric:\n        true_len = window_len\n    else:\n        true_len = window_len + 1\n    n = np.arange(true_len)\n    N = true_len - 1\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    if not symmetric:\n        window = window[:-1]\n    return [round(float(val), 4) for val in window]"}
{"task_id": 312, "completion_id": 3, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a = np.array([0.35875, 0.48829, 0.14128, 0.01168])\n    if not symmetric:\n        N = window_len + 1\n    else:\n        N = window_len\n    n = np.arange(N)\n    window = a[0] - a[1] * np.cos(2 * np.pi * n / (N - 1)) + a[2] * np.cos(4 * np.pi * n / (N - 1)) - a[3] * np.cos(6 * np.pi * n / (N - 1))\n    if not symmetric:\n        window = window[:-1]\n    return [round(x, 4) for x in window]"}
{"task_id": 312, "completion_id": 4, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n    N = window_len - 1 if symmetric else window_len\n    n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    if not symmetric:\n        window = window[:-1]\n    return [round(val, 4) for val in window]"}
{"task_id": 312, "completion_id": 5, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len - 1\n        window_len = window_len + 1\n    n = np.arange(window_len)\n    bh_window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    if not symmetric:\n        bh_window = bh_window[:-1]\n    return [round(x, 4) for x in bh_window]"}
{"task_id": 312, "completion_id": 6, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n    n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    return [round(w, 4) for w in window]"}
{"task_id": 312, "completion_id": 7, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if not symmetric:\n        window_len += 1\n    n = np.arange(window_len)\n    N = window_len - 1\n    (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n    bh_window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    if not symmetric:\n        bh_window = bh_window[:-1]\n    return [round(float(val), 4) for val in bh_window]"}
{"task_id": 312, "completion_id": 8, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    if not symmetric:\n        window = window[:-1]\n    return [round(x, 4) for x in window]"}
{"task_id": 312, "completion_id": 9, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n        window_len += 1\n    a = np.array([0.35875, 0.48829, 0.14128, 0.01168])\n    n = np.arange(window_len)\n    window = a[0] - a[1] * np.cos(2 * np.pi * n / N) + a[2] * np.cos(4 * np.pi * n / N) - a[3] * np.cos(6 * np.pi * n / N)\n    if not symmetric:\n        window = window[:-1]\n    return [round(x, 4) for x in window]\nwindow = blackman_harris(8, symmetric=True)"}
{"task_id": 313, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Approximation of the digamma function using recursion and asymptotic expansion.\"\"\"\n    if x < 6:\n        return digamma(x + 1) - 1 / x\n    else:\n        return math.log(x) - 1 / (2 * x) - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    if isinstance(gamma, list):\n        gamma = np.array(gamma)\n    row = gamma[d, :]\n    term1 = digamma(row[t])\n    term2 = digamma(np.sum(row))\n    log_expectation = term1 - term2\n    return round(log_expectation, 4)"}
{"task_id": 313, "completion_id": 1, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Approximate the digamma function using recursion and asymptotic expansion.\n\n    Parameters\n    ----------\n    x : float\n        The input value for the digamma function.\n\n    Returns\n    -------\n    float\n        The approximation of the digamma function applied to x.\n    \"\"\"\n    if x < 6:\n        return digamma(x + 1) - 1 / x\n    term1 = math.log(x)\n    term2 = -1 / (2 * x)\n    term3 = -1 / (12 * x ** 2)\n    term4 = 1 / (120 * x ** 4)\n    term5 = -1 / (252 * x ** 6)\n    return term1 + term2 + term3 + term4 + term5\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the column (component) whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma_val = gamma[d][t]\n    gamma_row_sum = sum(gamma[d])\n    result = digamma(gamma_val) - digamma(gamma_row_sum)\n    return round(result, 4)\ngamma = np.array([[2.0, 1.0, 3.0], [1.5, 2.5, 3.5], [0.5, 0.5, 0.5]])\nd = 0\nt = 1"}
{"task_id": 313, "completion_id": 2, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Compute the digamma function approximation for a given positive x.\"\"\"\n    if x <= 0:\n        raise ValueError('x must be positive for the digamma function.')\n    while x < 6:\n        x += 1\n        value = -1 / x\n    value = math.log(x) - 1 / (2 * x) - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n    return value\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    if isinstance(gamma, list):\n        gamma = np.array(gamma)\n    digamma_gamma_dt = digamma(gamma[d][t])\n    digamma_gamma_d = digamma(np.sum(gamma[d]))\n    expectation = digamma_gamma_dt - digamma_gamma_d\n    return round(expectation, 4)\ngamma = np.array([[2.0, 3.0], [4.0, 5.0]])\nd = 0\nt = 1"}
{"task_id": 313, "completion_id": 3, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Approximate the digamma function for a positive float x.\"\"\"\n    if x <= 5:\n        return digamma(x + 1) - 1 / x\n    return math.log(x) - 0.5 / x - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma_row = gamma[d] if isinstance(gamma, list) else gamma[d, :]\n    gamma_t = gamma_row[t]\n    gamma_sum = sum(gamma_row)\n    result = digamma(gamma_t) - digamma(gamma_sum)\n    return round(result, 4)"}
{"task_id": 313, "completion_id": 4, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Approximates the digamma function using recursion and asymptotic expansion.\"\"\"\n    if x < 6:\n        x += 10\n        for i in range(10):\n            x -= 1\n            x = digamma(x)\n    else:\n        x_reciprocal = 1.0 / x\n        expansion = math.log(x) - x_reciprocal / 2.0\n        expansion -= (12 * x ** 2) ** (-1)\n        expansion += (120 * x ** 4) ** (-1)\n        expansion -= (252 * x ** 6) ** (-1)\n        return expansion\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    if isinstance(gamma, list):\n        row = gamma[d]\n        component = row[t]\n        sum_row = sum(row)\n    else:\n        component = gamma[d, t]\n        sum_row = np.sum(gamma[d, :])\n    result = digamma(component) - digamma(sum_row)\n    return round(result, 4)"}
{"task_id": 313, "completion_id": 5, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Approximate the digamma function using recursion and asymptotic expansion.\"\"\"\n    if x <= 5:\n        return digamma(x + 1) - 1 / x\n    else:\n        return math.log(x) - 0.5 * (1 / x) - 1 / (12 * math.pow(x, 2)) + 1 / (120 * math.pow(x, 4)) - 1 / (252 * math.pow(x, 6))\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n    \n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    if isinstance(gamma, list):\n        gamma = np.array(gamma)\n    digamma_gamma_dt = digamma(gamma[d, t])\n    sum_gamma_d = np.sum(gamma[d, :])\n    digamma_sum_gamma_d = digamma(sum_gamma_d)\n    expectation = digamma_gamma_dt - digamma_sum_gamma_d\n    return round(expectation, 4)"}
{"task_id": 313, "completion_id": 6, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Approximate the digamma function using recursion and asymptotic expansion.\"\"\"\n    N_RECURSION = 6\n    if x < N_RECURSION:\n        return digamma(x + 1) - 1 / x\n    else:\n        return math.log(x) - 1 / (2 * x) - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    if isinstance(gamma, list):\n        gamma = np.array(gamma)\n    component = gamma[d, t]\n    total = np.sum(gamma[d])\n    expected_log = digamma(component) - digamma(total)\n    return round(expected_log, 4)\ngamma = [[3, 2], [2, 3]]\nd = 1\nt = 0"}
{"task_id": 313, "completion_id": 7, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Approximation of the digamma function for positive x.\"\"\"\n    k = 0\n    if x < 6:\n        while x < 6 and k < 100:\n            x += 1\n            k += 1\n        if k == 100:\n            raise OverflowError('Too many steps in digamma recursion.')\n    term1 = math.log(x)\n    term2 = -1 / (2 * x)\n    term3 = -1 / (12 * x ** 2)\n    term4 = 1 / (120 * x ** 4)\n    term5 = -1 / (252 * x ** 6)\n    result = term1 + term2 + term3 + term4 + term5\n    while k > 0:\n        result -= 1 / x\n        x -= 1\n        k -= 1\n    return result\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    if isinstance(gamma, list):\n        gamma = np.array(gamma)\n    row = gamma[d, :]\n    term1 = digamma(row[t])\n    term2 = digamma(sum(row))\n    result = term1 - term2\n    return round(result, 4)\ngamma = [[0.5, 0.75, 1.0], [4.0, 3.0, 2.0], [0.1, 0.3, 0.5]]"}
{"task_id": 313, "completion_id": 8, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Simple implementation of the digamma (psi) function.\"\"\"\n    while x < 6:\n        x += 1\n    u = 1 / (12 * x)\n    y = math.log(x) - 1 / (2 * x) - u + u / 2 - 1 / (30 * x ** 2) + u * u / 3\n    return y\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n    \n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function. External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n    \n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters. All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n    \n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma_array = np.array(gamma)\n    gamma_t = gamma_array[d, t]\n    gamma_sum = np.sum(gamma_array[d, :])\n    result = digamma(gamma_t) - digamma(gamma_sum)\n    return round(result, 4)\ngamma = [[1, 2, 3], [4, 5, 6]]\nd = 0\nt = 1"}
{"task_id": 313, "completion_id": 9, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Implementing the digamma function without using scientific libraries.\"\"\"\n    while x < 6:\n        x += 1\n        x_value = 1.0 / x\n    x_value = math.log(x) - 0.5 / x - 1.0 / (12 * x * x) + 1.0 / (120 * x ** 4) - 1.0 / (252 * x ** 6)\n    return x_value\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n    \n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    if isinstance(gamma, list):\n        gamma = np.array(gamma)\n    gamma_dt = gamma[d, t]\n    sum_gamma_d = np.sum(gamma[d, :])\n    expectation = digamma(gamma_dt) - digamma(sum_gamma_d)\n    return round(expectation, 4)"}
{"task_id": 317, "completion_id": 0, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n    \n    See the task description for the exact required format.\n    \n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n    \n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    ix = max(0, ix)\n    prev_ix = max(0, ix - 1)\n    (prev_prediction, prev_label) = params[prev_ix] if prev_ix < len(params) else ('', '')\n    (curr_prediction, curr_label) = params[ix] if ix < len(params) else ('', '')\n    prev_gold = golds.get(prev_label, '')\n    curr_gold = golds.get(curr_label, '')\n    formatted_str = '------------------------- DEBUG -------------------------\\n'\n    formatted_str += f\"Mine (prev) [{prev_label or '<no label>'}]:\\n{prev_prediction}\\n\\n\"\n    formatted_str += f\"Theirs (prev) [{prev_label or '<no label>'}]:\\n{prev_gold}\\n\\n\\n\"\n    formatted_str += f\"Mine [{curr_label or '<no label>'}]:\\n{curr_prediction}\\n\\n\"\n    formatted_str += f\"Theirs [{curr_label or '<no label>'}]:\\n{curr_gold}{warn_str}\\n\"\n    formatted_str += '----------------------- END DEBUG -----------------------\\n'\n    return formatted_str\nparams = [('It is sunny today.', 'weather'), ('The car is blue.', 'color')]\nix = 1\nwarn_str = ' (WARNING: mismatch)'"}
{"task_id": 317, "completion_id": 1, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\"\"\"\n    prev_ix = max(0, ix - 1)\n    (prev_prediction, prev_label) = params[prev_ix]\n    prev_gold = golds.get(prev_label, 'Label not found')\n    (curr_prediction, curr_label) = params[ix]\n    curr_gold = golds.get(curr_label, 'Label not found')\n    report = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------\\n'\n    return report\nparams = [('my prediction 1', 'label1'), ('my prediction 2', 'label2')]\nix = 1\nwarn_str = ' (WARNING: mismatch)'"}
{"task_id": 317, "completion_id": 2, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    prev_ix = max(0, ix - 1)\n    (prev_prediction, prev_label) = params[prev_ix]\n    (curr_prediction, curr_label) = params[ix]\n    prev_gold = golds.get(prev_label, '<unknown>')\n    curr_gold = golds.get(curr_label, '<unknown>')\n    report = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return report"}
{"task_id": 317, "completion_id": 3, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (curr_prediction, curr_label) = params[ix]\n    (prev_prediction, prev_label) = params[prev_ix]\n    curr_gold = golds[curr_label]\n    prev_gold = golds[prev_label]\n    report = f\"{'-' * 25} DEBUG {'-' * 25}\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n{'-' * 23} END DEBUG {'-' * 23}\\n\"\n    return report\nparams = [('Prediction 1', 'label1'), ('Prediction 2', 'label2'), ('Prediction 3', 'label3')]\ngolds = {'label1': 'Gold 1', 'label2': 'Gold 2', 'label3': 'Gold 3'}\nix = 1\nwarn_str = ' (WARNING: mismatch)'"}
{"task_id": 317, "completion_id": 4, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    header = '-' * 25 + ' DEBUG ' + '-' * 25 + '\\n'\n    footer = '\\n' + '-' * 23 + ' END DEBUG ' + '-' * 23\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    prev_gold = golds.get(prev_label, '')\n    (curr_prediction, curr_label) = params[ix]\n    curr_gold = golds.get(curr_label, '')\n    report = header + f'Mine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\n' + f'Theirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\\n' + f'Mine [{curr_label}]:\\n{curr_prediction}\\n\\n' + f'Theirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n' + footer\n    return report"}
{"task_id": 317, "completion_id": 5, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_i = max(ix - 1, 0)\n    curr_i = ix\n    (prev_prediction, prev_label) = params[prev_i]\n    (curr_prediction, curr_label) = params[curr_i]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    output = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return output"}
{"task_id": 317, "completion_id": 6, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    curr_ix = ix\n    (prev_prediction, prev_label) = params[prev_ix]\n    (curr_prediction, curr_label) = params[curr_ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    report = '------------------------- DEBUG -------------------------\\n'\n    report += f'Mine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\n'\n    report += f'Theirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\\n'\n    report += f'Mine [{curr_label}]:\\n{curr_prediction}\\n\\n'\n    report += f'Theirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n'\n    report += '----------------------- END DEBUG -----------------------'\n    return report\nparams = [('A', 'A_label'), ('B', 'B_label')]\ngolds = {'A_label': 'A_gold', 'B_label': 'B_gold'}\nix = 1\nwarn_str = ' (WARNING: mismatch)'"}
{"task_id": 317, "completion_id": 7, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    header = '-' * 25 + ' DEBUG ' + '-' * 25 + '\\n'\n    footer = '\\n' + '-' * 23 + ' END DEBUG ' + '-' * 23\n    prev_ix = max(0, ix - 1)\n    (prev_pred, prev_label) = params[prev_ix]\n    (curr_pred, curr_label) = params[ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    report = header + f'Mine (prev) [{prev_label}]:\\n{prev_pred}\\n\\n' + f'Theirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\\n' + f'Mine [{curr_label}]:\\n{curr_pred}\\n\\n' + f'Theirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n' + footer\n    return report"}
{"task_id": 317, "completion_id": 8, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    (curr_prediction, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    report = f'------------------------- DEBUG -------------------------\\n'\n    report += f'Mine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\n'\n    report += f'Theirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\\n'\n    report += f'Mine [{curr_label}]:\\n{curr_prediction}\\n\\n'\n    report += f'Theirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n'\n    report += '----------------------- END DEBUG -----------------------\\n'\n    return report\nparams = [('A quick brown fox', 'animal1'), ('jumps over the lazy dog', 'action1')]\ngolds = {'animal1': 'My quick brown fox', 'action1': 'jumps over the lazy dog (WARNING: mismatch)'}\nix = 1"}
{"task_id": 317, "completion_id": 9, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    report = '-' * 25 + ' DEBUG ' + '-' * 25 + '\\n'\n    prev_ix = max(ix - 1, 0)\n    (prev_pred, prev_label) = params[prev_ix]\n    report += f'Mine (prev) [{prev_label}]:\\n{prev_pred}\\n\\n'\n    report += f'Theirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\n'\n    (curr_pred, curr_label) = params[ix]\n    report += f'Mine [{curr_label}]:\\n{curr_pred}\\n\\n'\n    report += f'Theirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n'\n    report += '-' * 23 + ' END DEBUG ' + '-' * 23 + '\\n'\n    return report\nparams = [('Hello, World!', 'greet'), (\"What's your name?\", 'ask_name')]\ngolds = {'greet': 'Hi there!', 'ask_name': 'May I know your name?'}\nix = 1\nwarn_str = ' (WARNING: mismatch)'"}
{"task_id": 318, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    weak_learners = []\n    alpha_list = []\n    for _ in range(n_estimators):\n        min_error = math.inf\n        for feature_idx in range(n_features):\n            thresholds = np.unique(X_train[:, feature_idx])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    pred = polarity * np.sign(X_train[:, feature_idx] - threshold)\n                    weighted_error = np.sum(weights[y_train != pred])\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_polarity = polarity\n                        best_threshold = threshold\n                        best_feature = feature_idx\n        alpha = 0.5 * np.log((1.0 - min_error) / min_error)\n        expon = -alpha * y_train * (best_polarity * np.sign(X_train[:, best_feature] - best_threshold))\n        weights *= np.exp(expon)\n        weights /= np.sum(weights)\n        weak_learners.append((best_feature, best_threshold, best_polarity))\n        alpha_list.append(alpha)\n    predictions = []\n    for x in X_test:\n        result = np.array([alpha * (polarity * np.sign(x[feature] - threshold)) for ((feature, threshold, polarity), alpha) in zip(weak_learners, alpha_list)])\n        predictions.append(np.sign(np.sum(result)))\n    return predictions"}
{"task_id": 318, "completion_id": 1, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n\n    def decision_stump(X, y, weights):\n        \"\"\"Find the best decision stump based on given weights.\"\"\"\n        (m, n) = X.shape\n        min_error = np.inf\n        best_stump = {}\n        best_class_est = np.mat(np.zeros((m, 1)))\n        for i in range(n):\n            thresholds = np.unique(X[:, i])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.ones((m, 1))\n                    if polarity == 1:\n                        predictions[X[:, i] <= threshold] = -1\n                    else:\n                        predictions[X[:, i] > threshold] = -1\n                    errors = np.mat(np.ones(m, 1))\n                    errors[predictions == y] = 0\n                    weighted_error = errors.T * weights\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump['feature'] = i\n                        best_stump['threshold'] = threshold\n                        best_stump['polarity'] = polarity\n                        best_class_est = predictions\n        return (best_stump, min_error, best_class_est)\n    (n_samples, n_features) = X_train.shape\n    weights = np.array([1 / n_samples] * n_samples)\n    base_models = []\n    for _ in range(n_estimators):\n        (stump_info, error, stump_predictions) = decision_stump(X_train, y_train, weights)\n        alpha = 0.5 * np.log((1 - error) / max(error, 1e-16))\n        stump_info['alpha'] = alpha\n        base_models.append(stump_info)\n        weights *= np.exp(-alpha * y_train * stump_predictions)\n        weights /= sum(weights)\n\n    def predict_sample(sample):\n        \"\"\"Predict the label of a single sample.\"\"\"\n        stump_sum = sum((alpha * sample[stump['feature']] * stump['polarity'] for (stump, alpha) in zip(base_models, [stump['alpha'] for stump in base_models])))\n        return 1 if stump_sum > 0 else -1\n    predictions = [predict_sample(test_sample) for test_sample in X_test]\n    return predictions"}
{"task_id": 318, "completion_id": 2, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    estimators = []\n    estimator_weights = []\n    for _ in range(n_estimators):\n        best = {}\n        for j in range(n_features):\n            thresholds = np.unique(X_train[:, j])\n            for t in thresholds:\n                for p in [-1, 1]:\n                    prediction = p * np.sign(X_train[:, j] - t)\n                    error = sum(weights[y_train != prediction])\n                    if not best or error < best['error']:\n                        best = {'error': error, 'feature': j, 'threshold': t, 'polarity': p}\n        error = best['error']\n        alpha = 0.5 * np.log((1 - error) / error) if error != 0 else np.inf\n        estimators.append((best['feature'], best['threshold'], best['polarity']))\n        estimator_weights.append(alpha)\n        prediction = best['polarity'] * np.sign(X_train[:, best['feature']] - best['threshold'])\n        weights *= np.exp(-alpha * y_train * prediction)\n        weights /= np.sum(weights)\n\n    def predict_single(x):\n        \"\"\"Predict a single sample\"\"\"\n        return sum((w * p * np.sign(x[f] - t) for ((f, t, p), w) in zip(estimators, estimator_weights)))\n    predictions = np.sign([predict_single(x) for x in X_test]).astype(int)\n    return predictions.tolist()\nX_train = np.array([[1, 2], [2, 1], [3, 4], [4, 3]])\ny_train = np.array([-1, -1, 1, 1])\nX_test = np.array([[1, 1], [3, 3]])\npredictions = adaboost_predict(X_train, y_train, X_test, n_estimators=50)"}
{"task_id": 318, "completion_id": 3, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    D_weights = np.full(n_samples, 1 / n_samples)\n    weak_learners = []\n    for m in range(n_estimators):\n        min_error = float('inf')\n        best_stump = None\n        for feature in range(n_features):\n            feature_values = X_train[:, feature]\n            thresholds = np.unique(feature_values)\n            for p in [-1, 1]:\n                for t in thresholds:\n                    pred = p * np.sign(feature_values - t)\n                    error = sum((w for (w, y, yp) in zip(D_weights, y_train, pred) if y != yp))\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {'feature': feature, 'polarity': p, 'threshold': t}\n        epsilon_m = min(min_error, 1 - min_error)\n        alpha_m = 0.5 * np.log((1 - epsilon_m) / epsilon_m)\n        weak_learners.append((best_stump, alpha_m))\n        correct = y_train == best_stump['polarity'] * np.sign(X_train[:, best_stump['feature']] - best_stump['threshold'])\n        D_weights = D_weights * np.exp(-alpha_m * y_train * correct)\n        D_weights = D_weights / np.sum(D_weights)\n\n    def predict_single(x):\n        \"\"\"Predict the class of a single sample.\"\"\"\n        result = sum((alpha * stump['polarity'] * np.sign(x[stump['feature']] - stump['threshold']) for (stump, alpha) in weak_learners))\n        return np.sign(result)\n    predictions = [predict_single(sample) for sample in X_test]\n    return predictions"}
{"task_id": 318, "completion_id": 4, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    D = np.full(n_samples, 1 / n_samples)\n    estimators = []\n    weights = []\n\n    def weighted_error(y_true, y_pred, weights):\n        return np.sum(weights[y_true != y_pred])\n\n    def train_weak_learner(D):\n        best = (None, None, None, float('inf'))\n        for j in range(n_features):\n            thresholds = np.unique(X_train[:, j])\n            for t in thresholds:\n                for polarity in [-1, 1]:\n                    y_pred = polarity * np.sign(X_train[:, j] - t)\n                    error = weighted_error(y_train, y_pred, D)\n                    if error < best[3]:\n                        best = (j, t, polarity, error)\n        return (*best[:3], math.log((1 - best[3]) / best[3]) / 2)\n    for _ in range(n_estimators):\n        (j, t, p, alpha) = train_weak_learner(D)\n        estimators.append((j, t, p))\n        weights.append(alpha)\n        y_pred = p * np.sign(X_train[:, j] - t)\n        D *= np.exp(-alpha * y_train * y_pred)\n        D /= np.sum(D)\n\n    def predict(x):\n        score = sum((w * p * np.sign(x[j] - t) for ((j, t, p), w) in zip(estimators, weights)))\n        return int(np.sign(score))\n    return [predict(x) for x in X_test]"}
{"task_id": 318, "completion_id": 5, "solution": "import math\nimport numpy as np\ndef decision_stump_train(X, y, w):\n    \"\"\"Train a single decision stump on the weighted data.\"\"\"\n    (n_samples, n_features) = X.shape\n    best_stump = {'feature': None, 'threshold': None, 'polarity': 1, 'error': float('inf')}\n    for feature in range(n_features):\n        unique_vals = np.unique(X[:, feature])\n        for threshold in unique_vals:\n            for polarity in [-1, 1]:\n                predictions = polarity * np.sign(X[:, feature] - threshold)\n                error = sum(w[y != predictions])\n                if error < best_stump['error']:\n                    best_stump['feature'] = feature\n                    best_stump['threshold'] = threshold\n                    best_stump['polarity'] = polarity\n                    best_stump['error'] = error\n    best_stump['predictions'] = best_stump['polarity'] * np.sign(X[:, best_stump['feature']] - best_stump['threshold'])\n    return (best_stump, best_stump['error'])\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\"\"\"\n    (n_samples, _) = X_train.shape\n    w = np.full(n_samples, 1 / n_samples)\n    estimators = []\n    alpha_values = []\n    for _ in range(n_estimators):\n        (stump, error) = decision_stump_train(X_train, y_train, w)\n        if error > 0.5:\n            continue\n        alpha = 0.5 * np.log((1 - error) / error)\n        w = w * np.exp(-alpha * y_train * stump['predictions'])\n        w = w / np.sum(w)\n        estimators.append(stump)\n        alpha_values.append(alpha)\n    test_predictions = np.zeros(X_test.shape[0])\n    for (alpha, stump) in zip(alpha_values, estimators):\n        predictions = alpha * stump['polarity'] * np.sign(X_test[:, stump['feature']] - stump['threshold'])\n        test_predictions += predictions\n    return list(map(int, np.sign(test_predictions)))"}
{"task_id": 318, "completion_id": 6, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weak_learners = []\n    alphas = []\n    weights = np.full(n_samples, 1 / n_samples)\n    for m in range(n_estimators):\n        best_error = float('inf')\n        best_theta = 0\n        best_feature = 0\n        best_polarity = 1\n        for j in range(n_features):\n            features = X_train[:, j]\n            sorted_features = sorted(set(features))\n            for t in sorted_features:\n                for p in [-1, 1]:\n                    pred = p * np.sign(features - t)\n                    error = sum((w for (x, y, w) in zip(pred, y_train, weights) if x != y))\n                    if error < best_error:\n                        best_error = error\n                        best_theta = t\n                        best_feature = j\n                        best_polarity = p\n        alpha = 0.5 * math.log((1 - best_error) / max(best_error, 1e-10))\n        alphas.append(alpha)\n        pred = best_polarity * np.sign(X_train[:, best_feature] - best_theta)\n        for i in range(n_samples):\n            weights[i] *= math.exp(-alpha * y_train[i] * pred[i])\n        weights /= weights.sum()\n        weak_learners.append((best_feature, best_theta, best_polarity))\n\n    def stump_predict(sample, stump):\n        (feature_idx, theta, polarity) = stump\n        return polarity * np.sign(sample[feature_idx] - theta)\n    predictions = np.zeros(X_test.shape[0])\n    for (alpha, learner) in zip(alphas, weak_learners):\n        predictions += alpha * list(map(lambda x: stump_predict(x, learner), X_test))\n    return [1 if pred > 0 else -1 for pred in predictions]"}
{"task_id": 318, "completion_id": 7, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples = X_train.shape[0]\n    weights = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    for _ in range(n_estimators):\n        best = None\n        best_error = float('inf')\n        for j in range(X_train.shape[1]):\n            for t in np.unique(X_train[:, j]):\n                for p in [-1, 1]:\n                    pred = p * np.sign(X_train[:, j] - t)\n                    e = np.sum(weights[pred != y_train])\n                    if e < best_error:\n                        best = {'j': j, 't': t, 'p': p, 'e': e}\n                        best_error = e\n        alpha = 0.5 * np.log((1 - best_error) / best_error)\n        pred = best['p'] * np.sign(X_train[:, best['j']] - best['t'])\n        weights *= np.exp(-alpha * y_train * pred)\n        weights /= np.sum(weights)\n        classifiers.append({'decision_stump': best, 'alpha': alpha})\n    predictions = np.zeros(X_test.shape[0])\n    for clf in classifiers:\n        ds = clf['decision_stump']\n        pred = ds['p'] * np.sign(X_test[:, ds['j']] - ds['t'])\n        predictions += clf['alpha'] * pred\n    predictions = np.sign(predictions)\n    return predictions.tolist()"}
{"task_id": 318, "completion_id": 8, "solution": "import math\nimport numpy as np"}
{"task_id": 318, "completion_id": 9, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    estimators = []\n    for m in range(n_estimators):\n        best_error = 1.0\n        best_estimator = None\n        for j in range(n_features):\n            for t in np.unique(X_train[:, j]):\n                for p in [-1, 1]:\n                    h = {'j': j, 't': t, 'p': p}\n                    pred = np.sign(h['p'] * (X_train[:, h['j']] - h['t']))\n                    e = np.sum(weights[pred != y_train])\n                    if e < best_error:\n                        best_error = e\n                        best_estimator = h\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n        best_estimator['alpha'] = alpha\n        estimators.append(best_estimator)\n        pred = np.sign(best_estimator['p'] * (X_train[:, best_estimator['j']] - best_estimator['t']))\n        weights *= np.exp(-alpha * y_train * pred)\n        weights /= np.sum(weights)\n    test_preds = []\n    for x in X_test:\n        F = 0.0\n        for est in estimators:\n            F += est['alpha'] * np.sign(est['p'] * (x[est['j']] - est['t']))\n        test_preds.append(1 if F > 0 else -1)\n    return test_preds"}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    frequencies = np.fft.fftfreq(N, d=1 / fs)\n    rounded_frequencies = [round(f, 4) for f in frequencies]\n    if positive_only:\n        positive_frequencies = rounded_frequencies[:np.ceil(N / 2).astype(int)]\n        return positive_frequencies.tolist()\n    else:\n        return rounded_frequencies.tolist()"}
{"task_id": 329, "completion_id": 1, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    if positive_only:\n        freqs = np.fft.rfftfreq(N, d=1 / fs)\n    else:\n        freqs = np.fft.fftfreq(N, d=1 / fs)\n    rounded_freqs = [round(freq, 4) for freq in freqs]\n    return rounded_freqs"}
{"task_id": 329, "completion_id": 2, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    delta_f = fs / N\n    if positive_only:\n        positive_bins = np.arange(0, N // 2 + 1) * delta_f\n        return [round(freq, 4) for freq in positive_bins.tolist()]\n    else:\n        freqs = np.fft.fftfreq(N, 1 / fs)\n        sorted_freqs = np.sort(freqs)\n        return [round(freq, 4) for freq in sorted_freqs.tolist()]"}
{"task_id": 329, "completion_id": 3, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    if positive_only:\n        frequency_bins = np.fft.rfftfreq(N, 1 / fs)\n    else:\n        frequency_bins = np.fft.fftfreq(N, 1 / fs)\n    frequency_bins = np.around(frequency_bins, 4).tolist()\n    return frequency_bins"}
{"task_id": 329, "completion_id": 4, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n    \n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n    \n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    bin_centers = np.fft.fftfreq(n=N, d=1 / fs)\n    if positive_only:\n        bin_centers = bin_centers[:np.ceil(N / 2)]\n    return [round(freq, 4) for freq in bin_centers.tolist()]"}
{"task_id": 329, "completion_id": 5, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n    \n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When True return only the non-negative frequency bins; when\n        False return all N bins.  Default is True.\n    \n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when N or fs is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    bin_frequencies = np.fft.fftfreq(N, 1 / fs)\n    if positive_only:\n        bin_frequencies = bin_frequencies[:np.ceil(N / 2).astype(int)]\n    return np.around(bin_frequencies, decimals=4).tolist()"}
{"task_id": 329, "completion_id": 6, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    if positive_only:\n        freqs = np.fft.rfftfreq(N, 1 / fs)\n    else:\n        freqs = np.fft.fftfreq(N, 1 / fs)\n    return [round(f, 4) for f in freqs.tolist()]"}
{"task_id": 329, "completion_id": 7, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    dft_freqs = np.fft.fftfreq(N, d=1 / fs)\n    if positive_only:\n        freqs = np.round(dft_freqs[:N // 2 + 1], decimals=4).tolist()\n    else:\n        freqs = np.round(dft_freqs, decimals=4).tolist()\n    return freqs"}
{"task_id": 329, "completion_id": 8, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    df = fs / N\n    if positive_only:\n        bins = [k * df for k in range(N // 2 + N % 2)]\n    else:\n        bins = [k * df for k in range(N // 2, -N // 2, -1)]\n        if N % 2 == 0:\n            bins.pop(-1)\n    bins = [round(freq, 4) for freq in bins]\n    return bins"}
{"task_id": 329, "completion_id": 9, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    bin_frequencies = np.fft.fftfreq(N, 1 / fs)\n    if positive_only:\n        bin_frequencies = bin_frequencies[:N // 2 + 1]\n    return [round(freq, 4) for freq in bin_frequencies.tolist()]"}
{"task_id": 331, "completion_id": 0, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    oob_predictions = np.where(oob_mask, predictions, np.nan)\n    oob_mean_predictions = np.nanmean(oob_predictions, axis=1)\n    has_oob_prediction = ~np.isnan(oob_mean_predictions)\n    if not np.any(has_oob_prediction):\n        return -1\n    mse = np.square(y_true[has_oob_prediction] - oob_mean_predictions[has_oob_prediction])\n    oob_mse = np.mean(mse)\n    return np.round(oob_mse, 4) if not np.isnan(oob_mse) else -1\ny_true = [10, 8, 12, 15]\npredictions = [[11, 12, 10], [7, 8, 8], [13, 11, 14], [14, 16, 15]]\noob_mask = [[True, False, True], [True, True, False], [False, False, True], [False, True, False]]\nmse = oob_mse(y_true, predictions, oob_mask)"}
{"task_id": 331, "completion_id": 1, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    has_oob_predictions = np.any(oob_mask, axis=1)\n    if not np.any(has_oob_predictions):\n        return -1\n    y_true = y_true[has_oob_predictions]\n    predictions = predictions[has_oob_predictions]\n    oob_mask = oob_mask[has_oob_predictions]\n    oob_pred = []\n    for (pred_row, mask_row) in zip(predictions, oob_mask):\n        if np.any(mask_row):\n            oob_pred.append(np.mean(pred_row[mask_row]))\n        else:\n            oob_pred.append(np.nan)\n    oob_pred = np.array(oob_pred)\n    oob_mse = np.nanmean((y_true - oob_pred) ** 2)\n    return round(oob_mse, 4)\ny_true = [1, 2, 3]\npredictions = [[0.9, 1.1, 1], [1.9, 2.1, 2], [3, 3, 3]]\noob_mask = [[1, 1, 0], [1, 0, 1], [0, 1, 1]]"}
{"task_id": 331, "completion_id": 2, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    oob_predictions = []\n    oob_y_true = []\n    for i in range(len(y_true)):\n        sample_oob_predictions = predictions[i][oob_mask[i]]\n        if len(sample_oob_predictions) > 0:\n            sample_oob_mean = np.mean(sample_oob_predictions)\n            oob_predictions.append(sample_oob_mean)\n            oob_y_true.append(y_true[i])\n    oob_predictions = np.array(oob_predictions)\n    oob_y_true = np.array(oob_y_true)\n    if len(oob_predictions) == 0:\n        return -1\n    squared_errors = (oob_y_true - oob_predictions) ** 2\n    mse = np.mean(squared_errors)\n    return round(mse, 4)\ny_true = np.array([1.0, 2.0, 3.0])\npredictions = np.array([[1.2, 0.9], [2.1, 1.9], [3.2, 3.1]])\noob_mask = np.array([[1, 0], [0, 1], [1, 1]])"}
{"task_id": 331, "completion_id": 3, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    if len(y_true) != predictions.shape[0]:\n        raise ValueError('The number of true target values must match the number of samples in predictions')\n    valid_mask = np.any(oob_mask, axis=1)\n    if not np.any(valid_mask):\n        return -1.0\n    y_true = y_true[valid_mask]\n    predictions = predictions[valid_mask]\n    oob_mask = oob_mask[valid_mask]\n    oob_averages = np.average(predictions, weights=oob_mask, axis=1)\n    squared_errors = (y_true - oob_averages) ** 2\n    mse = np.mean(squared_errors)\n    return round(mse, 4)"}
{"task_id": 331, "completion_id": 4, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    if isinstance(y_true, list):\n        y_true = np.array(y_true)\n    if isinstance(predictions, list):\n        predictions = np.array(predictions)\n    if isinstance(oob_mask, list):\n        oob_mask = np.array(oob_mask)\n    n_samples = y_true.shape[0]\n    squared_errors = np.full(n_samples, np.nan)\n    for i in range(n_samples):\n        oob_preds = predictions[i, oob_mask[i, :]]\n        if oob_preds.size > 0:\n            avg_oob_pred = np.mean(oob_preds)\n            squared_errors[i] = (avg_oob_pred - y_true[i]) ** 2\n    oob_samples = ~np.isnan(squared_errors)\n    if np.any(oob_samples):\n        oob_mse_value = np.nanmean(squared_errors)\n    else:\n        oob_mse_value = -1\n    return round(oob_mse_value, 4) if oob_mse_value != -1 else oob_mse_value\ny_true = np.array([1.0, 2.0, 3.0, 4.0])\npredictions = np.array([[1.3, 2.5, 1.1, 3.0], [1.5, 2.0, 3.5, 1.8], [2.8, 3.8, 2.9, 4.2], [4.1, 4.0, 3.8, 3.9]])\noob_mask = np.array([[0, 1, 0, 1], [1, 0, 1, 0], [0, 0, 1, 1], [1, 1, 0, 0]], dtype=bool)"}
{"task_id": 331, "completion_id": 5, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    has_oob = np.any(oob_mask, axis=1)\n    if not np.any(has_oob):\n        return -1\n    squared_errors = []\n    for i in np.where(has_oob)[0]:\n        oob_preds = predictions[i][oob_mask[i] == True]\n        if oob_preds.size > 0:\n            avg_oob_pred = np.mean(oob_preds)\n            squared_error = (avg_oob_pred - y_true[i]) ** 2\n            squared_errors.append(squared_error)\n    if squared_errors:\n        mse = np.mean(squared_errors)\n    else:\n        mse = -1\n    return round(mse, 4)\ny_true = np.array([1, 2, 3])\npredictions = np.array([[1.1, 1.2, 1.3], [1.9, 2.1, 2.3], [3.1, 3.05, 3.0]])\noob_mask = np.array([[0, 1, 1], [1, 0, 1], [1, 1, 0]])"}
{"task_id": 331, "completion_id": 6, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    oob_count = np.sum(oob_mask, axis=1)\n    valid_indices = np.where(oob_count > 0)[0]\n    if len(valid_indices) == 0:\n        return -1\n    valid_y_true = y_true[valid_indices]\n    valid_predictions = predictions[valid_indices]\n    valid_oob_mask = oob_mask[valid_indices]\n    oob_prediction_sum = np.sum(valid_predictions * valid_oob_mask, axis=1)\n    oob_prediction_mean = oob_prediction_sum / oob_count[valid_indices]\n    squared_errors = (valid_y_true - oob_prediction_mean) ** 2\n    oob_mse = np.mean(squared_errors)\n    return round(oob_mse, 4)\ny_true = [2.0, 3.0, 4.0]\npredictions = [[2.5, 2.0, 1.5], [3.5, 3.0, 4.5], [4.5, 5.0, 3.5]]\noob_mask = [[0, 1, 1], [1, 0, 0], [1, 1, 0]]"}
{"task_id": 331, "completion_id": 7, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n    \n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    oob_predictions = predictions[oob_mask]\n    valid_samples = np.any(oob_mask, axis=1)\n    if not np.any(valid_samples):\n        return -1\n    avg_oob_predictions = np.nanmean(oob_predictions.reshape(-1, predictions.shape[1]), axis=1)\n    squared_errors = (y_true[valid_samples] - avg_oob_predictions) ** 2\n    return round(np.mean(squared_errors), 4)\ny_true = [1.0, 2.0, 3.0, 4.0, 5.0]\npredictions = [[1.1, 1.2, 0.9], [2.2, 1.9, 2.1], [3.0, 3.3, 3.1], [3.8, 4.2, 4.3], [4.9, 5.1, 5.2]]\noob_mask = [[0, 1, 1], [1, 0, 1], [1, 1, 0], [1, 1, 1], [0, 1, 1]]"}
{"task_id": 331, "completion_id": 8, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    has_oob_predictions = np.any(oob_mask, axis=1)\n    if not np.any(has_oob_predictions):\n        return -1\n    n_samples = y_true.shape[0]\n    oob_mse_sum = 0\n    count = 0\n    for i in range(n_samples):\n        if has_oob_predictions[i]:\n            oob_predictions = predictions[i][oob_mask[i] == 1]\n            if oob_predictions.size > 0:\n                avg_oob_prediction = np.mean(oob_predictions)\n                sq_error = (y_true[i] - avg_oob_prediction) ** 2\n                oob_mse_sum += sq_error\n                count += 1\n    oob_mse = oob_mse_sum / count if count > 0 else -1\n    return round(oob_mse, 4)\ny_true = np.array([1.0, 2.0, 3.0])\npredictions = np.array([[1.5, 1.2, 1.1], [2.1, 1.8, 2.3], [3.5, 3.1, 2.6]])\noob_mask = np.array([[0, 1, 1], [1, 0, 1], [1, 1, 0]])"}
{"task_id": 331, "completion_id": 9, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : np.ndarray\n        True target values, shape (n_samples,).\n    predictions : np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : np.ndarray\n        Boolean matrix indicating whether a prediction was obtained from an out-of-bag tree (True) or not (False), same shape as *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the OOB estimate cannot be computed.\n    \"\"\"\n    (n_samples, n_estimators) = predictions.shape\n    squared_errors = []\n    for i in range(n_samples):\n        oob_preds = predictions[i, oob_mask[i]]\n        if len(oob_preds) == 0:\n            continue\n        oob_avg = np.mean(oob_preds)\n        squared_error = (y_true[i] - oob_avg) ** 2\n        squared_errors.append(squared_error)\n    if len(squared_errors) == 0:\n        return -1\n    else:\n        oob_mse = np.mean(squared_errors)\n        return round(oob_mse, 4)\ny_true = np.array([1.0, 2.0, 3.0, 4.0, 5.0])\npredictions = np.array([[0.8, 1.0, 1.2], [1.8, 2.0, 2.2], [2.8, 3.0, 3.2], [3.8, 4.0, 4.2], [4.8, 5.0, 5.2]])\noob_mask = np.array([[False, True, True], [True, False, True], [True, True, False], [False, True, True], [True, False, True]])"}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import List\ndef build_fp_tree(transactions: List[List[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_support = Counter()\n    for transaction in transactions:\n        item_support += Counter(set(transaction))\n    frequent_items = {item for (item, support) in item_support.items() if support >= min_support}\n    frequent_items = sorted(frequent_items, key=lambda x: (-item_support[x], x))\n    root_node = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        transaction = [item for item in transaction if item in frequent_items]\n        transaction = sorted(transaction, key=lambda x: frequent_items.index(x))\n        current_node = root_node\n        for item in transaction:\n            if item not in current_node['children']:\n                current_node['children'][item] = {'support': 0, 'children': {}}\n            current_node = current_node['children'][item]\n            current_node['support'] += 1\n    return root_node"}
{"task_id": 332, "completion_id": 1, "solution": "from collections import Counter\nfrom typing import List\ndef build_fp_tree(transactions: List[List[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_support = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: count for (item, count) in item_support.items() if count >= min_support}\n    ordered_items = sorted(frequent_items.keys(), key=lambda x: (-frequent_items[x], x))\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        filtered_transaction.sort(key=lambda x: ordered_items.index(x) if x in ordered_items else float('inf'))\n        current_node = root\n        for item in filtered_transaction:\n            if item not in current_node['children']:\n                current_node['children'][item] = {'support': 0, 'children': {}}\n            current_node = current_node['children'][item]\n            current_node['support'] += 1\n    return root"}
{"task_id": 332, "completion_id": 2, "solution": "from collections import Counter\nfrom typing import List\ndef build_fp_tree(transactions: List[List[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n    \n    Parameters\n    ----------\n    transactions : List[List[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n    \n    Returns\n    -------\n    dict\n        The root node of the FP-Tree. Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_counts = Counter((item for transaction in transactions for item in set(transaction)))\n    items_to_keep = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    items_to_keep = dict(sorted(items_to_keep.items(), key=lambda x: (-x[1], x[0])))\n    filtered_transactions = [[item for item in set(transaction) if item in items_to_keep] for transaction in transactions]\n    sorted_transactions = [[item for item in transaction if item in items_to_keep] for transaction in filtered_transactions]\n    fp_tree = {'support': 0, 'children': {}}\n\n    def insert_transaction(transaction, tree):\n        \"\"\"Recursively insert a single transaction into the fp_tree.\"\"\"\n        if transaction:\n            (item, *rest) = transaction\n            child_tree = tree['children'].setdefault(item, {'support': 0, 'children': {}})\n            child_tree['support'] += 1\n            insert_transaction(rest, child_tree)\n    for transaction in sorted_transactions:\n        insert_transaction(transaction, fp_tree)\n    return fp_tree\ntransactions = [['a', 'b', 'c'], ['b', 'c', 'd'], ['a', 'c', 'b'], ['a', 'b', 'c']]\nmin_support = 2"}
{"task_id": 332, "completion_id": 3, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    item_counts = Counter()\n    for transaction in transactions:\n        item_counts.update(set(transaction))\n    frequent_items = {item for (item, count) in item_counts.items() if count >= min_support}\n    ordered_items = sorted(frequent_items, key=lambda x: (-item_counts[x], x))\n    tree = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        filtered_ordered_transaction = [item for item in ordered_items if item in transaction]\n        update_tree(tree, filtered_ordered_transaction)\n    return tree\ntransactions = [['r', 'z', 'h', 'j', 'p'], ['z', 'y', 'x', 'w', 'v', 'u', 't', 's'], ['z'], ['r', 'x', 'n', 'o', 's'], ['y', 'r', 'x', 'z', 'q', 't', 'p'], ['y', 'z', 'x', 'e', 'q', 's', 't', 'm']]\nmin_support = 3"}
{"task_id": 332, "completion_id": 4, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_support = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: support for (item, support) in item_support.items() if support >= min_support}\n    sorted_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n    global_ordering = {item: i for (i, (item, _)) in enumerate(sorted_items)}\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        ordered_items = [item for item in transaction if item in frequent_items]\n        ordered_items.sort(key=lambda x: global_ordering[x])\n        current = root\n        for item in ordered_items:\n            if item not in current['children']:\n                current['children'][item] = {'support': 0, 'children': {}}\n            current['children'][item]['support'] += 1\n            current = current['children'][item]\n    return root\ntransactions = [['a', 'b', 'c', 'd'], ['a', 'b', 'd', 'e'], ['a', 'b', 'c', 'd', 'f'], ['b', 'c', 'd', 'g']]\nmin_support = 2"}
{"task_id": 332, "completion_id": 5, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    root = {'support': 0, 'children': {}}\n    item_supports = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: freq for (item, freq) in item_supports.items() if freq >= min_support}\n    sorted_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n    for transaction in transactions:\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        process_transaction(filtered_transaction, root, sorted_items)\n    return root\ndef process_transaction(transaction: list[str], root: dict, sorted_items: list[tuple[str, int]]) -> None:\n    if not transaction:\n        return\n    node = root\n    for (item, _) in sorted_items:\n        if item in transaction:\n            if item not in node['children']:\n                node['children'][item] = {'support': 0, 'children': {}}\n            node['children'][item]['support'] += 1\n            node = node['children'][item]\n            process_transaction(transaction[transaction.index(item) + 1:], node, sorted_items)"}
{"task_id": 332, "completion_id": 6, "solution": "from collections import Counter\nfrom typing import List\ndef build_fp_tree(transactions: List[List[str]], min_support: int) -> dict:\n    item_counts = Counter((item for transaction in transactions for item in set(transaction)))\n    item_counts = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    sorted_items = sorted(item_counts.items(), key=lambda x: (-x[1], x[0]))\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        filtered_transaction = [item for item in transaction if item in item_counts]\n        filtered_transaction.sort(key=lambda x: sorted_items.index((x, item_counts[x])))\n        current_node = root\n        for item in filtered_transaction:\n            if item not in current_node['children']:\n                current_node['children'][item] = {'support': 0, 'children': {}}\n            current_node['children'][item]['support'] += 1\n            current_node = current_node['children'][item]\n    return root"}
{"task_id": 332, "completion_id": 7, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    all_items = [item for transaction in transactions for item in transaction]\n    item_freq = Counter(all_items)\n    frequent_items = {item: freq for (item, freq) in item_freq.items() if freq >= min_support}\n    sorted_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n    frequent_transactions = [[item for item in transaction if item in frequent_items] for transaction in transactions]\n    sorted_transactions = [sorted(freq_trans, key=lambda x: (sorted_items.index((x, frequent_items[x])), x)) for freq_trans in frequent_transactions]\n    root = {'support': 0, 'children': {}}\n\n    def add_transaction_to_tree(node, transaction):\n        if transaction:\n            item = transaction[0]\n            if item not in node['children']:\n                node['children'][item] = {'support': 0, 'children': {}}\n            node['children'][item]['support'] += 1\n            if len(transaction) > 1:\n                add_transaction_to_tree(node['children'][item], transaction[1:])\n    for transaction in sorted_transactions:\n        if transaction:\n            add_transaction_to_tree(root, transaction)\n    return root\ntransactions = [['r', 'z', 'h', 'j', 'p'], ['z', 'y', 'x', 'w', 'v', 'u', 't', 's'], ['z'], ['r', 'x', 'n', 'o', 's'], ['y', 'r', 'x', 'z', 'q', 't', 'p'], ['y', 'z', 'x', 'e', 'q', 's', 't', 'm']]\nmin_support = 2"}
{"task_id": 332, "completion_id": 8, "solution": "from collections import Counter\nimport pprint\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_counts = Counter([item for transaction in transactions for item in transaction])\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    ordered_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        transaction = [item for item in transaction if item in frequent_items]\n        transaction.sort(key=lambda x: (ordered_items.index((x, frequent_items[x])), x))\n        current_node = root\n        for item in transaction:\n            current_child = current_node['children'].setdefault(item, {'support': 0, 'children': {}})\n            current_child['support'] += 1\n            current_node = current_child\n    return root\ntrans = [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'b', 'e', 'd'], ['a', 'b', 'e', 'd'], ['b', 'c', 'd', 'e'], ['b', 'c', 'd'], ['b', 'c', 'd'], ['b', 'c', 'd'], ['b', 'c', 'd', 'e']]\nmin_support = 3\nroot = build_fp_tree(trans, min_support)"}
{"task_id": 332, "completion_id": 9, "solution": "from collections import Counter\nimport pprint\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_support = Counter((item for transaction in transactions for item in set(transaction)))\n    frequent_items = {item: support for (item, support) in item_support.items() if support >= min_support}\n    if not frequent_items:\n        return {'support': 0, 'children': {}}\n    sorted_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n    global_ordering = {item: i for (i, (item, _)) in enumerate(sorted_items)}\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        filtered_transaction = sorted((item for item in set(transaction) if item in global_ordering), key=global_ordering.get)\n        if filtered_transaction:\n            current_node = root\n            current_node['support'] += 1\n            for item in filtered_transaction:\n                if item not in current_node['children']:\n                    current_node['children'][item] = {'support': 0, 'children': {}}\n                current_node = current_node['children'][item]\n                current_node['support'] += 1\n    return root\ntransactions = [['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'd'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd', 'f'], ['a', 'b', 'd']]\nmin_support = 2"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(X, Y=None, c0=0):\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is not None:\n        Y = np.array(Y, dtype=float)\n    else:\n        Y = X\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T) + c0\n    return np.round(K, 4).tolist()\nX = [[1, 2], [2, 3], [3, 4]]\nY = [[1, 1], [0, 1]]"}
{"task_id": 336, "completion_id": 1, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n    \n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n    \n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X) if not isinstance(X, np.ndarray) else X\n    Y = np.array(Y) if Y is not None and (not isinstance(Y, np.ndarray)) else Y\n    if Y is None:\n        Y = X\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    kernel_matrix = []\n    for x in X:\n        row = []\n        for y in Y:\n            dot_product = np.dot(x, y) + c0\n            row.append(round(dot_product, 4))\n        kernel_matrix.append(row)\n    return kernel_matrix\nX = [[1, 2, 3]]\nY = [[4, 5]]\nc0 = 1"}
{"task_id": 336, "completion_id": 2, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is not None:\n        Y = np.array(Y, dtype=float)\n    else:\n        Y = X\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T) + c0\n    return [list(map(lambda x: round(x, 4), row)) for row in K.tolist()]\nX = [[1, 2], [3, 4], [5, 6]]\nY = [[2, 2], [4, 4]]\nc0 = 1.5"}
{"task_id": 336, "completion_id": 3, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T) + c0\n    K_round = np.round(K, decimals=4).tolist()\n    return K_round\nX = [[1, 2], [3, 4], [5, 6]]\nY = [[1, 2, 3], [4, 5, 6]]"}
{"task_id": 336, "completion_id": 4, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = X @ Y.T + c0\n    K = np.round(K, decimals=4).tolist()\n    return K\nX = [[1, 2], [3, 4]]\nY = [[5, 6], [7, 8]]\nc0 = 1"}
{"task_id": 336, "completion_id": 5, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        Y = X.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is not None:\n        Y = np.array(Y, dtype=float)\n    else:\n        Y = X\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T) + c0\n    K_rounded = np.round(K, 4)\n    return K_rounded.tolist()"}
{"task_id": 336, "completion_id": 6, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T) + c0\n    K = np.round(K, decimals=4)\n    return K.tolist()\nX = [[1, 2], [3, 4]]\nY = [[5, 6], [7, 8]]\nc0 = 1\nK = linear_kernel(X, Y, c0)"}
{"task_id": 336, "completion_id": 7, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n    if Y is None:\n        Y_np = X_np\n    else:\n        Y_np = np.array(Y, dtype=float)\n    if X_np.shape[1] != Y_np.shape[1]:\n        return -1\n    K = np.dot(X_np, Y_np.T) + c0\n    kernel_matrix = [[round(val, 4) for val in row] for row in K.tolist()]\n    return kernel_matrix"}
{"task_id": 336, "completion_id": 8, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = X @ Y.T + c0\n    return np.round(K, 4).tolist()\nX = [[1, 2], [3, 4], [5, 6]]\nY = [[6, 5], [4, 3], [2, 1]]"}
{"task_id": 336, "completion_id": 9, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X)\n    if Y is not None:\n        Y = np.array(Y)\n    else:\n        Y = X\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T) + c0\n    K = [[round(float(j), 4) for j in i] for i in K.tolist()]\n    return K"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"\n    Perform one Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad: Current gradient \u2207\u03b8 (same shape as *param*).\n        t: Time-step counter starting at 1.\n        m: First moment estimate from the previous step (same shape).\n        v: Second moment estimate from the previous step (same shape).\n        lr: Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps: Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) as\n        python lists, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_t_hat = m_t / (1 - beta1 ** t)\n    v_t_hat = v_t / (1 - beta2 ** t)\n    param_t = param - lr * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    updated_param_list = param_t.round(8).tolist()\n    new_m_list = m_t.round(8).tolist()\n    new_v_list = v_t.round(8).tolist()\n    return (updated_param_list, new_m_list, new_v_list)\nparam = np.array([1.0, -1.0])\ngrad = np.array([0.1, -0.1])\nt = 1\nm = np.zeros_like(param)\nv = np.zeros_like(param)"}
{"task_id": 340, "completion_id": 1, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m_t / (1 - beta1 ** t)\n    v_hat = v_t / (1 - beta2 ** t)\n    param_new = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    param_list = [round(x, 8) for x in param_new.flatten()]\n    m_t_list = [round(x, 8) for x in m_t.flatten()]\n    v_t_list = [round(x, 8) for x in v_t.flatten()]\n    return (param_list, m_t_list, v_t_list)"}
{"task_id": 340, "completion_id": 2, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_t_hat = m_t / (1 - beta1 ** t)\n    v_t_hat = v_t / (1 - beta2 ** t)\n    param_t = param - lr * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    return (param_t.round(8).tolist(), m_t.round(8).tolist(), v_t.round(8).tolist())\nparam = np.array([1.0, 2.0])\ngrad = np.array([0.1, 0.1])\nm = np.array([0.0, 0.0])\nv = np.array([0.0, 0.0])\nt = 1"}
{"task_id": 340, "completion_id": 3, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_t_hat = m_t / (1 - beta1 ** t)\n    v_t_hat = v_t / (1 - beta2 ** t)\n    param_t = param - lr * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    param_t_rounded = np.round(param_t, 8)\n    m_t_rounded = np.round(m_t, 8)\n    v_t_rounded = np.round(v_t, 8)\n    return (param_t_rounded.tolist(), m_t_rounded.tolist(), v_t_rounded.tolist())\nparam = np.array([1.0, 2.0])\ngrad = np.array([0.1, 0.2])\nt = 2\nm = np.array([0.0, 0.0])\nv = np.array([0.0, 0.0])"}
{"task_id": 340, "completion_id": 4, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_t_hat = m_t / (1 - beta1 ** t)\n    v_t_hat = v_t / (1 - beta2 ** t)\n    param_t = param - lr * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    updated_param = np.round(param_t.tolist(), 8)\n    new_m = np.round(m_t.tolist(), 8)\n    new_v = np.round(v_t.tolist(), 8)\n    return (updated_param, new_m, new_v)\nparam = np.array([2.0, -0.5])\ngrad = np.array([-0.1, -0.1])\nt = 2\nm = np.array([0.9, 0.9])\nv = np.array([0.999, 0.999])"}
{"task_id": 340, "completion_id": 5, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m_t / (1 - beta1 ** t)\n    v_hat = v_t / (1 - beta2 ** t)\n    param_t = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    return (np.round(param_t.flatten(), 8).tolist(), np.round(m_t.flatten(), 8).tolist(), np.round(v_t.flatten(), 8).tolist())"}
{"task_id": 340, "completion_id": 6, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n    \n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    param_updated = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    return (param_updated.round(8).tolist(), m.round(8).tolist(), v.round(8).tolist())"}
{"task_id": 340, "completion_id": 7, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_that = m_t / (1 - beta1 ** t)\n    v_t_hat = v_t / (1 - beta2 ** t)\n    param_prime = param - lr * m_that / (np.sqrt(v_t_hat) + eps)\n    updated_param = np.round(param_prime.flatten(), 8).tolist()\n    new_m = np.round(m_t.flatten(), 8).tolist()\n    new_v = np.round(v_t.flatten(), 8).tolist()\n    return (updated_param, new_m, new_v)\nparam = np.array([1.0, -2.0])\ngrad = np.array([0.5, -0.3])\nt = 1\nm = np.array([0.1, -0.1])\nv = np.array([0.2, 0.3])"}
{"task_id": 340, "completion_id": 8, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    bias_correction1 = 1 - beta1 ** t\n    bias_correction2 = 1 - beta2 ** t\n    m_hat = m_t / bias_correction1\n    v_hat = v_t / bias_correction2\n    param_new = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    updated_param = param_new.round(8).tolist()\n    new_m = m_t.round(8).tolist()\n    new_v = v_t.round(8).tolist()\n    return (updated_param, new_m, new_v)"}
{"task_id": 340, "completion_id": 9, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat_t = m_t / (1 - beta1 ** t)\n    v_hat_t = v_t / (1 - beta2 ** t)\n    param_t = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    param_t_list = np.round(param_t.tolist(), 8)\n    m_t_list = np.round(m_t.tolist(), 8)\n    v_t_list = np.round(v_t.tolist(), 8)\n    return (param_t_list, m_t_list, v_t_list)"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    num_retain = int(retain_prcnt * len(rewards))\n    sorted_indices = np.argsort(rewards)[::-1]\n    sorted_samples = theta_samples[sorted_indices]\n    elite_samples = sorted_samples[:num_retain]\n    mean = np.mean(elite_samples, axis=0).round(4).tolist()\n    variance = np.var(elite_samples, axis=0).round(4).tolist()\n    return (mean, variance)\ntheta_samples = np.array([[0.5, 1.0, 2.5], [0.7, 2.0, 2.6], [0.9, 0.7, 2.7], [1.1, 3.0, 2.8]])\nrewards = [1.1, 1.3, 0.5, 1.5]\nretain_prcnt = 0.5"}
{"task_id": 343, "completion_id": 1, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    sorted_indices = np.argsort(rewards)[::-1]\n    retain_count = int(np.ceil(retain_prcnt * len(rewards)))\n    elite_samples = theta_samples[sorted_indices][:retain_count]\n    elite_mean = np.mean(elite_samples, axis=0).tolist()\n    elite_variance = np.var(elite_samples, axis=0).tolist()\n    return ([round(x, 4) for x in elite_mean], [round(x, 4) for x in elite_variance])"}
{"task_id": 343, "completion_id": 2, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    num_retain = int(retain_prcnt * len(rewards))\n    indices_sorted_by_rewards = np.argsort(rewards)[::-1]\n    top_indices = indices_sorted_by_rewards[:num_retain]\n    theta_top = theta_samples[top_indices, :]\n    mean_theta = np.mean(theta_top, axis=0)\n    variance_theta = np.var(theta_top, axis=0)\n    mean_theta_rounded = np.round(mean_theta, decimals=4).tolist()\n    variance_theta_rounded = np.round(variance_theta, decimals=4).tolist()\n    return (mean_theta_rounded, variance_theta_rounded)\ntheta_samples = np.array([[0.2, 0.4], [0.8, 0.6], [0.5, 0.7], [0.1, 0.9]])\nrewards = [0.3, 0.7, 0.5, 0.9]\nretain_prcnt = 0.5"}
{"task_id": 343, "completion_id": 3, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    num_retain = int(retain_prcnt * len(rewards))\n    sorted_pairs = sorted(zip(rewards, theta_samples), reverse=True)\n    elite_samples = np.array([sample for (_, sample) in sorted_pairs[:num_retain]])\n    mean = np.mean(elite_samples, axis=0).tolist()\n    var = np.var(elite_samples, axis=0).tolist()\n    mean = [round(x, 4) for x in mean]\n    var = [round(x, 4) for x in var]\n    return (mean, var)\ntheta_samples = np.array([[3, 4], [2, 6], [7, 1]])\nrewards = [12, 24, 7]\nretain_prcnt = 0.5"}
{"task_id": 343, "completion_id": 4, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    n_samples = len(rewards)\n    n_to_retain = int(max(1, retain_prcnt * n_samples))\n    sorted_indices = np.argsort(rewards)[::-1]\n    elite_theta_samples = theta_samples[sorted_indices][:n_to_retain]\n    elite_mean = elite_theta_samples.mean(axis=0)\n    elite_var = elite_theta_samples.var(axis=0)\n    elite_mean_rounded = np.round(elite_mean, decimals=4).tolist()\n    elite_var_rounded = np.round(elite_var, decimals=4).tolist()\n    return (elite_mean_rounded, elite_var_rounded)"}
{"task_id": 343, "completion_id": 5, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    N = len(rewards)\n    retain_count = int(retain_prcnt * N)\n    theta_samples_sorted = [theta for (_, theta) in sorted(zip(rewards, theta_samples), key=lambda x: x[0], reverse=True)]\n    elite_samples = np.array(theta_samples_sorted[:retain_count])\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    mean_rounded = np.round(mean, decimals=4).tolist()\n    variance_rounded = np.round(variance, decimals=4).tolist()\n    return (mean_rounded, variance_rounded)"}
{"task_id": 343, "completion_id": 6, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    combined = np.array(list(zip(rewards, theta_samples)))\n    sorted_combined = combined[combined[:, 0].argsort()[::-1]]\n    retain_num = int(retain_prcnt * len(sorted_combined))\n    retained_samples = sorted_combined[:retain_num, 1]\n    mean = np.mean(retained_samples, axis=0).tolist()\n    variance = np.var(retained_samples, axis=0).tolist()\n    mean_rounded = [round(x, 4) for x in mean]\n    variance_rounded = [round(x, 4) for x in variance]\n    return (mean_rounded, variance_rounded)\ntheta_samples = np.array([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6], [0.7, 0.8]])\nrewards = [10, 20, 30, 40]\nretain_prcnt = 0.5"}
{"task_id": 343, "completion_id": 7, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    num_elite = int(retain_prcnt * len(rewards))\n    indices = np.argsort(rewards)[::-1][:num_elite]\n    elite_samples = theta_samples[indices]\n    mean = np.mean(elite_samples, axis=0).tolist()\n    variance = np.var(elite_samples, axis=0).tolist()\n    mean = [round(m, 4) for m in mean]\n    variance = [round(v, 4) for v in variance]\n    return (mean, variance)\ntheta_samples = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9], [1.0, 1.2, 1.4], [1.5, 1.6, 1.8]])\nrewards = [3.0, 5.5, 1.1, 7.2, 4.8]\nretain_prcnt = 0.6"}
{"task_id": 343, "completion_id": 8, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    rewards = np.array(rewards)\n    sorted_indices = np.argsort(rewards)[::-1]\n    sorted_samples = theta_samples[sorted_indices]\n    num_retain = int(retain_prcnt * len(theta_samples))\n    elite_samples = sorted_samples[:num_retain]\n    mean = np.mean(elite_samples, axis=0).tolist()\n    variance = np.var(elite_samples, axis=0).tolist()\n    mean = [round(x, 4) for x in mean]\n    variance = [round(x, 4) for x in variance]\n    return (mean, variance)\ntheta_samples = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]])\nrewards = [1.0, 2.0, 3.0]\nretain_prcnt = 0.67"}
{"task_id": 343, "completion_id": 9, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    N = theta_samples.shape[0]\n    num_retain = int(retain_prcnt * N)\n    sorted_indices = np.argsort(rewards)[::-1][:num_retain]\n    top_samples = theta_samples[sorted_indices]\n    mean = np.mean(top_samples, axis=0).round(4).tolist()\n    var = np.var(top_samples, axis=0).round(4).tolist()\n    return (mean, var)"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    probabilities = [count / total_labels for count in label_counts.values()]\n    ent = -sum((p * math.log2(p) for p in probabilities if p > 0))\n    return round(ent, 5)"}
{"task_id": 353, "completion_id": 1, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total_count = len(labels)\n    entropy_value = 0.0\n    for count in label_counts.values():\n        probability = count / total_count\n        entropy_value -= probability * math.log2(probability)\n    return round(entropy_value, 5)"}
{"task_id": 353, "completion_id": 2, "solution": "import math\nfrom collections import Counter\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    probabilities = [count / len(labels) for count in label_counts.values()]\n    h = -sum((p * math.log2(p) for p in probabilities if p > 0))\n    return round(h, 5)"}
{"task_id": 353, "completion_id": 3, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    n_labels = len(labels)\n    if n_labels <= 1:\n        return 0.0\n    counts = Counter(labels)\n    probabilities = [count / n_labels for count in counts.values()]\n    entropy = -sum((p * math.log2(p) for p in probabilities if p > 0))\n    return round(entropy, 5)"}
{"task_id": 353, "completion_id": 4, "solution": "import math\nfrom collections import Counter\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total_count = sum(label_counts.values())\n    entropy_value = 0.0\n    for count in label_counts.values():\n        if count > 0:\n            probability = count / total_count\n            entropy_value -= probability * math.log2(probability)\n    return round(entropy_value, 5)"}
{"task_id": 353, "completion_id": 5, "solution": "import math\nfrom collections import Counter\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total_elements = len(labels)\n    entropy_val = 0.0\n    for count in label_counts.values():\n        p_i = count / total_elements\n        if p_i > 0:\n            entropy_val -= p_i * math.log2(p_i)\n    return round(entropy_val, 5)"}
{"task_id": 353, "completion_id": 6, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    probabilities = [count / len(labels) for count in label_counts.values()]\n    entropies = [-p * math.log2(p) for p in probabilities]\n    shannon_entropy = sum(entropies)\n    return round(shannon_entropy, 5)"}
{"task_id": 353, "completion_id": 7, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    entropy_value = -sum((count / total_labels * math.log2(count / total_labels) for count in label_counts.values() if count > 0))\n    return round(entropy_value, 5)"}
{"task_id": 353, "completion_id": 8, "solution": "import math\nfrom collections import Counter\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n    \n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    entropy_value = 0.0\n    for count in label_counts.values():\n        probability = count / total_labels\n        if probability > 0:\n            entropy_value -= probability * math.log2(probability)\n    return round(entropy_value, 5)"}
{"task_id": 353, "completion_id": 9, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n    \n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n    \n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    labels = list(labels)\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    entropy_value = 0.0\n    for count in label_counts.values():\n        probability = count / total_labels\n        entropy_contribution = -probability * math.log2(probability)\n        entropy_value += entropy_contribution\n    return round(entropy_value, 5)"}
{"task_id": 354, "completion_id": 0, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (k_rows, k_cols, _, out_ch) = W.shape\n    if dilation > 0:\n        (k_rows, k_cols) = (k_rows + dilation * (k_rows - 1), k_cols + dilation * (k_cols - 1))\n        W = np.kron(W, np.eye(dilation + 1, 1, dilation)).reshape(k_rows, k_cols, in_ch, out_ch)\n    if pad == 'same':\n        pad = ((in_rows + stride - 1) // stride - 1) * stride + k_rows - in_rows\n        pad = (pad // 2, pad - pad // 2)\n        pad_x = ((0, 0), (pad[0], pad[1]), (pad[0], pad[1]), (0, 0))\n    elif isinstance(pad, int):\n        pad_x = ((0, 0), (pad, pad), (pad, pad), (0, 0))\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad_x = ((0, 0), (pad[0], pad[0]), (pad[1], pad[1]), (0, 0))\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        pad_x = ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0))\n    else:\n        raise ValueError('Invalid padding specification')\n    X = np.pad(X, pad_width=pad_x, mode='constant', constant_values=0)\n    out_rows = (X.shape[1] - k_rows) // stride + 1\n    out_cols = (X.shape[2] - k_cols) // stride + 1\n    cols = np.zeros((k_rows * k_cols * in_ch, out_rows * out_cols * n_ex))\n    for nn in range(n_ex):\n        for ii in range(0, out_rows * stride, stride):\n            for jj in range(0, out_cols * stride, stride):\n                loc = ii // stride * out_cols * k_rows * k_cols * in_ch + jj // stride * k_rows * k_cols * in_ch\n                cols[:, loc:loc + k_rows * k_cols] = X[nn, ii:ii + k_rows, jj:jj + k_cols, :].reshape(-1, k_rows * k_cols)\n    W_col = W.reshape(-1, out_ch)\n    out = np.dot(W_col.T, cols)\n    out = np.moveaxis(out.T, 0, -1).reshape(n_ex, out_rows, out_cols, out_ch)\n    return out.tolist()"}
{"task_id": 354, "completion_id": 1, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    if isinstance(pad, int):\n        pad_top = pad_bottom = pad_left = pad_right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad_top = pad_bottom = pad[0]\n        pad_left = pad_right = pad[1]\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        (pad_top, pad_bottom, pad_left, pad_right) = pad\n    elif pad == 'same':\n        pad_top = (kernel_rows - 1) // 2\n        pad_bottom = kernel_rows - pad_top - 1\n        pad_left = (kernel_cols - 1) // 2\n        pad_right = kernel_cols - pad_left - 1\n    else:\n        raise ValueError('Invalid padding specification')\n    X = np.pad(X, ((0, 0), (pad_top, pad_bottom), (pad_left, pad_right), (0, 0)), mode='constant')\n    out_rows = (in_rows + pad_top + pad_bottom - (kernel_rows - 1) - 1) // stride + 1\n    out_cols = (in_cols + pad_left + pad_right - (kernel_cols - 1) - 1) // stride + 1\n    if dilation > 0:\n        W = W.copy()\n        W[:, 1:, ...] = np.repeat(W[:, 1:, ...], dilation, axis=1)\n        W[1:, ...] = np.repeat(W[1:, ...], dilation, axis=0)\n    X_col = im2col_indices(X, kernel_rows, kernel_cols, pad, stride)\n    W_col = W.transpose(3, 2, 0, 1).reshape(out_ch, -1)\n    feature_maps = W_col @ X_col\n    feature_maps = feature_maps.reshape(out_ch, out_rows, out_cols, n_ex)\n    feature_maps = feature_maps.transpose(3, 1, 2, 0)\n    return feature_maps.tolist()\ndef im2col_indices(X, kernel_rows, kernel_cols, pad, stride):\n    \"\"\"Converts image to column based on im2col technique.\"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    num_patches_row = (in_rows - kernel_rows + 2 * pad) // stride + 1\n    num_patches_col = (in_cols - kernel_cols + 2 * pad) // stride + 1\n    i0 = np.repeat(np.arange(kernel_rows), kernel_cols)\n    i0 = np.tile(i0, in_ch)\n    i1 = stride * np.repeat(np.arange(num_patches_row), num_patches_col)\n    j0 = np.tile(np.arange(kernel_cols), kernel_rows * in_ch)\n    j1 = stride * np.tile(np.arange(num_patches_col), num_patches_row)\n    k0 = np.repeat(np.arange(in_ch), kernel_rows * kernel_cols)\n    k0 = np.tile(k0, n_ex)\n    (i0, i1) = np.meshgrid(i0, i1, indexing='ij')\n    (j0, j1) = np.meshgrid(j0, j1, indexing='ij')\n    (k0, _) = np.meshgrid(k0, np.arange(num_patches_row * num_patches_col))\n    i = i0 + i1\n    j = j0 + j1\n    k = k0\n    cols = X[:, i, j, k]\n    cols = cols.transpose(1, 2, 3, 0).reshape(kernel_rows * kernel_cols * in_ch, -1)\n    return cols\nX = np.random.rand(10, 28, 28, 3)\nW = np.random.rand(3, 3, 3, 5)\nstride = 2\npad = 1\ndilation = 1"}
{"task_id": 354, "completion_id": 2, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    if isinstance(pad, int):\n        pad_top = pad_bottom = pad_left = pad_right = pad\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            pad_top = (pad_bottom, pad_left, pad_right) = (pad[0], pad[0], pad[1], pad[1])\n        elif len(pad) == 4:\n            (pad_top, pad_bottom, pad_left, pad_right) = pad\n        else:\n            raise ValueError('Pad should be an integer, a 2-tuple, or a 4-tuple for padding specification.')\n    elif pad == 'same':\n        pad_top = pad_bottom = (kernel_rows - 1) * (dilation + 1) // 2\n        pad_left = pad_right = (kernel_cols - 1) * (dilation + 1) // 2\n    else:\n        raise ValueError(\"Pad should be an integer, a tuple, or the string 'same'.\")\n    if dilation > 0:\n        kernel_rows = 1 + dilation * (kernel_rows - 1)\n        kernel_cols = 1 + dilation * (kernel_cols - 1)\n        new_W = np.zeros((kernel_rows, kernel_cols, in_ch, out_ch))\n        new_W[::dilation + 1, ::dilation + 1, :, :] = W\n        W = new_W\n    X_padded = np.pad(X, ((0, 0), (pad_top, pad_bottom), (pad_left, pad_right), (0, 0)), 'constant')\n    out_rows = (in_rows + pad_top + pad_bottom - kernel_rows) // stride + 1\n    out_cols = (in_cols + pad_left + pad_right - kernel_cols) // stride + 1\n    cols = np.zeros((out_rows * out_cols * n_ex, kernel_rows * kernel_cols * in_ch))\n    count = 0\n    for x in range(out_rows):\n        for y in range(out_cols):\n            rows_i = x * stride\n            cols_i = y * stride\n            cols[count, :] = X_padded[:, rows_i:rows_i + kernel_rows, cols_i:cols_i + kernel_cols, :].reshape(n_ex, -1)\n            count += 1\n    W_col = W.reshape(-1, out_ch)\n    out = np.dot(cols, W_col).reshape(n_ex, out_rows, out_cols, out_ch).tolist()\n    return out"}
{"task_id": 354, "completion_id": 3, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (k_rows, k_cols, _, out_ch) = W.shape\n    if dilation > 0:\n        k_rows = k_rows + (k_rows - 1) * (dilation - 1)\n        k_cols = k_cols + (k_cols - 1) * (dilation - 1)\n        W_dilated = np.zeros((k_rows, k_cols, in_ch, out_ch))\n        for i in range(k_rows):\n            for j in range(k_cols):\n                if i % dilation == 0 and j % dilation == 0:\n                    W_dilated[i, j, :, :] = W[i // dilation, j // dilation, :, :]\n    else:\n        W_dilated = W\n    if isinstance(pad, str) and pad == 'same':\n        padding_row = (stride * (in_rows - 1) - in_rows + k_rows) / 2\n        padding_col = (stride * (in_cols - 1) - in_cols + k_cols) / 2\n        padding = ((padding_row, padding_row), (padding_col, padding_col))\n    elif isinstance(pad, int):\n        padding = ((pad, pad), (pad, pad))\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            (padding_row, padding_col) = pad\n            padding = ((padding_row, padding_row), (padding_col, padding_col))\n        elif len(pad) == 4:\n            padding = ((pad[0], pad[1]), (pad[2], pad[3]))\n    else:\n        raise ValueError('Invalid padding specification')\n    X_padded = np.pad(X, ((0, 0), padding[0], padding[1], (0, 0)), 'constant')\n    out_rows = int((X_padded.shape[1] - k_rows) / stride) + 1\n    out_cols = int((X_padded.shape[2] - k_cols) / stride) + 1\n    output = np.zeros((n_ex, out_rows, out_cols, out_ch))\n    X_col = im2col_indices(X_padded, k_rows, k_cols, dilation, stride)\n    W_col = W_dilated.reshape(-1, out_ch)\n    output_col = np.matmul(X_col, W_col)\n    output = output_col.reshape(n_ex, out_rows, out_cols, out_ch)\n    return output.tolist()\ndef im2col_indices(images, k_rows, k_cols, dilation, stride):\n    \"\"\"Im2col transformation with dilation.\n\n    Args:\n        images: NumPy array of shape ``(n_ex, H, W, in_ch)`` representing the batch of images.\n        k_rows: Kernel height\n        k_cols: Kernel width\n        dilation: Dilation factor\n        stride: Stride of the convolution\n\n    Returns:\n        A transformed tensor.\n    \"\"\"\n    (n_ex, H, W, in_ch) = images.shape\n    dH = int((H - k_rows) / stride) + 1\n    dW = int((W - k_cols) / stride) + 1\n\n    def get_indices(k_rows, k_cols, dilation, stride, H, W, in_ch, dH, dW):\n        \"\"\"Helper function to get indices for im2col transformation.\"\"\"\n        i0 = np.repeat(np.arange(k_rows), k_cols)\n        i0 = np.tile(i0, in_ch)\n        i1 = stride * np.repeat(np.arange(dH), dW)\n        j0 = np.tile(np.arange(k_cols), k_rows * in_ch)\n        j1 = stride * np.tile(np.arange(dW), dH)\n        i = i0.reshape(-1, 1) + i1.reshape(1, -1)\n        j = j0.reshape(-1, 1) + j1.reshape(1, -1)\n        k = np.tile(np.arange(in_ch), k_cols * k_rows).reshape(-1, 1)\n        return (k, i, j)\n    (k, i, j) = get_indices(k_rows, k_cols, dilation, stride, H, W, in_ch, dH, dW)\n    cols = images[:, i, j, k]\n    return cols.reshape(in_ch * k_rows * k_cols, -1)"}
{"task_id": 354, "completion_id": 4, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    if dilation > 0:\n        kernel_rows = 1 + dilation * (kernel_rows - 1)\n        kernel_cols = 1 + dilation * (kernel_cols - 1)\n    if type(pad) == tuple and len(pad) == 2:\n        (pre_pad_row, pre_pad_col) = pad\n        (post_pad_row, post_pad_col) = pad\n    elif type(pad) == tuple and len(pad) == 4:\n        (pre_pad_row, post_pad_row, pre_pad_col, post_pad_col) = pad\n    else:\n        pre_pad_row = pre_pad_col = post_pad_row = post_pad_col = pad\n    if pad == 'same':\n        total_pad_row = kernel_rows - 1\n        total_pad_col = kernel_cols - 1\n        pre_pad_row = total_pad_row // 2\n        pre_pad_col = total_pad_col // 2\n        post_pad_row = total_pad_row - pre_pad_row\n        post_pad_col = total_pad_col - pre_pad_col\n    X_pad = np.pad(X, ((0, 0), (pre_pad_row, post_pad_row), (pre_pad_col, post_pad_col), (0, 0)))\n    out_rows = (in_rows + pre_pad_row + post_pad_row - kernel_rows + stride - 1) // stride\n    out_cols = (in_cols + pre_pad_col + post_pad_col - kernel_cols + stride - 1) // stride\n    out = np.zeros((n_ex, out_rows, out_cols, out_ch))\n    for i in range(out_rows):\n        for j in range(out_cols):\n            row_start = i * stride\n            col_start = j * stride\n            img_slice = X_pad[:, row_start:row_start + kernel_rows, col_start:col_start + kernel_cols, :]\n            img_slice_col = img_slice.reshape(n_ex, -1)\n            kernel_col = W\n            if dilation > 0:\n                kernel_col = np.zeros((kernel_rows, kernel_cols, in_ch, out_ch))\n                for k in range(out_ch):\n                    for l in range(in_ch):\n                        kernel_col[:, :, l, k] = np.insert(np.insert(W[:, :, l, k], np.arange(1, kernel_rows, dilation), 0, axis=0), np.arange(1, kernel_cols, dilation), 0, axis=1)\n            kernel_col = kernel_col.reshape(-1, out_ch)\n            out[:, i, j, :] = img_slice_col @ kernel_col\n    return out.tolist()"}
{"task_id": 354, "completion_id": 5, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kr, kc) = W.shape[:2]\n    padding = pad\n\n    def pad_input(x, padding, kr, kc):\n        if isinstance(padding, tuple):\n            if len(padding) == 2:\n                (pr, pc) = padding\n                padding = (pr, pr, pc, pc)\n            x = np.pad(x, pad_width=((0, 0), (padding[0], padding[1]), (padding[2], padding[3]), (0, 0)), mode='constant')\n        elif isinstance(padding, int):\n            x = np.pad(x, pad_width=((0, 0), (padding, padding), (padding, padding), (0, 0)), mode='constant')\n        elif padding == 'same':\n            padding = ((kr - 1) // 2, (kc - 1) // 2)\n            x = np.pad(x, pad_width=((0, 0), (padding[0], padding[1]), (padding[0], padding[1]), (0, 0)), mode='constant')\n        return (x, padding)\n\n    def compute_output_size(padded_in_rows, padded_in_cols, kernel_rows, kernel_cols, stride, dilation):\n        if dilation != 0:\n            kernel_rows = 1 + dilation * (kernel_rows - 1)\n            kernel_cols = 1 + dilation * (kernel_cols - 1)\n        out_rows = (padded_in_rows - kernel_rows) // stride + 1\n        out_cols = (padded_in_cols - kernel_cols) // stride + 1\n        return (out_rows, out_cols)\n\n    def im2col_indices(padded_input, out_rows, out_cols, kernel_rows, kernel_cols, stride, padding, dilation):\n        dilated_kernel_rows = 1 + dilation * (kernel_rows - 1)\n        dilated_kernel_cols = 1 + dilation * (kernel_cols - 1)\n        i0 = np.repeat(np.arange(dilated_kernel_rows), kernel_cols)\n        i0 = np.tile(i0, in_ch)\n        i1 = stride * np.repeat(np.arange(out_rows), out_cols)\n        j0 = np.tile(np.arange(dilated_kernel_cols), dilated_kernel_rows * in_ch)\n        j1 = stride * np.tile(np.arange(out_cols), out_rows)\n        k0 = np.repeat(np.arange(in_ch), kernel_rows * kernel_cols).reshape(-1, 1)\n        i = i0.reshape(-1, 1) + i1.reshape(1, -1)\n        j = j0.reshape(-1, 1) + j1.reshape(1, -1)\n        k = k0\n        cols = padded_input[:, i, j, k]\n        return cols\n    (X, padding) = pad_input(X, padding, kr, kc)\n    (out_rows, out_cols) = compute_output_size(X.shape[1], X.shape[2], W.shape[0], W.shape[1], stride, dilation)\n    im2col_input = im2col_indices(X, out_rows, out_cols, kr, kc, stride, padding, dilation)\n    W = W.reshape(-1, W.shape[-1])\n    result = np.tensordot(im2col_input, W, axes=((1, 3), (0, 1)))\n    result = np.transpose(result, (0, 2, 1)).reshape(n_ex, out_rows, out_cols, -1)\n    return result.tolist()\nX = np.random.rand(2, 4, 4, 1)\nW = np.random.rand(3, 3, 1, 2)"}
{"task_id": 354, "completion_id": 6, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    if isinstance(pad, int):\n        pr1 = pr2 = pc1 = pc2 = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (pr1, pr2) = (pad[0], pad[0])\n        (pc1, pc2) = (pad[1], pad[1])\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        (pr1, pr2, pc1, pc2) = pad\n    elif pad == 'same':\n        pr1 = ((in_rows - 1) * stride - stride + kernel_rows + (dilation - 1) * (kernel_rows - 1)) // 2\n        pr2 = (in_rows - 1) * stride - stride + kernel_rows + (dilation - 1) * (kernel_rows - 1) - pr1\n        pc1 = ((in_cols - 1) * stride - stride + kernel_cols + (dilation - 1) * (kernel_cols - 1)) // 2\n        pc2 = (in_cols - 1) * stride - stride + kernel_cols + (dilation - 1) * (kernel_cols - 1) - pc1\n    else:\n        raise ValueError('Invalid padding specification')\n    if dilation > 0:\n        dilated_kernel_rows = 1 + (kernel_rows - 1) * dilation\n        dilated_kernel_cols = 1 + (kernel_cols - 1) * dilation\n        W_dilated = np.zeros((dilated_kernel_rows, dilated_kernel_cols, in_ch, out_ch))\n        W_dilated[::dilation + 1, ::dilation + 1] = W\n    else:\n        W_dilated = W\n    X_padded = np.pad(X, ((0, 0), (pr1, pr2), (pc1, pc2), (0, 0)), mode='constant')\n    (kernel_rows, kernel_cols) = W_dilated.shape[:2]\n    out_rows = (in_rows + pr1 + pr2 - (kernel_rows - 1) * (dilation + 1) - 1) // stride + 1\n    out_cols = (in_cols + pc1 + pc2 - (kernel_cols - 1) * (dilation + 1) - 1) // stride + 1\n\n    def im2col(X, kernel_rows, kernel_cols, stride, dilation):\n        row_extent = (in_rows + pr1 + pr2 - (kernel_rows - 1) * (dilation + 1)) // stride + 1\n        col_extent = (in_cols + pc1 + pc2 - (kernel_cols - 1) * (dilation + 1)) // stride + 1\n        start_row = np.repeat(np.arange(kernel_rows)[::dilation], kernel_cols)[np.newaxis, :]\n        start_col = np.tile(np.arange(kernel_cols)[::dilation], kernel_rows)[np.newaxis, :]\n        col_indices = (start_row + np.arange(row_extent) * stride)[:, np.newaxis] * X.shape[2] + (start_col + np.arange(col_extent) * stride)\n        return X_padded.reshape(-1)[np.ravel(col_indices)]\n    X_cols = np.array([im2col(X[p], kernel_rows, kernel_cols, stride, dilation) for p in range(n_ex)]).reshape((n_ex, out_rows * out_cols, -1))\n    W_col = W_dilated.transpose(3, 2, 0, 1).reshape(out_ch, -1)\n    output = (X_cols @ W_col.T).reshape(n_ex, out_rows, out_cols, out_ch)\n    return output.tolist()"}
{"task_id": 354, "completion_id": 7, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    if dilation > 0:\n        d = dilation + 1\n        W = np.pad(W, ((d - 1, d - 1), (d - 1, d - 1), (0, 0), (0, 0)), 'constant', constant_values=0)[::d, ::d, :, :]\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    padding = [0, 0, 0, 0]\n    if isinstance(pad, int):\n        padding = [pad, pad, pad, pad]\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        padding = [pad[0], pad[0], pad[1], pad[1]]\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        padding = list(pad)\n    elif pad == 'same':\n        out_rows = (in_rows - kernel_rows + stride - 1) // stride + 1\n        out_cols = (in_cols - kernel_cols + stride - 1) // stride + 1\n        needed_padding_rows = (out_rows - 1) * stride + kernel_rows - in_rows\n        needed_padding_cols = (out_cols - 1) * stride + kernel_cols - in_cols\n        padding = [needed_padding_rows // 2, needed_padding_rows - needed_padding_rows // 2, needed_padding_cols // 2, needed_padding_cols - needed_padding_cols // 2]\n    X_padded = np.pad(X, ((0, 0), (padding[0], padding[1]), (padding[2], padding[3]), (0, 0)), 'constant', constant_values=0)\n    (n_ex, in_rows_pad, in_cols_pad, in_ch) = X_padded.shape\n    out_rows = (in_rows_pad - kernel_rows) // stride + 1\n    out_cols = (in_cols_pad - kernel_cols) // stride + 1\n    col_buffer = np.zeros((out_rows * out_cols, kernel_rows * kernel_cols * in_ch))\n    output_buffer = np.zeros((n_ex, out_rows * out_cols, out_ch))\n    for m in range(n_ex):\n        idx = 0\n        for r in range(0, in_rows_pad - kernel_rows + 1, stride):\n            for c in range(0, in_cols_pad - kernel_cols + 1, stride):\n                patch = X_padded[m, r:r + kernel_rows, c:c + kernel_cols, :]\n                col_buffer[idx] = patch.flatten()\n                idx += 1\n        output_buffer[m] = np.dot(col_buffer, W.reshape(W.shape[0] * W.shape[1] * W.shape[2], out_ch))\n    output = np.transpose(output_buffer, (0, 2, 1)).reshape(n_ex, out_ch, out_rows, out_cols)\n    output = np.transpose(output, (0, 2, 3, 1))\n    return output.tolist()"}
{"task_id": 354, "completion_id": 8, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification - integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. 0 corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    if isinstance(pad, int):\n        pad = ((pad, pad), (pad, pad))\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad = ((pad[0], pad[0]), (pad[1], pad[1]))\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        pad = ((pad[0], pad[1]), (pad[2], pad[3]))\n    elif pad == 'same':\n        pad_r = ((kernel_rows - 1) * (dilation + 1) // 2, (kernel_rows - 1) * (dilation + 1) // 2)\n        pad_c = ((kernel_cols - 1) * (dilation + 1) // 2, (kernel_cols - 1) * (dilation + 1) // 2)\n        pad = (pad_r, pad_c)\n    X = np.pad(X, ((0, 0), pad[0][0], pad[1][0], (0, 0)), mode='constant')\n    out_rows = (X.shape[1] - (dilation * (kernel_rows - 1) + 1)) // stride + 1\n    out_cols = (X.shape[2] - (dilation * (kernel_cols - 1) + 1)) // stride + 1\n    output = np.zeros((n_ex, out_rows, out_cols, out_ch))\n    for i in range(out_rows):\n        for j in range(out_cols):\n            row_start = i * stride\n            row_end = row_start + kernel_rows * (dilation + 1) - dilation\n            col_start = j * stride\n            col_end = col_start + kernel_cols * (dilation + 1) - dilation\n            im_patch = X[:, row_start:row_end:dilation + 1, col_start:col_end:dilation + 1, :]\n            im_patch = im_patch.reshape(n_ex, kernel_rows * kernel_cols * in_ch)\n            kernel_flat = W.reshape(-1, out_ch)\n            output[:, i, j, :] = np.dot(im_patch, kernel_flat)\n    return output.tolist()"}
{"task_id": 354, "completion_id": 9, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad = (pad[0], pad[0], pad[1], pad[1])\n    elif pad == 'same':\n        pad = ((kernel_rows - 1) // 2, kernel_rows // 2, (kernel_cols - 1) // 2, kernel_cols // 2)\n    if dilation > 0:\n        W_dilated = np.zeros((kernel_rows + dilation * (kernel_rows - 1), kernel_cols + dilation * (kernel_cols - 1), in_ch, out_ch))\n        W_dilated[::dilation + 1, ::dilation + 1, :, :] = W\n        W = W_dilated\n        (kernel_rows, kernel_cols, _, _) = W.shape\n    X_padded = np.pad(X, ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0)), 'constant')\n    out_rows = (in_rows + pad[0] + pad[1] - kernel_rows) // stride + 1\n    out_cols = (in_cols + pad[2] + pad[3] - kernel_cols) // stride + 1\n    X_col = im2col(X_padded, kernel_rows, kernel_cols, stride)\n    W_col = W.reshape(-1, out_ch)\n    out = X_col.dot(W_col).reshape(n_ex, out_rows, out_cols, out_ch)\n    return out.tolist()\ndef im2col(X: 'np.ndarray', kernel_rows: int, kernel_cols: int, stride: int) -> 'np.ndarray':\n    \"\"\"Converts an image (X) to a col format.\"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    out_rows = (in_rows - kernel_rows) // stride + 1\n    out_cols = (in_cols - kernel_cols) // stride + 1\n    X_col = np.zeros((n_ex, kernel_rows, kernel_cols, in_ch, out_rows, out_cols))\n    for r in range(kernel_rows):\n        r_max = r + stride * out_rows\n        for c in range(kernel_cols):\n            c_max = c + stride * out_cols\n            X_col[:, r, c, :, :, :] = X[:, r:r_max:stride, c:c_max:stride, :]\n    return X_col.transpose(0, 3, 4, 5, 1, 2).reshape(n_ex * in_ch * out_rows * out_cols, -1)\nX = np.random.randn(10, 16, 16, 3)\nW = np.random.randn(3, 3, 3, 64)\nstride = 1\npad = 'same'\ndilation = 0"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    centered_data = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (U, s, Vt) = np.linalg.svd(centered_data, full_matrices=False)\n        directions = Vt\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n        idx = eigenvalues.argsort()[::-1]\n        eigenvalues = eigenvalues[idx]\n        eigenvectors = eigenvectors[:, idx]\n        directions = eigenvectors.T\n    else:\n        raise ValueError(\"Unsupported solver specified. Use 'svd' or 'eigen'.\")\n    directions = directions[:n_components]\n    for (i, direction) in enumerate(directions):\n        if direction[0] < 0:\n            directions[i] = -direction\n    scores = np.dot(centered_data, directions.T)\n    variances = np.var(scores, axis=0, ddof=1)\n    total_variance = np.sum(variances)\n    explained_variance_ratio = variances / total_variance\n    scores_rounded = scores.round(4).tolist()\n    explained_variance_ratio_rounded = explained_variance_ratio.round(4).tolist()\n    return (scores_rounded, explained_variance_ratio_rounded)"}
{"task_id": 355, "completion_id": 1, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    centered_data = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (U, S, Vt) = np.linalg.svd(centered_data, full_matrices=False)\n        components = Vt.T\n        explained_variance = S ** 2 / (len(data) - 1)\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n        sorted_indices = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[sorted_indices]\n        eigenvectors = eigenvectors[:, sorted_indices]\n        components = eigenvectors\n        explained_variance = eigenvalues\n    else:\n        raise ValueError(\"Invalid solver specified. Must be 'svd' or 'eigen'.\")\n    explained_variance_ratio = explained_variance / np.sum(explained_variance)\n    sorting_idx = np.argsort(explained_variance)[::-1]\n    components = components[:, sorting_idx]\n    explained_variance_ratio = explained_variance_ratio[sorting_idx]\n    n_components = min(n_components, data.shape[1])\n    components = components[:, :n_components]\n    explained_variance_ratio = explained_variance_ratio[:n_components]\n    signs = np.sign(components[np.argmax(components != 0, axis=0), np.arange(n_components)])\n    components = components * signs\n    for c in range(n_components):\n        if np.any(centered_data @ components[:, c] < 0):\n            components[:, c] *= -1\n    scores = centered_data @ components\n    scores = np.round(scores, 4).tolist()\n    explained_variance_ratio = np.round(explained_variance_ratio, 4).tolist()\n    return (scores, explained_variance_ratio)\ndata = np.array([[1.0, -2.0, 0.8], [-1.0, 1.0, -0.8]])"}
{"task_id": 355, "completion_id": 2, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    centred_data = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (U, S, Vt) = np.linalg.svd(centred_data, full_matrices=False)\n        components = Vt[:n_components]\n        scores = U[:, :n_components] * S[:n_components]\n    else:\n        cov_matrix = np.cov(centred_data, rowvar=False, ddof=1)\n        (eigvals, eigvecs) = np.linalg.eigh(cov_matrix)\n        idx = eigvals.argsort()[::-1]\n        (eigvals, eigvecs) = (eigvals[idx], eigvecs[:, idx])\n        components = eigvecs[:, :n_components]\n        scores = centred_data @ components\n    for i in range(n_components):\n        first_non_zero = next((x[0] for x in enumerate(components[i]) if x[1] != 0))\n        sign_fix = 1 if components[i, first_non_zero] > 0 else -1\n        components[i] *= sign_fix\n        scores[:, i] *= sign_fix\n    scores = np.round(scores, 4).tolist()\n    eigvals = np.round(eigvals, 4)\n    total_variance = np.sum(eigvals)\n    explained_variance_ratio = np.round(eigvals[:n_components] / total_variance, 4).tolist()\n    return (scores, explained_variance_ratio)"}
{"task_id": 355, "completion_id": 3, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    centered_data = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (U, S, Vt) = np.linalg.svd(centered_data, full_matrices=False)\n        explained_variance = S ** 2 / (centered_data.shape[0] - 1)\n        directions = Vt\n    elif solver == 'eigen':\n        covariance_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        (eigenvalues, directions) = np.linalg.eigh(covariance_matrix)\n        explained_variance = eigenvalues\n    else:\n        raise ValueError('Invalid solver option. Must be \"svd\" or \"eigen\".')\n    idx = np.argsort(explained_variance)[::-1]\n    explained_variance = explained_variance[idx]\n    directions = directions[idx]\n    if n_components > directions.shape[0]:\n        n_components = directions.shape[0]\n    explained_variance = explained_variance[:n_components]\n    directions = directions[:n_components]\n    for i in range(directions.shape[0]):\n        if directions[i, 0] < 0:\n            directions[i] = -directions[i]\n    projected_data = np.dot(centered_data, directions.T)\n    total_var = np.sum(explained_variance)\n    explained_variance_ratio = [var / total_var for var in explained_variance]\n    scores = np.round(projected_data, 4).tolist()\n    explained_variance_ratio = np.round(explained_variance_ratio, 4).tolist()\n    return (scores, explained_variance_ratio)"}
{"task_id": 355, "completion_id": 4, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    data_centred = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (_, _, Vt) = np.linalg.svd(data_centred, full_matrices=False)\n        principal_directions = Vt\n    elif solver == 'eigen':\n        cov_matrix = np.cov(data_centred, rowvar=False, ddof=1)\n        (eigenvalues, principal_directions) = np.linalg.eigh(cov_matrix)\n        order = np.argsort(eigenvalues)[::-1]\n        principal_directions = principal_directions[:, order]\n    else:\n        raise ValueError(\"Invalid solver choice. Must be 'svd' or 'eigen'.\")\n    n_components = min(n_components, data.shape[1])\n    principal_directions = principal_directions[:n_components]\n    for i in range(n_components):\n        if principal_directions[i, 0] < 0:\n            principal_directions[i] *= -1\n    scores = np.dot(data_centred, principal_directions.T)\n    eigenvalues = np.linalg.eigvalsh(np.cov(scores.T, ddof=1))\n    explained_variance_ratio = (eigenvalues / eigenvalues.sum()).round(4).tolist()\n    scores = scores.round(4).tolist()\n    return (scores, explained_variance_ratio)"}
{"task_id": 355, "completion_id": 5, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    centered_data = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (_, s, Vh) = np.linalg.svd(centered_data, full_matrices=False)\n        components = Vh[:n_components]\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        (eig_vals, eig_vecs) = np.linalg.eigh(cov_matrix)\n        idx = eig_vals.argsort()[::-1]\n        (eig_vals, eig_vecs) = (eig_vals[idx], eig_vecs[:, idx])\n        components = eig_vecs.T[:n_components]\n    for i in range(n_components):\n        first_non_zero_index = next((j for (j, x) in enumerate(components[i]) if x != 0), -1)\n        if first_non_zero_index != -1 and components[i][first_non_zero_index] < 0:\n            components[i] *= -1\n    scores = centered_data @ components.T\n    if solver == 'svd':\n        variances = s ** 2 / (len(data) - 1)\n    elif solver == 'eigen':\n        variances = eig_vals\n    total_variance = np.sum(variances)\n    explained_variance_ratio = [v / total_variance for v in variances[:n_components]]\n    return (scores.round(4).astype(float).tolist(), np.array(explained_variance_ratio).round(4).tolist())"}
{"task_id": 355, "completion_id": 6, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    centered_data = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (_, _, V) = np.linalg.svd(centered_data, full_matrices=False)\n        directions = V\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        (eigenvalues, directions) = np.linalg.eigh(cov_matrix)\n        idx = eigenvalues.argsort()[::-1]\n        directions = directions[:, idx]\n    else:\n        raise ValueError(\"Invalid solver. Choose 'svd' or 'eigen'.\")\n    directions = directions / np.linalg.norm(directions, axis=0)\n    directions = np.real(directions[:, :n_components])\n    for i in range(directions.shape[1]):\n        if directions[0, i] < 0:\n            directions[:, i] *= -1\n    scores = np.dot(centered_data, directions)\n    if solver == 'svd':\n        explained_variance = np.sum(centered_data ** 2, axis=0) / (centered_data.shape[0] - 1)\n    elif solver == 'eigen':\n        explained_variance = eigenvalues\n    explained_variance_ratio = explained_variance[:n_components] / np.sum(explained_variance)\n    return (np.round(scores, 4).tolist(), np.round(explained_variance_ratio, 4).tolist())"}
{"task_id": 355, "completion_id": 7, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n    \n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n        \n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    centered_data = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (_, s, Vt) = np.linalg.svd(centered_data, full_matrices=False)\n        directions = Vt\n        explained_variance = s ** 2 / (len(data) - 1)\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        (eigenvalues, directions) = np.linalg.eigh(cov_matrix)\n        explained_variance = eigenvalues\n    sort_indices = np.argsort(explained_variance)[::-1]\n    directions = directions[sort_indices]\n    explained_variance = explained_variance[sort_indices]\n    n_components = min(n_components, directions.shape[0])\n    directions = directions[:n_components]\n    explained_variance = explained_variance[:n_components]\n    for (i, direction) in enumerate(directions):\n        if direction[0] < 0:\n            directions[i] *= -1\n    scores = np.dot(centered_data, directions.T)\n    total_variance = np.sum(explained_variance)\n    explained_variance_ratio = (explained_variance / total_variance).tolist()\n    scores = np.round(scores, 4).tolist()\n    explained_variance_ratio = [round(ratio, 4) for ratio in explained_variance_ratio]\n    return (scores, explained_variance_ratio)"}
{"task_id": 355, "completion_id": 8, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        \"svd\" to use singular value decomposition or \"eigen\" to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    centered_data = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (_, _, Vt) = np.linalg.svd(centered_data, full_matrices=False)\n        eigenvectors = Vt\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n        eigenvalues = eigenvalues[::-1]\n        eigenvectors = eigenvectors[:, ::-1]\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'.\")\n    if solver == 'svd':\n        eigenvalues = np.sum(centered_data ** 2, axis=0) / (centered_data.shape[0] - 1)\n        eigenvalues = eigenvalues[:n_components]\n    total_variance = np.sum(eigenvalues)\n    explained_variance_ratio = (eigenvalues / total_variance).tolist()\n    explained_variance_ratio = [round(ratio, 4) for ratio in explained_variance_ratio]\n    eigenvectors = eigenvectors[:n_components]\n    for (i, vec) in enumerate(eigenvectors):\n        for (j, x) in enumerate(vec):\n            if x != 0:\n                if x < 0:\n                    eigenvectors[i] *= -1\n                break\n    scores = np.dot(centered_data, eigenvectors.T)\n    scores = scores.tolist()\n    scores = [[round(val, 4) for val in row] for row in scores]\n    return (scores, explained_variance_ratio)"}
{"task_id": 355, "completion_id": 9, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        'svd' to use singular value decomposition or 'eigen' to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    centered_data = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (_, _, Vt) = np.linalg.svd(centered_data, full_matrices=False)\n        directions = Vt\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        (eigenvalues, directions) = np.linalg.eigh(cov_matrix)\n    else:\n        raise ValueError(f\"Unknown solver: {solver}. Choose 'svd' or 'eigen'.\")\n    if solver == 'eigen':\n        sorted_indices = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[sorted_indices]\n        directions = directions[:, sorted_indices]\n    else:\n        eigenvalues = np.square(centered_data @ directions.T).mean(axis=0)\n        sorted_indices = np.argsort(eigenvalues)[::-1]\n        directions = directions[sorted_indices]\n    directions = directions[:n_components]\n    directions /= np.linalg.norm(directions, axis=1).reshape(-1, 1)\n    for i in range(directions.shape[0]):\n        if directions[i, np.argmax(np.abs(directions[i]))] < 0:\n            directions[i] *= -1\n    scores = centered_data @ directions.T\n    total_variance = np.sum(eigenvalues[:n_components])\n    explained_variance_ratio = [v / total_variance for v in eigenvalues[:n_components]]\n    scores_list = [list(np.round(row, decimals=4)) for row in scores]\n    explained_variance_ratio_list = list(np.round(explained_variance_ratio, decimals=4))\n    return (scores_list, explained_variance_ratio_list)"}
{"task_id": 356, "completion_id": 0, "solution": "import numpy as np\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return np.argmax(leaf.value)\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 1, "solution": "import numpy as np\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        p = leaf.value\n        predicted_class = np.argmax(p)\n        return predicted_class\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 2, "solution": "import numpy as np\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return np.argmax(leaf.value)\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 3, "solution": "import numpy as np\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return np.argmax(leaf.value)\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 4, "solution": "import numpy as np\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        probabilities = leaf.value\n        return np.argmax(probabilities)\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 5, "solution": "import numpy as np\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return np.argmax(leaf.value)\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 6, "solution": "import numpy as np\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return np.argmax(leaf.value)\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 7, "solution": "import numpy as np\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return np.argmax(leaf.value)\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 8, "solution": "import numpy as np\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return np.argmax(leaf.value)\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 9, "solution": "import numpy as np\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n    \n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n    \n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return np.argmax(leaf.value)\n    else:\n        return leaf.value"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    if K == 1:\n        return [np.mean(data, axis=0).round(4).tolist()]\n    centroids = np.array(data[:K].copy(), dtype=np.float64)\n    for _ in range(max_iters):\n        distances = np.sqrt(((data - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.array([data[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        if np.all((centroids - new_centroids) ** 2 < 1e-06):\n            break\n        centroids = new_centroids\n    sorted_centroids = sorted(np.round(centroids, 4))\n    return [centroid.tolist() for centroid in sorted_centroids]\nK = 2"}
{"task_id": 357, "completion_id": 1, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = np.array(data[:K].copy(), dtype=float)\n    for _ in range(max_iters):\n        distances = np.sqrt(((data - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.zeros((K, data.shape[1]))\n        counts = np.zeros(K)\n        for i in range(len(labels)):\n            new_centroids[labels[i]] += data[i]\n            counts[labels[i]] += 1\n        for i in range(K):\n            if counts[i] > 0:\n                new_centroids[i] /= counts[i]\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    centroids = np.round(centroids, 4)\n    return centroids.tolist()\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [9, 8], [8, 9]])\nK = 2"}
{"task_id": 357, "completion_id": 2, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    if K == 1:\n        centroid = np.mean(data, axis=0)\n        return [centroid.round(4).tolist()]\n    centroids = np.array(data[:K])\n    prev_centroids = centroids.copy()\n    tol = 1e-06\n    for _ in range(max_iters):\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        for i in range(K):\n            if np.any(labels == i):\n                centroids[i] = np.mean(data[labels == i], axis=0)\n        if np.all(np.abs(centroids - prev_centroids) < tol):\n            break\n        prev_centroids = centroids.copy()\n    sorted_centroids = centroids[np.lexsort(centroids.T)].round(4)\n    return sorted_centroids.tolist()\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [9, 8], [8, 9]])\nK = 2"}
{"task_id": 357, "completion_id": 3, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = np.array(data[:K].copy(), dtype=float)\n    for _ in range(max_iters):\n        distances = np.sqrt(((data - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.array([data[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)], dtype=float)\n        if np.all(np.abs(new_centroids - centroids) < 1e-06):\n            break\n        centroids = new_centroids\n    sorted_centroids = np.round(np.sort(centroids, axis=0), decimals=4)\n    return sorted_centroids.tolist()\nK = 2"}
{"task_id": 357, "completion_id": 4, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    if K == 1:\n        return [list(np.mean(data, axis=0).round(4))]\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        distances = np.sqrt(((data - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.array([data[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    sorted_centroids = sorted(list(map(lambda x: list(np.round(x, 4)), centroids)))\n    return sorted_centroids\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [9, 8], [8, 9]])\nK = 2\ncentroids = kmeans(data, K)"}
{"task_id": 357, "completion_id": 5, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\"\"\"\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        closest_cent = np.argmin(distances, axis=1)\n        new_centroids = centroids.copy()\n        for i in range(K):\n            if np.any(closest_cent == i):\n                new_centroids[i] = np.mean(data[closest_cent == i], axis=0)\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    centroids = np.round(centroids, decimals=4)\n    sorted_centroids = sorted(centroids.tolist())\n    return sorted_centroids\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [9, 8], [8, 9]])\nK = 2"}
{"task_id": 357, "completion_id": 6, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = np.array(data[:K].copy())\n    for _ in range(max_iters):\n        distances = np.sqrt(((data - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.array([data[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        if np.all(np.abs(new_centroids - centroids) < 1e-06):\n            break\n        centroids = new_centroids\n    centroids = np.around(centroids, decimals=4)\n    sorted_centroids = centroids[centroids[:, 0].argsort()]\n    return sorted_centroids.tolist()\nK = 2"}
{"task_id": 357, "completion_id": 7, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    if K == 1:\n        return [np.around(np.mean(data, axis=0).tolist(), decimals=4)]\n    centroids = np.array(data[:K].copy())\n    for _ in range(max_iters):\n        distances = np.sqrt(((data - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.array([np.mean(data[labels == k], axis=0) for k in range(K)])\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    sorted_centroids = np.sort(centroids, axis=0)\n    return [np.around(centroid, decimals=4).tolist() for centroid in sorted_centroids]\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [9, 8], [8, 9]])\nK = 2\ncentroids = kmeans(data, K)"}
{"task_id": 357, "completion_id": 8, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\"\"\"\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        distances = np.sqrt(((data - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        closest = np.argmin(distances, axis=0)\n        new_centroids = np.array([data[closest == k].mean(axis=0) if np.any(closest == k) else centroids[k] for k in range(K)])\n        change = np.sqrt(((centroids - new_centroids) ** 2).sum(axis=1))\n        if np.all(change < 1e-06):\n            break\n        centroids = new_centroids\n    centroids = centroids.tolist()\n    centroids = [[round(coord, 4) for coord in centroid] for centroid in sorted(centroids)]\n    return centroids\nK = 2"}
{"task_id": 357, "completion_id": 9, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = centroids.copy()\n        for k in range(K):\n            if np.sum(labels == k) > 0:\n                new_centroids[k] = np.mean(data[labels == k], axis=0)\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    centroids = np.round(np.sort(centroids, axis=0), decimals=4)\n    return centroids.tolist()\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [9, 8], [8, 9]])\nK = 2"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data_np = np.array(data, dtype=float)\n    row_sums = data_np.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    data_np /= row_sums[:, np.newaxis]\n    data_np_rounded = np.round(data_np, 4)\n    return data_np_rounded.tolist()"}
{"task_id": 362, "completion_id": 1, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | np.ndarray) -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation. If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = matrix.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    row_stochastic = matrix / row_sums[:, np.newaxis]\n    return np.round(row_stochastic, decimals=4).tolist()"}
{"task_id": 362, "completion_id": 2, "solution": "import numpy as np\ndef row_stochastic_matrix(data):\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = matrix.sum(axis=1)\n    if any(row_sums == 0):\n        return -1\n    matrix /= row_sums[:, np.newaxis]\n    matrix = np.round(matrix, 4)\n    return matrix.tolist()"}
{"task_id": 362, "completion_id": 3, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data_array = np.array(data, dtype=float)\n    row_sums = data_array.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    data_stochastic = data_array / row_sums[:, np.newaxis]\n    data_stochastic_rounded = np.around(data_stochastic, decimals=4)\n    return data_stochastic_rounded.tolist()"}
{"task_id": 362, "completion_id": 4, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | np.ndarray) -> list[list[float]] | int:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation. If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = np.sum(matrix, axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    matrix = matrix / row_sums[:, np.newaxis]\n    matrix = np.round(matrix, 4)\n    return matrix.tolist()\ndata = [[1, 2], [3, 1], [4, 5]]"}
{"task_id": 362, "completion_id": 5, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | np.ndarray) -> list[list[float]] | int:\n    \"\"\"\n    Convert a numeric 2-D structure into a row-stochastic matrix.\n    \n    Each row must sum to 1 after transformation. If a row has a sum of\n    0 the function should return -1.\n    \n    Parameters:\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n    \n    Returns:\n    -------\n    list[list[float]] | int\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = matrix.sum(axis=1)\n    if not np.all(row_sums):\n        return -1\n    row_stochastic = matrix / row_sums[:, np.newaxis]\n    row_stochastic = np.round(row_stochastic, decimals=4)\n    result = row_stochastic.tolist()\n    return result\ndata = [[1, 2, 3], [4, 5, 6], [0, 0, 0]]"}
{"task_id": 362, "completion_id": 6, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data = np.array(data, dtype=float)\n    row_sums = data.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    row_stochastic = data / row_sums[:, np.newaxis]\n    row_stochastic = np.round(row_stochastic, 4)\n    return row_stochastic.tolist()"}
{"task_id": 362, "completion_id": 7, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = matrix.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    row_stochastic = matrix / row_sums[:, np.newaxis]\n    row_stochastic = np.round(row_stochastic, 4).tolist()\n    return row_stochastic\ndata = [[1, 2, 0], [0, 0, 3], [2, 0, 2]]"}
{"task_id": 362, "completion_id": 8, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]] | int:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    M = np.array(data, dtype=float)\n    row_sums = np.sum(M, axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    M_stochastic = M / row_sums[:, np.newaxis]\n    M_stochastic = np.round(M_stochastic, 4)\n    return M_stochastic.tolist()"}
{"task_id": 362, "completion_id": 9, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | np.ndarray) -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data_array = np.array(data, dtype=float)\n    row_sums = data_array.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    data_normalized = data_array / row_sums[:, np.newaxis]\n    data_normalized_rounded = np.round(data_normalized, 4)\n    return data_normalized_rounded.tolist()"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Discrete(Space):\n\n    def __init__(self, n: int):\n        self.n = n\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n    \n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def check_space(space: Space) -> bool:\n        if isinstance(space, (Tuple, Dict)):\n            if isinstance(space, Tuple):\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces))\n            else:\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces.values()))\n        else:\n            return isinstance(space, Box)\n    cont_action = check_space(env.action_space) if not tuple_action else all((isinstance(sub_space, Box) for sub_space in env.action_space.spaces))\n    cont_obs = check_space(env.observation_space) if not tuple_obs else all((isinstance(sub_space, Box) for sub_space in env.observation_space.spaces))\n    return (cont_action, cont_obs)\naction_space = Tuple([Box(0.0, 1.0, (4,)), Box(-1.0, 1.0, (2,))])\nobservation_space = Dict({'obs1': Box(0.0, 255.0, (84, 84, 3)), 'obs2': Discrete(3)})"}
{"task_id": 363, "completion_id": 1, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def check_continuous(space: Space) -> bool:\n        if isinstance(space, (Tuple, Dict)):\n            sub_spaces = space.spaces.values() if isinstance(space, Dict) else space.spaces\n            return all((isinstance(sub_space, Box) for sub_space in sub_spaces))\n        return isinstance(space, Box)\n    cont_action = check_continuous(env.action_space) if tuple_action else isinstance(env.action_space, Box)\n    cont_obs = check_continuous(env.observation_space) if tuple_obs else isinstance(env.observation_space, Box)\n    return (cont_action, cont_obs)\naction_space = Tuple([Box(0.0, 1.0, (2,)), Box(-1.0, 1.0, (2,))])\nobservation_space = Dict({'space1': Box(0.0, 10.0, (3,)), 'space2': Box(-5.0, 5.0, (4,))})"}
{"task_id": 363, "completion_id": 2, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def check_continuous(space: Space):\n        \"\"\"Helper function to check continuity of a single space.\"\"\"\n        if isinstance(space, (Tuple, Dict)):\n            sub_spaces = space.spaces.values() if isinstance(space, Dict) else space.spaces\n            return all((isinstance(sub_space, Box) for sub_space in sub_spaces))\n        return isinstance(space, Box)\n    cont_action = check_continuous(env.action_space) if not tuple_action else all((isinstance(sub_space, Box) for sub_space in env.action_space.spaces))\n    cont_obs = check_continuous(env.observation_space) if not tuple_obs else all((isinstance(sub_space, Box) for sub_space in env.observation_space.spaces))\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 3, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Discrete(Space):\n\n    def __init__(self, n: int):\n        self.n = n\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def is_space_continuous(space: Space) -> bool:\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, (Tuple, Dict)):\n            subspaces = space.spaces if isinstance(space, Tuple) else space.spaces.values()\n            return all((is_space_continuous(subspace) for subspace in subspaces))\n        else:\n            return False\n    cont_action = is_space_continuous(env.action_space) if not tuple_action else isinstance(env.action_space, (Tuple, Dict)) and all((isinstance(subspace, Box) for subspace in env.action_space.spaces))\n    cont_obs = is_space_continuous(env.observation_space) if not tuple_obs else isinstance(env.observation_space, (Tuple, Dict)) and all((isinstance(subspace, Box) for subspace in env.observation_space.spaces))\n    return (cont_action, cont_obs)\naction_space = Tuple([Box(-1.0, 1.0, (2,)), Box(-1.0, 1.0, (2,))])\nobservation_space = Dict({'sensor1': Box(-1.0, 1.0, (3, 4)), 'sensor2': Discrete(3)})"}
{"task_id": 363, "completion_id": 4, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Discrete(Space):\n\n    def __init__(self, n: int):\n        self.n = n\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef all_box_spaces(space: Space) -> bool:\n    if isinstance(space, Box):\n        return True\n    elif isinstance(space, Tuple):\n        return all((all_box_spaces(sub_space) for sub_space in space.spaces))\n    elif isinstance(space, Dict):\n        return all((all_box_spaces(sub_space) for sub_space in space.spaces.values()))\n    return False\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    cont_action = not tuple_action and isinstance(env.action_space, Box) or (tuple_action and all_box_spaces(env.action_space))\n    cont_obs = not tuple_obs and isinstance(env.observation_space, Box) or (tuple_obs and all_box_spaces(env.observation_space))\n    return (cont_action, cont_obs)\naction_space = Tuple([Box(0, 100, (1,)), Discrete(3)])\nobservation_space = Dict({'x': Box(-1, 1, (3,)), 'y': Box(0, 5, (2,))})"}
{"task_id": 363, "completion_id": 5, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def all_boxes(spaces: Iterable[Space] or Dict[str, Space]) -> bool:\n        if isinstance(spaces, Dict):\n            return all((isinstance(space, Box) for space in spaces.values()))\n        else:\n            return all((isinstance(space, Box) for space in spaces))\n    cont_action = tuple_action and all_boxes(env.action_space.spaces) or (not tuple_action and isinstance(env.action_space, Box))\n    cont_obs = tuple_obs and all_boxes(env.observation_space.spaces) or (not tuple_obs and isinstance(env.observation_space, Box))\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 6, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def all_boxes(space) -> bool:\n        if isinstance(space, Tuple):\n            return all((all_boxes(s) for s in space.spaces))\n        elif isinstance(space, Dict):\n            return all((all_boxes(s) for s in space.spaces.values()))\n        else:\n            return isinstance(space, Box)\n    cont_action = isinstance(env.action_space, Box) if not tuple_action else all_boxes(env.action_space)\n    cont_obs = isinstance(env.observation_space, Box) if not tuple_obs else all_boxes(env.observation_space)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 7, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def is_space_continuous(space: Space) -> bool:\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, (Tuple, Dict)):\n            sub_spaces = space.spaces.values() if isinstance(space, Dict) else space.spaces\n            return all((is_space_continuous(sub_space) for sub_space in sub_spaces))\n        else:\n            return False"}
{"task_id": 363, "completion_id": 8, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def check_if_continuous(space: Space, tuple_flag: bool) -> bool:\n        if tuple_flag and isinstance(space, (Tuple, Dict)):\n            spaces = space.spaces.values() if isinstance(space, Dict) else space.spaces\n            return all((isinstance(sub_space, Box) for sub_space in spaces))\n        return isinstance(space, Box)\n    cont_action = check_if_continuous(env.action_space, tuple_action)\n    cont_obs = check_if_continuous(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 9, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def check_continuous(space: Space) -> bool:\n        \"\"\"Recursively check if the space is continuous.\"\"\"\n        if isinstance(space, (Tuple, Dict)):\n            sub_spaces = space.spaces.values() if isinstance(space, Dict) else space.spaces\n            return all((check_continuous(sub_space) for sub_space in sub_spaces))\n        else:\n            return isinstance(space, Box)\n    cont_action = check_continuous(env.action_space) if tuple_action else isinstance(env.action_space, Box)\n    cont_obs = check_continuous(env.observation_space) if tuple_obs else isinstance(env.observation_space, Box)\n    return (cont_action, cont_obs)\naction_space = Tuple([Box(-1, 1, (1,)), Box(-2, 2, (2,))])\nobservation_space = Dict({'pos': Box(0, 2, (2,)), 'vel': Box(-1, 1, (1,))})"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.\n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    update_shape = updates[0].shape\n    running_pred = np.zeros(update_shape)\n    for update in updates:\n        running_pred -= learning_rate * update\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        max_logit = running_pred.max(axis=1, keepdims=True)\n        exp_scores = np.exp(running_pred - max_logit)\n        probabilities = exp_scores / np.exp(running_pred - max_logit).sum(axis=1, keepdims=True)\n        return np.argmax(probabilities, axis=1)"}
{"task_id": 369, "completion_id": 1, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = -learning_rate * np.sum(updates, axis=0)\n    if regression:\n        return np.round(running_pred, decimals=4)\n    else:\n\n        def softmax(x):\n            e_x = np.exp(x - np.max(x, axis=1, keepdims=True))\n            return e_x / e_x.sum(axis=1, keepdims=True)\n        probs = softmax(running_pred)\n        class_labels = np.argmax(probs, axis=1)\n        return class_labels"}
{"task_id": 369, "completion_id": 2, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree's\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set `True` for regression problems and `False` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.\n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    first_update = updates[0]\n    if regression:\n        running_pred = np.zeros_like(first_update, dtype=float)\n    else:\n        running_pred = np.zeros_like(first_update, dtype=float)\n    for update in updates:\n        running_pred -= learning_rate * update\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        exps = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities = exps / np.sum(exps, axis=1, keepdims=True)\n        return np.argmax(probabilities, axis=1)\nlearning_rate = 0.1\nregression = True"}
{"task_id": 369, "completion_id": 3, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_prediction = np.zeros(updates[0].shape)\n    for update in updates:\n        running_prediction -= learning_rate * update\n    if regression:\n        return np.round(running_prediction, 4)\n    else:\n        exps = np.exp(running_prediction - np.max(running_prediction, axis=1, keepdims=True))\n        probabilities = exps / np.sum(exps, axis=1, keepdims=True)\n        return np.argmax(probabilities, axis=1)"}
{"task_id": 369, "completion_id": 4, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for update in updates:\n        running_pred -= learning_rate * update\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        exp_vals = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities = exp_vals / np.sum(exp_vals, axis=1, keepdims=True)\n        return np.argmax(probabilities, axis=1)"}
{"task_id": 369, "completion_id": 5, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.\n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    sample_shape = updates[0].shape\n    running_pred = np.zeros(sample_shape)\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.around(running_pred, decimals=4)\n    exp_preds = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n    probabilities = exp_preds / np.sum(exp_preds, axis=1, keepdims=True)\n    return np.argmax(probabilities, axis=1)\nlearning_rate = 0.1"}
{"task_id": 369, "completion_id": 6, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.\n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        exp_scores = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n        return np.argmax(probabilities, axis=1)"}
{"task_id": 369, "completion_id": 7, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        (n_samples,).  For classification it is (n_samples, n_classes).\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree's\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set True for regression problems and False for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    if regression:\n        running_pred = np.zeros(updates[0].shape)\n    else:\n        running_pred = np.zeros(updates[0].shape)\n    if updates:\n        all_updates = np.array(updates)\n        running_pred -= learning_rate * np.sum(all_updates, axis=0)\n    if regression:\n        return np.round(running_pred, 4)\n    e_running_pred = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n    softmax_preds = e_running_pred / e_running_pred.sum(axis=1, keepdims=True)\n    return np.argmax(softmax_preds, axis=1)"}
{"task_id": 369, "completion_id": 8, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.\n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    initial_array = updates[0]\n    running_pred = np.zeros_like(initial_array)\n    for update in updates:\n        running_pred -= learning_rate * update\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        exp_scores = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n        return np.argmax(probabilities, axis=1)"}
{"task_id": 369, "completion_id": 9, "solution": "import numpy as np\ndef softmax(X):\n    \"\"\"Compute the softmax of vector X row-wise.\"\"\"\n    e_X = np.exp(X - np.max(X, axis=1, keepdims=True))\n    return e_X / e_X.sum(axis=1, keepdims=True)\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    updates_array = np.array(updates)\n    if regression:\n        running_pred = -learning_rate * np.sum(updates_array, axis=0)\n        return np.round(running_pred, 4)\n    else:\n        running_pred = -learning_rate * np.sum(updates_array, axis=0)\n        probabilities = softmax(running_pred)\n        return np.argmax(probabilities, axis=1)"}
{"task_id": 371, "completion_id": 0, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    effective_kernel = kernel_width + dilation * (kernel_width - 1)\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        (p_left, p_right) = pad\n    elif pad == 'same':\n        out_length = int(np.ceil(signal_length / stride))\n        total_pad = max(0, (out_length - 1) * stride + effective_kernel - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError(f'Unsupported padding type: {pad}')\n    padded_X = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    output_length = int((signal_length - effective_kernel + p_left + p_right) // stride + 1)\n    output = np.zeros((n_examples, output_length, out_channels), dtype=X.dtype)\n    for i in range(n_examples):\n        for j in range(out_channels):\n            for k in range(output_length):\n                start_index = k * stride\n                window = padded_X[i, start_index:start_index + effective_kernel:dilation + 1, :]\n                output[i, k, j] = np.sum(window * W[:, :, j])\n    return output.tolist()"}
{"task_id": 371, "completion_id": 1, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (w_kernel, in_channels, out_channels) = W.shape\n    effective_kernel_width = (w_kernel - 1) * dilation + 1\n    (X, pad) = apply_padding(X, pad, w_kernel, dilation)\n    output_length = (signal_length + pad[0] + pad[1] - effective_kernel_width) // stride + 1\n    out_volume = np.zeros((n_examples, output_length, out_channels))\n    for i in range(n_examples):\n        for j in range(out_channels):\n            for k in range(output_length):\n                start = k * stride\n                end = start + effective_kernel_width\n                window = X[i, start:end:dilation + 1, :]\n                out_volume[i, k, j] = np.sum(window * W[:, :, j])\n    return out_volume.tolist()\ndef apply_padding(X: np.ndarray, pad, w_kernel: int, dilation: int):\n    \"\"\"Apply zero-padding to the input array as per the pad argument.\n\n    Args:\n        X (np.ndarray): The input array to pad.\n        pad (int, tuple, str): Padding specification.\n        w_kernel (int): Kernel width.\n        dilation (int): Dilation factor.\n\n    Returns:\n        np.ndarray, tuple: The padded array and padding information.\n    \"\"\"\n    padding_effective = calc_effective_padding(X, pad, w_kernel, dilation)\n    if isinstance(padding_effective, tuple):\n        X = np.pad(X, ((0, 0), (padding_effective[0], padding_effective[1]), (0, 0)), 'constant')\n    elif isinstance(padding_effective, str):\n        (n_examples, signal_length, in_channels) = X.shape\n        desired_length = int(np.ceil(signal_length / stride))\n        total_pad = max(0, (desired_length - 1) * stride + (w_kernel - 1) * (dilation + 1) + 1 - signal_length)\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n        X = np.pad(X, ((0, 0), (pad_left, pad_right), (0, 0)), 'constant')\n    else:\n        X = np.pad(X, ((0, 0), (padding_effective, padding_effective), (0, 0)), 'constant')\n    return (X, padding_effective)\ndef calc_effective_padding(X, pad, w_kernel, dilation):\n    \"\"\"Calculate the effective padding based on input arguments.\n\n    Args:\n        X (np.ndarray): The input array.\n        pad (int, tuple, str): Padding specification.\n        w_kernel (int): Kernel width.\n        dilation (int): Dilation factor.\n\n    Returns:\n        int or tuple: Effective padding information.\n    \"\"\"\n    if isinstance(pad, str):\n        if pad.lower() == 'same':\n            return 'same'\n        else:\n            raise ValueError(\"Padding method not recognized. Choose from an integer, 2-tuple, or 'same'\")\n    elif pad != 0:\n        effective_padding = pad if isinstance(pad, tuple) else (pad, pad)\n    else:\n        effective_padding = 0\n    return effective_padding\nX = np.random.rand(1, 10, 2)\nW = np.random.rand(3, 2, 2)\nstride = 1\npad = 'same'\ndilation = 0"}
{"task_id": 371, "completion_id": 2, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n    \n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as list obtained via ``ndarray.tolist()``.\n    \n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighboring kernel elements (0 \u21d2 standard convolution)\n    \n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, l_in, in_channels) = X.shape\n    (k_width, _, out_channels) = W.shape\n    assert in_channels == W.shape[1]\n    effective_kernel = k_width + (k_width - 1) * dilation\n    if pad == 'same':\n        out_len = int(np.ceil(l_in / stride))\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - l_in)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, tuple):\n        (p_left, p_right) = pad\n    else:\n        p_left = p_right = pad\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    l_out = int(np.ceil((l_in + p_left + p_right - effective_kernel) / stride)) + 1\n    output_volume = np.zeros((n_examples, l_out, out_channels))\n    W_dilated = np.zeros((k_width + (k_width - 1) * dilation, in_channels, out_channels))\n    W_dilated[::dilation + 1, :, :] = W\n    for e in range(n_examples):\n        for o in range(l_out):\n            for c_out in range(out_channels):\n                start = o * stride\n                end = start + effective_kernel\n                output_volume[e, o, c_out] = np.sum(X_padded[e, start:end, :] * W_dilated[:, :, c_out])\n    return output_volume.tolist()\nX = np.random.rand(2, 10, 3)\nW = np.random.rand(3, 3, 2)"}
{"task_id": 371, "completion_id": 3, "solution": "import numpy as np\ndef pad_signal(X: np.ndarray, p: int) -> np.ndarray:\n    \"\"\"Pad a signal with zeros on both sides\n\n    Parameters:\n    X (ndarray): Input signal with shape (n_examples, length, in_channels)\n    p (int): Number of zeros to pad on each side\n\n    Returns:\n    ndarray: Padded signal\n    \"\"\"\n    return np.pad(X, ((0, 0), (p, p), (0, 0)), mode='constant')\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    kernel_width = W.shape[0]\n    out_channels = W.shape[2]\n    if dilation > 0:\n        expanded_kernel_width = 1 + (kernel_width - 1) * (1 + dilation)\n    else:\n        expanded_kernel_width = kernel_width\n    if pad == 'same':\n        output_length = int(np.ceil(signal_length / stride))\n        total_pad = max(0, (output_length - 1) * stride + expanded_kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = p_right = pad\n    else:\n        (p_left, p_right) = pad\n    X = pad_signal(X, p_left + p_right)\n    output_length = (signal_length + p_left + p_right - expanded_kernel_width) // stride + 1\n    output = np.zeros((n_examples, output_length, out_channels))\n    for i in range(n_examples):\n        for j in range(output_length):\n            for k in range(out_channels):\n                start = j * stride - p_left\n                end = start + expanded_kernel_width\n                expanded_indices = list(range(start, end, 1 + dilation))\n                output[i, j, k] = np.sum(X[i, expanded_indices, :] * W[:, :, k])\n    return output.tolist()"}
{"task_id": 371, "completion_id": 4, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n, l_in, in_ch) = X.shape\n    (kw, in_ch_W, out_ch) = W.shape\n    assert in_ch == in_ch_W, 'Mismatch in number of input channels.'\n    W_dilated = np.zeros((kw + (kw - 1) * dilation, in_ch, out_ch))\n    W_dilated[::dilation + 1, :, :] = W\n    kw_d = W_dilated.shape[0]\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        (p_left, p_right) = pad\n    elif pad == 'same':\n        out_len = int(np.ceil(l_in / stride))\n        total_pad = max(0, (out_len - 1) * stride + kw_d - l_in)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError(f'Padding mode {pad} not recognized.')\n    X = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    l_out = int((l_in + p_left + p_right - kw_d) // stride) + 1\n    output = np.zeros((n, l_out, out_ch))\n    for i in range(n):\n        for k_out in range(out_ch):\n            for l in range(l_out):\n                start = l * stride\n                end = start + kw_d\n                output[i, l, k_out] = np.sum(X[i, start:end, :] * W_dilated[:, :, k_out])\n    return output.tolist()\nX = np.random.rand(3, 20, 4)\nW = np.random.rand(3, 4, 2)"}
{"task_id": 371, "completion_id": 5, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, in_c, out_channels) = W.shape\n    effective_kernel = (kernel_width - 1) * (dilation + 1) + 1\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        (p_left, p_right) = pad\n    elif pad == 'same':\n        out_len = int(np.ceil(signal_length / stride))\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError('Unsupported padding type')\n    padded_signal = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    output_length = (signal_length + p_left + p_right - effective_kernel) // stride + 1\n    Y = np.zeros((n_examples, output_length, out_channels))\n    for i in range(n_examples):\n        for o in range(out_channels):\n            for c in range(in_channels):\n                for k in range(kernel_width):\n                    shifted_signal = padded_signal[i, :, c]\n                    dilated_kernel = W[k, c, o]\n                    convolved = np.correlate(shifted_signal, np.insert(np.zeros(dilation * k), 0, dilated_kernel))\n                    for j in range(output_length):\n                        Y[i, j, o] += convolved[j * stride]\n    return Y.tolist()\nX = np.array([[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]]])\nW = np.array([[[1, -1], [2, -2]], [[-1, 1], [-2, 2]]])\nstride = 1\npad = 1\ndilation = 1"}
{"task_id": 371, "completion_id": 6, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighboring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, in_channels_w, out_channels) = W.shape\n    effective_kernel = kernel_width + (kernel_width - 1) * dilation\n    if isinstance(pad, str) and pad == 'same':\n        out_length = int(np.ceil(signal_length / stride))\n        total_pad = max(0, (out_length - 1) * stride + effective_kernel - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = pad\n        p_right = pad\n    else:\n        (p_left, p_right) = pad\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    output_length = (X_padded.shape[1] - effective_kernel) // stride + 1\n    output = np.zeros((n_examples, output_length, out_channels))\n    for i in range(output_length):\n        conv_slice = X_padded[:, i * stride:i * stride + effective_kernel:dilation + 1, :]\n        conv_result = np.tensordot(conv_slice, W, axes=([1, 2], [0, 1]))\n        output[:, i, :] = conv_result\n    return output.tolist()\nX = np.random.rand(3, 10, 2)\nW = np.random.rand(3, 2, 4)\nstride = 2\npad = 'same'\ndilation = 1\noutput = conv1D(X, W, stride, pad, dilation)"}
{"task_id": 371, "completion_id": 7, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, in_channels, out_channels) = W.shape\n    W_dilated = np.zeros((kernel_width + (kernel_width - 1) * dilation, in_channels, out_channels))\n    W_dilated[::dilation + 1] = W\n    effective_kernel_width = W_dilated.shape[0]\n    if isinstance(pad, str) and pad == 'same':\n        output_length = int(np.ceil(signal_length / stride))\n        total_pad = max(0, (output_length - 1) * stride + effective_kernel_width - signal_length)\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n    elif isinstance(pad, int):\n        pad_left = pad_right = pad\n    elif isinstance(pad, tuple):\n        (pad_left, pad_right) = pad\n    else:\n        raise ValueError(\"pad must be an integer, a 2-tuple, or 'same'.\")\n    X_padded = np.pad(X, ((0, 0), (pad_left, pad_right), (0, 0)), mode='constant')\n    output_length = int((X_padded.shape[1] - effective_kernel_width) / stride) + 1\n    output_volume = np.zeros((n_examples, output_length, out_channels))\n    for n in range(n_examples):\n        for out_ch in range(out_channels):\n            for t in range(output_length):\n                start = t * stride\n                end = start + effective_kernel_width\n                output_volume[n, t, out_ch] = np.sum(X_padded[n, start:end] * W_dilated[:, :, out_ch])\n    return output_volume.tolist()"}
{"task_id": 371, "completion_id": 8, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, in_channels, out_channels) = W.shape\n    effective_kernel_width = (W.shape[0] - 1) * dilation + 1\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        (p_left, p_right) = pad\n    elif pad == 'same':\n        out_length = int(np.ceil(signal_length / stride))\n        total_pad_width = int(np.max([0, (out_length - 1) * stride + effective_kernel_width - signal_length]))\n        p_left = total_pad_width // 2\n        p_right = total_pad_width - p_left\n    else:\n        raise ValueError('Invalid padding type')\n    padded_signal_length = signal_length + p_left + p_right\n    padded_X = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    output_length = int((padded_signal_length - effective_kernel_width) / stride) + 1\n    output = np.zeros((n_examples, output_length, out_channels))\n    for i in range(n_examples):\n        for o in range(output_length):\n            for c in range(out_channels):\n                feature_map = padded_X[i, o * stride:o * stride + effective_kernel_width:dilation + 1, :]\n                output[i, o, c] = np.sum(feature_map * W[:, :, c])\n    return output.tolist()\nX = np.array([[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]]])\nW = np.array([[[1, 0], [0, 1]], [[0.5, 0], [0, 0.5]]])\nstride = 1\npad = 'same'\ndilation = 0"}
{"task_id": 371, "completion_id": 9, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    effective_kernel = kernel_width + (kernel_width - 1) * dilation - dilation\n    if pad == 'same':\n        out_length = int(np.ceil(signal_length / stride))\n        total_pad = max(0, (out_length - 1) * stride + effective_kernel - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, tuple):\n        (p_left, p_right) = pad\n    else:\n        p_left = pad\n        p_right = pad\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    padded_length = signal_length + p_left + p_right\n    out_length = int((padded_length - effective_kernel) // stride) + 1\n    output = np.zeros((n_examples, out_length, out_channels))\n    for i in range(n_examples):\n        for o in range(out_length):\n            for oc in range(out_channels):\n                for ic in range(in_channels):\n                    for kw in range(kernel_width):\n                        kernel_pos = kw + dilation * kw\n                        input_pos = o * stride + kernel_pos\n                        if 0 <= input_pos < padded_length:\n                            output[i, o, oc] += X_padded[i, input_pos, ic] * W[kw, ic, oc]\n    return output.tolist()"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n    \n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n        \n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    (unique, counts) = np.unique(y, return_counts=True)\n    N = len(y)\n    gini_impurity = 1.0 - np.sum((counts / N) ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 1, "solution": "import numpy as np\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    y = np.array(y)\n    (values, counts) = np.unique(y, return_counts=True)\n    N = counts.sum()\n    sum_of_squares = (counts / N) ** 2\n    gini_impurity = 1 - sum_of_squares.sum()\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 2, "solution": "import numpy as np\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    y = np.array(y)\n    (unique_classes, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 3, "solution": "import numpy as np\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    y = np.array(y)\n    N = y.shape[0]\n    (values, counts) = np.unique(y, return_counts=True)\n    p_c = counts / N\n    gini_impurity = 1 - np.sum(p_c ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 4, "solution": "import numpy as np\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n    \n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n        \n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    y = np.array(y)\n    (classes, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 5, "solution": "import numpy as np\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    y = np.array(y)\n    (values, counts) = np.unique(y, return_counts=True)\n    class_probs = counts / len(y)\n    gini_impurity = 1 - np.sum(class_probs ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 6, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    y = np.array(y)\n    (unique_labels, counts) = np.unique(y, return_counts=True)\n    p_c = counts / len(y)\n    gini_impurity = 1 - np.sum(p_c ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 7, "solution": "import numpy as np\nfrom typing import List\ndef gini(y: List[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    y = np.array(y)\n    (_, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 8, "solution": "import numpy as np\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    y = np.array(y)\n    N = y.size\n    (unique_classes, counts) = np.unique(y, return_counts=True)\n    relative_frequencies = counts / N\n    gini_impurity = 1 - np.sum(relative_frequencies ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 9, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    (unique_classes, counts) = np.unique(y, return_counts=True)\n    total_samples = len(y)\n    gini_impurity = 1.0 - np.sum((counts / total_samples) ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n    \n    Args:\n        X (np.ndarray): Feature matrix of shape (m samples, n features).\n        y (np.ndarray): Target vector of shape (m samples).\n        learning_rate (float): The learning rate.\n        n_iterations (int): The number of iterations.\n    \n    Returns:\n        A tuple (weights_list, bias) where weights are rounded to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if m != y.shape[0]:\n        return -1\n    theta = np.zeros(n)\n    bias = 0.0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, theta) + bias\n        dw = 2 / m * np.dot(X.T, y_pred - y)\n        db = 2 / m * np.sum(y_pred - y)\n        theta -= learning_rate * dw\n        bias -= learning_rate * db\n    return (list(np.round(theta, 4)), np.round(bias, 4))"}
{"task_id": 374, "completion_id": 1, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    (m, n) = X.shape\n    if m != y.shape[0]:\n        return -1\n    theta = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_pred = X.dot(theta) + b\n        errors = y_pred - y\n        dw = 2 / m * X.T.dot(errors)\n        db = 2 / m * errors.sum()\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    weights_list = [round(i, 4) for i in theta.tolist()]\n    return (weights_list, round(b, 4))"}
{"task_id": 374, "completion_id": 2, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_pred = X.dot(theta) + b\n        error = y_pred - y\n        dw = 2 / m * X.T.dot(error)\n        db = 2 / m * np.sum(error)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    return (theta.round(4).tolist(), round(b, 4))"}
{"task_id": 374, "completion_id": 3, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_pred = X.dot(theta) + b\n        error = y_pred - y\n        dw = 2 / m * X.T.dot(error)\n        db = 2 / m * np.sum(error)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    return (list(np.round(theta, 4)), np.round(b, 4))\ny = np.array([2, 4, 6])"}
{"task_id": 374, "completion_id": 4, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    (m, n) = X.shape\n    if m != y.shape[0]:\n        return -1\n    theta = np.zeros(n)\n    bias = 0.0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, theta) + bias\n        error = y_pred - y\n        dw = 2 / m * np.dot(X.T, error)\n        db = 2 / m * np.sum(error)\n        theta -= learning_rate * dw\n        bias -= learning_rate * db\n    theta = [round(weight, 4) for weight in theta]\n    bias = round(bias, 4)\n    return (theta, bias)\nX = np.array([[2.3, 4.5], [3.2, 5.6], [7.4, 8.9], [4.5, 9.9]])\ny = np.array([2.2, 5.4, 7.4, 9.5])"}
{"task_id": 374, "completion_id": 5, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    for i in range(n_iterations):\n        y_pred = np.dot(X, theta) + b\n        error = y_pred - y\n        dtheta = 2 / m * np.dot(X.T, error)\n        db = 2 / m * np.sum(error)\n        theta -= learning_rate * dtheta\n        b -= learning_rate * db\n    theta = [round(theta_i, 4) for theta_i in theta]\n    b = round(b, 4)\n    return (theta, b)\nX = np.array([[5, 1], [1, 1], [8, 1], [1, 0], [0, 0], [5, 1]])\ny = np.array([0.01, 0.04, 0.08, 0.1, 0.15, 0.2])"}
{"task_id": 374, "completion_id": 6, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    bias = 0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, theta) + bias\n        dw = 1 / m * np.dot(X.T, y_pred - y)\n        db = 1 / m * np.sum(y_pred - y)\n        theta -= learning_rate * dw\n        bias -= learning_rate * db\n    theta_rounded = list(np.around(theta, decimals=4))\n    bias_rounded = np.around(bias, decimals=4)\n    return (theta_rounded, bias_rounded)"}
{"task_id": 374, "completion_id": 7, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    b = 0\n    for _ in range(n_iterations):\n        y_pred = X.dot(theta) + b\n        error = y_pred - y\n        dw = 2 / m * X.T.dot(error)\n        db = 2 / m * np.sum(error)\n        theta = theta - learning_rate * dw\n        b = b - learning_rate * db\n    weights_list = [round(x, 4) for x in theta.tolist()]\n    bias = round(b, 4)\n    return (weights_list, bias)\ny = np.array([1.0, 2.0, 3.0])"}
{"task_id": 374, "completion_id": 8, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    m = X.shape[0]\n    n = X.shape[1]\n    theta = np.zeros(n)\n    b = 0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, theta) + b\n        error = y_pred - y\n        dw = 2 / m * np.dot(X.T, error)\n        db = 2 / m * np.sum(error)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    return (np.round(theta, 4).tolist(), np.round(b, 4))"}
{"task_id": 374, "completion_id": 9, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    (m, n) = X.shape\n    if m != len(y):\n        return -1\n    theta = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, theta) + b\n        errors = y_pred - y\n        dw = 2 / m * np.dot(X.T, errors)\n        db = 2 / m * np.sum(errors)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    return (list(np.round(theta, 4)), np.round(b, 4))"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_np = np.array(X)\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    return np.allclose(X_np, X_np.T, atol=1e-08)"}
{"task_id": 376, "completion_id": 1, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_np = np.array(X)\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    return np.allclose(X_np, X_np.T)"}
{"task_id": 376, "completion_id": 2, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_np = np.array(X)\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    return np.allclose(X_np, X_np.T, atol=1e-08)"}
{"task_id": 376, "completion_id": 3, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    try:\n        X_array = np.array(X)\n        if len(X_array.shape) != 2 or X_array.shape[0] != X_array.shape[1]:\n            return False\n        return np.allclose(X_array, X_array.T, atol=1e-08)\n    except Exception as e:\n        return False"}
{"task_id": 376, "completion_id": 4, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    array = np.array(X)\n    if array.shape[0] != array.shape[1]:\n        return False\n    return np.allclose(array, array.T, atol=1e-08)"}
{"task_id": 376, "completion_id": 5, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_np = np.array(X)\n    if not X_np.shape[0] == X_np.shape[1]:\n        return False\n    return np.allclose(X_np, X_np.T, atol=1e-08)"}
{"task_id": 376, "completion_id": 6, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n    \n    A matrix is symmetric if it is square and equal to its own transpose.\n    \n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n    \n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_arr = np.array(X)\n    if X_arr.shape[0] != X_arr.shape[1]:\n        return False\n    return np.allclose(X_arr, X_arr.T)"}
{"task_id": 376, "completion_id": 7, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_arr = np.array(X)\n    if X_arr.shape[0] != X_arr.shape[1]:\n        return False\n    X_transpose = X_arr.T\n    return np.allclose(X_arr, X_transpose)"}
{"task_id": 376, "completion_id": 8, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_np = np.array(X)\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    return np.allclose(X_np, X_np.T)"}
{"task_id": 376, "completion_id": 9, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_np = np.array(X)\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    X_transpose = X_np.T\n    return np.allclose(X_np, X_transpose, atol=1e-08)"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient for the logistic loss function used in gradient boosting.\n    \n    Parameters:\n    y (list): The list of binary class labels (0 or 1) for the samples.\n    f (list): The current prediction scores (any real number) made by the model for the samples.\n    \n    Returns:\n    list: A list of the negative gradient values for the logistic loss, rounded to the nearest 4th decimal.\n         Returns -1 if y contains values other than 0 or 1.\n    \"\"\"\n    if not all((label in [0, 1] for label in y)):\n        return -1\n    y_prime = np.array(y) * 2 - 1\n    f = np.array(f)\n    g = y_prime / (1 + np.exp(y_prime * f))\n    g_rounded = np.round(g, 4)\n    return g_rounded.tolist()\ny = [0, 1, 1, 0]\nf = [0.5, -0.5, 1.0, -1.0]"}
{"task_id": 377, "completion_id": 1, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient for the logistic loss in gradient boosting.\n\n    Parameters:\n    y (list[int]): The binary class labels (0 or 1).\n    f (list[float]): The current prediction scores for the samples.\n\n    Returns:\n    list[float]: The negative gradients rounded to 4 decimal places if all labels are 0 or 1.\n                 Returns -1 if any of the labels in `y` are not 0 or 1.\n\n    Notes:\n    - Internally converts labels to {-1, 1} by using the rule: y' = 2y - 1.\n    - Computes the logistic loss negative gradient: g_i = y'_i / (1 + exp(y'_i f_i)).\n    \"\"\"\n    if not all((label in [0, 1] for label in y)):\n        return -1\n    y_prime = 2 * np.array(y) - 1\n    g = y_prime / (1 + np.exp(y_prime * f))\n    g = np.round(g, 4)\n    return g.tolist()\ny = [0, 1, 0, 1]\nf = [0.2, -1.5, 1.0, -0.5]"}
{"task_id": 377, "completion_id": 2, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculates the negative gradients for Gradient Boosting with logistic loss.\n    \n    Parameters:\n    y (list of int): Binary class labels, expected to be 0 or 1.\n    f (list of float): Current model prediction scores.\n    \n    Returns:\n    list of float: Negative gradients for the given labels and prediction scores.\n                   Each value is rounded to the nearest 4th decimal.\n                   If y contains values other than 0 or 1, returns -1.\n    \"\"\"\n    if not all((label in {0, 1} for label in y)):\n        return -1\n    y_prime = np.array(y) * 2 - 1\n    negative_gradients = y_prime / (1 + np.exp(y_prime * np.array(f)))\n    rounded_gradients = [round(grad, 4) for grad in negative_gradients]\n    return rounded_gradients\ny = [0, 1, 0, 1]\nf = [1.0, -0.5, 2.0, -1.5]"}
{"task_id": 377, "completion_id": 3, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculate the negative gradient for logistic loss for binary classification.\n\n    Parameters:\n    y (list): A list of binary class labels (0 or 1).\n    f (list): A list of current prediction scores (floats).\n\n    Returns:\n    list: A list of negative gradients corresponding to each sample, rounded to 4 decimal places.\n         Returns -1 if y contains values other than 0 or 1.\n    \"\"\"\n    if not all((label in [0, 1] for label in y)):\n        return -1\n    y_prime = np.array(y) * 2 - 1\n    g = y_prime / (1 + np.exp(y_prime * np.array(f)))\n    return [round(value, 4) for value in g.tolist()]\ny = [0, 1, 1, 0]\nf = [-1.5, 0.9, 0.1, -0.5]"}
{"task_id": 377, "completion_id": 4, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient of the logistic loss function for a given set of labels and predictions.\n    \n    Parameters:\n    y (list): A one-dimensional list of binary class labels (0 or 1).\n    f (list): A one-dimensional list of current prediction scores (floats).\n    \n    Returns:\n    list: A list of negative gradients rounded to 4 decimal places.\n    If the labels contain values other than 0 or 1, returns -1.\n    \"\"\"\n    if not all((label in [0, 1] for label in y)):\n        return -1\n    y_prime = np.array([2 * label - 1 for label in y])\n    f = np.array(f)\n    g = y_prime / (1 + np.exp(y_prime * f))\n    g_rounded = np.round(g, 4).tolist()\n    return g_rounded\ny = [1, 0, 1, 1]\nf = [0.5, -0.2, 1.3, 0.9]"}
{"task_id": 377, "completion_id": 5, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient for the logistic loss function used in gradient boosting.\n    \n    Parameters:\n    y (list of int): Binary class labels, i.e., 0 or 1.\n    f (list of float): Current prediction scores for the samples.\n    \n    Returns:\n    list of float: The negative gradient of the logistic loss function for each sample.\n    \n    If the input list y contains elements other than 0 or 1, the function returns -1.\n    \"\"\"\n    if not all((label in [0, 1] for label in y)):\n        return -1\n    y_prime = np.array([2 * label - 1 for label in y])\n    f = np.array(f)\n    g = y_prime / (1 + np.exp(y_prime * f))\n    g_rounded = [round(gradient, 4) for gradient in g]\n    return g_rounded"}
{"task_id": 377, "completion_id": 6, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculates the negative gradient of the logistic loss function for binary classification.\n    \n    Parameters:\n    y (list of int): Binary labels, where each element is either 0 or 1.\n    f (list of float): Predictions from the current model, any real number.\n    \n    Returns:\n    list of float: Negative gradients of the logistic loss rounded to 4 decimal places.\n    If y contains values other than 0 or 1, returns -1.\n    \"\"\"\n    if not all([label == 0 or label == 1 for label in y]):\n        return -1\n    y_prime = np.array(y) * 2 - 1\n    f = np.array(f)\n    negative_gradient = y_prime / (1 + np.exp(y_prime * f))\n    return [round(g, 4) for g in negative_gradient]"}
{"task_id": 377, "completion_id": 7, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculate the negative gradient of the logistic loss function for binary classification.\n    \n    Parameters:\n    y (list of int): A list of binary class labels (0 or 1).\n    f (list of float): A list of current prediction scores.\n    \n    Returns:\n    list of float: A list of negative gradient values rounded to four decimal places.\n    \n    If the labels in y are not 0 or 1, return -1.\n    \"\"\"\n    for label in y:\n        if label not in [0, 1]:\n            return -1\n    y_prime = [2 * label - 1 for label in y]\n    g = [label / (1 + np.exp(label * score)) for (label, score) in zip(y_prime, f)]\n    g_rounded = [round(value, 4) for value in g]\n    return g_rounded\ny = [0, 1, 0, 1]\nf = [0.3, -0.2, 0.1, -0.5]"}
{"task_id": 377, "completion_id": 8, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient of the logistic loss function for a given set of predictions and labels.\n    \n    Parameters:\n    y (list): A list of binary class labels (0 or 1).\n    f (list): A list of current prediction scores (floats).\n    \n    Returns:\n    list: The list of negative gradients for each sample.\n    If the label array contains values other than 0 or 1, the function returns -1.\n    \"\"\"\n    if not all((label in [0, 1] for label in y)):\n        return -1\n    y_prime = np.array(y) * 2 - 1\n    f = np.array(f)\n    g = y_prime / (1 + np.exp(y_prime * f))\n    return [round(gi, 4) for gi in g]\ny = [0, 1, 1, 0]\nf = [0.2, 0.6, -1.5, 0.8]"}
{"task_id": 377, "completion_id": 9, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Compute the negative gradient of the logistic (binomial deviance) loss for binary classification.\n    \n    Parameters:\n    y (list of int): Binary class labels (0 or 1).\n    f (list of float): Current prediction scores.\n    \n    Returns:\n    list of float: Negative gradients g rounded to 4 decimal places.\n    \n    If any label in y is not 0 or 1, return -1.\n    \"\"\"\n    for label in y:\n        if label not in [0, 1]:\n            return -1\n    y_prime = np.array(2 * np.array(y) - 1, dtype=float)\n    f = np.array(f, dtype=float)\n    exponent = np.exp(-y_prime * f)\n    g = y_prime / (1 + exponent)\n    g_rounded = np.round(g, 4)\n    return g_rounded.tolist()"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x = np.array(x)\n    if order == 0:\n        result = np.where(x > 0, scale * x, scale * alpha * (np.exp(x) - 1))\n    elif order == 1:\n        result = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    elif order == 2:\n        result = np.where(x > 0, np.zeros_like(x), scale * alpha * np.exp(x))\n    else:\n        raise ValueError('Order must be 0, 1, or 2')\n    return np.round(result, 4).tolist()\nx = np.array([-1.0, 0.0, 1.0])"}
{"task_id": 380, "completion_id": 1, "solution": "import numpy as np\nalpha = 1.6732632423543772\nscale = 1.0507009873554805\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    x = np.array(x)\n    if order == 0:\n        elu = np.where(x > 0, x, alpha * (np.exp(x) - 1))\n        selu_val = scale * elu\n    elif order == 1:\n        selu_val = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    elif order == 2:\n        selu_val = np.where(x > 0, np.zeros_like(x), scale * alpha * np.exp(x))\n    else:\n        raise ValueError('Order must be 0, 1, or 2')\n    return np.round(selu_val, decimals=4).tolist()"}
{"task_id": 380, "completion_id": 2, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x = np.atleast_1d(x)\n    if order == 0:\n        selu_x = scale * np.where(x > 0, x, alpha * (np.exp(x) - 1))\n    elif order == 1:\n        selu_x = scale * np.where(x > 0, 1, alpha * np.exp(x))\n    elif order == 2:\n        selu_x = scale * np.where(x > 0, 0, alpha * np.exp(x))\n    else:\n        raise ValueError('Invalid order provided. Order must be 0, 1, or 2.')\n    selu_x = np.round(selu_x, decimals=4).tolist()\n    if isinstance(x, (int, float)):\n        return selu_x[0]\n    return selu_x"}
{"task_id": 380, "completion_id": 3, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    scalar_input = False\n    if not isinstance(x, (np.ndarray, list)):\n        scalar_input = True\n        x = np.array([x])\n    x = np.array(x)\n    if order == 0:\n        selu_result = scale * np.where(x > 0, x, alpha * (np.exp(x) - 1))\n    elif order == 1:\n        selu_result = scale * np.where(x > 0, 1, alpha * np.exp(x))\n    elif order == 2:\n        selu_result = scale * np.where(x > 0, 0, alpha * np.exp(x))\n    else:\n        raise ValueError('Order must be 0, 1, or 2')\n    selu_result = np.round(selu_result, decimals=4)\n    if scalar_input:\n        return selu_result.tolist()[0]\n    else:\n        return selu_result.tolist()"}
{"task_id": 380, "completion_id": 4, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x = np.array(x)\n    if order == 0:\n        selu_result = np.where(x > 0, scale * x, scale * (alpha * (np.exp(x) - 1)))\n    elif order == 1:\n        selu_result = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    elif order == 2:\n        selu_result = np.where(x > 0, np.zeros_like(x), scale * alpha * np.exp(x))\n    else:\n        raise ValueError('Unsupported order.')\n    selu_result = np.round(selu_result, decimals=4)\n    if len(x.shape) > 0:\n        ret = selu_result.tolist()\n    else:\n        ret = selu_result.item()\n    return ret"}
{"task_id": 380, "completion_id": 5, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x_np = np.array(x)\n    if order == 0:\n        result = scale * np.where(x_np > 0, x_np, alpha * (np.exp(x_np) - 1))\n    elif order == 1:\n        result = scale * np.where(x_np > 0, 1, alpha * np.exp(x_np))\n    elif order == 2:\n        result = scale * np.where(x_np > 0, 0, alpha * np.exp(x_np))\n    else:\n        raise ValueError('Order must be 0, 1, or 2')\n    result_rounded = np.round(result, decimals=4)\n    if isinstance(x, float) or isinstance(x, int):\n        return float(result_rounded.tolist())\n    else:\n        return result_rounded.tolist()"}
{"task_id": 380, "completion_id": 6, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n\n    def elu(x, alpha):\n        return np.where(x > 0, x, alpha * (np.exp(x) - 1))\n\n    def elu_derivative(x, alpha):\n        return np.where(x > 0, 1, alpha * np.exp(x))\n\n    def elu_second_derivative(x, alpha):\n        return np.where(x > 0, 0, alpha * np.exp(x))\n    x = np.array(x)\n    if order == 0:\n        result = scale * elu(x, alpha)\n    elif order == 1:\n        result = scale * elu_derivative(x, alpha)\n    elif order == 2:\n        result = scale * elu_second_derivative(x, alpha)\n    else:\n        raise ValueError('Order must be 0, 1, or 2.')\n    result = np.round(result, 4).tolist()\n    if isinstance(x, (list, np.ndarray)) and (not isinstance(x, np.void)):\n        return result\n    else:\n        return result[0] if isinstance(result, list) else result"}
{"task_id": 380, "completion_id": 7, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    ALPHA = 1.6732632423543772\n    SCALE = 1.0507009873554805\n    x = np.array(x)\n    if order == 0:\n        result = SCALE * np.where(x > 0, x, ALPHA * (np.exp(x) - 1))\n    elif order == 1:\n        result = SCALE * np.where(x > 0, np.ones_like(x), ALPHA * np.exp(x))\n    elif order == 2:\n        result = SCALE * np.where(x > 0, np.zeros_like(x), ALPHA * np.exp(x))\n    else:\n        raise ValueError('Order must be 0, 1, or 2.')\n    result_rounded = np.round(result, decimals=4)\n    if isinstance(x, np.ndarray):\n        return result_rounded.tolist()\n    else:\n        return float(result_rounded)"}
{"task_id": 380, "completion_id": 8, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    \u03b1 = 1.6732632423543772\n    scale = 1.0507009873554805\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    if order == 0:\n        result = np.where(x > 0, x, \u03b1 * (np.exp(x) - 1)) * scale\n    elif order == 1:\n        result = np.where(x > 0, 1, \u03b1 * np.exp(x)) * scale\n    elif order == 2:\n        result = np.where(x > 0, 0, \u03b1 * np.exp(x)) * scale\n    else:\n        raise ValueError('Order must be 0, 1, or 2.')\n    result = np.round(result, 4).tolist()\n    return result"}
{"task_id": 380, "completion_id": 9, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x_np = np.asarray(x)\n    if order == 0:\n        result = scale * np.where(x_np > 0, x_np, alpha * (np.exp(x_np) - 1))\n    elif order == 1:\n        result = scale * np.where(x_np > 0, 1, alpha * np.exp(x_np))\n    elif order == 2:\n        result = scale * np.where(x_np > 0, 0, alpha * np.exp(x_np))\n    else:\n        raise ValueError('order must be 0, 1, or 2')\n    return np.round(result, 4).tolist()"}
{"task_id": 387, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(x)\n    predictions = np.full(n_samples, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - predictions\n        sorted_indices = np.argsort(x)\n        (sorted_x, sorted_res) = (x[sorted_indices], residuals[sorted_indices])\n        global_mean_residual = np.mean(sorted_res)\n        best_split = None\n        best_score = float('inf')\n        for i in range(n_samples - 1):\n            if sorted_x[i] != sorted_x[i + 1]:\n                t = (sorted_x[i] + sorted_x[i + 1]) / 2\n                left_indices = sorted_indices[x <= t]\n                right_indices = sorted_indices[x > t]\n                if len(left_indices) > 0 and len(right_indices) > 0:\n                    left_mean = np.mean(residuals[left_indices])\n                    right_mean = np.mean(residuals[right_indices])\n                    score = np.sum((residuals[left_indices] - left_mean) ** 2) + np.sum((residuals[right_indices] - right_mean) ** 2)\n                    if score < best_score:\n                        best_score = score\n                        best_split = t\n                        best_means = (left_mean, right_mean)\n        if best_split is None:\n            predictions += learning_rate * global_mean_residual\n        else:\n            left_indices = x <= best_split\n            right_indices = x > best_split\n            predictions[left_indices] += learning_rate * best_means[0]\n            predictions[right_indices] += learning_rate * best_means[1]\n    return np.round(predictions, 4).tolist()\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny = [1.0, 1.2, 1.3, 1.5, 1.7, 2.4, 3.1, 3.7, 3.9, 4.0]\nn_estimators = 100\nlearning_rate = 0.1\npredictions = gradient_boosting_1d(x, y, n_estimators, learning_rate)"}
{"task_id": 387, "completion_id": 1, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(x)\n    predictions = np.full(n_samples, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - predictions\n        sort_idx = np.argsort(x)\n        sorted_x = x[sort_idx]\n        sorted_res = residuals[sort_idx]\n        best_t = None\n        best_sse = float('inf')\n        best_prediction = np.mean(residuals)\n        for i in range(1, n_samples):\n            if sorted_x[i] != sorted_x[i - 1]:\n                t = (sorted_x[i - 1] + sorted_x[i]) / 2\n                left_idx = x <= t\n                right_idx = x > t\n                if np.any(left_idx) and np.any(right_idx):\n                    rhat_L = np.mean(residuals[left_idx])\n                    rhat_R = np.mean(residuals[right_idx])\n                    rhat = np.where(left_idx, rhat_L, rhat_R)\n                    sse = np.sum((residuals - rhat) ** 2)\n                    if sse < best_sse:\n                        best_sse = sse\n                        best_t = t\n                        best_prediction = rhat\n        if best_t is not None:\n            predictions += learning_rate * best_prediction\n        else:\n            predictions += learning_rate * best_prediction\n    return np.round(predictions, 4).tolist()\nx = [1.2, 2.5, 3.7, 5.2, 6.5, 7.3]\ny = [3.3, 2.8, 4.1, 3.9, 6.4, 3.8]\nn_estimators = 100\nlearning_rate = 0.1\npredictions = gradient_boosting_1d(x, y, n_estimators, learning_rate)"}
{"task_id": 387, "completion_id": 2, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(x)\n    y_pred = np.full(n_samples, y.mean())\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_res = residuals[sorted_indices]\n        thresholds = (sorted_x[:-1] + sorted_x[1:]) / 2\n        best_threshold = None\n        min_error = np.inf\n        for t in thresholds:\n            indices_left = sorted_indices[x[sorted_indices] <= t]\n            indices_right = sorted_indices[x[sorted_indices] > t]\n            if indices_left.size == 0 or indices_right.size == 0:\n                continue\n            r_left = sorted_res[sorted_indices[sorted_indices] <= t].mean()\n            r_right = sorted_res[sorted_indices[sorted_indices] > t].mean()\n            pred_res = np.where(x <= t, r_left, r_right)\n            error = ((sorted_res - pred_res[sorted_indices]) ** 2).sum()\n            if error < min_error:\n                min_error = error\n                best_threshold = t\n        if best_threshold is not None:\n            r_left = residuals[x <= best_threshold].mean()\n            r_right = residuals[x > best_threshold].mean()\n            pred_res = np.where(x <= best_threshold, r_left, r_right)\n        else:\n            pred_res = residuals.mean()\n        y_pred += learning_rate * pred_res\n    return list(np.round(y_pred, 4))\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny = [1.1, 2.2, 3.3, 4.4, 5.5]\nn_estimators = 10"}
{"task_id": 387, "completion_id": 3, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n    \n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n    \n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y), dtype=float)\n\n    def find_best_split(sorted_x, sorted_residuals):\n        (unique_x, unique_indices) = np.unique(sorted_x, return_index=True)\n        (best_rss, best_split_index) = (float('inf'), -1)\n        for i in range(1, len(unique_x)):\n            split_value = (unique_x[i - 1] + unique_x[i]) / 2\n            left_residuals = sorted_residuals[:unique_indices[i]]\n            right_residuals = sorted_residuals[unique_indices[i]:]\n            (mean_left, mean_right) = (np.mean(left_residuals), np.mean(right_residuals))\n            rss = np.sum((left_residuals - mean_left) ** 2) + np.sum((right_residuals - mean_right) ** 2)\n            if rss < best_rss:\n                best_rss = rss\n                best_split_index = unique_indices[i]\n                best_split_value = split_value\n        if best_split_index == -1:\n            return (np.mean(sorted_residuals), best_split_value)\n        return (best_split_index, best_split_value)\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        (best_split_index, best_split_value) = find_best_split(sorted_x, sorted_residuals)\n        stump_predictions = np.full_like(sorted_residuals, np.mean(sorted_residuals))\n        if best_split_index != -1:\n            stump_predictions[sorted_indices[best_split_index]:] = np.mean(sorted_residuals[best_split_index:])\n        y_pred += learning_rate * smtp_predictions\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 387, "completion_id": 4, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n\n    def find_best_split(x, y, residuals):\n        unique_indices = np.unique(np.array(x), return_index=True)[1]\n        (x_sorted, y_sorted, residuals_sorted) = (np.array(x)[unique_indices], np.array(y)[unique_indices], np.array(residuals)[unique_indices])\n        best_sse = float('inf')\n        best_split = None\n        best_predictions = None\n        for i in range(1, len(x_sorted)):\n            split_point = (x_sorted[i - 1] + x_sorted[i]) / 2\n            left_mask = np.array(x) <= split_point\n            right_mask = np.array(x) > split_point\n            if left_mask.sum() > 0 and right_mask.sum() > 0:\n                rhat_left = np.mean(residuals_sorted[left_mask])\n                rhat_right = np.mean(residuals_sorted[right_mask])\n                rhat = np.where(left_mask, rhat_left, rhat_right)\n                sse = np.sum((residuals_sorted - rhat) ** 2)\n                if sse < best_sse:\n                    best_sse = sse\n                    best_split = split_point\n                    best_predictions = rhat\n            else:\n                rhat = np.mean(residuals_sorted)\n                best_predictions = np.full_like(residuals, rhat)\n        return (best_split, best_predictions)\n    (x, y) = (np.array(x), np.array(y))\n    n_samples = len(x)\n    predictions = np.full(n_samples, np.mean(y))\n    residuals = y - predictions\n    for _ in range(n_estimators):\n        (_, stump_predictions) = find_best_split(x, y, residuals)\n        predictions += learning_rate * stump_predictions\n        residuals = y - predictions\n    return list(np.round(predictions, 4))\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny = [1.1, 1.9, 3.1, 4.1, 5.0]\nn_estimators = 50\nlearning_rate = 0.1"}
{"task_id": 387, "completion_id": 5, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full(len(y), np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        if len(np.unique(x)) == 1:\n            update = np.mean(residuals)\n            y_pred += learning_rate * update\n        else:\n            sort_indices = np.argsort(x)\n            sorted_x = x[sort_indices]\n            sorted_residuals = residuals[sort_indices]\n            best_split = None\n            best_mse = np.inf\n            for i in range(1, len(x)):\n                (x1, x2) = (sorted_x[i - 1], sorted_x[i])\n                if x1 != x2:\n                    split = (x1 + x2) / 2\n                    left_indices = sorted_x <= split\n                    right_indices = sorted_x > split\n                    if np.any(left_indices) and np.any(right_indices):\n                        left_mean = np.mean(sorted_residuals[left_indices])\n                        right_mean = np.mean(sorted_residuals[right_indices])\n                        left_mse = np.mean((sorted_residuals[left_indices] - left_mean) ** 2)\n                        right_mse = np.mean((sorted_residuals[right_indices] - right_mean) ** 2)\n                        mse = left_mse + right_mse\n                        if mse < best_mse:\n                            best_mse = mse\n                            best_split = split\n                            best_left_mean = left_mean\n                            best_right_mean = right_mean\n            update = np.where(x <= best_split, best_left_mean, best_right_mean)\n            y_pred += learning_rate * update\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 387, "completion_id": 6, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(y)\n    y_pred = np.full(n_samples, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        x_sorted = x[sorted_indices]\n        residuals_sorted = residuals[sorted_indices]\n        midpoints = (x_sorted[1:] + x_sorted[:-1]) / 2\n        if len(midpoints) == 0:\n            stump_preds = np.full(n_samples, np.mean(residuals))\n        else:\n            best_split = None\n            best_error = float('inf')\n            for split in midpoints:\n                mask_left = x_sorted <= split\n                mask_right = x_sorted > split\n                if not mask_left.any() or not mask_right.any():\n                    continue\n                r_left_mean = np.mean(residuals_sorted[mask_left])\n                r_right_mean = np.mean(residuals_sorted[mask_right])\n                pred_left = np.full(np.sum(mask_left), r_left_mean)\n                pred_right = np.full(np.sum(mask_right), r_right_mean)\n                predictions = np.concatenate((pred_left, pred_right))\n                error = np.sum((residuals_sorted - predictions) ** 2)\n                if error < best_error:\n                    best_error = error\n                    best_split = split\n            if best_split is not None:\n                stump_preds = np.full(n_samples, np.mean(residuals))\n                stump_preds[x <= best_split] = np.mean(residuals[x <= best_split])\n                stump_preds[x > best_split] = np.mean(residuals[x > best_split])\n            else:\n                stump_preds = np.full(n_samples, np.mean(residuals))\n        y_pred += learning_rate * stump_preds\n    return np.round(y_pred.tolist(), 4)\nx = [1, 4, 6, 10, 15]\ny = [10, 20, 15, 30, 45]\nn_estimators = 3\nlearning_rate = 0.1"}
{"task_id": 387, "completion_id": 7, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y), dtype=float)\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        split_points = (sorted_x[:-1] + sorted_x[1:]) / 2\n        best_split_error = float('inf')\n        for split in split_points:\n            left_indices = sorted_indices[sorted_x <= split]\n            right_indices = sorted_indices[sorted_x > split]\n            if len(left_indices) == 0 or len(right_indices) == 0:\n                continue\n            mean_left = np.mean(sorted_residuals[sorted_x <= split])\n            mean_right = np.mean(sorted_residuals[sorted_x > split])\n            prediction = np.where(x <= split, mean_left, mean_right)\n            error = np.sum((sorted_residuals - prediction[sorted_indices]) ** 2)\n            if error < best_split_error:\n                best_split_error = error\n                best_split_pred = prediction\n        if len(split_points) == 0:\n            best_split_pred = np.mean(residuals)\n        y_pred += learning_rate * best_split_pred\n    return np.round(y_pred, 4).tolist()\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny = [1.1, 1.9, 3.1, 4.1, 4.9]\nn_estimators = 100\nlearning_rate = 0.1"}
{"task_id": 387, "completion_id": 8, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    predictions = np.full_like(y, np.mean(y), dtype=float)\n    for _ in range(n_estimators):\n        residuals = y - predictions\n        if len(np.unique(x)) == 1:\n            predictions += learning_rate * np.mean(residuals)\n            continue\n        sorted_indices = np.argsort(x)\n        unique_sorted_indices = np.unique(sorted_indices)\n        (x_sorted, residual_sorted) = (x[sorted_indices], residuals[sorted_indices])\n        split_points = (x_sorted[unique_sorted_indices[:-1]] + x_sorted[unique_sorted_indices[1:]]) / 2\n        min_error = float('inf')\n        best_split = None\n        for t in split_points:\n            mask_left = x_sorted <= t\n            mask_right = ~mask_left\n            r_left = np.mean(residual_sorted[mask_left])\n            r_right = np.mean(residual_sorted[mask_right])\n            r_hat = np.where(mask_left, r_left, r_right)\n            split_error = np.sum((r_hat - residual_sorted) ** 2)\n            if split_error < min_error:\n                min_error = split_error\n                best_split = t\n        mask_left = x_sorted <= best_split\n        mask_right = ~mask_left\n        r_left = np.mean(residual_sorted[mask_left])\n        r_right = np.mean(residual_sorted[mask_right])\n        r_hat = np.where(mask_left, r_left, r_right)\n        predictions[sorted_indices] += learning_rate * r_hat\n    return np.round(predictions, 4).tolist()\nx = [1, 2, 3, 4, 5]\ny = [1, 3, 3, 4, 4]\npredictions = gradient_boosting_1d(x, y, n_estimators=50, learning_rate=0.1)"}
{"task_id": 387, "completion_id": 9, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(y)\n    y_pred = np.full(n_samples, np.mean(y))\n    for _ in range(n_estimators):\n        r = y - y_pred\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_r = r[sorted_indices]\n        best_split = None\n        best_score = np.inf\n        best_left_mean = 0\n        best_right_mean = 0\n        for i in range(1, n_samples):\n            if sorted_x[i] != sorted_x[i - 1]:\n                left = sorted_r[:i]\n                right = sorted_r[i:]\n                split = (sorted_x[i] + sorted_x[i - 1]) / 2\n                left_mean = np.mean(left)\n                right_mean = np.mean(right)\n                score = np.sum((left - left_mean) ** 2) + np.sum((right - right_mean) ** 2)\n                if score < best_score:\n                    best_score = score\n                    best_split = split\n                    best_left_mean = left_mean\n                    best_right_mean = right_mean\n        if best_split is None:\n            stump_predictions = np.full(n_samples, np.mean(r))\n        else:\n            stump_predictions = np.where(x <= best_split, best_left_mean, best_right_mean)\n        y_pred += learning_rate * stump_predictions\n    return np.round(list(y_pred), 4)"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    eg_next = rho * Eg + (1 - rho) * np.square(grad)\n    w_next = w - learning_rate * grad / np.sqrt(eg_next + 1e-08)\n    return (np.round(w_next, 4).tolist(), np.round(eg_next, 4).tolist())"}
{"task_id": 394, "completion_id": 1, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * grad ** 2\n    w -= learning_rate * grad / (np.sqrt(Eg) + epsilon)\n    w_next = np.round(w, decimals=4).tolist()\n    Eg_next = np.round(Eg, decimals=4).tolist()\n    return (w_next, Eg_next)"}
{"task_id": 394, "completion_id": 2, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n    \n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists and rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg_next = rho * Eg + (1 - rho) * grad ** 2\n    w_next = w - learning_rate * grad / (np.sqrt(Eg_next) + 1e-08)\n    w_next_rounded = np.round(w_next, decimals=4).tolist()\n    Eg_next_rounded = np.round(Eg_next, decimals=4).tolist()\n    return (w_next_rounded, Eg_next_rounded)\nw = np.array([1.0, 2.0, 3.0])\ngrad = np.array([0.2, 0.5, 0.3])\nEg = np.array([0.1, 0.2, 0.3])\nlearning_rate = 0.01\nrho = 0.9"}
{"task_id": 394, "completion_id": 3, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * grad ** 2\n    w_next = w - learning_rate * grad / (np.sqrt(Eg) + 1e-08)\n    w_next_rounded = np.round(w_next, decimals=4).tolist()\n    Eg_next_rounded = np.round(Eg, decimals=4).tolist()\n    return (w_next_rounded, Eg_next_rounded)\nw = np.array([1, 2, 3])\ngrad = np.array([0.1, 0.2, 0.3])\nlearning_rate = 0.01\nrho = 0.9"}
{"task_id": 394, "completion_id": 4, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * np.power(grad, 2)\n    w = w - learning_rate * grad / (np.sqrt(Eg) + epsilon)\n    w_next = np.round(w, decimals=4).tolist()\n    Eg_next = np.round(Eg, decimals=4).tolist()\n    return (w_next, Eg_next)\nw = np.array([1.0, 2.0, 3.0])\ngrad = np.array([0.1, 0.2, 0.3])\nEg = None\nlearning_rate = 0.01\nrho = 0.9"}
{"task_id": 394, "completion_id": 5, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg_new = rho * Eg + (1 - rho) * np.power(grad, 2)\n    w_new = w - learning_rate * grad / (np.sqrt(Eg_new) + 1e-08)\n    w_new_list = np.round(w_new, decimals=4).tolist()\n    Eg_new_list = np.round(Eg_new, decimals=4).tolist()\n    return (w_new_list, Eg_new_list)\nw = np.array([1.0, 2.0, 3.0])\ngrad = np.array([0.5, -0.4, 0.8])\nEg = None\nlearning_rate = 0.01\nrho = 0.9"}
{"task_id": 394, "completion_id": 6, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg_new = rho * Eg + (1 - rho) * grad ** 2\n    w_new = w - learning_rate * grad / (np.sqrt(Eg_new) + epsilon)\n    w_new_list = np.round(w_new, 4).tolist()\n    Eg_new_list = np.round(Eg_new, 4).tolist()\n    return (w_new_list, Eg_new_list)"}
{"task_id": 394, "completion_id": 7, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    w = w - learning_rate * grad / (np.sqrt(Eg) + epsilon)\n    w_rounded = np.round(w, 4).tolist()\n    Eg_rounded = np.round(Eg, 4).tolist()\n    return (w_rounded, Eg_rounded)\nw = np.array([1.0, 2.0, 3.0])\ngrad = np.array([0.1, 0.2, 0.3])\nEg = None\nrho = 0.9"}
{"task_id": 394, "completion_id": 8, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * grad ** 2\n    w = w - learning_rate * grad / (np.sqrt(Eg) + epsilon)\n    return (np.round(w, decimals=4).tolist(), np.round(Eg, decimals=4).tolist())"}
{"task_id": 394, "completion_id": 9, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * grad ** 2\n    w = w - learning_rate * grad / (np.sqrt(Eg) + epsilon)\n    w_next = np.round(w, decimals=4).tolist()\n    Eg_next = np.round(Eg, decimals=4).tolist()\n    return (w_next, Eg_next)"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        grad = np.where(x >= 0, 1, alpha * np.exp(x) + alpha)\n        return [round(float(val), 4) for val in grad]\n    else:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        return [round(float(val), 4) for val in result]"}
{"task_id": 398, "completion_id": 1, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        elu_activation = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        result = np.where(x >= 0, 1, elu_activation + alpha)\n    return [round(float(num), 4) for num in result]"}
{"task_id": 398, "completion_id": 2, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        elu_x = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        elu_x = np.where(x >= 0, 1, alpha * np.exp(x))\n    if derivative:\n        elu_x[x < 0] += alpha\n    return [round(float(num), 4) for num in elu_x]"}
{"task_id": 398, "completion_id": 3, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        grad = np.ones_like(x)\n        grad[x < 0] = alpha * np.exp(x[x < 0]) - alpha\n        grad[x >= 0] = 1.0\n        return [round(val, 4) for val in grad]\n    else:\n        act = x.copy()\n        act[x < 0] = alpha * (np.exp(x[x < 0]) - 1)\n        return [round(val, 4) for val in act]\nalpha = 0.1"}
{"task_id": 398, "completion_id": 4, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x, dtype=float)\n    if not derivative:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        elu_val = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        result = np.where(x >= 0, 1, elu_val + alpha)\n    return [round(float(i), 4) for i in result]\nx = [-2, -1, 0, 1, 2]"}
{"task_id": 398, "completion_id": 5, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        elu_derivative = np.where(x >= 0, 1, alpha * np.exp(x) + alpha)\n        return [float(round(i, 4)) for i in elu_derivative]\n    else:\n        elu_values = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        return [float(round(i, 4)) for i in elu_values]\nalpha = 0.1"}
{"task_id": 398, "completion_id": 6, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        x_modified = x.copy()\n        negative_mask = x < 0\n        x_modified[negative_mask] = alpha * (np.exp(x_modified[negative_mask]) - 1)\n        return [round(val, 4) for val in x_modified.tolist()]\n    else:\n        x_derivative = np.ones_like(x)\n        negative_mask = x < 0\n        x_derivative[negative_mask] = alpha * np.exp(x[negative_mask])\n        return [round(val, 4) for val in x_derivative.tolist()]"}
{"task_id": 398, "completion_id": 7, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x_array = np.array(x)\n    if not derivative:\n        elu_x = np.where(x_array >= 0, x_array, alpha * (np.exp(x_array) - 1))\n        return [round(val, 4) for val in elu_x.tolist()]\n    else:\n        elu_x_prime = np.where(x_array >= 0, 1, alpha * np.exp(x_array))\n        return [round(val, 4) for val in elu_x_prime.tolist()]"}
{"task_id": 398, "completion_id": 8, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        activation = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        activation = np.where(x >= 0, 1, alpha * np.exp(x))\n        activation = np.where(x < 0, activation + alpha, activation)\n    return [round(float(val), 4) for val in activation]"}
{"task_id": 398, "completion_id": 9, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        elu_values = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        elu_values = np.where(x >= 0, 1, alpha * np.exp(x))\n    return [round(val, 4) for val in elu_values]\nx = [-2, -1, 0, 1, 2]"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def analyze_collection(collection: list):\n        first_item = collection[0]\n        is_tuple = isinstance(first_item, (list, tuple, np.ndarray))\n        is_continuous = any((isinstance(item, float) and item % 1 != 0 for item in collection if isinstance(item, float)))\n        unique_ids = np.unique(np.array(collection)).tolist()\n        if is_tuple:\n            first_item = tuple(first_item) if isinstance(first_item, list) else first_item\n            dims = len(first_item)\n            n_unique_per_dim = [len(np.unique(np.array([item[i] for item in collection]))) for i in range(dims)]\n            unique_dimensions = [sorted(set([item[i] for item in collection])) for i in range(dims)]\n        else:\n            dims = 1\n            n_unique_per_dim = [len(np.unique(collection))]\n            unique_dimensions = [sorted(list(set(collection)))]\n        return {'dim': dims, 'tuple': is_tuple, 'multidim': is_tuple and dims > 1, 'continuous': is_continuous, 'n_unique_per_dim': n_unique_per_dim, 'unique_ids': unique_dimensions}\n    actions_stats = analyze_collection(actions)\n    observations_stats = analyze_collection(observations)\n    return {'tuple_actions': actions_stats['tuple'], 'tuple_observations': observations_stats['tuple'], 'multidim_actions': actions_stats['multidim'], 'multidim_observations': observations_stats['multidim'], 'continuous_actions': actions_stats['continuous'], 'continuous_observations': observations_stats['continuous'], 'n_actions_per_dim': actions_stats['n_unique_per_dim'], 'n_obs_per_dim': observations_stats['n_unique_per_dim'], 'action_dim': actions_stats['dim'], 'obs_dim': observations_stats['dim'], 'action_ids': actions_stats['unique_ids'], 'obs_ids': observations_stats['unique_ids']}\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 1, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n\n    def process_list(input_list):\n        is_tuple = any((isinstance(item, (list, tuple, np.ndarray)) for item in input_list))\n        is_multidim = len(input_list) > 0 and isinstance(input_list[0], (list, tuple, np.ndarray))\n        dim = max(1, len(input_list[0]) if is_multidim else 1)\n        is_continuous = any((not isinstance(val, int) for item in input_list for val in (item if is_multidim else [item])))\n        unique_values_per_dim = [set() for _ in range(dim)]\n        for item in input_list:\n            vals = item if is_multidim else [item]\n            for (i, val) in enumerate(vals):\n                unique_values_per_dim[i].add(val)\n        unique_values_per_dim = [list(sorted(vals)) for vals in unique_values_per_dim]\n        n_per_dim = [len(vals) for vals in unique_values_per_dim]\n        return (is_tuple, is_multidim, dim, is_continuous, n_per_dim, unique_values_per_dim)\n    (tuple_a, multidim_a, dim_a, continuous_a, n_a, ids_a) = process_list(actions)\n    (tuple_o, multidim_o, dim_o, continuous_o, n_o, ids_o) = process_list(observations)\n    return {'tuple_actions': tuple_a, 'tuple_observations': tuple_o, 'multidim_actions': multidim_a, 'multidim_observations': multidim_o, 'continuous_actions': continuous_a, 'continuous_observations': continuous_o, 'n_actions_per_dim': n_a, 'action_dim': dim_a, 'n_obs_per_dim': n_o, 'obs_dim': dim_o, 'action_ids': ids_a, 'obs_ids': ids_o}\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 2, "solution": "import numpy as np\nfrom typing import List\ndef is_mutable(x):\n    \"\"\"Helper function to determine if an item is iterable\"\"\"\n    return isinstance(x, (tuple, list, np.ndarray))\ndef is_continuous(x):\n    \"\"\"Helper function to determine if an item has any non-integer float\"\"\"\n    if isinstance(x, (tuple, list, np.ndarray)):\n        flattened = [item for sublist in x for item in sublist]\n    else:\n        flattened = [x]\n    return any((isinstance(item, float) and (not item.is_integer()) for item in flattened))\ndef get_uniques_per_dim(items: List) -> (List[int], List[List]):\n    \"\"\"Compute unique values and counts per dimension.\"\"\"\n    if is_mutable(items[0]):\n        dim = len(items[0])\n        uniques = [set() for _ in range(dim)]\n        unique_ids = [[] for _ in range(dim)]\n        for item in items:\n            for (d, val) in enumerate(item):\n                uniques[d].add(val)\n        for d in range(dim):\n            unique_ids[d] = sorted(uniques[d])\n        return ([len(u) for u in uniques], unique_ids)\n    else:\n        unique_ids = sorted(list(set(items)))\n        return ([len(unique_ids)], [unique_ids])\ndef env_stats(actions: List, observations: List) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\"\"\"\n    tuple_actions = any((is_mutable(a) for a in actions))\n    tuple_observations = any((is_mutable(o) for o in observations))\n    multidim_actions = tuple_actions and any((len(a) > 1 for a in actions))\n    multidim_observations = tuple_observations and any((len(o) > 1 for o in observations))\n    continuous_actions = is_continuous(actions)\n    continuous_observations = is_continuous(observations)\n    (n_actions_per_dim, action_ids) = get_uniques_per_dim(actions)\n    (n_obs_per_dim, obs_ids) = get_uniques_per_dim(observations)\n    action_dim = len(actions[0]) if is_mutable(actions[0]) else 1\n    obs_dim = len(observations[0]) if is_mutable(observations[0]) else 1\n    return {'tuple_actions': tuple_actions, 'tuple_observations': tuple_observations, 'multidim_actions': multidim_actions, 'multidim_observations': multidim_observations, 'continuous_actions': continuous_actions, 'continuous_observations': continuous_observations, 'n_actions_per_dim': n_actions_per_dim, 'n_obs_per_dim': n_obs_per_dim, 'action_dim': action_dim, 'obs_dim': obs_dim, 'action_ids': action_ids, 'obs_ids': obs_ids}\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 3, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def analyze_list(lst, name):\n        flattened = [item for sublist in lst for item in (sublist if hasattr(sublist, '__iter__') and (not isinstance(sublist, (str, bytes))) else [sublist])]\n        tuple_flag = any((hasattr(x, '__iter__') and (not isinstance(x, (str, bytes))) for x in lst))\n        multidim_flag = len(lst) > 0 and isinstance(lst[0], (list, tuple, np.ndarray))\n        continuous_flag = any((isinstance(x, float) and (not x.is_integer()) for x in flattened))\n        unique_vals = list(map(set, zip(*[iter(item) for item in lst]))) if multidim_flag else [set(lst)]\n        unique_list = [sorted(x) for x in unique_vals]\n        shape = (len(lst[0]),) if multidim_flag else (1,)\n        return {f'tuple_{name}': tuple_flag, f'multidim_{name}': multidim_flag, f'continuous_{name}': continuous_flag, f'n_{name}_per_dim': list(map(len, unique_list)), f'{name}_dim': shape[0], f'{name}_ids': unique_list}\n    action_stats = analyze_list(actions, 'actions')\n    obs_stats = analyze_list(observations, 'observations')\n    return {**action_stats, **obs_stats}\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 4, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def analyze_data(data):\n        tuple_data = isinstance(data[0], (tuple, list, np.ndarray))\n        continuous = any((isinstance(v, (float, np.floating)) and (not v.is_integer()) for v in np.ravel(data)))\n        flat_data = [item for sublist in data for item in (sublist if isinstance(sublist, (tuple, list, np.ndarray)) else [sublist])]\n        n_unique_per_dim = [len(np.unique(np.array(flat_data)[:, i]).tolist()) for i in range(len(data[0]))]\n        ids = [sorted(list(np.unique(np.array(flat_data)[:, i]))) for i in range(len(data[0]))]\n        multidim = len(ids[0]) > 1 if ids else False\n        return (tuple_data, multidim, continuous, n_unique_per_dim, len(ids[0]) if ids else 1, ids)\n    (actions_tuple, actions_multidim, actions_continuous, n_actions_per_dim, action_dim, action_ids) = analyze_data(actions)\n    (obs_tuple, obs_multidim, obs_continuous, n_obs_per_dim, obs_dim, obs_ids) = analyze_data(observations)\n    return {'tuple_actions': actions_tuple, 'tuple_observations': obs_tuple, 'multidim_actions': actions_multidim, 'multidim_observations': obs_multidim, 'continuous_actions': actions_continuous, 'continuous_observations': obs_continuous, 'n_actions_per_dim': n_actions_per_dim, 'action_dim': action_dim, 'n_obs_per_dim': n_obs_per_dim, 'obs_dim': obs_dim, 'action_ids': action_ids, 'obs_ids': obs_ids}\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 5, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def is_iterable(lst):\n        return any((isinstance(e, (list, tuple, np.ndarray)) for e in lst))\n\n    def is_multidim(lst):\n        return all((isinstance(e, (list, tuple, np.ndarray)) and len(e) > 1 for e in lst)) if lst else False\n\n    def is_continuous(lst):\n        flattened = np.array([item for sublist in lst for item in (sublist if isinstance(sublist, (list, tuple, np.ndarray)) else [sublist])])\n        return any((not float(num).is_integer() for num in flattened))\n\n    def get_unique_values(data):\n        unique_per_dim = []\n        if is_iterable(data):\n            data = np.array(data)\n            for dim in data.T:\n                unique_per_dim.append(sorted(set(dim)))\n        else:\n            unique_per_dim.append(sorted(set(data)))\n        return unique_per_dim\n    tuple_actions = is_iterable(actions)\n    multidim_actions = tuple_actions and is_multidim(actions)\n    action_dim = len(actions[0]) if tuple_actions else 1\n    continuous_actions = is_continuous(actions)\n    n_actions_per_dim = [len(unique) for unique in get_unique_values(actions)]\n    action_ids = get_unique_values(actions)\n    tuple_observations = is_iterable(observations)\n    multidim_observations = tuple_observations and is_multidim(observations)\n    obs_dim = len(observations[0]) if tuple_observations else 1\n    continuous_observations = is_continuous(observations)\n    n_obs_per_dim = [len(unique) for unique in get_unique_values(observations)]\n    obs_ids = get_unique_values(observations)\n    return {'tuple_actions': tuple_actions, 'tuple_observations': tuple_observations, 'multidim_actions': multidim_actions, 'multidim_observations': multidim_observations, 'continuous_actions': continuous_actions, 'continuous_observations': continuous_observations, 'n_actions_per_dim': n_actions_per_dim, 'n_obs_per_dim': n_obs_per_dim, 'action_dim': action_dim, 'obs_dim': obs_dim, 'action_ids': action_ids, 'obs_ids': obs_ids}\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 6, "solution": "import numpy as np\ndef is_float_non_integer(value):\n    return isinstance(value, float) and (not value.is_integer())\ndef get_stats(lst):\n    multidim = isinstance(lst[0], (list, tuple, np.ndarray))\n    is_continuous = any((is_float_non_integer(x) for x in np.ravel(lst)))\n    flattened = np.stack(lst) if multidim else np.array(lst)\n    n_per_dim = [len(np.unique(dim)) for dim in np.rollaxis(flattened, 0)]\n    ids_per_dim = [sorted(np.unique(dim)) for dim in np.rollaxis(flattened, 0)]\n    return (multidim, is_continuous, n_per_dim, len(n_per_dim), ids_per_dim)\ndef env_stats(actions: list, observations: list) -> dict:\n    (actions_multidim, actions_cont, actions_n_per_dim, actions_dim, actions_ids) = get_stats(actions)\n    (obs_multidim, obs_cont, obs_n_per_dim, obs_dim, obs_ids) = get_stats(observations)\n    return {'tuple_actions': isinstance(actions[0], (list, tuple, np.ndarray)), 'tuple_observations': isinstance(observations[0], (list, tuple, np.ndarray)), 'multidim_actions': actions_multidim, 'multidim_observations': obs_multidim, 'continuous_actions': actions_cont, 'continuous_observations': obs_cont, 'n_actions_per_dim': actions_n_per_dim, 'action_dim': actions_dim, 'n_obs_per_dim': obs_n_per_dim, 'obs_dim': obs_dim, 'action_ids': actions_ids, 'obs_ids': obs_ids}\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 7, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\"\"\"\n\n    def multidim_unique(values: list):\n        tuple_val = any((isinstance(val, (list, tuple, np.ndarray)) for val in values))\n        flat = [item for sublist in values for item in ([sublist] if not tuple_val else sublist)]\n        (unique_vals, counts) = np.unique(flat, return_counts=True)\n        continuous = any((isinstance(val, float) and (not val.is_integer()) for val in flat))\n        multidim = len(flat) != len(values) if tuple_val else False\n        dim = len(values[0]) if tuple_val else 1\n        return (tuple_val, multidim, continuous, counts.tolist(), dim, sorted(unique_vals.tolist()))\n    (tuple_actions, multidim_actions, continuous_actions, n_actions_per_dim, action_dim, action_ids) = multidim_unique(actions)\n    (tuple_observations, multidim_observations, continuous_observations, n_obs_per_dim, obs_dim, obs_ids) = multidim_unique(observations)\n    return {'tuple_actions': tuple_actions, 'tuple_observations': tuple_observations, 'multidim_actions': multidim_actions, 'multidim_observations': multidim_observations, 'continuous_actions': continuous_actions, 'continuous_observations': continuous_observations, 'n_actions_per_dim': n_actions_per_dim, 'action_dim': action_dim, 'n_obs_per_dim': n_obs_per_dim, 'obs_dim': obs_dim, 'action_ids': [action_ids[i:i + action_dim] for i in range(0, len(action_ids), action_dim)], 'obs_ids': [obs_ids[i:i + obs_dim] for i in range(0, len(obs_ids), obs_dim)]}\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 8, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def is_iterable(x):\n        \"\"\"Check if the input is an iterable (list, tuple, or np.array).\"\"\"\n        return isinstance(x, (list, tuple, np.ndarray))\n\n    def extract_unique_values_per_dim(x):\n        \"\"\"Extract unique values per dimension from a list of observations/actions.\"\"\"\n        if isinstance(x[0], (int, float)):\n            return [sorted(set(x))]\n        else:\n            x_np = np.array(x)\n            unique_values = []\n            for dim in range(x_np.shape[1]):\n                unique_values.append(sorted(set(x_np[:, dim])))\n            return unique_values\n\n    def is_continuous(x):\n        \"\"\"Check if the input list contains non-integer floats.\"\"\"\n        return any((isinstance(i, float) and (not i.is_integer()) for i in x))\n    stats = {}\n    actions_np = np.array(actions)\n    observations_np = np.array(observations)\n    stats['tuple_actions'] = any((is_iterable(act) for act in actions))\n    stats['multidim_actions'] = stats['tuple_actions'] and max((len(x) for x in actions)) > 1\n    stats['continuous_actions'] = is_continuous([item for sublist in actions for item in (sublist if is_iterable(sublist) else [sublist])])\n    stats['n_actions_per_dim'] = [len(set(actions_np[:, i])) for i in range(actions_np.shape[1])] if stats['multidim_actions'] else [len(set(actions))]\n    stats['action_dim'] = actions_np.shape[1] if stats['multidim_actions'] else 1\n    stats['action_ids'] = extract_unique_values_per_dim(actions)\n    stats['tuple_observations'] = any((is_iterable(obs) for obs in observations))\n    stats['multidim_observations'] = stats['tuple_observations'] and max((len(x) for x in observations)) > 1\n    stats['continuous_observations'] = is_continuous([item for sublist in observations for item in (sublist if is_iterable(sublist) else [sublist])])\n    stats['n_obs_per_dim'] = [len(set(observations_np[:, i])) for i in range(observations_np.shape[1])] if stats['multidim_observations'] else [len(set(observations))]\n    stats['obs_dim'] = observations_np.shape[1] if stats['multidim_observations'] else 1\n    stats['obs_ids'] = extract_unique_values_per_dim(observations)\n    return stats\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 9, "solution": "import numpy as np\ndef is_tuple_or_array(val):\n    \"\"\"Check if val is a tuple, list, or numpy array.\"\"\"\n    return isinstance(val, (tuple, list, np.ndarray))\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken. Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations. Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    tuple_actions = any((is_tuple_or_array(a) for a in actions))\n    tuple_observations = any((is_tuple_or_array(o) for o in observations))\n    multidim_actions = tuple_actions and len(set(map(len, actions))) == 1 and (len(actions[0]) > 1)\n    multidim_observations = tuple_observations and len(set(map(len, observations))) == 1 and (len(observations[0]) > 1)\n    actions_flattened = [item for sublist in actions for item in (sublist if is_tuple_or_array(sublist) else [sublist])]\n    continuous_actions = any((isinstance(a, float) and (not a.is_integer()) for a in actions_flattened))\n    observations_flattened = [item for sublist in observations for item in (sublist if is_tuple_or_array(sublist) else [sublist])]\n    continuous_observations = any((isinstance(o, float) and (not o.is_integer()) for o in observations_flattened))\n    action_dim = len(actions[0]) if tuple_actions else 1\n    obs_dim = len(observations[0]) if tuple_observations else 1\n    actions = [list(a) if is_tuple_or_array(a) else [a] for a in actions]\n    observations = [list(o) if is_tuple_or_array(o) else [o] for o in observations]\n    (n_actions_per_dim, n_obs_per_dim) = ([], [])\n    (action_ids, obs_ids) = ([], [])\n    for dim in range(action_dim):\n        dim_actions = [action[dim] for action in actions]\n        action_ids.append(sorted(set(dim_actions)))\n        n_actions_per_dim.append(len(action_ids[-1]))\n    for dim in range(obs_dim):\n        dim_observations = [observation[dim] for observation in observations]\n        obs_ids.append(sorted(set(dim_observations)))\n        n_obs_per_dim.append(len(obs_ids[-1]))\n    return {'tuple_actions': tuple_actions, 'tuple_observations': tuple_observations, 'multidim_actions': multidim_actions, 'multidim_observations': multidim_observations, 'continuous_actions': continuous_actions, 'continuous_observations': continuous_observations, 'n_actions_per_dim': n_actions_per_dim, 'action_dim': action_dim, 'n_obs_per_dim': n_obs_per_dim, 'obs_dim': obs_dim, 'action_ids': action_ids, 'obs_ids': obs_ids}\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 413, "completion_id": 0, "solution": "import numpy as np\nclass DecisionTreeRegressor:\n\n    def __init__(self, max_depth=3):\n        self.max_depth = max_depth\n        self.tree = None\n\n    def fit(self, X, y):\n        self.tree = self._grow_tree(X, y, depth=0)\n\n    def _best_split(self, X, y):\n        mse_reduction = float('-inf')\n        best_gain = -1\n        best_idx = None\n        best_threshold = None\n        for feature_idx in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature_idx])\n            for threshold in thresholds:\n                left_indices = X[:, feature_idx] < threshold\n                right_indices = X[:, feature_idx] >= threshold\n                left_y = y[left_indices]\n                right_y = y[right_indices]\n                if len(left_y) == 0 or len(right_y) == 0:\n                    continue\n                left_mse = np.var(left_y) * len(left_y)\n                right_mse = np.var(right_y) * len(right_y)\n                mse = left_mse + right_mse\n                mse_red = np.var(y) * len(y) - mse\n                if mse_red > mse_reduction:\n                    mse_reduction = mse_red\n                    best_gain = mse_red\n                    best_idx = feature_idx\n                    best_threshold = threshold\n        if best_gain < 0:\n            best_gain = 0\n        return (best_idx, best_threshold, best_gain)\n\n    def _grow_tree(self, X, y, depth):\n        if depth >= self.max_depth or len(y) <= 1 or np.var(y) == 0:\n            return np.mean(y)\n        else:\n            (feature_idx, threshold, gain) = self._best_split(X, y)\n            if gain <= 0:\n                return np.mean(y)\n            else:\n                left_indices = X[:, feature_idx] < threshold\n                right_indices = X[:, feature_idx] >= threshold\n                left_branch = self._grow_tree(X[left_indices], y[left_indices], depth + 1)\n                right_branch = self._grow_tree(X[right_indices], y[right_indices], depth + 1)\n                return {'idx': feature_idx, 'thres': threshold, 'left': left_branch, 'right': right_branch}\n\n    def predict(self, X):\n        return np.array([self._predict(x, self.tree) for x in X])\n\n    def _predict(self, x, tree):\n        if isinstance(tree, dict):\n            if x[tree['idx']] < tree['thres']:\n                return self._predict(x, tree['left'])\n            else:\n                return self._predict(x, tree['right'])\n        else:\n            return tree\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    n_samples = X_train.shape[0]\n    y_pred = np.full(n_samples, np.mean(y_train))\n    for _ in range(n_estimators):\n        gradients = y_train - y_pred\n        tree = DecisionTreeRegressor(max_depth=max_depth)\n        tree.fit(X_train, gradients)\n        y_tree_pred = tree.predict(X_train)\n        y_pred += learning_rate * y_tree_pred\n    final_predictions = y_pred\n    test_predictions = np.full(X_test.shape[0], np.mean(y_train))\n    for _ in range(n_estimators):\n        gradients_test = final_predictions - test_predictions\n        test_predictions += learning_rate * tree.predict(X_test)\n    return [round(pred, 4) for pred in test_predictions.tolist()]"}
{"task_id": 413, "completion_id": 1, "solution": "import numpy as np\ndef mse(data):\n    return np.mean((data - np.mean(data)) ** 2)\ndef split_data_left_right(data, index_feature, split_value):\n    left_indices = data[:, index_feature] <= split_value\n    right_indices = data[:, index_feature] > split_value\n    return (data[left_indices], data[right_indices])\nclass DecisionTree:\n\n    def __init__(self, max_depth):\n        self.max_depth = max_depth\n\n    def fit(self, X, y):\n        self.tree = self.build_tree(np.c_[X, y], 0)\n\n    def build_tree(self, data, depth):\n        if depth == self.max_depth or len(data) < 2:\n            leaf_value = np.mean(data[:, -1])\n            return {'is_leaf': True, 'value': leaf_value}\n        (best_feature, best_value, best_error) = (None, None, float('inf'))\n        for feature in range(data.shape[1] - 1):\n            for value in np.unique(data[:, feature]):\n                (left, right) = split_data_left_right(data, feature, value)\n                error = (len(left) * mse(left[:, -1]) + len(right) * mse(right[:, -1])) / len(data)\n                if error < best_error:\n                    best_error = error\n                    best_feature = feature\n                    best_value = value\n        (left, right) = split_data_left_right(data, best_feature, best_value)\n        left_tree = self.build_tree(left, depth + 1)\n        right_tree = self.build_tree(right, depth + 1)\n        return {'is_leaf': False, 'feature_index': best_feature, 'split_value': best_value, 'left': left_tree, 'right': right_tree}\n\n    def predict_row(self, row, tree=None):\n        if tree is None:\n            tree = self.tree\n        if tree['is_leaf']:\n            return tree['value']\n        if row[tree['feature_index']] <= tree['split_value']:\n            return self.predict_row(row, tree['left'])\n        return self.predict_row(row, tree['right'])\n\n    def predict(self, X):\n        return [self.predict_row(row) for row in X]\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    F = np.full(y_train.shape, np.mean(y_train), dtype=float)\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        tree = DecisionTree(max_depth)\n        tree.fit(X_train, residuals)\n        predictions = tree.predict(X_train)\n        F += learning_rate * predictions\n    final_predictions = [np.mean(y_train) + learning_rate * sum((tree.predict_row(x_test) for _ in range(n_estimators))) for x_test in X_test]\n    return list((round(pred, 4) for pred in final_predictions))"}
{"task_id": 413, "completion_id": 2, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    f_pred = np.full((n_samples,), y_train.mean())\n    f_pred_test = np.full((X_test.shape[0],), y_train.mean())\n\n    def mse_impurity(y):\n        if len(y) == 0:\n            return 0\n        return np.var(y) * len(y)\n\n    def split_node(X, y):\n        best_split = {}\n        best_cost = float('inf')\n        (m, n) = X.shape\n        for i in range(n):\n            thresholds = np.unique(X[:, i])\n            for t in thresholds:\n                (left, right) = (y[X[:, i] <= t], y[X[:, i] > t])\n                cost = mse_impurity(left) + mse_impurity(right)\n                if cost < best_cost:\n                    best_cost = cost\n                    best_split = {'feature': i, 'val': t, 'left': left, 'right': right}\n        return best_split\n\n    def build_tree(X, y, max_depth):\n        if max_depth == 1 or len(y) <= 1 or mse_impurity(y) == 0:\n            return np.mean(y)\n        else:\n            split = split_node(X, y)\n            left_tree = build_tree(X[X[:, split['feature']] <= split['val']], splits['left'], max_depth - 1)\n            right_tree = build_tree(X[X[:, split['feature']] > split['val']], splits['right'], max_depth - 1)\n            return {'feature': split['feature'], 'value': split['val'], 'left': left_tree, 'right': right_tree}\n\n    def predict_instance(x, tree):\n        if type(tree) is dict:\n            feature_value = x[tree['feature']]\n            if feature_value <= tree['value']:\n                return predict_instance(x, tree['left'])\n            else:\n                return predict_instance(x, tree['right'])\n        else:\n            return tree\n\n    def predict(X, tree):\n        y_pred = [predict_instance(x, tree) for x in X]\n        return np.array(y_pred)\n    for _ in range(n_estimators):\n        residuals = y_train - f_pred\n        tree = build_tree(X_train, residuals, max_depth)\n        tree_pred = predict(X_train, tree) * learning_rate\n        f_pred += tree_pred\n        tree_pred_test = predict(X_test, tree) * learning_rate\n        f_pred_test += tree_pred_test\n    return [round(float(pred), 4) for pred in f_pred_test]\nX_train = np.array([[0], [1], [2], [3]])\ny_train = np.array([0, 1, 2, 3])\nX_test = np.array([[4], [5], [6]])"}
{"task_id": 413, "completion_id": 3, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"\n    Gradient Boosting Decision Tree (GBDT) regressor.\n    Parameters and return type are as defined in the prompt.\n    \"\"\"\n\n    def mse(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    def best_split(X, y, indices, features):\n        (best_feature, best_threshold, best_mse) = (-1, None, float('inf'))\n        y_pred = np.mean(y[indices])\n        for feature in features:\n            X_col = X[:, feature]\n            unique_vals = np.sort(np.unique(X_col[indices]))\n            thresholds = (unique_vals[:-1] + unique_vals[1:]) / 2\n            for threshold in thresholds:\n                left_indices = np.where(X_col[indices] <= threshold)[0]\n                right_indices = np.where(X_col[indices] > threshold)[0]\n                if not left_indices.size or not right_indices.size:\n                    continue\n                mse_left = mse(y[indices[left_indices]], y_pred)\n                mse_right = mse(y[indices[right_indices]], y_pred)\n                mse_split = (left_indices.size * mse_left + right_indices.size * mse_right) / indices.size\n                if mse_split < best_mse:\n                    best_mse = mse_split\n                    best_threshold = threshold\n                    best_feature = feature\n        return (best_feature, best_threshold)\n\n    def build_tree(X, y, indices, depth=0, features=None):\n        if features is None:\n            features = np.arange(X.shape[1])\n        if depth >= max_depth or len(indices) < 2:\n            return np.mean(y[indices])\n        (feature, threshold) = best_split(X, y, indices, features)\n        if feature == -1:\n            return np.mean(y[indices])\n        left_indices = np.where(X[indices, feature] <= threshold)[0]\n        right_indices = np.where(X[indices, feature] > threshold)[0]\n        if left_indices.size == 0 or right_indices.size == 0:\n            return np.mean(y[indices])\n        left_tree = build_tree(X, y, indices[left_indices], depth + 1, features)\n        right_tree = build_tree(X, y, indices[right_indices], depth + 1, features)\n        return {'feature': feature, 'threshold': threshold, 'left': left_tree, 'right': right_tree}\n\n    def predict_tree(tree, x):\n        if isinstance(tree, np.float64):\n            return tree\n        (feature, threshold) = (tree['feature'], tree['threshold'])\n        output = tree['left'] if x[feature] <= threshold else tree['right']\n        return predict_tree(output, x)\n    F = np.mean(y_train)\n    trees = []\n    for _ in range(n_estimators):\n        residuals = -(y_train - F)\n        tree = build_tree(X_train, residuals, np.arange(len(y_train)))\n        trees.append(tree)\n        F += learning_rate * np.array([predict_tree(tree, x) for x in X_train])\n    predictions = np.mean(y_train)\n    for tree in trees:\n        predictions += learning_rate * np.array([predict_tree(tree, x) for x in X_test])\n    return [round(float(x), 4) for x in predictions.tolist()]"}
{"task_id": 413, "completion_id": 4, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    (N, D) = X_train.shape\n    M = X_test.shape[0]\n    predictions = np.zeros(M)\n    f0 = np.mean(y_train)\n    F = np.ones(N) * f0\n    predictions += np.ones(M) * f0\n\n    def calculate_mse(indices):\n        if len(indices) == 0:\n            return float('inf')\n        return np.mean((y_train[indices] - np.mean(y_train[indices])) ** 2)\n\n    def find_best_split(feature, target):\n        sorted_indices = np.argsort(feature)\n        feature_sorted = feature[sorted_indices]\n        target_sorted = target[sorted_indices]\n        mse_before = calculate_mse(np.arange(len(target)))\n        best_mse = float('inf')\n        for i in range(1, len(feature)):\n            if feature_sorted[i - 1] == feature_sorted[i]:\n                continue\n            left_indices = sorted_indices[:i]\n            right_indices = sorted_indices[i:]\n            mse_left = calculate_mse(left_indices)\n            mse_right = calculate_mse(right_indices)\n            mse = (mse_left * len(left_indices) + mse_right * len(right_indices)) / len(target)\n            if mse < best_mse:\n                best_mse = mse\n                best_split = (feature_sorted[i] + feature_sorted[i - 1]) / 2\n        return (best_split, best_mse)\n\n    def build_tree(X, y, depth):\n        if depth == 0 or len(y) == 0:\n            return np.mean(y)\n        (best_feature, best_mse, best_split) = (None, float('inf'), None)\n        for d in range(D):\n            feature = X[:, d]\n            (split, mse_after) = find_best_split(feature, y)\n            if mse_after < best_mse:\n                best_mse = mse_after\n                best_feature = d\n                best_split = split\n        left_indices = X[:, best_feature] <= best_split\n        right_indices = X[:, best_feature] > best_split\n        return [(best_feature, best_split, build_tree(X[left_indices], y[left_indices], depth - 1), build_tree(X[right_indices], y[right_indices], depth - 1))]\n\n    def predict_tree(tree, x):\n        if not isinstance(tree, list):\n            return tree\n        (feature, split, left_subtree, right_subtree) = tree\n        if x[feature] <= split:\n            return predict_tree(left_subtree, x)\n        else:\n            return predict_tree(right_subtree, x)\n    for m in range(n_estimators):\n        residuals = y_train - F\n        tree = build_tree(X_train, residuals, max_depth)\n        for i in range(M):\n            predictions[i] += learning_rate * predict_tree(tree, X_test[i])\n        for j in range(N):\n            F[j] += learning_rate * predict_tree(tree, X_train[j])\n    return [round(i, 4) for i in predictions]\nX_train = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\ny_train = np.array([0, 1, 2, 3])\nX_test = np.array([[1.5, 2.5], [3.5, 4.5]])\npredictions = gbdt_regression(X_train, y_train, X_test, n_estimators=10, learning_rate=0.1, max_depth=2)"}
{"task_id": 413, "completion_id": 5, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    pred = np.full(y_train.shape, np.mean(y_train))\n    pred_test = np.full(X_test.shape[0], np.mean(y_train))\n    for _ in range(n_estimators):\n        residuals = y_train - pred\n        tree = DecisionTreeRegressor(max_depth=max_depth)\n        tree.fit(X_train, residuals)\n        pred += learning_rate * tree.predict(X_train)\n        pred_test += learning_rate * tree.predict(X_test)\n    return list(np.round(pred_test, 4))\nclass DecisionTreeRegressor:\n\n    def __init__(self, max_depth):\n        self.max_depth = max_depth\n        self.tree = None\n\n    def fit(self, X, y):\n        self.tree = self._grow_tree(X, y, depth=0)\n\n    def predict(self, X):\n        y_pred = []\n        for sample in X:\n            y_pred.append(self._predict_sample(sample))\n        return np.array(y_pred)\n\n    def _grow_tree(self, X, y, depth):\n        (n_samples, n_features) = X.shape\n        (n_left, n_right) = (0, 0)\n        feature_index = None\n        threshold = None\n        if n_samples >= 2 and depth < self.max_depth:\n            neighbor_1 = y[0]\n            all_same = True\n            for index in range(1, n_samples):\n                sample = y[index]\n                if sample != neighbor_1:\n                    all_same = False\n                    break\n            if all_same:\n                return y[0]\n            best_gain = -1\n            for feature in range(n_features):\n                treated_values = []\n                for sample in range(n_samples):\n                    value = X[sample][feature]\n                    if value not in treated_values:\n                        treated_values.append(value)\n                        y_left = y[X[:, feature] <= value]\n                        y_right = y[X[:, feature] > value]\n                        gain = self._mse_gain(y, y_left, y_right)\n                        if gain > best_gain:\n                            best_gain = gain\n                            feature_index = feature\n                            threshold = value\n        if feature_index is not None:\n            tree = {}\n            y_left = y[X[:, feature_index] <= threshold]\n            y_right = y[X[:, feature_index] > threshold]\n            X_left = X[X[:, feature_index] <= threshold]\n            X_right = X[X[:, feature_index] > threshold]\n            tree[feature_index, threshold] = (self._grow_tree(X_left, y_left, depth + 1), self._grow_tree(X_right, y_right, depth + 1))\n            return tree\n        else:\n            return np.mean(y)\n\n    def _mse_gain(self, y_parent, y_left, y_right):\n        mse_parent = self._mse(y_parent)\n        mse_left = self._mse(y_left)\n        mse_right = self._mse(y_right)\n        var_gain = mse_parent - mse_left - mse_right\n        return var_gain\n\n    def _mse(self, y):\n        if len(y) > 0:\n            return np.var(y)\n        else:\n            return 0\n\n    def _predict_sample(self, sample):\n        node = self.tree\n        while True:\n            if not isinstance(node, dict):\n                return node\n            (index, threshold) = next(iter(node.keys()))\n            if sample[index] <= threshold:\n                node = node[index, threshold][0]\n            else:\n                node = node[index, threshold][1]"}
{"task_id": 413, "completion_id": 6, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n\n    def mse_split(X, y, split_index, split_value):\n        left_mask = X[:, split_index] < split_value\n        right_mask = ~left_mask\n        if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n            return float('inf')\n        left_y = y[left_mask]\n        right_y = y[right_mask]\n        return np.mean((left_y - np.mean(left_y)) ** 2) + np.mean((right_y - np.mean(right_y)) ** 2)\n\n    def find_best_split(X, y, max_depth, depth=0):\n        if depth == max_depth:\n            return [np.mean(y), float('inf')]\n        (best_split_index, best_split_value, best_error) = (-1, -1, float('inf'))\n        for i in range(X.shape[1]):\n            for value in np.unique(X[:, i]):\n                error = mse_split(X, y, i, value)\n                if error < best_error:\n                    best_error = error\n                    best_split_index = i\n                    best_split_value = value\n        if best_error != float('inf'):\n            left_mask = X[:, best_split_index] < best_split_value\n            return ['split', best_split_index, best_split_value, find_best_split(X[left_mask], y[left_mask], max_depth, depth + 1), find_best_split(X[~left_mask], y[~left_mask], max_depth, depth + 1)]\n        else:\n            return [np.mean(y), float('inf')]\n\n    def predict_tree(X, tree):\n        if tree[1] == 'split':\n            if X[tree[1]] < tree[2]:\n                return predict_tree(X, tree[3])\n            else:\n                return predict_tree(X, tree[4])\n        else:\n            return tree[0]\n    predictions = np.full(X_test.shape[0], np.mean(y_train))\n    for _ in range(n_estimators):\n        residuals = y_train - predictions[:X_train.shape[0]]\n        tree = find_best_split(X_train, residuals, max_depth)\n        predictions += learning_rate * np.array([predict_tree(x, tree) for x in X_test])\n    return [round(float(p), 4) for p in predictions]"}
{"task_id": 413, "completion_id": 7, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\"\"\"\n\n    def mse(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    def mse_derivative(y_true, y_pred):\n        return -(y_true - y_pred)\n\n    def find_best_split(X, y, current_value):\n        best_split = {'feature': None, 'value': None, 'error': float('inf')}\n        for feature in range(X.shape[1]):\n            for value in np.unique(X[:, feature]):\n                left_index = X[:, feature] < value\n                right_index = X[:, feature] >= value\n                if np.any(left_index) and np.any(right_index):\n                    left_y = y[left_index]\n                    right_y = y[right_index]\n                    mse_left = mse_derivative(left_y, current_value).mean()\n                    mse_right = mse_derivative(right_y, current_value).mean()\n                    error = mse_derivative(left_y, mse_left).mean() ** 2 * len(left_y) + mse_derivative(right_y, mse_right).mean() ** 2 * len(right_y)\n                    if error < best_split['error']:\n                        best_split = {'feature': feature, 'value': value, 'error': error}\n        return best_split\n\n    def build_tree(X, y, depth=0, learning_rate=0.1):\n        current_value = y.mean()\n        if depth >= max_depth or mse(y, np.full(y.shape, current_value)) <= 1e-06:\n            return {'value': current_value * learning_rate}\n        split = find_best_split(X, y, current_value)\n        if split['value'] is None:\n            return {'value': current_value * learning_rate}\n        left = X[:, split['feature']] < split['value']\n        right = X[:, split['feature']] >= split['value']\n        true_branch = build_tree(X[left], y[left], depth + 1, learning_rate)\n        false_branch = build_tree(X[right], y[right], depth + 1, learning_rate)\n        return {'feature': split['feature'], 'value': split['value'], 'true': true_branch, 'false': false_branch}\n\n    def predict_tree(tree, x_sample, learning_rate):\n        if 'value' in tree:\n            return tree['value'] * learning_rate\n        if x_sample[tree['feature']] < tree['value']:\n            return predict_tree(tree['true'], x_sample, learning_rate)\n        else:\n            return predict_tree(tree['false'], x_sample, learning_rate)\n\n    def predict_trees(trees, X, learning_rate):\n        y_pred = np.zeros(X.shape[0])\n        for tree in trees:\n            for (i, x_sample) in enumerate(X):\n                y_pred[i] += predict_tree(tree, x_sample, learning_rate)\n        return y_pred.tolist()\n    y_pred = np.full_like(y_train, y_train.mean())\n    trees = []\n    for _ in range(n_estimators):\n        residuals = mse_derivative(y_train, y_pred)\n        tree = build_tree(X_train, residuals, learning_rate=learning_rate)\n        trees.append(tree)\n        for (i, x_sample) in enumerate(X_train):\n            y_pred[i] += predict_tree(tree, x_sample, learning_rate)\n    final_test_predictions = predict_trees(trees, X_test, learning_rate)\n    return [round(pred, 4) for pred in final_test_predictions]\nX_train = np.random.rand(50, 2)\ny_train = np.random.rand(50)\nX_test = np.random.rand(10, 2)"}
{"task_id": 413, "completion_id": 8, "solution": "import numpy as np\nclass TreeNode:\n\n    def __init__(self, idx_feature=None, threshold=None, left=None, right=None, value=None):\n        self.idx_feature = idx_feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\ndef mse(y):\n    return np.mean((y - np.mean(y)) ** 2)\ndef build_tree(X, y, depth, max_depth):\n    if depth == max_depth or len(np.unique(y)) == 1:\n        return TreeNode(value=np.mean(y))\n    best_gain = -float('inf')\n    (split_feature, split_threshold) = (None, None)\n    (n_samples, n_features) = X.shape\n    for idx in range(n_features):\n        thresholds = np.unique(X[:, idx])\n        for threshold in thresholds:\n            (left_y, right_y) = (y[X[:, idx] <= threshold], y[X[:, idx] > threshold])\n            if len(left_y) == 0 or len(right_y) == 0:\n                continue\n            gain = mse(y) - (len(left_y) * mse(left_y) + len(right_y) * mse(right_y)) / n_samples\n            if gain > best_gain:\n                best_gain = gain\n                (split_feature, split_threshold) = (idx, threshold)\n    if split_feature is None or split_threshold is None:\n        return TreeNode(value=np.mean(y))\n    left = build_tree(X[X[:, split_feature] <= split_threshold], y[X[:, split_feature] <= split_threshold], depth + 1, max_depth)\n    right = build_tree(X[X[:, split_feature] > split_threshold], y[X[:, split_feature] > split_threshold], depth + 1, max_depth)\n    return TreeNode(idx_feature=split_feature, threshold=split_threshold, left=left, right=right)\ndef predict_tree(node, x):\n    if node.value is not None:\n        return node.value\n    if x[node.idx_feature] <= node.threshold:\n        return predict_tree(node.left, x)\n    else:\n        return predict_tree(node.right, x)\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    predictions = np.full(len(y_train), np.mean(y_train))\n    for _ in range(n_estimators):\n        residuals = y_train - predictions\n        tree = build_tree(X_train, residuals, 0, max_depth)\n        predictions += learning_rate * np.array([predict_tree(tree, x) for x in X_train])\n    return [round(np.mean(y_train) + learning_rate * sum([predict_tree(build_tree(X_train, y_train - np.mean(y_train), 0, max_depth), x) for _ in range(n_estimators)]), 4) for x in X_test]"}
{"task_id": 413, "completion_id": 9, "solution": "import numpy as np\ndef find_split(X, y, min_samples_leaf=1):\n    \"\"\"Find the best split for a node based on MSE reduction.\"\"\"\n    best_split = {}\n    n_samples = X.shape[0]\n    y_mean = np.mean(y)\n    best_mse = np.sum((y - y_mean) ** 2)\n    for idx in range(X.shape[1]):\n        values = np.unique(X[:, idx])\n        for value in values:\n            left_indices = X[:, idx] <= value\n            right_indices = X[:, idx] > value\n            n_left = np.sum(left_indices)\n            n_right = np.sum(right_indices)\n            if n_left >= min_samples_leaf and n_right >= min_samples_leaf:\n                left_y = y[left_indices]\n                left_mean = np.mean(left_y)\n                left_mse = np.sum((left_y - left_mean) ** 2)\n                right_y = y[right_indices]\n                right_mean = np.mean(right_y)\n                right_mse = np.sum((right_y - right_mean) ** 2)\n                mse = (left_mse + right_mse) / n_samples\n                if mse < best_mse:\n                    best_mse = mse\n                    best_split['feature'] = idx\n                    best_split['value'] = value\n                    best_split['left_indices'] = left_indices\n                    best_split['right_indices'] = right_indices\n    return best_split\ndef build_tree(X, y, depth=0, max_depth=None):\n    \"\"\"Build a decision tree based on the X and y data.\"\"\"\n    if len(np.unique(y)) == 1 or depth == max_depth:\n        return {'value': np.mean(y)}\n    split = find_split(X, y)\n    if not split:\n        return {'value': np.mean(y)}\n    left_tree = build_tree(X[split['left_indices']], y[split['left_indices']], depth=depth + 1, max_depth=max_depth)\n    right_tree = build_tree(X[split['right_indices']], y[split['right_indices']], depth=depth + 1, max_depth=max_depth)\n    return {'split': split, 'left_tree': left_tree, 'right_tree': right_tree}\ndef predict_row(tree, x_row):\n    \"\"\"Predict the output for a single row of data using the tree.\"\"\"\n    if 'value' in tree:\n        return tree['value']\n    if x_row[tree['split']['feature']] <= tree['split']['value']:\n        return predict_row(tree['left_tree'], x_row)\n    else:\n        return predict_row(tree['right_tree'], x_row)\ndef predict_tree(tree, X):\n    \"\"\"Predict the outputs for multiple rows of data using the tree.\"\"\"\n    return [predict_row(tree, x) for x in X]\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\"\"\"\n    initial_prediction = np.mean(y_train)\n    predictions = [initial_prediction] * len(X_train)\n    test_predictions = [initial_prediction] * len(X_test)\n    for _ in range(n_estimators):\n        residuals = y_train - np.array(predictions)\n        tree = build_tree(X_train, residuals, max_depth=max_depth)\n        predictions += learning_rate * np.array(predict_tree(tree, X_train))\n        test_predictions += learning_rate * np.array(predict_tree(tree, X_test))\n    return [round(pred, 4) for pred in test_predictions]"}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the multivariate Gaussian probability density function values for each point in X.\n    \n    Parameters:\n    X (2D numpy array): Data points for which the density values need to be evaluated.\n    mean (1D numpy array): Mean vector of the Gaussian distribution.\n    cov (2D numpy array): Covariance matrix of the Gaussian distribution, must be positive-definite.\n    \n    Returns:\n    list: A list of floats, with each element being the Gaussian PDF value for each point in X\n          rounded to 4 decimal places.\n    \"\"\"\n    X = np.atleast_2d(X)\n    mean = np.atleast_1d(mean)\n    cov = np.atleast_2d(cov)\n    cov_det = np.linalg.det(cov)\n    cov_inv = np.linalg.inv(cov)\n    norm_const = 1.0 / math.sqrt(np.power(2 * math.pi, mean.size) * cov_det)\n    pdf_values = []\n    for x in X:\n        diff = x - mean\n        exponent = -0.5 * np.dot(np.dot(diff, cov_inv), diff)\n        pdf = norm_const * math.exp(exponent)\n        pdf_values.append(round(pdf, 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 1, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculates the probability density function (PDF) values for a multivariate Gaussian distribution.\n\n    Parameters:\n    X (numpy.ndarray): Input data points of shape (n_samples, n_features).\n    mean (numpy.ndarray): Mean vector of the distribution of shape (n_features,).\n    cov (numpy.ndarray): Covariance matrix of the distribution of shape (n_features, n_features).\n\n    Returns:\n    list: Vector containing the PDF values for each point in X, rounded to 4 decimal places.\n    \"\"\"\n    if len(X.shape) == 1:\n        X = X.reshape(-1, 1)\n    (n_samples, n_features) = X.shape\n    det_cov = np.linalg.det(cov)\n    cov_inv = np.linalg.inv(cov)\n    constant = 1.0 / np.sqrt((2 * np.pi) ** n_features * det_cov)\n    pdf_values = []\n    for x in X:\n        deviation = x - mean\n        exponential_term = -0.5 * np.dot(np.dot(deviation, cov_inv), deviation.T)\n        pdf_value = constant * np.exp(exponential_term)\n        pdf_values.append(round(pdf_value, 4))\n    return pdf_values\nX = np.array([[1, 2], [3, 4]])\nmean = np.array([0, 2])\ncov = np.array([[1, 0.2], [0.2, 2]])"}
{"task_id": 416, "completion_id": 2, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the Multivariate Gaussian PDF for a given set of data points,\n    mean vector, and covariance matrix without using third-party libraries like SciPy.\n    \n    Parameters:\n    - X (numpy.ndarray): n_samples by n_features array containing data points.\n    - mean (numpy.ndarray): The mean vector containing the means for each feature.\n    - cov (numpy.ndarray): The covariance matrix for the distribution.\n    \n    Returns:\n    - list: A list containing the PDF values for each data point in X, rounded to 4 decimal places.\n    \"\"\"\n    X = np.array(X)\n    mean = np.array(mean)\n    cov = np.array(cov)\n    (n_samples, n_features) = X.shape\n    cov_det = np.linalg.det(cov)\n    cov_inv = np.linalg.inv(cov)\n    normalization_factor = 1.0 / ((2 * math.pi) ** (n_features / 2.0) * cov_det ** 0.5)\n    pdf_values = []\n    for x in X:\n        diff = x - mean\n        diff = diff[:, np.newaxis]\n        exponent_term = -0.5 * np.dot(np.dot(diff.T, cov_inv), diff)\n        pdf_val = normalization_factor * math.exp(exponent_term)\n        pdf_values.append(round(pdf_val[0][0], 4))\n    return pdf_values\nX = np.array([[1, 2], [2, 3], [3, 4]])\nmean = np.array([2, 3])\ncov = np.array([[1, 0.5], [0.5, 1]])"}
{"task_id": 416, "completion_id": 3, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the multivariate Gaussian (normal) distribution's PDF.\n    \n    Parameters:\n    - X: NumPy array of shape (n_samples, n_features). Observations for which the PDFs are to be computed.\n    - mean: NumPy array of shape (n_features). The mean vector of the distribution.\n    - cov: NumPy array of shape (n_features, n_features). The covariance matrix of the distribution.\n    \n    Returns:\n    A list where each element represents the PDF value of the corresponding row in X, rounded to 4 decimal places.\n    \"\"\"\n    if X.ndim == 1:\n        X = X[:, np.newaxis]\n    (n_samples, n_features) = X.shape\n    if len(mean) != n_features or cov.shape != (n_features, n_features):\n        raise ValueError('Incompatible dimensions for X, mean, or cov.')\n    cov_inv = np.linalg.inv(cov)\n    cov_det = np.linalg.det(cov)\n    numerator = 1.0 / np.sqrt((2 * np.pi) ** n_features * cov_det)\n\n    def compute_pdf(x):\n        exponent = -0.5 * np.dot(np.dot(x - mean, cov_inv), (x - mean).T)\n        return numerator * np.exp(exponent)\n    pdf_values = [compute_pdf(X[i]) for i in range(n_samples)]\n    return [round(pdf, 4) for pdf in pdf_values]\nmean = np.array([0, 0])\ncov = np.array([[1, 0.5], [0.5, 1]])\nX = np.array([[0, 0], [1, -1], [-1, 1]])"}
{"task_id": 416, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the probability density function of a multivariate Gaussian distribution.\n\n    Parameters:\n    X (np.ndarray): A NumPy array of shape (n_samples, n_features) containing data points.\n    mean (np.ndarray): A NumPy array of shape (n_features,) representing the mean vector.\n    cov (np.ndarray): A NumPy array representing the covariance matrix (n_features, n_features).\n\n    Returns:\n    list: A list of PDF values for each sample in X, rounded to 4 decimal places.\n    \"\"\"\n    if len(X.shape) == 1:\n        X = X[:, np.newaxis]\n    (n_samples, n_features) = X.shape\n    cov_inv = np.linalg.inv(cov)\n    cov_det = np.linalg.det(cov)\n    norm_coeff = math.pow(2 * math.pi, -n_features / 2) * math.pow(cov_det, -0.5)\n    diff = X - mean\n    exponent = -0.5 * np.sum(np.dot(diff, cov_inv) * diff, axis=1)\n    pdf_values = norm_coeff * np.exp(exponent)\n    return [round(pdf, 4) for pdf in pdf_values]\nX = np.array([[1.2, 3.4], [1.8, 3.9]])\nmean = np.array([2.0, 3.0])\ncov = np.array([[1.0, 0.5], [0.5, 2.0]])"}
{"task_id": 416, "completion_id": 5, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the probability density function values of a multivariate Gaussian distribution.\n\n    Parameters:\n    X (np.ndarray): (n_samples, n_features) array of data points.\n    mean (np.ndarray): The mean vector of the Gaussian distribution.\n    cov (np.ndarray): The covariance matrix of the Gaussian distribution.\n\n    Returns:\n    list: List of PDF values rounded to four decimal places.\n    \"\"\"\n    if len(X.shape) == 1:\n        X = X[:, np.newaxis]\n    (n_samples, n_features) = X.shape\n    mean = np.array(mean).reshape(n_features, 1)\n    cov = np.array(cov)\n    norm_coeff = np.sqrt((2 * np.pi) ** n_features * np.linalg.det(cov))\n    inv_cov = np.linalg.inv(cov)\n    pdf_values = []\n    for sample in X:\n        sample = sample.reshape(n_features, 1)\n        diff = sample - mean\n        exponent = -0.5 * (diff.T @ inv_cov @ diff)\n        pdf = 1 / norm_coeff * np.exp(exponent)\n        pdf_values.append(round(pdf[0][0], 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 6, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the PDF of a multivariate Gaussian distribution for each sample in X.\n\n    Parameters:\n    X (np.ndarray): A 1-D or 2-D numpy array of shape (n_samples,) or (n_samples, n_features) \n                    containing the data points for which the PDF values must be evaluated.\n    mean (np.ndarray): A 1-D numpy array of length n_features representing the mean vector of the distribution.\n    cov (np.ndarray): A 2-D numpy array of shape (n_features, n_features) representing the covariance matrix of the distribution.\n    \n    Returns:\n    list: A list containing the PDF value for each sample in X, rounded to four decimal places.\n    \"\"\"\n    if X.ndim == 1:\n        X = X[:, np.newaxis]\n    (n_samples, n_features) = X.shape\n    X_centered = X - mean\n    cov_det = np.linalg.det(cov)\n    cov_inv = np.linalg.inv(cov)\n    det_cov_term = 1 / math.sqrt((2 * math.pi) ** n_features * cov_det)\n    exponential_terms = []\n    for x_centered in X_centered:\n        exp_term = -0.5 * np.dot(np.dot(x_centered.T, cov_inv), x_centered)\n        exponential_terms.append(exp_term)\n    pdf_values = [det_cov_term * math.exp(exp_term) for exp_term in exponential_terms]\n    return [round(pdf, 4) for pdf in pdf_values]\nX = np.array([[1, 2], [3, 4]])\nmean = np.array([0, 0])\ncov = np.array([[1, 0], [0, 1]])"}
{"task_id": 416, "completion_id": 7, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the multivariate Gaussian probability density function.\n    \n    Parameters:\n    - X: NumPy array (n_samples, n_features), the data points to evaluate.\n    - mean: NumPy array (n_features,), mean vector of the multivariate Gaussian.\n    - cov: NumPy array (n_features, n_features), the covariance matrix.\n    \n    Returns:\n    - List of PDF values for each point of X, rounded to 4 decimal places.\n    \"\"\"\n    if len(X.shape) == 1:\n        X = X[:, np.newaxis]\n    (n_samples, n_features) = X.shape\n    cov_inv = np.linalg.inv(cov)\n    det_cov = np.linalg.det(cov)\n    norm_const = 1 / np.sqrt((2 * math.pi) ** n_features * det_cov)\n    pdf_values = []\n    for x in X:\n        x_centered = x - mean\n        pdf_value = norm_const * np.exp(-0.5 * np.dot(np.dot(x_centered, cov_inv), x_centered.T))\n        pdf_values.append(round(pdf_value, 4))\n    return pdf_values\nmean = np.array([0, 0])\ncov = np.array([[1, 0], [0, 1]])\nX = np.array([[0, 0], [1, 1], [-1, -1]])"}
{"task_id": 416, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the Probability Density Function of a multivariate Gaussian (Normal) distribution.\n    \n    :param X: NumPy array of shape (n_samples, n_features) containing the data points.\n    :param mean: The mean vector of the distribution (length n_features).\n    :param cov: The covariance matrix of shape (n_features, n_features).\n    :return: A list containing PDF values for each sample rounded to four decimal places.\n    \"\"\"\n    X = np.atleast_2d(X)\n    (n_samples, n_features) = X.shape\n    mean = np.atleast_1d(mean)\n    cov = np.atleast_2d(cov)\n    cov_det = np.linalg.det(cov)\n    cov_inv = np.linalg.inv(cov)\n    norm_const = 1.0 / math.sqrt((2 * np.pi) ** n_features * cov_det)\n    pdf_values = []\n    for x in X:\n        diff = x - mean\n        exponent = -0.5 * np.dot(np.dot(diff, cov_inv), diff.T)\n        pdf = norm_const * np.exp(exponent)\n        pdf_values.append(round(pdf, 4))\n    return pdf_values\nX = np.array([[1, 2], [3, 4]])\nmean = np.array([1, 2])\ncov = np.array([[1, 0], [0, 1]])"}
{"task_id": 416, "completion_id": 9, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Evaluates the multivariate Gaussian probability density function for each data point in X.\n    \n    Parameters:\n    - X: A (n_samples, n_features) NumPy array of data points.\n    - mean: An array representing the mean vector of the distribution.\n    - cov: A square (n_features, n_features) matrix representing the covariance matrix.\n    \n    Returns:\n    - A Python list containing the PDF values for each data point in X, rounded to 4 decimal places.\n    \"\"\"\n    X = np.atleast_2d(X)\n    (n_samples, n_features) = X.shape\n    assert len(mean) == n_features and cov.shape == (n_features, n_features), 'Dimension mismatch'\n    cov_inv = np.linalg.inv(cov)\n    cov_det = np.linalg.det(cov)\n    norm_factor = 1.0 / (math.pow(2 * math.pi, n_features / 2) * math.sqrt(cov_det))\n    pdf_values = []\n    for x in X:\n        delta = x - mean\n        exponent = -0.5 * np.dot(np.dot(delta, cov_inv), delta.T)\n        pdf = norm_factor * math.exp(exponent)\n        pdf_values.append(round(pdf, 4))\n    return pdf_values\nX = np.array([[1, 2], [2, 3], [3, 2]])\nmean = np.array([1, 2])\ncov = np.array([[1, 0.5], [0.5, 1]])"}
{"task_id": 419, "completion_id": 0, "solution": "import numpy as np\ndef add_intercept(X: np.ndarray) -> np.ndarray:\n    \"\"\"Adds an intercept column (of ones) to the design matrix.\"\"\"\n    intercept = np.ones((X.shape[0], 1))\n    return np.hstack((X, intercept))\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = add_intercept(X)\n        X_new = add_intercept(X_new)\n    M = X.shape[1]\n    if isinstance(mu, (float, int)):\n        mu = np.ones(M) * mu\n    if V is None:\n        V = np.eye(M)\n    elif isinstance(V, (float, int)):\n        V = np.eye(M) * V\n    elif V.ndim == 1:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    y_pred = X_new @ mu_p\n    return [round(pred, 4) for pred in y_pred]"}
{"task_id": 419, "completion_id": 1, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    if V is None:\n        V_inv = np.eye(X.shape[1])\n    elif np.isscalar(V):\n        V_inv = np.diag(np.ones(X.shape[1]) / V)\n    elif V.ndim == 1:\n        V_inv = np.diag(1 / V)\n    else:\n        V_inv = np.linalg.inv(V)\n    if np.isscalar(mu):\n        mu = mu * np.ones(X.shape[1])\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    y_pred = X_new @ mu_p\n    return [round(float(pred), 4) for pred in y_pred]\nX = np.array([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]])\ny = np.array([0.1, 0.2, 0.3])\nX_new = np.array([[0.7, 0.8]])"}
{"task_id": 419, "completion_id": 2, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.c_[X, np.ones(X.shape[0])]\n        X_new = np.c_[X_new, np.ones(X_new.shape[0])]\n    if isinstance(mu, float):\n        mu = np.ones(X.shape[1]) * mu\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, float):\n        V = np.eye(X.shape[1]) * V\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(sigma ** 2 * V)\n    XtX = X.T @ X\n    Sigma_p = np.linalg.inv(V_inv + XtX)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    y_pred = X_new @ mu_p\n    return [round(pred, 4) for pred in y_pred]"}
{"task_id": 419, "completion_id": 3, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive mean for every row in `X_new`.\n    \"\"\"\n    if fit_intercept:\n        X = np.column_stack((np.ones(X.shape[0]), X))\n        X_new = np.column_stack((np.ones(X_new.shape[0]), X_new))\n    if isinstance(mu, float) or isinstance(mu, int):\n        mu = mu * np.ones(X.shape[1])\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, float):\n        V = V * np.eye(X.shape[1])\n    elif V.ndim == 1:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    y_pred = X_new @ mu_p\n    return [round(pred, 4) for pred in y_pred]"}
{"task_id": 419, "completion_id": 4, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        intercept_column = np.ones((X.shape[0], 1))\n        X = np.hstack((X, intercept_column))\n        intercept_column_new = np.ones((X_new.shape[0], 1))\n        X_new = np.hstack((X_new, intercept_column_new))\n    if isinstance(mu, (float, int)):\n        mu = np.full(X.shape[1], mu, dtype=float)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (float, int)):\n        V = V * np.eye(X.shape[1])\n    elif V.ndim == 1:\n        V = np.diag(V)\n    elif V.ndim == 2 and (not np.allclose(V, V.T)):\n        raise ValueError('V is not symmetric')\n    V_inv = np.linalg.inv(V)\n    XTX = X.T @ X\n    XTy = X.T @ y\n    Sigma_post = np.linalg.inv(V_inv + XTX)\n    mu_post = Sigma_post @ (V_inv @ mu + XTy)\n    y_pred = X_new @ mu_post\n    return [round(pred, 4) for pred in y_pred]"}
{"task_id": 419, "completion_id": 5, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.c_[X, np.ones(X.shape[0])]\n        X_new = np.c_[X_new, np.ones(X_new.shape[0])]\n    if isinstance(mu, float) or isinstance(mu, int):\n        mu = np.full(X.shape[1], mu, dtype=float)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (float, int)):\n        V = V * np.eye(X.shape[1])\n    elif len(V.shape) == 1:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + np.dot(X.T, X))\n    mu_p = np.dot(Sigma_p, np.dot(V_inv, mu) + np.dot(X.T, y))\n    y_pred = np.dot(X_new, mu_p)\n    return [round(pred, 4) for pred in y_pred]\nX = np.array([[1, 2], [3, 4]])\ny = np.array([5, 6])\nX_new = np.array([[4, 5]])\nmu = 0.0\nV = 1.0\nfit_intercept = True"}
{"task_id": 419, "completion_id": 6, "solution": "import numpy as np\ndef _add_intercept(X: np.ndarray) -> np.ndarray:\n    \"\"\"Adds a column of ones to the input array X.\"\"\"\n    intercept = np.ones((X.shape[0], 1))\n    return np.hstack((intercept, X))\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n    \n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = _add_intercept(X)\n        X_new = _add_intercept(X_new)\n    m = X.shape[1]\n    if V is None:\n        V = np.eye(m)\n    elif np.isscalar(V):\n        V = V * np.eye(m)\n    elif V.ndim == 1:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ np.atleast_1d(mu) + X.T @ y)\n    y_pred = X_new @ mu_p\n    y_pred_rounded = [round(val, 4) for val in y_pred]\n    return y_pred_rounded\nX = np.array([[0.1, 0.2], [0.4, 0.5], [0.7, 0.8]])\ny = np.array([1.1, 2.2, 3.3])\nX_new = np.array([[0.2, 0.3], [0.5, 0.6]])\nmu = np.array([0.0, 0.0])\nV = np.array([[1.0, 0], [0, 1.0]])\nfit_intercept = True"}
{"task_id": 419, "completion_id": 7, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.column_stack([X, np.ones(len(X))])\n        X_new = np.column_stack([X_new, np.ones(len(X_new))])\n    (N, M) = X.shape\n    if V is None:\n        V = np.eye(M)\n    elif np.isscalar(V):\n        V = V * np.eye(M)\n    elif V.ndim == 1:\n        V = np.diag(V)\n    if np.isscalar(mu):\n        mu = mu * np.ones(M)\n    V_inv = np.linalg.inv(V)\n    XTX = X.T @ X\n    Sigma_p = np.linalg.inv(V_inv + XTX)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    y_new = X_new @ mu_p\n    return [round(float(val), 4) for val in y_new]"}
{"task_id": 419, "completion_id": 8, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    (N, M) = X.shape\n    if isinstance(mu, float):\n        mu = np.full(M, mu)\n    if V is None:\n        V = np.eye(M)\n    elif isinstance(V, float):\n        V = V * np.eye(M)\n    elif isinstance(V, np.ndarray) and len(V.shape) == 1:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    y_new = X_new @ mu_p\n    y_new_rounded = [round(val, 4) for val in y_new]\n    return y_new_rounded\nX = np.array([[1.0, 2.0], [3.0, 4.0]])\ny = np.array([3.0, 7.0])\nX_new = np.array([[2.0, 3.0], [4.0, 5.0]])\nmu = 0.0\nV = None\nfit_intercept = True"}
{"task_id": 419, "completion_id": 9, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.column_stack([X, np.ones(X.shape[0])])\n        X_new = np.column_stack([X_new, np.ones(X_new.shape[0])])\n    if isinstance(V, (int, float)):\n        V = V * np.eye(X.shape[1])\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    elif V is None:\n        V = np.eye(X.shape[1])\n    V_inv = np.linalg.inv(V)\n    XTX = X.T @ X\n    V_inv_mu = V_inv @ mu if isinstance(mu, np.ndarray) else V_inv * mu\n    Sigma_p = np.linalg.inv(V_inv + XTX)\n    mu_p = Sigma_p @ (V_inv_mu + X.T @ y)\n    y_pred = X_new @ mu_p\n    return [round(float(val), 4) for val in y_pred]\nX = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\ny = np.dot(X, np.array([1, 2])) + 3\nX_new = np.array([[3, 5], [5, 5]])"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculates the Root Mean Squared Logarithmic Error (RMSLE) between two lists of non-negative numbers.\n    \n    Args:\n        actual: A list of non-negative floats representing the actual values.\n        predicted: A list of non-negative floats representing the predicted values.\n    \n    Returns:\n        The RMSLE rounded to 4 decimal places, or -1 if input constraints are not met.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    for value in actual + predicted:\n        if value < 0:\n            return -1\n    rmsle = np.sqrt(np.mean((np.log1p(predicted) - np.log1p(actual)) ** 2))\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 1, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculates the root mean squared logarithmic error for two lists of non-negative numbers.\n    Returns -1 if lists are not of the same length or if any number is negative.\n    \n    The RMSLE is computed as sqrt( (1/n) * sum( (log(1 + predicted) - log(1 + actual))^2 ) )\n    \n    :param actual: List of actual non-negative float values.\n    :param predicted: List of predicted non-negative float values.\n    :return: The RMSLE score, rounded to four decimal places, or -1 if validation fails.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any(actual) < 0 or any(predicted) < 0:\n        return -1\n    n = len(actual)\n    log_diffs = [(np.log1p(predicted[i]) - np.log1p(actual[i])) ** 2 for i in range(n)]\n    rmsle = np.sqrt(np.mean(log_diffs))\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 2, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    if len(actual) != len(predicted):\n        return -1\n    for value in actual + predicted:\n        if value < 0:\n            return -1\n    n = len(actual)\n    log_error = np.log1p(predicted) - np.log1p(actual)\n    rmsle = np.sqrt(np.mean(log_error ** 2))\n    return round(rmsle, 4)\nactual = [1.5, 2.0, 3.0]\npredicted = [1.0, 2.5, 2.8]"}
{"task_id": 423, "completion_id": 3, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculates the Root Mean Squared Logarithmic Error (RMSLE).\n    \n    Parameters:\n    actual (list of float): The ground-truth values.\n    predicted (list of float): The model predictions.\n    \n    Returns:\n    float: The RMSLE metric rounded to four decimal places or -1 if inputs are invalid.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if not all((actual_i >= 0 and pred_i >= 0 for (actual_i, pred_i) in zip(actual, predicted))):\n        return -1\n    n = len(actual)\n    rmsle = np.sqrt(1 / n * np.sum((np.log1p(predicted) - np.log1p(actual)) ** 2))\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 4, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error between the actual and predicted values.\n\n    This function first checks if both input lists have the same length and contain only non-negative\n    numbers. If any of these conditions is not met, the function returns -1. Otherwise, it calculates\n    the RMSLE according to the defined formula and returns the result rounded to four decimal places.\n    \"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    for val in actual + predicted:\n        if val < 0:\n            return -1\n    error = 0.0\n    for i in range(len(actual)):\n        error += (np.log1p(predicted[i]) - np.log1p(actual[i])) ** 2\n    rmsle = np.sqrt(error / len(actual))\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 5, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    if len(actual) != len(predicted):\n        return -1\n    if any((x < 0 or y < 0 for (x, y) in zip(actual, predicted))):\n        return -1\n    n = len(actual)\n    log_error = np.sqrt(np.mean((np.log1p(predicted) - np.log1p(actual)) ** 2))\n    return round(log_error, 4)"}
{"task_id": 423, "completion_id": 6, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    if len(actual) != len(predicted):\n        return -1\n    if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n        return -1\n    actual_arr = np.array(actual)\n    predicted_arr = np.array(predicted)\n    try:\n        rmsle = np.sqrt(np.mean((np.log1p(predicted_arr) - np.log1p(actual_arr)) ** 2))\n    except ValueError as e:\n        print(f'An error occurred: {e}')\n        return -1\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 7, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    if len(actual) != len(predicted):\n        return -1\n    if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n        return -1\n    n = len(actual)\n    log_diff_squared = [(np.log(1 + predicted[i]) - np.log(1 + actual[i])) ** 2 for i in range(n)]\n    rmsle = np.sqrt(np.sum(log_diff_squared) / n)\n    return round(rmsle, 4)\nactual = [1.5, 2.0, 3.0]\npredicted = [1.0, 2.5, 2.8]"}
{"task_id": 423, "completion_id": 8, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    if len(actual) != len(predicted):\n        return -1\n    if not all((x >= 0 for x in actual)) or not all((x >= 0 for x in predicted)):\n        return -1\n    n = len(actual)\n    rmsle = np.sqrt(np.mean((np.log1p(predicted) - np.log1p(actual)) ** 2))\n    return round(rmsle, 4)\nactual = [1.0, 2.0, 3.0]\npredicted = [1.1, 2.1, 2.9]"}
{"task_id": 423, "completion_id": 9, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Compute the Root Mean Squared Logarithmic Error between actual and predicted values.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    for values in (actual, predicted):\n        if any((value < 0 for value in values)):\n            return -1\n    n = len(actual)\n    log_diff_squared = [(np.log(1 + predicted_i) - np.log(1 + actual_i)) ** 2 for (actual_i, predicted_i) in zip(actual, predicted)]\n    rmsle = np.sqrt(np.mean(log_diff_squared))\n    return round(rmsle, 4)"}
{"task_id": 428, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    n = np.arange(window_len if symmetric else window_len + 1)\n    hann_window = 0.5 - 0.5 * np.cos(2 * math.pi * n / (window_len - 1 if symmetric else window_len))\n    if not symmetric:\n        hann_window = hann_window[:-1]\n    return [round(x, 4) for x in hann_window.tolist()]"}
{"task_id": 428, "completion_id": 1, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        hann_window = [0.5 - 0.5 * math.cos(2 * math.pi * n / (window_len - 1)) for n in range(window_len)]\n    else:\n        hann_window = [0.5 - 0.5 * math.cos(2 * math.pi * n / window_len) for n in range(window_len + 1)][:-1]\n    hann_window_rounded = [round(coeff, 4) for coeff in hann_window]\n    return hann_window_rounded"}
{"task_id": 428, "completion_id": 2, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    n = np.arange(window_len + (0 if symmetric else 1))\n    hann_window = 0.5 - 0.5 * np.cos(2 * math.pi * n / (window_len - 1 + (0 if symmetric else 1)))\n    if not symmetric:\n        hann_window = hann_window[:-1]\n    return [round(x, 4) for x in hann_window.tolist()]"}
{"task_id": 428, "completion_id": 3, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        actual_len = window_len if symmetric else window_len + 1\n        n = np.arange(actual_len)\n        hann_window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (actual_len - 1))\n        if not symmetric:\n            hann_window = hann_window[:-1]\n        return [round(float(x), 4) for x in hann_window]"}
{"task_id": 428, "completion_id": 4, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    aux_window_len = window_len + 1 if not symmetric else window_len\n    hann_window = 0.5 - 0.5 * np.cos(2 * np.pi * np.arange(aux_window_len) / (aux_window_len - 1))\n    if not symmetric:\n        hann_window = hann_window[:-1]\n    return [round(x, 4) for x in hann_window]"}
{"task_id": 428, "completion_id": 5, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        if symmetric:\n            n_values = np.arange(window_len)\n        else:\n            n_values = np.arange(window_len + 1)[:-1]\n        hann_win = 0.5 - 0.5 * np.cos(2 * np.pi * n_values / (window_len - 1))\n        return [round(x, 4) for x in hann_win]"}
{"task_id": 428, "completion_id": 6, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if not symmetric:\n        window_len += 1\n    hann_window = 0.5 - 0.5 * np.cos(2 * np.pi * np.arange(window_len) / (window_len - 1))\n    hann_window = np.round(hann_window, 4)\n    hann_window = hann_window.tolist()\n    if not symmetric:\n        hann_window = hann_window[:-1]\n    return hann_window"}
{"task_id": 428, "completion_id": 7, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"\n    Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window,\n    an instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if not symmetric:\n        window_len += 1\n    hann_window = [0.5 - 0.5 * math.cos(2 * math.pi * n / (window_len - 1)) for n in range(window_len)]\n    if not symmetric:\n        hann_window = hann_window[:-1]\n    return [round(w, 4) for w in hann_window]"}
{"task_id": 428, "completion_id": 8, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        if symmetric:\n            n_values = np.arange(window_len)\n        else:\n            n_values = np.arange(window_len + 1)[:-1]\n        window = 0.5 - 0.5 * np.cos(2 * math.pi * n_values / (window_len - 1 if symmetric else window_len))\n        return [round(coef, 4) for coef in window]"}
{"task_id": 428, "completion_id": 9, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    if symmetric:\n        n = np.arange(window_len)\n    else:\n        n = np.arange(window_len + 1)[:-1]\n    hann_window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len - 1 + int(not symmetric)))\n    hann_window = np.round(hann_window, 4)\n    return hann_window.tolist()"}
{"task_id": 433, "completion_id": 0, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (in_channels, out_channels) = (shape[1], shape[0])\n        receptive_field_size = np.prod(shape[2:])\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        (fan_in, fan_out) = (float(shape[1]), float(shape[0]))\n    return (fan_in, fan_out)"}
{"task_id": 433, "completion_id": 1, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    return (float(fan_in), float(fan_out))"}
{"task_id": 433, "completion_id": 2, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        in_channels = shape[1]\n        out_channels = shape[0]\n        receptive_field_size = shape[2] * shape[3]\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        (fan_out, fan_in) = (shape[0], shape[1])\n    return (float(fan_in), float(fan_out))"}
{"task_id": 433, "completion_id": 3, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        fan_in = float(shape[1])\n        fan_out = float(shape[0])\n    return (fan_in, fan_out)"}
{"task_id": 433, "completion_id": 4, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        (fan_in, fan_out) = (float(shape[1]), float(shape[0]))\n    return (fan_in, fan_out)"}
{"task_id": 433, "completion_id": 5, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            (out_channels, in_channels, kernel_height, kernel_width)).\n\n    Returns:\n        A tuple (fan_in, fan_out) with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        receptive_field_size = shape[2] * shape[3]\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    else:\n        (fan_in, fan_out) = (shape[1], shape[0])\n    return (float(fan_in), float(fan_out))"}
{"task_id": 433, "completion_id": 6, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n        return (fan_in, fan_out)\n    elif len(shape) >= 2:\n        (fan_in, fan_out) = (shape[1], shape[0])\n        return (float(fan_in), float(fan_out))\n    else:\n        raise ValueError('Shape must have at least two dimensions.')"}
{"task_id": 433, "completion_id": 7, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        fan_in = shape[1] * shape[2] * shape[3]\n        fan_out = shape[0] * shape[2] * shape[3]\n    else:\n        (fan_in, fan_out) = shape[:2]\n    return (float(fan_in), float(fan_out))"}
{"task_id": 433, "completion_id": 8, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        receptive_field_size = shape[2] * shape[3]\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    else:\n        (fan_in, fan_out) = (shape[1], shape[0])\n    return (float(fan_in), float(fan_out))"}
{"task_id": 433, "completion_id": 9, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n    \n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        receptive_field_size = shape[2] * shape[3]\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    else:\n        (fan_in, fan_out) = shape[:2]\n    return (float(fan_in), float(fan_out))"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    y_mean = np.mean(y)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(y_mean, 4)] * len(y)\n    y_pred = np.full_like(y, y_mean, dtype=float)\n    for t in range(n_estimators):\n        residuals = y - y_pred\n        X_ext = np.hstack((np.ones((X.shape[0], 1)), X))\n        betas = np.linalg.lstsq(X_ext, residuals, rcond=None)[0]\n        h_t = np.dot(X_ext, betas)\n        y_pred += learning_rate * h_t\n    return [round(pred, 4) for pred in y_pred.tolist()]"}
{"task_id": 435, "completion_id": 1, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    y_pred = np.full(y.shape, y.mean())\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(y.mean(), 4)] * len(y)\n    for t in range(n_estimators):\n        r = y - y_pred\n        model = np.linalg.lstsq(X, r, rcond=None)[0]\n        predictions = np.dot(X, model)\n        y_pred += learning_rate * predictions\n    y_pred = [round(pred, 4) for pred in y_pred.tolist()]\n    return y_pred"}
{"task_id": 435, "completion_id": 2, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4) for _ in range(len(y))]\n    y_pred = np.full_like(y, np.mean(y), dtype=float)\n    for t in range(1, n_estimators + 1):\n        residuals = y - y_pred\n        coeffs = np.linalg.lstsq(X, residuals, rcond=None)[0]\n        intercept = np.mean(residuals) - np.sum(X.mean(axis=0) * coeffs)\n        h_pred = np.dot(X, coeffs) + intercept\n        y_pred += learning_rate * h_pred\n    return [round(pred, 4) for pred in y_pred.tolist()]\nX = [[1.4], [2.5], [3.6], [4.7], [5.8]]\ny = [2.3, 3.2, 4.1, 5.0, 5.9]"}
{"task_id": 435, "completion_id": 3, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X_np = np.array(X).astype(float)\n    y_np = np.array(y).astype(float)\n    y_hat = np.full_like(y_np, y_np.mean())\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(float(y_hat[0]), 4)]\n    X_np = np.c_[np.ones(X_np.shape[0]), X_np]\n    for _ in range(n_estimators):\n        residuals = y_np - y_hat\n        beta = np.linalg.lstsq(X_np, residuals, rcond=None)[0]\n        y_hat += learning_rate * X_np @ beta\n    return [round(float(y), 4) for y in y_hat.tolist()]"}
{"task_id": 435, "completion_id": 4, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n    m_samples = X_np.shape[0]\n    y_pred = np.full(m_samples, y_np.mean(), dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(val, 4) for val in y_pred.tolist()]\n    for _ in range(n_estimators):\n        residuals = y_np - y_pred\n        X_np_with_intercept = np.column_stack((np.ones(m_samples), X_np))\n        weights = np.linalg.pinv(X_np_with_intercept.T @ X_np_with_intercept) @ X_np_with_intercept.T @ residuals\n        y_weak_pred = X_np_with_intercept @ weights\n        y_pred += learning_rate * y_weak_pred\n    return [round(val, 4) for val in y_pred.tolist()]"}
{"task_id": 435, "completion_id": 5, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n    \n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    m = X.shape[0]\n    y_pred = np.full(m, np.mean(y))\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4) for _ in range(m)]\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        X_with_intercept = np.hstack([np.ones((m, 1)), X])\n        coefficients = np.linalg.lstsq(X_with_intercept, residuals, rcond=None)[0]\n        h_pred = X_with_intercept @ coefficients\n        y_pred += learning_rate * h_pred\n    return [round(val, 4) for val in y_pred]\nX = [[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]\ny = [2.5, 5.5, 8.5]"}
{"task_id": 435, "completion_id": 6, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n    y_np = np.array(y, dtype=float)\n    predictions = np.full_like(y_np, np.mean(y_np), dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(float(pred), 4) for pred in predictions]\n    for _ in range(n_estimators):\n        residuals = y_np - predictions\n        X_with_intercept = np.column_stack((np.ones_like(y_np), X_np))\n        (w, _, _, _) = np.linalg.lstsq(X_with_intercept, residuals, rcond=None)\n        weak_learner_pred = np.dot(X_with_intercept, w)\n        predictions += learning_rate * weak_learner_pred\n    return [round(float(pred), 4) for pred in predictions]"}
{"task_id": 435, "completion_id": 7, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    y_hat = np.full_like(y, np.mean(y))\n    if n_estimators <= 0 or learning_rate == 0:\n        return list(np.round(y_hat, 4))\n    for t in range(n_estimators):\n        r = y - y_hat\n        X_bias = np.column_stack([X, np.ones((X.shape[0], 1))])\n        weights = np.linalg.solve(X_bias.T @ X_bias, X_bias.T @ r)\n        h_x = X_bias @ weights\n        y_hat += learning_rate * h_x\n    return list(np.round(y_hat, 4))"}
{"task_id": 435, "completion_id": 8, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n\n    def ols_regression(X, y):\n        X_ols = np.column_stack([X, np.ones(X.shape[0])])\n        beta = np.linalg.inv(X_ols.T @ X_ols) @ X_ols.T @ y\n        return beta\n    X = np.array(X, dtype=np.float)\n    y = np.array(y, dtype=np.float)\n    y_pred = np.full_like(y, y.mean())\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(float(i), 4) for i in y_pred]\n    for t in range(n_estimators):\n        r_t = y - y_pred\n        beta_t = ols_regression(X, r_t)\n        h_t = X @ beta_t[:-1] + beta_t[-1]\n        y_pred += learning_rate * h_t\n    return [round(float(i), 4) for i in y_pred]"}
{"task_id": 435, "completion_id": 9, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    (m, d) = X.shape\n    if n_estimators <= 0 or learning_rate == 0:\n        return [np.mean(y)] * m\n    y_pred = np.full_like(y, np.mean(y))\n    for t in range(n_estimators):\n        residuals = y - y_pred\n        X_b = np.c_[np.ones((m, 1)), X]\n        theta = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(residuals)\n        h_t = X_b.dot(theta)\n        y_pred = y_pred + learning_rate * h_t\n    return [round(val, 4) for val in y_pred.tolist()]"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n\n    def calc_sigmoid(x, order):\n        if order == 0:\n            return 1 / (1 + np.exp(-x))\n        elif order == 1:\n            sigmoid_val = 1 / (1 + np.exp(-x))\n            return sigmoid_val * (1 - sigmoid_val)\n        elif order == 2:\n            sigmoid_val = 1 / (1 + np.exp(-x))\n            return sigmoid_val * (1 - sigmoid_val) * (1 - 2 * sigmoid_val)\n        else:\n            return -1\n    if isinstance(x, np.ndarray) or isinstance(x, list):\n        if order not in [0, 1, 2]:\n            return -1\n        vectorized_sigmoid = np.vectorize(lambda y: calc_sigmoid(y, order))\n        result = vectorized_sigmoid(np.array(x))\n        return result.round(4).tolist()\n    else:\n        if order not in [0, 1, 2]:\n            return -1\n        try:\n            result = calc_sigmoid(x, order)\n            return round(result, 4)\n        except TypeError:\n            return -1"}
{"task_id": 437, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    x_arr = np.asarray(x)\n    y = np.zeros_like(x_arr)\n\n    def sigma(z):\n        return 1 / (1 + np.exp(-z))\n    if order == 0:\n        y = sigma(x_arr)\n    elif order == 1:\n        y = sigma(x_arr) * (1 - sigma(x_arr))\n    elif order == 2:\n        sig = sigma(x_arr)\n        y = sig * (1 - sig) * (1 - 2 * sig)\n    else:\n        y[0] = -1\n    y = np.round(y, decimals=4)\n    if isinstance(x, (int, float)):\n        return float(y)\n    return y.tolist()"}
{"task_id": 437, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x  (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    is_scalar = np.isscalar(x)\n    if is_scalar:\n        x = np.array([x])\n    x = np.array(x)\n    if order == 0:\n        result = 1 / (1 + np.exp(-x))\n    elif order == 1:\n        f_x = 1 / (1 + np.exp(-x))\n        result = f_x * (1 - f_x)\n    elif order == 2:\n        f_x = 1 / (1 + np.exp(-x))\n        result = f_x * (1 - f_x) * (1 - 2 * f_x)\n    else:\n        return -1\n    result = np.round(result, 4)\n    return result.item() if is_scalar else result.tolist()"}
{"task_id": 437, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    x = np.array([x]) if not isinstance(x, (list, np.ndarray)) else np.array(x)\n\n    def compute(order, sigma):\n        if order == 0:\n            return sigma\n        elif order == 1:\n            return sigma * (1 - sigma)\n        elif order == 2:\n            return sigma * (1 - sigma) * (1 - 2 * sigma)\n    sigma = 1 / (1 + np.exp(-x))\n    result = compute(order, sigma).round(4)\n    return result.item() if isinstance(x, np.ndarray) and x.size == 1 else result.tolist()"}
{"task_id": 437, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    scalar_input = False\n    if isinstance(x, (int, float)):\n        x = np.array([x])\n        scalar_input = True\n    elif isinstance(x, list):\n        x = np.array(x)\n    sig = 1 / (1 + np.exp(-x))\n    if order == 0:\n        result = sig\n    elif order == 1:\n        result = sig * (1 - sig)\n    elif order == 2:\n        result = sig * (1 - sig) * (1 - 2 * sig)\n    rounded_result = np.round(result, decimals=4)\n    if scalar_input:\n        return float(rounded_result.item())\n    else:\n        return rounded_result.tolist()"}
{"task_id": 437, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative, 2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n\n    def _sigmoid(xx):\n        \"\"\"Helper function to compute the logistic sigmoid.\"\"\"\n        return 1.0 / (1 + np.exp(-xx))\n    x = np.array([x]) if isinstance(x, (int, float)) else np.array(x)\n    if order == 0:\n        result = _sigmoid(x)\n    elif order == 1:\n        s = _sigmoid(x)\n        result = s * (1 - s)\n    elif order == 2:\n        s = _sigmoid(x)\n        result = s * (1 - s) * (1 - 2 * s)\n    result = np.round(result, 4)\n    return float(result) if result.size == 1 else result.tolist()"}
{"task_id": 437, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    result = -1\n    if not isinstance(x, (int, float)):\n        x = np.array(x)\n    if order == 0:\n        result = 1.0 / (1.0 + np.exp(-x))\n    elif order == 1:\n        sig = 1.0 / (1.0 + np.exp(-x))\n        result = sig * (1 - sig)\n    elif order == 2:\n        sig = 1.0 / (1.0 + np.exp(-x))\n        result = sig * (1 - sig) * (1 - 2 * sig)\n    if isinstance(result, np.ndarray):\n        result = np.round(result, decimals=4)\n    if isinstance(x, (int, float)):\n        return float(result)\n    return result.tolist()"}
{"task_id": 437, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in (0, 1, 2):\n        return -1\n    scalar_input = isinstance(x, (float, int))\n    if scalar_input:\n        x = np.array([x])\n    elif isinstance(x, list):\n        x = np.array(x)\n    elif not isinstance(x, np.ndarray):\n        raise TypeError('x must be a scalar, Python list, or NumPy array.')\n    sig_x = 1 / (1 + np.exp(-x))\n    if order == 0:\n        result = sig_x\n    elif order == 1:\n        result = sig_x * (1 - sig_x)\n    elif order == 2:\n        result = sig_x * (1 - sig_x) * (1 - 2 * sig_x)\n    result = np.round(result, 4)\n    if scalar_input:\n        return result.item()\n    else:\n        return result.tolist()"}
{"task_id": 437, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n\n    def compute_sigmoid(data, order):\n        sig = 1 / (1 + np.exp(-data))\n        if order == 0:\n            return sig\n        elif order == 1:\n            return sig * (1 - sig)\n        elif order == 2:\n            first_derivative = compute_sigmoid(data, 1)\n            return first_derivative * (1 - 2 * sig)\n        else:\n            return np.full_like(data, -1, dtype=float)\n    is_scalar = False\n    if isinstance(x, (float, int)):\n        x = np.array([x])\n        is_scalar = True\n    elif isinstance(x, list):\n        x = np.array(x)\n    result = compute_sigmoid(x, order)\n    result = np.round(result, 4)\n    if is_scalar:\n        result = float(result[0])\n    else:\n        result = result.tolist()\n    return result"}
{"task_id": 437, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    x_is_scalar = True if isinstance(x, (float, int)) else False\n    x = np.array([x]) if x_is_scalar else np.array(x)\n    sig_x = 1 / (1 + np.exp(-x))\n    if order == 0:\n        result = sig_x\n    elif order == 1:\n        result = sig_x * (1 - sig_x)\n    elif order == 2:\n        result = sig_x * (1 - sig_x) * (1 - 2 * sig_x)\n    else:\n        return -1\n    result = np.round(result, decimals=4)\n    if x_is_scalar:\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    max_y = np.max(y) + 1\n    if num_classes is None:\n        num_classes = max_y\n    elif num_classes < max_y:\n        return -1\n    one_hot = np.eye(num_classes)[y]\n    return one_hot.tolist()"}
{"task_id": 438, "completion_id": 1, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.max(y) >= num_classes:\n        return -1\n    one_hot = np.eye(num_classes)[y]\n    return one_hot.tolist()"}
{"task_id": 438, "completion_id": 2, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if num_classes < np.max(y) + 1:\n        return -1\n    result = np.zeros((y.size, num_classes))\n    result[np.arange(y.size), y] = 1\n    return result.tolist()"}
{"task_id": 438, "completion_id": 3, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y, dtype=int)\n    if num_classes is None:\n        num_classes = max(y) + 1\n    elif max(y) >= num_classes:\n        return -1\n    one_hot = np.zeros((y.size, num_classes), dtype=int)\n    one_hot[np.arange(y.size), y] = 1\n    return one_hot.tolist()\ny = [0, 2, 4]"}
{"task_id": 438, "completion_id": 4, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]] | int:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if not isinstance(y, np.ndarray):\n        y = np.array(y)\n    max_label = np.max(y)\n    if num_classes is None:\n        num_classes = max_label + 1\n    elif num_classes < max_label + 1:\n        return -1\n    categorical = np.eye(num_classes)[y]\n    return categorical.tolist()"}
{"task_id": 438, "completion_id": 5, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if not y:\n        return []\n    if isinstance(y, list):\n        y = np.array(y)\n    if num_classes is None:\n        num_classes = max(y) + 1\n    if max(y) + 1 > num_classes:\n        return -1\n    encoded = np.eye(num_classes)[y]\n    return encoded.tolist()"}
{"task_id": 438, "completion_id": 6, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, np.ndarray):\n        y = y.tolist()\n    if num_classes is None:\n        num_classes = max(y) + 1\n    if num_classes < max(y) + 1:\n        return -1\n    one_hot = np.zeros((len(y), num_classes), dtype=int)\n    one_hot[np.arange(len(y)), y] = 1\n    return one_hot.tolist()"}
{"task_id": 438, "completion_id": 7, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif num_classes < np.max(y) + 1:\n        return -1\n    one_hot = np.zeros((y.size, num_classes))\n    one_hot[np.arange(y.size), y] = 1\n    return one_hot.tolist()"}
{"task_id": 438, "completion_id": 8, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    if num_classes is None:\n        num_classes = max(y) + 1\n    elif num_classes < max(y) + 1:\n        return -1\n    one_hot = np.zeros((len(y), num_classes))\n    one_hot[np.arange(len(y)), y] = 1\n    return one_hot.tolist()"}
{"task_id": 438, "completion_id": 9, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    max_class = np.max(y) + 1\n    if num_classes is None:\n        num_classes = max_class\n    elif num_classes < max_class:\n        return -1\n    one_hot = np.zeros((len(y), num_classes), dtype=int)\n    one_hot[np.arange(len(y)), y] = 1\n    return one_hot.tolist()"}
{"task_id": 439, "completion_id": 0, "solution": "from collections import defaultdict\nimport itertools\ndef apriori_frequent_itemsets(transactions: list[list], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    num_trans = len(transactions)\n    min_sup_count = num_trans * min_sup\n    C1 = defaultdict(int)\n    for transaction in transactions:\n        for item in transaction:\n            C1[item] += 1\n    L1 = {item for (item, count) in C1.items() if count >= min_sup_count}\n    Lk = [frozenset([item]) for item in L1]\n    frequent_itemsets = [tuple(sorted([item])) for item in L1]\n    k = 1\n    while Lk:\n        Ck = join(Lk, k + 1)\n        if not Ck:\n            break\n        Ck_count = defaultdict(int)\n        for transaction in transactions:\n            for candidate in Ck:\n                if candidate.issubset(transaction):\n                    Ck_count[candidate] += 1\n        Lk = [itemset for (itemset, count) in Ck_count.items() if count >= min_sup_count]\n        frequent_itemsets.extend([tuple(sorted(itemset)) for itemset in Lk])\n        k += 1\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\ndef join(Lk, k):\n    \"\"\"Construct the join of itemsets of size k to get candidates of size k+1.\"\"\"\n    Ck = set()\n    for i in range(len(Lk)):\n        for j in range(i + 1, len(Lk)):\n            itemset1 = list(Lk[i])\n            itemset2 = list(Lk[j])\n            if k == 1 or (k > 1 and tuple(itemset1[:k - 1]) == tuple(itemset2[:k - 1])):\n                Cij = Lk[i].union(Lk[j])\n                if is_candidate(Cij, Lk, k):\n                    Ck.add(Cij)\n    return Ck\ndef is_candidate(itemset, Lk, k):\n    \"\"\"Check if itemset is a candidate by verifying its subsets are frequent.\"\"\"\n    for subset in itertools.combinations(itemset, k):\n        if frozenset(subset) not in Lk:\n            return False\n    return True\ntransactions = [['apple', 'banana', 'cherry'], ['apple', 'cherry'], ['apple', 'banana', 'date'], ['banana', 'cherry'], ['banana', 'date', 'cherry']]\nmin_sup = 0.4"}
{"task_id": 439, "completion_id": 1, "solution": "import itertools\ndef support(itemset, transactions):\n    \"\"\"Calculate the support of an itemset within the given transactions.\"\"\"\n    return sum((1 for transaction in transactions if set(itemset).issubset(transaction))) / len(transactions)\ndef self_join(frequent_itemsets):\n    \"\"\"Generate candidates by self-joining the same set of frequent itemsets.\"\"\"\n    candidates = set()\n    k = len(list(frequent_itemsets)[0]) + 1\n    for (itemset1, itemset2) in itertools.combinations(frequent_itemsets, 2):\n        candidate = tuple(sorted(set(itemset1) | set(itemset2)))\n        if len(candidate) == k:\n            candidates.add(candidate)\n    return candidates\ndef prune_candidates(candidates, frequent_itemsets):\n    \"\"\"Prune candidates that have any subset not present in the given frequent_itemsets.\"\"\"\n    pruned = []\n    for candidate in candidates:\n        if all((set(subset).issubset(frequent_itemsets) for subset in itertools.combinations(candidate, len(candidate) - 1))):\n            pruned.append(candidate)\n    return set(pruned)\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    candidates = set(itertools.chain.from_iterable(transactions))\n    candidates = set(((item,) for item in candidates))\n    frequent_itemsets = []\n    while candidates:\n        next_frequent_itemsets = set()\n        for candidate in candidates:\n            if support(candidate, transactions) >= min_sup:\n                next_frequent_itemsets.add(candidate)\n        if not next_frequent_itemsets:\n            break\n        frequent_itemsets.extend(next_frequent_itemsets)\n        candidates = prune_candidates(self_join(next_frequent_itemsets), next_frequent_itemsets)\n    return sorted(frequent_itemsets, key=lambda x: (len(x), x))"}
{"task_id": 439, "completion_id": 2, "solution": "import itertools\nfrom collections import defaultdict\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n\n    def generate_candidates(prev_frequent: set, k: int) -> set:\n        candidates = set()\n        for itemset1 in prev_frequent:\n            for itemset2 in prev_frequent:\n                union_set = itemset1.union(itemset2)\n                if len(union_set) == k and union_set not in candidates:\n                    candidates.add(union_set)\n        return candidates\n\n    def prune_candidates(candidates: set, prev_frequent: set) -> set:\n        pruned = set()\n        for c in candidates:\n            subsets = list(itertools.combinations(c, len(c) - 1))\n            if all((set(subset) in prev_frequent for subset in subsets)):\n                pruned.add(c)\n        return pruned\n    total_transactions = len(transactions)\n    min_sup_count = total_transactions * min_sup\n    items = set((item for transaction in transactions for item in transaction))\n    sorted_items = sorted(items)\n    frequent_itemsets = []\n    curr_frequent = {frozenset((i,)): 0 for i in sorted_items}\n    for transaction in transactions:\n        for item in sorted_items:\n            if item in transaction:\n                curr_frequent[frozenset((item,))] += 1\n    while curr_frequent:\n        frequent_of_current_length = {itemset for (itemset, count) in curr_frequent.items() if count >= min_sup_count}\n        frequent_itemsets.extend(frequent_of_current_length)\n        if not frequent_of_current_length:\n            break\n        k = len(list(frequent_of_current_length)[0]) + 1\n        candidates = generate_candidates(frequent_of_current_length, k)\n        pruned_candidates = prune_candidates(candidates, frequent_of_current_length)\n        curr_frequent = {c: 0 for c in pruned_candidates}\n        for transaction in transactions:\n            for c in pruned_candidates:\n                if c.issubset(transaction):\n                    curr_frequent[c] += 1\n    frequent_itemsets = sorted([tuple(itemset) for itemset in frequent_itemsets], key=lambda x: (len(x), x))\n    return frequent_itemsets\ntransactions = [[1, 2, 3, 4], [1, 3], [2, 3, 4], [2, 3], [1, 4], [3], [1, 2, 3], [2, 3], [3, 4], [1, 3]]\nmin_sup = 0.3"}
{"task_id": 439, "completion_id": 3, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    min_sup_count = len(transactions) * min_sup\n    item_counts = {}\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] = item_counts.get(item, 0) + 1\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_sup_count}\n    frequent_itemsets = [tuple([item]) for item in frequent_items.keys()]\n    all_frequent_itemsets = frequent_itemsets.copy()\n    k = 2\n    while frequent_itemsets:\n        candidates = set()\n        for itemset1 in frequent_itemsets:\n            for itemset2 in frequent_itemsets:\n                new_candidate = tuple(sorted(set(itemset1).union(set(itemset2))))\n                if len(new_candidate) == k and new_candidate not in candidates:\n                    candidates.add(new_candidate)\n        candidates_to_count = {}\n        for candidate in candidates:\n            if all((set(subset) <= set(item_counts.keys()) for subset in itertools.combinations(candidate, k - 1))):\n                candidates_to_count[candidate] = 0\n        for transaction in transactions:\n            for candidate in candidates_to_count:\n                if set(candidate).issubset(set(transaction)):\n                    candidates_to_count[candidate] += 1\n        frequent_itemsets = [candidate for (candidate, count) in candidates_to_count.items() if count >= min_sup_count]\n        all_frequent_itemsets.extend(frequent_itemsets)\n        k += 1\n    return sorted(all_frequent_itemsets, key=lambda x: (len(x), x))"}
{"task_id": 439, "completion_id": 4, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n\n    def is_frequent(itemset, transactions, min_support):\n        return sum((1 for transaction in transactions if set(itemset).issubset(transaction))) / len(transactions) >= min_support\n\n    def self_join(frequent_itemsets):\n        return (i.union(j) for (i, j) in itertools.combinations(frequent_itemsets, 2) if len(i) == len(j) and len(i) + 1 == len(i.union(j)))\n\n    def prune(itemset, k_minus1_frequent):\n        subsets = itertools.combinations(itemset, len(itemset) - 1)\n        return all((subset in k_minus1_frequent for subset in subsets))\n    all_items = set((item for transaction in transactions for item in transaction))\n    frequent_itemsets = []\n    candidates = [(item,) for item in all_items]\n    k = 1\n    while candidates:\n        frequent = [itemset for itemset in candidates if is_frequent(itemset, transactions, min_sup)]\n        frequent_itemsets.extend(((tuple(sorted(itemset)),) for itemset in frequent))\n        frequent_itemsets.sort(key=lambda x: (len(x[0]), x))\n        candidates = list(self_join(frequent))\n        candidates = [itemset for itemset in candidates if prune(itemset, frequent)]\n        k += 1\n    return [item[0] for item in frequent_itemsets]"}
{"task_id": 439, "completion_id": 5, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n\n    def support(itemset):\n        count = sum((1 for transaction in transactions if set(itemset).issubset(set(transaction))))\n        return count / len(transactions)\n\n    def self_join(itemsets, k):\n        return set([tuple(sorted((i,) + j)) for i in itemsets for j in itemsets if i < j])\n\n    def prune(candidates, prev_frequent_itemsets):\n        return set(filter(lambda candidate: all((frozenset(subset) in prev_frequent_itemsets for subset in itertools.combinations(candidate, len(candidate) - 1))), candidates))\n    all_items = set((item for transaction in transactions for item in transaction))\n    frequent_itemsets = []\n    candidates = {item for item in all_items}\n    total_transactions = len(transactions)\n    while True:\n        frequent_items = {item for item in candidates if support(item) >= min_sup}\n        frequent_itemsets.extend(frequent_items)\n        if not frequent_items:\n            break\n        candidates = prune(self_join(frequent_items, len(frequent_items) + 1), frequent_items)\n        candidates = set((tuple(sorted(item)) for item in candidates))\n    return sorted(frequent_itemsets, key=lambda x: (len(x), x))\ntransactions = [['beer', 'nuts'], ['beer', 'cheese'], ['beer', 'cheese', 'nuts'], ['potato chips', 'cheese'], ['beer', 'potato chips', 'cheese'], ['beer', 'nuts'], ['cheese', 'nuts'], ['beer', 'cheese', 'potato chips'], ['beer', 'cheese', 'nuts'], ['potato chips', 'cheese']]\nmin_sup = 0.4"}
{"task_id": 439, "completion_id": 6, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n\n    def is_frequent(c, trans, min_sup):\n        return sum((1 for t in trans if c.issubset(t))) / len(trans) >= min_sup\n\n    def self_join(prev_frequent):\n        candidates = []\n        for i in range(len(prev_frequent)):\n            for j in range(i + 1, len(prev_frequent)):\n                union_set = prev_frequent[i].union(prev_frequent[j])\n                if len(union_set) == len(prev_frequent[i]) + 1:\n                    candidates.append(union_set)\n        return candidates\n    items = set(itertools.chain.from_iterable(transactions))\n    transactions = [set(t) for t in transactions]\n    candidates = [{item} for item in items]\n    frequent_itemsets = []\n    k = 1\n    while candidates:\n        frequent = set()\n        for candidate in candidates:\n            if is_frequent(candidate, transactions, min_sup):\n                frequent.add(candidate)\n        if not frequent:\n            break\n        frequent_itemsets.extend(sorted((tuple(sorted(item)) for item in frequent)))\n        candidates = self_join(frequent)\n        k += 1\n    return sorted(frequent_itemsets, key=len)\ntransactions = [[1, 2, 3], [1, 2, 4], [1, 2], [1, 3], [2, 3], [2, 4]]\nmin_sup = 0.5"}
{"task_id": 439, "completion_id": 7, "solution": "import itertools\nfrom typing import Any, List, Tuple\ndef apriori_frequent_itemsets(transactions: List[List[Any]], min_sup: float) -> List[Tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\"\"\"\n    num_transactions = len(transactions)\n    min_threshold = min_sup * num_transactions\n\n    def count_itemsets(candidate_itemsets):\n        count = {}\n        for itemset in candidate_itemsets:\n            for transaction in transactions:\n                if set(itemset).issubset(set(transaction)):\n                    t_itemset = tuple(sorted(itemset))\n                    count[t_itemset] = count.get(t_itemset, 0) + 1\n        return count\n    itemset_size = 1\n    items = set()\n    for transaction in transactions:\n        items = items.union(set(transaction))\n    candidates = list(itertools.combinations(sorted(list(items)), itemset_size))\n    frequent_itemsets = []\n    while candidates:\n        counts = count_itemsets(candidates)\n        candidates = [itemset for (itemset, count) in counts.items() if count >= min_threshold]\n        frequent_itemsets.extend(candidates)\n        itemset_size += 1\n        candidates = []\n        for i in range(len(frequent_itemsets)):\n            for j in range(i + 1, len(frequent_itemsets)):\n                candidate = tuple(sorted(set(frequent_itemsets[i]) | set(frequent_itemsets[j])))\n                if len(candidate) == itemset_size:\n                    candidates.append(candidate)\n        candidates = [c for c in candidates if all((frozenset(subset).issubset(frozenset(c)) for subset in itertools.combinations(c, itemset_size - 1) if subset in frequent_itemsets))]\n        candidates = list(set(candidates))\n    return frequent_itemsets"}
{"task_id": 439, "completion_id": 8, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n\n    def calculate_support(itemsets):\n        total = len(transactions)\n        return {itemset: sum((all((item in t for item in itemset)) for t in transactions)) / total for itemset in itemsets}\n\n    def join_step(itemsets, k):\n        joins = set()\n        for itemset1 in itemsets:\n            for itemset2 in itemsets:\n                joint_set = tuple(sorted(set(itemset1).union(set(itemset2))))\n                if len(joint_set) == k:\n                    joins.add(joint_set)\n        return joins\n    transactions = [set(t) for t in transactions]\n    items = set((item for transaction in transactions for item in transaction))\n    current_itemsets = [[item] for item in items]\n    current_itemsets.sort()\n    total_transactions = len(transactions)\n    min_support_count = total_transactions * min_sup\n    frequent_itemsets = []\n    while current_itemsets:\n        current_itemsets = [tuple(itemset) for itemset in current_itemsets]\n        current_itemsets_with_support = calculate_support(current_itemsets)\n        new_frequent_itemsets = {itemset for (itemset, support) in current_itemsets_with_support.items() if support >= min_sup}\n        frequent_itemsets.extend(new_frequent_itemsets)\n        k = len(current_itemsets[0]) + 1\n        candidates = join_step(new_frequent_itemsets, k)\n        current_itemsets = [list(candidate) for candidate in candidates]\n        current_itemsets.sort()\n    frequent_itemsets = sorted(frequent_itemsets, key=lambda x: (len(x), x))\n    return frequent_itemsets\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'cola'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'cola']]\nmin_sup = 0.4"}
{"task_id": 439, "completion_id": 9, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n\n    def get_candidates(itemsets, k):\n        \"\"\"Generate candidates of size k from the given itemsets.\"\"\"\n        return set([tuple(sorted(cand)) for cand in itertools.combinations(set((item for itemset in itemsets for item in itemset)), k)])\n\n    def prune_candidates(candidates, itemsets):\n        \"\"\"Prune candidates that have infrequent subsets.\"\"\"\n        return set([cand for cand in candidates if all(itertools.combinations(cand, len(cand) - 1))])\n\n    def count_support(candidates, transactions):\n        \"\"\"Count the support of each candidate itemset.\"\"\"\n        return {cand: sum((all((item in trans for item in cand)) for trans in transactions)) / len(transactions) for cand in candidates}\n    single_items = set((item for trans in transactions for item in trans))\n    support_counts = count_support(single_items, transactions)\n    frequent_itemsets = {item for item in single_items if support_counts[item] >= min_sup}\n    length = 1\n    results = []\n    while frequent_itemsets:\n        length += 1\n        candidates = get_candidates(frequent_itemsets, length)\n        candidates = prune_candidates(candidates, frequent_itemsets)\n        support_counts = count_support(candidates, transactions)\n        frequent_itemsets = {cand for cand in candidates if support_counts[cand] >= min_sup}\n        results.extend(sorted(list(frequent_itemsets)))\n    return sorted(results, key=lambda x: (len(x), x))"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    prediction_array = np.array(predictions)\n    avg_probabilities = np.mean(prediction_array, axis=0)\n    avg_probabilities_rounded = np.round(avg_probabilities, 4)\n    class_predictions = np.argmax(avg_probabilities_rounded, axis=1)\n    avg_probs_list = avg_probabilities_rounded.tolist()\n    class_predictions_list = class_predictions.tolist()\n    return (avg_probs_list, class_predictions_list)"}
{"task_id": 440, "completion_id": 1, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_np = np.array(predictions)\n    avg_probs_np = np.mean(predictions_np, axis=0)\n    avg_probs_rounded_np = np.round(avg_probs_np, 4)\n    preds_np = np.argmax(avg_probs_rounded_np, axis=-1)\n    avg_probs_rounded_list = avg_probs_rounded_np.tolist()\n    preds_list = preds_np.tolist()\n    return (avg_probs_rounded_list, preds_list)\npredictions = [[[0.1, 0.2, 0.7], [0.3, 0.4, 0.3]], [[0.2, 0.6, 0.2], [0.4, 0.2, 0.4]], [[0.0, 0.1, 0.9], [0.5, 0.3, 0.2]]]"}
{"task_id": 440, "completion_id": 2, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n    \n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n    \n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    rounded_averages = np.round(averaged_probabilities, 4)\n    predicted_class_indices = np.argmax(rounded_averages, axis=1)\n    averaged_probabilities_list = rounded_averages.tolist()\n    predicted_class_indices_list = predicted_class_indices.tolist()\n    return (averaged_probabilities_list, predicted_class_indices_list)"}
{"task_id": 440, "completion_id": 3, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in an ensemble classifier.\n    \n    Parameters:\n    predictions: A nested list structure that holds individual class probability predictions\n        from several estimators (e.g., trees in a RandomForest).\n        \n    Returns:\n    A tuple consisting of:\n        1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n           class probabilities, rounded to 4 decimal places.\n        2. A 1-D python list of the predicted class index for each sample calculated via\n           an arg-max computation on the averaged probabilities.\n    \"\"\"\n    pred_array = np.array(predictions)\n    avg_probs = np.mean(pred_array, axis=0)\n    rounded_probs = np.round(avg_probs, 4)\n    predicted_classes = np.argmax(rounded_probs, axis=1)\n    avg_probs_list = rounded_probs.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    return (avg_probs_list, predicted_classes_list)\npredictions = [[[0.1, 0.2, 0.7], [0.05, 0.9, 0.05]], [[0.2, 0.6, 0.2], [0.1, 0.7, 0.2]], [[0.15, 0.15, 0.7], [0.2, 0.75, 0.05]]]"}
{"task_id": 440, "completion_id": 4, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    avg_probabilities = predictions_array.mean(axis=0)\n    rounded_avg_probabilities = np.round(avg_probabilities, 4)\n    avg_probabilities_list = rounded_avg_probabilities.tolist()\n    predicted_classes = np.argmax(rounded_avg_probabilities, axis=1).tolist()\n    return (avg_probabilities_list, predicted_classes)"}
{"task_id": 440, "completion_id": 5, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n    \n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to estimators (n_estimators),\n            the second to samples (n_samples) and the third to class probabilities (n_classes). Each innermost list\n            should form a valid probability distribution summing to 1.0.\n    \n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged class probabilities rounded \n               to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index for each sample obtained via\n               arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_np = np.array(predictions)\n    avg_probabilities = np.mean(predictions_np, axis=0)\n    avg_probabilities_rounded = np.round(avg_probabilities, decimals=4)\n    predicted_classes = np.argmax(avg_probabilities_rounded, axis=-1)\n    avg_probabilities_list = avg_probabilities_rounded.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    return (avg_probabilities_list, predicted_classes_list)\npredictions = [[[0.1, 0.2, 0.7], [0.7, 0.1, 0.2], [0.3, 0.4, 0.3]], [[0.2, 0.2, 0.6], [0.8, 0.1, 0.1], [0.4, 0.3, 0.3]], [[0.15, 0.25, 0.6], [0.6, 0.2, 0.2], [0.35, 0.35, 0.3]]]"}
{"task_id": 440, "completion_id": 6, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    avg_probs = np.mean(predictions_array, axis=0)\n    rounded_avg_probs = np.round(avg_probs, decimals=4)\n    predicted_classes = np.argmax(rounded_avg_probs, axis=1)\n    rounded_avg_probs_list = rounded_avg_probs.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    return (rounded_avg_probs_list, predicted_classes_list)"}
{"task_id": 440, "completion_id": 7, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_np = np.array(predictions)\n    averaged_proba = np.mean(predictions_np, axis=0)\n    rounded_proba = np.round(averaged_proba, decimals=4)\n    predicted_classes = np.argmax(rounded_proba, axis=1)\n    return (rounded_proba.tolist(), predicted_classes.tolist())\npredictions = [[[0.2, 0.5, 0.3], [0.3, 0.4, 0.3]], [[0.1, 0.6, 0.3], [0.3, 0.5, 0.2]], [[0.3, 0.4, 0.3], [0.2, 0.5, 0.3]]]"}
{"task_id": 440, "completion_id": 8, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    (n_estimators, n_samples, n_classes) = (len(predictions), len(predictions[0]), len(predictions[0][0]))\n    averaged_probabilities = np.zeros((n_samples, n_classes))\n    for estimator_probabilities in predictions:\n        averaged_probabilities += np.array(estimator_probabilities) / n_estimators\n    averaged_probabilities_rounded = np.around(averaged_probabilities, decimals=4).tolist()\n    predicted_classes = np.argmax(averaged_probabilities, axis=1).tolist()\n    return (averaged_probabilities_rounded, predicted_classes)\npredictions = [[[0.2, 0.5, 0.3], [0.1, 0.8, 0.1]], [[0.3, 0.4, 0.3], [0.2, 0.7, 0.1]], [[0.1, 0.6, 0.3], [0.3, 0.6, 0.1]]]"}
{"task_id": 440, "completion_id": 9, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_np = np.array(predictions)\n    avg_probs = np.mean(predictions_np, axis=0)\n    avg_probs_rounded = [list(map(lambda x: round(x, 4), sample_probs)) for sample_probs in avg_probs]\n    predicted_classes = [np.argmax(sample_probs) for sample_probs in avg_probs]\n    return (avg_probs_rounded, predicted_classes)\npredictions = [[[0.1, 0.2, 0.7], [0.4, 0.4, 0.2]], [[0.2, 0.3, 0.5], [0.5, 0.3, 0.2]]]"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    if Y is None:\n        Y = X\n    X = np.array(X)\n    Y = np.array(Y)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    n_features = X.shape[1]\n    if sigma is None:\n        sigma = np.sqrt(n_features / 2)\n    if isinstance(sigma, list):\n        if len(sigma) != n_features:\n            return -1\n        if not all((s > 0 for s in sigma)):\n            return -1\n    elif not (isinstance(sigma, float) or isinstance(sigma, int)) or sigma <= 0:\n        return -1\n    if isinstance(sigma, list):\n        sigma = np.array(sigma)\n    else:\n        sigma = np.array([sigma] * n_features)\n    kernel_matrix = np.zeros((X.shape[0], Y.shape[0]))\n    for (i, x_i) in enumerate(X):\n        for (j, y_j) in enumerate(Y):\n            diff = (x_i - y_j) / sigma\n            kernel_matrix[i, j] = np.exp(-0.5 * np.sum(diff ** 2))\n    rounded_kernel_matrix = np.round(kernel_matrix, 4).tolist()\n    return rounded_kernel_matrix"}
{"task_id": 444, "completion_id": 1, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    (N, C) = X.shape\n    (M, _) = Y.shape\n    if C != Y.shape[1]:\n        return -1\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, (int, float)):\n        sigma = np.array([sigma for _ in range(C)])\n    elif len(sigma) != C:\n        return -1\n    if np.any(sigma <= 0):\n        return -1\n    X = X / sigma\n    Y = Y / sigma\n    diff = X[:, np.newaxis, :] - Y[np.newaxis, :, :]\n    diff_sq = diff ** 2\n    kernel_matrix = np.exp(-0.5 * np.sum(diff_sq, axis=2))\n    kernel_matrix = np.round(kernel_matrix, 4).tolist()\n    return kernel_matrix\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 444, "completion_id": 2, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X_np = np.array(X)\n    (N, C) = X_np.shape\n    if Y is None:\n        Y_np = X_np\n    else:\n        Y_np = np.array(Y)\n        if C != Y_np.shape[1]:\n            return -1\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, (int, float)):\n        sigma = np.array([sigma] * C)\n    elif isinstance(sigma, (list, np.ndarray)):\n        if len(sigma) != C:\n            return -1\n        sigma = np.array(sigma)\n    else:\n        return -1\n    if np.any(sigma <= 0):\n        return -1\n    kernel_matrix = np.zeros((N, Y_np.shape[0]))\n    X_norm = (X_np ** 2).sum(axis=1).reshape(-1, 1)\n    y_norm = (Y_np ** 2).sum(axis=1)\n    dist = X_norm + y_norm - 2 * np.dot(X_np, Y_np.T)\n    dist = dist / (sigma ** 2).sum()\n    kernel_matrix = np.exp(-0.5 * dist)\n    rounded_matrix = np.round(kernel_matrix, 4)\n    return rounded_matrix.tolist()\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 444, "completion_id": 3, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    (N, C) = (len(X), len(X[0]))\n    if Y is None:\n        Y = X\n    M = len(Y)\n    if C != len(Y[0]):\n        return -1\n    if isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma = [sigma] * C\n    if isinstance(sigma, (list, np.ndarray)):\n        if len(sigma) != C or any((s <= 0 for s in sigma)):\n            return -1\n        sigma = np.array(sigma)\n    if sigma is None:\n        sigma = np.sqrt(C / 2) * np.ones(C)\n    X = np.array(X)\n    Y = np.array(Y)\n    X_scaled = X / sigma\n    Y_scaled = Y / sigma\n    X_norm2 = np.sum(X_scaled ** 2, axis=1, keepdims=True)\n    Y_norm2 = np.sum(Y_scaled ** 2, axis=1, keepdims=True)\n    K = np.exp(-0.5 * (X_norm2 - 2 * np.dot(X_scaled, Y_scaled.T) + Y_norm2.T))\n    return np.round(K, 4).tolist()\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 444, "completion_id": 4, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X_np = np.array(X)\n    (N, C) = X_np.shape\n    if Y is None:\n        Y = X\n        M = N\n    else:\n        Y_np = np.array(Y)\n        M = Y_np.shape[0]\n        if Y_np.shape[1] != C:\n            return -1\n    if isinstance(sigma, list):\n        if len(sigma) != C:\n            return -1\n        sigma = np.array(sigma)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma = np.full(C, sigma)\n    elif sigma is None:\n        sigma = np.full(C, np.sqrt(C / 2))\n    else:\n        return -1\n    kernel_matrix = np.zeros((N, M))\n    for i in range(N):\n        for j in range(M):\n            diff = (X_np[i, :] - Y_np[j, :]) / sigma\n            kernel_matrix[i, j] = np.exp(-0.5 * np.sum(diff ** 2))\n    kernel_matrix = np.round(kernel_matrix, 4)\n    return kernel_matrix.tolist()\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 444, "completion_id": 5, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X_np = np.array(X)\n    (N, C) = X_np.shape\n    if Y is None:\n        Y_np = X_np\n        M = N\n    else:\n        Y_np = np.array(Y)\n        (M, C_Y) = Y_np.shape\n        if C != C_Y:\n            return -1\n    if isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma_np = np.full(C, sigma)\n    elif isinstance(sigma, list):\n        sigma_np = np.array(sigma)\n        if len(sigma) != C:\n            return -1\n        if (sigma_np <= 0).any():\n            return -1\n    elif sigma is None:\n        sigma_np = np.full(C, np.sqrt(C / 2))\n    else:\n        return -1\n    K = np.zeros((N, M))\n    for i in range(N):\n        for j in range(M):\n            diff = (X_np[i] - Y_np[j]) / sigma_np\n            K[i, j] = np.exp(-0.5 * np.sum(diff ** 2))\n    K_rounded = np.round(K, decimals=4).tolist()\n    return K_rounded\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 444, "completion_id": 6, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n\n    def round_matrix(matrix):\n        return [[round(num, 4) for num in row] for row in matrix]\n    if Y is None:\n        Y = X\n    num_features = len(X[0])\n    if any((len(row) != num_features for row in X)) or any((len(row) != num_features for row in Y)):\n        return -1\n    if sigma is None:\n        sigma = np.sqrt(num_features / 2)\n    elif isinstance(sigma, (int, float)):\n        sigma = float(sigma)\n    elif len(sigma) != num_features:\n        return -1\n    if isinstance(sigma, (int, float)) and sigma <= 0:\n        return -1\n    elif isinstance(sigma, list) and any((s <= 0 for s in sigma)):\n        return -1\n    if isinstance(sigma, (int, float)):\n        sigma = [sigma] * num_features\n    (N, M) = (len(X), len(Y))\n    kernel_matrix = np.zeros((N, M))\n    for i in range(N):\n        for j in range(M):\n            diff = [(X[i][k] - Y[j][k]) / sigma[k] for k in range(num_features)]\n            kernel_matrix[i, j] = np.exp(-0.5 * np.sum(np.square(diff)))\n    kernel_matrix_rounded = round_matrix(kernel_matrix.tolist())\n    return kernel_matrix_rounded"}
{"task_id": 444, "completion_id": 7, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X_np = np.array(X)\n    Y_np = np.array(X if Y is None else Y)\n    (N, C) = X_np.shape\n    M = Y_np.shape[0]\n    if Y_np.shape[1] != C:\n        return -1\n    if isinstance(sigma, float):\n        if sigma <= 0:\n            return -1\n        sigma_vec = np.full(C, sigma)\n    elif isinstance(sigma, (list, np.ndarray)):\n        if len(sigma) != C or any((s <= 0 for s in sigma)):\n            return -1\n        sigma_vec = np.array(sigma)\n    elif sigma is None:\n        sigma_vec = np.sqrt(C / 2)\n    else:\n        return -1\n    kernel_matrix = np.zeros((N, M))\n    for i in range(N):\n        for j in range(M):\n            diff = (X_np[i] - Y_np[j]) / sigma_vec\n            kernel_matrix[i, j] = np.exp(-0.5 * np.sum(diff ** 2))\n    return [[round(val, 4) for val in row] for row in kernel_matrix.tolist()]\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 444, "completion_id": 8, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    (dx, cx) = X.shape\n    (dy, cy) = Y.shape\n    if cx != cy:\n        return -1\n    if isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma = np.repeat(sigma, cx)\n    elif sigma is None:\n        sigma = np.sqrt(cx / 2) * np.ones(cx)\n    elif isinstance(sigma, (list, np.ndarray)):\n        if len(sigma) != cx or any((s <= 0 for s in sigma)):\n            return -1\n        sigma = np.array(sigma)\n    else:\n        return -1\n    kernel_matrix = np.exp(-0.5 * np.sum(((X[:, np.newaxis] - Y) / sigma) ** 2, axis=2))\n    kernel_list = kernel_matrix.round(4).tolist()\n    return kernel_list\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 444, "completion_id": 9, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is not None:\n        Y = np.array(Y)\n    else:\n        Y = X\n    n_features = X.shape[1]\n    if sigma is None:\n        sigma = np.sqrt(n_features / 2)\n    elif isinstance(sigma, list) or isinstance(sigma, np.ndarray):\n        if len(sigma) != n_features:\n            return -1\n    elif sigma <= 0:\n        return -1\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    expanded_X = np.expand_dims(X, 1)\n    expanded_Y = np.expand_dims(Y, 0)\n    if not isinstance(sigma, (list, np.ndarray)):\n        sigma = sigma * np.ones(n_features)\n    scaled_diff = (expanded_X - expanded_Y) / sigma\n    kernel_matrix = np.exp(-0.5 * np.sum(scaled_diff ** 2, axis=2)).round(4)\n    return kernel_matrix.tolist()"}
{"task_id": 446, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.stats import entropy\nfrom collections import Counter\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    parent_entropy = entropy(np.unique(y, return_counts=True)[1], base=2)\n    (n_samples, n_features) = X.shape\n    best_feature_index = -1\n    best_threshold = None\n    best_info_gain = 0.0\n    majority_class = Counter(y).most_common(1)[0][0]\n    left_majority_label = majority_class\n    right_majority_label = majority_class\n    for j in range(n_features):\n        feature_values = sorted(set(X[:, j]))\n        thresholds = (np.array(feature_values[:-1]) + np.array(feature_values[1:])) / 2\n        for t in thresholds:\n            y_left = y[X[:, j] <= t]\n            y_right = y[X[:, j] > t]\n            p_left = len(y_left) / n_samples\n            p_right = len(y_right) / n_samples\n            left_entropy = entropy(np.unique(y_left, return_counts=True)[1], base=2)\n            right_entropy = entropy(np.unique(y_right, return_counts=True)[1], base=2)\n            info_gain = parent_entropy - p_left * left_entropy - p_right * right_entropy\n            if info_gain > best_info_gain:\n                best_feature_index = j\n                best_threshold = round(t, 4)\n                best_info_gain = info_gain\n                left_majority_label = Counter(y_left).most_common(1)[0][0]\n                right_majority_label = Counter(y_right).most_common(1)[0][0]\n            elif info_gain == best_info_gain:\n                if j < best_feature_index:\n                    best_feature_index = j\n                    best_threshold = round(t, 4)\n                    left_majority_label = Counter(y_left).most_common(1)[0][0]\n                    right_majority_label = Counter(y_right).most_common(1)[0][0]\n                elif j == best_feature_index and t < best_threshold:\n                    best_threshold = round(t, 4)\n                    left_majority_label = Counter(y_left).most_common(1)[0][0]\n                    right_majority_label = Counter(y_right).most_common(1)[0][0]\n    if best_feature_index == -1:\n        return (-1, None, majority_class, majority_class)\n    else:\n        return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\nX = [[2.5, 3.5], [2.7, 3.3], [2.3, 3.6], [6.5, 7.3], [6.8, 7.1], [6.4, 7.5]]\ny = [0, 0, 0, 1, 1, 1]"}
{"task_id": 446, "completion_id": 1, "solution": "import numpy as np\nfrom collections import Counter\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    counts = Counter(labels).values()\n    probabilities = np.array(list(counts)) / len(labels)\n    return -np.sum([p * np.log2(p) for p in probabilities if p > 0])\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    best_gain = -1\n    best_feature_index = -1\n    best_threshold = None\n    best_left_majority_label = None\n    best_right_majority_label = None\n    parent_entropy = entropy(y)\n    majority_labels = [Counter(y).most_common(1)[0][0]]\n    for feature in range(n_features):\n        labels = y[np.argsort(X[:, feature])]\n        majority_labels.append(Counter(labels).most_common(1)[0][0])\n    for feature in range(n_features):\n        sorted_indices = np.argsort(X[:, feature])\n        sorted_labels = y[sorted_indices]\n        possible_thresholds = []\n        for i in range(1, n_samples):\n            if X[sorted_indices[i], feature] != X[sorted_indices[i - 1], feature]:\n                possible_thresholds.append((X[sorted_indices[i], feature] + X[sorted_indices[i - 1], feature]) / 2.0)\n        for threshold in possible_thresholds:\n            left_child = sorted_labels[X[sorted_indices, feature] <= threshold]\n            right_child = sorted_labels[X[sorted_indices, feature] > threshold]\n            p_left = len(left_child) / n_samples\n            p_right = len(right_child) / n_samples\n            left_gain = p_left * entropy(left_child)\n            right_gain = p_right * entropy(right_child)\n            gain = parent_entropy - (left_gain + right_gain)\n            if gain > best_gain or (gain == best_gain and feature < best_feature_index):\n                best_gain = gain\n                best_feature_index = feature\n                best_threshold = round(threshold, 4)\n                best_left_majority_label = Counter(left_child).most_common(1)[0][0]\n                best_right_majority_label = Counter(right_child).most_common(1)[0][0]\n    if best_feature_index == -1:\n        majority_label = majority_labels[0]\n        return (-1, None, majority_label, majority_label)\n    return (best_feature_index, best_threshold, best_left_majority_label, best_right_majority_label)"}
{"task_id": 446, "completion_id": 2, "solution": "import numpy as np\ndef entropy(labels):\n    \"\"\"Compute the Shannon entropy of a set of class labels.\"\"\"\n    (_, counts) = np.unique(labels, return_counts=True)\n    probs = counts / len(labels)\n    return -np.sum(probs * np.log2(probs))\ndef majority_label(labels):\n    \"\"\"Return the majority label, breaking ties by selecting the smallest label.\"\"\"\n    (unique_labels, counts) = np.unique(labels, return_counts=True)\n    max_count = max(counts)\n    majority_labels = unique_labels[counts == max_count]\n    return min(majority_labels)\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    parent_entropy = entropy(y)\n    best_gain = 0\n    best_feature = -1\n    best_threshold = None\n    left_majority_label = majority_label(y)\n    right_majority_label = majority_label(y)\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        candidate_thresholds = (unique_values[:-1] + unique_values[1:]) / 2.0\n        for threshold in candidate_thresholds:\n            left_mask = X[:, feature_index] <= threshold\n            left_labels = y[left_mask]\n            right_labels = y[~left_mask]\n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n            gain = parent_entropy - p_left * entropy(left_labels) - p_right * entropy(right_labels)\n            if gain > best_gain:\n                best_feature = feature_index\n                best_threshold = round(threshold, 4)\n                best_gain = gain\n                left_majority_label = majority_label(left_labels)\n                right_majority_label = majority_label(right_labels)\n    if best_gain == 0:\n        return (-1, None, left_majority_label, left_majority_label)\n    else:\n        return (best_feature, best_threshold, left_majority_label, right_majority_label)\nX = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [4.0, 5.0]]\ny = [0, 0, 1, 1]"}
{"task_id": 446, "completion_id": 3, "solution": "import numpy as np\nfrom collections import Counter\ndef entropy(y):\n    \"\"\"Calculate the entropy of a list of labels.\"\"\"\n    counter = Counter(y)\n    total = len(y)\n    return -sum((count / total * np.log2(count / total) for count in counter.values()))\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    best_gain = -np.inf\n    best_split = (-1, None, None, None)\n    parent_entropy = entropy(y)\n    majority_label = Counter(y).most_common(1)[0][0]\n    for j in range(X.shape[1]):\n        feature_values = sorted(set(X[:, j]))\n        for i in range(len(feature_values) - 1):\n            threshold = (feature_values[i] + feature_values[i + 1]) / 2\n            left_idx = X[:, j] <= threshold\n            right_idx = X[:, j] > threshold\n            if np.sum(left_idx) == 0 or np.sum(right_idx) == 0:\n                continue\n            left_child_y = y[left_idx]\n            right_child_y = y[right_idx]\n            left_entropy = entropy(left_child_y)\n            right_entropy = entropy(right_child_y)\n            p_left = len(left_child_y) / len(y)\n            p_right = len(right_child_y) / len(y)\n            gain = parent_entropy - (p_left * left_entropy + p_right * right_entropy)\n            if gain > best_gain:\n                left_majority_label = Counter(left_child_y).most_common(1)[0][0]\n                right_majority_label = Counter(right_child_y).most_common(1)[0][0]\n                best_gain = gain\n                best_split = (j, round(threshold, 4), left_majority_label, right_majority_label)\n    if best_gain <= 0:\n        return (-1, None, majority_label, majority_label)\n    return best_split"}
{"task_id": 446, "completion_id": 4, "solution": "import numpy as np\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a set of labels.\"\"\"\n    (value, counts) = np.unique(labels, return_counts=True)\n    norm_counts = counts / counts.sum()\n    return -(norm_counts * np.log2(norm_counts)).sum()\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    (best_gain, best_j, best_thr) = (-np.inf, -1, None)\n    root_entropy = entropy(y)\n    majority_label = np.bincount(y).argmax()\n    for j in range(n_features):\n        values = np.sort(np.unique(X[:, j]))\n        thresholds = (values[:-1] + values[1:]) / 2\n        for thr in thresholds:\n            (left_idx, right_idx) = (X[:, j] <= thr, X[:, j] > thr)\n            p_left = left_idx.sum() / n_samples\n            gain = root_entropy - p_left * entropy(y[left_idx]) - (1 - p_left) * entropy(y[right_idx])\n            if gain > best_gain:\n                (best_gain, best_j, best_thr) = (gain, j, thr)\n            elif gain == best_gain and (j < best_j or (j == best_j and thr < best_thr)):\n                (best_gain, best_j, best_thr) = (gain, j, thr)\n    if best_gain > 0:\n        (left_idx, right_idx) = (X[:, best_j] <= best_thr, X[:, best_j] > best_thr)\n        left_majority_label = np.bincount(y[left_idx]).argmax()\n        right_majority_label = np.bincount(y[right_idx]).argmax()\n        return (best_j, round(best_thr, 4), left_majority_label, right_majority_label)\n    else:\n        return (-1, None, majority_label, majority_label)\nX = [[1.0, 2.0], [3.0, 4.0], [5.0, 6.0], [1.0, 3.0], [3.0, 5.0]]\ny = [1, 2, 1, 1, 2]"}
{"task_id": 446, "completion_id": 5, "solution": "import numpy as np\ndef entropy(labels):\n    \"\"\"Compute the entropy of a given list of labels.\"\"\"\n    (value, counts) = np.unique(labels, return_counts=True)\n    probs = counts / len(labels)\n    return -np.sum(probs * np.log2(probs + 1e-09))\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    best_gain = -1\n    best_feature_index = -1\n    best_threshold = None\n    best_left_majority_label = None\n    best_right_majority_label = None\n    H_parent = entropy(y)\n    for j in range(n_features):\n        feature_values = np.unique(X[:, j])\n        for i in range(len(feature_values) - 1):\n            threshold = (feature_values[i] + feature_values[i + 1]) / 2\n            left_idx = X[:, j] <= threshold\n            right_idx = X[:, j] > threshold\n            if not np.any(left_idx) or not np.any(right_idx):\n                continue\n            p_left = np.mean(left_idx)\n            p_right = np.mean(right_idx)\n            H_left = entropy(y[left_idx])\n            H_right = entropy(y[right_idx])\n            gain = H_parent - p_left * H_left - p_right * H_right\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(threshold, 4)\n                best_left_majority_label = np.argmax(np.bincount(y[left_idx]))\n                best_right_majority_label = np.argmax(np.bincount(y[right_idx]))\n    if best_gain == -1:\n        majority_label = np.argmax(np.bincount(y))\n        return (-1, None, majority_label, majority_label)\n    else:\n        return (best_feature_index, best_threshold, best_left_majority_label, best_right_majority_label)\nX = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]\ny = [0, 0, 1, 1]"}
{"task_id": 446, "completion_id": 6, "solution": "import numpy as np\ndef entropy(y: np.ndarray) -> float:\n    \"\"\"Calculate shannon entropy of the labels.\"\"\"\n    (unique, counts) = np.unique(y, return_counts=True)\n    proportions = counts / len(y)\n    return -np.sum(proportions * np.log2(proportions + 1e-10))\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n    \n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n    \n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n    \n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    best_gain = 0\n    (best_feature, best_thr) = (-1, None)\n    (majority_label_left, majority_label_right) = (-1, -1)\n    H_parent = entropy(y)\n    (values, counts) = np.unique(y, return_counts=True)\n    majority_label = values[np.argmax(counts)]\n    for j in range(n_features):\n        sorted_idx = np.argsort(X[:, j])\n        sorted_X = X[sorted_idx, j]\n        sorted_y = y[sorted_idx]\n        thresholds = (sorted_X[:-1] + sorted_X[1:]) * 0.5\n        for thr in np.unique(thresholds):\n            left_idx = sorted_X <= thr\n            right_idx = sorted_X > thr\n            if not left_idx.any() or not right_idx.any():\n                continue\n            p_left = np.sum(left_idx) / n_samples\n            p_right = 1 - p_left\n            H_left = entropy(sorted_y[left_idx])\n            H_right = entropy(sorted_y[right_idx])\n            gain = H_parent - p_left * H_left - p_right * H_right\n            if gain > best_gain or (gain == best_gain and best_feature == -1):\n                best_gain = gain\n                best_feature = j\n                best_thr = round(thr, 4)\n                (unique_left, counts_left) = np.unique(sorted_y[left_idx], return_counts=True)\n                left_majority_label = unique_left[np.argmax(counts_left)]\n                (unique_right, counts_right) = np.unique(sorted_y[right_idx], return_counts=True)\n                right_majority_label = unique_right[np.argmax(counts_right)]\n    if best_feature == -1:\n        return (-1, None, majority_label, majority_label)\n    else:\n        return (best_feature, best_thr, left_majority_label, right_majority_label)"}
{"task_id": 446, "completion_id": 7, "solution": "import numpy as np\nfrom scipy.stats import entropy\nfrom collections import Counter\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n\n    def compute_entropy(labels):\n        class_counts = np.bincount(labels)\n        proportions = class_counts / len(labels)\n        proportions = proportions[proportions > 0]\n        return entropy(proportions, base=2)\n\n    def compute_information_gain(y_parent, y_left, y_right):\n        p_left = len(y_left) / len(y_parent)\n        p_right = len(y_right) / len(y_parent)\n        return compute_entropy(y_parent) - (p_left * compute_entropy(y_left) + p_right * compute_entropy(y_right))\n    parent_entropy = compute_entropy(y)\n    best_gain = -1\n    best_feature = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n    for j in range(n_features):\n        sorted_indices = np.argsort(X[:, j])\n        samples_sorted_by_feature = X[sorted_indices, j]\n        labels_sorted_by_feature = y[sorted_indices]\n        for i in range(1, n_samples):\n            if samples_sorted_by_feature[i - 1] != samples_sorted_by_feature[i]:\n                threshold = (samples_sorted_by_feature[i - 1] + samples_sorted_by_feature[i]) / 2\n                left_mask = X[:, j] <= threshold\n                right_mask = X[:, j] > threshold\n                (y_left, y_right) = (labels_sorted_by_feature[left_mask[sorted_indices]], labels_sorted_by_feature[right_mask[sorted_indices]])\n                gain = compute_information_gain(labels_sorted_by_feature, y_left, y_right)\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = j\n                    best_threshold = threshold\n                    left_majority_label = Counter(y_left).most_common(1)[0][0]\n                    right_majority_label = Counter(y_right).most_common(1)[0][0]\n    if best_gain <= 0:\n        majority_label = Counter(y).most_common(1)[0][0]\n        return (-1, None, majority_label, majority_label)\n    return (best_feature, round(best_threshold, 4), left_majority_label, right_majority_label)"}
{"task_id": 446, "completion_id": 8, "solution": "import numpy as np\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of class labels.\"\"\"\n    (unique_labels, label_counts) = np.unique(labels, return_counts=True)\n    probabilities = label_counts / len(labels)\n    ent = -np.sum(probabilities * np.log2(probabilities))\n    return ent\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    total_entropy = entropy(y)\n    (n_samples, n_features) = X.shape\n    best_gain = -np.inf\n    best_feature = -1\n    best_threshold = None\n    majority_label_left = None\n    majority_label_right = None\n    overall_majority_label = None\n    (unique_labels, label_counts) = np.unique(y, return_counts=True)\n    overall_majority_label = unique_labels[np.argmax(label_counts)]\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_sorted_values = np.unique(feature_values)\n        thresholds = 0.5 * (unique_sorted_values[:-1] + unique_sorted_values[1:])\n        for thr in thresholds:\n            left_indices = feature_values <= thr\n            right_indices = feature_values > thr\n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue\n            p_left = np.sum(left_indices) / n_samples\n            p_right = np.sum(right_indices) / n_samples\n            left_info = entropy(y[left_indices])\n            right_info = entropy(y[right_indices])\n            current_gain = total_entropy - p_left * left_info - p_right * right_info\n            if current_gain > best_gain or (current_gain == best_gain and feature_index < best_feature):\n                best_gain = current_gain\n                best_feature = feature_index\n                best_threshold = round(thr, 4)\n                (majority_label_left, counts_left) = np.unique(y[left_indices], return_counts=True)\n                (majority_label_right, counts_right) = np.unique(y[right_indices], return_counts=True)\n                majority_label_left = majority_label_left[np.argmax(counts_left)]\n                majority_label_right = majority_label_right[np.argmax(counts_right)]\n    if best_gain > 0:\n        return (best_feature, best_threshold, majority_label_left, majority_label_right)\n    else:\n        return (-1, None, overall_majority_label, overall_majority_label)\nX = [[0], [1], [2], [3], [6], [7]]\ny = [0, 0, 0, 1, 1, 1]"}
{"task_id": 446, "completion_id": 9, "solution": "import numpy as np\nfrom scipy.stats import entropy\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (majority_label, counts) = np.unique(y, return_counts=True)\n    majority_label = majority_label[np.argmax(counts)]\n    (unique_labels, label_counts) = np.unique(y, return_counts=True)\n    parent_entropy = entropy(label_counts, base=2)\n    best_feature = -1\n    best_threshold = None\n    best_gain = -np.inf\n    left_majority_label = majority_label\n    right_majority_label = majority_label\n    for feature_idx in range(X.shape[1]):\n        sorted_unique_vals = np.unique(sorted(X[:, feature_idx]))\n        for i in range(len(sorted_unique_vals) - 1):\n            threshold = (sorted_unique_vals[i] + sorted_unique_vals[i + 1]) / 2.0\n            left_split = y[X[:, feature_idx] <= threshold]\n            right_split = y[X[:, feature_idx] > threshold]\n            p_left = len(left_split) / len(y)\n            p_right = len(right_split) / len(y)\n            left_entropy = entropy(np.unique(left_split, return_counts=True)[1], base=2)\n            right_entropy = entropy(np.unique(right_split, return_counts=True)[1], base=2)\n            gain = parent_entropy - p_left * left_entropy - p_right * right_entropy\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_idx\n                best_threshold = round(threshold, 4)\n                (left_majority_label, _) = np.unique(left_split, return_counts=True)\n                left_majority_label = left_majority_label[np.argmax(np.unique(left_split, return_counts=True)[1])]\n                (right_majority_label, _) = np.unique(right_split, return_counts=True)\n                right_majority_label = right_majority_label[np.argmax(np.unique(right_split, return_counts=True)[1])]\n    if best_gain <= 0:\n        return (-1, None, majority_label, majority_label)\n    return (best_feature, best_threshold, left_majority_label, right_majority_label)"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples. Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two. *result[0]* is the first subset, *result[1]* is\n        the second subset. Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    numeric_threshold = isinstance(threshold, (int, float))\n    if numeric_threshold:\n        subset_1 = X[X[:, feature_i] >= threshold]\n        subset_2 = X[X[:, feature_i] < threshold]\n    else:\n        subset_1 = X[X[:, feature_i] == threshold]\n        subset_2 = X[X[:, feature_i] != threshold]\n    return [subset_1.tolist(), subset_2.tolist()]"}
{"task_id": 452, "completion_id": 1, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[List], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n    \n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset. Each subset must be converted to a regular Python list.\n    \"\"\"\n    X_array = np.array(X)\n    if isinstance(threshold, (int, float)):\n        subset1 = X_array[X_array[:, feature_i] >= threshold]\n        subset2 = X_array[X_array[:, feature_i] < threshold]\n    else:\n        subset1 = X_array[X_array[:, feature_i] == threshold]\n        subset2 = X_array[X_array[:, feature_i] != threshold]\n    return [subset1.tolist(), subset2.tolist()]"}
{"task_id": 452, "completion_id": 2, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X = np.array(X)\n    subset1 = []\n    subset2 = []\n    if isinstance(threshold, (int, float)):\n        splitting_condition = X[:, feature_i] >= threshold\n    else:\n        splitting_condition = X[:, feature_i] == threshold\n    for (i, meet_condition) in enumerate(splitting_condition):\n        if meet_condition:\n            subset1.append(X[i].tolist())\n        else:\n            subset2.append(X[i].tolist())\n    return [subset1, subset2]"}
{"task_id": 452, "completion_id": 3, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    if isinstance(threshold, (int, float)):\n        condition = X[:, feature_i] >= threshold\n    else:\n        condition = X[:, feature_i] == threshold\n    subset1_indices = np.where(condition)[0]\n    subset2_indices = np.where(~condition)[0]\n    subset1 = X[subset1_indices].tolist()\n    subset2 = X[subset2_indices].tolist()\n    return [subset1, subset2]\nX = np.array([[1, 'A'], [2, 'B'], [3, 'A'], [4, 'C']])\nfeature_i = 1\nthreshold = 'A'"}
{"task_id": 452, "completion_id": 4, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\"\"\"\n    X = np.array(X, dtype=object)\n    subset1 = []\n    subset2 = []\n    is_numeric = isinstance(threshold, (int, float))\n    for (idx, sample) in enumerate(X):\n        if is_numeric and sample[feature_i] >= threshold or (not is_numeric and sample[feature_i] == threshold):\n            subset1.append(sample.tolist())\n        else:\n            subset2.append(sample.tolist())\n    return [subset1, subset2]"}
{"task_id": 452, "completion_id": 5, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    subset1 = []\n    subset2 = []\n    for sample in X:\n        value = sample[feature_i]\n        if isinstance(threshold, (int, float)):\n            if value >= threshold:\n                subset1.append(sample.tolist())\n            else:\n                subset2.append(sample.tolist())\n        elif value == threshold:\n            subset1.append(sample.tolist())\n        else:\n            subset2.append(sample.tolist())\n    return [subset1, subset2]"}
{"task_id": 452, "completion_id": 6, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via `ndarray.tolist()` before returning.\n    \"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    if isinstance(threshold, (int, float)):\n        compare = lambda x: x >= threshold\n    else:\n        compare = lambda x: x == threshold\n    mask = X[:, feature_i]\n    split_mask = np.vectorize(compare)(mask)\n    subset_1 = X[split_mask].tolist()\n    subset_2 = X[~split_mask].tolist()\n    return [subset_1, subset_2]\nX = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nfeature_i = 0\nthreshold = 3"}
{"task_id": 452, "completion_id": 7, "solution": "import numpy as np\ndef divide_on_feature(X: np.ndarray | list, feature_i: int, threshold) -> list:\n    \"\"\"\n    Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X = np.array(X) if not isinstance(X, np.ndarray) else X\n    subset1 = []\n    subset2 = []\n    for sample in X:\n        value = sample[feature_i]\n        if isinstance(threshold, (int, float)) and value >= threshold or value == threshold:\n            subset1.append(sample.tolist())\n        else:\n            subset2.append(sample.tolist())\n    return [subset1, subset2]"}
{"task_id": 452, "completion_id": 8, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X = np.array(X)\n    subset1 = []\n    subset2 = []\n    threshold_type = type(threshold)\n    for sample in X:\n        if threshold_type in [int, float] and sample[feature_i] >= threshold or (threshold_type not in [int, float] and sample[feature_i] == threshold):\n            subset1.append(sample.tolist())\n        else:\n            subset2.append(sample.tolist())\n    return [subset1, subset2]"}
{"task_id": 452, "completion_id": 9, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    subset1 = []\n    subset2 = []\n    for sample in X:\n        if isinstance(threshold, (int, float)):\n            if sample[feature_i] >= threshold:\n                subset1.append(sample.tolist())\n            else:\n                subset2.append(sample.tolist())\n        elif sample[feature_i] == threshold:\n            subset1.append(sample.tolist())\n        else:\n            subset2.append(sample.tolist())\n    subset1 = np.array(subset1).tolist()\n    subset2 = np.array(subset2).tolist()\n    return [subset1, subset2]\nX = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nfeature_i = 0\nthreshold = 3"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    batch_size = Q.shape[0]\n    if Q.shape != Q_next.shape or len(actions) != batch_size or len(rewards) != batch_size or (len(dones) != batch_size) or (not 0 <= gamma <= 1):\n        return -1\n    Q_targets = Q.copy()\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        Q_targets[i, actions[i]] = np.round(target, 4)\n    Q_targets_list = Q_targets.tolist()\n    return Q_targets_list\nQ_next = np.array([[1.0, 2.0, 3.0], [2.0, 1.5, 0.5]])\nactions = [1, 2]\nrewards = [10, 20]\ndones = [True, False]\ngamma = 0.95"}
{"task_id": 453, "completion_id": 1, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    batch_size = len(rewards)\n    if len(Q) != batch_size or len(Q_next) != batch_size or len(actions) != batch_size or (len(dones) != batch_size):\n        return -1\n    if gamma < 0 or gamma > 1:\n        return -1\n    Q_updated = np.copy(Q)\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        Q_updated[i][actions[i]] = round(target, 4)\n    return Q_updated.tolist()\nQ = np.array([[1.0, 0.5], [0.7, 2.0]])\nQ_next = np.array([[0.8, 0.3], [1.0, 1.5]])\nactions = [0, 1]\nrewards = [0.1, 0.9]\ndones = [False, True]\ngamma = 0.9"}
{"task_id": 453, "completion_id": 2, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Update Q-values for a Deep Q-Network training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimal places. If inputs are invalid, return -1.\n    \"\"\"\n    (batch_size, n_actions) = Q.shape\n    if (batch_size, n_actions) != Q_next.shape or len(actions) != batch_size or len(rewards) != batch_size or (len(dones) != batch_size) or (not 0 <= gamma <= 1):\n        return -1\n    targets = np.copy(Q)\n    for i in range(batch_size):\n        if not dones[i]:\n            action_max_q = np.max(Q_next[i])\n            target = rewards[i] + gamma * action_max_q\n        else:\n            target = rewards[i]\n        targets[i, actions[i]] = round(target, 4)\n    return targets.tolist()"}
{"task_id": 453, "completion_id": 3, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n    \n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    batch_size = Q.shape[0]\n    if Q.shape != Q_next.shape or len(actions) != batch_size or len(rewards) != batch_size or (len(dones) != batch_size) or (not 0 <= gamma <= 1):\n        return -1\n    updated_Q = Q.copy()\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        updated_Q[i, actions[i]] = target\n    updated_Q_list = np.round(updated_Q, 4).tolist()\n    return updated_Q_list\nQ_next = np.array([[0.2, 0.3, 0.4], [0.5, 0.6, 0.7]])\nactions = [2, 0]\nrewards = [1.0, 1.2]\ndones = [False, True]\ngamma = 0.9"}
{"task_id": 453, "completion_id": 4, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"\n    Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n    \n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    (batch_size, num_actions) = Q.shape\n    if len(Q) != len(Q_next) or len(actions) != batch_size or len(rewards) != batch_size or (len(dones) != batch_size):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    targets = Q.copy().tolist()\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * max(Q_next[i])\n        targets[i][actions[i]] = np.round(target, 4)\n    return targets\nQ = np.array([[1, 2, 3], [4, 5, 6]])\nQ_next = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])\nactions = [1, 2]\nrewards = [0.3, 0.4]\ndones = [False, True]\ngamma = 0.9"}
{"task_id": 453, "completion_id": 5, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not len(Q) == len(Q_next) == len(actions) == len(rewards) == len(dones):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    Q_updated = np.array(Q, copy=True)\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        Q_updated[i, actions[i]] = target\n    return np.round(Q_updated, 4).tolist()\nQ = np.array([[-1, 2, 3], [4, -5, -6], [7, 8, 9]])\nQ_next = np.array([[-0.5, 1.5, 3.5], [4.5, -5.5, -6.5], [7.5, 8.5, 9.5]])\nactions = [0, 1, 2]\nrewards = [0.1, 0.2, 0.3]\ndones = [False, True, False]\ngamma = 0.9"}
{"task_id": 453, "completion_id": 6, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not 0 <= gamma <= 1:\n        return -1\n    batch_size = Q.shape[0]\n    if Q_next.shape[0] != batch_size or len(actions) != batch_size or len(rewards) != batch_size or (len(dones) != batch_size):\n        return -1\n    targets = Q.tolist()\n    Q_next_max = np.max(Q_next, axis=1)\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * Q_next_max[i]\n        targets[i][actions[i]] = round(target, 4)\n    return targets\nQ_next = np.array([[2.0, 3.0, 1.0], [6.0, 5.0, 4.0]])\nactions = [1, 2]\nrewards = [10, 20]\ndones = [True, False]\ngamma = 0.9"}
{"task_id": 453, "completion_id": 7, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    batch_size = Q.shape[0]\n    if Q.shape != Q_next.shape or len(actions) != batch_size or len(rewards) != batch_size or (len(dones) != batch_size) or (not 0 <= gamma <= 1):\n        return -1\n    Q_updated = Q.copy()\n    for i in range(batch_size):\n        target = rewards[i] + (1 - dones[i]) * gamma * np.max(Q_next[i])\n        Q_updated[i][actions[i]] = round(target, 4)\n    return Q_updated.tolist()\nQ_next = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])\nactions = [0, 1]\nrewards = [1.0, 2.0]\ndones = [False, True]\ngamma = 0.99"}
{"task_id": 453, "completion_id": 8, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if len(set([Q.shape[0], len(actions), len(rewards), len(dones)])) != 1 or Q.shape != Q_next.shape or (not 0 <= gamma <= 1):\n        return -1\n    batch_size = Q.shape[0]\n    n_actions = Q.shape[1]\n    targets = Q.copy()\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        targets[i, actions[i]] = target\n    return np.round(targets, 4).tolist()\nQ_next = np.array([[0.6, 0.4, 0.1], [0.7, 0.2, 0.8]])\nactions = [2, 0]\nrewards = [1, -1]\ndones = [False, True]\ngamma = 0.9"}
{"task_id": 453, "completion_id": 9, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    lengths = set(map(len, [Q, Q_next, actions, rewards, dones]))\n    if len(lengths) != 1 or gamma < 0 or gamma > 1:\n        return -1\n    targets = np.copy(Q)\n    for (i, (done, action, reward)) in enumerate(zip(dones, actions, rewards)):\n        if done:\n            target = reward\n        else:\n            target = reward + gamma * np.max(Q_next[i])\n        targets[i, action] = np.round(target, decimals=4)\n    return targets.tolist()"}
{"task_id": 458, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if isinstance(labels, (list, tuple)):\n        labels = np.array(labels)\n    elif isinstance(labels, np.ndarray):\n        labels = labels\n    else:\n        raise ValueError('Invalid input type. Input should be a list, tuple or numpy array.')\n    if np.any(labels < 0):\n        return -1\n    if num_classes is None:\n        num_classes = np.max(labels) + 1\n    elif num_classes < np.max(labels) + 1:\n        return -1\n    one_hot = np.zeros((len(labels), num_classes), dtype=int)\n    one_hot[np.arange(len(labels)), labels] = 1\n    return one_hot.tolist()\nlabels = [0, 4, 2]\nnum_classes = 4"}
{"task_id": 458, "completion_id": 1, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if isinstance(labels, (list, tuple, np.ndarray)):\n        labels = np.array(labels)\n        if np.any(labels < 0):\n            return -1\n        if num_classes is None:\n            num_classes = np.max(labels) + 1\n        if np.max(labels) >= num_classes:\n            return -1\n        one_hot = [[1 if i == label else 0 for i in range(num_classes)] for label in labels]\n        return one_hot\n    return -1"}
{"task_id": 458, "completion_id": 2, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = np.array(labels)\n    if np.any(labels < 0):\n        return -1\n    if num_classes is None:\n        num_classes = np.max(labels) + 1\n    elif num_classes < np.max(labels) + 1:\n        return -1\n    one_hot_encoded = np.eye(num_classes)[labels].tolist()\n    one_hot_encoded = [[int(i) for i in sublist] for sublist in one_hot_encoded]\n    return one_hot_encoded"}
{"task_id": 458, "completion_id": 3, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n    \n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n        \n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = np.array(labels)\n    if np.any(labels < 0):\n        return -1\n    if num_classes is None:\n        num_classes = np.max(labels) + 1\n    if num_classes < np.max(labels) + 1:\n        return -1\n    one_hot_labels = []\n    for label in labels:\n        one_hot = [0] * num_classes\n        one_hot[label] = 1\n        one_hot_labels.append(one_hot)\n    return one_hot_labels\nlabels = [0, 1, 2, -1]\nnum_classes = 3"}
{"task_id": 458, "completion_id": 4, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if isinstance(labels, np.ndarray):\n        labels = labels.tolist()\n    elif isinstance(labels, tuple):\n        labels = list(labels)\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    elif num_classes < 0:\n        return -1\n    if any((label < 0 for label in labels)) or any((label >= num_classes for label in labels)):\n        return -1\n    one_hot = []\n    for label in labels:\n        row = [0] * num_classes\n        row[label] = 1\n        one_hot.append(row)\n    return one_hot\nlabels = [0, 1, 2, 0, 1]\nnum_classes = 3"}
{"task_id": 458, "completion_id": 5, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = list(labels)\n    if any((label < 0 for label in labels)):\n        return -1\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    if num_classes < max(labels) + 1:\n        return -1\n    one_hot = []\n    for label in labels:\n        row = [0] * num_classes\n        row[label] = 1\n        one_hot.append(row)\n    return one_hot"}
{"task_id": 458, "completion_id": 6, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = list(labels)\n    max_label = max(labels)\n    if num_classes is None:\n        num_classes = max_label + 1\n    elif num_classes < max_label + 1:\n        return -1\n    if any((l < 0 for l in labels)):\n        return -1\n    result = [[0] * num_classes for _ in labels]\n    for (i, label) in enumerate(labels):\n        result[i][label] = 1\n    return result"}
{"task_id": 458, "completion_id": 7, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if isinstance(labels, (tuple, np.ndarray)):\n        labels = list(labels)\n    if any((label < 0 for label in labels)):\n        return -1\n    max_label = max(labels) if labels else 0\n    if num_classes is None:\n        num_classes = max_label + 1\n    elif num_classes < max_label + 1:\n        return -1\n    categorical = []\n    for label in labels:\n        row = [0] * num_classes\n        row[label] = 1\n        categorical.append(row)\n    return categorical"}
{"task_id": 458, "completion_id": 8, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if not labels:\n        return []\n    labels = np.array(labels, dtype='int')\n    if np.any(labels < 0):\n        return -1\n    if not num_classes:\n        num_classes = np.max(labels) + 1\n    elif num_classes < np.max(labels) + 1:\n        return -1\n    one_hot = np.zeros((labels.size, num_classes), dtype='int')\n    one_hot[np.arange(labels.size), labels] = 1\n    return one_hot.tolist()"}
{"task_id": 458, "completion_id": 9, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if not labels:\n        return []\n    if any((label < 0 for label in labels)):\n        return -1\n    max_label = max(labels)\n    if num_classes is None:\n        num_classes = max_label + 1\n    elif num_classes < max_label + 1:\n        return -1\n    encoded = []\n    for label in labels:\n        row = [0] * num_classes\n        row[label] = 1\n        encoded.append(row)\n    return encoded"}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    predictions = np.full_like(y, np.mean(y), dtype=float)\n    for _ in range(n_estimators):\n        residuals = y - predictions\n        if np.allclose(residuals, 0) or len(np.unique(x)) <= 1:\n            break\n        split_values = np.unique(x[x < x.max()])\n        best_sse = float('inf')\n        best_t = None\n        best_v_left = best_v_right = None\n        for t in split_values:\n            left_mask = x <= t\n            right_mask = x > t\n            if np.any(left_mask) and np.any(right_mask):\n                v_left = np.mean(residuals[left_mask])\n                v_right = np.mean(residuals[right_mask])\n                sse = np.sum((residuals[left_mask] - v_left) ** 2) + np.sum((residuals[right_mask] - v_right) ** 2)\n                if sse < best_sse:\n                    (best_sse, best_t, best_v_left, best_v_right) = (sse, t, v_left, v_right)\n        if best_t is not None:\n            new_stump = np.where(x <= best_t, best_v_left, best_v_right)\n        else:\n            new_stump = np.mean(residuals)\n        predictions += learning_rate * new_stump\n    return np.round(predictions, 4).tolist()"}
{"task_id": 461, "completion_id": 1, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n    \n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    base_prediction = y.mean()\n    current_prediction = np.full_like(y, base_prediction, dtype=float)\n    if n_estimators <= 0:\n        return np.round(current_prediction, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y - current_prediction\n        unique_x_values = np.unique(x)[np.unique(x) < np.max(x)]\n        best_sse = np.inf\n        best_t = None\n        best_v_L = None\n        best_v_R = None\n        for t in unique_x_values:\n            left_mask = x <= t\n            right_mask = x > t\n            if not left_mask.any() or not right_mask.any():\n                continue\n            v_L = residuals[left_mask].mean()\n            v_R = residuals[right_mask].mean()\n            sse = (residuals[left_mask] - v_L) ** 2 + (residuals[right_mask] - v_R) ** 2\n            sse = sse.sum()\n            if sse < best_sse:\n                best_sse = sse\n                best_t = t\n                best_v_L = v_L\n                best_v_R = v_R\n        if best_t is None:\n            stump_prediction = residuals.mean()\n        else:\n            stump_prediction = np.where(x <= best_t, best_v_L, best_v_R)\n        current_prediction += learning_rate * stump_prediction\n        np.round(current_prediction, 4)\n    return np.round(current_prediction, 4).tolist()\nx = [1, 2, 3, 4, 5]\ny = [1, 2, 3, 4, 5]"}
{"task_id": 461, "completion_id": 2, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, y.mean())\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    for _ in range(n_estimators):\n        r = y - y_pred\n        (sse_min, best_split) = (float('inf'), None)\n        for threshold in np.unique(x)[:-1]:\n            left_mask = x <= threshold\n            right_mask = x > threshold\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            sse_left = np.sum((r[left_mask] - r[left_mask].mean()) ** 2)\n            sse_right = np.sum((r[right_mask] - r[right_mask].mean()) ** 2)\n            sse_total = sse_left + sse_right\n            if sse_total < sse_min:\n                (sse_min, best_split) = (sse_total, (threshold, r[left_mask].mean(), r[right_mask].mean()))\n        if best_split is None:\n            incremental_pred = r.mean()\n        else:\n            (threshold, v_L, v_R) = best_split\n            incremental_pred = np.where(x <= threshold, v_L, v_R)\n        y_pred += learning_rate * incremental_pred\n    return np.round(y_pred, 4).tolist()\nx = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]\ny = [3.0, 3.5, 5.0, 5.5, 10.0, 11.5, 13.5, 15.0, 15.5]"}
{"task_id": 461, "completion_id": 3, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(x)\n    y_mean = np.mean(y)\n    predictions = np.full(n_samples, y_mean)\n    if n_estimators <= 0:\n        return np.round(predictions, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y - predictions\n        if np.all(residuals == 0):\n            break\n        unique_x = np.unique(x)[:-1]\n        best_split = None\n        min_sse = np.inf\n        for t in unique_x:\n            left_mask = x <= t\n            right_mask = x > t\n            if not (np.any(left_mask) and np.any(right_mask)):\n                continue\n            left_residuals = residuals[left_mask]\n            right_residuals = residuals[right_mask]\n            left_error = np.sum((left_residuals - np.mean(left_residuals)) ** 2)\n            right_error = np.sum((right_residuals - np.mean(right_residuals)) ** 2)\n            sse = left_error + right_error\n            if sse < min_sse:\n                min_sse = sse\n                best_split = (t, np.mean(left_residuals), np.mean(right_residuals))\n        if best_split:\n            (t, v_L, v_R) = best_split\n            stump_predictions = np.where(x <= t, v_L, v_R)\n        else:\n            stump_predictions = np.full(n_samples, np.mean(residuals))\n        predictions += learning_rate * stump_predictions\n    return np.round(predictions, 4).tolist()"}
{"task_id": 461, "completion_id": 4, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_hat = np.full_like(y, y.mean())\n    if n_estimators <= 0:\n        return np.round(y_hat, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y - y_hat\n        sse_min = np.inf\n        (t_split, v_left, v_right) = (None, None, None)\n        unique_x = np.unique(x)\n        split_values = unique_x[:-1]\n        for t in split_values:\n            left_idx = x <= t\n            right_idx = x > t\n            if not (np.any(left_idx) and np.any(right_idx)):\n                continue\n            sse = np.sum(residuals[left_idx] - residuals[left_idx].mean()) ** 2 + np.sum(residuals[right_idx] - residuals[right_idx].mean()) ** 2\n            if sse < sse_min:\n                sse_min = sse\n                t_split = t\n                v_left = residuals[left_idx].mean()\n                v_right = residuals[right_idx].mean()\n        if t_split is not None:\n            y_hat += learning_rate * np.where(x <= t_split, v_left, v_right)\n        else:\n            y_hat += learning_rate * residuals.mean()\n    return np.round(y_hat, 4).tolist()\nx = [1.3, 1.5, 2.0, 3.0, 3.5, 4.0]\ny = [3.75, 4.0, 4.5, 5.0, 5.25, 6.0]"}
{"task_id": 461, "completion_id": 5, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    predictions = np.full_like(y, np.mean(y), dtype=float)\n    n = len(x)\n    if n_estimators <= 0:\n        return np.round(predictions, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y - predictions\n        unique_x = np.unique(x)\n        (best_sse, best_vl, best_vr, best_t) = (float('inf'), None, None, None)\n        for t in unique_x[:-1]:\n            left_mask = x <= t\n            right_mask = x > t\n            if not left_mask.any() or not right_mask.any():\n                continue\n            sse = np.sum(residuals[left_mask] ** 2) + np.sum(residuals[right_mask] ** 2)\n            if sse < best_sse:\n                best_sse = sse\n                best_vl = residuals[left_mask].mean()\n                best_vr = residuals[right_mask].mean()\n                best_t = t\n        if best_t is None:\n            best_vl = residuals.mean()\n            best_vr = residuals.mean()\n            best_t = np.median(x)\n        predictions += learning_rate * np.where(x <= best_t, best_vl, best_vr)\n    return np.round(predictions, 4).tolist()"}
{"task_id": 461, "completion_id": 6, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    (x, y) = (np.array(x), np.array(y))\n    predictions = np.full_like(y, np.mean(y))\n    if n_estimators <= 0:\n        return np.round(predictions, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y - predictions\n        if all(residuals == 0):\n            break\n        split_values = sorted(set(x[:-1]))\n        best_sse = np.inf\n        best_split = None\n        best_predictions = None\n        for split in split_values:\n            left_idx = x <= split\n            right_idx = x > split\n            if np.any(left_idx) and np.any(right_idx):\n                left_pred = np.mean(residuals[left_idx])\n                right_pred = np.mean(residuals[right_idx])\n                pred = np.where(left_idx, left_pred, right_pred)\n                sse = np.sum((residuals - pred) ** 2)\n                if sse < best_sse:\n                    best_sse = sse\n                    best_split = split\n                    best_predictions = pred\n        if best_split is None:\n            best_predictions = np.full_like(residuals, np.mean(residuals))\n        predictions += learning_rate * best_predictions\n        predictions = np.round(predictions, 4)\n    return predictions.tolist()\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny = [1.0, 4.0, 9.0, 16.0, 25.0]\npredictions = gradient_boosting_regressor(x, y)"}
{"task_id": 461, "completion_id": 7, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, fill_value=np.mean(y))\n    unique_x = np.unique(x)\n    if len(unique_x) == 1 or n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        min_sse = np.inf\n        best_split = None\n        best_left_mean = np.mean(residuals)\n        best_right_mean = np.mean(residuals)\n        for t in unique_x[:-1]:\n            left = residuals[x <= t]\n            right = residuals[x > t]\n            if len(left) == 0 or len(right) == 0:\n                continue\n            sse = np.sum(left ** 2) + np.sum(right ** 2)\n            if sse < min_sse:\n                min_sse = sse\n                best_split = t\n                best_left_mean = np.mean(left)\n                best_right_mean = np.mean(right)\n        for i in range(len(x)):\n            if best_split is None:\n                y_pred[i] += learning_rate * best_left_mean\n            elif x[i] <= best_split:\n                y_pred[i] += learning_rate * best_left_mean\n            else:\n                y_pred[i] += learning_rate * best_right_mean\n        if np.allclose(residuals, 0):\n            break\n    return np.round(y_pred, 4).tolist()\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny = [1.0, 4.0, 9.0, 16.0, 25.0]"}
{"task_id": 461, "completion_id": 8, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    X = np.array(x)\n    Y = np.array(y)\n    predictions = np.full(Y.shape, Y.mean())\n    if n_estimators <= 0:\n        return np.round(predictions, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = Y - predictions\n        if np.all(residuals == 0):\n            break\n        unique_x = np.unique(X)\n        if len(unique_x) < 2:\n            best_split = unique_x[0]\n        else:\n            best_split = unique_x[:-1]\n        best_sse = float('inf')\n        best_t = None\n        best_vl = None\n        best_vr = None\n        for t in best_split:\n            left_mask = X <= t\n            right_mask = X > t\n            if np.any(left_mask) and np.any(right_mask):\n                sse = np.sum(residuals[left_mask] ** 2) + np.sum(residuals[right_mask] ** 2)\n                if sse < best_sse:\n                    best_sse = sse\n                    best_t = t\n                    best_vl = residuals[left_mask].mean()\n                    best_vr = residuals[right_mask].mean()\n        if best_t is None:\n            stump_prediction = residuals.mean()\n        else:\n            stump_prediction = np.where(X <= best_t, best_vl, best_vr)\n        predictions += learning_rate * stump_prediction\n    return np.round(predictions, 4).tolist()"}
{"task_id": 461, "completion_id": 9, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y), dtype=float)\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    unique_x = np.unique(x[:-1])\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        if np.all(residuals == 0):\n            break\n        min_sse = np.inf\n        best_t = None\n        best_v_L = None\n        best_v_R = None\n        if unique_x.size > 0:\n            for t in unique_x:\n                left = x <= t\n                right = x > t\n                if np.any(left) and np.any(right):\n                    sse = _calc_sse(left, right, residuals)\n                    if sse < min_sse:\n                        min_sse = sse\n                        best_t = t\n                        best_v_L = np.mean(residuals[left])\n                        best_v_R = np.mean(residuals[right])\n            if best_t is not None:\n                stump_prediction = np.where(x <= best_t, best_v_L, best_v_R)\n            else:\n                stump_prediction = np.mean(residuals)\n        else:\n            stump_prediction = np.mean(residuals)\n        y_pred += learning_rate * stump_prediction\n    return np.round(y_pred, 4).tolist()\ndef _calc_sse(left, right, residuals):\n    v_L = np.mean(residuals[left])\n    v_R = np.mean(residuals[right])\n    sse = np.sum((residuals[left] - v_L) ** 2) + np.sum((residuals[right] - v_R) ** 2)\n    return sse\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny = [3.0, 5.0, 7.0, 9.0, 11.0]"}
{"task_id": 471, "completion_id": 0, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is not None:\n        max_q_next = max(q_table[next_state])\n        greedy_actions = [a for a in range(num_actions) if q_table[next_state][a] == max_q_next]\n        expected_q = 0.0\n        for a in range(num_actions):\n            if a in greedy_actions:\n                expected_q += (1 - epsilon + epsilon / num_actions) * q_table[next_state][a]\n            else:\n                expected_q += epsilon / num_actions * q_table[next_state][a]\n        target = reward + gamma * expected_q\n    else:\n        target = reward\n    old_q = q_table[state][action]\n    new_q = old_q + lr * (target - old_q)\n    q_table[state][action] = round(new_q, 4)\n    return [[round(q, 4) for q in row] for row in q_table]\nq_table = [[-1.0, -1.0, -1.0], [-1.0, -1.0, -1.0], [-1.0, -1.0, -1.0]]\nstate = 0\naction = 1\nreward = -1.0\nnext_state = 1\nepsilon = 0.1\nlr = 0.5\ngamma = 0.9"}
{"task_id": 471, "completion_id": 1, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    n_actions = len(q_table[0])\n    if next_state is None:\n        td_target = reward\n    else:\n        max_q = max(q_table[next_state])\n        greedy_actions = [a for (a, q) in enumerate(q_table[next_state]) if q == max_q]\n        num_greedy = len(greedy_actions)\n        exp_q = 0\n        for act in range(n_actions):\n            if act in greedy_actions:\n                prob = epsilon / n_actions + (1 - epsilon) / num_greedy\n            else:\n                prob = epsilon / n_actions\n            exp_q += prob * q_table[next_state][act]\n        td_target = reward + gamma * exp_q\n    td_error = td_target - q_table[state][action]\n    q_table[state][action] += lr * td_error\n    for (s, actions) in enumerate(q_table):\n        for a in range(len(actions)):\n            q_table[s][a] = round(q_table[s][a], 4)\n    return q_table"}
{"task_id": 471, "completion_id": 2, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is None:\n        target = reward\n    else:\n        q_values_next_state = q_table[next_state]\n        max_q = max(q_values_next_state)\n        greedy_actions = [i for (i, q) in enumerate(q_values_next_state) if q == max_q]\n        exp_value = epsilon / num_actions * np.sum(q_values_next_state)\n        exp_value += (1 - epsilon + epsilon / num_actions) * max_q if greedy_actions else exp_value\n        target = reward + gamma * exp_value\n    q_table[state][action] += lr * (target - q_table[state][action])\n    return [[round(val, 4) for val in row] for row in q_table]"}
{"task_id": 471, "completion_id": 3, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n    \n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n    \n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    q_table = np.array(q_table, dtype=float)\n    if next_state is not None:\n        n_actions = len(q_table[0])\n        max_q = np.max(q_table[next_state])\n        greedy_actions = q_table[next_state] == max_q\n        n_greedy = np.sum(greedy_actions)\n        expectation = 0.0\n        for a in range(n_actions):\n            if greedy_actions[a]:\n                expectation += (1 - epsilon + epsilon / n_actions) * q_table[next_state][a]\n            else:\n                expectation += epsilon / n_actions * q_table[next_state][a]\n    else:\n        expectation = 0.0\n    target = reward + gamma * expectation\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = np.round(q_table, decimals=4).tolist()\n    return q_table"}
{"task_id": 471, "completion_id": 4, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is not None:\n        next_q_values = q_table[next_state]\n        max_q = max(next_q_values)\n        greedy_actions = [a for (a, q) in enumerate(next_q_values) if q == max_q]\n        expected_value = 0\n        for a in range(num_actions):\n            if a in greedy_actions:\n                expected_value += (1 - epsilon + epsilon / num_actions) * next_q_values[a]\n            else:\n                expected_value += epsilon / num_actions * next_q_values[a]\n        target = reward + gamma * expected_value\n    else:\n        target = reward\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(q_value, 4) for q_value in row] for row in q_table]\n    return q_table\nq_table = [[2.323, 3.1212, 0.123], [-0.3212, 5.123, 10.2343], [1.12321, -0.232, 1.34]]\nstate = 0\naction = 1\nreward = 5.0\nnext_state = 2\nepsilon = 0.1\nlr = 0.1\ngamma = 0.9"}
{"task_id": 471, "completion_id": 5, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    n_states = len(q_table)\n    if n_states == 0:\n        return q_table\n    n_actions = len(q_table[0])\n    max_action = np.argmax(q_table[next_state]) if next_state is not None else None\n    expected_value = 0.0\n    if next_state is not None:\n        for act in range(n_actions):\n            if act == max_action:\n                prob = 1 - epsilon + epsilon / n_actions\n            else:\n                prob = epsilon / n_actions\n            expected_value += prob * q_table[next_state][act]\n    target = reward + gamma * expected_value\n    td_error = target - q_table[state][action]\n    q_table[state][action] += lr * td_error\n    q_table = np.round(q_table, decimals=4).tolist()\n    return q_table"}
{"task_id": 471, "completion_id": 6, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\"\"\"\n    num_actions = len(q_table[0])\n    if next_state is not None:\n        max_q_next = max(q_table[next_state])\n        target = reward\n        expectation_sum = epsilon / num_actions * sum(q_table[next_state])\n        greedy_contribution = (1 - epsilon + epsilon / num_actions) * max_q_next\n        num_greedy_actions = q_table[next_state].count(max_q_next)\n        expectation_sum += greedy_contribution * num_greedy_actions\n        target += gamma * expectation_sum\n    else:\n        target = reward\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    return q_table"}
{"task_id": 471, "completion_id": 7, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"\n    One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n    \n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n    \n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is None:\n        target = reward\n    else:\n        greedy_actions = [a for a in range(num_actions) if q_table[next_state][a] == max(q_table[next_state])]\n        e_soft_policy = [epsilon / num_actions for _ in range(num_actions)]\n        for a in greedy_actions:\n            e_soft_policy[a] += (1 - epsilon) / len(greedy_actions)\n        future_value = sum((e_soft_policy[a] * q_table[next_state][a] for a in range(num_actions)))\n        target = reward + gamma * future_value\n    q_table[state][action] += lr * (target - q_table[state][action])\n    for i in range(len(q_table)):\n        q_table[i] = [round(q, 4) for q in q_table[i]]\n    return q_table\nq_table = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]"}
{"task_id": 471, "completion_id": 8, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\"\"\"\n    if next_state is None:\n        target = reward\n    else:\n        num_actions = len(q_table[0])\n        max_q_value = max(q_table[next_state])\n        greedy_actions = [a for (a, q) in enumerate(q_table[next_state]) if q == max_q_value]\n        expected_value = 0.0\n        for a in range(num_actions):\n            if a in greedy_actions:\n                expected_value += (1.0 - epsilon + epsilon / num_actions) * q_table[next_state][a]\n            else:\n                expected_value += epsilon / num_actions * q_table[next_state][a]\n        target = reward + gamma * expected_value\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table[state][action] = round(q_table[state][action], 4)\n    return [[round(q, 4) for q in row] for row in q_table]"}
{"task_id": 471, "completion_id": 9, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\"\"\"\n    n_actions = len(q_table[0])\n    if next_state is not None:\n        max_q = max(q_table[next_state])\n        greedy_actions = [i for (i, q) in enumerate(q_table[next_state]) if q == max_q]\n        non_greedy_prob = epsilon / n_actions\n        greedy_prob = non_greedy_prob + (1 - epsilon) / len(greedy_actions)\n        expected_value = sum((q_table[next_state][i] * greedy_prob if i in greedy_actions else q_table[next_state][i] * non_greedy_prob for i in range(n_actions)))\n        target = reward + gamma * expected_value\n    else:\n        target = reward\n    q_table[state][action] += lr * (target - q_table[state][action])\n    return [[round(q, 4) for q in row] for row in q_table]\nstate = 0\naction = 1\nreward = 1.0\nnext_state = 1\nepsilon = 0.1\nlr = 0.1\ngamma = 0.9"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    (X_train_list, X_val_list) = ([], [])\n    (Y_train, Y_val) = ([], [])\n\n    def generate_single_class_data(n: int, class_index: int) -> tuple[list, list]:\n        X_list = []\n        for _ in range(n):\n            x = random.uniform((class_index // 2 + 0.1) * 10, (class_index // 2 + 0.9) * 10)\n            y = random.uniform((class_index % 2 * interval + 0.1) * 10, (class_index % 2 * interval + 0.9) * 10)\n            X_list.append([x, y])\n        Y = [(class_index - 0.5) * 2] * n\n        return (X_list, Y)\n    for i in range(m):\n        (X_train, y_train) = generate_single_class_data(n_train, i)\n        X_train_list.extend(X_train)\n        Y_train.extend(y_train)\n        (X_val, y_val) = generate_single_class_data(n_val, i)\n        X_val_list.extend(X_val)\n        Y_val.extend(y_val)\n    X_train = np.round(np.array(X_train_list), 4)\n    Y_train = np.array(Y_train)\n    X_val = np.round(np.array(X_val_list), 4)\n    Y_val = np.array(Y_val)\n    return (X_train, X_val, Y_train, Y_val)\nm = 2\nn_train = 200\nn_val = 100\ninterval = 1.0\nseed = 42"}
{"task_id": 474, "completion_id": 1, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    def generate_set(n: int) -> tuple[np.ndarray, np.ndarray]:\n        features = []\n        labels = []\n        for i in range(m):\n            for _ in range(n):\n                label = (i - 0.5) * 2\n                row = i // 2\n                col = i % 2\n                x = round(random.uniform((row + 0.1) * 10, (row + 0.9) * 10), 4)\n                y = round(random.uniform((col * interval + 0.1) * 10, (col * interval + 0.9) * 10), 4)\n                features.append([x, y])\n                labels.append(label)\n        return (np.array(features), np.array(labels))\n    (X_train, Y_train) = generate_set(n_train)\n    (X_val, Y_val) = generate_set(n_val)\n    return (X_train, X_val, Y_train, Y_val)\nm = 2\nn_train = 100\nn_val = 50\ninterval = 1.0\nseed = 42"}
{"task_id": 474, "completion_id": 2, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        label = (i - 0.5) * 2\n        base_x_min = (i // 2 + 0.1) * 10\n        base_x_max = (i // 2 + 0.9) * 10\n        base_y_min = i % 2 * interval * 10 + 0.1 * 10\n        base_y_max = i % 2 * interval * 10 + 0.9 * 10\n        for _ in range(n_train):\n            X_train.append([np.round(np.random.uniform(base_x_min, base_x_max), 4), np.round(np.random.uniform(base_y_min, base_y_max), 4)])\n            Y_train.append(label)\n        for _ in range(n_val):\n            X_val.append([np.round(np.random.uniform(base_x_min, base_x_max), 4), np.round(np.random.uniform(base_y_min, base_y_max), 4)])\n            Y_val.append(label)\n    return (np.array(X_train), np.array(X_val), np.array(Y_train), np.array(Y_val))"}
{"task_id": 474, "completion_id": 3, "solution": "import numpy as np\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n\n    def draw_samples(n_samples, m_classes, interval, label):\n        X = np.zeros((n_samples, 2))\n        Y = np.full(n_samples, label, dtype=np.float64)\n        for class_idx in range(m_classes):\n            (low_x, high_x) = ((class_idx // 2 + 0.1) * 10, (class_idx // 2 + 0.9) * 10)\n            (low_y, high_y) = ((class_idx % 2 * interval + 0.1) * 10, (class_idx % 2 * interval + 0.9) * 10)\n            samples_x = np.random.uniform(low_x, high_x, n_samples // m_classes)[:, None]\n            samples_y = np.random.uniform(low_y, high_y, n_samples // m_classes)[:, None]\n            X[class_idx * (n_samples // m_classes):(class_idx + 1) * (n_samples // m_classes)] = np.hstack((samples_x, samples_y))\n        return (X, Y)\n    (X_train, Y_train) = draw_samples(n_train * m, m, interval, (np.arange(m) - 0.5) * 2)\n    (X_val, Y_val) = draw_samples(n_val * m, m, interval, (np.arange(m) - 0.5) * 2)\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 474, "completion_id": 4, "solution": "import numpy as np\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n\n    def generate_samples(n_samples, label):\n        X = []\n        Y = []\n        for i in range(m):\n            x_min = (i // 2 + 0.1) * 10\n            x_max = (i // 2 + 0.9) * 10\n            y_min = (i % 2 * interval + 0.1) * 10\n            y_max = (i % 2 * interval + 0.9) * 10\n            xs = np.random.uniform(x_min, x_max, n_samples)\n            ys = np.random.uniform(y_min, y_max, n_samples)\n            X.extend(list(zip(xs, ys)))\n            Y.extend([label] * n_samples)\n        return (np.round(np.array(X), 4), np.array(Y))\n    (X_train, Y_train) = generate_samples(n_train, (np.arange(m) - 0.5) * 2)\n    (X_val, Y_val) = generate_samples(n_val, (np.arange(m) - 0.5) * 2)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 474, "completion_id": 5, "solution": "import numpy as np\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                   of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n\n    def generate_points(n: int, m: int, interval: float) -> tuple[np.ndarray, np.ndarray]:\n        X = np.zeros((m * n, 2))\n        Y = np.zeros(m * n)\n        for i in range(m):\n            label = (i - 0.5) * 2\n            x = np.random.uniform((i // 2 + 0.1) * 10, (i // 2 + 0.9) * 10, n)\n            y = np.random.uniform((i % 2 * interval + 0.1) * 10, (i % 2 * interval + 0.9) * 10, n)\n            X[i * n:(i + 1) * n, :] = np.column_stack((x, y))\n            Y[i * n:(i + 1) * n] = label\n        return (np.round(X, 4), Y)\n    (X_train, Y_train) = generate_points(n_train, m, interval)\n    (X_val, Y_val) = generate_points(n_val, m, interval)\n    return (X_train, X_val, Y_train, Y_val)\nm = 2\nn_train = 100\nn_val = 50\ninterval = 1\nseed = 42"}
{"task_id": 474, "completion_id": 6, "solution": "import numpy as np\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    np.random.seed(seed)\n\n    def generate_set(n_samples: int, class_index: int, seed=None) -> tuple[np.ndarray, np.ndarray]:\n        if seed is not None:\n            np.random.seed(seed)\n        x_low = int(class_index / 2) + 0.1\n        x_high = int(class_index / 2) + 0.9\n        y_low = class_index % 2 * interval + 0.1\n        y_high = class_index % 2 * interval + 0.9\n        x = np.random.uniform(x_low * 10, x_high * 10, n_samples)\n        y = np.random.uniform(y_low * 10, y_high * 10, n_samples)\n        label = np.full(n_samples, (class_index - 0.5) * 2)\n        return (np.column_stack((x, y)), label)\n    (X_train_list, Y_train_list) = ([], [])\n    (X_val_list, Y_val_list) = ([], [])\n    for i in range(m):\n        (X_t, Y_t) = generate_set(n_train, i)\n        (X_v, Y_v) = generate_set(n_val, i)\n        X_train_list.append(X_t)\n        Y_train_list.append(Y_t)\n        X_val_list.append(X_v)\n        Y_val_list.append(Y_v)\n    X_train = np.vstack(X_train_list).round(4)\n    X_val = np.vstack(X_val_list).round(4)\n    Y_train = np.hstack(Y_train_list)\n    Y_val = np.hstack(Y_val_list)\n    return (X_train, X_val, Y_train, Y_val)\nm = 2\nn_train = 50\nn_val = 10\ninterval = 1"}
{"task_id": 474, "completion_id": 7, "solution": "import numpy as np\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n    \n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n\n    def sample_from_region(n, interval, class_index):\n        x = np.random.uniform((class_index // 2 + 0.1) * 10, (class_index // 2 + 0.9) * 10, n)\n        y = np.random.uniform((class_index % 2 * interval + 0.1) * 10, (class_index % 2 * interval + 0.9) * 10, n)\n        labels = np.full(n, (class_index - 0.5) * 2)\n        return (np.round(np.column_stack((x, y)), decimals=4), labels)\n    (X_train, Y_train, X_val, Y_val) = ([], [], [], [])\n    for i in range(m):\n        (x_train, y_train) = sample_from_region(n_train, interval, i)\n        (x_val, y_val) = sample_from_region(n_val, interval, i)\n        X_train.append(x_train)\n        Y_train.extend(y_train)\n        X_val.append(x_val)\n        Y_val.extend(y_val)\n    (X_train, X_val) = (np.vstack(X_train), np.vstack(X_val))\n    (Y_train, Y_val) = (np.array(Y_train), np.array(Y_val))\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 474, "completion_id": 8, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        (x_low, x_high) = ((i // 2 + 0.1) * 10, (i // 2 + 0.9) * 10)\n        (y_low, y_high) = ((i % 2 * interval + 0.1) * 10, (i % 2 * interval + 0.9) * 10)\n        label = (i - 0.5) * 2\n        x_data = np.random.uniform(x_low, x_high, n_train)\n        y_data = np.random.uniform(y_low, y_high, n_train)\n        X_train.extend(zip(x_data, y_data))\n        Y_train.extend([label] * n_train)\n        x_data = np.random.uniform(x_low, x_high, n_val)\n        y_data = np.random.uniform(y_low, y_high, n_val)\n        X_val.extend(zip(x_data, y_data))\n        Y_val.extend([label] * n_val)\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    Y_train = np.array(Y_train)\n    Y_val = np.array(Y_val)\n    return (X_train, X_val, Y_train, Y_val)\nm = 2\nn_train = 50\nn_val = 50\ninterval = 1\nseed = 42"}
{"task_id": 474, "completion_id": 9, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    (X_train, Y_train, X_val, Y_val) = ([], [], [], [])\n    for i in range(m):\n        label = (i - 0.5) * 2\n        x_train = [round(np.random.uniform((i // 2 + 0.1) * 10, (i // 2 + 0.9) * 10), 4) for _ in range(n_train)]\n        y_train = [round(np.random.uniform((i % 2 * interval + 0.1) * 10, (i % 2 * interval + 0.9) * 10), 4) for _ in range(n_train)]\n        X_train.extend(list(zip(x_train, y_train)))\n        Y_train.extend([label] * n_train)\n        x_val = [round(np.random.uniform((i // 2 + 0.1) * 10, (i // 2 + 0.9) * 10), 4) for _ in range(n_val)]\n        y_val = [round(np.random.uniform((i % 2 * interval + 0.1) * 10, (i % 2 * interval + 0.9) * 10), 4) for _ in range(n_val)]\n        X_val.extend(list(zip(x_val, y_val)))\n        Y_val.extend([label] * n_val)\n    return (np.array(X_train), np.array(X_val), np.array(Y_train), np.array(Y_val))"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if isinstance(m_prev, type(None)):\n        m_prev = np.zeros_like(grad)\n    if isinstance(v_prev, type(None)):\n        v_prev = np.zeros_like(grad)\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * grad ** 2\n    m_t_hat = m_t / (1 - b1 ** t)\n    v_t_hat = v_t / (1 - b2 ** t)\n    w_new = w - learning_rate * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    return (w_new, m_t, v_t)"}
{"task_id": 475, "completion_id": 1, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad, dtype=np.float32)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad, dtype=np.float32)\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * grad ** 2\n    m_t_hat = m_t / (1 - b1 ** t)\n    v_t_hat = v_t / (1 - b2 ** t)\n    w_new = w - learning_rate * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    return (w_new, m_t, v_t)"}
{"task_id": 475, "completion_id": 2, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * grad ** 2\n    m_t_hat = m_t / (1 - b1 ** t)\n    v_t_hat = v_t / (1 - b2 ** t)\n    w_new = w - learning_rate * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    return (w_new, m_t, v_t)"}
{"task_id": 475, "completion_id": 3, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad, dtype=np.float32)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad, dtype=np.float32)\n    m = b1 * m_prev + (1 - b1) * grad\n    v = b2 * v_prev + (1 - b2) * grad ** 2\n    m_corr = m / (1 - b1 ** t)\n    v_corr = v / (1 - b2 ** t)\n    w_new = w - learning_rate * m_corr / (np.sqrt(v_corr) + eps)\n    return (w_new, m, v)"}
{"task_id": 475, "completion_id": 4, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n    \n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n    \n    Returns\n    -------\n    tuple\n        (w_new, m_new, v_new) where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad, dtype=np.float)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad, dtype=np.float)\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * np.square(grad)\n    m_hat = m_t / (1 - b1 ** t)\n    v_hat = v_t / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_t, v_t)"}
{"task_id": 475, "completion_id": 5, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * grad ** 2\n    m_t_hat = m_t / (1 - b1 ** t)\n    v_t_hat = v_t / (1 - b2 ** t)\n    w_new = w - learning_rate * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    return (w_new, m_t, v_t)"}
{"task_id": 475, "completion_id": 6, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n    \n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m = b1 * m_prev + (1 - b1) * grad\n    v = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m / (1 - b1 ** t)\n    v_hat = v / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m, v)"}
{"task_id": 475, "completion_id": 7, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 8, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad, dtype=float)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad, dtype=float)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_corr = m_new / (1 - b1 ** t)\n    v_corr = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_corr / (np.sqrt(v_corr) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 9, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad, dtype=np.float64)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad, dtype=np.float64)\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * grad ** 2\n    m_t_hat = m_t / (1 - b1 ** t)\n    v_t_hat = v_t / (1 - b2 ** t)\n    w_new = w - learning_rate * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    return (w_new, m_t, v_t)"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"\n    Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters:\n    -----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns:\n    --------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    num_arms = len(rewards[0])\n    values = [ev_prior] * num_arms\n    counts = [0] * num_arms\n    for t in range(len(rewards)):\n        if np.random.random() < epsilon:\n            chosen_arm = np.random.randint(num_arms)\n        else:\n            chosen_arm = np.argmax(values)\n        counts[chosen_arm] += 1\n        reward = rewards[t][chosen_arm]\n        counts[chosen_arm] -= 1\n        values[chosen_arm] += (reward - values[chosen_arm]) / (counts[chosen_arm] + 1)\n        counts[chosen_arm] += 1\n    return [round(v, 4) for v in values]\nrewards = [[1, 2, 3], [3, 2, 1], [2, 1, 3]]\nepsilon = 0.1\nev_prior = 1.0\nseed = 42"}
{"task_id": 479, "completion_id": 1, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    num_arms = len(rewards[0])\n    estimated_values = np.full(num_arms, ev_prior)\n    counts = np.zeros(num_arms, dtype=int)\n    for reward in rewards:\n        if np.random.rand() < epsilon:\n            action = np.random.randint(num_arms)\n        else:\n            action = np.argmax(estimated_values)\n        counts[action] += 1\n        estimated_values[action] += (reward[action] - estimated_values[action]) / counts[action]\n    return [round(value, 4) for value in estimated_values.tolist()]"}
{"task_id": 479, "completion_id": 2, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    num_arms = len(rewards[0])\n    estimated_values = [ev_prior] * num_arms\n    pull_counts = [0] * num_arms\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            arm = np.random.randint(num_arms)\n        else:\n            arm = np.argmax(estimated_values)\n        reward = rewards[t][arm]\n        pull_counts[arm] += 1\n        estimated_values[arm] += (reward - estimated_values[arm]) / pull_counts[arm]\n    return [round(v, 4) for v in estimated_values]\nrewards = [[1.0, 0.0, 1.0, 1.0], [0.0, 1.0, 0.0, 1.0], [1.0, 0.0, 1.0, 0.0], [0.0, 1.0, 1.0, 0.0]]"}
{"task_id": 479, "completion_id": 3, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    random_gen = np.random.default_rng(seed)\n    num_arms = len(rewards[0])\n    estimated_values = np.full(num_arms, ev_prior, dtype=np.float64)\n    counts = np.zeros(num_arms, dtype=int)\n    for t in range(len(rewards)):\n        if random_gen.random() < epsilon:\n            chosen_arm = random_gen.integers(num_arms)\n        else:\n            chosen_arm = np.argmax(estimated_values)\n        r = rewards[t][chosen_arm]\n        counts[chosen_arm] += 1\n        estimated_values[chosen_arm] += (r - estimated_values[chosen_arm]) / counts[chosen_arm]\n    return [round(val, 4) for val in estimated_values]\nrewards = [[1.2, 0.6, 0.8, 2.1], [0.9, 1.3, 0.7, 1.8], [1.1, 1.4, 1.9, 2.0]]"}
{"task_id": 479, "completion_id": 4, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    num_arms = len(rewards[0])\n    ev_estimates = np.full(num_arms, ev_prior)\n    pull_counts = np.zeros(num_arms)\n    for reward_row in rewards:\n        if np.random.rand() < epsilon:\n            action = np.random.randint(num_arms)\n        else:\n            max_estimates = np.max(ev_estimates)\n            action = np.argmax(np.isclose(ev_estimates, max_estimates))\n        reward = reward_row[action]\n        pull_counts[action] += 1\n        ev_estimates[action] += (reward - ev_estimates[action]) / pull_counts[action]\n    return [round(val, 4) for val in ev_estimates]\nrewards = [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]"}
{"task_id": 479, "completion_id": 5, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(seed)\n    n_arms = len(rewards[0])\n    estimated_values = [ev_prior] * n_arms\n    counts = [0] * n_arms\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            action = np.random.randint(n_arms)\n        else:\n            action = np.argmax(estimated_values)\n        reward = rewards[t][action]\n        counts[action] += 1\n        estimated_values[action] += (reward - estimated_values[action]) / counts[action]\n    return [round(val, 4) for val in estimated_values]\nrewards = [[1.0, 0.1, 1.2], [1.3, 0.3, 2.1], [1.5, 1.2, 1.3]]"}
{"task_id": 479, "completion_id": 6, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    (T, N) = (len(rewards), len(rewards[0]))\n    values = np.full(N, ev_prior)\n    counts = np.zeros(N)\n    for t in range(T):\n        if np.random.rand() < epsilon:\n            arm = np.random.randint(N)\n        else:\n            arm = np.argmax(values)\n        reward = rewards[t][arm]\n        counts[arm] += 1\n        values[arm] = values[arm] + (reward - values[arm]) / counts[arm]\n    return [round(x, 4) for x in values.tolist()]\nrewards = [[1.0, 0.2, -0.1], [0.5, -1.0, 2.0], [-0.5, 0.1, 0.9], [1.5, -0.1, 1.0], [0.0, 1.0, -2.0]]"}
{"task_id": 479, "completion_id": 7, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    num_arms = len(rewards[0])\n    estimated_values = [ev_prior] * num_arms\n    counts = [0] * num_arms\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.choice(num_arms)\n        else:\n            chosen_arm = estimated_values.index(max(estimated_values))\n        reward = rewards[t][chosen_arm]\n        counts[chosen_arm] += 1\n        estimated_values[chosen_arm] += (reward - estimated_values[chosen_arm]) / counts[chosen_arm]\n    return [round(value, 4) for value in estimated_values]\nrewards = [[1.0, -2.0, 5.0], [0.0, 2.0, 4.0], [3.0, 1.0, -1.0]]\nestimated_values = epsilon_greedy_bandit(rewards, epsilon=0.1, ev_prior=0.5, seed=42)"}
{"task_id": 479, "completion_id": 8, "solution": "import numpy as np\nfrom typing import List, Optional"}
{"task_id": 479, "completion_id": 9, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(seed)\n    n_arms = len(rewards[0])\n    value_estimates = np.full(n_arms, ev_prior)\n    counts = np.zeros(n_arms)\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.randint(n_arms)\n        else:\n            chosen_arm = np.argmax(value_estimates)\n        reward = rewards[t][chosen_arm]\n        counts[chosen_arm] += 1\n        value_estimates[chosen_arm] += (reward - value_estimates[chosen_arm]) / counts[chosen_arm]\n    return [round(x, 4) for x in value_estimates]\nrewards = [[1.0, 0.0, 0.0, 1.0], [1.0, 2.0, 0.0, 1.0], [1.0, 2.0, 3.0, 1.0], [1.0, 2.0, 3.0, 4.0]]"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    num_points = len(data)\n    labels = [-1] * num_points\n    cluster_id = 0\n\n    def region_query(p):\n        \"\"\"Find all the neighboring points of point `p`.\"\"\"\n        neighbors = []\n        for (i, point) in enumerate(data):\n            if np.linalg.norm(data[p] - point) < eps:\n                neighbors.append(i)\n        return neighbors\n\n    def expand_cluster(p, neighbor_points):\n        \"\"\"Expand the cluster starting at point `p`.\"\"\"\n        nonlocal cluster_id\n        labels[p] = cluster_id\n        i = 0\n        while i < len(neighbor_points):\n            point = neighbor_points[i]\n            if labels[point] == -1:\n                labels[point] = cluster_id\n            elif labels[point] == -2:\n                labels[point] = cluster_id\n                neighbors = region_query(point)\n                if len(neighbors) >= min_samples:\n                    neighbor_points = neighbor_points + neighbors\n            i += 1\n    for point in range(num_points):\n        if labels[point] == -1:\n            neighbors = region_query(point)\n            if len(neighbors) < min_samples:\n                continue\n            else:\n                cluster_id += 1\n                expand_cluster(point, neighbors)\n    for i in range(num_points):\n        if labels[i] == -2:\n            labels[i] = -1\n    return labels\ndata = np.array([[1, 1], [0.5, 0.5], [2, 0], [2, 1], [3, 1], [1, -1], [5, 5], [8, 8]])"}
{"task_id": 481, "completion_id": 1, "solution": "import numpy as np\ndef euclidean_distance(point1: np.ndarray, point2: np.ndarray) -> float:\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.linalg.norm(point1 - point2)\ndef region_query(data: np.ndarray, point_index: int, eps: float) -> np.ndarray:\n    \"\"\"Get all points within `eps` distance from the point at `point_index`.\"\"\"\n    neighbors = []\n    for (index, point) in enumerate(data):\n        if euclidean_distance(data[point_index], point) <= eps:\n            neighbors.append(index)\n    return np.array(neighbors)\ndef expand_cluster(data: np.ndarray, labels: np.ndarray, point_index: int, cluster_id: int, eps: float, min_samples: int) -> None:\n    \"\"\"Expand cluster starting from `point_index` and assign `cluster_id`.\"\"\"\n    seeds = region_query(data, point_index, eps)\n    if len(seeds) < min_samples:\n        labels[point_index] = -1\n        return False\n    else:\n        for seed in seeds:\n            labels[seed] = cluster_id\n        seeds = seeds.tolist()\n        while seeds:\n            current_point = seeds.pop(0)\n            new_seeds = region_query(data, current_point, eps)\n            if len(new_seeds) >= min_samples:\n                for new_seed in new_seeds:\n                    if labels[new_seed] == -2:\n                        labels[new_seed] = cluster_id\n                        seeds.append(new_seed)\n                    elif labels[new_seed] == -1:\n                        labels[new_seed] = cluster_id\n        return True\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster `data` with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled -1 and \n        cluster indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    clusters = []\n    labels = np.array([-2] * data.shape[0])\n    cluster_id = 0\n    for point_index in range(data.shape[0]):\n        if labels[point_index] == -2:\n            if expand_cluster(data, labels, point_index, cluster_id, eps, min_samples):\n                cluster_id += 1\n    return labels.tolist()"}
{"task_id": 481, "completion_id": 2, "solution": "import numpy as np\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate and return the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\ndef region_query(data, point_id, eps):\n    \"\"\"Find all points in the dataset within epsilon distance of the given point.\"\"\"\n    neighbors = []\n    for (i, point) in enumerate(data):\n        if euclidean_distance(data[point_id], point) < eps:\n            neighbors.append(i)\n    return neighbors\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    labels = [-1] * data.shape[0]\n    cluster_id = 0\n    for point_id in range(data.shape[0]):\n        if labels[point_id] != -1:\n            continue\n        neighbors = region_query(data, point_id, eps)\n        if len(neighbors) < min_samples:\n            labels[point_id] = -1\n            continue\n        cluster_id += 1\n        labels[point_id] = cluster_id\n        seeds = neighbors[1:]\n        for seed_id in seeds:\n            if labels[seed_id] == -1:\n                labels[seed_id] = cluster_id\n            elif labels[seed_id] != 0:\n                continue\n            neighbor_points = region_query(data, seed_id, eps)\n            if len(neighbor_points) < min_samples:\n                continue\n            for point in neighbor_points:\n                if labels[point] == -1:\n                    labels[point] = cluster_id\n                elif labels[point] != 0:\n                    continue\n    return labels\ndata = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\neps = 3\nmin_samples = 2"}
{"task_id": 481, "completion_id": 3, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\"\"\"\n    if len(data) == 0:\n        return []\n\n    def distance(point1, point2):\n        \"\"\"Euclidean distance between two points.\"\"\"\n        return np.linalg.norm(point1 - point2)\n\n    def region_query(point_index):\n        \"\"\"Find all points within `eps` distance from `point_index`.\"\"\"\n        neighbors = []\n        for i in range(len(data)):\n            if distance(data[point_index], data[i]) < eps:\n                neighbors.append(i)\n        return neighbors\n\n    def expand_cluster(point_index, cluster_id):\n        \"\"\"Expand a cluster from `point_index` with the given `cluster_id`.\"\"\"\n        seeds = region_query(point_index)\n        if len(seeds) < min_samples:\n            labels[point_index] = -1\n            return False\n        else:\n            for seed in seeds:\n                labels[seed] = cluster_id\n                processed.add(seed)\n            seeds_iter = iter(seeds)\n            while seeds_iter:\n                current = next(seeds_iter)\n                new_seeds = region_query(current)\n                if len(new_seeds) >= min_samples:\n                    for seed in new_seeds:\n                        if seed not in processed:\n                            processed.add(seed)\n                            seeds.append(seed)\n                        if labels[seed] == -1:\n                            labels[seed] = cluster_id\n        return True\n    labels = [-1] * len(data)\n    cluster_id = 0\n    processed = set()\n    for point_index in range(len(data)):\n        if point_index not in processed:\n            processed.add(point_index)\n            if expand_cluster(point_index, cluster_id):\n                cluster_id += 1\n    return labels"}
{"task_id": 481, "completion_id": 4, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled -1 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    (n_samples, _) = data.shape\n    labels = [-1] * n_samples\n    cluster_id = 0\n\n    def find_neighbors(point_idx):\n        \"\"\"Find all neighbors of point with *point_idx* index.\"\"\"\n        return set(np.where(np.linalg.norm(data - data[point_idx], axis=1) <= eps)[0])\n    for p in range(n_samples):\n        if labels[p] != -1:\n            continue\n        neighbors = find_neighbors(p)\n        if len(neighbors) < min_samples:\n            continue\n        labels[p] = cluster_id\n        seeds = neighbors - {p}\n        while seeds:\n            q = seeds.pop()\n            if labels[q] == -1:\n                labels[q] = cluster_id\n            if labels[q] == -2:\n                labels[q] = cluster_id\n                q_neighbors = find_neighbors(q)\n                if len(q_neighbors) >= min_samples:\n                    seeds |= q_neighbors\n            elif labels[q] == -1:\n                labels[q] = -2\n        cluster_id += 1\n    for i in range(n_samples):\n        if labels[i] == -2:\n            labels[i] = cluster_id\n            cluster_id += 1\n    return labels"}
{"task_id": 481, "completion_id": 5, "solution": "import numpy as np\ndef euclidean_distance(point1, point2):\n    \"\"\"Compute the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\ndef region_query(data, point_index, eps):\n    \"\"\"Find all points within a distance `eps` of `point_index`.\n\n    Parameters:\n    -----------\n    data : np.ndarray\n        The dataset to query.\n    point_index : int\n        The index of the point to query.\n    eps : float\n        The maximum radius of the neighborhood.\n\n    Returns:\n    --------\n    list\n        A list of indices representing points within a distance of `eps`.\n    \"\"\"\n    neighbors = []\n    for index in range(len(data)):\n        if euclidean_distance(data[point_index], data[index]) <= eps:\n            neighbors.append(index)\n    return neighbors\ndef expand_cluster(data, labels, point_index, cluster_id, eps, min_samples):\n    \"\"\"Expand a cluster from a given `point_index` with a given `cluster_id`.\n\n    Parameters:\n    -----------\n    data : np.ndarray\n        The dataset to work on.\n    labels : list\n        The current labels for each sample in `data`.\n    point_index : int\n        The index of the point to grow the cluster from.\n    cluster_id : int\n        The id of the cluster being expanded.\n    eps : float\n        The maximum radius of the neighborhood.\n    min_samples : int\n        The minimum number of samples required to constitute a cluster.\n\n    Returns:\n    --------\n    bool\n        True if `point_index` newly expanded the cluster, False otherwise.\n    \"\"\"\n    neighbors = region_query(data, point_index, eps)\n    if len(neighbors) < min_samples:\n        labels[point_index] = -1\n        return False\n    else:\n        labels[point_index] = cluster_id\n        for neighbor_index in neighbors:\n            if labels[neighbor_index] == -1:\n                labels[neighbor_index] = cluster_id\n            if labels[neighbor_index] >= 0:\n                continue\n            labels[neighbor_index] = cluster_id\n            new_neighbors = region_query(data, neighbor_index, eps)\n            if len(new_neighbors) >= min_samples:\n                neighbors.extend(new_neighbors)\n        return True\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster `data` with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled -1 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    labels = [-1] * len(data)\n    cluster_id = 0\n    for point_index in range(len(data)):\n        if labels[point_index] == -1:\n            if expand_cluster(data, labels, point_index, cluster_id, eps, min_samples):\n                cluster_id += 1\n    return labels"}
{"task_id": 481, "completion_id": 6, "solution": "import numpy as np\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\ndef region_query(data, point_index, eps):\n    \"\"\"Find all points within the given radius (eps) for a given point.\"\"\"\n    neighbors = []\n    for i in range(len(data)):\n        if euclidean_distance(data[point_index], data[i]) < eps:\n            neighbors.append(i)\n    return neighbors\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    labels = [-1] * len(data)\n    cluster_id = 0\n    for i in range(len(data)):\n        if labels[i] == -1:\n            neighbors = region_query(data, i, eps)\n            if len(neighbors) < min_samples:\n                labels[i] = -2\n            else:\n                expand_cluster(data, labels, cluster_id, i, neighbors, eps, min_samples)\n                cluster_id += 1\n    for i in range(len(data)):\n        if labels[i] == -2:\n            labels[i] = -1\n    return labels"}
{"task_id": 481, "completion_id": 7, "solution": "import numpy as np\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.linalg.norm(point1 - point2)\ndef region_query(data, point_index, eps):\n    \"\"\"Find all points in the dataset within eps of the given point.\"\"\"\n    neighbors = []\n    for (index, point) in enumerate(data):\n        if euclidean_distance(data[point_index], point) < eps:\n            neighbors.append(index)\n    return neighbors\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster data with the DBSCAN algorithm.\n    \n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled -1 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    labels = [-2] * len(data)\n    cluster_id = 0\n    for point_index in range(len(data)):\n        if labels[point_index] != -2:\n            continue\n        neighbors = region_query(data, point_index, eps)\n        if len(neighbors) < min_samples:\n            labels[point_index] = -1\n        else:\n            expand_cluster(data, labels, point_index, neighbors, cluster_id, eps, min_samples)\n            cluster_id += 1\n    return labels"}
{"task_id": 481, "completion_id": 8, "solution": "import numpy as np\ndef euclidean_distance(point1: np.ndarray, point2: np.ndarray) -> float:\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.linalg.norm(point1 - point2)\ndef region_query(data: np.ndarray, point: np.ndarray, eps: float) -> list:\n    \"\"\"Find all points within the eps radius of a given point.\"\"\"\n    neighbors = []\n    for i in range(len(data)):\n        if euclidean_distance(point, data[i]) < eps:\n            neighbors.append(i)\n    return neighbors\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster data with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled -1 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if len(data) == 0:\n        return []\n    visited = [False] * len(data)\n    labels = [-1] * len(data)\n    cluster_id = 0\n    for i in range(len(data)):\n        if not visited[i]:\n            visited[i] = True\n            neighbors = region_query(data, data[i], eps)\n            if len(neighbors) < min_samples:\n                labels[i] = -1\n                continue\n            cluster_id += 1\n            labels[i] = cluster_id\n            seeds = neighbors.copy()\n            seeds.remove(i)\n            for j in seeds:\n                if not visited[j]:\n                    visited[j] = True\n                    new_neighbors = region_query(data, data[j], eps)\n                    if len(new_neighbors) >= min_samples:\n                        seeds.extend([k for k in new_neighbors if k not in seeds])\n                if labels[j] == -1:\n                    labels[j] = cluster_id\n    return labels\neps = 3\nmin_samples = 2"}
{"task_id": 481, "completion_id": 9, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled -1 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    n_points = data.shape[0]\n    cluster_id = 0\n    labels = np.array([-1] * n_points)\n\n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def neighbor_indices(point_idx):\n        return [idx for idx in range(n_points) if euclidean_distance(data[point_idx], data[idx]) < eps]\n\n    def expand_cluster(p, cluster_id):\n        neighbors = neighbor_indices(p)\n        if len(neighbors) < min_samples:\n            return False\n        labels[p] = cluster_id\n        seeds = neighbors[:]\n        seed_index = 0\n        while seed_index < len(seeds):\n            current_seed = seeds[seed_index]\n            if labels[current_seed] == -1:\n                labels[current_seed] = cluster_id\n            elif labels[current_seed] == -2:\n                labels[current_seed] = cluster_id\n                seeds.extend(neighbor_indices(current_seed))\n            seed_index += 1\n        return True\n    for point in range(n_points):\n        if labels[point] == -1:\n            if expand_cluster(point, cluster_id):\n                cluster_id += 1\n    return list(labels)\ndata = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\neps = 3\nmin_samples = 2"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if y.ndim != 1:\n        raise ValueError('Labels must be a flat sequence.')\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.min(y) < 0 or np.max(y) >= num_classes:\n        raise ValueError('Labels contain values less than 0 or equal to/greater than num_classes.')\n    n = y.size\n    categorical = np.zeros((n, num_classes), dtype=int)\n    categorical[np.arange(n), y] = 1\n    return categorical"}
{"task_id": 482, "completion_id": 1, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if y.size == 0:\n        if num_classes is None:\n            raise ValueError('num_classes must be provided when the input is an empty vector')\n        else:\n            return np.zeros((0, num_classes), dtype=int)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.min(y) < 0 or np.max(y) >= num_classes:\n        raise ValueError('y contains labels that are out of the range [0, num_classes-1]')\n    n_samples = len(y)\n    categorical = np.zeros((n_samples, num_classes), dtype=int)\n    categorical[np.arange(n_samples), y] = 1\n    return categorical"}
{"task_id": 482, "completion_id": 2, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    if not isinstance(y, (list, tuple, np.ndarray)):\n        raise ValueError('y must be a list, tuple, or np.ndarray.')\n    y = np.array(y)\n    if y.ndim != 1:\n        raise ValueError('y must be a 1-D array.')\n    if np.any(y < 0):\n        raise ValueError('All labels in y must be non-negative.')\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.any(y >= num_classes):\n        raise ValueError('Labels in y cannot be equal to or greater than num_classes.')\n    one_hot = np.zeros((y.size, num_classes), dtype=int)\n    one_hot[np.arange(y.size), y] = 1\n    return one_hot\ny = [1, 2, 3]"}
{"task_id": 482, "completion_id": 3, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    if not isinstance(y, (list, tuple, np.ndarray)):\n        raise ValueError('y must be a list, tuple, or NumPy array.')\n    if not all((isinstance(x, (int, np.integer)) for x in y)):\n        raise ValueError('All elements in y must be integers.')\n    if np.any(np.array(y) < 0):\n        raise ValueError('All elements in y must be non-negative integers.')\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.any(y >= num_classes):\n        raise ValueError('All elements in y must be less than num_classes.')\n    result = np.zeros((len(y), num_classes), dtype=int)\n    result[np.arange(len(y)), y] = 1\n    return result"}
{"task_id": 482, "completion_id": 4, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n                        tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n                                            If ``None`` (default), the number\n                                            is inferred automatically as\n                                            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n                    and 1s (dtype = int), representing the one-hot encoding of\n                    the input labels.\n    \"\"\"\n    if not isinstance(y, (list, tuple, np.ndarray)):\n        raise ValueError('y must be a list, tuple, or NumPy ndarray')\n    y = np.array(y)\n    if y.ndim != 1:\n        raise ValueError('y must be a 1-dimensional sequence of labels.')\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('Labels must be non-negative and less than num_classes.')\n    result = np.zeros((y.size, num_classes), dtype=int)\n    result[np.arange(y.size), y] = 1\n    return result"}
{"task_id": 482, "completion_id": 5, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if y.min() < 0:\n        raise ValueError('Labels must not contain negative numbers.')\n    elif num_classes is None:\n        num_classes = y.max() + 1\n    if y.max() >= num_classes:\n        raise ValueError('Label must be less than num_classes.')\n    return np.eye(num_classes)[y].astype(int)"}
{"task_id": 482, "completion_id": 6, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    if not isinstance(y, (np.ndarray, list, tuple)):\n        raise TypeError('y must be list, tuple, or np.ndarray')\n    y = np.array(y)\n    if not np.issubdtype(y.dtype, np.integer):\n        raise ValueError('All elements of y must be integers')\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('y contains labels not consistent with num_classes')\n    result = np.zeros((len(y), num_classes), dtype=int)\n    result[np.arange(len(y)), y] = 1\n    return result"}
{"task_id": 482, "completion_id": 7, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.min(y) < 0 or np.max(y) >= num_classes:\n        raise ValueError('y contains values incompatible with num_classes')\n    n = len(y)\n    categorical = np.zeros((n, num_classes), dtype=int)\n    categorical[np.arange(n), y] = 1\n    return categorical"}
{"task_id": 482, "completion_id": 8, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('Labels must be non-negative and less than num_classes.')\n    categorical = np.zeros((len(y), num_classes), dtype=int)\n    categorical[np.arange(len(y)), y] = 1\n    return categorical"}
{"task_id": 482, "completion_id": 9, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif np.min(y) < 0 or np.max(y) >= num_classes:\n        raise ValueError('Labels must be within the range of [0, num_classes - 1] if num_classes is specified.')\n    one_hot = np.zeros((y.size, num_classes), dtype=int)\n    one_hot[np.arange(y.size), y] = 1\n    return one_hot"}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def sse_split_score(X, y, split):\n        \"\"\"Compute the SSE for a split.\"\"\"\n        mask_left = X <= split\n        mask_right = X > split\n        sse_left = np.sum((y[mask_left] - np.mean(y[mask_left])) ** 2) if np.any(mask_left) else 0\n        sse_right = np.sum((y[mask_right] - np.mean(y[mask_right])) ** 2) if np.any(mask_right) else 0\n        return sse_left + sse_right\n\n    def build_tree(X, y, depth=0):\n        if len(X) < 2 or depth == max_depth:\n            return np.mean(y)\n        best_score = float('inf')\n        for split in np.unique(X):\n            score = sse_split_score(X, y, split)\n            if score < best_score:\n                (best_score, best_split) = (score, split)\n        mask_left = X <= best_split\n        mask_right = X > best_split\n        left_tree = build_tree(X[mask_left], y[mask_left], depth + 1)\n        right_tree = build_tree(X[mask_right], y[mask_right], depth + 1)\n        return {'split': best_split, 'left': left_tree, 'right': right_tree}\n\n    def predict(x, node):\n        if isinstance(node, np.float64):\n            return node\n        if x <= node['split']:\n            return predict(x, node['left'])\n        else:\n            return predict(x, node['right'])\n    if not X_train:\n        return []\n    tree = build_tree(np.array(X_train), np.array(y_train))\n    return [predict(x, tree) for x in X_test]\nX_train = [2, 5, 4, 3, 1]\ny_train = [10, 20, 15, 12, 4]\nX_test = [1.5, 2.5, 5, 6]"}
{"task_id": 485, "completion_id": 1, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def build_tree(depth=0):\n        if depth == max_depth or len(y_train) < 2:\n            return np.mean(y_train)\n        best_split = None\n        best_sse = float('inf')\n        for index in range(1, len(X_train)):\n            left_sse = np.var(y_train[:index]) * index\n            right_sse = np.var(y_train[index:]) * (len(y_train) - index)\n            sse = left_sse + right_sse\n            if sse < best_sse:\n                best_sse = sse\n                best_split = (X_train[index - 1] + X_train[index]) / 2.0\n        if best_split:\n            left_mask = X_train <= best_split\n            right_mask = X_train > best_split\n            return {'split': best_split, 'left': build_tree(depth + 1), 'right': build_tree(depth + 1)}\n        return np.mean(y_train)\n\n    def predict(x):\n        node = tree\n        while isinstance(node, dict):\n            if x <= node['split']:\n                node = node['left']\n            else:\n                node = node['right']\n        return node\n    if not X_train or not y_train:\n        return []\n    data = sorted(zip(X_train, y_train), key=lambda x: x[0])\n    (X_train, y_train) = zip(*data)\n    X_train = list(X_train)\n    y_train = list(y_train)\n    tree = build_tree()\n    y_test_pred = [predict(x) for x in X_test]\n    return y_test_pred"}
{"task_id": 485, "completion_id": 2, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if not X_train:\n        return []\n\n    class DecisionNode:\n\n        def __init__(self, depth, uncertainty):\n            self.split = None\n            self.left = None\n            self.right = None\n            self.depth = depth\n            self.uncertainty = uncertainty\n            self.prediction = None\n\n    def fit(X, y, depth=0, max_depth=max_depth):\n        if depth == max_depth or len(X) < 2:\n            node = DecisionNode(depth, 0)\n            node.prediction = np.mean(y)\n            return node\n        best_split = None\n        best_sse = float('inf')\n        for i in range(len(X) - 1):\n            split_val = (X[i] + X[i + 1]) / 2\n            y_left = [y[j] for j in range(len(X)) if X[j] <= split_val]\n            y_right = [y[j] for j in range(len(X)) if X[j] > split_val]\n            sse = np.sum((y_left - np.mean(y_left)) ** 2) + np.sum((y_right - np.mean(y_right)) ** 2)\n            if sse < best_sse:\n                best_sse = sse\n                best_split = split_val\n        node = DecisionNode(depth, best_sse)\n        node.split = best_split\n        left_mask = [x <= best_split for x in X]\n        right_mask = [x > best_split for x in X]\n        node.left = fit(np.array(X)[left_mask].tolist(), np.array(y)[left_mask].tolist(), depth + 1, max_depth)\n        node.right = fit(np.array(X)[right_mask].tolist(), np.array(y)[right_mask].tolist(), depth + 1, max_depth)\n        return node\n\n    def predict(node, x):\n        if node.prediction is not None:\n            return node.prediction\n        if x <= node.split:\n            return predict(node.left, x)\n        else:\n            return predict(node.right, x)\n    model = fit(X_train, y_train)\n    return [predict(model, x) for x in X_test]\nX_train = [1, 2, 3, 4, 5]\ny_train = [1.1, 1.9, 3.05, 3.95, 5.1]\nX_test = [0, 1.5, 3.5, 5]"}
{"task_id": 485, "completion_id": 3, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if len(X_train) == 0:\n        return []\n\n    def find_best_split(X, y, depth):\n        best_split = None\n        best_sse = np.inf\n        for i in range(len(X) - 1):\n            split_point = (X[i] + X[i + 1]) / 2\n            left_idxs = [i for i in range(len(X)) if X[i] <= split_point]\n            right_idxs = [i for i in range(len(X)) if X[i] > split_point]\n            left_sse = np.sum((np.array(y)[left_idxs] - np.mean(y[left_idxs])) ** 2) if left_idxs else 0\n            right_sse = np.sum((np.array(y)[right_idxs] - np.mean(y[right_idxs])) ** 2) if right_idxs else 0\n            total_sse = left_sse + right_sse\n            if total_sse < best_sse:\n                best_sse = total_sse\n                best_split = (split_point, left_idxs, right_idxs)\n        return (best_split, best_sse)\n\n    def build_tree(X, y, depth=0):\n        if depth == max_depth or len(X) < 2:\n            return np.mean(y)\n        (best_split, _) = find_best_split(X, y, depth)\n        if best_split is None:\n            return np.mean(y)\n        (split_point, left_idxs, right_idxs) = best_split\n        left_tree = build_tree([X[i] for i in left_idxs], [y[i] for i in left_idxs], depth + 1)\n        right_tree = build_tree([X[i] for i in right_idxs], [y[i] for i in right_idxs], depth + 1)\n        return (split_point, left_tree, right_tree)\n\n    def predict_single(test_value, tree):\n        if isinstance(tree, float):\n            return tree\n        (split_point, left_tree, right_tree) = tree\n        if test_value <= split_point:\n            return predict_single(test_value, left_tree)\n        else:\n            return predict_single(test_value, right_tree)\n    X_train_sorted_idx = np.argsort(X_train)\n    X_sorted = np.array(X_train)[X_train_sorted_idx]\n    y_sorted = np.array(y_train)[X_train_sorted_idx]\n    tree = build_tree(X_sorted, y_sorted)\n    predictions = [predict_single(x, tree) for x in X_test]\n    return predictions"}
{"task_id": 485, "completion_id": 4, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if not X_train or not y_train:\n        return []\n    if len(X_train) != len(y_train):\n        raise ValueError('X_train and y_train must be of the same length.')\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    def build_tree(X, y, depth):\n        if depth >= max_depth or len(X) < 2:\n            return np.mean(y)\n        best_sse = float('inf')\n        best_split = None\n        for i in range(1, len(X)):\n            split_point = X[i]\n            if np.all(X[:i] <= split_point) and np.all(X[i:] > split_point):\n                left_y = y[:i]\n                right_y = y[i:]\n                left_sse = np.sum((left_y - np.mean(left_y)) ** 2)\n                right_sse = np.sum((right_y - np.mean(right_y)) ** 2)\n                current_sse = left_sse + right_sse\n                if current_sse < best_sse:\n                    best_sse = current_sse\n                    best_split = (split_point, i)\n        if best_split is not None:\n            (split_point, idx) = best_split\n            left_tree = build_tree(X[:idx], y[:idx], depth + 1)\n            right_tree = build_tree(X[idx:], y[idx:], depth + 1)\n            return (split_point, left_tree, right_tree)\n        else:\n            return np.mean(y)\n    tree = build_tree(X_train, y_train, 0)\n\n    def predict_tree(x, tree):\n        if isinstance(tree, float):\n            return tree\n        (split_point, left_tree, right_tree) = tree\n        if x <= split_point:\n            return predict_tree(x, left_tree)\n        else:\n            return predict_tree(x, right_tree)\n    predictions = [predict_tree(x, tree) for x in X_test]\n    return predictions"}
{"task_id": 485, "completion_id": 5, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def squared_error(y):\n        mean_y = np.mean(y)\n        return np.sum((y - mean_y) ** 2)\n\n    def best_split(X, y):\n        best_sse = float('inf')\n        best.split = None\n        for i in range(1, len(X)):\n            (left_y, right_y) = (y[:i], y[i:])\n            current_sse = squared_error(left_y) + squared_error(right_y)\n            if current_sse < best_sse:\n                best_sse = current_sse\n                best_split = (X[i - 1], X[i])\n        return (best_split, best_sse)\n\n    def build_tree(X, y, depth):\n        if len(X) < 2 or depth == max_depth:\n            return np.mean(y)\n        (split, _) = best_split(X, y)\n        left_mask = X <= split\n        right_mask = X > split\n        return {'split': split, 'left': build_tree(X[left_mask], y[left_mask], depth + 1), 'right': build_tree(X[~left_mask], y[~left_mask], depth + 1)}\n\n    def predict_point(tree, x):\n        if isinstance(tree, (int, float)):\n            return tree\n        if x <= tree['split']:\n            return predict_point(tree['left'], x)\n        else:\n            return predict_point(tree['right'], x)\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n    sorted_indices = np.argsort(X_train_np)\n    X_train_np = X_train_np[sorted_indices]\n    y_train_np = y_train_np[sorted_indices]\n    tree = build_tree(X_train_np, y_train_np, 0)\n    predictions = [predict_point(tree, x) for x in X_test_np]\n    return predictions"}
{"task_id": 485, "completion_id": 6, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def build_tree(X, y, depth=0):\n        n_samples = len(X)\n        if depth == max_depth or n_samples < 2:\n            return np.mean(y)\n        best_sse = float('inf')\n        best_split = None\n        for i in range(n_samples):\n            left_indices = [j for j in range(n_samples) if X[j] <= X[i]]\n            right_indices = [j for j in range(n_samples) if X[j] > X[i]]\n            if len(left_indices) == 0 or len(right_indices) == 0:\n                continue\n            left_y = [y[j] for j in left_indices]\n            right_y = [y[j] for j in right_indices]\n            mean_left = np.mean(left_y)\n            mean_right = np.mean(right_y)\n            sse_left = sum(((yi - mean_left) ** 2 for yi in left_y))\n            sse_right = sum(((yi - mean_right) ** 2 for yi in right_y))\n            sse = sse_left + sse_right\n            if sse < best_sse:\n                best_sse = sse\n                best_split = (i, (mean_left, mean_right), left_indices, right_indices)\n        if best_split is None:\n            return np.mean(y)\n        (idx_split, _, left_idx, right_idx) = best_split\n        left_tree = build_tree([X[i] for i in left_idx], [y[i] for i in left_idx], depth + 1)\n        right_tree = build_tree([X[i] for i in right_idx], [y[i] for i in right_idx], depth + 1)\n        return (X[idx_split], left_tree, right_tree)\n\n    def predict(tree, x):\n        if isinstance(tree, float):\n            return tree\n        else:\n            (split_value, left, right) = tree\n            if x <= split_value:\n                return predict(left, x)\n            else:\n                return predict(right, x)\n    tree = build_tree(X_train, y_train)\n    predictions = [predict(tree, x) for x in X_test]\n    return predictions"}
{"task_id": 485, "completion_id": 7, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if not X_train:\n        return []\n\n    def build_tree(X, y, depth=0):\n        n_samples = len(X)\n        if depth >= max_depth or n_samples < 2:\n            return np.mean(y)\n        min_sse = float('inf')\n        split_feature_idx = -1\n        split_value = None\n        for i in range(n_samples - 1):\n            val = (X[i] + X[i + 1]) / 2.0\n            (left_y, right_y) = (y[:i + 1], y[i + 1:])\n            sse_left = np.sum((left_y - np.mean(left_y)) ** 2)\n            sse_right = np.sum((right_y - np.mean(right_y)) ** 2)\n            sse = sse_left + sse_right\n            if sse < min_sse:\n                min_sse = sse\n                split_feature_idx = i\n                split_value = val\n        if split_value is not None:\n            (X_left, y_left) = (X[:split_feature_idx + 1], y[:split_feature_idx + 1])\n            (X_right, y_right) = (X[split_feature_idx + 1:], y[split_feature_idx + 1:])\n            return (build_tree(X_left, y_left, depth + 1), split_value, build_tree(X_right, y_right, depth + 1))\n        else:\n            return np.mean(y)\n    sorted_indices = np.argsort(X_train)\n    X_train_sorted = np.array(X_train)[sorted_indices]\n    y_train_sorted = np.array(y_train)[sorted_indices]\n    tree = build_tree(X_train_sorted, y_train_sorted)\n\n    def predict_single(node, x):\n        if isinstance(node, float):\n            return node\n        else:\n            (left_subtree, split_val, right_subtree) = node\n            if x <= split_val:\n                return predict_single(left_subtree, x)\n            else:\n                return predict_single(right_subtree, x)\n    predictions = [predict_single(tree, x) for x in X_test]\n    return predictions\nX_train = [1, 2, 3, 4, 5]\ny_train = [1, 4, 3, 2, 5]\nX_test = [2, 4, 6]"}
{"task_id": 485, "completion_id": 8, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if not X_train or not y_train:\n        return []\n\n    class Node:\n\n        def __init__(self, depth, split_point=None, prediction=None, left=None, right=None):\n            self.depth = depth\n            self.split_point = split_point\n            self.prediction = prediction\n            self.left = left\n            self.right = right\n\n    def build_tree(X, y, depth):\n        if depth == max_depth or len(X) < 2:\n            return Node(depth, prediction=np.mean(y))\n        best_sse = float('inf')\n        split_point = None\n        for mid in range(1, len(X)):\n            if X[mid - 1] != X[mid]:\n                curr_sse = (y[:mid] - np.mean(y[:mid])).dot(y[:mid] - np.mean(y[:mid])) + (y[mid:] - np.mean(y[mid:])).dot(y[mid:] - np.mean(y[mid:]))\n                if curr_sse < best_sse:\n                    best_sse = curr_sse\n                    split_point = X[mid]\n        if split_point is None:\n            return Node(depth, prediction=np.mean(y))\n        left_mask = X <= split_point\n        right_mask = X > split_point\n        left_branch = build_tree(X[left_mask], y[left_mask], depth + 1)\n        right_branch = build_tree(X[right_mask], y[right_mask], depth + 1)\n        return Node(depth, split_point, left=left_branch, right=right_branch)\n\n    def predict(node, x):\n        if node.prediction is not None:\n            return node.prediction\n        if node.split_point is None:\n            return np.mean(y_train)\n        if x <= node.split_point:\n            return predict(node.left, x)\n        else:\n            return predict(node.right, x)\n    X = np.array(X_train)\n    y = np.array(y_train)\n    X_test = np.array(X_test)\n    sorted_indices = X.argsort(kind='mergesort')\n    X = X[sorted_indices]\n    y = y[sorted_indices]\n    root = build_tree(X, y, 0)\n    predictions = [predict(root, x) for x in X_test]\n    return predictions"}
{"task_id": 485, "completion_id": 9, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def calculate_sse(y):\n        y_mean = np.mean(y)\n        sse = np.sum((y - y_mean) ** 2)\n        return sse\n\n    class Node:\n\n        def __init__(self, depth, X, y):\n            self.depth = depth\n            self.X = X\n            self.y = y\n            self.split_val = None\n            self.left = None\n            self.right = None\n            self.leaf_value = None\n\n        def is_leaf(self):\n            return self.leaf_value is not None\n\n        def build_tree(self):\n            if self.depth == max_depth or len(self.X) < 2:\n                self.leaf_value = np.mean(self.y)\n                return\n            best_sse = float('inf')\n            n_samples = len(self.X)\n            for split_idx in range(1, n_samples):\n                if self.X[split_idx] != self.X[split_idx - 1]:\n                    left_X = self.X[:split_idx]\n                    right_X = self.X[split_idx:]\n                    left_y = self.y[:split_idx]\n                    right_y = self.y[split_idx:]\n                    sse = calculate_sse(left_y) + calculate_sse(right_y)\n                    if sse < best_sse:\n                        best_sse = sse\n                        self.split_val = (self.X[split_idx - 1] + self.X[split_idx]) / 2\n                        self.left = Node(self.depth + 1, left_X, left_y)\n                        self.right = Node(self.depth + 1, right_X, right_y)\n            if self.split_val is not None:\n                self.left.build_tree()\n                self.right.build_tree()\n            else:\n                self.leaf_value = np.mean(self.y)\n\n        def predict(self, x):\n            if self.is_leaf():\n                return self.leaf_value\n            if x <= self.split_val:\n                return self.left.predict(x)\n            else:\n                return self.right.predict(x)\n    sorted_idx = np.argsort(X_train)\n    X_train_sorted = np.array(X_train)[sorted_idx]\n    y_train_sorted = np.array(y_train)[sorted_idx]\n    root = Node(0, X_train_sorted, y_train_sorted)\n    root.build_tree()\n    predictions = [root.predict(x) for x in X_test]\n    return predictions"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    input_np = np.array(x)\n    diagonal_mat_np = np.diag(input_np)\n    return diagonal_mat_np.tolist()"}
{"task_id": 490, "completion_id": 1, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    diag_matrix = np.diag(x)\n    return diag_matrix.tolist()"}
{"task_id": 490, "completion_id": 2, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if isinstance(x, (list, tuple)):\n        x = np.array(x)\n    if x.size == 0:\n        return []\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 490, "completion_id": 3, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n    \n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n    \n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if isinstance(x, (list, tuple)):\n        x = np.array(x)\n    elif not isinstance(x, np.ndarray) or x.ndim != 1:\n        raise ValueError('Input must be a one-dimensional list, tuple, or NumPy array.')\n    if not x.size:\n        return []\n    diag_matrix = np.diag(x)\n    return diag_matrix.tolist()"}
{"task_id": 490, "completion_id": 4, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if len(x) == 0:\n        return []\n    if isinstance(x, (list, tuple)):\n        x = np.array(x)\n    diag_matrix = np.diag(x)\n    return diag_matrix.tolist()"}
{"task_id": 490, "completion_id": 5, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if isinstance(x, (list, tuple)):\n        x = np.array(x)\n    elif isinstance(x, np.ndarray) and x.ndim != 1:\n        raise ValueError('Input must be a one-dimensional structure.')\n    if x.size == 0:\n        return []\n    diag_matrix = np.diag(x)\n    return diag_matrix.tolist()"}
{"task_id": 490, "completion_id": 6, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if isinstance(x, list) or isinstance(x, tuple) or isinstance(x, np.ndarray):\n        np_array = np.array(x)\n        if np_array.size == 0:\n            return []\n        diagonal_matrix = np.diag(np_array)\n        return diagonal_matrix.tolist()"}
{"task_id": 490, "completion_id": 7, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    vector = np.array(x)\n    diagonal_matrix = np.diag(vector).tolist()\n    return diagonal_matrix\nvector = [1, 2, 3]"}
{"task_id": 490, "completion_id": 8, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if len(x) == 0:\n        return []\n    arr = np.array(x)\n    diagonal_matrix = np.diag(arr)\n    return diagonal_matrix.tolist()"}
{"task_id": 490, "completion_id": 9, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    if isinstance(x, (list, tuple)):\n        x = np.array(x)\n    diagonal_matrix = np.diag(x).tolist()\n    return diagonal_matrix"}
{"task_id": 491, "completion_id": 0, "solution": "from collections import Counter, deque\nfrom itertools import chain\nfrom typing import Iterable, Hashable, List, Tuple, Dict\ndef fp_growth(transactions: Iterable[Iterable[Hashable]], min_sup: int) -> List[Tuple]:\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\"\"\"\n\n    def create_fptree(transactions: Iterable[Iterable[Hashable]], header_table: Dict[Hashable, int]) -> Dict:\n        tree = {}\n        for transaction in transactions:\n            current = tree\n            for item in transaction:\n                if item not in header_table:\n                    continue\n                if item not in current:\n                    current[item] = {}\n                current = current[item]\n                if 'num' in current:\n                    current['num'] += 1\n                else:\n                    current['num'] = 1\n        return tree\n\n    def create_conditional_pattern_base(tree: Dict, node: Hashable, header_table: Dict[Hashable, int]) -> List[Tuple]:\n        base = []\n        for path in find_paths(tree, node):\n            path_item = {k: path[k]['num'] for k in path if k != 'num'}\n            if any((path_item[k] >= min_sup for k in path_item.keys())):\n                path_list = [(k, path_item[k]) for k in path_item.keys()]\n                path_list.sort(key=lambda x: (header_table[x[0]], x[1]), reverse=True)\n                path_list = [x[0] for x in path_list]\n                base.append(path_list)\n        return base\n\n    def find_paths(tree: Dict, node: Hashable) -> List[Dict]:\n        stack = deque([[tree, []]])\n        paths = []\n        while stack:\n            path = []\n            (current, path) = stack.pop()\n            for (k, v) in current.items():\n                p = path + [k]\n                if k == node:\n                    paths.append({k: v for (k, v) in zip(p[1:], p[1:]) if k != 'num'})\n                else:\n                    stack.append([v, p])\n        return paths\n\n    def create_conditional_tree(tree: Dict, header_table: Dict) -> Dict:\n        trees = []\n        for item in set(header_table.keys()):\n            new_tree = create_fptree(create_conditional_pattern_base(tree, item, header_table), header_table)\n            if new_tree:\n                trees.append(new_tree)\n        return trees\n\n    def mine_frequent_itemsets(tree: Dict, pre_item: Tuple, min_sup: int, itemsets_counts: Dict) -> Dict:\n        if not tree:\n            return {pre_item: itemsets_counts.get(pre_item, 0)}\n        if len(tree) == 1:\n            for item in tree:\n                if item == 'num':\n                    continue\n                pre_item += (item,)\n                itemsets_counts[pre_item] = max(tree[item].get('num', 0), itemsets_counts.get(pre_item, 0))\n                mine_frequent_itemsets(tree[item], pre_item, min_sup, itemsets_counts)\n        else:\n            for item in tree:\n                new_pre_item = pre_item + (item,)\n                itemsets_counts[new_pre_item] = max(tree[item].get('num', 0), itemsets_counts.get(new_pre_item, 0))\n                mine_frequent_itemsets(tree[item], new_pre_item, min_sup, itemsets_counts)\n        return {k: v for (k, v) in itemsets_counts.items() if v >= min_sup}\n    frequency = Counter(chain.from_iterable(transactions))\n    header_table = {k: v for (k, v) in frequency.items() if v >= min_sup}\n    sorted_items = sorted(header_table.keys(), key=lambda x: header_table[x], reverse=True)\n    map_transactions = [[item for item in t if item in sorted_items] for t in transactions]\n    tree = create_fptree(map_transactions, header_table)\n    itemsets_counts = mine_frequent_itemsets(tree, tuple(), min_sup, {})\n    itemsets = sorted([(k, v) for (k, v) in itemsets_counts.items() if v >= min_sup], key=lambda x: (len(x[0]), x[0]))\n    return [i for (i, _) in itemsets]\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3"}
{"task_id": 491, "completion_id": 1, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n\n    def update_tree(tree, header, trans, prefix_path):\n        if not trans:\n            return\n        (item, count) = trans[0]\n        if item in tree.children:\n            tree.children[item].inc(count)\n        else:\n            tree.children[item] = FPNode(item, count, tree)\n            if header[item][1]:\n                header[item][1].add_suffix_link(tree.children[item])\n            else:\n                header[item][1] = tree.children[item]\n        if len(trans) > 1:\n            update_tree(tree.children[item], header, trans[1:], prefix_path + [item])\n\n    class FPNode:\n        \"\"\"Represents a node in an FP-Tree.\"\"\"\n\n        def __init__(self, item, count, parent):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.children = {}\n            self.suffix_link = None\n\n        def inc(self, count):\n            \"\"\"Increment the count of this node by a given count.\"\"\"\n            self.count += count\n\n        def add_suffix_link(self, target):\n            \"\"\"Add a suffix link to the target node.\"\"\"\n            self.suffix_link = target\n\n        def get_prefix_paths(self, item):\n            \"\"\"Get the prefix paths for a given item.\"\"\"\n            prefix_paths = []\n            current = self\n            path = []\n            while current.item:\n                path.append(current.item)\n                current = current.suffix_link\n            if path:\n                prefix_paths.append((tuple(reversed(path)), self.count))\n            for child in self.children.values():\n                prefix_paths.extend(child.get_prefix_paths(item))\n            return prefix_paths\n\n        def cond_tree(self, header, min_sup):\n            \"\"\"Create the conditional FP-tree for this node.\"\"\"\n            tree = FPNode(None, 1, None)\n            for (prefix, count) in self.get_prefix_paths(self.item):\n                if len(prefix) < min_sup:\n                    continue\n                update_tree(tree, header, list(zip(prefix, [count] * len(prefix))), [])\n            return tree\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_sup}\n    sorted_items = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n    ordered_transactions = [[item for item in transaction if item in frequent_items] for transaction in transactions]\n    header_table = defaultdict(lambda : [0, None])\n    root = FPNode(None, 1, None)\n    for transaction in ordered_transactions:\n        counter = Counter(transaction)\n        update_tree(root, header_table, [(item, counter[item]) for item in sorted_items if item in counter], [])\n\n    def mine_tree(tree, header, prefix, frequent_itemsets):\n        for (item, count_data) in sorted(header.items(), key=lambda x: (len(x[1][1].get_prefix_paths(x[0])), x[0])):\n            new_frequent = prefix.copy()\n            new_frequent.add(item)\n            frequent_itemsets.append(tuple(sorted(new_frequent)))\n            cond_tree = tree.cond_tree(header, min_sup)\n            if cond_tree.children:\n                mine_tree(cond_tree, cond_tree_cond_header(cond_tree), new_frequent, frequent_itemsets)\n\n    def cond_header(tree):\n        \"\"\"Generate the header table for a conditional tree.\"\"\"\n        cond_header_table = defaultdict(list)\n        for child_node in tree.children.values():\n            for suffix in child_node.get_prefix_paths(child_node.item):\n                item = suffix[0][0]\n                cond_header_table[item].append(suffix)\n        return cond_header_table\n    frequent_itemsets = []\n    header = {item: count_data for (item, count_data) in header_table.items() if count_data[0] >= min_sup}\n    mine_tree(root, header, set(), frequent_itemsets)\n    frequent_itemsets.sort()\n    return frequent_itemsets"}
{"task_id": 491, "completion_id": 2, "solution": "from collections import Counter, defaultdict\nimport itertools\nclass TreeNode:\n\n    def __init__(self, node_name, count, parent):\n        self.name = node_name\n        self.count = count\n        self.parent = parent\n        self.children = defaultdict(TreeNode)\n        self.link = None\n\n    def inc(self, count):\n        self.count += count\ndef create_fp_tree(transactions, min_sup):\n    header_table = defaultdict(int)\n    for items in transactions:\n        for item in items:\n            header_table[item] += 1\n    header_table = {k: v for (k, v) in header_table.items() if v >= min_sup}\n    sorted_items = sorted(header_table.items(), key=lambda x: (-x[1], x[0]))\n    header_table = {item: count for (item, count) in sorted_items}\n    if not header_table:\n        return (None, None)\n    fp_tree = TreeNode('Null', 1, None)\n    for items in transactions:\n        items = [item for item in items if item in header_table]\n        items.sort(key=lambda x: header_table[x], reverse=True)\n        if items:\n            update_tree(items, fp_tree, header_table)\n    return (fp_tree, header_table)\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    transactions = [sorted(list(set(items)), key=lambda x: items.index(x)) for items in transactions]\n    (fp_tree, header_table) = create_fp_tree(transactions, min_sup)\n    if not header_table:\n        return []\n    frequent_items = []\n    mine_tree(header_table, min_sup, set(), frequent_items)\n    return sorted(frequent_items, key=lambda x: (len(x), x))"}
{"task_id": 491, "completion_id": 3, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = dict(filter(lambda x: x[1] >= min_sup, item_counts.items()))\n    filtered_transactions = []\n    for transaction in transactions:\n        sorted_transaction = sorted((item for item in transaction if item in frequent_items), key=lambda x: (-item_counts[x], x))\n        filtered_transactions.append(sorted_transaction)\n    root = FPNode(None, 0, None)\n    for transaction in filtered_transactions:\n        root.insert(transaction)\n    freq_itemsets = defaultdict(int)\n    mine_tree(root, frequent_items.keys(), freq_itemsets, [])\n    frequent_itemsets = sorted(list(freq_itemsets.keys()), key=lambda x: (len(x), x))\n    return frequent_itemsets\nclass FPNode:\n\n    def __init__(self, item, count, parent):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.link = None\n\n    def insert(self, transaction):\n        if transaction:\n            item = transaction[0]\n            if item in self.children:\n                self.children[item].count += 1\n            else:\n                child = FPNode(item, 1, self)\n                self.children[item] = child\n                if self.item is not None:\n                    node = self.item\n                    while node.link is not None:\n                        node = node.link\n                    node.link = child\n            self.children[item].insert(transaction[1:])\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3"}
{"task_id": 491, "completion_id": 4, "solution": "from collections import Counter, defaultdict\nimport itertools\nclass TreeNode:\n\n    def __init__(self, name, count, parent):\n        self.name = name\n        self.count = count\n        self.parent = parent\n        self.next = None\n        self.children = {}\n\n    def inc(self, count=1):\n        self.count += count\n\n    def display(self, ind=1):\n        print(' ' * ind, self.name, ' ', self.count)\n        for child in self.children.values():\n            child.display(ind + 1)\ndef create_FP_tree(transactions, min_sup):\n    header_table = {}\n    for transaction in transactions:\n        for item in transaction:\n            header_table[item] = header_table.get(item, 0) + 1\n    for k in list(header_table.keys()):\n        if header_table[k] < min_sup:\n            del header_table[k]\n    freq_item_set = set(header_table.keys())\n    if len(freq_item_set) == 0:\n        return (None, None)\n    for k in header_table:\n        header_table[k] = [header_table[k], None]\n    ret_tree = TreeNode('Null Set', 1, None)\n    for transaction in transactions:\n        local_data = {}\n        for item in transaction:\n            if item in freq_item_set:\n                local_data[item] = header_table[item][0]\n        if len(local_data) > 0:\n            ordered_items = [v[0] for v in sorted(local_data.items(), key=lambda p: p[1], reverse=True)]\n            update_tree(ordered_items, ret_tree, header_table)\n    return (ret_tree, header_table)\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    (fp_tree, header_table) = create_FP_tree(transactions, min_sup)\n    if fp_tree is None:\n        return []\n    freq_items = set()\n    mine_tree(fp_tree, header_table, min_sup, set(), freq_items)\n    result = sorted(list(map(tuple, freq_items)))\n    return sorted(result, key=lambda x: (len(x), x))"}
{"task_id": 491, "completion_id": 5, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef create_fp_tree(transactions, min_sup):\n    \"\"\"Create the FP-tree and header table from the given transactions.\"\"\"\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    frequent = {item: count for (item, count) in item_counts.items() if count >= min_sup}\n    filtered_transactions = [[item for item in transaction if item in frequent] for transaction in transactions]\n    for transaction in filtered_transactions:\n        transaction.sort(key=lambda item: frequent[item], reverse=True)\n    tree = FPNode(None, None)\n    headers = defaultdict(list)\n    for transaction in filtered_transactions:\n        update_tree(tree, transaction, headers)\n    return (tree, headers)\nclass FPNode:\n\n    def __init__(self, item, parent):\n        self.item = item\n        self.parent = parent\n        self.children = []\n        self.count = 0\n        self.transaction_ids = set()\n\n    def increase_count(self):\n        self.count += 1\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\"\"\"\n    (tree, headers) = create_fp_tree(transactions, min_sup)\n    frequent_items = extract_items(headers, min_sup, tree, None)\n    return sorted((sorted(item_set) for item_set in frequent_items))\ndef extract_items(headers, min_sup, tree, prefix):\n    \"\"\"Recursively extract frequent item-sets from the FP-tree.\"\"\"\n    headers = sorted(headers.items())\n    frequent_items = []\n    for (item, nodes) in headers:\n        support = sum((node.count for node in nodes))\n        new_prefix = tuple(sorted(prefix + (item,) if prefix else (item,)))\n        frequent_items.append(new_prefix)\n        conditional_tree_input = []\n        for node in nodes:\n            path = []\n            get_prefix_path(node, path)\n            if path:\n                path = [item for (item, count) in path]\n                conditional_tree_input.append((path, node.count))\n        if conditional_tree_input:\n            (conditional_tree, conditional_headers) = create_fp_tree(conditional_tree_input, min_sup)\n            if conditional_tree and conditional_headers:\n                conditional_frequent_items = extract_items(conditional_headers, min_sup, conditional_tree, new_prefix)\n                frequent_items.extend(conditional_frequent_items)\n    return frequent_items\nmin_sup = 3"}
{"task_id": 491, "completion_id": 6, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n\n    def build_tree(data, min_sup):\n        \"\"\"Build the FP-tree by first scanning the data to count item frequencies.\"\"\"\n        counter = Counter((item for transaction in data for item in transaction))\n        counter = {k: v for (k, v) in counter.items() if v >= min_sup}\n        header = defaultdict(list)\n        for transaction in data:\n            current = root\n            for item in sorted(transaction, key=lambda item: -counter.get(item, 0)):\n                if item in counter:\n                    current = current.children[item]\n                    current.count += 1\n                    header[item].append(current)\n        return (header, root)\n\n    def mine_tree(header, path):\n        \"\"\"The mining part, starting from a conditional base.\"\"\"\n        results = []\n        for item in sorted(header.keys()):\n            conditional_bases = []\n            for node in header[item]:\n                cond_path = []\n                parent = node.parent\n                while parent and parent.item:\n                    cond_path.append(parent.item)\n                    parent = parent.parent\n                if cond_path:\n                    conditional_bases.append((cond_path, node.count))\n            conditional_bases.sort(key=lambda x: (len(x[0]), x[0]))\n            if conditional_bases:\n                conditional_bases = (list((item for (item, _) in conditional_bases)), [count for (_, count) in conditional_bases])\n                (new_header, conditional_tree) = create_tree(conditional_bases)\n                if conditional_tree:\n                    results.extend([tuple(sorted(path + [item]))] + [tuple(sorted(path + conditional_item)) for conditional_item in mine_tree(new_header, path + [item])])\n                else:\n                    results.append(tuple(sorted(path + [item])))\n        return results\n\n    class Node:\n        \"\"\"FP-tree node.\"\"\"\n\n        def __init__(self, item, count, parent):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.children = {}\n\n        def add(self, items):\n            \"\"\"Add items into tree.\"\"\"\n            if items[0] in self.children:\n                self.children[items[0]].count += 1\n            else:\n                self.children[items[0]] = Node(items[0], 1, self)\n            if len(items) > 1:\n                self.children[items[0]].add(items[1:])\n\n    def create_tree(data):\n        \"\"\"Helper function to create conditional FP-tree.\"\"\"\n        header = defaultdict(list)\n        root = Node(None, 0, None)\n        for (transaction, count) in data:\n            current = root\n            for item in transaction:\n                current.add([item])\n                header[item].append(current.children[item])\n            for item in header:\n                header[item].sort(key=lambda node: node.count, reverse=True)\n        return (header, root)\n    root = Node(None, 0, None)\n    (header, tree) = build_tree(transactions, min_sup)\n    if not header:\n        return []\n    frequent_items = mine_tree(header, [])\n    return sorted(set(frequent_items), key=lambda x: (len(x), x))"}
{"task_id": 491, "completion_id": 7, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n\n    def construct_tree(transactions, min_sup):\n        c1 = Counter((item for transaction in transactions for item in transaction))\n        c1 = {x: count for (x, count) in c1.items() if count >= min_sup}\n        if not c1:\n            return ({}, c1)\n        header = {item: {'count': c1[item], 'nodes': []} for item in sorted(c1.keys())}\n        root = TreeNode(None, count=None)\n        for transaction in transactions:\n            transaction = sorted((item for item in transaction if item in c1), key=header.get)\n            if transaction:\n                current_node = root\n                for item in transaction:\n                    if item in current_node.children:\n                        current_node = current_node.children[item]\n                        current_node.count += 1\n                    else:\n                        child = TreeNode(item, count=1)\n                        current_node.add_child(child)\n                        current_node = child\n                        header[item]['nodes'].append(child)\n        return (root, header)\n\n    def mine_tree(tree_node, prefix, min_sup, header_table):\n        frequent_itemsets = []\n        for (item, node) in header_table.items():\n            conditions = []\n            for instance in node['nodes']:\n                freq = instance.count\n                current = instance.parent\n                pattern = []\n                while current.parent:\n                    pattern.append(current.item)\n                    current = current.parent\n                if pattern:\n                    conditions.append((pattern, freq))\n            (conditional_tree, _) = construct_tree(conditions, min_sup)\n            if conditional_tree:\n                for itemset in mine_tree(conditional_tree, prefix + (item,), min_sup, header_table):\n                    yield itemset\n            yield (prefix + (item,))\n    (root, header) = construct_tree(transactions, min_sup)\n    if not root or not header:\n        return []\n    frequent_itemsets = [itemset for itemset in mine_tree(root, (), min_sup, header)]\n    return sorted(frequent_itemsets, key=lambda x: (len(x), x))\nclass TreeNode:\n\n    def __init__(self, item, count, parent=None):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n\n    def add_child(self, child):\n        self.children[child.item] = child\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3"}
{"task_id": 491, "completion_id": 8, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n\n    def construct_fp_tree(items, root, header_table):\n        for item in items:\n            if item not in root.children:\n                root.children[item] = Node(item)\n            root.children[item].count += 1\n            if item not in header_table:\n                header_table[item] = [root.children[item]]\n            else:\n                header_table[item].append(root.children[item])\n        for child in root.children.values():\n            if child not in header_table[child.item]:\n                header_table[child.item].append(child)\n\n    def mine_tree(header_table, prefix, frequent_itemsets):\n        sorted_items = [item[0] for item in sorted(header_table.items(), key=lambda x: len(x[1]))]\n        for item in sorted_items:\n            suffix = prefix.copy()\n            suffix.add(item)\n            frequent_itemsets.append(tuple(sorted(suffix)))\n            conditional_patterns = []\n            for node in header_table[item][:-1]:\n                pattern = []\n                while node.parent is not None and node.parent.item is not None:\n                    pattern.append(node.parent.item)\n                    node = node.parent\n                if pattern:\n                    conditional_patterns.append(pattern)\n            if conditional_patterns:\n                conditional_header_table = defaultdict(list)\n                for pattern in conditional_patterns:\n                    construct_fp_tree(pattern, Node(), conditional_header_table)\n                mine_tree(conditional_header_table, suffix, frequent_itemsets)\n\n    def sort_transactions(transactions, item_frequency):\n        sorted_transactions = []\n        for transaction in transactions:\n            filtered = [item for item in transaction if item_frequency[item] >= min_sup]\n            sorted_transactions.append(sorted(filtered, key=lambda x: item_frequency[x], reverse=True))\n        return sorted_transactions\n    item_frequency = Counter((item for transaction in transactions for item in transaction))\n    filtered_transactions = sort_transactions(transactions, item_frequency)\n    root = Node()\n    header_table = defaultdict(list)\n    for transaction in filtered_transactions:\n        construct_fp_tree(transaction, root, header_table)\n    frequent_itemsets = []\n    mine_tree(header_table, set(), frequent_itemsets)\n    result = sorted(set(frequent_itemsets), key=lambda x: (len(x), x))\n    return result\nclass Node:\n\n    def __init__(self, item=None, count=0, parent=None):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3"}
{"task_id": 491, "completion_id": 9, "solution": "from collections import Counter, defaultdict\nimport itertools\nclass TreeNode:\n\n    def __init__(self, name, count, parent):\n        self.name = name\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.next = None\ndef create_fp_tree(transactions, min_sup):\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: freq for (item, freq) in item_counts.items() if freq >= min_sup}\n    if len(frequent_items) == 0:\n        return (None, None)\n    sorted_transactions = [[item for item in transaction if item in frequent_items] for transaction in transactions]\n    for transaction in sorted_transactions:\n        transaction.sort(key=lambda item: -frequent_items[item])\n    root = TreeNode('null', 1, None)\n    header_table = defaultdict(lambda : {'node': None, 'path': []})\n    for transaction in sorted_transactions:\n        update_tree(root, transaction, 1)\n    for child in root.children.values():\n        traverse_tree(child, header_table)\n    return (root, header_table)\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    (root, header_table) = create_fp_tree(transactions, min_sup)\n    if root is None:\n        return []\n    frequent_itemsets = []\n    mine_patterns(header_table.items(), (), frequent_itemsets, header_table)\n    cleaned_frequent_itemsets = []\n    for itemset in frequent_itemsets:\n        cleaned_itemset = tuple(sorted(itemset))\n        if cleaned_itemset not in cleaned_frequent_itemsets:\n            cleaned_frequent_itemsets.append(cleaned_itemset)\n    cleaned_frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return cleaned_frequent_itemsets\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3"}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement, product\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    feature_names = np.array(X)\n    (n_samples, n_features) = feature_names.shape\n    degrees = list(combinations_with_replacement(range(n_features), degree))\n    degree_tuples = [list(i) for i in product(range(degree + 1), repeat=n_features) if sum(i) <= degree]\n    poly_features = np.array([[power_combination(feature_names[sample], deg) for deg in degree_tuples] for sample in range(n_samples)]).tolist()\n    return poly_features\nX = [[1, 2], [3, 4]]"}
{"task_id": 492, "completion_id": 1, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    n_samples = len(X)\n    n_features = len(X[0])\n    feature_indices = np.arange(n_features)\n    powersets = list(combinations_with_replacement(range(n_features), degree))\n    powersets = [set(ps) for ps in powersets]\n    monomials = [np.zeros(n_features) for _ in range(len(powersets))]\n    for (i, powerset) in enumerate(powersets):\n        for idx in powerset:\n            monomials[i][idx] += 1\n    monomials = [tuple(monomials[i]) for i in range(len(monomials))]\n    monomials = [(0,) * n_features] + monomials\n    poly_features = np.zeros((n_samples, len(monomials)))\n    for i in range(n_samples):\n        sample = X[i]\n        for (j, monomial) in enumerate(monomials):\n            poly_features[i][j] = np.prod(np.power(sample, monomial))\n    return poly_features.tolist()\nX = [[1, 2], [3, 4]]\ndegree = 2"}
{"task_id": 492, "completion_id": 2, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n    \n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n    \n    If *degree* is negative the function must return -1.\n    \n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n    \n    Returns:\n        A 2-D Python list with the enriched feature matrix, or -1 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    (n_samples, n_features) = (len(X), len(X[0]))\n    indices = list(combinations_with_replacement(range(n_features), degree))\n    n_output_features = int(np.math.comb(n_features + degree, degree))\n    new_features = np.ones((n_samples, n_output_features))\n    for (col, index) in enumerate(indices):\n        new_features[:, col + 1] = np.prod(np.array([x ** p for (x, p) in zip(np.array(X).T, index)]), axis=0)\n    return new_features.tolist()"}
{"task_id": 492, "completion_id": 3, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\"\"\"\n    if degree < 0:\n        return -1\n    X_np = np.array(X)\n    (n_samples, n_features) = X_np.shape\n    exponents = []\n    for d in range(degree + 1):\n        for c in combinations_with_replacement(range(n_features), d):\n            e = [0] * n_features\n            for exp in c:\n                e[exp] += 1\n            if e not in exponents:\n                exponents.append(e)\n    poly_X = np.zeros((n_samples, len(exponents)), dtype=float)\n    for (i, e) in enumerate(exponents):\n        poly_X[:, i] = np.prod(X_np ** e, axis=1)\n    return poly_X.tolist()"}
{"task_id": 492, "completion_id": 4, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or -1 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    powers = []\n    for d in range(degree + 1):\n        product = combinations_with_replacement(range(n_features), d)\n        for p in product:\n            powers.append(p)\n\n    def monomial(row, powers):\n        result = 1\n        for (i, power) in enumerate(powers):\n            result *= row[power] ** len(list(filter(lambda x: x == power, powers)))\n        return result\n    result = []\n    for sample in X:\n        row = [monomial(sample, power) for power in powers]\n        result.append(row)\n    return np.array(result).tolist()\nX = [[1, 2, 3], [2, 3, 4]]\ndegree = 3"}
{"task_id": 492, "completion_id": 5, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement, permutations\ndef polynomial_features(X: list[list[int | float]], degree: int):\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\"\"\"\n    if degree < 0:\n        return -1\n    (n_samples, n_features) = (len(X), len(X[0]))\n    if n_features <= 0 or n_samples <= 0:\n        raise ValueError('Input data must have at least one sample and feature.')\n    powers = []\n    for total_degree in range(degree + 1):\n        for indices in combinations_with_replacement(range(n_features), total_degree):\n            exponent = [0] * n_features\n            for idx in indices:\n                exponent[idx] += 1\n            powers.append(exponent)\n    poly_X = []\n    for row in X:\n        transformed_row = [1.0]\n        for exponents in powers[1:]:\n            product = 1.0\n            for (val, exp) in zip(row, exponents):\n                product *= val ** exp\n            transformed_row.append(product)\n        poly_X.append(transformed_row)\n    return poly_X\nX = [[1, 2], [3, 4]]\ndegree = 2"}
{"task_id": 492, "completion_id": 6, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    combinations = list(combinations_with_replacement(range(n_features), degree))\n    powers = [list(p) for deg in range(degree + 1) for p in combinations_with_replacement(range(n_features), deg)]\n\n    def monomial(row, power):\n        return np.prod([row[i] ** power.count(i) for i in range(n_features)])\n    result = []\n    for sample in X:\n        result.append([monomial(sample, power) for power in powers])\n    return np.array(result).tolist()"}
{"task_id": 492, "completion_id": 7, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    (n_samples, n_features) = (len(X), len(X[0]))\n    powers = list(combinations_with_replacement(range(n_features), degree))\n    poly_features = np.ones((n_samples, 1))\n    for deg in range(1, degree + 1):\n        for power in combinations_with_replacement(range(n_features), deg):\n            new_feature = np.prod([x[i] ** power.count(i) for (i, x) in enumerate(np.swapaxes(X, 0, 1))], axis=0)\n            new_feature = new_feature[:, np.newaxis]\n            poly_features = np.concatenate((poly_features, new_feature), axis=1)\n    return poly_features.tolist()\nX = [[2, 3], [4, 5]]\ndegree = 2"}
{"task_id": 492, "completion_id": 8, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\nfrom functools import reduce\nfrom operator import mul\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    (n_samples, n_features) = (len(X), len(X[0]))\n    feature_indices = range(n_features)\n    combinations = []\n    for total_degree in range(degree + 1):\n        for indices in combinations_with_replacement(feature_indices, total_degree):\n            combinations.append(indices)\n    enriched_features = []\n    for sample in X:\n        new_sample = []\n        for combo in combinations:\n            new_sample.append(reduce(mul, (sample[index] for index in combo), 1))\n        enriched_features.append(new_sample)\n    return np.array(enriched_features).tolist()\nX = [[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]\ndegree = 2"}
{"task_id": 492, "completion_id": 9, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n    \n    The function takes a 2-D list *X* whose rows correspond to \n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n    \n    If *degree* is negative the function must return -1.\n    \n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n    \n    Returns:\n        A 2-D Python list with the enriched feature matrix, or -1 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    indices = list(combinations_with_replacement(range(n_features), degree))\n    n_output_features = sum(map(lambda x: int(comb(n_features + x - 1, x)), range(degree + 1)))\n    poly_matrix = np.zeros((n_samples, n_output_features))\n    poly_matrix[:, 0] = 1\n    for (idx, index) in enumerate(indices, start=1):\n        poly_matrix[:, idx] = np.prod([X[:, i] ** index.count(i) for i in set(index)], axis=0)\n    return poly_matrix.tolist()\ndef comb(n, k, memo={}):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    if (n, k) not in memo:\n        memo[n, k] = comb(n - 1, k - 1) + comb(n - 1, k)\n    return memo[n, k]\nX = [[1, 2], [2, 3], [3, 4]]\ndegree = 2"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    y = np.array(y)\n    if y.size == 0:\n        return -1\n    y_mean = np.mean(y)\n    squared_diffs = (y - y_mean) ** 2\n    mse_val = np.mean(squared_diffs)\n    return round(mse_val, 4)"}
{"task_id": 493, "completion_id": 1, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    y = np.array(y)\n    y_mean = np.mean(y)\n    squared_errors = (y - y_mean) ** 2\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 2, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    y = np.array(y)\n    mean_y = np.mean(y)\n    squared_diff = np.square(y - mean_y)\n    mse_value = np.mean(squared_diff)\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 3, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    if y.size == 0:\n        return -1\n    y_mean = np.mean(y)\n    mse_value = np.mean((y - y_mean) ** 2)\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 4, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    y = np.array(y)\n    y_mean = np.mean(y)\n    mse_value = np.mean((y - y_mean) ** 2)\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 5, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if isinstance(y, (list, np.ndarray)) and len(y) == 0:\n        return -1\n    else:\n        y = np.array(y)\n        y_mean = np.mean(y)\n        squared_diffs = (y - y_mean) ** 2\n        mse_result = np.mean(squared_diffs)\n        return round(mse_result, 4)"}
{"task_id": 493, "completion_id": 6, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y.size if isinstance(y, np.ndarray) else not y:\n        return -1\n    y_np = np.array(y)\n    mean_y = np.mean(y_np)\n    sq_diffs = np.square(y_np - mean_y)\n    return np.round(np.mean(sq_diffs), 4)"}
{"task_id": 493, "completion_id": 7, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    if y.size == 0:\n        return -1\n    y_mean = np.mean(y)\n    squared_differences = (y - y_mean) ** 2\n    mse_value = np.mean(squared_differences)\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 8, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    if not isinstance(y, np.ndarray):\n        y = np.array(y)\n    y_mean = np.mean(y)\n    mse_value = np.mean((y - y_mean) ** 2)\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 9, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    y = np.array(y)\n    y_mean = np.mean(y)\n    mse_value = np.mean((y - y_mean) ** 2)\n    return round(mse_value, 4)"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n    \n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n        \n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(x, (list, np.ndarray)):\n        x = [x]\n    elif isinstance(x, np.ndarray):\n        x = x.tolist()\n    y = [round(slope * val + intercept, 4) for val in x]\n    grad = [round(slope, 4)] * len(x)\n    grad2 = [0.0] * len(x)\n    return (y, grad, grad2)\nx = [1.5, 2.3, 3.7, 4.1]\nslope = 2.0\nintercept = 1.0"}
{"task_id": 496, "completion_id": 1, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x).reshape(-1)\n    y = slope * x + intercept\n    grad = np.full_like(x, slope, dtype=float)\n    grad2 = np.full_like(x, 0, dtype=float)\n    return (np.round(y, 4).tolist(), np.round(grad, 4).tolist(), np.round(grad2, 4).tolist())"}
{"task_id": 496, "completion_id": 2, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x).reshape(-1)\n    y = np.round(slope * x + intercept, decimals=4).tolist()\n    grad = [round(slope, 4)] * len(x)\n    grad2 = [0.0] * len(x)\n    return (y, grad, grad2)"}
{"task_id": 496, "completion_id": 3, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.atleast_1d(x)\n    y = slope * x + intercept\n    grad = slope * np.ones_like(x)\n    grad2 = np.zeros_like(x)\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    return (y_rounded, grad_rounded, grad2_rounded)"}
{"task_id": 496, "completion_id": 4, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n    \n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(x, (int, float)):\n        x = [x]\n    x = np.array(x)\n    y = slope * x + intercept\n    grad = np.full_like(x, slope, dtype=float)\n    grad2 = np.zeros_like(x, dtype=float)\n    y = np.round(y, 4).tolist()\n    grad = np.round(grad, 4).tolist()\n    grad2 = np.round(grad2, 4).tolist()\n    return (y, grad, grad2)"}
{"task_id": 496, "completion_id": 5, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x if isinstance(x, list) else [x], dtype=float)\n    y = slope * x + intercept\n    grad = slope * np.ones_like(x)\n    grad2 = np.zeros_like(x)\n    y_rounded = [round(val, 4) for val in y]\n    grad_rounded = [round(val, 4) for val in grad]\n    grad2_rounded = [round(val, 4) for val in grad2]\n    return (y_rounded, grad_rounded, grad2_rounded)\nx = [1.23456789, 2.3456789, 3.456789]\nslope = 2.0\nintercept = 1.0"}
{"task_id": 496, "completion_id": 6, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(x, list):\n        x = list(np.array(x).flatten())\n    y = []\n    grad = []\n    grad2 = []\n    for value in x:\n        y_val = slope * value + intercept\n        grad_val = slope\n        grad2_val = 0.0\n        y.append(round(y_val, 4))\n        grad.append(round(grad_val, 4))\n        grad2.append(round(grad2_val, 4))\n    return (y, grad, grad2)"}
{"task_id": 496, "completion_id": 7, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x)\n    if x.ndim == 0:\n        x = x.reshape((1,))\n    y = slope * x + intercept\n    grad = slope * np.ones_like(x)\n    grad2 = np.zeros_like(x)\n    y = np.round(y, decimals=4)\n    grad = np.round(grad, decimals=4)\n    grad2 = np.round(grad2, decimals=4)\n    y = y.tolist()\n    grad = grad.tolist()\n    grad2 = grad2.tolist()\n    return (y, grad, grad2)"}
{"task_id": 496, "completion_id": 8, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        x = x.tolist()\n    if isinstance(x, (int, float)):\n        x = [x]\n    y = []\n    grad = []\n    grad2 = []\n    for elem in x:\n        y.append(np.round(slope * elem + intercept, 4))\n        grad.append(np.round(slope, 4))\n        grad2.append(0.0)\n    return (y, grad, grad2)"}
{"task_id": 496, "completion_id": 9, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    elif not isinstance(x, np.ndarray):\n        x = np.array([x])\n    y = slope * x + intercept\n    grad = np.full(x.shape, slope)\n    grad2 = np.zeros_like(x)\n    y_rounded = [round(float(val), 4) for val in y]\n    grad_rounded = [round(float(val), 4) for val in grad]\n    grad2_rounded = [round(float(val), 4) for val in grad2]\n    return (y_rounded, grad_rounded, grad2_rounded)\nx = [2.1, 3.4, -1.2]"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef sign_adjust(eigenvector):\n    \"\"\"Adjust the sign of the eigenvector so that the entry with the largest\n    absolute value is positive.\"\"\"\n    max_idx = np.argmax(np.abs(eigenvector))\n    if eigenvector[max_idx] < 0:\n        eigenvector *= -1\n    return eigenvector\ndef standardize_features(data):\n    \"\"\"Standardize each feature in the dataset to have a mean of zero and a\n    standard deviation of 1 using population variance.\"\"\"\n    std_data = np.zeros_like(data)\n    for idx in range(data.shape[1]):\n        col = data[:, idx]\n        if col.std() == 0:\n            std_data[:, idx] = col - col.mean()\n        else:\n            std_data[:, idx] = (col - col.mean()) / col.std(ddof=0)\n    return std_data\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return -1.\n    \"\"\"\n    n_features = data.shape[1]\n    if not 1 <= k <= n_features:\n        return -1\n    std_data = standardize_features(data)\n    cov_matrix = np.cov(std_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_indices]\n    eigenvectors = eigenvectors[:, sorted_indices]\n    eigenvectors = np.apply_along_axis(sign_adjust, 0, eigenvectors)\n    projection_matrix = eigenvectors[:, :k]\n    projected_data = std_data @ projection_matrix\n    return np.round(projected_data, 4).tolist()"}
{"task_id": 499, "completion_id": 1, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_features:\n        return -1\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=0)\n    std_data = (data - means) / np.where(stds != 0, stds, 1)\n    cov_matrix = np.cov(std_data, rowvar=False, bias=False)\n    (eigen_values, eigen_vectors) = np.linalg.eig(cov_matrix)\n    sorted_indices = np.argsort(eigen_values)[::-1]\n    sorted_values = eigen_values[sorted_indices]\n    sorted_vectors = eigen_vectors[:, sorted_indices]\n    max_abs_indices = np.argmax(np.abs(sorted_vectors), axis=0)\n    signs = np.sign(sorted_vectors[max_abs_indices, range(n_features)])\n    normalized_vectors = sorted_vectors * signs\n    reduced_matrix = normalized_vectors[:, :k].T\n    projected_data = np.dot(std_data, reduced_matrix)\n    return np.round(projected_data, 4).tolist()"}
{"task_id": 499, "completion_id": 2, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_features:\n        return -1\n    std_data = data.copy()\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=1)\n    for col in range(n_features):\n        if stds[col] != 0:\n            std_data[:, col] = (data[:, col] - means[col]) / stds[col]\n    cov_matrix = np.cov(std_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    flips = np.argmax(np.abs(eigenvectors), axis=0)\n    signs = np.sign(eigenvectors[flips, np.arange(n_features)])\n    eigenvectors = eigenvectors * signs\n    projection_matrix = eigenvectors[:, :k]\n    projected_data = np.dot(std_data, projection_matrix)\n    return np.round(projected_data, 4).tolist()"}
{"task_id": 499, "completion_id": 3, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return -1.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_features:\n        return -1\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=n_samples)\n    data_standardized = (data - means) / np.where(stds == 0, 1, stds)\n    cov_matrix = np.cov(data_standardized, rowvar=False, ddof=n_samples - 1)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_indices]\n    eigenvectors = eigenvectors[:, sorted_indices]\n    max_abs_indices = np.argmax(np.abs(eigenvectors), axis=0)\n    signs = np.sign(eigenvectors[max_abs_indices, np.arange(n_features)])\n    eigenvectors = eigenvectors * signs\n    projection_matrix = eigenvectors[:, :k]\n    projected_data = np.dot(data_standardized, projection_matrix)\n    return np.round(projected_data, 4).tolist()"}
{"task_id": 499, "completion_id": 4, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_features:\n        return -1\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=1)\n    stds[stds == 0] = 1\n    standardized_data = (data - means) / stds\n    covariance_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n    (eig_values, eig_vectors) = np.linalg.eig(covariance_matrix)\n    sorted_indices = np.argsort(eig_values)[::-1]\n    eig_values = eig_values[sorted_indices]\n    eig_vectors = eig_vectors[:, sorted_indices]\n    max_abs_indices = np.argmax(np.abs(eig_vectors), axis=0)\n    signs = np.sign(eig_vectors[max_abs_indices, np.arange(n_features)])\n    eig_vectors = eig_vectors * signs\n    projection_matrix = eig_vectors[:, :k]\n    projected_data = np.dot(standardized_data, projection_matrix)\n    return np.round(projected_data, 4).tolist()\ndata = np.array([[1, 2], [2, 4], [3, 6]])\nk = 1\nprojected_data = pca_transform(data, k)"}
{"task_id": 499, "completion_id": 5, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_features = data.shape[1]\n    if not 1 <= k <= n_features:\n        return -1\n    non_zero_var_features = np.var(data, axis=0, ddof=0) != 0\n    centered_data = data.copy()\n    centered_data[:, non_zero_var_features] -= np.mean(data[:, non_zero_var_features], axis=0)\n    centered_data[:, non_zero_var_features] /= np.sqrt(n_features * np.var(data[:, non_zero_var_features], axis=0, ddof=0))\n    covariance_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    for i in range(len(eigenvectors)):\n        largest_abs_val_index = np.argmax(np.abs(eigenvectors[:, i]))\n        if eigenvectors[largest_abs_val_index, i] < 0:\n            eigenvectors[:, i] *= -1\n    projection = np.dot(centered_data, eigenvectors[:, :k])\n    return np.round(projection, 4).tolist()\ndata = np.array([[1.0, -2.0, 0.5], [0.5, 0.0, 2.0], [1.0, -1.0, 1.0], [0.0, 2.0, -1.0]])\nk = 2"}
{"task_id": 499, "completion_id": 6, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_features:\n        return -1\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=1)\n    stds = np.where(stds == 0, 1, stds)\n    standardised_data = (data - means) / stds\n    cov_matrix = np.cov(standardised_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    max_abs_indices = np.argmax(np.abs(sorted_eigenvectors), axis=0)\n    signs = np.sign(sorted_eigenvectors[max_abs_indices, range(n_features)])\n    sorted_eigenvectors = sorted_eigenvectors * signs\n    selected_eigenvectors = sorted_eigenvectors[:, :k]\n    projected_data = np.dot(standardised_data, selected_eigenvectors)\n    return np.round(projected_data, 4).tolist()\ndata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nk = 2"}
{"task_id": 499, "completion_id": 7, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_features:\n        return -1\n    std_data = data.copy()\n    for i in range(n_features):\n        if np.var(data[:, i], ddof=0) == 0:\n            continue\n        std_data[:, i] = (data[:, i] - np.mean(data[:, i])) / np.std(data[:, i], ddof=0)\n    cov_matrix = np.cov(std_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    for i in range(n_features):\n        max_idx = np.argmax(np.abs(eigenvectors[:, i]))\n        if eigenvectors[max_idx, i] < 0:\n            eigenvectors[:, i] *= -1\n    projected_data = np.dot(std_data, eigenvectors[:, :k])\n    return np.round(projected_data, 4).tolist()"}
{"task_id": 499, "completion_id": 8, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_features:\n        return -1\n    std_data = data - data.mean(axis=0)\n    std_dev = np.sqrt(np.sum(std_data ** 2, axis=0) / n_samples)\n    std_dev[std_dev == 0] = 1\n    std_data = std_data / std_dev\n    cov_matrix = np.cov(std_data, rowvar=False, bias=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    largest_abs_idx = np.argmax(np.abs(eigenvectors), axis=0)\n    signs = np.sign(eigenvectors[largest_abs_idx, np.arange(n_features)])\n    eigenvectors = eigenvectors * signs\n    k_components = eigenvectors[:, :k]\n    projected_data = std_data @ k_components\n    return np.round(projected_data, 4).tolist()\ndata = np.array([[1.2, 3.4, 5.6], [2.1, 4.2, 6.3], [3.0, 5.1, 7.2]])\nk = 2"}
{"task_id": 499, "completion_id": 9, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project data onto its first k principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If k is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_features:\n        return -1\n    std_data = np.zeros_like(data, dtype=float)\n    for i in range(n_features):\n        feature = data[:, i]\n        if np.var(feature) > 0:\n            std_data[:, i] = (feature - np.mean(feature)) / np.std(feature, ddof=1)\n        else:\n            std_data[:, i] = feature - np.mean(feature)\n    cov_matrix = np.cov(std_data, rowvar=False, bias=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    max_indicies = np.argmax(np.abs(sorted_eigenvectors), axis=0)\n    for i in range(n_features):\n        if sorted_eigenvectors[max_indicies[i], i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projected_data = std_data @ projection_matrix\n    return np.round(projected_data, 4).tolist()\ndata = np.array([[2.5, 2.4], [0.5, 0.7], [2.2, 2.9], [1.9, 2.2], [3.1, 3.0], [2.3, 2.7], [2, 1.6], [1, 1.1], [1.5, 1.6], [1.1, 0.9]])\nk = 2"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    n_samples = len(y_train)\n    n_features = len(X_train[0])\n    X_train = np.array(X_train)\n    y_true = np.array(y_train)\n    X_test = np.array(X_test)\n    F = np.mean(y_true)\n    residuals = y_true - F\n    stumps = []\n    for _ in range(n_estimators):\n        stump = None\n        min_error = float('inf')\n        for feature in range(n_features):\n            unique_values = np.unique(X_train[:, feature])\n            for split in unique_values:\n                left_indices = X_train[:, feature] <= split\n                right_indices = X_train[:, feature] > split\n                left_val = np.mean(residuals[left_indices])\n                right_val = np.mean(residuals[right_indices])\n                stump_predictions = np.zeros(n_samples)\n                stump_predictions[left_indices] = left_val\n                stump_predictions[right_indices] = right_val\n                error = np.sum((residuals - stump_predictions) ** 2)\n                if error < min_error:\n                    min_error = error\n                    stump = (feature, split, left_val, right_val)\n        stumps.append(stump)\n        F += learning_rate * stump_predictions\n        residuals = y_true - F\n\n    def predict(sample):\n        sample_prediction = np.mean(y_true)\n        for stump in stumps:\n            (feature, split, left_val, right_val) = stump\n            if sample[feature] <= split:\n                sample_prediction += learning_rate * left_val\n            else:\n                sample_prediction += learning_rate * right_val\n        return 1 if sample_prediction >= 0.5 else 0\n    prediction = [predict(sample) for sample in X_test]\n    return prediction"}
{"task_id": 500, "completion_id": 1, "solution": "import numpy as np\ndef find_best_split(X, y, y_pred):\n    residuals = y - y_pred\n    (best_feature_idx, best_threshold, best_improvement, best_left_mean, best_right_mean) = (None, None, float('inf'), None, None)\n    for feature_idx in range(len(X[0])):\n        sorted_indices = np.argsort([sample[feature_idx] for sample in X])\n        feature_values = np.array([X[idx][feature_idx] for idx in sorted_indices])\n        residuals_sorted = np.array([residuals[idx] for idx in sorted_indices])\n        for idx in range(1, len(X)):\n            (left_residuals, right_residuals) = (residuals_sorted[:idx], residuals_sorted[idx:])\n            (left_mean, right_mean) = (np.mean(left_residuals), np.mean(right_residuals))\n            improvement = np.sum(left_residuals ** 2) + np.sum(right_residuals ** 2)\n            if improvement < best_improvement:\n                best_improvement = improvement\n                best_feature_idx = feature_idx\n                best_threshold = (feature_values[idx - 1] + feature_values[idx]) / 2\n                (best_left_mean, best_right_mean) = (left_mean, right_mean)\n    return (best_feature_idx, best_threshold, best_left_mean, best_right_mean)\ndef stump_predict(X, feature_idx, threshold, left_mean, right_mean):\n    predictions = []\n    for sample in X:\n        if sample[feature_idx] <= threshold:\n            predictions.append(left_mean)\n        else:\n            predictions.append(right_mean)\n    return predictions\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    F = [np.mean(y_train)] * len(X_train)\n    for _ in range(n_estimators):\n        (feature_idx, threshold, left_mean, right_mean) = find_best_split(X_train, y_train, F)\n        h = stump_predict(X_train, feature_idx, threshold, left_mean, right_mean)\n        F = [f + learning_rate * h_i for (f, h_i) in zip(F, h)]\n    F_test = [np.mean(y_train)] * len(X_test)\n    for _ in range(n_estimators):\n        (feature_idx, threshold, left_mean, right_mean) = find_best_split(X_train, y_train, F)\n        h_test = stump_predict(X_test, feature_idx, threshold, left_mean, right_mean)\n        F_test = [f + learning_rate * h_i for (f, h_i) in zip(F_test, h_test)]\n    predictions = [1 if f >= 0.5 else 0 for f in F_test]\n    return predictions"}
{"task_id": 500, "completion_id": 2, "solution": "import numpy as np\ndef decision_stump(X, y, n_features):\n    best_func = lambda x: 0.0\n    best_error = float('inf')\n    for i in range(n_features):\n        values = np.array([x[i] for x in X])\n        for threshold in np.unique(values):\n            left = np.where(values <= threshold)[0]\n            right = np.where(values > threshold)[0]\n            left_pred = np.mean(y[left]) if len(left) > 0 else 0.0\n            right_pred = np.mean(y[right]) if len(right) > 0 else 0.0\n            predictions = np.full(len(X), right_pred)\n            predictions[values <= threshold] = left_pred\n            loss = np.sum((y - predictions) ** 2)\n            if loss < best_error:\n                best_error = loss\n                best_func = lambda x, pred_0=left_pred, pred_1=right_pred: pred_0 if x[i] <= threshold else pred_1\n    return (best_func, best_error)\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    (X_train, y_train, X_test) = (np.array(X_train), np.array(y_train), np.array(X_test))\n    (n_train, n_features) = (X_train.shape[0], X_train.shape[1])\n    n_test = X_test.shape[0]\n    F = np.mean(y_train) * np.ones(n_train)\n    predictions = np.zeros(n_test)\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        (stump, _) = decision_stump(X_train, residuals, n_features)\n        predictions += learning_rate * np.array([stump(x) for x in X_test])\n        F += learning_rate * np.array([stump(x) for x in X_train])\n    return [1 if pred > 0.5 else 0 for pred in predictions]"}
{"task_id": 500, "completion_id": 3, "solution": "import numpy as np\ndef find_best_split(X, y, feature_idx):\n    thresholds = sorted(set(X[:, feature_idx]))\n    (best_thres, best_score) = (None, np.inf)\n    for threshold in thresholds:\n        left_indices = X[:, feature_idx] <= threshold\n        right_indices = X[:, feature_idx] > threshold\n        if len(left_indices) == 0 or len(right_indices) == 0:\n            continue\n        (left_y, right_y) = (y[left_indices], y[right_indices])\n        (left_score, right_score) = (np.sum(left_y ** 2), np.sum(right_y ** 2))\n        score = (left_score + right_score) / len(y)\n        if score < best_score:\n            best_score = score\n            best_thres = (threshold, np.mean(left_y), np.mean(right_y))\n    return best_thres\ndef decision_stump_predict(X, stump):\n    (threshold, left_value, right_value) = stump\n    predictions = np.where(X <= threshold, left_value, right_value)\n    return predictions\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    F = np.mean(y_train)\n    stumps = []\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        (best_stump, best_feature) = (None, 0)\n        min_error = np.inf\n        for feature_idx in range(X_train.shape[1]):\n            stump = find_best_split(X_train, residuals, feature_idx)\n            if stump is None:\n                continue\n            predict = decision_stump_predict(X_train[:, feature_idx], stump)\n            error = np.sum((residuals - predict) ** 2)\n            if error < min_error:\n                min_error = error\n                (best_stump, best_feature) = (stump, feature_idx)\n        F += learning_rate * decision_stump_predict(X_train[:, best_feature], best_stump)\n        stumps.append((best_stump, best_feature))\n    test_predictions = np.ones(X_test.shape[0]) * np.mean(y_train)\n    for (stump, feature_idx) in stumps:\n        test_predictions += learning_rate * decision_stump_predict(X_test[:, feature_idx], stump)\n    return [1 if pred >= 0.5 else 0 for pred in test_predictions]\nX_train = [[1, 2], [3, 4], [5, 6]]\ny_train = [0, 1, 1]\nX_test = [[2, 3], [4, 5]]\npredictions = gradient_boosting_classifier(X_train, y_train, X_test)"}
{"task_id": 500, "completion_id": 4, "solution": "import numpy as np\ndef find_best_split(X, y, residuals):\n    best_stump = {}\n    minimum_error = float('inf')\n    for feature_idx in range(len(X[0])):\n        thresholds = set([sample[feature_idx] for sample in X])\n        for threshold in thresholds:\n            left_indices = np.array([sample[feature_idx] <= threshold for sample in X])\n            right_indices = ~left_indices\n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue\n            err_left = np.sum(left_indices * residuals)\n            err_right = np.sum(right_indices * residuals)\n            split_error = err_left ** 2 / np.sum(left_indices) + err_right ** 2 / np.sum(right_indices)\n            if split_error < minimum_error:\n                minimum_error = split_error\n                best_stump = {'feature_idx': feature_idx, 'threshold': threshold, 'left_value': err_left / np.sum(left_indices), 'right_value': err_right / np.sum(right_indices)}\n    return best_stump\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    F = np.mean(y_train)\n    stumps = []\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        stump = find_best_split(X_train, y_train, residuals)\n        stumps.append(stump)\n        for (i, sample) in enumerate(X_train):\n            if sample[stump['feature_idx']] <= stump['threshold']:\n                F += learning_rate * stump['left_value']\n            else:\n                F += learning_rate * stump['right_value']\n    predictions = []\n    for sample in X_test:\n        stump_prediction = sum((learning_rate * stump['left_value'] if sample[stump['feature_idx']] <= stump['threshold'] else learning_rate * stump['right_value'] for stump in stumps))\n        final_prediction = np.mean(y_train) + stump_prediction\n        predictions.append(1 if final_prediction > 0.5 else 0)\n    return predictions"}
{"task_id": 500, "completion_id": 5, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    F_train = np.full(len(y_train), np.mean(y_train))\n    F_test = np.full(len(X_test), np.mean(y_train))\n    for _ in range(n_estimators):\n        residuals = y_train - F_train\n        for feature_idx in range(X_train.shape[1]):\n            (best_threshold, best_left_val, best_right_val, min_error) = (float('inf'), 0, 0, float('inf'))\n            for feature_val in np.unique(X_train[:, feature_idx]):\n                left_indices = X_train[:, feature_idx] <= feature_val\n                right_indices = X_train[:, feature_idx] > feature_val\n                if np.any(left_indices) and np.any(right_indices):\n                    left_val = np.mean(residuals[left_indices])\n                    right_val = np.mean(residuals[right_indices])\n                    error = np.sum(residuals[left_indices] - left_val) ** 2 + np.sum(residuals[right_indices] - right_val) ** 2\n                    if error < min_error:\n                        min_error = error\n                        best_threshold = feature_val\n                        best_left_val = left_val\n                        best_right_val = right_val\n            F_train += learning_rate * (best_left_val * (X_train[:, feature_idx] <= best_threshold) + best_right_val * (X_train[:, feature_idx] > best_threshold))\n            F_test += learning_rate * (best_left_val * (X_test[:, feature_idx] <= best_threshold) + best_right_val * (X_test[:, feature_idx] > best_threshold))\n    predictions = [1 if pred >= 0.5 else 0 for pred in F_test]\n    return predictions\nX_train = [[1, 2], [2, 3], [3, 3], [4, 4]]\ny_train = [0, 0, 1, 1]\nX_test = [[3, 1], [2, 2], [3, 1]]\npredictions = gradient_boosting_classifier(X_train, y_train, X_test, n_estimators=5, learning_rate=0.1)"}
{"task_id": 500, "completion_id": 6, "solution": "import numpy as np\ndef find_best_split(features, labels, residuals):\n    \"\"\"Find the best split for the decision stump.\"\"\"\n    best_split = None\n    best_error = float('inf')\n    best_values = (0, 0)\n    for feature_idx in range(len(features[0])):\n        feature_values = [sample[feature_idx] for sample in features]\n        for threshold in set(feature_values):\n            left = [r for (f, r) in zip(feature_values, residuals) if f <= threshold]\n            right = [r for (f, r) in zip(feature_values, residuals) if f > threshold]\n            l_value = np.mean(left) if left else 0\n            r_value = np.mean(right) if right else 0\n            error = sum(((r - l_value) ** 2 if f <= threshold else (r - r_value) ** 2 for (f, r) in zip(feature_values, residuals)))\n            if error < best_error:\n                best_error = error\n                best_split = (feature_idx, threshold)\n                best_values = (l_value, r_value)\n    return (best_split, best_values)\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n    \n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n    \n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n    \n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    F = np.mean(y_train) * np.ones(len(y_train))\n    stump_predictions_train = np.zeros((n_estimators, len(X_train)))\n    stump_predictions_test = np.zeros((n_estimators, len(X_test)))\n    for m in range(n_estimators):\n        residuals = y_train - F\n        (split, values) = find_best_split(X_train, y_train, residuals)\n        stump_predictions_train[m] = np.where(X_train[:, split[0]] <= split[1], values[0], values[1])\n        stump_predictions_test[m] = np.where(X_test[:, split[0]] <= split[1], values[0], values[1])\n        F += learning_rate * stump_predictions_train[m]\n    test_predictions = np.mean(learning_rate * stump_predictions_test, axis=0) + np.mean(y_train)\n    predictions = [int(p >= 0.5) for p in test_predictions]\n    return predictions\nX_train = [[1, 2], [2, 3], [3, 4], [5, 6], [6, 7]]\ny_train = [0, 0, 1, 1, 1]\nX_test = [[1.5, 2.5], [5.5, 6.5]]\npredictions = gradient_boosting_classifier(X_train, y_train, X_test)"}
{"task_id": 500, "completion_id": 7, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n\n    def decision_stump(X, y):\n        best_split = {}\n        min_error = float('inf')\n        for feature_i in range(len(X[0])):\n            feature_values = list(set([sample[feature_i] for sample in X]))\n            for threshold in feature_values:\n                temp_threshold = 0.5 * (threshold + max(feature_values) if threshold == min(feature_values) else min(feature_values))\n                (left_y, right_y) = ([], [])\n                for (i, sample) in enumerate(X):\n                    if sample[feature_i] <= temp_threshold:\n                        left_y.append(y[i])\n                    else:\n                        right_y.append(y[i])\n                if len(left_y) > 0 and len(right_y) > 0:\n                    error = np.sum(np.array([yi - np.mean(left_y) for yi in left_y]) ** 2) + np.sum(np.array([yi - np.mean(right_y) for yi in right_y]) ** 2)\n                    if error < min_error:\n                        min_error = error\n                        best_split = {'feature': feature_i, 'threshold': temp_threshold, 'left': np.mean(left_y), 'right': np.mean(right_y)}\n        return best_split\n    F = np.mean(y_train)\n    models = []\n    for _ in range(n_estimators):\n        gradients = [yi - F for yi in y_train]\n        stump = decision_stump(X_train, gradients)\n        F += learning_rate * (stump['left'] if X_train[0][stump['feature']] <= stump['threshold'] else stump['right'])\n        models.append(stump)\n    predictions = []\n    for sample in X_test:\n        prediction = np.mean(y_train)\n        for stump in models:\n            if sample[stump['feature']] <= stump['threshold']:\n                prediction += learning_rate * stump['left']\n            else:\n                prediction += learning_rate * stump['right']\n        predictions.append(0 if prediction < 0.5 else 1)\n    return predictions"}
{"task_id": 500, "completion_id": 8, "solution": "import numpy as np\ndef find_best_split(X, r, feature_index):\n    \"\"\"Identify the threshold value for a single feature that minimizes the total squared error.\"\"\"\n    sorted_indices = np.argsort(X[:, feature_index])\n    sorted_X = X[sorted_indices, feature_index]\n    sorted_r = r[sorted_indices]\n    n = len(sorted_X)\n    min_threshold = None\n    min_error = float('inf')\n    for i in range(1, n):\n        threshold = (sorted_X[i - 1] + sorted_X[i]) / 2\n        left_error = np.sum((sorted_r[:i] - np.mean(sorted_r[:i])) ** 2)\n        right_error = np.sum((sorted_r[i:] - np.mean(sorted_r[i:])) ** 2)\n        total_error = left_error + right_error\n        if total_error < min_error:\n            min_error = total_error\n            min_threshold = threshold\n    return (min_threshold, np.mean(sorted_r[sorted_X <= min_threshold]), np.mean(sorted_r[sorted_X > min_threshold]))\ndef predict_stump(x, threshold, left_pred, right_pred):\n    \"\"\"Predict class based on a stump for a single instance.\"\"\"\n    return left_pred if x <= threshold else right_pred\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    n_features = X_train.shape[1]\n    M = n_estimators\n    eta = learning_rate\n    F = np.mean(y_train) * np.ones_like(y_train)\n    model = {'const': np.mean(y_train), 'stumps': []}\n    for m in range(M):\n        residuals = y_train - F\n        best_feature = None\n        best_threshold = None\n        best_left_pred = best_right_pred = None\n        min_error = float('inf')\n        for feature_index in range(n_features):\n            (threshold, left_pred, right_pred) = find_best_split(X_train, residuals, feature_index)\n            error = np.sum((residuals - (left_pred * (X_train[:, feature_index] <= threshold) + right_pred * (X_train[:, feature_index] > threshold))) ** 2)\n            if error < min_error:\n                min_error = error\n                best_feature = feature_index\n                best_threshold = threshold\n                best_left_pred = left_pred\n                best_right_pred = right_pred\n        model['stumps'].append((best_feature, best_threshold, best_left_pred, best_right_pred))\n        for i in range(len(X_train)):\n            F[i] += eta * (best_left_pred if X_train[i, best_feature] <= best_threshold else best_right_pred)\n    predictions = model['const'] * np.ones(len(X_test))\n    for (feature, threshold, left_pred, right_pred) in model['stumps']:\n        for i in range(len(X_test)):\n            predictions[i] += eta * predict_stump(X_test[i, feature], threshold, left_pred, right_pred)\n    return [int(pred >= 0.5) for pred in predictions]\nX_train = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [4.0, 5.0]]\ny_train = [0, 0, 1, 1]\nX_test = [[1.5, 2.5], [3.5, 4.5]]\npredictions = gradient_boosting_classifier(X_train, y_train, X_test)"}
{"task_id": 500, "completion_id": 9, "solution": "import numpy as np\ndef find_best_split(X, y, residual, feature_idx):\n    \"\"\"Find the best split for a particular feature to minimize the squared error.\"\"\"\n    sorted_idx = np.argsort(X[:, feature_idx])\n    X_sorted = X[sorted_idx, feature_idx]\n    residual_sorted = residual[sorted_idx]\n    best_split = (None, float('inf'), None)\n    for i in range(1, len(X_sorted)):\n        if X_sorted[i] == X_sorted[i - 1]:\n            continue\n        threshold = (X_sorted[i] + X_sorted[i - 1]) / 2.0\n        left_resid = residual_sorted[:i]\n        right_resid = residual_sorted[i:]\n        left_const = -left_resid.mean() if left_resid.size > 0 else 0\n        right_const = -right_resid.mean() if right_resid.size > 0 else 0\n        err = np.sum(left_resid ** 2) + np.sum(right_resid ** 2)\n        if err < best_split[1]:\n            best_split = (threshold, err, (left_const, right_const))\n    return best_split\ndef predict_stump(X, threshold, constants):\n    \"\"\"Predict using a decision stump defined by a feature threshold and constants.\"\"\"\n    return np.where(X <= threshold, constants[0], constants[1])\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1):\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n    F = np.mean(y_train_np)\n    F_test = np.full(X_test_np.shape[0], F)\n    for _ in range(n_estimators):\n        residuals = y_train_np - F\n        best_splits = [find_best_split(X_train_np, y_train_np, residuals, i) for i in range(X_train_np.shape[1])]\n        best_feature = np.argmin([split[1] for split in best_splits])\n        (threshold, _, constants) = best_splits[best_feature]\n        F += learning_rate * predict_stump(X_train_np[:, best_feature], threshold, constants)\n        F_test += learning_rate * predict_stump(X_test_np[:, best_feature], threshold, constants)\n    return [int(pred >= 0.5) for pred in F_test]\nX_train = [[1], [2], [3], [4], [5]]\ny_train = [0, 0, 1, 1, 1]\nX_test = [[1.5], [3.5], [4.5]]"}
{"task_id": 505, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n    batch_size = X.shape[0]\n    (n_v, n_h) = W.shape\n    h0_prob = sigmoid(X @ W + hbias)\n    v_prob = X\n    h_prob = h0_prob\n    for _ in range(k):\n        v_prob = sigmoid(h_prob @ W.T + vbias)\n        h_prob = sigmoid(v_prob @ W + hbias)\n    pos_grad = X.T @ h0_prob\n    neg_grad = v_prob.T @ h_prob\n    W_new = W + learning_rate * (pos_grad - neg_grad) / batch_size\n    W_new = np.round(W_new, 4).tolist()\n    return W_new\nX = np.random.rand(3, 4)\nW = np.random.rand(4, 5)\nhbias = np.random.rand(5)\nvbias = np.random.rand(4)\nlearning_rate = 0.1\nk = 1"}
{"task_id": 505, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid(x):\n    \"\"\"Compute the sigmoid function for an array x.\"\"\"\n    return 1 / (1 + np.exp(-x))\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n    h0_probs = sigmoid(X @ W + hbias)\n    v = X\n    h_k_probs = h0_probs\n    for _ in range(k):\n        v_k_probs = sigmoid(v @ W + vbias)\n        h_k_probs = sigmoid(v_k_probs @ W + hbias)\n        v = sigmoid(h_k_probs @ W.T + vbias)\n    pos_grad = X.T @ h0_probs\n    neg_grad = v_k_probs.T @ h_k_probs\n    m = X.shape[0]\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    return np.round(W_new, 4).tolist()"}
{"task_id": 505, "completion_id": 2, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n    m = X.shape[0]\n    n_v = X.shape[1]\n    n_h = W.shape[1]\n    h0_probs = sigmoid(X.dot(W) + hbias)\n    h_probs = h0_probs\n    for _ in range(k):\n        v_probs = sigmoid(h_probs.dot(W.T) + vbias)\n        h_probs = sigmoid(v_probs.dot(W) + hbias)\n    pos_grad = X.T.dot(h0_probs)\n    neg_grad = v_probs.T.dot(h_probs)\n    W_new = np.round(W + learning_rate * (pos_grad - neg_grad) / m, 4)\n    return W_new.tolist()\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))"}
{"task_id": 505, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1.0 / (1.0 + np.exp(-x))\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n    \n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n    \n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    batch_size = X.shape[0]\n    if batch_size == 0:\n        return []\n    h0_prob = sigmoid(np.dot(X, W) + hbias)\n    v_k_prob = X\n    h_k_prob = h0_prob\n    for _ in range(k):\n        v_prob = sigmoid(np.dot(h_k_prob, W.T) + vbias)\n        h_prob = sigmoid(np.dot(v_prob, W) + hbias)\n        v_k_prob = v_prob\n        h_k_prob = h_prob\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / batch_size\n    return np.round(W_new, decimals=4).tolist()"}
{"task_id": 505, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\"\"\"\n    if X.size == 0:\n        return []\n    (m, n_v) = X.shape\n    n_h = W.shape[1]\n    h0_prob = sigmoid(X @ W + hbias)\n    (v_k_prob, h_k_prob) = (X, h0_prob)\n    for _ in range(k):\n        v_prob = sigmoid(h_k_prob @ W.T + vbias)\n        h_prob = sigmoid(v_prob @ W + hbias)\n        (v_k_prob, h_k_prob) = (v_prob, h_prob)\n    pos_grad = X.T @ h0_prob\n    neg_grad = v_k_prob.T @ h_k_prob\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    return np.round(W_new, 4).tolist()"}
{"task_id": 505, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n    batch_size = X.shape[0]\n    h0_probs = sigmoid(np.dot(X, W) + hbias)\n    pos_grad = np.dot(X.T, h0_probs)\n    v_k = X\n    h_probs = h0_probs\n    for _ in range(k):\n        v_probs = sigmoid(np.dot(h_probs, W.T) + vbias)\n        h_probs = sigmoid(np.dot(v_probs, W) + hbias)\n        v_k = v_probs\n    neg_grad = np.dot(v_k.T, h_probs)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / batch_size\n    return [list(row) for row in np.round(W_new, decimals=4)]"}
{"task_id": 505, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid(x):\n    \"\"\"Sigmoid function.\"\"\"\n    return 1 / (1 + np.exp(-x))\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n    \n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n    (m, n_v) = X.shape\n    n_h = hbias.shape[0]\n    pos_hidden_probs = sigmoid(np.dot(X, W) + hbias)\n    pos_grad = np.dot(X.T, pos_hidden_probs)\n    v_k_prob = X\n    for _ in range(k):\n        h_k_prob = sigmoid(np.dot(v_k_prob, W) + hbias)\n        v_k_prob = sigmoid(np.dot(h_k_prob, W.T) + vbias)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)\n    delta = (pos_grad - neg_grad) / m\n    updated_weights = W + learning_rate * delta\n    return np.round(updated_weights, 4).tolist()"}
{"task_id": 505, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n    (m, n_v) = X.shape\n    n_h = W.shape[1]\n    h0_prob = sigmoid(X.dot(W) + hbias)\n    pos_grad = X.T.dot(h0_prob)\n    v_k_prob = X\n    h_k_prob = h0_prob\n    for _ in range(k):\n        v_k_prob = sigmoid(h_k_prob.dot(W.T) + vbias)\n        h_k_prob = sigmoid(v_k_prob.dot(W) + hbias)\n    neg_grad = v_k_prob.T.dot(h_k_prob)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    W_new_list = W_new.round(4).tolist()\n    return W_new_list"}
{"task_id": 505, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n    (batch_size, n_visible) = X.shape\n    n_hidden = W.shape[1]\n    h0_prob = sigmoid(X @ W + hbias)\n    pos_grad = X.T @ h0_prob\n    (v_k_prob, h_k_prob) = (X, h0_prob)\n    for _ in range(k):\n        v_k_prob = sigmoid(h_k_prob @ W.T + vbias)\n        h_k_prob = sigmoid(v_k_prob @ W + hbias)\n    neg_grad = v_k_prob.T @ h_k_prob\n    W_new = W + learning_rate * (pos_grad - neg_grad) / batch_size\n    return np.round(W_new, 4).tolist()"}
{"task_id": 505, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid(x):\n    \"\"\"Sigmoid function.\"\"\"\n    return 1 / (1 + np.exp(-x))\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n    h0_prob = sigmoid(np.dot(X, W) + hbias)\n    pos_grad = np.dot(X.T, h0_prob)\n    v_k_prob = X\n    h_k_prob = h0_prob\n    for _ in range(k):\n        v_k_prob = sigmoid(np.dot(h_k_prob, W.T) + vbias)\n        h_k_prob = sigmoid(np.dot(v_k_prob, W) + hbias)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)\n    m = X.shape[0]\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    return [list(map(lambda x: round(x, 4), row)) for row in W_new.tolist()]\nX = np.array([[1, 0], [0, 1]])\nW = np.array([[0.5, -0.5], [-0.5, 0.5]])\nhbias = np.array([0, 0])\nvbias = np.array([0, 0])\nlearning_rate = 0.1\nk = 1"}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\ndef chebyshev(x: list[float] | np.ndarray, y: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if len(x) != len(y):\n        return -1.0\n    differences = np.abs(x - y)\n    max_diff = np.max(differences)\n    return round(max_diff, 4)\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 1, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n    \n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n    \n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n    \n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x_array = np.array(x)\n    y_array = np.array(y)\n    if x_array.shape != y_array.shape:\n        return -1\n    distance = np.max(np.abs(x_array - y_array))\n    return round(distance, 4)"}
{"task_id": 509, "completion_id": 2, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n    \n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length. If the lengths differ, the function returns -1.\n    \n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n    \n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if len(x) != len(y):\n        return -1\n    distance = np.max(np.abs(x - y))\n    return round(distance, 4)\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 3, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x_array = np.array(x)\n    y_array = np.array(y)\n    if x_array.shape != y_array.shape:\n        return -1\n    distances = np.abs(x_array - y_array)\n    chebyshev_dist = np.max(distances)\n    return round(chebyshev_dist, 4)\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 4, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n    \n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n    \n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n    \n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x_np = np.array(x)\n    y_np = np.array(y)\n    if x_np.shape != y_np.shape:\n        return -1\n    diffs = np.abs(x_np - y_np)\n    max_diff = np.max(diffs)\n    return round(max_diff, 4)"}
{"task_id": 509, "completion_id": 5, "solution": "import numpy as np\ndef chebyshev(x: list[float] | np.ndarray, y: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    if len(x) != len(y):\n        return -1.0\n    x_np = np.array(x)\n    y_np = np.array(y)\n    distance = np.max(np.abs(x_np - y_np))\n    return round(float(distance), 4)\nx = [1, 2, 3, 4]\ny = [1, 2, 3]"}
{"task_id": 509, "completion_id": 6, "solution": "import numpy as np\ndef chebyshev(x: list[float] | np.ndarray, y: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x_array = np.array(x)\n    y_array = np.array(y)\n    if x_array.shape != y_array.shape:\n        return -1.0\n    distance = np.max(np.abs(x_array - y_array))\n    return round(float(distance), 4)\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 7, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x_array = np.array(x)\n    y_array = np.array(y)\n    if len(x_array) != len(y_array):\n        return -1\n    dist = np.max(np.abs(x_array - y_array))\n    return round(dist, 4)\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 8, "solution": "import numpy as np\ndef chebyshev(x: list[float] | np.ndarray, y: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if len(x) != len(y):\n        return -1\n    distance = np.max(np.abs(x - y))\n    return round(float(distance), 4)"}
{"task_id": 509, "completion_id": 9, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x_array = np.array(x)\n    y_array = np.array(y)\n    if x_array.shape != y_array.shape:\n        return -1\n    distance = np.max(np.abs(x_array - y_array))\n    return np.round(distance, 4)\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    reconstruction_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    total_vae_loss = reconstruction_loss + kl_divergence\n    batch_size = y.shape[0]\n    average_vae_loss = total_vae_loss / batch_size\n    return round(average_vae_loss, 6)\ny = np.array([[0, 1], [1, 0]], dtype=float)\ny_pred = np.array([[0.1, 0.9], [0.4, 0.6]], dtype=float)\nt_mean = np.array([[0.1], [0.2]], dtype=float)\nt_log_var = np.array([[0.01], [-0.01]], dtype=float)"}
{"task_id": 510, "completion_id": 1, "solution": "import numpy as np\ndef binary_cross_entropy(y: np.ndarray, y_pred: np.ndarray) -> np.ndarray:\n    \"\"\"Compute the binary cross-entropy loss.\n\n    Args:\n        y (np.ndarray): Ground-truth array.\n        y_pred (np.ndarray): Predicted array.\n\n    Returns:\n        np.ndarray: Element-wise binary cross-entropy loss.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    return -(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    reconstruction_loss = np.mean(binary_cross_entropy(y, y_pred))\n    kl_divergence = -0.5 * np.mean(np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1))\n    vae_loss = reconstruction_loss + kl_divergence\n    return round(vae_loss, 6)\ny = np.array([[0, 1, 1], [1, 0, 1]])\ny_pred = np.array([[0.05, 0.9, 0.8], [0.85, 0.2, 0.9]])\nt_mean = np.array([[0.2, 0.4, 0.6, 0.8], [0.1, 0.3, 0.5, 0.7]])\nt_log_var = np.array([[-1, -1, -1, -1], [-2, -2, -2, -2]])"}
{"task_id": 510, "completion_id": 2, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, eps, 1 - eps)\n    reconstruction_loss = -np.mean(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    kl_divergence = -0.5 * np.mean(np.sum(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var), axis=1))\n    avg_loss = reconstruction_loss + kl_divergence\n    return round(avg_loss, 6)\ny = np.random.randint(0, 2, size=(10, 20))\ny_pred = np.random.uniform(0.1, 0.9, size=(10, 20))\nt_mean = np.random.randn(10, 5)\nt_log_var = np.random.randn(10, 5)"}
{"task_id": 510, "completion_id": 3, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    reconstruction_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred), axis=-1)\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=-1)\n    total_loss = np.mean(reconstruction_loss + kl_divergence)\n    return round(total_loss, 6)"}
{"task_id": 510, "completion_id": 4, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    binary_crossentropy = -(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    reconstruction_loss = binary_crossentropy.mean()\n    log_var = np.exp(t_log_var)\n    kl_div = -0.5 * np.sum(1 + t_log_var - t_mean ** 2 - log_var, axis=1).mean()\n    total_loss = reconstruction_loss + kl_div\n    return round(total_loss, 6)\ny = np.array([[0, 1, 0, 1], [1, 0, 1, 0]])\ny_pred = np.array([[0.03737347, 0.94628585, 0.03737347, 0.94628585], [0.94628585, 0.03737347, 0.94628585, 0.03737347]])\nt_log_var = np.array([[-0.82225093, -0.00887937], [0.82300172, -1.15559029]])"}
{"task_id": 510, "completion_id": 5, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    reconstruction_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred), axis=1)\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1)\n    total_loss = reconstruction_loss + kl_divergence\n    average_loss = np.mean(total_loss)\n    return round(average_loss, 6)\ny = np.random.randint(2, size=(10, 100))\ny_pred = np.random.uniform(size=(10, 100))\nt_mean = np.random.randn(10, 20)\nt_log_var = np.random.randn(10, 20)"}
{"task_id": 510, "completion_id": 6, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, eps, 1 - eps)\n    reconstruction_loss = -np.sum(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped), axis=1)\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1)\n    total_loss = reconstruction_loss + kl_divergence\n    return round(np.mean(total_loss), 6)\ny = np.random.rand(10, 50) > 0.5\ny_pred = np.clip(np.random.rand(10, 50), 0.1, 0.9)\nt_mean = np.random.randn(10, 20)\nt_log_var = np.log(np.random.rand(10, 20))"}
{"task_id": 510, "completion_id": 7, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    recon_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    kl_div = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    total_loss = recon_loss + kl_div\n    average_loss = total_loss / y.shape[0]\n    return round(average_loss, 6)\ny = np.random.randint(2, size=(50, 784))\ny_pred = np.random.rand(50, 784)\nt_mean = np.random.randn(50, 20)\nt_log_var = np.random.randn(50, 20)"}
{"task_id": 510, "completion_id": 8, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    reconstruction_loss = -(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    reconstruction_loss = np.mean(np.sum(reconstruction_loss, axis=1))\n    kl_divergence = -0.5 * np.mean(np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1))\n    loss = reconstruction_loss + kl_divergence\n    return round(loss, 6)\nbatch_size = 2\nn_features = 10\nlatent_dim = 4\ny = np.random.randint(0, 2, (batch_size, n_features))\ny_pred = np.random.uniform(0, 1, (batch_size, n_features))\nt_mean = np.random.randn(batch_size, latent_dim)\nt_log_var = np.random.randn(batch_size, latent_dim)\nloss = vae_loss(y, y_pred, t_mean, t_log_var)"}
{"task_id": 510, "completion_id": 9, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, eps, 1 - eps)\n    reconstruction_loss = -np.sum(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    kl_loss = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    total_loss = reconstruction_loss + kl_loss\n    batch_size = y.shape[0]\n    mean_loss = total_loss / batch_size\n    return round(mean_loss, 6)\ny = np.random.binomial(1, 0.5, size=(10, 512))\ny_pred = np.random.uniform(0, 1, size=(10, 512))\nt_mean = np.random.normal(0, 1, size=(10, 10))\nt_log_var = np.random.normal(0, 1, size=(10, 10))"}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n    \n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X_np = np.array(X)\n    w_np = np.array(w)\n    V_np = np.array(V)\n    linear_term = np.dot(X_np, w_np)\n    interaction_term = 0.5 * (np.sum(np.dot(X_np, V_np) ** 2, axis=1) - np.sum(X_np ** 2 * np.sum(V_np ** 2, axis=1), axis=1))\n    predictions = w0 + linear_term + interaction_term\n    return np.round(predictions, 4).tolist()"}
{"task_id": 513, "completion_id": 1, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear_terms = X.dot(w)\n    interaction_terms = np.sum((X.dot(V) ** 2 - np.sum(X ** 2 * V ** 2, axis=1)) / 2, axis=1)\n    predictions = w0 + linear_terms + interaction_terms\n    return list(np.round(predictions, 4))\nX_test = [[1, 2, 3], [4, 5, 6]]\nw0_test = 0.5\nw_test = [0.2, 0.3, 0.4]\nV_test = [[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]\npredictions = fm_predict(X_test, w0_test, w_test, V_test)"}
{"task_id": 513, "completion_id": 2, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"\n    Calculate Factorization Machine predictions for a batch of samples.\n    \n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n    \n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    n_samples = X.shape[0]\n    linear_terms = X @ w\n    VtX = V.T @ X.T\n    VtX_sq = VtX ** 2\n    XtVX = X @ (V ** 2).T\n    interaction_terms = 0.5 * (np.sum(VtX_sq, axis=0) - np.sum(XtVX, axis=1))\n    y_pred = w0 + linear_terms + interaction_terms\n    return [round(pred, 4) for pred in y_pred]\nX = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nw0 = 1.0\nw = [0.1, 0.2, 0.3]\nV = [[0.5, 0.6], [0.7, 0.8], [0.9, 1.0]]"}
{"task_id": 513, "completion_id": 3, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    (n_samples, n_features) = X.shape\n    (_, k) = V.shape\n    linear_term = np.dot(X, w)\n    interaction_term = np.zeros(n_samples)\n    for f in range(k):\n        V_f = V[:, f]\n        VfX = np.dot(X, V_f)\n        VfX_squared = np.square(VfX)\n        Vf_squared_X_squared = np.sum(np.square(V_f) * np.square(X), axis=1)\n        interaction_term += (VfX_squared - Vf_squared_X_squared) / 2.0\n    predictions = w0 + linear_term + interaction_term\n    return [round(pred, 4) for pred in predictions]\nX_test = [[1, 2, 3], [4, 5, 6]]\nw0_test = 2.0\nw_test = [0.1, 0.2, 0.3]\nV_test = [[0.01, 0.02], [0.02, 0.01], [0.03, 0.03]]\npredictions = fm_predict(X_test, w0_test, w_test, V_test)"}
{"task_id": 513, "completion_id": 4, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear_term = w0 + np.dot(X, w)\n    interaction_term = 0.5 * np.sum((X @ V) ** 2 - np.sum(X ** 2 * V ** 2, axis=1, keepdims=True), axis=1)\n    prediction = linear_term + interaction_term\n    prediction = np.round(prediction, 4)\n    return prediction.tolist()"}
{"task_id": 513, "completion_id": 5, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    v = np.array(V)\n    w = np.array(w)\n    (n_samples, n_features) = X.shape\n    k_latent_factors = v.shape[1]\n    linear_terms = w0 + np.dot(X, w)\n    interaction_terms = 0.5 * np.sum(np.dot(X, v) ** 2 - np.dot(X ** 2, v ** 2), axis=1)\n    y_pred = linear_terms + interaction_terms\n    return [round(pred, 4) for pred in y_pred]\nX = [[1, 2, 3], [4, 5, 6]]\nw0 = 0.5\nw = [0.1, 0.2, 0.3]\nV = [[0.1, 0.2], [0.2, 0.3], [0.3, 0.4]]"}
{"task_id": 513, "completion_id": 6, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4 \n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear_pred = np.dot(X, w)\n    sum_of_squares = np.sum(np.power(np.dot(X, V), 2), axis=1)\n    squares_of_sum = np.sum(np.power(X, 2) * np.sum(np.power(V, 2), axis=1), axis=1)\n    interaction_pred = 0.5 * (sum_of_squares - squares_of_sum)\n    y_hat = w0 + linear_pred + interaction_pred\n    return np.round(y_hat, 4).tolist()\nX = [[1, 2, 3], [4, 5, 6]]\nw0 = 1.0\nw = [2.0, 3.0, 4.0]\nV = [[0.5, 0.6], [0.7, 0.8], [0.9, 1.0]]"}
{"task_id": 513, "completion_id": 7, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    (n_samples, n_features) = X.shape\n    k = V.shape[1]\n    linear_preds = X @ w\n    interactions = 0.5 * ((X @ V) ** 2 - X ** 2 @ V ** 2).sum(axis=1)\n    predictions = w0 + linear_preds + interactions\n    return [round(pred, 4) for pred in predictions]\nX = [[1, 2, 3], [4, 5, 6]]\nw0 = 5\nw = [1, 2, 3]\nV = [[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]\npredictions = fm_predict(X, w0, w, V)"}
{"task_id": 513, "completion_id": 8, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    V = np.array(V)\n    linear_term = np.dot(X, w)\n    interaction_term = 0.5 * np.sum((X @ V) ** 2 - np.sum(X ** 2 * V ** 2, axis=1), axis=1)\n    preds = w0 + linear_term + interaction_term\n    return [round(pred, 4) for pred in preds]"}
{"task_id": 513, "completion_id": 9, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n    \n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n    \n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear_terms = np.dot(X, w)\n    vx = np.tensordot(X, V, axes=([1], [0]))\n    interaction_terms = 0.5 * (np.sum(np.square(vx), axis=1) - np.einsum('ij,ij->i', np.square(vx), np.square(X)))\n    y_pred = w0 + linear_terms + interaction_terms\n    return [round(pred, 4) for pred in y_pred]\nX = [[1, 2, 3], [4, 5, 6]]\nw0 = 1.0\nw = [0.1, 0.2, 0.3]\nV = [[0.5, 0.6], [0.7, 0.8], [0.9, 1.0]]"}
{"task_id": 517, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    is_scalar = isinstance(z, (int, float))\n    if isinstance(z, (list, tuple)):\n        z = np.array(z, dtype=np.float64)\n    elif isinstance(z, np.ndarray):\n        z = z.astype(np.float64)\n    elif is_scalar:\n        z = np.float64(z)\n    else:\n        raise TypeError('Input must be a scalar, list, tuple, or ndarray')\n    with np.errstate(over='ignore'):\n        if is_scalar:\n            return round(1 / (1 + np.exp(-z)), 4)\n        else:\n            z = np.where(z > 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n            z = np.round(z, 4)\n            return z.tolist()"}
{"task_id": 517, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    input_type = type(z)\n    if input_type not in [np.ndarray, list, tuple]:\n        z = np.array(z)\n    else:\n        z = np.array(z, dtype=np.float64)\n    z_clipped = np.clip(z, -700, 700)\n    sigm = np.where(z_clipped >= 0, 1 / (1 + np.exp(-z_clipped)), np.exp(z_clipped) / (1 + np.exp(z_clipped)))\n    sigm = np.round(sigm, decimals=4)\n    if input_type is float or input_type is int:\n        return float(sigm)\n    else:\n        return sigm.tolist()"}
{"task_id": 517, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.array(z) if not isinstance(z, np.ndarray) else z\n    cond = z > 0\n    pos_z = np.where(cond, z, 0)\n    neg_z = np.where(cond, 0, z)\n    sigm = np.where(cond, 1 / (1 + np.exp(-pos_z)), np.exp(neg_z) / (1 + np.exp(neg_z)))\n    sigm = np.round(sigm, 4)\n    return sigm.item() if isinstance(z, np.ndarray) and z.size == 1 else sigm.tolist()"}
{"task_id": 517, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n\n    def stable_sigmoid(x):\n        if x >= 0:\n            return 1 / (1 + np.exp(-x))\n        else:\n            return np.exp(x) / (1 + np.exp(x))\n    if isinstance(z, (int, float)):\n        result = stable_sigmoid(z)\n    else:\n        z = np.array(z)\n        result = np.vectorize(stable_sigmoid)(z)\n    result = np.round(result, 4)\n    if isinstance(z, (int, float)):\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 517, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if not isinstance(z, (int, float, list, tuple, np.ndarray)):\n        raise ValueError('Input z must be an int, float, list, tuple, or numpy.ndarray.')\n    if isinstance(z, (int, float)):\n        z = np.array(z)\n    elif isinstance(z, (list, tuple)):\n        z = np.array(z)\n    with np.errstate(over='ignore'):\n        sigmoid_z = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    if isinstance(z, np.ndarray) and z.size > 1:\n        return [round(num, 4) for num in sigmoid_z.tolist()]\n    else:\n        return round(float(sigmoid_z), 4)"}
{"task_id": 517, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        if z > 0:\n            return round(1.0 / (1.0 + np.exp(-z)), 4)\n        else:\n            return round(np.exp(z) / (1.0 + np.exp(z)), 4)\n    z = np.array(z)\n    positive = z >= 0\n    result = np.zeros_like(z, dtype=float)\n    result[positive] = 1.0 / (1.0 + np.exp(-z[positive]))\n    result[~positive] = np.exp(z[~positive]) / (1.0 + np.exp(z[~positive]))\n    return np.around(result, decimals=4).tolist()"}
{"task_id": 517, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.array(z)\n    result = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    rounded_result = np.round(result, 4)\n    if isinstance(z, np.ndarray) and z.shape != ():\n        return rounded_result.tolist()\n    else:\n        return float(rounded_result)"}
{"task_id": 517, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if isinstance(z, (list, tuple)):\n        z = np.array(z)\n    if isinstance(z, (int, float)):\n        z = np.array([z])\n    sig_z = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    sig_z = np.round(sig_z, 4)\n    if np.isscalar(z):\n        sig_z = float(sig_z[0])\n    else:\n        sig_z = sig_z.tolist()\n    return sig_z"}
{"task_id": 517, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if isinstance(z, (list, tuple)):\n        z = np.array(z, dtype=np.float64)\n    elif isinstance(z, np.ndarray):\n        z = z.astype(np.float64)\n    else:\n        z = np.array(z, dtype=np.float64)\n    with np.errstate(over='ignore'):\n        z = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    z = np.round(z, decimals=4)\n    if z.shape == ():\n        return float(z)\n    else:\n        return z.tolist()"}
{"task_id": 517, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n\n    def stable_sigmoid(x):\n        if x >= 0:\n            return 1 / (1 + np.exp(-x))\n        else:\n            return np.exp(x) / (1 + np.exp(x))\n    if isinstance(z, (int, float)):\n        result = stable_sigmoid(z)\n    elif isinstance(z, (list, tuple)):\n        z = np.array(z)\n        result = stable_sigmoid(z)\n    elif isinstance(z, np.ndarray):\n        result = stable_sigmoid(z)\n    else:\n        raise ValueError('Unsupported input type')\n    if isinstance(result, (np.ndarray, list)):\n        result = np.round(result, decimals=4).tolist()\n    else:\n        result = round(result, 4)\n    return result"}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 1, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if len(actual.shape) == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if len(predicted.shape) == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 2, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 3, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if len(actual.shape) == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if len(predicted.shape) == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 4, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 5, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 6, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if len(actual.shape) == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if len(predicted.shape) == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 7, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 8, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 9, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def compute_grad(item):\n        if isinstance(item, (list, np.ndarray)):\n            return [compute_grad(i) for i in item]\n        else:\n            return np.round(item * (1.0 - item), 4)\n    return compute_grad(z)"}
{"task_id": 520, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, float) or isinstance(z, np.float_):\n        return np.round(z * (1 - z), 4)\n    if isinstance(z, np.ndarray):\n        return np.round(z * (1 - z), 4)\n    return [sigmoid_grad(item) if isinstance(item, list) else np.round(item * (1 - item), 4) for item in z]"}
{"task_id": 520, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def apply_grad(element):\n        if isinstance(element, list):\n            return [apply_grad(sub_element) for sub_element in element]\n        else:\n            return np.round(element * (1 - element), 4)\n    if isinstance(z, np.ndarray):\n        z = z.tolist()\n    elif not isinstance(z, list):\n        return np.round(z * (1 - z), 4)\n    grad = apply_grad(z)\n    return grad"}
{"task_id": 520, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return np.round(z * (1 - z), 4)\n    elif isinstance(z, np.ndarray):\n        return np.round(z * (1 - z), 4)\n    elif isinstance(z, list):\n        if not z:\n            return []\n        elif isinstance(z[0], (int, float)):\n            return [np.round(i * (1 - i), 4) for i in z]\n        else:\n            return [[np.round(j * (1 - j), 4) for j in i] if isinstance(i, list) else np.round(i * (1 - i), 4) for i in z]\n    else:\n        raise ValueError('Input must be a float, int, list of them, or a NumPy array')"}
{"task_id": 520, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def recursive_apply(func, element):\n        if isinstance(element, list):\n            return [recursive_apply(func, item) for item in element]\n        else:\n            return func(element)\n\n    def grad(element):\n        return np.round(element * (1 - element), 4)\n    if isinstance(z, (np.ndarray, list)):\n        if isinstance(z, np.ndarray) and z.ndim > 2:\n            raise ValueError('Input array must be of rank 2 or lower.')\n        return recursive_apply(grad, z)\n    elif isinstance(z, (int, float)):\n        return grad(z)\n    else:\n        raise TypeError('Input must be a scalar, list, or numpy array.')"}
{"task_id": 520, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def compute_grad(element):\n        return np.round(element * (1 - element), 4)\n\n    def apply_grad(input_data):\n        if isinstance(input_data, list):\n            if not input_data:\n                return []\n            return [apply_grad(i) for i in input_data]\n        elif isinstance(input_data, np.ndarray):\n            return np.round(input_data * (1 - input_data), 4)\n        else:\n            return compute_grad(input_data)\n    return apply_grad(z)"}
{"task_id": 520, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def compute_grad(x):\n        \"\"\"Compute the gradient and round to 4 decimal places.\"\"\"\n        return np.round(x * (1 - x), 4)\n    if isinstance(z, float):\n        return compute_grad(z)\n    elif isinstance(z, np.ndarray):\n        return compute_grad(z).tolist()\n    elif isinstance(z, list):\n        if not z:\n            return []\n        elif isinstance(z[0], list):\n            return [sigmoid_grad(row) for row in z]\n        else:\n            return [compute_grad(x) for x in z]\n    else:\n        raise TypeError('Unsupported input type. Expected float, list, or NumPy ndarray.')"}
{"task_id": 520, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def compute_grad(z):\n        if isinstance(z, (int, float)):\n            return np.round(z * (1 - z), 4)\n        elif isinstance(z, list):\n            return [compute_grad(item) for item in z]\n        elif isinstance(z, np.ndarray):\n            return np.round(z * (1 - z), 4)\n        else:\n            raise TypeError('Unsupported input type')\n    return compute_grad(z)"}
{"task_id": 520, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, float):\n        return round(z * (1 - z), 4)\n    elif isinstance(z, np.ndarray):\n        return np.round(z * (1 - z), 4)\n    elif isinstance(z, list):\n        return [sigmoid_grad(item) if isinstance(item, (list, np.ndarray)) else round(item * (1 - item), 4) for item in z]\n    else:\n        raise ValueError('Input must be float, list, or np.ndarray containing sigmoid output values.')"}
{"task_id": 520, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def apply_func_recursively(input_obj, func):\n        if isinstance(input_obj, list):\n            return [apply_func_recursively(element, func) for element in input_obj]\n        else:\n            return func(input_obj)\n    if isinstance(z, float):\n        return np.round(z * (1 - z), 4)\n    elif isinstance(z, (np.ndarray, list)):\n        input_array = np.array(z)\n        gradient = np.array(input_array * (1 - input_array))\n        rounded_gradient = np.round(gradient, 4)\n        if isinstance(z, np.ndarray):\n            return rounded_gradient\n        else:\n            return apply_func_recursively(z, lambda x: rounded_gradient[tuple(map(z.index, x)) if isinstance(x, list) else z.index(x)])\n    elif not z:\n        return z"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n    \n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n    \n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n    \n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    (x1_min, x2_min) = X.min(axis=0)\n    (x1_max, x2_max) = X.max(axis=0)\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot)\n    x1_flat = x1_grid.ravel()\n    x2_flat = x2_grid.ravel()\n    labels = np.sign(W[0] * x1_flat + W[1] * x2_flat + b).reshape(x1_grid.shape)\n    labels_list = labels.tolist()\n    return labels_list"}
{"task_id": 528, "completion_id": 1, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    x1_plot = np.linspace(np.min(X[:, 0]), np.max(X[:, 0]), grid_n)\n    x2_plot = np.linspace(np.min(X[:, 1]), np.max(X[:, 1]), grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot)\n    Z = W[0] * x1_grid + W[1] * x2_grid + b\n    labels = np.sign(Z)\n    return labels.tolist()\nX = [[1, 2], [2, 3], [3, 4], [4, 5]]\nW = [1, -1]\nb = 0"}
{"task_id": 528, "completion_id": 2, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n\n    def classify_point(x1, x2, W, b):\n        z = W[0] * x1 + W[1] * x2 + b\n        return 1 if z >= 0 else -1\n    X = np.array(X)\n    x1_plot = np.linspace(X[:, 0].min(), X[:, 0].max(), grid_n)\n    x2_plot = np.linspace(X[:, 1].min(), X[:, 1].max(), grid_n)\n    (X1, X2) = np.meshgrid(x1_plot, x2_plot)\n    grid_predictions = [[0 for _ in range(grid_n)] for _ in range(grid_n)]\n    for i in range(grid_n):\n        for j in range(grid_n):\n            grid_predictions[i][j] = classify_point(X1[i][j], X2[i][j], W, b)\n    return grid_predictions\nX = [[1, 2], [3, 4], [5, 6], [7, 8]]\nW = [1, -1]\nb = 0\ngrid_n = 10"}
{"task_id": 528, "completion_id": 3, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X_array = np.array(X)\n    (x1_min, x2_min) = X_array.min(axis=0)\n    (x1_max, x2_max) = X_array.max(axis=0)\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_mesh, x2_mesh) = np.meshgrid(x1_plot, x2_plot)\n    x1_mesh_flat = x1_mesh.flatten()\n    x2_mesh_flat = x2_mesh.flatten()\n    predictions = np.sign(W[0] * x1_mesh_flat + W[1] * x2_mesh_flat + b)\n    predictions = predictions.reshape(grid_n, grid_n)\n    predictions_list = predictions.tolist()\n    return predictions_list\nX = [[0, 0], [1, 1], [-1, -1]]\nW = [1, -1]\nb = 0"}
{"task_id": 528, "completion_id": 4, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    (x1_min, x2_min) = X.min(axis=0)\n    (x1_max, x2_max) = X.max(axis=0)\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot)\n    decision_values = W[0] * x1_grid + W[1] * x2_grid + b\n    labels = np.sign(decision_values)\n    labels[labels == 0] = -1\n    labels_list = labels.tolist()\n    return labels_list"}
{"task_id": 528, "completion_id": 5, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    (x1_min, x2_min) = X.min(axis=0)\n    (x1_max, x2_max) = X.max(axis=0)\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_hidden, x2_hidden) = np.meshgrid(x1_plot, x2_plot)\n    decision_grid = W[0] * x1_hidden + W[1] * x2_hidden + b\n    labels = np.where(decision_grid >= 0, 1, -1).tolist()\n    return labels\nX = [[1.1, 2.1], [3.1, 4.1], [5.1, 6.1]]\nW = [0.5, 1.5]\nb = 2.0"}
{"task_id": 528, "completion_id": 6, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    (min_x1, min_x2) = X.min(axis=0)\n    (max_x1, max_x2) = X.max(axis=0)\n    x1_plot = np.linspace(min_x1, max_x1, grid_n)\n    x2_plot = np.linspace(min_x2, max_x2, grid_n)\n    (x1_mesh, x2_mesh) = np.meshgrid(x1_plot, x2_plot)\n    classification_grid = np.sign(W[0] * x1_mesh.ravel() + W[1] * x2_mesh.ravel() + b)\n    classification_grid = classification_grid.reshape((grid_n, grid_n))\n    classification_list = classification_grid.tolist()\n    return classification_list\nX = [[1, 2], [2, 3], [3, 4], [4, 5], [2, 1], [4, 2], [6, 3]]\nW = [1, -1]\nb = 0.5\ngrid_n = 10"}
{"task_id": 528, "completion_id": 7, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    x1_plot = np.linspace(X[:, 0].min(), X[:, 0].max(), grid_n)\n    x2_plot = np.linspace(X[:, 1].min(), X[:, 1].max(), grid_n)\n    (x1_mesh, x2_mesh) = np.meshgrid(x1_plot, x2_plot)\n    Z = W[0] * x1_mesh + W[1] * x2_mesh + b\n    result = ((Z >= 0) * 2 - 1).astype(int).tolist()\n    return result\nX = [[1, 2], [2, 3], [3, 1], [4, 3], [5, 5], [1, 5], [2, 1], [5, 2], [3, 4], [4, 1]]\nW = [0.5, -0.5]\nb = 0.0\ngrid_n = 20"}
{"task_id": 528, "completion_id": 8, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    W = np.array(W)\n    (x1_min, x2_min) = X.min(axis=0)\n    (x1_max, x2_max) = X.max(axis=0)\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot)\n    predictions = np.sign(W[0] * x1_grid + W[1] * x2_grid + b)\n    return predictions.astype(int).tolist()"}
{"task_id": 528, "completion_id": 9, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    W = np.array(W)\n    (x1_min, x2_min) = X.min(axis=0)\n    (x1_max, x2_max) = X.max(axis=0)\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot)\n    grid_points = np.stack((x1_grid.flatten(), x2_grid.flatten()), axis=-1)\n    predictions = np.sign(np.dot(grid_points, W) + b)\n    predictions_grid = predictions.reshape(grid_n, grid_n)\n    result = predictions_grid.astype(int).tolist()\n    return result"}
{"task_id": 537, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    epsilon = 1e-09\n    (n_samples, n_features) = X_train.shape\n    class_priors = np.bincount(y_train) / n_samples\n    X_train_class_0 = X_train[y_train == 0]\n    X_train_class_1 = X_train[y_train == 1]\n    means_class_0 = np.mean(X_train_class_0, axis=0)\n    stds_class_0 = np.std(X_train_class_0, axis=0) + epsilon\n    means_class_1 = np.mean(X_train_class_1, axis=0)\n    stds_class_1 = np.std(X_train_class_1, axis=0) + epsilon\n    predictions = []\n    for x in X_test:\n        likelihood_0 = np.prod(1 / (np.sqrt(2 * np.pi) * stds_class_0) * np.exp(-(x - means_class_0) ** 2 / (2 * stds_class_0 ** 2)))\n        likelihood_1 = np.prod(1 / (np.sqrt(2 * np.pi) * stds_class_1) * np.exp(-(x - means_class_1) ** 2 / (2 * stds_class_1 ** 2)))\n        posterior_0 = likelihood_0 * class_priors[0]\n        posterior_1 = likelihood_1 * class_priors[1]\n        predictions.append(0 if posterior_0 > posterior_1 else 1)\n    return predictions\nX_train = np.array([[1, 2, 3], [1, 2, 4], [3, 4, 5], [4, 5, 6]])\ny_train = np.array([0, 0, 1, 1])\nX_test = np.array([[1, 2, 5], [5, 6, 7]])\npredictions = gaussian_naive_bayes(X_train, y_train, X_test)"}
{"task_id": 537, "completion_id": 1, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    x_train_0 = X_train[y_train == 0]\n    x_train_1 = X_train[y_train == 1]\n    mean_0 = np.mean(x_train_0, axis=0)\n    mean_1 = np.mean(x_train_1, axis=0)\n    std_0 = np.std(x_train_0, axis=0) + 1e-09\n    std_1 = np.std(x_train_1, axis=0) + 1e-09\n    prior_0 = y_train[y_train == 0].size / y_train.size\n    prior_1 = y_train[y_train == 1].size / y_train.size\n    predictions = []\n    for sample in X_test:\n        likelihood_0 = np.prod(1.0 / (np.sqrt(2 * np.pi) * std_0) * np.exp(-(sample - mean_0) ** 2 / (2 * std_0 ** 2)))\n        likelihood_1 = np.prod(1.0 / (np.sqrt(2 * np.pi) * std_1) * np.exp(-(sample - mean_1) ** 2 / (2 * std_1 ** 2)))\n        posterior_0 = likelihood_0 * prior_0\n        posterior_1 = likelihood_1 * prior_1\n        if posterior_0 > posterior_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    return predictions"}
{"task_id": 537, "completion_id": 2, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n    \n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n    \n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n    \n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    (unique_labels, counts) = np.unique(y_train, return_counts=True)\n    priors = counts / float(len(y_train))\n    class_features = [X_train[y_train == c] for c in unique_labels]\n    mean = np.array([cf.mean(axis=0) for cf in class_features])\n    std = np.array([cf.std(axis=0) for cf in class_features]) + 1e-09\n\n    def gaussian_prob(x, mean, std):\n        exponent = np.exp(-((x - mean) ** 2 / (2 * std ** 2)))\n        return 1 / (np.sqrt(2 * np.pi) * std) * exponent\n    predictions = []\n    for x in X_test:\n        posteriors = priors.copy()\n        for i in range(len(unique_labels)):\n            posteriors[i] *= np.prod(gaussian_prob(x, mean[i], std[i]))\n        predictions.append(np.argmax(posteriors))\n    return predictions.tolist()"}
{"task_id": 537, "completion_id": 3, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    classes = np.unique(y_train)\n    (n_samples, n_features) = X_train.shape\n    mean = np.array([X_train[y_train == c].mean(axis=0) for c in classes])\n    std = np.array([X_train[y_train == c].std(axis=0) + 1e-09 for c in classes])\n    priors = np.array([np.sum(y_train == c) / float(n_samples) for c in classes])\n    predictions = []\n    for sample in X_test:\n        posteriors = [np.log(priors[c]) + np.sum(np.log(np.exp(-(sample - mean[c]) ** 2 / (2 * std[c] ** 2)) / (np.sqrt(2 * np.pi) * std[c]))) for c in range(len(classes))]\n        predictions.append(classes[np.argmax(posteriors)])\n    return predictions"}
{"task_id": 537, "completion_id": 4, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    class0_indices = np.where(y_train == 0)[0]\n    class1_indices = np.where(y_train == 1)[0]\n    class0_mean = np.mean(X_train[class0_indices], axis=0)\n    class0_std = np.std(X_train[class0_indices], axis=0) + 1e-09\n    class1_mean = np.mean(X_train[class1_indices], axis=0)\n    class1_std = np.std(X_train[class1_indices], axis=0) + 1e-09\n    prior0 = len(class0_indices) / n_samples\n    prior1 = len(class1_indices) / n_samples\n    predictions = []\n    for x in X_test:\n        likelihood0 = np.prod(1 / (np.sqrt(2 * np.pi) * class0_std) * np.exp(-(x - class0_mean) ** 2 / (2 * class0_std ** 2)))\n        likelihood1 = np.prod(1 / (np.sqrt(2 * np.pi) * class1_std) * np.exp(-(x - class1_mean) ** 2 / (2 * class1_std ** 2)))\n        posterior0 = likelihood0 * prior0\n        posterior1 = likelihood1 * prior1\n        if posterior0 > posterior1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    return predictions"}
{"task_id": 537, "completion_id": 5, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n    \n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n    \n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n    \n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    classes = np.unique(y_train)\n    assert len(classes) == 2, 'Only binary classification is supported.'\n    priors = np.array([np.sum(y_train == c) / n_samples for c in classes])\n    mean_std = [[np.mean(X_train[y_train == c], axis=0), np.std(X_train[y_train == c], axis=0) + 1e-09] for c in classes]\n\n    def posterior_prob(x, class_idx):\n        (mean, std) = mean_std[class_idx]\n        exponent = np.exp(-(x - mean) ** 2 / (2 * std ** 2))\n        gauss_likelihood = 1 / (np.sqrt(2 * np.pi) * std) * exponent\n        log_likelihood = np.sum(np.log(gauss_likelihood) + np.log(priors)[class_idx])\n        return log_likelihood\n    predictions = []\n    for x in X_test:\n        posteriors = [posterior_prob(x, i) for i in range(2)]\n        predictions.append(classes[np.argmax(posteriors)])\n    return predictions"}
{"task_id": 537, "completion_id": 6, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    class_0_indices = np.where(y_train == 0)[0]\n    class_1_indices = np.where(y_train == 1)[0]\n    prior_0 = len(class_0_indices) / len(y_train)\n    prior_1 = len(class_1_indices) / len(y_train)\n    X_train_0 = X_train[class_0_indices]\n    X_train_1 = X_train[class_1_indices]\n    mean_0 = np.mean(X_train_0, axis=0)\n    std_0 = np.std(X_train_0, axis=0) + 1e-09\n    mean_1 = np.mean(X_train_1, axis=0)\n    std_1 = np.std(X_train_1, axis=0) + 1e-09\n    predictions = []\n    for x in X_test:\n        likelihood_0 = np.exp(-(x - mean_0) ** 2 / (2 * std_0 ** 2)) / (np.sqrt(2 * np.pi) * std_0)\n        likelihood_1 = np.exp(-(x - mean_1) ** 2 / (2 * std_1 ** 2)) / (np.sqrt(2 * np.pi) * std_1)\n        posterior_0 = np.prod(likelihood_0) * prior_0\n        posterior_1 = np.prod(likelihood_1) * prior_1\n        if posterior_1 > posterior_0:\n            predictions.append(1)\n        else:\n            predictions.append(0)\n    return predictions"}
{"task_id": 537, "completion_id": 7, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    class_labels = np.unique(y_train)\n    if len(class_labels) != 2:\n        raise ValueError('y_train should contain only binary labels, 0 and 1.')\n    class_parameters = {}\n    epsilon = 1e-09\n    for c in class_labels:\n        X_train_c = X_train[y_train == c]\n        means = np.mean(X_train_c, axis=0)\n        std_devs = np.std(X_train_c, axis=0) + epsilon\n        class_parameters[c] = {'mean': means, 'std_dev': std_devs}\n    class_priors = {c: np.mean(y_train == c) for c in class_labels}\n\n    def gaussian_pdf(x, mean, std_dev):\n        exponent = np.exp(-(x - mean) ** 2 / (2 * std_dev ** 2))\n        return 1 / (np.sqrt(2 * np.pi) * std_dev) * exponent\n\n    def predict_class(test_sample):\n        posteriors = []\n        for c in class_labels:\n            params = class_parameters[c]\n            pdf_values = gaussian_pdf(test_sample, params['mean'], params['std_dev'])\n            log_likelihood = np.sum(np.log(pdf_values))\n            posterior = log_likelihood + np.log(class_priors[c])\n            posteriors.append(posterior)\n        return int(np.argmax(posteriors))\n    y_pred = [predict_class(test_sample) for test_sample in X_test]\n    return y_pred"}
{"task_id": 537, "completion_id": 8, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    class_labels = np.unique(y_train)\n    class_priors = {c: np.sum(y_train == c) / n_samples for c in class_labels}\n    class_parameters = {c: {'mean': np.mean(X_train[y_train == c], axis=0), 'std': np.std(X_train[y_train == c], axis=0) + 1e-09} for c in class_labels}\n\n    def compute_likelihood(x, mean, std):\n        exponent = np.exp(-(x - mean) ** 2 / (2 * std ** 2))\n        return 1 / (np.sqrt(2 * np.pi) * std) * exponent\n    predictions = []\n    for x in X_test:\n        posteriors = {c: class_priors[c] for c in class_labels}\n        for c in class_labels:\n            likelihoods = compute_likelihood(x, class_parameters[c]['mean'], class_parameters[c]['std'])\n            posteriors[c] *= np.prod(likelihoods)\n        predictions.append(max(posteriors, key=posteriors.get))\n    return predictions"}
{"task_id": 537, "completion_id": 9, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    pi_0 = np.mean(y_train == 0)\n    pi_1 = np.mean(y_train == 1)\n    mean_0 = np.mean(X_train[y_train == 0], axis=0)\n    std_0 = np.std(X_train[y_train == 0], axis=0) + 1e-09\n    mean_1 = np.mean(X_train[y_train == 1], axis=0)\n    std_1 = np.std(X_train[y_train == 1], axis=0) + 1e-09\n    predictions = []\n    for x in X_test:\n        likelihood_0 = np.prod(np.exp(-(x - mean_0) ** 2 / (2 * std_0 ** 2)) / (np.sqrt(2 * np.pi) * std_0))\n        likelihood_1 = np.prod(np.exp(-(x - mean_1) ** 2 / (2 * std_1 ** 2)) / (np.sqrt(2 * np.pi) * std_1))\n        posterior_0 = likelihood_0 * pi_0\n        posterior_1 = likelihood_1 * pi_1\n        if posterior_1 > posterior_0:\n            predictions.append(1)\n        else:\n            predictions.append(0)\n    return predictions"}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Computes the binary cross-entropy cost given the model probabilities and true labels.\n    \n    Clips the probabilities to avoid numerical overflow.\n    \n    Args:\n        AL: Numpy array of shape (1, m) or (m,) containing the probabilities.\n        Y: Numpy array of shape (1, m) or (m,) containing the true labels.\n    \n    Returns:\n        float: The computed binary cross-entropy cost.\n    \"\"\"\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    m = Y.shape[1] if Y.ndim == 2 else Y.size\n    cost = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return float(np.squeeze(cost))"}
{"task_id": 539, "completion_id": 1, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute binary cross-entropy cost.\n    \n    Args:\n    AL: np.ndarray, predicted probabilities, shape (1,m) or (m,)\n    Y: np.ndarray, true labels, shape (1,m) or (m,)\n    \n    Returns:\n    float: The computed cost, rounded to 4 decimal places for output.\n    \"\"\"\n    if AL.shape != Y.shape:\n        AL = AL.flatten()\n        Y = Y.flatten()\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    m = AL.shape[0]\n    cost = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return np.round(cost, decimals=4)\nAL = np.array([0.9, 0.1, 0.8, 0.3]).reshape(1, -1)\nY = np.array([1, 0, 1, 0]).reshape(1, -1)\ncost = compute_cost(AL, Y)"}
{"task_id": 539, "completion_id": 2, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost.\n    \n    Parameters:\n    - AL: np.ndarray, the array of activated outputs from the network's last layer (probabilities in (0,1)).\n    - Y: np.ndarray, the array of true labels (0 or 1).\n    \n    Returns:\n    - float, the computed cost.\n    \"\"\"\n    m = AL.shape[1] if len(AL.shape) > 1 else AL.shape[0]\n    AL = AL.reshape(1, m)\n    Y = Y.reshape(1, m)\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return float(np.round(cost, 4))\nAL = np.array([0.7, 0.2, 0.8, 0.9])\nY = np.array([1, 0, 1, 0])"}
{"task_id": 539, "completion_id": 3, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    (AL, Y) = (np.squeeze(AL), np.squeeze(Y))\n    m = AL.shape[0]\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return float(cost)\nAL = np.random.uniform(0.01, 0.99, size=(1, 10))\nY = np.random.randint(0, 2, size=(1, 10))\ncost = compute_cost(AL, Y)"}
{"task_id": 539, "completion_id": 4, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost for a neural network with binary classification.\n    \n    Parameters:\n    AL (np.ndarray): The output activations from the last layer of the neural network, shape (1,m) or (m,)\n    Y (np.ndarray): The true labels of the samples, shape (1,m) or (m,)\n    \n    Returns:\n    float: The binary cross-entropy cost as a scalar.\n    \"\"\"\n    clip_min = 1e-15\n    clip_max = 1 - clip_min\n    AL = np.clip(AL, clip_min, clip_max)\n    m = Y.shape[1] if Y.ndim == 2 else Y.size\n    cost = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return float(np.squeeze(cost))\nAL_sample = np.array([[0.6, 0.4, 0.7]])\nY_sample = np.array([[1, 0, 1]])\ncost = compute_cost(AL_sample, Y_sample)"}
{"task_id": 539, "completion_id": 5, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost function without using any loops.\n    \n    Arguments:\n    AL -- probability vector corresponding to the model's predictions, shape (1, number of examples) or (number of examples,)\n    Y -- the true labels vector (0 or 1), shape (1, number of examples) or (number of examples,)\n    \n    Returns:\n    cost -- negative log-likelihood cost for logistic regression\n    \"\"\"\n    AL_clipped = np.clip(AL, 1e-15, 1 - 1e-15)\n    m = Y.shape[0] if Y.ndim == 1 else Y.shape[1]\n    cost = -1 / m * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return float(np.squeeze(cost))"}
{"task_id": 539, "completion_id": 6, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost from the predicted probabilities and true labels.\n    \n    :param AL: An array of shape (1, m) or (m,) containing predicted probabilities.\n    :param Y: An array of shape (1, m) or (m,) containing true labels (0 or 1).\n    :return: The binary cross-entropy cost.\n    \"\"\"\n    (AL, Y) = (np.atleast_2d(AL), np.atleast_2d(Y))\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    m = AL.shape[1]\n    cost = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return float(np.round(cost, 4))\nm = 5\nY = np.random.randint(0, 2, (1, m))\nAL = np.random.rand(1, m)\ncost = compute_cost(AL, Y)"}
{"task_id": 539, "completion_id": 7, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n\n    Parameters:\n    - AL: numpy array of shape (1, m) or (m,) representing the probabilities of the\n      positive class (trained model predictions).\n    - Y: numpy array of shape (1, m) or (m,) representing the true binary labels.\n\n    Returns:\n    - The binary cross-entropy cost as a float.\n    \"\"\"\n    m = Y.shape[0]\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -(1 / m) * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return float(np.around(cost, 4))"}
{"task_id": 539, "completion_id": 8, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost function.\n    \n    Parameters:\n    - AL (np.ndarray): Numpy array of shape (1, m) or (m,) containing predicted probabilities.\n    - Y (np.ndarray): Numpy array of shape (1, m) or (m,) containing true labels (0 or 1).\n\n    Returns:\n    - float: The computed cost as a scalar, rounded to 4 decimal places.\n    \"\"\"\n    m = Y.shape[0]\n    AL_clipped = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -(1 / m) * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return float(np.round(cost, 4))\nAL = np.array([0.9, 0.4, 0.7, 0.2, 0.6])\nY = np.array([1, 0, 1, 0, 1])\ncost = compute_cost(AL, Y)"}
{"task_id": 539, "completion_id": 9, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost.\n\n    Parameters:\n    - AL: np.ndarray, probabilities (sigmoid output) from the last layer, shape (1, m) or (m,)\n    - Y: np.ndarray, true 'label' vector (containing 0 if non-cat, 1 if cat), shape (1, m) or (m,)\n\n    Returns:\n    - float, binary cross-entropy cost rounded to 4 decimal places\n    \"\"\"\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    if Y.shape != AL.shape:\n        Y = Y.reshape(AL.shape)\n    m = AL.shape[1] if AL.ndim == 2 else AL.size\n    cost = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return round(float(cost), 4)"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\ndef alpha_calculation(hmm, observations):\n    (pi, A, B) = (hmm['pi'], hmm['A'], hmm['B'])\n    (T, N) = (len(observations), len(pi))\n    alpha = np.zeros((T, N))\n    alpha[0, :] = pi * B[:, observations[0]]\n    for t in range(1, T):\n        for i in range(N):\n            alpha[t, i] = B[i, observations[t]] * np.dot(alpha[t - 1, :], A[:, i])\n    return alpha\ndef beta_calculation(hmm, observations):\n    (pi, A, B) = (hmm['pi'], hmm['A'], hmm['B'])\n    (T, N) = (len(observations), len(pi))\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, observations[t + 1]] * beta[t + 1, :])\n    return beta\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if not 0 <= t < len(observations):\n        return []\n    (T, N) = (len(observations), len(hmm['pi']))\n    alpha = alpha_calculation(hmm, observations)\n    beta = beta_calculation(hmm, observations)\n    gamma = alpha[t, :] * beta[t, :] / np.sum(alpha[t, :] * beta[t, :])\n    return [round(gamma[i], 4) for i in range(N)]\nhmm = {'pi': np.array([0.6, 0.4]), 'A': np.array([[0.7, 0.3], [0.4, 0.6]]), 'B': np.array([[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]])}"}
{"task_id": 552, "completion_id": 1, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if not 0 <= t < len(observations):\n        return []\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    N = len(pi)\n    T = len(observations)\n    alpha = np.zeros((T, N))\n    beta = np.zeros((T, N))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, T):\n        alpha[i] = alpha[i - 1].dot(A) * B[:, observations[i]]\n    beta[T - 1] = 1\n    for i in range(T - 2, -1, -1):\n        beta[i] = A.dot(B[:, observations[i + 1]] * beta[i + 1])\n    gamma = alpha * beta / np.sum(alpha * beta)\n    return [round(g, 4) for g in gamma[t]]"}
{"task_id": 552, "completion_id": 2, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    N = len(pi)\n    T = len(observations)\n    alpha = np.zeros((T, N))\n    beta = np.zeros((T, N))\n    alpha[0, :] = pi * B[:, observations[0]]\n    for i in range(1, T):\n        for j in range(N):\n            alpha[i, j] = alpha[i - 1, :].dot(A[:, j]) * B[j, observations[i]]\n    beta[-1, :] = 1\n    for i in reversed(range(T - 1)):\n        for j in range(N):\n            beta[i, j] = (A[j, :] * B[:, observations[i + 1]] * beta[i + 1, :]).sum()\n    gamma = alpha[t, :] * beta[t, :] / (alpha[t, :] * beta[t, :]).sum()\n    return [round(g, 4) for g in gamma]"}
{"task_id": 552, "completion_id": 3, "solution": "import numpy as np\ndef forward(hmm, observations):\n    (pi, A, B) = (hmm['pi'], hmm['A'], hmm['B'])\n    N = A.shape[0]\n    T = len(observations)\n    alpha = np.zeros((T, N))\n    for i in range(N):\n        alpha[0, i] = pi[i] * B[i, observations[0]]\n    for t in range(1, T):\n        for i in range(N):\n            for j in range(N):\n                alpha[t, i] += alpha[t - 1, j] * A[j, i]\n            alpha[t, i] *= B[i, observations[t]]\n    return alpha\ndef backward(hmm, observations):\n    (pi, A, B) = (hmm['pi'], hmm['A'], hmm['B'])\n    N = A.shape[0]\n    T = len(observations)\n    beta = np.zeros((T, N))\n    beta[-1, :] = 1\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            for j in range(N):\n                beta[t, i] += A[i, j] * B[j, observations[t + 1]] * beta[t + 1, j]\n    return beta\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n    \n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n    alpha = forward(hmm, observations)\n    beta = backward(hmm, observations)\n    normalization = np.sum(alpha[t, :] * beta[t, :])\n    gamma = alpha[t, :] * beta[t, :] / normalization\n    return [round(x, 4) for x in gamma]\nhmm = {'pi': np.array([0.6, 0.4]), 'A': np.array([[0.7, 0.3], [0.4, 0.6]]), 'B': np.array([[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]])}\nobservations = [0, 2, 1]\nt = 1"}
{"task_id": 552, "completion_id": 4, "solution": "import numpy as np\ndef alpha_pass(pi, A, B, observations):\n    T = len(observations)\n    N = A.shape[0]\n    alpha = np.zeros((T, N))\n    alpha[0, :] = pi * B[:, observations[0]]\n    for t in range(1, T):\n        for n in range(N):\n            alpha[t, n] = B[n, observations[t]] * np.dot(alpha[t - 1, :], A[:, n])\n    return alpha\ndef beta_pass(A, B, observations):\n    T = len(observations)\n    N = A.shape[0]\n    beta = np.zeros((T, N))\n    beta[-1, :] = 1\n    for t in range(T - 2, -1, -1):\n        for n in range(N):\n            beta[t, n] = np.sum(B[:, observations[t + 1]] * beta[t + 1, :] * A[n, :])\n    return beta\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    N = A.shape[0]\n    T = len(observations)\n    if t < 0 or t >= T:\n        return []\n    alpha = alpha_pass(pi, A, B, observations)\n    beta = beta_pass(A, B, observations)\n    gamma_t = alpha[t, :] * beta[t, :]\n    gamma_t /= np.sum(gamma_t)\n    return [round(val, 4) for val in gamma_t]\nhmm = {'pi': np.array([0.6, 0.4]), 'A': np.array([[0.7, 0.3], [0.4, 0.6]]), 'B': np.array([[0.5, 0.4, 0.1], [0.1, 0.3, 0.6]])}\nobservations = [0, 1, 2]\ngamma_t = gamma_probabilities(hmm, observations, 1)"}
{"task_id": 552, "completion_id": 5, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n    \n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n    \n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n    \n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    T = len(observations)\n    N = A.shape[0]\n    if t < 0 or t >= T:\n        return []\n    alpha = np.zeros((T, N))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, T):\n        alpha[i] = np.dot(alpha[i - 1], A) * B[:, observations[i]]\n    beta = np.zeros((T, N))\n    beta[-1] = 1\n    for i in range(T - 2, -1, -1):\n        beta[i] = np.dot(A * B[:, observations[i + 1]], beta[i + 1])\n    gamma = np.zeros(N)\n    gamma = alpha[t] * beta[t]\n    gamma /= gamma.sum()\n    return [round(prob, 4) for prob in gamma]\nhmm = {'pi': [0.2, 0.4, 0.4], 'A': [[0.5, 0.2, 0.3], [0.3, 0.5, 0.2], [0.2, 0.3, 0.5]], 'B': [[0.5, 0.5], [0.4, 0.6], [0.7, 0.3]]}\nobservations = [0, 1, 0]\nt = 1"}
{"task_id": 552, "completion_id": 6, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    (pi, A, B) = (hmm['pi'], hmm['A'], hmm['B'])\n    N = len(A)\n    T = len(observations)\n    if t < 0 or t >= T:\n        return []\n    alpha = np.zeros((T, N))\n    alpha[0] = pi * B[:, observations[0]]\n    for t in range(1, T):\n        for j in range(N):\n            alpha[t, j] = B[j, observations[t]] * np.dot(alpha[t - 1], A[:, j])\n    beta = np.zeros((T, N))\n    beta[-1] = 1\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(beta[t + 1] * A[i] * B[:, observations[t + 1]])\n    gamma = alpha * beta / np.sum(alpha[-1])\n    gamma_t = gamma[t]\n    return [round(x, 4) for x in gamma_t]"}
{"task_id": 552, "completion_id": 7, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    if t < 0 or t >= len(observations):\n        return []\n    N = A.shape[0]\n    T = len(observations)\n    alpha = np.zeros((T, N))\n    alpha[0, :] = pi * B[:, observations[0]]\n    for t in range(1, T):\n        for j in range(N):\n            alpha[t, j] = B[j, observations[t]] * np.dot(alpha[t - 1, :], A[:, j])\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, observations[t + 1]] * beta[t + 1, :])\n    gamma = alpha * beta\n    gamma = gamma / np.sum(gamma, axis=1, keepdims=True)\n    return list(np.round(gamma[t], decimals=4))\nobservations = [0, 1, 2]"}
{"task_id": 552, "completion_id": 8, "solution": "import numpy as np\ndef normalize_vector(v):\n    \"\"\"Normalize a NumPy array to ensure it sums to 1.\"\"\"\n    return v / v.sum()\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    T = len(observations)\n    if t < 0 or t >= T:\n        return []\n    N = A.shape[0]\n    alpha = np.zeros((T, N))\n    beta = np.zeros((T, N))\n    gamma = np.zeros(N)\n    alpha[0, :] = pi * B[:, observations[0]]\n    alpha[0, :] = normalize_vector(alpha[0, :])\n    for time in range(1, T):\n        for j in range(N):\n            alpha[time, j] = np.sum(alpha[time - 1] * A[:, j]) * B[j, observations[time]]\n        alpha[time, :] = normalize_vector(alpha[time, :])\n    beta[T - 1, :] = 1\n    beta[T - 1, :] = normalize_vector(beta[T - 1, :])\n    for time in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[time, i] = np.sum(A[i, :] * B[:, observations[time + 1]] * beta[time + 1, :])\n        beta[time, :] = normalize_vector(beta[time, :])\n    gamma = alpha[t, :] * beta[t, :] / np.sum(alpha[t, :] * beta[t, :])\n    return [round(x, 4) for x in gamma]\nhmm = {'pi': [1 / 3, 1 / 3, 1 / 3], 'A': [[0.7, 0.2, 0.1], [0.2, 0.5, 0.3], [0.1, 0.3, 0.6]], 'B': [[0.8, 0.1, 0.1], [0.1, 0.7, 0.2], [0.1, 0.1, 0.8]]}\nobservations = [1, 2, 1, 0]\nt = 2"}
{"task_id": 552, "completion_id": 9, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    num_states = len(pi)\n    num_obs = len(observations)\n    if not 0 <= t < num_obs:\n        return []\n\n    def forward(obs):\n        \"\"\"\n        Computes forward probabilities (\u03b1) for an observation sequence.\n        \"\"\"\n        T = len(obs)\n        alpha = np.zeros((T, num_states))\n        alpha[0] = pi * B[:, obs[0]]\n        for i in range(1, T):\n            for j in range(num_states):\n                alpha[i, j] = B[j, obs[i]] * np.sum(alpha[i - 1] * A[:, j])\n        return alpha\n\n    def backward(obs):\n        \"\"\"\n        Computes backward probabilities (\u03b2) for an observation sequence.\n        \"\"\"\n        T = len(obs)\n        beta = np.zeros((T, num_states))\n        beta[-1] = 1\n        for i in range(T - 2, -1, -1):\n            for j in range(num_states):\n                beta[i, j] = np.sum(A[j] * B[:, obs[i + 1]] * beta[i + 1])\n        return beta\n    alpha = forward(observations)\n    beta = backward(observations)\n    gamma_t = alpha[t] * beta[t] / np.sum(alpha[t] * beta[t])\n    return [round(prob, 4) for prob in gamma_t.tolist()]"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import cdist\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label -1\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    (n_samples, _) = data.shape\n    labels = [0] * n_samples\n    cluster_id = 1\n    pairwise_distances = cdist(data, data, metric='euclidean')\n    neighborhoods = [np.where(distances <= eps)[0] for distances in pairwise_distances]\n\n    def expand_cluster(p, neighbor_points):\n        \"\"\"Expand the cluster using BFS.\"\"\"\n        labels[p] = cluster_id\n        queue = deque([p])\n        while queue:\n            current_point = queue.popleft()\n            query_neighborhood = neighborhoods[current_point]\n            for neighbor in query_neighborhood:\n                if labels[neighbor] == 0:\n                    labels[neighbor] = cluster_id\n                    if len(neighborhoods[neighbor]) >= min_samples:\n                        queue.append(neighbor)\n    for i in range(n_samples):\n        if labels[i] != 0:\n            continue\n        if len(neighborhoods[i]) < min_samples:\n            labels[i] = -1\n            continue\n        expand_cluster(i, neighborhoods[i])\n        cluster_id += 1\n    return labels"}
{"task_id": 555, "completion_id": 1, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n\n    def get_neighbors(point_index, data, eps):\n        neighbors = []\n        for i in range(len(data)):\n            if euclidean_distance(data[point_index], data[i]) < eps:\n                neighbors.append(i)\n        return neighbors\n    num_samples = len(data)\n    labels = [-1] * num_samples\n    cluster_id = 0\n    for point_index in range(num_samples):\n        if labels[point_index] != -1:\n            continue\n        neighbors = get_neighbors(point_index, data, eps)\n        if len(neighbors) < min_samples:\n            continue\n        cluster_id += 1\n        labels[point_index] = cluster_id\n        queue = deque([point_index])\n        while queue:\n            current = queue.popleft()\n            for neighbor in neighbors:\n                if labels[neighbor] == -1:\n                    labels[neighbor] = cluster_id\n                    new_neighbors = get_neighbors(neighbor, data, eps)\n                    if len(new_neighbors) >= min_samples:\n                        queue.extend(new_neighbors)\n            neighbors = get_neighbors(point_index, data, eps)\n    return labels\ndata = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\neps = 2\nmin_samples = 2"}
{"task_id": 555, "completion_id": 2, "solution": "import numpy as np\nfrom collections import deque\ndef euclidean_distance(point1, point2):\n    \"\"\"Compute the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    cluster_id = 0\n    neighborhoods = [set() for _ in range(n_samples)]\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            if euclidean_distance(data[i], data[j]) < eps:\n                neighborhoods[i].add(j)\n                neighborhoods[j].add(i)\n    core_points = {i for (i, neighborhood) in enumerate(neighborhoods) if len(neighborhood) >= min_samples}\n    for point in range(n_samples):\n        if labels[point] != -1:\n            continue\n        if point not in core_points:\n            labels[point] = -1\n            continue\n        cluster_id += 1\n        queue = deque([point])\n        while queue:\n            current_point = queue.popleft()\n            if labels[current_point] == -1:\n                labels[current_point] = cluster_id\n            if current_point not in core_points:\n                continue\n            for neighbor in neighborhoods[current_point]:\n                if labels[neighbor] == -1:\n                    queue.append(neighbor)\n                    labels[neighbor] = cluster_id\n    return labels"}
{"task_id": 555, "completion_id": 3, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n    n_samples = data.shape[0]\n    labels = [0] * n_samples\n    cluster_id = 1\n    distances = np.array([[euclidean_distance(data[i], data[j]) for j in range(n_samples)] for i in range(n_samples)])\n    neighbourhoods = [np.where(distances[i] <= eps)[0] for i in range(n_samples)]\n    core_points = {i for i in range(n_samples) if len(neighbourhoods[i]) >= min_samples}\n    for i in core_points:\n        if labels[i] == 0:\n            queue = deque([i])\n            labels[i] = cluster_id\n            while queue:\n                current_point = queue.popleft()\n                for neighbour in neighbourhoods[current_point]:\n                    if labels[neighbour] == 0:\n                        labels[neighbour] = cluster_id\n                        if neighbour in core_points:\n                            queue.append(neighbour)\n            cluster_id += 1\n    for i in range(n_samples):\n        if labels[i] == 0:\n            labels[i] = -1\n    return labels"}
{"task_id": 555, "completion_id": 4, "solution": "import numpy as np\nfrom collections import deque\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    visited = [False] * n_samples\n    clusters_id = 1\n    neighborhoods = [set() for _ in range(n_samples)]\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            dist = euclidean_distance(data[i], data[j])\n            if dist < eps:\n                neighborhoods[i].add(j)\n                neighborhoods[j].add(i)\n    core_points = set()\n    for (i, neighbors) in enumerate(neighborhoods):\n        if len(neighbors) >= min_samples:\n            core_points.add(i)\n    for i in range(n_samples):\n        if not visited[i] and i in core_points:\n            labels[i] = clusters_id\n            visited[i] = True\n            queue = deque([i])\n            while queue:\n                current_point = queue.popleft()\n                for neighbor in neighborhoods[current_point]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        labels[neighbor] = clusters_id\n                        if neighbor in core_points:\n                            queue.append(neighbor)\n            clusters_id += 1\n    return labels"}
{"task_id": 555, "completion_id": 5, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    distances = np.linalg.norm(data[:, np.newaxis] - data, axis=2)\n    neighbors = [np.where(distance < eps)[0] for distance in distances]\n    core_points = [i for (i, n) in enumerate(neighbors) if len(n) >= min_samples]\n    labels = [-1] * len(data)\n    cluster_id = 1\n    queue = deque()\n    for i in core_points:\n        if labels[i] == -1:\n            queue.append(i)\n            labels[i] = cluster_id\n            while queue:\n                current = queue.popleft()\n                for neighbor in neighbors[current]:\n                    if labels[neighbor] == -1:\n                        labels[neighbor] = cluster_id\n                        if neighbor in core_points:\n                            queue.append(neighbor)\n            cluster_id += 1\n    return labels"}
{"task_id": 555, "completion_id": 6, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label -1\n        while clusters are numbered 1, 2, 3, ... in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    clusters = [-1] * n_samples\n\n    def compute_distances(p1, p2):\n        \"\"\"Compute the Euclidean distance between two points.\"\"\"\n        return np.linalg.norm(p1 - p2)\n\n    def get_neighbors(index):\n        \"\"\"Get all points within eps radius.\"\"\"\n        return [neighbor for (neighbor, distance) in enumerate(distances[index]) if distance <= eps]\n\n    def expand_cluster(pt, neigh, cluster_id):\n        \"\"\"Expand a cluster using Breadth-First Search (BFS).\"\"\"\n        queue = deque([pt])\n        while queue:\n            current_pt = queue.popleft()\n            clusters[current_pt] = cluster_id\n            current_neigh = get_neighbors(current_pt)\n            if len(current_neigh) >= min_samples:\n                for neighbor in current_neigh:\n                    if clusters[neighbor] == -1 or clusters[neighbor] == 0:\n                        if clusters[neighbor] == -1:\n                            clusters[neighbor] = 0\n                        queue.append(neighbor)\n    distances = np.array([[compute_distances(x, y) for y in data] for x in data])\n    neighborhoods = [get_neighbors(i) for i in range(n_samples)]\n    cluster_id = 1\n    for pt in range(n_samples):\n        if clusters[pt] != -1:\n            continue\n        if len(neighborhoods[pt]) >= min_samples:\n            expand_cluster(pt, neighborhoods[pt], cluster_id)\n            cluster_id += 1\n        else:\n            clusters[pt] = -1\n    return clusters"}
{"task_id": 555, "completion_id": 7, "solution": "import numpy as np\nfrom collections import deque\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample. Noise points receive the label -1\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    queue = deque()\n    cluster_id = 0\n    neighborhoods = []\n    for i in range(n_samples):\n        neighborhood = [j for j in range(n_samples) if euclidean_distance(data[i], data[j]) <= eps]\n        neighborhoods.append(neighborhood)\n        if len(neighborhood) >= min_samples:\n            labels[i] = 0\n    for i in range(n_samples):\n        if labels[i] == 0:\n            cluster_id += 1\n            queue.append(i)\n            labels[i] = cluster_id\n            while queue:\n                current_point = queue.popleft()\n                for neighbor in neighborhoods[current_point]:\n                    if labels[neighbor] == -1:\n                        labels[neighbor] = cluster_id\n                    elif labels[neighbor] == 0:\n                        labels[neighbor] = cluster_id\n                        queue.append(neighbor)\n    return labels"}
{"task_id": 555, "completion_id": 8, "solution": "import numpy as np\nfrom collections import deque\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    visited = [False] * n_samples\n    is_core = [False] * n_samples\n    labels = [-1] * n_samples\n    cluster_id = 0\n    neighbors = [[] for _ in range(n_samples)]\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            dist = euclidean_distance(data[i], data[j])\n            if dist <= eps:\n                neighbors[i].append(j)\n                neighbors[j].append(i)\n    for (i, point_neighbors) in enumerate(neighbors):\n        if len(point_neighbors) >= min_samples - 1:\n            is_core[i] = True\n    for i in range(n_samples):\n        if not visited[i] and is_core[i]:\n            cluster_id += 1\n            labels[i] = cluster_id\n            queue = deque([i])\n            visited[i] = True\n            while queue:\n                current_point = queue.popleft()\n                for neighbor_index in neighbors[current_point]:\n                    if not visited[neighbor_index]:\n                        visited[neighbor_index] = True\n                        if labels[neighbor_index] == -1:\n                            labels[neighbor_index] = cluster_id\n                        if is_core[neighbor_index]:\n                            queue.append(neighbor_index)\n    return labels"}
{"task_id": 555, "completion_id": 9, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n\n    def euclidean_distance(row1, row2):\n        return np.sqrt(np.sum((row1 - row2) ** 2))\n\n    def create_neighborhoods(data, eps):\n        n_samples = len(data)\n        neighborhoods = [[] for _ in range(n_samples)]\n        for i in range(n_samples):\n            for j in range(i + 1, n_samples):\n                if euclidean_distance(data[i], data[j]) <= eps:\n                    neighborhoods[i].append(j)\n                    neighborhoods[j].append(i)\n        return neighborhoods\n    n_samples = len(data)\n    cluster_labels = [-1] * n_samples\n    core_points = set()\n    neighborhoods = create_neighborhoods(data, eps)\n    for (i, neighbors) in enumerate(neighborhoods):\n        if len(neighbors) >= min_samples - 1:\n            core_points.add(i)\n    current_cluster = 0\n    for point in range(n_samples):\n        if cluster_labels[point] == -1 and point in core_points:\n            current_cluster += 1\n            cluster_labels[point] = current_cluster\n            queue = deque([point])\n            while queue:\n                core_point = queue.popleft()\n                for neighbor in neighborhoods[core_point]:\n                    if cluster_labels[neighbor] == -1:\n                        cluster_labels[neighbor] = current_cluster\n                        if neighbor in core_points:\n                            queue.append(neighbor)\n    return cluster_labels"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Implement the EM algorithm for a Gaussian Mixture Model.\n    \n    Parameters:\n    - data: 2D numpy array (NxD) where N is the number of samples and D is the number of features.\n    - k: Number of Gaussian components.\n    - max_iter: Maximum number of iterations of the EM algorithm.\n    - epsilon: Convergence tolerance for the change in mixture weights.\n    \n    Returns:\n    A Python list of length N containing the final cluster label of each sample.\n    \"\"\"\n    (N, D) = data.shape\n    pi = np.random.dirichlet(np.ones(k))\n    mu = np.random.multivariate_normal(np.mean(data, axis=0), np.cov(data.T), k)\n    sigma = np.array([np.eye(D) for _ in range(k)])\n\n    def gaussian_pdf(x, mu, sigma):\n        return (2 * np.pi) ** (-D / 2) * np.linalg.det(sigma) ** (-0.5) * np.exp(-0.5 * np.sum(np.dot(x - mu, np.linalg.inv(sigma)) * (x - mu), axis=1))\n    for _ in range(max_iter):\n        gamma = np.array([pi[i] * gaussian_pdf(data, mu[i], sigma[i]) for i in range(k)])\n        gamma /= np.sum(gamma, axis=0)\n        Nk = np.sum(gamma, axis=1)\n        pi_prev = pi.copy()\n        pi = Nk / N\n        if np.all(np.abs(pi - pi_prev) < epsilon):\n            break\n        for i in range(k):\n            mu[i] = np.dot(gamma[i], data) / Nk[i]\n            diff = data - mu[i]\n            sigma[i] = np.dot(diff.T, gamma[i][:, np.newaxis] * diff) / Nk[i]\n    cluster_labels = np.argmax(gamma, axis=0).tolist()\n    sorted_indices = np.argsort(mu[:, 0])\n    sorted_labels = {old_ind: new_ind for (new_ind, old_ind) in enumerate(sorted_indices)}\n    final_labels = [sorted_labels[label] for label in cluster_labels]\n    return final_labels"}
{"task_id": 561, "completion_id": 1, "solution": "import numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Fits a Gaussian Mixture Model with EM to the given data and assigns cluster labels.\n\n    Parameters:\n    data (np.ndarray): 2-D array of shape (N, D) containing N samples with D features.\n    k (int): Number of Gaussian components.\n    max_iter (int): Maximum number of iterations for EM to converge.\n    epsilon (float): Tolerance for the change in cluster weights during EM iterations.\n\n    Returns:\n    list[int]: A list of length N with the final cluster label of each sample.\n    \"\"\"\n    (N, D) = data.shape\n    rng = np.random.default_rng()\n    weights = np.ones(k) / k\n    means = rng.uniform(data.min(), data.max(), (k, D))\n    covariances = np.array([np.eye(D)] * k)\n    for _ in range(max_iter):\n        old_weights = weights.copy()\n        responsibilities = np.zeros((N, k))\n        for i in range(k):\n            responsibilities[:, i] = weights[i] * multivariate_gaussian(data, means[i], covariances[i])\n        responsibilities /= responsibilities.sum(axis=1)[:, np.newaxis]\n        weights = responsibilities.sum(axis=0) / N\n        for i in range(k):\n            resp_sum = responsibilities[:, i].sum()\n            means[i] = np.dot(responsibilities[:, i], data) / resp_sum\n            diff = data - means[i]\n            covariances[i] = np.dot(diff.T, responsibilities[:, i][:, np.newaxis] * diff) / resp_sum\n        if np.allclose(old_weights, weights, atol=epsilon):\n            break\n    labels = responsibilities.argmax(axis=1)\n    sorted_indices = np.argsort(means[:, 0])\n    sorted_labels = np.zeros_like(labels)\n    for (new_label, old_label) in enumerate(sorted_indices):\n        sorted_labels[labels == old_label] = new_label\n    return list(sorted_labels)\ndef multivariate_gaussian(X, mean, covariance):\n    n = X.shape[0]\n    d = X.shape[1]\n    inv_cov = np.linalg.inv(covariance)\n    diff = X - mean\n    exponent = -0.5 * np.sum(diff.dot(inv_cov) * diff, axis=1)\n    return (2.0 * np.pi) ** (-d / 2) * np.linalg.det(covariance) ** (-0.5) * np.exp(exponent)\ndata = np.random.rand(100, 2)\nk = 3\nlabels = gmm_em(data, k)"}
{"task_id": 561, "completion_id": 2, "solution": "import numpy as np\nfrom scipy.stats import multivariate_normal\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Fits a Gaussian Mixture Model to the given data using the EM algorithm.\n\n    Parameters:\n    data (np.ndarray): The input data, an array of shape (N, D).\n    k (int): The number of Gaussian components in the mixture model.\n    max_iter (int): The maximum number of iterations of the EM algorithm.\n    epsilon (float): The tolerance for changes in mixture weights to stop the algorithm.\n\n    Returns:\n    List[int]: A list of length N containing the final cluster label of each sample.\n    \"\"\"\n    (N, D) = data.shape\n    np.random.seed(42)\n    weights = np.random.rand(k)\n    weights /= weights.sum()\n    means = np.random.randn(k, D)\n    covariances = [np.eye(D) for _ in range(k)]\n    labels = [0] * N\n    log_likelihood = -np.inf\n    prev_weights = np.copy(weights)\n    for _ in range(max_iter):\n        resp = np.zeros((N, k))\n        for j in range(k):\n            resp[:, j] = weights[j] * multivariate_normal.pdf(data, means[j], covariances[j])\n        resp /= resp.sum(axis=1)[:, np.newaxis]\n        weights = resp.sum(axis=0) / N\n        means = np.dot(resp.T, data) / resp.sum(axis=0)[:, np.newaxis]\n        covariances = []\n        for j in range(k):\n            diff = data - means[j]\n            covariances.append(np.dot(resp[:, j] * diff.T, diff) / resp.sum(axis=0)[j])\n        prev_log_likelihood = log_likelihood\n        log_likelihood = np.sum(np.log(resp.sum(axis=1)))\n        if log_likelihood - prev_log_likelihood < epsilon:\n            break\n    labels = np.argmax(resp, axis=1)\n    sorted_indices = np.argsort(means[:, 0])\n    sorted_labels = np.zeros_like(labels)\n    for (new_label, old_label) in enumerate(sorted_indices):\n        sorted_labels[labels == old_label] = new_label\n    return sorted_labels.tolist()"}
{"task_id": 561, "completion_id": 3, "solution": "import numpy as np\nfrom scipy.stats import multivariate_normal\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"Fits a Gaussian Mixture Model using the Expectation-Maximization algorithm and returns cluster labels after sorting based on the first mean coordinate.\n    \n    Args:\n    data: A 2-D NumPy array where each row represents a sample, and each column represents a feature.\n    k: Number of components in the mixture model.\n    max_iter: Maximum number of iterations to perform.\n    epsilon: Tolerance for the change in mixture weights to declare convergence.\n\n    Returns:\n    A list containing the final cluster label for each sample.\n    \"\"\"\n    (n, d) = data.shape\n    np.random.seed(0)\n    pi = np.ones(k) / k\n    mu = data[np.random.choice(n, k, replace=False)]\n    cov = [np.cov(data.T) for _ in range(k)]\n    for _ in range(max_iter):\n        gamma = np.array([pi[j] * multivariate_normal.pdf(data, mu[j], cov[j]) for j in range(k)]).T\n        gamma_sum = np.sum(gamma, axis=1, keepdims=True)\n        gamma /= gamma_sum\n        N = np.sum(gamma, axis=0)\n        pi_new = N / n\n        mu_new = np.dot(gamma.T, data) / N[:, np.newaxis]\n        for j in range(k):\n            x_mu = data - mu_new[j]\n            cov[j] = np.dot(gamma[:, j] * x_mu.T, x_mu) / N[j]\n        if np.allclose(pi, pi_new, atol=epsilon):\n            break\n        pi = pi_new\n        mu = mu_new\n    order = np.argsort(mu[:, 0])\n    labels = gamma.argmax(axis=1)\n    labels = [order[lbl] for lbl in labels]\n    return labels\ndata = np.random.multivariate_normal([0, 0], [[1, 0], [0, 1]], 100)"}
{"task_id": 561, "completion_id": 4, "solution": "import numpy as np\nimport math\nfrom scipy.stats import multivariate_normal\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    This function fits a Gaussian Mixture Model (GMM) using the Expectation-Maximization (EM) algorithm.\n    Args:\n        data (np.ndarray): A 2D numpy array of points to cluster.\n        k (int): The number of Gaussian mixture components.\n        max_iter (int): Maximum number of iterations for EM algorithm (default 200).\n        epsilon (float): The tolerance for stopping EM algorithm (default 1e-4).\n    Returns:\n        list[int]: A list of cluster labels assigned to each data point.\n    \"\"\"\n    (n, d) = data.shape\n    np.random.seed(0)\n    pi = np.ones(k) / k\n    mu = data[np.random.choice(n, k, replace=False)]\n    sigma = np.array([np.eye(d) * np.var(data, axis=0) for _ in range(k)])\n    for iteration in range(max_iter):\n        old_pi = pi.copy()\n        resp = np.zeros((n, k))\n        for j in range(k):\n            resp[:, j] = pi[j] * multivariate_normal.pdf(data, mean=mu[j], cov=sigma[j])\n        resp /= resp.sum(axis=1)[:, np.newaxis]\n        Nk = resp.sum(axis=0)\n        mu = np.dot(resp.T, data) / Nk[:, np.newaxis]\n        for j in range(k):\n            sigma[j] = np.dot((data - mu[j]).T, resp[:, j].reshape(-1, 1) * (data - mu[j])) / Nk[j]\n        pi = Nk / n\n        if np.linalg.norm(pi - old_pi, 1) < epsilon * k:\n            break\n    labels = resp.argmax(axis=1)\n    means_order = np.argsort(mu[:, 0])\n    labels = np.array([means_order.tolist().index(x) for x in labels])\n    return list(labels)"}
{"task_id": 561, "completion_id": 5, "solution": "import numpy as np\nfrom scipy.stats import multivariate_normal\nfrom typing import List\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> List[int]:\n    \"\"\"\n    Implement the EM algorithm for Gaussian Mixture Models and return cluster labels.\n\n    Parameters:\n    - data (np.ndarray): NxD array of input data points.\n    - k (int): Number of Gaussian components.\n    - max_iter (int): Maximum number of iterations for the EM algorithm.\n    - epsilon (float): Tolerance for convergence based on change in mixture weights.\n\n    Returns:\n    - List[int]: A list of length N with cluster labels for each data point.\n    \"\"\"\n    (N, D) = data.shape\n    means = data[np.random.choice(N, k, replace=False)]\n    covariances = [np.cov(data.T)] * k\n    phi = [1.0 / k] * k\n    posterior = np.zeros((N, k))\n    for _ in range(max_iter):\n        for j in range(k):\n            posterior[:, j] = phi[j] * multivariate_normal.pdf(data, mean=means[j], cov=covariances[j])\n        posterior /= posterior.sum(axis=1, keepdims=True)\n        Nk = posterior.sum(axis=0)\n\n        def _update_params():\n            \"\"\"Calculate new weight, mean and covariance values\"\"\"\n            nonlocal means, covariances, phi\n            for j in range(k):\n                phi[j] = Nk[j] / N\n                means[j] = np.dot(posterior[:, j], data) / Nk[j]\n                covariances[j] = np.dot(posterior[:, j] * (data - means[j]).T, data - means[j])\n        _old_phi = phi[:]\n        _update_params()\n        if np.linalg.norm(np.array(phi) - np.array(_old_phi)) < epsilon:\n            break\n    cluster_labels = np.argmax(posterior, axis=1)\n    sorted_indices = np.argsort(means[:, 0])\n    sorted_labels = np.zeros(len(cluster_labels), dtype=int)\n    for (new_label, old_label) in enumerate(sorted_indices):\n        sorted_labels[cluster_labels == old_label] = new_label\n    return sorted_labels.tolist()"}
{"task_id": 561, "completion_id": 6, "solution": "import numpy as np\nfrom scipy.stats import multivariate_normal\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Applies the Expectation-Maximization algorithm for a Gaussian Mixture Model and labels the \n    data points according to the GMM's final cluster assignments.\n\n    Parameters:\n    data (np.ndarray): NxD array where each row corresponds to a data sample with D features.\n    k (int): Number of Gaussian components.\n    max_iter (int): Maximum number of iterations for EM.\n    epsilon (float): Tolerance for the change in mixture weights to determine convergence.\n\n    Returns:\n    list[int]: A list containing the final cluster labels for each sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    means = data[np.random.choice(n_samples, k, replace=False)]\n    covariances = [np.cov(data.T) for _ in range(k)]\n    weights = np.full(k, 1 / k)\n    responsibilities = np.zeros((n_samples, k))\n    for iteration in range(max_iter):\n        for i in range(k):\n            responsibilities[:, i] = weights[i] * multivariate_normal.pdf(data, mean=means[i], cov=covariances[i])\n        responsibilities /= responsibilities.sum(axis=1)[:, np.newaxis]\n        N_k = responsibilities.sum(axis=0)\n        old_weights = weights.copy()\n        weights = N_k / n_samples\n        for i in range(k):\n            means[i] = np.dot(responsibilities[:, i], data) / N_k[i]\n            diff = data - means[i]\n            covariances[i] = np.dot(diff.T, diff * responsibilities[:, i][:, np.newaxis]) / N_k[i]\n        if np.linalg.norm(weights - old_weights) < epsilon:\n            break\n    labels = np.argmax(responsibilities, axis=1)\n    sorted_indices = np.argsort(means[:, 0])\n    labels = np.array([np.where(sorted_indices == label)[0][0] for label in labels])\n    return labels.tolist()"}
{"task_id": 561, "completion_id": 7, "solution": "import numpy as np\nfrom scipy.stats import multivariate_normal\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Applies the Expectation-Maximization algorithm for a Gaussian Mixture Model to partition the data into k clusters.\n    \n    Parameters:\n    - data: A 2D numpy array with shape (N, D) containing the input data samples.\n    - k: Integer indicating the number of Gaussian components to use in the GMM.\n    - max_iter: Maximum number of iterations allowed.\n    - epsilon: Convergence threshold for mixture weights.\n    \n    Returns:\n    - A list of length N, containing integers from 0 ... k-1 representing the cluster label for each sample.\n    \"\"\"\n    (N, D) = data.shape\n    pi = np.random.dirichlet(np.ones(k), size=1)[0]\n    mu = np.random.rand(k, D)\n    Sigma = np.array([np.eye(D) for _ in range(k)])\n    for _ in range(max_iter):\n        r = np.zeros((N, k))\n        for j in range(k):\n            r[:, j] = pi[j] * multivariate_normal.pdf(data, mean=mu[j], cov=Sigma[j])\n        r /= r.sum(axis=1)[:, np.newaxis]\n        Nk = r.sum(axis=0)\n        pi_new = Nk / N\n        mu_new = np.dot(r.T, data) / Nk[:, np.newaxis]\n        for j in range(k):\n            Sigma[j] = np.dot(r[:, j] * (data - mu_new[j]).T, data - mu_new[j]) / Nk[j]\n        if np.linalg.norm(pi - pi_new) < epsilon:\n            break\n        pi = pi_new\n        mu = mu_new\n    labels = np.argmax(r, axis=1)\n    sorted_indices = np.argsort(mu[:, 0])\n    sorted_labels = np.zeros_like(labels)\n    for (orig_label, new_label) in enumerate(sorted_indices):\n        sorted_labels[labels == orig_label] = new_label\n    return sorted_labels.tolist()"}
{"task_id": 561, "completion_id": 8, "solution": "import numpy as np\nfrom scipy.stats import multivariate_normal\nfrom scipy.linalg import inv\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Perform Expectation Maximization for Gaussian Mixture Model.\n\n    Parameters:\n    data (np.ndarray): 2D array of samples with D features.\n    k (int): Number of Gaussian mixture components.\n    max_iter (int): Maximum number of iterations for EM algorithm.\n    epsilon (float): Tolerance for convergence based on change in weights.\n    \n    Returns:\n    list[int]: List of cluster labels assigned to each sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    pi = np.random.dirichlet(np.ones(k), size=1)[0]\n    mu = np.random.rand(k, n_features)\n    sigma = np.array([np.eye(n_features) for _ in range(k)])\n    resp = np.zeros((n_samples, k))\n    for _ in range(max_iter):\n        for j in range(k):\n            pdf = multivariate_normal.pdf(data, mean=mu[j, :], cov=sigma[j])\n            resp[:, j] = pi[j] * pdf\n        resp = resp / resp.sum(axis=1)[:, np.newaxis]\n        pi_old = pi.copy()\n        N = resp.sum(axis=0)\n        pi = N / n_samples\n        mu = np.dot(resp.T, data) / N[:, np.newaxis]\n        for j in range(k):\n            diff = (data - mu[j, :])[np.newaxis, :, :]\n            sigma[j] = np.dot(diff.T * resp[:, j], diff) / N[j]\n        if np.linalg.norm(pi - pi_old) < epsilon:\n            break\n    labels = np.argmax(resp, axis=1)\n    labels = np.argsort(mu[:, 0])[labels]\n    return labels.tolist()"}
{"task_id": 561, "completion_id": 9, "solution": "import numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Apply the Gaussian Mixture Model using Expectation-Maximization algorithm for clustering.\n\n    Parameters:\n        data (np.ndarray): A 2-D array of shape (N, D) where N are samples and D are features.\n        k (int): The number of Gaussian components.\n        max_iter (int): The maximum number of iterations for EM algorithm. Default is 200.\n        epsilon (float): The convergence threshold for mixing weights. Default is 1e-4.\n\n    Returns:\n        list[int]: A list of length N, containining the final cluster labels of each sample.\n    \"\"\"\n    (N, D) = data.shape\n    weights = np.ones(k) / k\n    means = data[np.random.choice(N, k, replace=False)]\n    covariances = np.zeros((k, D, D))\n    for i in range(k):\n        covariances[i] = np.cov(data.T)\n    for iter in range(max_iter):\n        Responsibilities = np.zeros((N, k))\n        for i in range(N):\n            for j in range(k):\n                responsibility = weights[j] * multivariate_gaussian_pdf(data[i], means[j], covariances[j])\n                Responsibilities[i, j] = responsibility\n        respons_norm = Responsibilities.sum(axis=1)\n        Responsibilities = Responsibilities / respons_norm.reshape(-1, 1)\n        sum_resp = Responsibilities.sum(axis=0)\n        prev_weights = weights.copy()\n        weights = sum_resp / N\n        if np.all(np.abs(weights - prev_weights) < epsilon):\n            break\n        for j in range(k):\n            weighted_sum = np.sum(Responsibilities[:, j].reshape(-1, 1) * data, axis=0)\n            means[j] = weighted_sum / sum_resp[j]\n            centered_data = data - means[j]\n            covariances[j] = np.dot(centered_data.T, Responsibilities[:, j].reshape(-1, 1) * centered_data) / sum_resp[j]\n    cluster_labels = np.argmax(Responsibilities, axis=1)\n    sorted_indices = np.argsort(means[:, 0])\n    return np.array(cluster_labels)[sorted_indices].tolist()\ndef multivariate_gaussian_pdf(x: np.ndarray, mean: np.ndarray, cov: np.ndarray) -> float:\n    \"\"\"Calculate the probability density of x for multi-variate Gaussian.\"\"\"\n    d = x.shape[0]\n    norm_factor = 1.0 / ((2 * np.pi) ** (d / 2) * np.sqrt(np.linalg.det(cov)))\n    exp_factor = np.exp(-0.5 * np.dot(x - mean, np.linalg.solve(cov, (x - mean).T)))\n    return float(norm_factor * exp_factor)"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n\n    def pairwise_distances(X):\n        square_norm = np.sum(X ** 2, axis=1)\n        dists = square_norm.reshape(-1, 1) + square_norm - 2 * np.dot(X, X.T)\n        return np.maximum(dists, 0.0)\n\n    def gaussian_kernel(distances, gamma=2.0):\n        return np.exp(-gamma * distances)\n\n    def symmetric_normalized_laplacian(A):\n        D = np.diag(1 / np.sqrt(np.sum(A, axis=1)))\n        L_sym = np.dot(D, np.dot(A, D))\n        return L_sym\n\n    def k_means(X, k):\n        centroids = X[:k]\n        old_labels = None\n        for _ in range(1000):\n            distances = np.linalg.norm(X[:, None] - centroids, axis=2)\n            labels = np.argmin(distances, axis=1)\n            if np.array_equal(labels, old_labels):\n                break\n            for i in range(k):\n                centroids[i] = X[labels == i].mean(axis=0)\n            old_labels = labels\n        label_mapping = {old_label: new_label for (new_label, old_label) in enumerate(np.unique(labels))}\n        labels = [label_mapping[label] for label in labels]\n        return labels\n    if n_cluster == 1:\n        return [0] * data.shape[0]\n    n_samples = data.shape[0]\n    distances = pairwise_distances(data)\n    W = gaussian_kernel(distances, gamma)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    if method == 'normalized':\n        L = symmetric_normalized_laplacian(L)\n    (eig_vals, eig_vecs) = np.linalg.eigh(L)\n    sorted_indices = eig_vals.argsort()\n    eig_vecs_sorted = eig_vecs[:, sorted_indices]\n    k_eig_vecs = eig_vecs_sorted[:, :n_cluster]\n    if method == 'normalized':\n        norm = np.linalg.norm(k_eig_vecs, axis=1, keepdims=True)\n        k_eig_vecs = k_eig_vecs / norm\n    labels = k_means(k_eig_vecs, n_cluster)\n    return labels"}
{"task_id": 562, "completion_id": 1, "solution": "import numpy as np\ndef pairwise_distances(D):\n    \"\"\"Compute the matrix of all pairwise squared distances between data points.\"\"\"\n    n = D.shape[0]\n    distances = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                distances[i, j] = np.linalg.norm(D[i] - D[j]) ** 2\n    return distances\ndef k_means(data, n_clusters, initial_centroids=None):\n    \"\"\"Run k-means clustering in a deterministic way.\"\"\"\n    n = data.shape[0]\n    labels = np.zeros(n)\n    if initial_centroids is None:\n        centroids = data[:n_clusters]\n    else:\n        centroids = initial_centroids\n    changed = True\n    while changed:\n        changed = False\n        for i in range(n):\n            distances = np.linalg.norm(data[i] - centroids, axis=1)\n            nearest_centroid_idx = np.argmin(distances)\n            if labels[i] != nearest_centroid_idx:\n                labels[i] = nearest_centroid_idx\n                changed = True\n        if changed:\n            for j in range(n_clusters):\n                if np.any(labels == j):\n                    centroids[j] = np.mean(data[labels == j], axis=0)\n    order = np.argsort(np.unique(labels, return_index=True)[1])\n    new_labels = np.zeros_like(labels)\n    for (i, lab) in enumerate(order):\n        new_labels[labels == lab] = i\n    return new_labels\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    if n_cluster <= 1:\n        return [0] * len(data)\n    (n_samples, _) = data.shape\n    pairwise_distances_matrix = pairwise_distances(data)\n    W = np.exp(-gamma * pairwise_distances_matrix)\n    D = np.diag(W.sum(axis=1))\n    if method == 'normalized':\n        L = np.linalg.inv(np.sqrt(D)) @ (D - W) @ np.linalg.inv(np.sqrt(D))\n    else:\n        L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    idx = eigenvalues.argsort()\n    eigenvectors = eigenvectors[:, idx[:n_cluster]]\n    if method == 'normalized':\n        norm = np.linalg.norm(eigenvectors, axis=1, keepdims=True)\n        eigenvectors = eigenvectors / norm\n    labels = k_means(eigenvectors, n_cluster, initial_centroids=eigenvectors[:n_cluster])\n    return labels.tolist()"}
{"task_id": 562, "completion_id": 2, "solution": "import numpy as np\ndef pairwise_squared_distance(data: np.ndarray) -> np.ndarray:\n    \"\"\"Calculate pairwise squared distance matrix for the given data.\"\"\"\n    pairwise_sq_dists = np.sum(data ** 2, axis=1).reshape(-1, 1) + np.sum(data ** 2, axis=1) - 2 * np.dot(data, data.T)\n    np.fill_diagonal(pairwise_sq_dists, 0)\n    return pairwise_sq_dists\ndef gaussian_kernel(pairwise_sq_dists: np.ndarray, gamma: float=2.0) -> np.ndarray:\n    \"\"\"Apply Gaussian kernel to the pairwise squared distances.\"\"\"\n    return np.exp(-gamma * pairwise_sq_dists)\ndef unnormalized_laplacian(similarity: np.ndarray) -> np.ndarray:\n    \"\"\"Compute unnormalized Laplacian matrix.\"\"\"\n    return np.diag(np.sum(similarity, axis=1)) - similarity\ndef normalized_laplacian(similarity: np.ndarray) -> np.ndarray:\n    \"\"\"Compute normalized Laplacian matrix.\"\"\"\n    D_inv_sqrt = np.diag(1.0 / np.sqrt(np.sum(similarity, axis=1)))\n    unnormalized_L = unnormalized_laplacian(similarity)\n    return np.dot(np.dot(D_inv_sqrt, unnormalized_L), D_inv_sqrt)\ndef spectral_transform(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> np.ndarray:\n    \"\"\"Perform spectral transformation on the data using the specified method.\"\"\"\n    pairwise_sq_dists = pairwise_squared_distance(data)\n    similarity = gaussian_kernel(pairwise_sq_dists, gamma)\n    if method == 'normalized':\n        laplacian = normalized_laplacian(similarity)\n    else:\n        laplacian = unnormalized_laplacian(similarity)\n    (eig_values, eig_vectors) = np.linalg.eigh(laplacian)\n    eig_vectors = eig_vectors[:, eig_values.argsort()][:, :n_cluster]\n    if method == 'normalized':\n        eig_vectors /= np.linalg.norm(eig_vectors, axis=1)[:, np.newaxis]\n    return eig_vectors\ndef deterministic_k_means(data: np.ndarray, n_cluster: int, init_centroids: np.ndarray) -> np.ndarray:\n    \"\"\"Run k-means clustering on the transformed data.\"\"\"\n    centroids = init_centroids\n    old_labels = None\n    while True:\n        dists = np.sum((data[:, np.newaxis, :] - centroids) ** 2, axis=2)\n        labels = np.argmin(dists, axis=1)\n        if np.array_equal(labels, old_labels):\n            break\n        new_centroids = np.array([data[labels == k].mean(axis=0) for k in range(n_cluster)])\n        centroids = np.where(np.isnan(new_centroids), centroids, new_centroids)\n        old_labels = labels.copy()\n    return labels\ndef relabel_clusters(labels: np.ndarray) -> np.ndarray:\n    \"\"\"Relabel cluster ids so they start from 0 and are sorted according to the initial sample order.\"\"\"\n    unique_labels = np.unique(labels)\n    new_labels_map = {label: i for (i, label) in enumerate(unique_labels)}\n    new_labels = np.array([new_labels_map[label] for label in labels])\n    return new_labels\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    eig_vectors = spectral_transform(data, n_cluster, gamma, method)\n    initial_centroids = eig_vectors[:n_cluster]\n    labels = deterministic_k_means(eig_vectors, n_cluster, initial_centroids)\n    labels = relabel_clusters(labels)\n    return list(labels)"}
{"task_id": 562, "completion_id": 3, "solution": "import numpy as np\ndef build_similarity_graph(data: np.ndarray, gamma: float) -> np.ndarray:\n    \"\"\"Build a similarity graph using Gaussian kernel.\"\"\"\n    pairwise_distances = np.sum(data ** 2, axis=1, keepdims=True) + np.sum(data ** 2, axis=1) - 2 * np.dot(data, data.T)\n    similarity_graph = np.exp(-gamma * pairwise_distances)\n    return similarity_graph\ndef compute_laplacian(similarity_graph: np.ndarray, method: str) -> np.ndarray:\n    \"\"\"Compute the Laplacian matrix.\"\"\"\n    degree = np.sum(similarity_graph, axis=1)\n    if method == 'unnormalized':\n        return np.diag(degree) - similarity_graph\n    elif method == 'normalized':\n        sqrt_degree_inv = np.diag(1.0 / np.sqrt(degree))\n        laplacian = np.dot(np.dot(sqrt_degree_inv, np.diag(degree) - similarity_graph), sqrt_degree_inv)\n        return laplacian\n    else:\n        raise ValueError(\"Invalid method specified. Use 'unnormalized' or 'normalized'.\")\ndef deterministic_kmeans(data: np.ndarray, k: int) -> np.ndarray:\n    \"\"\"Run deterministic k-means on the data.\"\"\"\n    centroids = data[:k].copy()\n    old_labels = None\n    while True:\n        distances = np.sum((data[:, np.newaxis] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        if np.array_equal(labels, old_labels):\n            break\n        for i in range(k):\n            if (labels == i).any():\n                centroids[i] = np.mean(data[labels == i], axis=0)\n        old_labels = labels.copy()\n    order = np.argsort(np.min(np.argwhere(labels == np.arange(k)), axis=1))\n    labels_correct_order = np.zeros_like(labels)\n    for (newlabel, oldlabel) in enumerate(order):\n        labels_correct_order[labels == oldlabel] = newlabel\n    return labels_correct_order\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    similarity_graph = build_similarity_graph(data, gamma)\n    laplacian = compute_laplacian(similarity_graph, method)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(laplacian)\n    if method == 'normalized':\n        eigenvectors = eigenvectors[:, :n_cluster] / np.linalg.norm(eigenvectors[:, :n_cluster], axis=0)\n    else:\n        eigenvectors = eigenvectors[:, :n_cluster]\n    labels = deterministic_kmeans(eigenvectors, n_cluster)\n    return labels.tolist()\ndata = np.random.rand(100, 2)\nn_clusters = 5\ngamma = 2.0\nmethod = 'normalized'\nlabels = spectral_clustering(data, n_clusters, gamma, method)"}
{"task_id": 562, "completion_id": 4, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    (N, _) = data.shape\n    pairwise_distances = np.linalg.norm(data[:, None] - data, axis=2) ** 2\n    W = np.exp(-gamma * pairwise_distances)\n    D = np.diag(np.sum(W, axis=1))\n    if method == 'normalized':\n        D_inv_half = np.diag(1.0 / np.sqrt(np.diag(D)))\n        L = D_inv_half @ (D - W) @ D_inv_half\n    else:\n        L = D - W\n    (eig_vals, eig_vecs) = np.linalg.eigh(L)\n    X = eig_vecs[:, :n_cluster]\n    if method == 'normalized':\n        norm_factor = np.sqrt((X ** 2).sum(axis=1)[:, np.newaxis])\n        norm_factor[norm_factor == 0] = 1\n        X = X / norm_factor\n    labels = k_means(X, n_cluster)\n    return [int(label) for label in labels]\ndef k_means(X: np.ndarray, n_cluster: int, max_iter: int=300) -> np.ndarray:\n    centroids = X[:n_cluster].copy()\n    for _ in range(max_iter):\n        dists = np.linalg.norm(X[:, :, np.newaxis] - centroids.T[np.newaxis, :, :], axis=1)\n        labels = np.argmin(dists, axis=1)\n        new_centroids = np.array([X[labels == k].mean(axis=0) for k in range(n_cluster)])\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    cluster_size = np.zeros(n_cluster)\n    for (idx, label) in enumerate(labels):\n        cluster_size[label] += idx\n    indices = np.argsort(cluster_size)\n    relabel = np.zeros(n_cluster, dtype=int)\n    relabel[indices] = np.arange(n_cluster)\n    return relabel[labels]\ndata = np.array([[1.0, 1.0], [1.5, 1.5], [2.2, 2.2], [2.5, 2.5], [1.3, 1.3], [2.7, 2.7]])\nn_cluster = 2\ngamma = 2.0\nmethod = 'unnormalized'\nlabels = spectral_clustering(data, n_cluster, gamma, method)"}
{"task_id": 562, "completion_id": 5, "solution": "import numpy as np\ndef gaussian_kernel(matrix, gamma=2.0):\n    squared_dist = -2 * matrix + np.sum(matrix, axis=1, keepdims=True) + np.sum(matrix.T, axis=0, keepdims=True)\n    return np.exp(-gamma * squared_dist)\ndef unnormalized_laplacian(similarity):\n    D = np.diag(np.sum(similarity, axis=1))\n    L = D - similarity\n    return L\ndef kmeans(data, k, niter=10):\n    centroids = data[:k].copy()\n    for _ in range(niter):\n        labels = np.argmin(np.linalg.norm(data[:, np.newaxis] - centroids, axis=2), axis=1)\n        for i in range(k):\n            if np.any(labels == i):\n                centroids[i] = np.mean(data[labels == i], axis=0)\n    relabel_map = dict(zip(range(k), sorted(range(k), key=lambda x: np.min(np.where(labels == x)))))\n    labels = [relabel_map[label] for label in labels]\n    return labels\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    if n_cluster == 1:\n        return [0] * data.shape[0]\n    similarity = gaussian_kernel(data @ data.T, gamma)\n    if method == 'unnormalized':\n        L = unnormalized_laplacian(similarity)\n    elif method == 'normalized':\n        D = np.diag(1 / np.sqrt(np.sum(similarity, axis=1)))\n        L = D @ unnormalized_laplacian(similarity) @ D\n    else:\n        raise ValueError(f\"Unknown method '{method}'\")\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    sorted_indices = np.argsort(eigenvalues)\n    eigenvectors = eigenvectors[:, sorted_indices[:n_cluster]]\n    if method == 'normalized':\n        eigenvectors = eigenvectors / np.linalg.norm(eigenvectors, axis=1, keepdims=True)\n    labels = kmeans(eigenvectors, n_cluster, niter=30)\n    return labels"}
{"task_id": 562, "completion_id": 6, "solution": "import numpy as np\ndef gaussian_similarity_matrix(data: np.ndarray, gamma: float=2.0) -> np.ndarray:\n    \"\"\"Compute Gaussian similarity matrix using the given data.\"\"\"\n    (N, _) = data.shape\n    dist_matrix = np.sum(data ** 2, axis=1)[:, np.newaxis] + np.sum(data ** 2, axis=1) - 2 * np.dot(data, data.T)\n    similarity_matrix = np.exp(-gamma * dist_matrix)\n    return similarity_matrix\ndef compute_laplacian(similarity_matrix: np.ndarray, method: str='unnormalized') -> np.ndarray:\n    \"\"\"Compute the Laplacian matrix.\"\"\"\n    D = np.diag(np.sum(similarity_matrix, axis=1))\n    L = D - similarity_matrix\n    if method == 'normalized':\n        D_inv_sqrt = np.linalg.inv(np.sqrt(D))\n        L = np.dot(np.dot(D_inv_sqrt, L), D_inv_sqrt)\n    return L\ndef k_means(eigenvectors: np.ndarray, n_cluster: int) -> list[int]:\n    \"\"\"Run k-means on the eigenvector matrix.\"\"\"\n    (N, _) = eigenvectors.shape\n    centroids = eigenvectors[:n_cluster].copy()\n    labels = np.zeros(N, dtype=int)\n    for _ in range(100):\n        distances = np.linalg.norm(eigenvectors[:, :, np.newaxis] - centroids.T, axis=1)\n        labels = np.argmin(distances, axis=1)\n        for i in range(n_cluster):\n            centroids[i] = np.mean(eigenvectors[labels == i], axis=0)\n    sorted_indices = np.argsort(np.argmax(eigenvectors, axis=0))\n    ordered_labels = np.zeros_like(labels)\n    for (i, idx) in enumerate(sorted_indices):\n        ordered_labels[labels == idx] = i\n    labels = ordered_labels.tolist()\n    return labels\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    similarity_matrix = gaussian_similarity_matrix(data, gamma)\n    L = compute_laplacian(similarity_matrix, method)\n    (eig_values, eig_vectors) = np.linalg.eigh(L)\n    if method == 'normalized':\n        eig_vectors /= np.linalg.norm(eig_vectors, axis=0)\n    eig_vectors = eig_vectors[:, :n_cluster]\n    labels = k_means(eig_vectors, n_cluster)\n    return labels"}
{"task_id": 562, "completion_id": 7, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    (N, _) = data.shape\n    if n_cluster == 1:\n        return [0] * N\n    pairwise_sq_dists = np.sum((data[:, np.newaxis, :] - data[np.newaxis, :, :]) ** 2, axis=-1)\n    W = np.exp(-gamma * pairwise_sq_dists)\n    D = np.diag(np.sum(W, axis=1))\n    if method == 'normalized':\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(np.diag(D)))\n        L = np.eye(N) - np.dot(np.dot(D_inv_sqrt, W), D_inv_sqrt)\n    else:\n        L = D - W\n    (eigvals, eigvecs) = np.linalg.eigh(L)\n    X_transformed = eigvecs[:, :n_cluster]\n    if method == 'normalized':\n        row_norms = np.linalg.norm(X_transformed, axis=1, keepdims=True)\n        X_transformed = X_transformed / row_norms\n    centroids = X_transformed[:n_cluster]\n    for _ in range(1000):\n        cluster_labels = np.argmin(np.linalg.norm(X_transformed[:, np.newaxis] - centroids, axis=-1), axis=1)\n        new_centroids = np.array([X_transformed[cluster_labels == k].mean(axis=0) for k in range(n_cluster)])\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    original_indices = np.argsort(cluster_labels)\n    sorted_centroids = cluster_labels[original_indices]\n    sort_order = np.argsort(original_indices[::n_cluster])\n    final_labels = np.zeros(N, dtype=int)\n    for (i, j) in enumerate(sort_order):\n        final_labels[sorted_centroids == i] = j\n    return list(final_labels)"}
{"task_id": 562, "completion_id": 8, "solution": "import numpy as np\ndef build_similarity_graph(data: np.ndarray, gamma: float=2.0) -> np.ndarray:\n    pairwise_distances = np.sum(data ** 2, axis=1).reshape(-1, 1) + np.sum(data ** 2, axis=1) - 2 * np.dot(data, data.T)\n    return np.exp(-gamma * pairwise_distances)\ndef laplacian_matrix(W: np.ndarray, method: str='unnormalized') -> np.ndarray:\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    if method == 'normalized':\n        sqrt_D_inv = np.diag(1.0 / np.sqrt(np.diag(D)))\n        L = np.dot(sqrt_D_inv, np.dot(L, sqrt_D_inv))\n    return L\ndef spectral_clustering_kmeans(X: np.ndarray, n_cluster: int) -> list[int]:\n    centroids = X[:n_cluster]\n    old_labels = np.zeros(X.shape[0], dtype=int)\n    while True:\n        labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - centroids, axis=-1), axis=-1)\n        if np.array_equal(labels, old_labels):\n            break\n        old_labels = labels\n        for i in range(n_cluster):\n            centroids[i] = np.mean(X[labels == i], axis=0)\n    relabel_map = {old: new for (new, old) in enumerate(np.unique(labels))}\n    return [relabel_map[l] for l in labels]\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    if n_cluster == 1:\n        return [0] * len(data)\n    W = build_similarity_graph(data, gamma)\n    L = laplacian_matrix(W, method)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    eigenvectors = eigenvectors[:, :n_cluster]\n    if method == 'normalized':\n        eigenvectors /= np.linalg.norm(eigenvectors, axis=1)[:, np.newaxis]\n    return spectral_clustering_kmeans(eigenvectors, n_cluster)\ndata = np.random.rand(100, 2)\nn_cluster = 3\ngamma = 2.0\nmethod = 'unnormalized'\nlabels = spectral_clustering(data, n_cluster, gamma, method)"}
{"task_id": 562, "completion_id": 9, "solution": "import numpy as np\ndef gaussian_kernel(dist_matrix, gamma=2.0):\n    \"\"\"Compute the similarity matrix using the Gaussian kernel.\"\"\"\n    return np.exp(-gamma * dist_matrix)\ndef pairwise_squared_distance(data):\n    \"\"\"Compute the pairwise squared distance matrix.\"\"\"\n    norms = np.sum(data ** 2, axis=1)\n    norms_row = norms.reshape((norms.shape[0], 1))\n    norms_col = norms.reshape((1, norms.shape[0]))\n    dot_products = np.dot(data, data.T)\n    return norms_row - 2 * dot_products + norms_col\ndef k_means(eigenvector_matrix, n_clusters):\n    \"\"\"Run a simple k-means on the given data.\"\"\"\n    centroids = eigenvector_matrix[:n_clusters]\n    labels = None\n    while True:\n        distances = np.sqrt(((eigenvector_matrix[:, np.newaxis] - centroids) ** 2).sum(axis=2))\n        new_labels = np.argmin(distances, axis=1)\n        if np.array_equal(labels, new_labels):\n            break\n        labels = new_labels\n        for i in range(n_clusters):\n            centroids[i] = eigenvector_matrix[labels == i].mean(axis=0)\n    sorted_clusters = np.argsort(np.unique(labels))[np.unique(labels)]\n    relabel_map = {old_label: new_label for (new_label, old_label) in enumerate(sorted_clusters)}\n    return [relabel_map[label] for label in labels]\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\"\"\"\n    if n_cluster == 1:\n        return [0] * data.shape[0]\n    dist_matrix = pairwise_squared_distance(data)\n    similarities = gaussian_kernel(dist_matrix, gamma)\n    if method == 'normalized':\n        d = np.diag(similarities.sum(axis=0))\n        sqrt_d_inv = np.sqrt(np.linalg.inv(d))\n        laplacian = np.eye(similarities.shape[0]) - np.dot(np.dot(sqrt_d_inv, similarities), sqrt_d_inv)\n    else:\n        degree = np.sum(similarities, axis=0)\n        degree_matrix = np.diag(degree)\n        laplacian = degree_matrix - similarities\n    (eigvals, eigvecs) = np.linalg.eigh(laplacian)\n    eigvecs = eigvecs[:, eigvals.argsort()[:n_cluster]]\n    if method == 'normalized':\n        eigvecs /= np.linalg.norm(eigvecs, axis=1).reshape(-1, 1)\n    labels = k_means(eigvecs, n_cluster)\n    return labels"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0\n    G = np.dot(X_data, X_data.T)\n    for iteration in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.dot(alpha * y_data, X_data)\n    w = [round(x, 4) for x in w]\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 563, "completion_id": 1, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0\n    G = np.dot(X_data, X_data.T)\n    iter_count = 0\n    update_happened = True\n    while update_happened and iter_count < max_iter:\n        update_happened = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                update_happened = True\n        iter_count += 1\n    w = np.round(np.sum(alpha[:, np.newaxis] * y_data[:, np.newaxis] * X_data, axis=0), 4).tolist()\n    b = np.round(b, 4)\n    return (w, b)\nX_data = np.array([[3, 0], [0, 4], [1, 2], [1, 3], [5, 4]])\ny_data = np.array([1, 1, 1, -1, -1])"}
{"task_id": 563, "completion_id": 2, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n    \n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n        \n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.around(np.sum(alpha[:, np.newaxis] * y_data[:, np.newaxis] * X_data, axis=0), 4).tolist()\n    b = np.around(b, 4)\n    return (w, b)"}
{"task_id": 563, "completion_id": 3, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        changes = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                changes = True\n        if not changes:\n            break\n    w = np.round(np.sum((alpha * y_data)[:, np.newaxis] * X_data, axis=0), 4).tolist()\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 563, "completion_id": 4, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = len(y_data)\n    alpha = np.zeros(N)\n    b = 0\n    G = np.dot(X_data, X_data.T)\n    no_update = False\n    iter_count = 0\n    while not no_update and iter_count < max_iter:\n        iter_count += 1\n        no_update = True\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                no_update = False\n    w = np.dot(alpha * y_data, X_data)\n    w = [round(val, 4) for val in w]\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 563, "completion_id": 5, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updates = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updates = True\n        if not updates:\n            break\n    w = np.round(np.sum(np.atleast_2d(alpha * y_data).T * X_data, axis=0), 4)\n    b = np.round(b, 4)\n    return (w.tolist(), b)"}
{"task_id": 563, "completion_id": 6, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        modified = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                modified = True\n        if not modified:\n            break\n    w = np.round(np.sum(alpha[:, None] * y_data[:, None] * X_data, axis=0), decimals=4)\n    b = np.round(b, decimals=4)\n    return (w.tolist(), b)\nX_data = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\ny_data = np.array([-1, 1, 1, 1])\neta = 1.0\nmax_iter = 50"}
{"task_id": 563, "completion_id": 7, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        any_update = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                any_update = True\n        if not any_update:\n            break\n    w = np.sum(alpha[:, np.newaxis] * y_data[:, np.newaxis] * X_data, axis=0)\n    w = [round(x, 4) for x in w]\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 563, "completion_id": 8, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.round(np.sum((alpha * y_data).reshape(-1, 1) * X_data, axis=0), 4).tolist()\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 563, "completion_id": 9, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    converged = False\n    for _ in range(max_iter):\n        changed = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                changed = True\n        if not changed:\n            converged = True\n            break\n    w = np.round((alpha * y_data).dot(X_data), 4).tolist()\n    b = np.round(b, 4)\n    return (w, b)\nX_data = np.array([[0.5, 1.0], [1.3, 1.0], [1.0, -1.0], [-1.0, -1.3]])\ny_data = np.array([1, 1, -1, -1])"}
{"task_id": 564, "completion_id": 0, "solution": "class Node:\n\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child if child is not None else []\ndef predict_sample(root: Node, features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    elif task_type == 'classification':\n        target_value = features[root.label]\n        for child in root.child:\n            if child.x == target_value:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        feature_value = features[root.label]\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 564, "completion_id": 1, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    feature_value = features[root.label]\n    if task_type == 'classification':\n        for child in root.child:\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 564, "completion_id": 2, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        for child in root.child:\n            if child.x == features[root.label]:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    if task_type == 'regression':\n        if features[root.label] <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 564, "completion_id": 3, "solution": "class Node:\n\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child if child is not None else []\ndef predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n\n    def find_leaf_classification(node: Node):\n        if node.y is not None:\n            return node.y\n        target_value = features[node.label]\n        for child in node.child:\n            if child.x == target_value:\n                return find_leaf_classification(child)\n        return find_leaf_classification(node.child[1])\n\n    def find_leaf_regression(node: Node):\n        if node.y is not None:\n            return node.y\n        feature_value = features[node.label]\n        if feature_value <= node.s:\n            return find_leaf_regression(node.child[0])\n        else:\n            return find_leaf_regression(node.child[1])\n    if task_type == 'classification':\n        return find_leaf_classification(root)\n    elif task_type == 'regression':\n        return find_leaf_regression(root)\n    else:\n        raise ValueError('Invalid task type specified')"}
{"task_id": 564, "completion_id": 4, "solution": "class Node:\n\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child\ndef predict_sample(root: Node, features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        value_to_match = features[root.label]\n        for child in root.child:\n            if child.x == value_to_match:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    else:\n        split_point = root.s\n        if features[root.label] <= split_point:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 564, "completion_id": 5, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n    \n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n    \n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        feature_value = features[root.label]\n        for child_node in root.child:\n            if child_node.x == feature_value:\n                return predict_sample(child_node, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        feature_value = features[root.label]\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 564, "completion_id": 6, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    elif task_type == 'classification':\n        for child in root.child:\n            if child.x == features[root.label]:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        if features[root.label] <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\nfeatures = [1.5]"}
{"task_id": 564, "completion_id": 7, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    elif task_type == 'classification':\n        index = root.label\n        for child in root.child:\n            if child.x == features[index]:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        index = root.label\n        if features[index] <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\n    else:\n        raise ValueError(\"task_type must be 'classification' or 'regression'\")"}
{"task_id": 564, "completion_id": 8, "solution": "from typing import Any, TypeVar, List, Union\ndef predict_sample(root: 'Node', features: List[Any], task_type: str) -> Any:\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        value = features[root.label]\n        for child in root.child:\n            if child.x == value:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        value = features[root.label]\n        if value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\nfeatures = [0]"}
{"task_id": 564, "completion_id": 9, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        for child in root.child:\n            if child.x == features[root.label]:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    if task_type == 'regression':\n        if features[root.label] <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef entropy(labels):\n    \"\"\"Calculate the entropy of a given list of labels.\"\"\"\n    (value, counts) = np.unique(labels, return_counts=True)\n    norm_counts = counts / counts.sum()\n    return -np.sum(norm_counts * np.log2(norm_counts))\ndef conditional_entropy(X, y, feature_index):\n    \"\"\"Calculate the conditional entropy H(y|A) for a given feature index.\"\"\"\n    feature_values = X[:, feature_index]\n    (values, counts) = np.unique(feature_values, return_counts=True)\n    conditional_entropy_val = 0\n    for (value, count) in zip(values, counts):\n        subset_y = y[feature_values == value]\n        conditional_entropy_val += count / len(y) * entropy(subset_y)\n    return conditional_entropy_val\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    assert X.shape[0] == y.shape[0], 'Number of instances in X and y do not match.'\n    y_entropy = entropy(y)\n    max_information_gain = -math.inf\n    best_feature_index = -1\n    for i in range(X.shape[1]):\n        feature_cond_entropy = conditional_entropy(X, y, i)\n        information_gain = y_entropy - feature_cond_entropy\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = i\n    return (best_feature_index, round(max_information_gain, 6))"}
{"task_id": 565, "completion_id": 1, "solution": "import numpy as np\nimport math\ndef entropy(labels):\n    \"\"\"Calculate the entropy of a label distribution.\"\"\"\n    probabilities = np.bincount(labels) / len(labels)\n    h = -np.sum([p * math.log(p, 2) for p in probabilities if p > 0])\n    return h\ndef conditional_entropy(feature, labels):\n    \"\"\"Calculate the conditional entropy H(Y|X).\"\"\"\n    feature_unique = np.unique(feature)\n    ce = 0\n    for val in feature_unique:\n        subset = labels[feature == val]\n        ce += len(subset) / len(labels) * entropy(subset)\n    return ce\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    h_y = entropy(y)\n    max_ig = -1\n    best_feature_idx = 0\n    for i in range(X.shape[1]):\n        h_y_given_x = conditional_entropy(X[:, i], y)\n        ig = h_y - h_y_given_x\n        if ig > max_ig:\n            max_ig = ig\n            best_feature_idx = i\n    return (best_feature_idx, round(max_ig, 6))"}
{"task_id": 565, "completion_id": 2, "solution": "import numpy as np\nimport math\ndef entropy(y: np.ndarray) -> float:\n    \"\"\"Calculate the entropy of the given label array.\"\"\"\n    (unique_labels, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    return -np.sum(probabilities * np.log2(probabilities))\ndef conditional_entropy(X: np.ndarray, y: np.ndarray, feature_index: int) -> float:\n    \"\"\"Calculate the conditional entropy of label y given feature at feature_index.\"\"\"\n    (unique_feature_values, feature_counts) = np.unique(X[:, feature_index], return_counts=True)\n    feature_probabilities = feature_counts / len(X)\n    ce = 0.0\n    for (value, prob) in zip(unique_feature_values, feature_probabilities):\n        y_given_x = y[X[:, feature_index] == value]\n        e = entropy(y_given_x)\n        ce += prob * e\n    return ce\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    base_entropy = entropy(y)\n    max_info_gain = -1\n    best_feature_index = -1\n    for col in range(X.shape[1]):\n        feature_entropy = conditional_entropy(X, y, col)\n        info_gain = base_entropy - feature_entropy\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_feature_index = col\n    return (best_feature_index, round(max_info_gain, 6))\nX = np.array([[0, 1, 1, 1, 1], [0, 2, 1, 1, 1], [0, 1, 0, 0, 1], [1, 3, 0, 0, 0]])\ny = np.array([2, 2, 0, 0])"}
{"task_id": 565, "completion_id": 3, "solution": "import numpy as np\nimport math\ndef entropy(y: np.ndarray) -> float:\n    \"\"\"Calculate the entropy of a 1D numpy array.\"\"\"\n    label_counts = np.bincount(y)\n    probabilities = label_counts / len(y)\n    return -np.sum([p * math.log2(p) for p in probabilities if p > 0])\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    H_y = entropy(y)\n    best_feature_index = 0\n    max_information_gain = 0\n    for feature_index in range(X.shape[1]):\n        A = X[:, feature_index]\n        unique_A_values = np.unique(A)\n        H_y_given_A = 0\n        for value in unique_A_values:\n            y_given_A = y[A == value]\n            prob = len(y_given_A) / len(y)\n            H_y_given_A += prob * entropy(y_given_A)\n        information_gain = H_y - H_y_given_A\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    return (best_feature_index, round(max_information_gain, 6))"}
{"task_id": 565, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef entropy(labels: np.ndarray) -> float:\n    (_, counts) = np.unique(labels, return_counts=True)\n    probabilities = counts / counts.sum()\n    return -np.sum(probabilities * np.log2(probabilities))\ndef conditional_entropy(X: np.ndarray, y: np.ndarray, feature_index: int) -> float:\n    feature = X[:, feature_index]\n    values = np.unique(feature)\n    total_samples = len(y)\n    cond_ent = 0.0\n    for value in values:\n        sub_y = y[feature == value]\n        ent = entropy(sub_y)\n        cond_ent += len(sub_y) / total_samples * ent\n    return cond_ent\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    best_feature_index = 0\n    max_information_gain = -math.inf\n    overall_entropy = entropy(y)\n    for feature_index in range(X.shape[1]):\n        cond_ent = conditional_entropy(X, y, feature_index)\n        information_gain = overall_entropy - cond_ent\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    return (best_feature_index, round(max_information_gain, 6))\nX = np.array([[1, 2, 3], [0, 2, 3], [1, 0, 2], [0, 2, 1], [1, 2, 2]])\ny = np.array([0, 1, 0, 1, 0])"}
{"task_id": 565, "completion_id": 5, "solution": "import numpy as np\nimport math\ndef entropy(labels: np.ndarray) -> float:\n    \"\"\"Calculate the entropy of a label distribution.\"\"\"\n    (value, counts) = np.unique(labels, return_counts=True)\n    probabilities = counts / counts.sum()\n    return -np.sum(probabilities * np.log2(probabilities))\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    original_entropy = entropy(y)\n    max_information_gain = -np.inf\n    best_feature_index = -1\n    for feature_index in range(X.shape[1]):\n        feature_values = X[:, feature_index]\n        conditional_entropy = 0.0\n        for value in np.unique(feature_values):\n            indices = feature_values == value\n            conditional_entropy += np.sum(indices) / len(feature_values) * entropy(y[indices])\n        information_gain = original_entropy - conditional_entropy\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    return (best_feature_index, round(max_information_gain, 6))\nX = np.array([[0, 1, 0], [1, 2, 1], [0, 1, 0], [1, 2, 1]])\ny = np.array([0, 1, 0, 1])"}
{"task_id": 565, "completion_id": 6, "solution": "import numpy as np\nimport math\ndef entropy(y: np.ndarray) -> float:\n    (_, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    return -np.sum(probabilities * np.log2(probabilities + 1e-10))\ndef conditional_entropy(X: np.ndarray, y: np.ndarray, feature_index: int) -> float:\n    unique_values = np.unique(X[:, feature_index])\n    total_entries = len(y)\n    conditional_entropy = 0.0\n    for value in unique_values:\n        subset_y = y[X[:, feature_index] == value]\n        subset_entropy = entropy(subset_y)\n        conditional_probability = len(subset_y) / total_entries\n        conditional_entropy += conditional_probability * subset_entropy\n    return conditional_entropy\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    initial_entropy = entropy(y)\n    max_info_gain = -1.0\n    best_feature = -1\n    for feature_index in range(X.shape[1]):\n        conditional_ent = conditional_entropy(X, y, feature_index)\n        info_gain = initial_entropy - conditional_ent\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_feature = feature_index\n    return (best_feature, round(max_info_gain, 6))"}
{"task_id": 565, "completion_id": 7, "solution": "import numpy as np\nimport math\ndef entropy(labels):\n    \"\"\"Calculate the entropy of a given list of labels.\"\"\"\n    (value, counts) = np.unique(labels, return_counts=True)\n    freqs = counts.astype('float') / len(labels)\n    return -np.sum(freqs * np.log2(freqs))\ndef conditional_entropy(y, X_feature):\n    \"\"\"Calculate the conditional entropy of labels given a feature.\"\"\"\n    unique_values = np.unique(X_feature)\n    ent = 0.0\n    for value in unique_values:\n        mask = X_feature == value\n        sub_y = y[mask]\n        ent += len(sub_y) / len(X_feature) * entropy(sub_y)\n    return ent\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    info_gains = []\n    h_y = entropy(y)\n    for feature_index in range(X.shape[1]):\n        h_y_given_x = conditional_entropy(y, X[:, feature_index])\n        info_gain = h_y - h_y_given_x\n        info_gains.append(info_gain)\n    best_feature_index = np.argmax(info_gains)\n    max_information_gain = round(info_gains[best_feature_index], 6)\n    return (best_feature_index, max_information_gain)"}
{"task_id": 565, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef entropy(labels):\n    \"\"\"Calculate the entropy for the labels.\"\"\"\n    (value, counts) = np.unique(labels, return_counts=True)\n    probabilities = counts / counts.sum()\n    en = -np.sum(probabilities * np.log2(probabilities))\n    return en\ndef conditional_entropy(X, y, feature_col_index):\n    \"\"\"Calculate the conditional entropy H(y|X[:, feature_col_index]).\"\"\"\n    unique_values = np.unique(X[:, feature_col_index])\n    total_instances = X.shape[0]\n    ce = 0\n    for value in unique_values:\n        sub_y = y[X[:, feature_col_index] == value]\n        count = sub_y.shape[0]\n        ce += count / total_instances * entropy(sub_y)\n    return ce\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    original_entropy = entropy(y)\n    best_feature_index = -1\n    max_information_gain = -1\n    for feature_index in range(X.shape[1]):\n        ce = conditional_entropy(X, y, feature_index)\n        ig = original_entropy - ce\n        if ig > max_information_gain:\n            max_information_gain = ig\n            best_feature_index = feature_index\n    return (best_feature_index, round(max_information_gain, 6))\nX = np.array([[0, 1, 1], [0, 1, 0], [1, 0, 0], [1, 1, 0]])\ny = np.array([0, 1, 1, 0])"}
{"task_id": 565, "completion_id": 9, "solution": "import numpy as np\nimport math\ndef entropy(y):\n    \"\"\"Calculate the entropy of a label vector.\"\"\"\n    (value, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / counts.sum()\n    return -np.sum(probabilities * np.log2(probabilities))\ndef conditional_entropy(X, y):\n    \"\"\"Calculate the conditional entropy of a feature vector X given a label vector y.\"\"\"\n    total_count = X.shape[0]\n    entropies = []\n    for value in np.unique(X):\n        y_subset = y[X == value]\n        class_entropies = entropy(y_subset)\n        entropies.append(class_entropies * (y_subset.size / total_count))\n    return np.sum(entropies)\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    entropy_y = entropy(y)\n    best_feature_idx = 0\n    max_information_gain = -1\n    for feature_idx in range(X.shape[1]):\n        cond_entropy = conditional_entropy(X[:, feature_idx], y)\n        information_gain = entropy_y - cond_entropy\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_idx = feature_idx\n    return (best_feature_idx, round(max_information_gain, 6))\nX = np.array([[0, 1, 0], [1, 2, 1], [0, 0, 0], [1, 0, 1], [0, 1, 1], [1, 1, 0]])\ny = np.array([0, 1, 0, 1, 1, 1])"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    anomalies = []\n    if epsilon == 0:\n        return anomalies\n    height_limit = math.ceil(math.log2(sample_size))\n    c_values = [0] + [2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n for n in range(2, n_samples + 1)]\n\n    def split_range(feature):\n        (min_val, max_val) = (data[:, feature].min(), data[:, feature].max())\n        return np.random.uniform(min_val, max_val)\n\n    def grow_tree(tree, depth, selected_indices):\n        if depth >= height_limit or len(selected_indices) <= 1:\n            return (len(selected_indices), c_values[len(selected_indices)])\n        feature = np.random.randint(0, n_features)\n        threshold = split_range(feature)\n        left_mask = data[selected_indices, feature] < threshold\n        left_indices = selected_indices[left_mask]\n        right_indices = selected_indices[~left_mask]\n        if len(left_indices) > 0:\n            (tree['left'], left_count) = grow_tree({}, depth + 1, left_indices)\n        else:\n            left_count = len(right_indices)\n        if len(right_indices) > 0:\n            (tree['right'], right_count) = grow_tree({}, depth + 1, right_indices)\n        else:\n            right_count = len(left_indices)\n        return ((feature, threshold), left_count, right_count)\n\n    def traverse_tree(tree, data_point, depth=1):\n        if tree == (1,) or tree == (2,):\n            return depth + c_values[tree[0] - 1]\n        (feature, threshold) = tree\n        if data_point[feature] <= threshold:\n            child_tree = traverse_tree(tree['left'], data_point, depth + 1)\n        else:\n            child_tree = traverse_tree(tree['right'], data_point, depth + 1)\n        return child_tree\n    trees = []\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            tree_indices = np.arange(n_samples)\n        else:\n            tree_indices = np.random.choice(np.arange(n_samples), size=sample_size, replace=False)\n        (tree, _, _) = grow_tree({}, 1, tree_indices)\n        trees.append(tree)\n    avg_path_lengths = np.zeros(n_samples)\n    for i in range(n_samples):\n        path_length = np.mean([traverse_tree(tree, data[i]) for tree in trees])\n        avg_path_lengths[i] = path_length\n    avg_path_lengths = 2 ** (-avg_path_lengths / (2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples))\n    threshold = np.percentile(avg_path_lengths, (1 - epsilon) * 100)\n    anomalies = [i for (i, score) in enumerate(avg_path_lengths) if score > threshold]\n    return sorted(anomalies)"}
{"task_id": 566, "completion_id": 1, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n\n    def c(n):\n        if n == 1:\n            return 0\n        else:\n            return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n    (n_samples, n_features) = data.shape\n    height_limit = math.ceil(math.log2(sample_size))\n    n_samples_tree = min(n_samples, sample_size)\n    path_length = np.zeros(n_samples)\n    phi = 2 * math.log(n_samples_tree - 1) - 2 * ((n_samples_tree - 1) / n_samples_tree)\n    for _ in range(n_trees):\n        tree_samples_idx = np.random.choice(n_samples, n_samples_tree, replace=False)\n        tree_data = data[tree_samples_idx]\n        node_indices = list(range(n_samples_tree))\n        node_stack = [(0, node_indices, 0)]\n        while node_stack:\n            (parent_idx, node_indices, depth) = node_stack.pop()\n            node_size = len(node_indices)\n            if node_size > 1 and depth < height_limit:\n                feature_idx = np.random.randint(n_features)\n                threshold = np.random.uniform(tree_data[node_indices, feature_idx].min(), tree_data[node_indices, feature_idx].max())\n                left_indices = [idx for idx in node_indices if tree_data[idx, feature_idx] < threshold]\n                right_indices = [idx for idx in node_indices if tree_data[idx, feature_idx] >= threshold]\n                for child_indices in (left_indices, right_indices):\n                    if child_indices:\n                        node_stack.append((parent_idx, child_indices, depth + 1))\n            else:\n                for node_index in node_indices:\n                    original_idx = tree_samples_idx[node_index]\n                    path_length[original_idx] += (depth + c(node_size)) / n_trees\n    scores = np.power(2, -(path_length / phi))\n    outlier_threshold = np.sort(scores)[-math.ceil(epsilon * n_samples)]\n    outlier_indices = np.where(scores >= outlier_threshold)[0].tolist()\n    return sorted(outlier_indices)"}
{"task_id": 566, "completion_id": 2, "solution": "import numpy as np\nimport math\ndef get_path_length(tree, sample, visited):\n    \"\"\"Calculate the path length based on the isolation tree.\"\"\"\n    if not isinstance(tree, dict):\n        return visited + c(len(tree))\n    else:\n        (split_feature, split_val) = list(tree.keys())[0]\n        if sample[split_feature] <= split_val:\n            return get_path_length(tree[split_feature, split_val, 'left'], sample, visited + 1)\n        else:\n            return get_path_length(tree[split_feature, split_val, 'right'], sample, visited + 1)\ndef c(n):\n    \"\"\"Approximation of the expected path length of unsuccessful searches.\"\"\"\n    if n <= 1:\n        return 0\n    return 2 * np.log(n - 1) + 0.5772156649 - 2 * ((n - 1) / n)\ndef grow_tree(data, height_limit, cur_height=0):\n    \"\"\"Build a binary tree and isolate nodes.\"\"\"\n    if cur_height >= height_limit or len(data) <= 1:\n        return data\n    feature = np.random.randint(data.shape[1])\n    (min_val, max_val) = (np.min(data[:, feature]), np.max(data[:, feature]))\n    if min_val == max_val:\n        return data\n    split_val = np.random.uniform(min_val, max_val)\n    left_indices = data[:, feature] <= split_val\n    right_indices = data[:, feature] > split_val\n    if not np.any(left_indices) or not np.any(right_indices):\n        return data\n    left_data = data[left_indices]\n    right_data = data[right_indices]\n    return {(feature, split_val): {'left': grow_tree(left_data, height_limit, cur_height + 1), 'right': grow_tree(right_data, height_limit, cur_height + 1)}}\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    if epsilon == 0 or n_trees == 0:\n        return []\n    n_samples = data.shape[0]\n    height_limit = math.ceil(math.log2(sample_size))\n    all_trees = []\n    for _ in range(n_trees):\n        indices = np.random.choice(range(n_samples), min(sample_size, n_samples), replace=False)\n        sub_data = data[indices]\n        is_tree = grow_tree(sub_data, height_limit)\n        all_trees.append(is_tree)\n    avg_path_lengths = np.zeros(n_samples)\n    for idx in range(n_samples):\n        sample = data[idx]\n        lengths = [get_path_length(tree, sample, 0) for tree in all_trees]\n        avg_path_lengths[idx] = np.mean(lengths)\n    phi = 2 * np.log(sample_size - 1) - 2 * (sample_size - 1) / sample_size\n    scores = 2 ** (-avg_path_lengths / phi)\n    num_outliers = int(np.ceil(epsilon * n_samples))\n    outlier_indices = np.argsort(scores)[-num_outliers:]\n    return sorted(outlier_indices.tolist())"}
{"task_id": 566, "completion_id": 3, "solution": "import numpy as np\nimport math\ndef tree_path_length(tree, row, depth=0):\n    if isinstance(tree, Leaf):\n        return depth + c(len(tree.samples))\n    (feature, threshold) = tree\n    if row[feature] <= threshold:\n        return tree_path_length(tree[2], row, depth + 1)\n    else:\n        return tree_path_length(tree[3], row, depth + 1)\ndef c(n):\n    if n == 1:\n        return 0\n    return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\ndef build_tree(data, height_limit):\n    if len(data) <= 1 or height_limit == 0:\n        return Leaf(data)\n    feature = np.random.randint(data.shape[1])\n    (min_val, max_val) = (data[:, feature].min(), data[:, feature].max())\n    if min_val == max_val:\n        return Leaf(data)\n    threshold = np.random.uniform(min_val, max_val)\n    left = data[data[:, feature] <= threshold]\n    right = data[data[:, feature] > threshold]\n    return (feature, threshold, build_tree(left, height_limit - 1), build_tree(right, height_limit - 1))\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    height_limit = math.ceil(math.log2(sample_size))\n    trees = []\n    for _ in range(n_trees):\n        if sample_size >= data.shape[0]:\n            sample = data\n        else:\n            sample_indices = np.random.choice(data.shape[0], sample_size, replace=False)\n            sample = data[sample_indices]\n        trees.append(build_tree(sample, height_limit))\n    avg_path_lengths = []\n    for i in range(data.shape[0]):\n        path_length = sum((tree_path_length(tree, data[i]) for tree in trees)) / n_trees\n        avg_path_lengths.append(path_length)\n    phi = 2 * math.log(data.shape[0] - 1) - 2 * (data.shape[0] - 1) / data.shape[0]\n    anomaly_scores = [2 ** (-path / phi) for path in avg_path_lengths]\n    cutoff = int(math.ceil(epsilon * data.shape[0]))\n    outliers = np.argsort(anomaly_scores)[-cutoff:] if cutoff > 0 else []\n    return sorted(outliers.tolist())\nclass Leaf:\n\n    def __init__(self, samples):\n        self.samples = samples"}
{"task_id": 566, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    np.random.seed(42)\n\n    def build_tree(data, depth=0):\n        if data.shape[0] <= 1 or depth >= height_limit:\n            return (data, depth)\n        feature_idx = np.random.randint(data.shape[1])\n        min_val = np.min(data[:, feature_idx])\n        max_val = np.max(data[:, feature_idx])\n        if min_val == max_val:\n            return (data, depth)\n        threshold = np.random.uniform(min_val, max_val)\n        left_indices = data[:, feature_idx] <= threshold\n        left_data = data[left_indices]\n        right_data = data[~left_indices]\n        left_tree = build_tree(left_data, depth + 1)\n        right_tree = build_tree(right_data, depth + 1)\n        return ((feature_idx, threshold, left_tree, right_tree), depth)\n\n    def path_length(tree, x, depth=0):\n        if isinstance(tree, tuple):\n            if x[tree[0]] <= tree[1]:\n                return path_length(tree[2], x, depth + 1)\n            else:\n                return path_length(tree[3], x, depth + 1)\n        n = len(tree)\n        depth += c(n)\n        return depth\n\n    def c(n):\n        if n > 1:\n            return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n        return 0\n    n_samples = data.shape[0]\n    height_limit = math.ceil(math.log2(sample_size))\n    average_path_lengths = np.zeros(n_samples)\n    for _ in range(n_trees):\n        if data.shape[0] >= sample_size:\n            sample_data = data[np.random.choice(data.shape[0], sample_size, replace=False)]\n        else:\n            sample_data = data\n        tree = build_tree(sample_data)[0]\n        for (i, row) in enumerate(data):\n            path_len = path_length(tree, row)\n            average_path_lengths[i] += path_len / n_trees\n    c_value = 2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    anomaly_scores = 2 ** (-average_path_lengths / c_value)\n    if epsilon == 0:\n        return []\n    threshold = np.percentile(anomaly_scores, (1 - epsilon) * 100)\n    outliers = [i for (i, score) in enumerate(anomaly_scores) if score >= threshold]\n    return sorted(outliers)\ndata = np.random.randn(n_samples, n_features)\nn_trees = 50\nsample_size = 256\nepsilon = 0.05\noutliers = detect_outliers(data, n_trees, sample_size, epsilon)"}
{"task_id": 566, "completion_id": 5, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n    \n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n    \n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    heights = np.zeros(n_samples)\n\n    def build_tree(data, node=None, depth=0):\n        if node is None:\n            node = {}\n        if depth >= log2_sample_size or len(data) <= 1:\n            leaf_size = len(data)\n            node['c'] = c_n(leaf_size)\n            node['data'] = data\n            return node\n        (feat_idx, threshold) = (np.random.randint(n_features), np.random.uniform(np.min(data), np.max(data)))\n        node['feat_idx'] = feat_idx\n        node['threshold'] = threshold\n        left = data[data[:, feat_idx] <= threshold]\n        right = data[data[:, feat_idx] > threshold]\n        node['left'] = build_tree(left, depth=depth + 1)\n        node['right'] = build_tree(right, depth=depth + 1)\n        return node\n\n    def path_length(tree, sample, depth=0):\n        if 'c' in tree:\n            return depth + tree['c']\n        (feat_idx, threshold) = (tree['feat_idx'], tree['threshold'])\n        if sample[feat_idx] <= threshold:\n            return path_length(tree['left'], sample, depth + 1)\n        return path_length(tree['right'], sample, depth + 1)\n\n    def c_n(n):\n        if n > 1:\n            return 2 * math.log(n - 1) + 0.5772156649 - 2 * ((n - 1) / n)\n        return 0\n    log2_sample_size = int(math.ceil(math.log2(sample_size)))\n    if sample_size < n_samples:\n        indices = np.random.choice(n_samples, sample_size, replace=False)\n    else:\n        indices = np.arange(n_samples)\n    mask = np.isin(np.arange(n_samples), indices)\n    for _ in range(n_trees):\n        tree_data = data[indices]\n        tree = build_tree(tree_data)\n        for (idx, row) in enumerate(data[mask]):\n            height = path_length(tree, row)\n            heights[idx] += height\n    heights /= n_trees\n    c_n_samples = c_n(n_samples)\n    scores = 2 ** (-heights / c_n_samples)\n    outliers_indices = np.argsort(scores)[::-1][:int(n_samples * epsilon)]\n    return sorted(outliers_indices)\ndata = np.array([[1, 0.1], [2, 0.2], [3, 0.3], [4, 0.4], [5, 100.0], [6, 100.1], [7, 100.2], [8, 100.3]])"}
{"task_id": 566, "completion_id": 6, "solution": "import numpy as np\nimport math\nfrom typing import List\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> List[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n\n    def cal_c(n):\n        if n <= 1:\n            return 0\n        return 2.0 * math.log(n - 1) + 0.5772156649015329 - 2.0 * (n - 1) / n"}
{"task_id": 566, "completion_id": 7, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    n_samples = data.shape[0]\n    n_features = data.shape[1]\n    height_limit = math.ceil(math.log2(sample_size))\n\n    def c(n):\n        if n > 1:\n            return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n        return 0\n\n    def build_tree(data_subset, depth):\n        if data_subset.shape[0] <= 1 or depth >= height_limit:\n            return Node(data_subset, depth, True, 0)\n        idx = np.random.randint(n_features)\n        min_val = np.min(data_subset[:, idx])\n        max_val = np.max(data_subset[:, idx])\n        if min_val == max_val:\n            return Node(data_subset, depth, True, 0)\n        threshold = np.random.uniform(min_val, max_val)\n        left = data_subset[data_subset[:, idx] <= threshold]\n        right = data_subset[data_subset[:, idx] > threshold]\n        return Node(data_subset, depth, False, threshold, idx, left, right)\n\n    class Node:\n\n        def __init__(self, data, depth, is_leaf, threshold, split_idx=None, left=None, right=None):\n            self.data = data\n            self.depth = depth\n            self.is_leaf = is_leaf\n            self.threshold = threshold\n            self.split_idx = split_idx\n            self.left = left\n            self.right = right\n\n    def path_length(x, tree):\n        cur_tree = tree\n        while not cur_tree.is_leaf:\n            if x[cur_tree.split_idx] <= cur_tree.threshold:\n                cur_tree = cur_tree.left\n            else:\n                cur_tree = cur_tree.right\n        return cur_tree.depth + c(cur_tree.data.shape[0])\n\n    def average_path_length(x, trees):\n        length = 0\n        for tree in trees:\n            length += path_length(x, tree)\n        return length / n_trees\n    trees = []\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            sample_indices = np.arange(n_samples)\n        else:\n            sample_indices = np.random.choice(n_samples, sample_size, replace=False)\n        data_subset = data[sample_indices]\n        trees.append(build_tree(data_subset, 0))\n    avg_path_lengths = np.array([average_path_length(x, trees) for x in data])\n    phi = 2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    anomaly_scores = 2 ** (-avg_path_lengths / phi)\n    threshold = np.sort(anomaly_scores)[int(n_samples * (1 - epsilon))]\n    outliers = np.where(anomaly_scores >= threshold)[0]\n    return sorted(list(outliers))\ndata = np.random.rand(n_samples, n_features)\noutliers = detect_outliers(data, n_trees=10, sample_size=256, epsilon=0.01)"}
{"task_id": 566, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n    \n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n    \n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n\n    def c(n):\n        if n > 1:\n            return 2 * math.log(n - 1) + 0.5772156649 - 2 * ((n - 1) / n)\n        elif n == 1:\n            return 0.0\n        else:\n            return float('inf')\n\n    def make_split(node_data):\n        \"\"\"Randomly choose a feature and threshold to split the data.\"\"\"\n        feature_id = np.random.randint(node_data.shape[1])\n        feature_vals = node_data[:, feature_id]\n        if feature_vals.min() == feature_vals.max():\n            return (None, None, None)\n        threshold = np.random.uniform(feature_vals.min(), feature_vals.max())\n        left = node_data[feature_vals <= threshold]\n        right = node_data[feature_vals > threshold]\n        return (feature_id, threshold, left, right)\n\n    def build_tree(node_data, depth):\n        if depth >= height_limit or len(node_data) <= 1:\n            return [node_data, None, None, depth]\n        (feature_id, threshold, left, right) = make_split(node_data)\n        if feature_id is None:\n            return [node_data, None, None, depth]\n        left_tree = build_tree(left, depth + 1)\n        right_tree = build_tree(right, depth + 1)\n        return [node_data, feature_id, threshold, left_tree, right_tree]\n\n    def path_length(tree, sample, n_samples):\n        while len(tree) > 1:\n            (feature_id, threshold, left_tree, right_tree) = tree[1:]\n            tree = left_tree if sample[feature_id] <= threshold else right_tree\n        return tree[-1] + c(len(tree[0]) / n_samples)\n    height_limit = math.ceil(math.log2(sample_size))\n    mean_path_lengths = np.zeros(len(data))\n    for _ in range(n_trees):\n        sample_indices = np.random.choice(len(data), size=min(sample_size, len(data)), replace=False)\n        sample = data[sample_indices]\n        tree = build_tree(sample, 0)\n        for i in range(len(data)):\n            mean_path_lengths[i] += path_length(tree, data[i], len(data))\n    mean_path_lengths /= n_trees\n    c_n = 2 * math.log(len(data) - 1) - 2 * ((len(data) - 1) / len(data))\n    anomaly_scores = 2 ** (-mean_path_lengths / c_n)\n    if epsilon == 0:\n        outliers = []\n    else:\n        num_outliers = max(1, int(epsilon * len(data)))\n        outliers = np.argsort(anomaly_scores)[-num_outliers:][::-1]\n    return list(sorted(outliers))\ndata = np.random.rand(100, 2)\nn_trees = 100\nsample_size = 256\nepsilon = 0.1\noutliers = detect_outliers(data, n_trees, sample_size, epsilon)"}
{"task_id": 566, "completion_id": 9, "solution": "import numpy as np\nimport math\ndef split_node(data):\n    col = np.random.choice(data.shape[1])\n    threshold = np.random.uniform(data[:, col].min(), data[:, col].max())\n    left_set = data[data[:, col] <= threshold]\n    right_set = data[data[:, col] > threshold]\n    return (left_set, right_set, col, threshold)\ndef build_tree(data, max_depth):\n    if data.shape[0] <= 1 or max_depth == 0:\n        return (data, max_depth)\n    (left_data, right_data, col, threshold) = split_node(data)\n    left_branch = build_tree(left_data, max_depth - 1)\n    right_branch = build_tree(right_data, max_depth - 1)\n    return (col, threshold, left_branch, right_branch)\ndef path_length(tree, sample, depth=0):\n    if len(tree) == 2:\n        terminal_node_size = tree[0].shape[0]\n        return depth + c(terminal_node_size)\n    (col, threshold, left_tree, right_tree) = tree\n    if sample[col] <= threshold:\n        return path_length(left_tree, sample, depth + 1)\n    else:\n        return path_length(right_tree, sample, depth + 1)\ndef c(n_samples):\n    if n_samples == 1:\n        return 0\n    return 2 * math.log(n_samples - 1) + 0.5772156649 - 2 * (n_samples - 1) / n_samples\ndef compute_path_length_sum(tree, data, n_samples):\n    return np.array([path_length(tree, data[idx]) for idx in range(n_samples)])\ndef compute_average_path_length(path_lengths, n_samples):\n    e_path_length = np.mean(path_lengths, axis=0)\n    c_n_samples = c(n_samples)\n    return np.where(n_samples == 1, c_n_samples, e_path_length)\ndef compute_anomaly_score(e_path_length, n_samples):\n    c_n_samples = c(n_samples)\n    return np.power(2, -e_path_length / c_n_samples)\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\"\"\"\n    n_samples = data.shape[0]\n    height_limit = int(math.ceil(math.log2(sample_size)))\n    samples = [np.random.choice(n_samples, sample_size, replace=False) for _ in range(n_trees)]\n    trees = [build_tree(data[sample], height_limit) for sample in samples]\n    path_length_matrices = [compute_path_length_sum(tree, data, n_samples) for tree in trees]\n    average_path_length = compute_average_path_length(np.array(path_length_matrices), n_samples)\n    anomaly_scores = compute_anomaly_score(average_path_length, sample_size)\n    threshold = sorted(anomaly_scores)[-int(epsilon * n_samples)]\n    outliers = np.where(anomaly_scores > threshold)[0].tolist()\n    return sorted(outliers)"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    feature_values = set()\n    for row in X_train:\n        for value in row:\n            feature_values.add(value)\n    labels = set(y_train)\n    f_y_c = defaultdict(int)\n    count_y = defaultdict(int)\n    for (x, y) in zip(X_train, y_train):\n        for (idx, value) in enumerate(x):\n            f_y_c[idx, value, y] += 1\n        count_y[y] += 1\n    w = {k: 0.0 for k in f_y_c.keys()}\n    num_features = X_train.shape[1]\n    for _ in range(n_iter):\n        deltas = []\n        for ((idx, value, label), weight) in w.items():\n            logsum = sum((math.exp(sum((w[fid, x[fid], y] for fid in range(num_features)))) for y in labels))\n            target = f_y_c[idx, value, label] / cnt\n            new_weight = weight + math.log(target) - math.log(logsum)\n            deltas.append(abs(new_weight - weight))\n            w[idx, value, label] = new_weight\n        if max(deltas) < epsilon:\n            break\n    predictions = []\n    for x in X_test:\n        scores = {y: 0 for y in labels}\n        for y in labels:\n            scores[y] = sum((w[fid, x[fid], y] for fid in range(num_features)))\n        predictions.append(max(scores, key=lambda k: scores[k]))\n    return predictions"}
{"task_id": 568, "completion_id": 1, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    feature_values = set()\n    labels = set()\n    num_samples = len(X_train)\n    for (x, y) in zip(X_train, y_train):\n        feature_values.update(x)\n        labels.add(y)\n    feature_indices = {value: idx for (idx, value) in enumerate(feature_values)}\n    label_indices = {label: idx for (idx, label) in enumerate(labels)}\n    (num_features, num_labels) = (len(feature_values), len(labels))\n    weights = np.zeros((num_features, num_labels))\n    for _ in range(n_iter):\n        largest_update = 0\n        for ((feature_index, value), j) in feature_indices.items():\n            for (label, k) in label_indices.items():\n                old_weight = weights[j, k]\n                numerator = 0\n                denominator = 0\n                for (x, y) in zip(X_train, y_train):\n                    if value == x[feature_index]:\n                        numerator += 1 / num_samples\n                    denominator += np.exp(np.dot(weights[:, k], x == value))\n                weights[j, k] += math.log(numerator / denominator)\n                largest_update = max(largest_update, abs(old_weight - weights[j, k]))\n        if largest_update < epsilon:\n            break\n\n    def predict_label(x):\n        max_likelihood = -float('inf')\n        predicted_label = None\n        for (label, k) in label_indices.items():\n            log_likelihood = 0\n            for (feature_index, value) in enumerate(x):\n                if value in feature_indices:\n                    j = feature_indices[feature_index, value]\n                    log_likelihood += weights[j, k]\n            if log_likelihood > max_likelihood:\n                max_likelihood = log_likelihood\n                predicted_label = label\n        return predicted_label\n    predictions = [predict_label(x) for x in X_test]\n    return predictions"}
{"task_id": 568, "completion_id": 2, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"Train a Maximum Entropy Classifier using Generalized Iterative Scaling and predict the labels for the test data.\"\"\"\n    (n_samples, n_features) = X_train.shape\n    unique_labels = set(y_train)\n    unique_feature_values = {i: set(X_train[:, i]) for i in range(n_features)}\n    initial_weight = 0.0\n    weights = defaultdict(lambda : initial_weight)\n    empirical_counts = defaultdict(int)\n    for (x_sample, y_label) in zip(X_train, y_train):\n        for feature_index in range(n_features):\n            feature_value = x_sample[feature_index]\n            key = (feature_index, feature_value, y_label)\n            empirical_counts[key] += 1\n    for _ in range(n_iter):\n        updates = defaultdict(float)\n        largest_update = -float('inf')\n        for (feature_index, feature_value, y_label) in empirical_counts:\n            total_feature_label = 0\n            for x_sample in X_train:\n                if x_sample[feature_index] == feature_value:\n                    score = 0.0\n                    for y_option in unique_labels:\n                        score_for_option = 0\n                        for i in range(n_features):\n                            val = x_sample[i]\n                            key = (i, val, y_option)\n                            score_for_option += weights[key]\n                        score += math.exp(score_for_option) if y_option == y_label else 0\n                    total_feature_label += score\n            new_weight = initial_weight if empirical_counts[feature_index, feature_value, y_label] == 0 else math.log(empirical_counts[feature_index, feature_value, y_label] / total_feature_label)\n            updates[feature_index, feature_value, y_label] = new_weight - weights[feature_index, feature_value, y_label]\n            largest_update = max(largest_update, abs(updates[feature_index, feature_value, y_label]))\n        for key in updates:\n            weights[key] += updates[key]\n        if largest_update < epsilon:\n            break\n    predictions = []\n    for x_test in X_test:\n        scores = {label: 0 for label in unique_labels}\n        for label in unique_labels:\n            score = 0\n            for feature_index in range(n_features):\n                feature_value = x_test[feature_index]\n                key = (feature_index, feature_value, label)\n                score += weights[key]\n            scores[label] = math.exp(score)\n        total_sum = sum(scores.values())\n        scores = {k: v / total_sum for (k, v) in scores.items()}\n        predicted_label = max(scores, key=scores.get)\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 568, "completion_id": 3, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n\n    def empirical_feature_count(X, y):\n        \"\"\"Calculate the empirical count of each feature-label pair.\"\"\"\n        feature_counts = defaultdict(int)\n        for (sample, label) in zip(X, y):\n            for (feature_index, feature_value) in enumerate(sample):\n                feature_counts[label, feature_index, feature_value] += 1\n        return feature_counts\n\n    def calculate_feature_expectation(X, y, weights):\n        \"\"\"Calculate the expected count of each feature-label pair.\"\"\"\n        feature_expectation = defaultdict(float)\n        for (sample, label) in zip(X, y):\n            sample_sum = sum((math.exp(np.sum((weights[label, feature_index, feature_value] for (feature_index, feature_value) in enumerate(sample)))) for label in set(y)))\n            feature_expectation[label, sample_sum] += 1\n            for (feature_index, feature_value) in enumerate(sample):\n                weighting = math.exp(np.sum((weights[label, feature_index, feature_value] for (feature_index, feature_value) in enumerate(sample))))\n                feature_expectation[label, feature_index, feature_value] += weighting\n        return feature_expectation\n\n    def update_weights(weights, empirical, expectation):\n        \"\"\"Update weights according to GIS.\"\"\"\n        for key in empirical:\n            if key in expectation and expectation[key]:\n                weights[key] += math.log(empirical[key] / expectation[key])\n        return weights\n    labels = np.unique(y_train)\n    feature_indices = range(X_train.shape[1])\n    feature_values = [np.unique(X_train[:, i]) for i in range(X_train.shape[1])]\n    weights = np.zeros((len(labels), X_train.shape[1], max(max(feature_values), default=1) + 1))\n    empirical_counts = empirical_feature_count(X_train, y_train)\n    for iteration in range(n_iter):\n        expected_counts = calculate_feature_expectation(X_train, y_train, weights)\n        new_weights = update_weights(np.copy(weights), empirical_counts, expected_counts)\n        if np.max(np.abs(new_weights - weights)) < epsilon:\n            break\n        weights = new_weights\n\n    def predict(sample):\n        \"\"\"Predict label for the given sample.\"\"\"\n        max_prob = -1\n        max_label = None\n        for label in labels:\n            prob = sum((weights[label, feature_index, feature_value] for (feature_index, feature_value) in enumerate(sample)))\n            if prob > max_prob:\n                max_prob = prob\n                max_label = label\n        return max_label\n    return [predict(sample) for sample in X_test]"}
{"task_id": 568, "completion_id": 4, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    labels = np.unique(y_train)\n    features = range(X_train.shape[1])\n    F_empirical = defaultdict(int)\n    for (x, y) in zip(X_train, y_train):\n        for feature in features:\n            F_empirical[feature, x[feature], y] += 1\n    F_empirical = {k: v / len(y_train) for (k, v) in F_empirical.items()}\n    w = defaultdict(float)\n    for feature in features:\n        for value in np.unique(X_train[:, feature]):\n            for label in labels:\n                w[feature, value, label] = 0\n    for _ in range(n_iter):\n        F_model = defaultdict(int)\n        for x in X_train:\n            for y in labels:\n                score = sum((w[feature, x[feature], y] for feature in features))\n                prob = math.exp(score)\n                for feature in features:\n                    F_model[feature, x[feature], y] += prob\n        F_model = {k: v / len(y_train) for (k, v) in F_model.items()}\n        largest_update = 0\n        for (k, v) in F_empirical.items():\n            update = math.log(v / F_model[k])\n            w[k] += update\n            largest_update = max(largest_update, abs(update))\n        if largest_update < epsilon:\n            break\n    predictions = []\n    for x in X_test:\n        scores = {y: sum((w[feature, x[feature], y] for feature in features)) for y in labels}\n        predictions.append(max(scores, key=scores.get))\n    return predictions\nX_train = np.array([[1, 2, 3], [4, 5, 6], [1, 5, 3], [4, 2, 6]])\ny_train = np.array([0, 1, 0, 1])\nX_test = np.array([[1, 2, 3], [4, 5, 6]])"}
{"task_id": 568, "completion_id": 5, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"Implement Maximum Entropy classifier with Generalized Iterative Scaling.\"\"\"\n    (n_samples, n_features) = X_train.shape\n    labels = np.unique(y_train)\n    n_labels = len(labels)\n    n_feature_values = [len(np.unique(X_train[:, i])) for i in range(n_features)]\n    feature_index = []\n    for f_idx in range(n_features):\n        for value in range(n_feature_values[f_idx]):\n            feature_index.append((f_idx, value))\n    n_features_total = len(feature_index) * n_labels\n    weights = np.zeros(n_features_total)\n    empirical_counts = defaultdict(int)\n    for i in range(n_samples):\n        for (f_idx, value) in feature_index:\n            if X_train[i, f_idx] == value:\n                empirical_counts[f_idx, value, y_train[i]] += 1\n    for _ in range(n_iter):\n        largest_change = 0\n        for (f_idx, value) in feature_index:\n            for l in labels:\n                f_l_index = feature_index.index((f_idx, value)) * n_labels + np.where(labels == l)[0][0]\n                g_is = [X_train[i, f_idx] == value and y_train[i] == l for i in range(n_samples)]\n                feature_count = sum(g_is)\n                exp_term = sum((np.exp((weights[f_idx * n_labels + y] for y in labels)) for (f_idx, _) in feature_index))\n                expected_count = sum(np.exp(np.dot(weights, np.array(g_is))) / exp_term)\n                change = math.log(feature_count / expected_count) if expected_count > 0 else 0\n                largest_change = max(largest_change, abs(change))\n                weights[f_l_index] += change\n        if largest_change < epsilon:\n            break\n    predictions = []\n    for x in X_test:\n        prob = np.zeros(n_labels)\n        for l in labels:\n            prob[l] = np.log(np.exp(np.sum((weights[f_idx * n_labels + l] if X[f_idx] == f_v else 0 for ((f_idx, f_v), _) in feature_index))))\n        predictions.append(np.argmax(prob))\n    return predictions"}
{"task_id": 568, "completion_id": 6, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    (n_samples, n_features) = X_train.shape\n    labels = np.unique(y_train)\n    n_labels = len(labels)\n    feature_values = [np.unique(X_train[:, f_idx]) for f_idx in range(n_features)]\n    weights = np.zeros((n_features, len(feature_values[0]), n_labels))\n    counts = defaultdict(float)\n    for (i, x) in enumerate(X_train):\n        y = y_train[i]\n        for (f_idx, f_val) in enumerate(x):\n            counts[f_idx, f_val, y] += 1.0\n    for _ in range(n_iter):\n        largest_change = 0.0\n        for ((f_idx, f_val, y_label), count) in counts.items():\n            expected = 0.0\n            for (i, x) in enumerate(X_train):\n                if x[f_idx] == f_val:\n                    y = y_train[i]\n                    log_sum = sum((np.dot(weights[f_idx][:, lbl], np.array([x[f_idx] == fv for fv in feature_values[f_idx]])) for lbl in labels))\n                    expected += math.exp(np.dot(weights[f_idx][:, y_label], np.array([x[f_idx] == fv for fv in feature_values[f_idx]])) - log_sum)\n            if expected != 0:\n                delta = count - expected\n                weights[f_idx][:, y_label] += delta / expected * np.array([f_val == fv for fv in feature_values[f_idx]])\n                largest_change = max(largest_change, abs(delta))\n        if largest_change < epsilon:\n            break\n    y_pred = []\n    for x in X_test:\n        log_probs = []\n        for y_label in labels:\n            log_probs.append(sum((np.dot(weights[f_idx][:, y_label], np.array([x[f_idx] == fv for fv in feature_values[f_idx]])) for f_idx in range(n_features))))\n        y_pred.append(labels[np.argmax(log_probs)])\n    return y_pred"}
{"task_id": 568, "completion_id": 7, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    features = defaultdict(float)\n    unique_labels = np.unique(y_train)\n    num_features = X_train.shape[1]\n    num_samples = X_train.shape[0]\n    labels = set(y_train)\n    for i in range(num_samples):\n        (sample, label) = (X_train[i], y_train[i])\n        for (j, value) in enumerate(sample):\n            key = (j, value, label)\n            features[key] += 1\n    for key in features.keys():\n        features[key] /= num_samples\n    weights = defaultdict(float)\n    iteration = 0\n    while iteration < n_iter:\n        prev_weights = weights.copy()\n\n        def empirical_expectation(key):\n            return features[key] if key in features else 0\n        for key in features.keys():\n            weighted_sum = 0\n            for label in labels:\n                f_sum = 0\n                for feat_idx in range(num_features):\n                    test_key = (feat_idx, X_train[key[1], feat_idx], label)\n                    if test_key in weights:\n                        f_sum += weights[test_key]\n                weighted_sum += math.exp(f_sum)\n            expected_ratio = empirical_expectation(key) / weighted_prob(key, weighted_sum, key[2])\n            weights[key] += math.log(expected_ratio)\n        max_diff = max([abs(weights[key] - prev_weights[key]) for key in weights])\n        if max_diff < epsilon:\n            break\n        iteration += 1\n\n    def calc_label_prob(sample, label):\n        prob_sum = 0\n        for (i, val) in enumerate(sample):\n            key = (i, val, label)\n            if key in weights:\n                prob_sum += weights[key]\n        return math.exp(prob_sum)\n\n    def weighted_prob(key, weighted_sum, label):\n        f_sum = 0\n        for feat_idx in range(num_features):\n            test_key = (feat_idx, key[1], label)\n            if test_key in weights:\n                f_sum += weights[test_key]\n        return math.exp(f_sum) / weighted_sum\n    y_pred = []\n    for sample in X_test:\n        label_score_pairs = [(label, calc_label_prob(sample, label)) for label in unique_labels]\n        chosen_label = max(label_score_pairs, key=lambda x: x[1])[0]\n        y_pred.append(chosen_label)\n    return y_pred"}
{"task_id": 568, "completion_id": 8, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    num_features = X_train.shape[1]\n    feature_values = {i: set(X_train[:, i]) for i in range(num_features)}\n    labels = set(y_train)\n    feature_label_counts = defaultdict(int)\n    label_counts = defaultdict(int)\n    for (x_row, y) in zip(X_train, y_train):\n        for (feature_idx, feature_val) in enumerate(x_row):\n            feature_label_counts[feature_idx, feature_val, y] += 1\n        label_counts[y] += 1\n    w = np.zeros((num_features, X_train.max() + 1, len(labels)))\n    for _ in range(n_iter):\n        largest_update = 0.0\n        for ((feature_idx, feature_val, y), count) in feature_label_counts.items():\n            q = sum((math.exp(w[feature_idx, X[i], y]) for i in range(len(X_train)))) / len(X_train)\n            delta_w = math.log(count / len(X_train) / q)\n            w[feature_idx, feature_val, y] += delta_w\n            largest_update = max(largest_update, abs(delta_w))\n        if largest_update < epsilon:\n            break\n    y_pred = []\n    for x in X_test:\n        (max_prob, y_hat) = (-np.inf, None)\n        for y in labels:\n            prob = sum((w[feature_idx, feature_val, y] for (feature_idx, feature_val) in enumerate(x)))\n            if prob > max_prob:\n                (max_prob, y_hat) = (prob, y)\n        y_pred.append(y_hat)\n    return y_pred"}
{"task_id": 568, "completion_id": 9, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    (m, n_features) = X_train.shape\n    labels = set(y_train)\n    features = defaultdict(list)\n    for feature_index in range(n_features):\n        features[feature_index] = list(set(X_train[:, feature_index]))\n    weights = defaultdict(float)\n    for feature_index in range(n_features):\n        for feature_value in features[feature_index]:\n            for y in labels:\n                weights[feature_index, feature_value, y] = 0\n    empirical_dist = defaultdict(int)\n    for (x, y) in zip(X_train, y_train):\n        for (feature_index, feature_value) in enumerate(x):\n            empirical_dist[feature_index, feature_value, y] += 1\n    for key in empirical_dist:\n        empirical_dist[key] /= m\n    for _ in range(n_iter):\n        max_update = 0\n        for key in empirical_dist:\n            (feature_index, feature_value, y) = key\n            Z_x = sum((math.exp(sum((weights[f_index, f_value, y_prime] for (f_index, f_value) in enumerate(x) if f_value == f_value))) for y_prime in labels))\n            r = empirical_dist[key] * m / Z_x\n            if r == 0:\n                delta = math.log(1e-64)\n            else:\n                delta = math.log(r)\n            for x in X_train:\n                for f_value in features[feature_index]:\n                    if x[feature_index] == f_value:\n                        weights[feature_index, f_value, y] += delta\n            max_update = max(max_update, abs(delta))\n        if max_update < epsilon:\n            break\n    y_pred = []\n    for x in X_test:\n        y_probs = []\n        for y in labels:\n            prob = sum((weights[f_index, feature_value, y] for (f_index, feature_value) in enumerate(x)))\n            y_probs.append(prob)\n        y_pred.append(labels[np.argmax(y_probs)])\n    return list(y_pred)"}
{"task_id": 569, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_count = Counter()\n    for (label, words) in data:\n        unique_words = set(words)\n        word_count.update(unique_words)\n    total_documents = len(data)\n    if total_documents == 0:\n        return ([], set())\n    word_frequency_ratio = [(word, round(count / total_documents, 4)) for (word, count) in word_count.items()]\n    word_frequency_ratio.sort(key=lambda x: (-x[1], x[0]))\n    if cut_off is None or cut_off >= len(word_frequency_ratio):\n        most_frequent_words = set((word for (word, _) in word_frequency_ratio))\n    else:\n        most_frequent_words = set((word for (word, _) in word_frequency_ratio[:cut_off]))\n    return (word_frequency_ratio, most_frequent_words)"}
{"task_id": 569, "completion_id": 1, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    document_count = len(data)\n    document_frequency = Counter()\n    for (_, words) in data:\n        unique_words_in_doc = set(words)\n        document_frequency.update(unique_words_in_doc)\n    frequency_ratios = [(word, round(count / document_count, 4)) for (word, count) in document_frequency.items()]\n    frequency_ratios.sort(key=lambda item: (-item[1], item[0]))\n    if cut_off is None or cut_off >= len(frequency_ratios):\n        most_common_words = set((word for (word, _) in frequency_ratios))\n    else:\n        most_common_words = set((word for (word, _) in frequency_ratios[:cut_off]))\n    return (frequency_ratios, most_common_words)"}
{"task_id": 569, "completion_id": 2, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\nfrom math import isclose\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_appearances = Counter()\n    total_docs = len(data)\n    for (_, words) in data:\n        word_appearances.update(set(words))\n    ratios = [(word, round(to_ratio / total_docs, 4)) for (word, to_ratio) in word_appearances.items()]\n    ratios.sort(key=lambda x: (-x[1], x[0]))\n    most_frequent_words = set((word for (word, _) in ratios[:cut_off])) if cut_off else set((word for (word, _) in ratios))\n    return (ratios, most_frequent_words)"}
{"task_id": 569, "completion_id": 3, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_doc_frequency = Counter()\n    total_documents = len(data)\n    all_words_set = set()\n    for (label, words) in data:\n        seen_words_in_document = set()\n        for word in words:\n            if word not in seen_words_in_document:\n                seen_words_in_document.add(word)\n                word_doc_frequency[word] += 1\n                all_words_set.add(word)\n    word_ratios = [(word, round(count / total_documents, 4)) for (word, count) in word_doc_frequency.items()]\n    word_ratios.sort(key=lambda x: x[1], reverse=True)\n    most_common_words_set = {word for (word, _) in word_ratios[:cut_off]} if cut_off else all_words_set\n    return (word_ratios, most_common_words_set)\ncut_off = 2"}
{"task_id": 569, "completion_id": 4, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_docs = len(data)\n    word_doc_counter = Counter()\n    for (_, words) in data:\n        word_doc_counter.update(set(words))\n    word_freq_list = []\n    for (word, count) in word_doc_counter.items():\n        doc_freq_ratio = round(count / total_docs, 4)\n        word_freq_list.append((word, doc_freq_ratio))\n    word_freq_list.sort(key=lambda x: x[1], reverse=True)\n    top_k_words = set((word for (word, _) in word_freq_list[:cut_off])) if cut_off is not None else set((word for (word, _) in word_freq_list))\n    return (word_freq_list, top_k_words)"}
{"task_id": 569, "completion_id": 5, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: List of documents. Each document is represented by a tuple\n              (label, words) where label is ignored and words is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  None to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_document_frequency = Counter()\n    distinct_words = set()\n    for (_, words) in data:\n        unique_words = set(words)\n        distinct_words.update(unique_words)\n        for word in unique_words:\n            word_document_frequency[word] += 1\n    total_docs = len(data)\n    word_ratios = [(word, round(count / total_docs, 4)) for (word, count) in word_document_frequency.items()]\n    word_ratios.sort(key=lambda x: x[1], reverse=True)\n    common_words = set()\n    if cut_off is not None:\n        common_words.update((word for (word, _) in word_ratios[:cut_off]))\n    else:\n        common_words = distinct_words\n    return (word_ratios, common_words)"}
{"task_id": 569, "completion_id": 6, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_count = {}\n    total_documents = len(data)\n    for (_, words) in data:\n        seen_in_this_document = set()\n        for word in words:\n            if word not in seen_in_this_document:\n                seen_in_this_document.add(word)\n                if word in word_count:\n                    word_count[word] += 1\n                else:\n                    word_count[word] = 1\n    doc_frequencies = [(word, round(count / total_documents, 4)) for (word, count) in word_count.items()]\n    doc_frequencies.sort(key=lambda x: (-x[1], x[0]))\n    if cut_off is not None and cut_off > 0:\n        top_words = {word for (word, _) in doc_frequencies[:cut_off]}\n    else:\n        top_words = {word for (word, _) in doc_frequencies}\n    return (doc_frequencies, top_words)"}
{"task_id": 569, "completion_id": 7, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_docs = len(data)\n    word_presence = Counter()\n    for (label, words) in data:\n        distinct_words = set(words)\n        for word in distinct_words:\n            word_presence[word] += 1\n    ratio_list = [(word, round(count / total_docs, 4)) for (word, count) in word_presence.items()]\n    ratio_list.sort(key=lambda x: -x[1])\n    if cut_off is None:\n        top_words = set((word for (word, ratio) in ratio_list))\n    else:\n        top_words = set((word for (word, ratio) in ratio_list[:cut_off]))\n    return (ratio_list, top_words)"}
{"task_id": 569, "completion_id": 8, "solution": "from typing import Iterable, Tuple, List, Set, Any\nfrom collections import Counter\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    doc_frequency = Counter()\n    total_docs = len(data)\n    for (_, words) in data:\n        unique_words = set(words)\n        doc_frequency.update(unique_words)\n    df_ratios = [(word, round(count / total_docs, 4)) for (word, count) in doc_frequency.items()]\n    df_ratios.sort(key=lambda x: x[1], reverse=True)\n    k_most_common_words = {word for (word, _) in df_ratios if cut_off is None or cut_off > 0}\n    if cut_off is not None and cut_off > 0:\n        k_most_common_words = {word for (word, _) in df_ratios[:cut_off]}\n    return (df_ratios, k_most_common_words)"}
{"task_id": 569, "completion_id": 9, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_appearances = Counter()\n    distinct_words = set()\n    for (_, words) in data:\n        seen_words = set(words)\n        distinct_words.update(seen_words)\n        word_appearances.update(seen_words)\n    total_docs = len(data)\n    doc_freq_list = []\n    for word in distinct_words:\n        ratio = round(word_appearances[word] / total_docs, 4)\n        doc_freq_list.append((word, ratio))\n    doc_freq_list.sort(key=lambda x: x[1], reverse=True)\n    top_k_words = set((word for (word, _) in doc_freq_list[:cut_off])) if cut_off else distinct_words\n    return (doc_freq_list, top_k_words)"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    n_features = X.shape[1]\n    w = X.T @ (alpha * y)\n    w = np.round(w, decimals=4)\n    w_list = w.squeeze().tolist()\n    margins = y - X @ w\n    b = np.round(np.mean(margins), decimals=4)\n    return (w_list, b)"}
{"task_id": 571, "completion_id": 1, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, alpha * y)\n    b_term = y - np.dot(X, w)\n    b = np.mean(b_term)\n    w_list = np.round(w, decimals=4).tolist()\n    b = np.round(b, decimals=4)\n    return (w_list, b)"}
{"task_id": 571, "completion_id": 2, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, alpha * y)\n    w_list = w.round(4).tolist()\n    b = np.mean(y - np.dot(w, X.T))\n    b = round(b, 4)\n    return (w_list, b)"}
{"task_id": 571, "completion_id": 3, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(np.multiply(alpha, y).T, X).round(4)\n    w_list = w.tolist() if isinstance(w, np.ndarray) else [w]\n    wx = np.dot(X, w)\n    b = np.mean(np.multiply(y, 1 - wx)).round(4)\n    return (w_list, b)"}
{"task_id": 571, "completion_id": 4, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(np.diag(alpha * y), X).sum(axis=0)\n    b = np.sum(y - np.dot(w, X.T)) / len(y)\n    w_rounded = [round(value, 4) for value in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 571, "completion_id": 5, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = X.T @ (alpha * y)\n    margin_term = y - X @ w\n    b = np.mean(margin_term)\n    w_list = [round(val, 4) for val in w]\n    b = round(b, 4)\n    return (w_list, b)"}
{"task_id": 571, "completion_id": 6, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, alpha * y)\n    w_list = [round(weight, 4) for weight in w.tolist()]\n    w_dot_X = np.dot(X, w)\n    b = np.mean(y - w_dot_X)\n    b = round(b, 4)\n    return (w_list, b)"}
{"task_id": 571, "completion_id": 7, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, alpha * y)\n    wX = np.dot(X, w)\n    b = np.mean(y - wX)\n    w_list = [round(x, 4) for x in w.tolist()]\n    b = round(b, 4)\n    return (w_list, b)"}
{"task_id": 571, "completion_id": 8, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, alpha * y)\n    w_list = [round(val, 4) for val in w]\n    w_transpose_x = np.dot(X, w)\n    b = np.mean(y - w_transpose_x)\n    b = round(b, 4)\n    return (w_list, b)"}
{"task_id": 571, "completion_id": 9, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, alpha * y)\n    w_dot_x = np.dot(X, w)\n    b = np.mean(y - w_dot_x)\n    w_list = np.round(w, 4).tolist()\n    b = round(b, 4)\n    return (w_list, b)\nX = np.array([[1, 2], [2, 3], [2, 1], [-1, -2], [-2, -3], [-2, -1]])\ny = np.array([1, 1, 1, -1, -1, -1])\nalpha = np.array([0.2, 0.3, 0.4, 0.3, 0.2, 0.1])"}
{"task_id": 572, "completion_id": 0, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) scores for each sample in the dataset.\n    \n    Args:\n        data (np.ndarray): The dataset as a 2D numpy array, where each row represents an observation.\n        k (int): The number of nearest neighbours to consider.\n        epsilon (float): The threshold for classifying an observation as an outlier.\n        \n    Returns:\n        tuple: A tuple containing the list of LOF scores rounded to four decimals, and the list of indices corresponding to outliers.\n    \"\"\"\n\n    def euclidean_distance(x, y):\n        return np.sqrt(np.sum((x - y) ** 2))\n\n    def compute_distances(X):\n        distances = np.zeros((len(X), len(X)))\n        for i in range(len(X)):\n            for j in range(i, len(X)):\n                dist = euclidean_distance(X[i], X[j])\n                distances[i, j] = dist\n                distances[j, i] = dist\n        return distances\n\n    def knn_indices(distances, k):\n        knn_indices = []\n        for (idx, dist) in enumerate(distances):\n            nearest = np.argsort(dist)[:k]\n            knn_indices.append(nearest)\n        return knn_indices\n\n    def k_distance(distances, knn):\n        k_distances = np.array([distances[i, knn[i][-1]] for i in range(len(knn))])\n        return k_distances\n\n    def reachability_distance(distances, kdist):\n        n_samples = len(distances)\n        reachabilities = np.zeros((n_samples, n_samples))\n        for i in range(n_samples):\n            for j in range(n_samples):\n                reachabilities[i, j] = max(kdist[j], distances[i, j])\n        return reachabilities\n\n    def local_reachability_density(reachabilities, k_neighbors):\n        lrd = []\n        for (i, knn) in enumerate(k_neighbors):\n            reachability_sum = np.sum(reachabilities[i, knn])\n            lrd.append(len(knn) / reachability_sum)\n        return lrd\n\n    def local_outlier_factor_scores(lrd, k_neighbors):\n        lof_scores = []\n        for (i, knn) in enumerate(k_neighbors):\n            lrd_neighs = np.array([lrd[idx] for idx in knn])\n            lrd_score = np.mean(lrd_neighs) / lrd[i]\n            lof_scores.append(lrd_score)\n        return lof_scores\n    distances = compute_distances(data)\n    knn = knn_indices(distances, k)\n    k_distances = k_distance(distances, knn)\n    reachabilities = reachability_distance(distances, k_distances)\n    lrd = local_reachability_density(reachabilities, knn)\n    lof_scores = np.array(local_outlier_factor_scores(lrd, knn))\n    lof_scores = np.round(lof_scores, decimals=4)\n    outlier_indices = [i for (i, score) in enumerate(lof_scores) if score > epsilon]\n    return (lof_scores.tolist(), outlier_indices)\ndata = np.array([[1, 1], [1, 1.5], [1, 2], [2, 2.5], [2.5, 3], [8, 8], [10, 8], [8, 10], [10, 10], [5, 5], [5, 6], [6, 5], [6, 6]])\nk = 4\nepsilon = 1.5"}
{"task_id": 572, "completion_id": 1, "solution": "import numpy as np\ndef euclidean_dist_matrix(data):\n    \"\"\"Computes the pairwise Euclidean distance matrix for a set of points.\"\"\"\n    num_samples = data.shape[0]\n    dist_matrix = np.zeros((num_samples, num_samples))\n    for i in range(num_samples):\n        for j in range(i, num_samples):\n            dist = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n            dist_matrix[i][j] = dist\n            dist_matrix[j][i] = dist\n    return dist_matrix\ndef get_k_distance_indices(dist_matrix, k):\n    \"\"\"For each sample, return its k distance and the list of k nearest neighbors.\"\"\"\n    num_samples = dist_matrix.shape[0]\n    k_distances = []\n    k_nearest_neighbours = []\n    for i in range(num_samples):\n        sorted_distances = np.argsort(dist_matrix[i])\n        k_nearest_neighbours.append(sorted_distances[1:k + 1].tolist())\n        k_distances.append(dist_matrix[i][sorted_distances[k]])\n    return (k_distances, k_nearest_neighbours)\ndef reachability_distance(dist_matrix, k_distances, p, q):\n    \"\"\"Computes the reachability distance between two points p and q.\"\"\"\n    return max(k_distances[q], dist_matrix[p][q])\ndef local_reachability_density(dist_matrix, k_distances, k_nearest_neighbours, p):\n    \"\"\"Computes the local reachability density (LRD) of a point p.\"\"\"\n    sum_reachability_dists = sum((reachability_distance(dist_matrix, k_distances, p, q) for q in k_nearest_neighbours[p]))\n    return float(k) / sum_reachability_dists\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Computes the Local Outlier Factor (LOF) scores for each point in the data set.\"\"\"\n    dist_matrix = euclidean_dist_matrix(data)\n    (k_distances, k_nearest_neighbours) = get_k_distance_indices(dist_matrix, k)\n    lrd_scores = [local_reachability_density(dist_matrix, k_distances, k_nearest_neighbours, p) for p in range(data.shape[0])]\n    lof_scores = []\n    for p in range(data.shape[0]):\n        sum_lrd_neighbours = sum((lrd_scores[q] for q in k_nearest_neighbours[p]))\n        lof = sum_lrd_neighbours / (k * lrd_scores[p])\n        lof_scores.append(lof)\n    outlier_indices = [i for (i, score) in enumerate(lof_scores) if score > epsilon]\n    lof_scores = np.round(lof_scores, 4).tolist()\n    return (lof_scores, outlier_indices)"}
{"task_id": 572, "completion_id": 2, "solution": "import numpy as np\ndef euclidean_distance(point1, point2):\n    \"\"\"Compute the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\ndef pairwise_distance_matrix(data):\n    \"\"\"Compute the full pair-wise Euclidean distance matrix.\"\"\"\n    n = len(data)\n    dist_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i, n):\n            dist_matrix[i][j] = dist_matrix[j][i] = euclidean_distance(data[i], data[j])\n    return dist_matrix\ndef knn_points_indices(dist_matrix, k):\n    \"\"\"For each sample, obtain the index list of its k nearest neighbours.\"\"\"\n    n = len(dist_matrix)\n    knn_indices = []\n    for i in range(n):\n        k_nearest_indices = np.argsort(dist_matrix[i])[:k]\n        knn_indices.append(k_nearest_indices)\n    return knn_indices\ndef k_distance(dist_matrix, knn_indices, k):\n    \"\"\"For each sample, compute its k-distance.\"\"\"\n    k_dist = [dist_matrix[i][knn_indices[i][-1]] for i in range(len(knn_indices))]\n    return k_dist\ndef reachability_distance(dist_matrix, k_dist, knn_indices, sample_index, neighbour_index):\n    \"\"\"Compute the reachability distance between two samples.\"\"\"\n    return max(k_dist[neighbour_index], dist_matrix[sample_index][neighbour_index])\ndef local_reachability_density(dist_matrix, k_dist, knn_indices, k):\n    \"\"\"Compute the Local Reachability Density (LRD) for each sample.\"\"\"\n    n = len(dist_matrix)\n    lrd = []\n    for i in range(n):\n        lr = 0\n        for j in knn_indices[i]:\n            lr += reachability_distance(dist_matrix, k_dist, knn_indices, i, j)\n        lrd.append(k / lr)\n    return lrd\ndef local_outlier_factor(data, k, epsilon=1.5):\n    dist_matrix = pairwise_distance_matrix(data)\n    knn_indices = knn_points_indices(dist_matrix, k)\n    k_dist = k_distance(dist_matrix, knn_indices, k)\n    lrd = local_reachability_density(dist_matrix, k_dist, knn_indices, k)\n    lof_scores = []\n    for i in range(len(data)):\n        lof_sum = 0\n        for j in knn_indices[i]:\n            lof_sum += lrd[j]\n        lof_score = lof_sum / k / lrd[i]\n        lof_scores.append(np.round(lof_score, 4))\n        outliers = [i for (i, score) in enumerate(lof_scores) if score > epsilon]\n    return (lof_scores, sorted(outliers))\ndata = np.array([[1, 1], [2, 1], [1, 3], [10, 10], [9.5, 11], [9.8, 10.1]])\nk = 3\nepsilon = 1.5"}
{"task_id": 572, "completion_id": 3, "solution": "import numpy as np\ndef euclidean_distance(point1, point2):\n    \"\"\"Compute the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\ndef euclidean_distance_matrix(data):\n    \"\"\"Compute the full pair-wise Euclidean distance matrix.\"\"\"\n    n = len(data)\n    distance_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance_matrix[i, j] = euclidean_distance(data[i], data[j])\n            distance_matrix[j, i] = distance_matrix[i, j]\n    return distance_matrix\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Calculate the LOF score and find outliers in the data.\"\"\"\n    distance_matrix = euclidean_distance_matrix(data)\n    n = len(data)\n    k_distances = np.zeros(n)\n    k_nearest_neighbours = [[] for _ in range(n)]\n    for i in range(n):\n        sorted_indices = np.argsort(distance_matrix[i])\n        k_nearest_neighbours[i] = sorted_indices[1:k + 1]\n        k_distances[i] = distance_matrix[i, sorted_indices[k]]\n    reachability_distances = []\n    for i in range(n):\n        reachabilities = [max(k_distances[i], distance_matrix[i, j]) for j in k_nearest_neighbours[i]]\n        reachability_distances.append(np.array(reachabilities))\n    lrd = [k / np.sum(reachability_distances[i]) for i in range(n)]\n    lof_scores = []\n    for i in range(n):\n        lof_score = np.mean([lrd[j] for j in k_nearest_neighbours[i]]) / lrd[i]\n        lof_scores.append(np.around(lof_score, decimals=4))\n    outlier_indices = [i for (i, score) in enumerate(lof_scores) if score > epsilon]\n    return (lof_scores, outlier_indices)"}
{"task_id": 572, "completion_id": 4, "solution": "import numpy as np\ndef euclidean_distance(p1, p2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((np.array(p1) - np.array(p2)) ** 2))\ndef pairwise_euclidean_distances(data):\n    \"\"\"Calculate the full pair-wise Euclidean distance matrix.\"\"\"\n    n_samples = len(data)\n    distances = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            distance = euclidean_distance(data[i], data[j])\n            distances[i, j] = distance\n            distances[j, i] = distance\n    return distances\ndef kth_nearest_neighbours(distances, k):\n    \"\"\"Determine the neighbors within the K-distance for each point.\"\"\"\n    n_samples = len(distances)\n    neighbour_indices = {}\n    k_distances = np.zeros(n_samples)\n    for i in range(n_samples):\n        sorted_indices = np.argsort(distances[i])\n        neighbour_indices[i] = sorted_indices[1:k + 1]\n        k_distances[i] = distances[i][sorted_indices[k]]\n    return (neighbour_indices, k_distances)\ndef reachability_distance(distances, p, q, k_distance_q):\n    \"\"\"Calculate the reachability distance from p to q.\"\"\"\n    return max(k_distance_q, distances[p][q])\ndef local_reachability_density(distances, neighbour_indices, k_distance, p):\n    \"\"\"Calculate the Local Reachability Density of point p.\"\"\"\n    n_samples = len(distances)\n    reach_distances_sum = 0.0\n    for q in neighbour_indices[p]:\n        reach_distances_sum += reachability_distance(distances, p, q, k_distance[q])\n    return k_samples / reach_distances_sum if reach_distances_sum > 0 else float('inf')\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) scores for each point in the dataset.\"\"\"\n    distances = pairwise_euclidean_distances(data)\n    (neighbour_indices, k_distances) = kth_nearest_neighbours(distances, k)\n    n_samples = len(data)\n    k_samples = k\n    lrd = {}\n    for p in range(n_samples):\n        lrd[p] = local_reachability_density(distances, neighbour_indices, k_distances, p)\n    lof_scores = np.zeros(n_samples)\n    outlier_indices = []\n    for p in range(n_samples):\n        lrd_sum = 0.0\n        for q in neighbour_indices[p]:\n            lrd_sum += lrd[q]\n        lof_scores[p] = lrd_sum / k_samples / lrd[p]\n        if lof_scores[p] > epsilon:\n            outlier_indices.append(p)\n    lof_scores = np.round(lof_scores, 4)\n    return (list(lof_scores), sorted(outlier_indices))"}
{"task_id": 572, "completion_id": 5, "solution": "import numpy as np\ndef euclidean_distance(point_a, point_b):\n    return np.linalg.norm(np.array(point_a) - np.array(point_b))\ndef pairwise_distance_matrix(data):\n    n_samples = len(data)\n    dist_matrix = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            dist = euclidean_distance(data[i], data[j])\n            dist_matrix[i][j] = dist\n            dist_matrix[j][i] = dist\n    return dist_matrix\ndef k_distances(dist_matrix, k):\n    n_samples = len(dist_matrix)\n    k_distances_list = []\n    k_neighbors = []\n    for i in range(n_samples):\n        dist_array = np.array(dist_matrix[i])\n        sorted_indices = np.argsort(dist_array)\n        kth_distance_index = sorted_indices[k]\n        k_distances_list.append(dist_matrix[i][kth_distance_index])\n        k_neighbors.append(sorted_indices[:k])\n    return (k_distances_list, k_neighbors)\ndef reachability_distance(k_distances, dist_matrix, sample_index, neighbor_index):\n    return max(k_distances[neighbor_index], dist_matrix[sample_index][neighbor_index])\ndef lrd(reach_distances, k):\n    return k / np.sum(reach_distances)\ndef compute_lrd(data, k_neighbors, k_distances, dist_matrix, k):\n    lrds = []\n    for i in range(len(data)):\n        reach_distances = [reachability_distance(k_distances, dist_matrix, i, j) for j in k_neighbors[i]]\n        lrds.append(lrd(reach_distances, k))\n    return lrds\ndef local_outlier_factor(data, k, epsilon=1.5):\n    dist_matrix = pairwise_distance_matrix(data)\n    (k_distances_list, k_neighbors) = k_distances(dist_matrix, k)\n    lrds = compute_lrd(data, k_neighbors, k_distances_list, dist_matrix, k)\n    lof_scores = []\n    outlier_indices = []\n    for i in range(len(data)):\n        lof = np.sum([lrds[j] for j in k_neighbors[i]]) / k / lrds[i]\n        rounded_lof = np.round(lof, 4)\n        lof_scores.append(rounded_lof)\n        if rounded_lof > epsilon:\n            outlier_indices.append(i)\n    return (lof_scores, sorted(outlier_indices))"}
{"task_id": 572, "completion_id": 6, "solution": "import numpy as np\ndef euclidean_distance(p1, p2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((p1 - p2) ** 2))\ndef compute_distance_matrix(data):\n    \"\"\"Compute the pairwise Euclidean distance matrix.\"\"\"\n    n = len(data)\n    matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist = euclidean_distance(data[i], data[j])\n            matrix[i][j] = matrix[j][i] = dist\n    return matrix\ndef knn(dist_matrix, k):\n    \"\"\"For each point, find k-NNs and compute k-distance.\"\"\"\n    n = len(dist_matrix)\n    k_distances = np.zeros(n)\n    k_neighbours = [None] * n\n    for i in range(n):\n        indices = np.argsort(dist_matrix[i])\n        k_neighbours[i] = list(indices[1:k + 1])\n        k_distances[i] = dist_matrix[i][indices[k]]\n    return (k_distances, k_neighbours)\ndef reachability_distance(dist_matrix, k_distances, p, q):\n    \"\"\"Calculate the reachability distance between p and q.\"\"\"\n    return max(k_distances[q], dist_matrix[p][q])\ndef local_reachability_density(dist_matrix, k_distances, k_neighbours, p):\n    \"\"\"Calculate the Local Reachability Density for point p.\"\"\"\n    r_distances = [reachability_distance(dist_matrix, k_distances, p, q) for q in k_neighbours[p]]\n    return k / sum(r_distances)\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Detect local outliers using LOF.\"\"\"\n    dist_matrix = compute_distance_matrix(data)\n    (k_distances, k_neighbours) = knn(dist_matrix, k)\n    n = len(data)\n    lof_scores = np.zeros(n)\n    for p in range(n):\n        lrd_p = local_reachability_density(dist_matrix, k_distances, k_neighbours, p)\n        neighbor_lrd_sum = sum((local_reachability_density(dist_matrix, k_distances, k_neighbours, q) for q in k_neighbours[p]))\n        lof_scores[p] = neighbor_lrd_sum / k / lrd_p\n    lof_scores = np.round(lof_scores, decimals=4)\n    outlier_indices = [i for (i, score) in enumerate(lof_scores) if score > epsilon]\n    return (lof_scores.tolist(), outlier_indices)\ndata = np.array([np.array([1, 2]), np.array([1.2, 2.2]), np.array([30, 20]), np.array([8, 10])])"}
{"task_id": 572, "completion_id": 7, "solution": "import numpy as np\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\ndef create_distance_matrix(data):\n    \"\"\"Create a full pair-wise Euclidean distance matrix.\"\"\"\n    n_samples = len(data)\n    distance_matrix = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j:\n                distance_matrix[i, j] = euclidean_distance(data[i], data[j])\n    return distance_matrix\ndef k_distance(distance_matrix, k):\n    \"\"\"Compute the k-distance and the k nearest neighbors for each point.\"\"\"\n    n_samples = len(distance_matrix)\n    k_distances = []\n    k_nearest_neighbors = []\n    for i in range(n_samples):\n        distances = distance_matrix[i]\n        sorted_indices = np.argsort(distances)\n        k_distances.append(distances[sorted_indices[k]])\n        k_nearest_neighbors.append(sorted_indices[:k])\n    return (np.array(k_distances), k_nearest_neighbors)\ndef reachability_distance(distance_matrix, k_distances, i, j):\n    \"\"\"Compute the reachability distance between two points.\"\"\"\n    return max(k_distances[j], distance_matrix[i, j])\ndef local_reachability_density(distance_matrix, k_distances, k_nearest_neighbors, sample_index):\n    \"\"\"Compute the local reachability density of a sample.\"\"\"\n    reachability_distances = [reachability_distance(distance_matrix, k_distances, sample_index, neighbor) for neighbor in k_nearest_neighbors[sample_index]]\n    return k / np.sum(reachability_distances)\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Calculate the LOF score for each sample and return the scores and outlier indices.\"\"\"\n    k = min(k, len(data) - 1)\n    distance_matrix = create_distance_matrix(data)\n    (k_distances, k_nearest_neighbors) = k_distance(distance_matrix, k)\n    lof_scores = []\n    outlier_indices = []\n    for i in range(len(data)):\n        lrd_i = local_reachability_density(distance_matrix, k_distances, k_nearest_neighbors, i)\n        lrd_ratios = [local_reachability_density(distance_matrix, k_distances, k_nearest_neighbors, neighbor) / lrd_i for neighbor in k_nearest_neighbors[i]]\n        lof_score = np.mean(lrd_ratios)\n        lof_scores.append(lof_score)\n        if lof_score > epsilon:\n            outlier_indices.append(i)\n    return (np.round(lof_scores, 4).tolist(), sorted(outlier_indices))"}
{"task_id": 572, "completion_id": 8, "solution": "import numpy as np\ndef euclidean_distance(p1, p2):\n    return np.sqrt(np.sum((p1 - p2) ** 2))\ndef local_outlier_factor(data, k, epsilon=1.5):\n    (n, d) = data.shape\n    dist_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i, n):\n            dist_matrix[i][j] = dist_matrix[j][i] = euclidean_distance(data[i], data[j])\n    knn_indices = np.argsort(dist_matrix, axis=1)[:, 1:k + 1]\n    k_distances = dist_matrix[np.arange(n)[:, None], knn_indices]\n    k_distances_max = np.max(k_distances, axis=1)\n    reach_dist = np.maximum(dist_matrix[:, :, None], k_distances_max[None, :, None])\n    reach_dist = np.array([reach_dist[i][knn_indices[i]] for i in range(n)])\n    lrd = k / np.sum(reach_dist, axis=1)\n    lrd_neighbors = lrd[knn_indices]\n    lof = np.sum(lrd_neighbors, axis=1) / (k * lrd)\n    lof_rounded = np.round(lof, decimals=4)\n    outlier_indices = np.where(lof_rounded > epsilon)[0].tolist()\n    return (lof_rounded.tolist(), outlier_indices)\ndata = np.array([[0.1, 0.2], [0.2, 0.1], [0.5, 0.2], [0.8, 0.9]])\nk = 2"}
{"task_id": 572, "completion_id": 9, "solution": "import numpy as np\ndef euclidean_distance(x, y):\n    \"\"\"Compute the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((x - y) ** 2))\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Calculate LOF scores and return outliers based on k-distance and reachability distance.\"\"\"\n    data = np.array(data)\n    n_samples = data.shape[0]\n    distances = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            dist = euclidean_distance(data[i], data[j])\n            distances[i][j] = dist\n            distances[j][i] = dist\n    k_distances = np.zeros(n_samples)\n    k_nearest_neighbors = [None] * n_samples\n    for i in range(n_samples):\n        sorted_distances = np.argsort(distances[i])\n        k_nearest_neighbors[i] = list(sorted_distances[1:k + 1])\n        k_distances[i] = distances[i][sorted_distances[k]]\n    reachability_distances = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in k_nearest_neighbors[i][1:]:\n            reachability_distances[i][j] = max(k_distances[j], distances[i][j])\n    lrd = np.zeros(n_samples)\n    for i in range(n_samples):\n        sample_reachability_sum = np.sum(reachability_distances[i][k_nearest_neighbors[i]])\n        lrd[i] = k / sample_reachability_sum\n    lof_scores = np.zeros(n_samples)\n    for i in range(n_samples):\n        sum_neighboring_lrd = np.sum([lrd[j] for j in k_nearest_neighbors[i]])\n        lof_scores[i] = sum_neighboring_lrd / k / lrd[i]\n        lof_scores[i] = np.round(lof_scores[i], decimals=4)\n    outlier_indices = [i for (i, lof) in enumerate(lof_scores) if lof > epsilon]\n    return (lof_scores.tolist(), sorted(outlier_indices))"}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n        random.seed(seed)\n\n    def generate_points(base: int, n: int) -> np.ndarray:\n        x = np.random.uniform(base + 1, base + 9, n)\n        y = np.random.uniform(base + 1, base + 9, n)\n        return np.column_stack((x, y))\n    X_train_list = []\n    X_val_list = []\n    y_train_list = []\n    y_val_list = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        X_train_list.append(generate_points(base, n_train))\n        X_val_list.append(generate_points(base, n_val))\n        y_train_list.append(np.full(n_train, c))\n        y_val_list.append(np.full(n_val, c))\n    X_train = np.concatenate(X_train_list)\n    X_val = np.concatenate(X_val_list)\n    y_train = np.concatenate(y_train_list)\n    y_val = np.concatenate(y_val_list)\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    return (X_train, X_val, y_train, y_val)\nm = 4\nn_train = 10\nn_val = 5\nseed = 42"}
{"task_id": 574, "completion_id": 1, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility. If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    (X_train, X_val) = ([], [])\n    (y_train, y_val) = ([], [])\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.round(np.random.uniform(base + 1, base + 9, n_train), 4)\n        y_train_points = np.round(np.random.uniform(base + 1, base + 9, n_train), 4)\n        X_train.append(np.column_stack((x_train, y_train_points)))\n        y_train.extend([c] * n_train)\n        x_val = np.round(np.random.uniform(base + 1, base + 9, n_val), 4)\n        y_val_points = np.round(np.random.uniform(base + 1, base + 9, n_val), 4)\n        X_val.append(np.column_stack((x_val, y_val_points)))\n        y_val.extend([c] * n_val)\n    X_train = np.concatenate(X_train)\n    X_val = np.concatenate(X_val)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)\nm = 3\nn_train = 5\nn_val = 2\nseed = 42"}
{"task_id": 574, "completion_id": 2, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    (X_train, X_val, y_train, y_val) = ([], [], [], [])\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.round(np.random.uniform(base + 1, base + 9, size=(n_train, 2)), decimals=4)\n        y_train.extend([c] * n_train)\n        X_train.append(x_train)\n        x_val = np.round(np.random.uniform(base + 1, base + 9, size=(n_val, 2)), decimals=4)\n        y_val.extend([c] * n_val)\n        X_val.append(x_val)\n    X_train = np.vstack(X_train)\n    X_val = np.vstack(X_val)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 3, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        for _ in range(n_train):\n            x = round(np.random.uniform(base + 1, base + 9), 4)\n            y = round(np.random.uniform(base + 1, base + 9), 4)\n            X_train.append([x, y])\n            y_train.append(c)\n        for _ in range(n_val):\n            x = round(np.random.uniform(base + 1, base + 9), 4)\n            y = round(np.random.uniform(base + 1, base + 9), 4)\n            X_val.append([x, y])\n            y_val.append(c)\n    X_train = np.array(X_train)\n    X_val = np.array(X_val)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 4, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility. If None the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, (n_train, 2))\n        x_val = np.random.uniform(base + 1, base + 9, (n_val, 2))\n        y = [c] * n_train + [c] * n_val\n        y_train.extend(y[:n_train])\n        y_val.extend(y[n_train:])\n        X_train.extend(x_train)\n        X_val.extend(x_val)\n    X_train = np.round(np.array(X_train), decimals=4)\n    X_val = np.round(np.array(X_val), decimals=4)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)\nm = 3\nn_train = 10\nn_val = 5\nseed = 42"}
{"task_id": 574, "completion_id": 5, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train_list = []\n    y_train_list = []\n    X_val_list = []\n    y_val_list = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        for _ in range(n_train):\n            x = round(random.uniform(base + 1, base + 9), 4)\n            y = round(random.uniform(base + 1, base + 9), 4)\n            X_train_list.append([x, y])\n            y_train_list.append(c)\n        for _ in range(n_val):\n            x = round(random.uniform(base + 1, base + 9), 4)\n            y = round(random.uniform(base + 1, base + 9), 4)\n            X_val_list.append([x, y])\n            y_val_list.append(c)\n    X_train = np.array(X_train_list)\n    y_train = np.array(y_train_list)\n    X_val = np.array(X_val_list)\n    y_val = np.array(y_val_list)\n    return (X_train, X_val, y_train, y_val)\nm = 3\nn_train = 10\nn_val = 5\nseed = 42"}
{"task_id": 574, "completion_id": 6, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    X_val = []\n    y_train = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        for _ in range(n_train):\n            x = round(random.uniform(base + 1, base + 9), 4)\n            y = round(random.uniform(base + 1, base + 9), 4)\n            X_train.append([x, y])\n            y_train.append(c)\n        for _ in range(n_val):\n            x = round(random.uniform(base + 1, base + 9), 4)\n            y = round(random.uniform(base + 1, base + 9), 4)\n            X_val.append([x, y])\n            y_val.append(c)\n    X_train = np.array(X_train)\n    X_val = np.array(X_val)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 7, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    all_x_train = []\n    all_x_val = []\n    all_y_train = []\n    all_y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, (n_train, 2))\n        x_val = np.random.uniform(base + 1, base + 9, (n_val, 2))\n        y_train = np.ones(n_train, dtype=int) * c\n        y_val = np.ones(n_val, dtype=int) * c\n        all_x_train.append(x_train)\n        all_x_val.append(x_val)\n        all_y_train.append(y_train)\n        all_y_val.append(y_val)\n    X_train = np.concatenate(all_x_train)\n    X_val = np.concatenate(all_x_val)\n    y_train = np.concatenate(all_y_train)\n    y_val = np.concatenate(all_y_val)\n    X_train = np.round(X_train, decimals=4)\n    X_val = np.round(X_val, decimals=4)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 8, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    def generate_points(base: int, n: int):\n        \"\"\"Generate n points for the range defined by base.\"\"\"\n        x = np.random.uniform(low=base + 1, high=base + 9, size=n)\n        y = np.random.uniform(low=base + 1, high=base + 9, size=n)\n        return np.column_stack((x, y))\n    X_train = []\n    X_val = []\n    y_train = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2) + 5\n        X_train.append(generate_points(base, n_train))\n        X_val.append(generate_points(base, n_val))\n        y_train.append(np.full(n_train, c))\n        y_val.append(np.full(n_val, c))\n    X_train = np.concatenate(X_train)\n    X_val = np.concatenate(X_val)\n    y_train = np.concatenate(y_train)\n    y_val = np.concatenate(y_val)\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 9, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    X_val = []\n    y_train = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        for _ in range(n_train):\n            x = np.round(np.random.uniform(base + 1, base + 9), 4)\n            y = np.round(np.random.uniform(base + 1, base + 9), 4)\n            X_train.append([x, y])\n            y_train.append(c)\n        for _ in range(n_val):\n            x = np.round(np.random.uniform(base + 1, base + 9), 4)\n            y = np.round(np.random.uniform(base + 1, base + 9), 4)\n            X_val.append([x, y])\n            y_val.append(c)\n    X_train = np.array(X_train)\n    X_val = np.array(X_val)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)\nm = 3\nn_train = 10\nn_val = 5\nseed = 42"}
{"task_id": 579, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centroids = X[:k].copy()\n    (m, d) = X.shape\n    labels = np.full(m, -1)\n    for iter in range(max_iters):\n        old_labels = labels.copy()\n        for i in range(m):\n            distances = np.linalg.norm(X[i] - centroids, axis=1)\n            labels[i] = np.argmin(distances)\n        if np.all(old_labels == labels):\n            break\n        for j in range(k):\n            points_in_cluster = X[labels == j]\n            if len(points_in_cluster) > 0:\n                centroids[j] = np.mean(points_in_cluster, axis=0)\n    centroids = np.round(centroids, 4)\n    return (labels.tolist(), centroids.tolist())"}
{"task_id": 579, "completion_id": 1, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centres = X[:k].copy()\n    for _ in range(max_iters):\n        distances = np.sqrt(((X - centres[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centres = centres.copy()\n        for i in range(k):\n            if np.any(labels == i):\n                new_centres[i] = np.mean(X[labels == i], axis=0)\n        if np.all(centres == new_centres):\n            break\n        centres = new_centres\n    centres = np.round(centres, 4).tolist()\n    return (labels.tolist(), centres)"}
{"task_id": 579, "completion_id": 2, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    labels = np.zeros(m, dtype=int)\n    centres = X[:k].copy()\n    for _ in range(max_iters):\n        prev_labels = labels.copy()\n        distances = np.sqrt(((X - centres[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        if np.array_equal(labels, prev_labels):\n            break\n        for i in range(k):\n            if X[labels == i].size:\n                centres[i] = np.mean(X[labels == i], axis=0)\n    rounded_centres = np.round(centres, 4).tolist()\n    return (labels.tolist(), rounded_centres)"}
{"task_id": 579, "completion_id": 3, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centres = X[:k].copy()\n    labels = np.zeros(m, dtype=int)\n    prev_labels = np.zeros(m, dtype=int)\n    iter_count = 0\n    while iter_count < max_iters:\n        for i in range(m):\n            distances = np.linalg.norm(X[i] - centres, axis=1)\n            min_distance_index = np.argmin(distances)\n            labels[i] = min_distance_index\n        if np.array_equal(labels, prev_labels):\n            break\n        prev_labels = labels.copy()\n        for j in range(k):\n            points_in_cluster = X[labels == j]\n            if len(points_in_cluster) > 0:\n                centres[j] = np.mean(points_in_cluster, axis=0)\n        iter_count += 1\n    rounded_centres = np.round(centres, decimals=4).tolist()\n    labels = labels.tolist()\n    return (labels, rounded_centres)"}
{"task_id": 579, "completion_id": 4, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centres = np.array(X[:k].copy())\n    labels = np.zeros(m, dtype=int)\n    for _ in range(max_iters):\n        old_labels = labels.copy()\n        for i in range(m):\n            distances = np.linalg.norm(X[i] - centres, axis=1)\n            labels[i] = np.argmin(distances)\n        for j in range(k):\n            assigned_points = X[labels == j]\n            if len(assigned_points) > 0:\n                centres[j] = np.mean(assigned_points, axis=0)\n        if np.array_equal(old_labels, labels):\n            break\n    centres_rounded = np.around(centres, decimals=4).tolist()\n    return (labels.tolist(), centres_rounded)"}
{"task_id": 579, "completion_id": 5, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centres = X[:k].copy()\n    (m, d) = X.shape\n    labels = np.zeros(m, dtype=int)\n    for iteration in range(max_iters):\n        new_labels = np.zeros(m, dtype=int)\n        for (idx, point) in enumerate(X):\n            distances = np.linalg.norm(point - centres, axis=1)\n            new_labels[idx] = np.argmin(distances)\n        centres_changed = False\n        for i in range(k):\n            points_in_cluster = X[new_labels == i]\n            if points_in_cluster.size > 0:\n                new_centre = np.mean(points_in_cluster, axis=0)\n                if not np.allclose(centres[i], new_centre, atol=1e-05):\n                    centres[i] = new_centre\n                    centres_changed = True\n        if not centres_changed or (labels == new_labels).all():\n            break\n        labels = new_labels\n    rounded_centres = np.round(centres, decimals=4).tolist()\n    return (labels.tolist(), rounded_centres)"}
{"task_id": 579, "completion_id": 6, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centres = X[:k].copy()\n    (m, _) = X.shape\n    labels = np.zeros(m, dtype=int)\n    for _ in range(max_iters):\n        old_labels = labels.copy()\n        for (i, x) in enumerate(X):\n            distances = np.linalg.norm(x - centres, axis=1)\n            labels[i] = np.argmin(distances)\n        for j in range(k):\n            cluster_points = X[labels == j]\n            if len(cluster_points) > 0:\n                centres[j] = np.mean(cluster_points, axis=0)\n        if np.array_equal(old_labels, labels):\n            break\n    labels = list(labels)\n    centres = [list(np.round(centre, 4)) for centre in centres]\n    return (labels, centres)"}
{"task_id": 579, "completion_id": 7, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"\n    Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centres = X[:k].copy()\n    labels = np.zeros(X.shape[0], dtype=int)\n    for iter_ in range(max_iters):\n        new_labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - centres, axis=-1), axis=1)\n        if np.array_equal(labels, new_labels):\n            break\n        labels = new_labels\n        for i in range(k):\n            points = X[labels == i]\n            if points.shape[0] > 0:\n                centres[i] = np.mean(points, axis=0)\n    rounded_centres = np.round(centres, 4).tolist()\n    return (labels.tolist(), rounded_centres)"}
{"task_id": 579, "completion_id": 8, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centres = X[:k].copy()\n    labels = np.zeros(m, dtype=int)\n    for _ in range(max_iters):\n        new_labels = np.array([np.argmin([np.linalg.norm(point - center) for center in centres]) for point in X])\n        if np.all(labels == new_labels):\n            break\n        labels = new_labels\n        for j in range(k):\n            cluster_points = X[labels == j]\n            if len(cluster_points) > 0:\n                centres[j] = np.mean(cluster_points, axis=0)\n    centres = np.round(centres, decimals=4).tolist()\n    labels = labels.tolist()\n    return (labels, centres)\nX = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]])\nk = 2\nmax_iters = 300"}
{"task_id": 579, "completion_id": 9, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centres = X[:k].copy()\n    labels = np.zeros(m, dtype=int)\n    for _ in range(max_iters):\n        changed = False\n        for i in range(m):\n            distances = np.linalg.norm(X[i] - centres, axis=1)\n            labels[i] = np.argmin(distances)\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n        for i in range(m):\n            new_centres[labels[i]] += X[i]\n            counts[labels[i]] += 1\n        for j in range(k):\n            if counts[j] > 0:\n                new_centres[j] /= counts[j]\n            else:\n                new_centres[j] = centres[j]\n        if np.allclose(new_centres, centres, rtol=1e-05, atol=1e-08):\n            break\n        centres = new_centres\n    centres = np.round(centres, decimals=4).tolist()\n    labels = labels.tolist()\n    return (labels, centres)"}
{"task_id": 581, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    w = np.zeros(n)\n    b = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([float(round(i, 4)) for i in w], round(b, 4))\n    for _ in range(iterations):\n        y_pred = X.dot(w) + b\n        residuals = y - y_pred\n        grad_w = -2 * X.T.dot(residuals) / m\n        grad_b = -2 * np.sum(residuals) / m\n        for j in range(n):\n            sign_wj = -1 if w[j] == 0 else np.sign(w[j])\n            grad_w[j] += l1_penalty * sign_wj + 2 * l2_penalty * w[j]\n        w = w - learning_rate * grad_w / m\n        b = b - learning_rate * grad_b / m\n    return ([float(round(i, 4)) for i in w], round(b, 4))\ny = np.array([0, 1, 2])\nlearning_rate = 0.01\niterations = 1000\nl1_penalty = 0.01\nl2_penalty = 0.01"}
{"task_id": 581, "completion_id": 1, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    w = np.zeros(n)\n    b = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([round(i, 4) for i in w], round(b, 4))\n    for _ in range(iterations):\n        y_pred = np.dot(X, w) + b\n        r = y - y_pred\n        for j in range(n):\n            dw = -2 * np.dot(X[:, j].T, r) + l1_penalty * np.sign(w[j]) + 2 * l2_penalty * w[j]\n            w[j] -= learning_rate * dw / m\n        db = -2 * np.sum(r)\n        b -= learning_rate * db / m\n    return ([round(i, 4) for i in w], round(b, 4))"}
{"task_id": 581, "completion_id": 2, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([float(round(w, 4)) for w in weights], round(bias, 4))\n    for _ in range(iterations):\n        y_pred = np.dot(X, weights) + bias\n        residuals = y - y_pred\n        gradient_w = -2 * np.dot(X.T, residuals) / m\n        gradient_b = -2 * np.sum(residuals) / m\n        for j in range(n):\n            gradient_w[j] += l1_penalty * np.sign(weights[j] or -1) + 2 * l2_penalty * weights[j]\n        weights -= learning_rate * gradient_w / m\n        bias -= learning_rate * gradient_b / m\n    return ([float(round(w, 4)) for w in weights], round(bias, 4))"}
{"task_id": 581, "completion_id": 3, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and\n        bias is a float. Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    w = np.zeros(n)\n    b = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([round(i, 4) for i in w.tolist()], round(b, 4))\n    for _ in range(iterations):\n        y_pred = X.dot(w) + b\n        residuals = y - y_pred\n        gradient_w = -2 * X.T.dot(residuals) / m\n        gradient_b = -2 * np.sum(residuals) / m\n        for j in range(n):\n            gradient_w[j] += l1_penalty * np.sign(w[j] if w[j] != 0 else -1)\n            gradient_w[j] += 2 * l2_penalty * w[j]\n        w -= learning_rate * gradient_w\n        b -= learning_rate * gradient_b\n    return ([round(i, 4) for i in w.tolist()], round(b, 4))"}
{"task_id": 581, "completion_id": 4, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    w = np.zeros(n)\n    b = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return (list(np.round(w, decimals=4)), round(b, 4))\n    for _ in range(iterations):\n        y_pred = X.dot(w) + b\n        residuals = y - y_pred\n        for j in range(n):\n            gradient_w = -2 * np.dot(X[:, j], residuals) + l1_penalty * np.sign(w[j])\n            gradient_w = gradient_w + 2 * l2_penalty * w[j]\n            w[j] -= learning_rate * gradient_w / m\n        gradient_b = -2 * np.sum(residuals)\n        b -= learning_rate * gradient_b / m\n    w_rounded = list(np.round(w, decimals=4))\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 581, "completion_id": 5, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    w = np.zeros(n, dtype=np.float64)\n    b = 0.0\n    for _ in range(iterations):\n        y_pred = X.dot(w) + b\n        residuals = y - y_pred\n        w_gradient = (-2 * X.T.dot(residuals) + l1_penalty * np.sign(w) + 2 * l2_penalty * w) / m\n        b_gradient = -2 * np.sum(residuals) / m\n        w -= learning_rate * w_gradient\n        b -= learning_rate * b_gradient\n    if iterations == 0:\n        return ([float(0.0) for _ in range(n)], float(0.0))\n    return ([round(wj, 4) for wj in w], round(b, 4))"}
{"task_id": 581, "completion_id": 6, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    w = np.zeros(n)\n    b = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return (list(np.round(w, decimals=4)), round(b, decimals=4))\n    for _ in range(iterations):\n        y_pred = X.dot(w) + b\n        residuals = y - y_pred\n        gradient_w = -2 * X.T.dot(residuals) + l1_penalty * np.sign(w).clip(-1, np.inf) + 2 * l2_penalty * w\n        gradient_b = -2 * residuals.sum()\n        w -= learning_rate * gradient_w / m\n        b -= learning_rate * gradient_b / m\n    return (list(np.round(w, decimals=4)), round(b, decimals=4))"}
{"task_id": 581, "completion_id": 7, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    w = np.zeros(n)\n    b = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return (list(np.round(w, decimals=4)), np.round(b, decimals=4))\n    for _ in range(iterations):\n        y_pred = X.dot(w) + b\n        r = y - y_pred\n        grad_w = -2 * X.T.dot(r) + l1_penalty * np.sign(w) + 2 * l2_penalty * w\n        grad_b = -2 * r.sum()\n        w = w - learning_rate * grad_w / m\n        b = b - learning_rate * grad_b / m\n    return (list(np.round(w, decimals=4)), np.round(b, decimals=4))"}
{"task_id": 581, "completion_id": 8, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    if not learning_rate or not iterations:\n        return ([round(weight, 4) for weight in weights.tolist()], round(bias, 4))\n    for _ in range(iterations):\n        y_pred = np.dot(X, weights) + bias\n        residuals = y - y_pred\n        weights_gradients = (-2 * np.dot(X.T, residuals) + l1_penalty * np.sign(weights, out=np.zeros_like(weights), where=weights != 0) + 2 * l2_penalty * weights) / m\n        bias_gradient = -2 * np.sum(residuals) / m\n        weights -= learning_rate * weights_gradients\n        bias -= learning_rate * bias_gradient\n    return ([round(weight, 4) for weight in weights.tolist()], round(bias, 4))"}
{"task_id": 581, "completion_id": 9, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    w = np.zeros(n)\n    b = 0.0\n\n    def custom_sign(x):\n        return np.where(x > 0, 1, -1)\n    if learning_rate == 0 or iterations == 0:\n        return ([round(i, 4) for i in w.tolist()], round(b, 4))\n    for _ in range(iterations):\n        y_pred = np.dot(X, w) + b\n        residuals = y - y_pred\n        grad_w = -2 * X.T.dot(residuals) + l1_penalty * custom_sign(w) + 2 * l2_penalty * w\n        grad_b = -2 * residuals.sum()\n        w -= learning_rate * (grad_w / m)\n        b -= learning_rate * (grad_b / m)\n    rounded_weights = [round(i, 4) for i in w.tolist()]\n    rounded_bias = round(b, 4)\n    return (rounded_weights, rounded_bias)"}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.array([1.0] + x)\n    num_layers = len(weights)\n    for layer in range(num_layers):\n        next_x = []\n        for neuron in weights[layer]:\n            neuron_weight = np.array(neuron)\n            dot_product = np.dot(x, neuron_weight)\n            if layer < num_layers - 1:\n                next_x.append(max(0, dot_product))\n            else:\n                next_x.append(dot_product)\n        x = np.array([1.0] + next_x)\n    final_output = x[1:]\n    rounded_output = np.round(final_output, 4).tolist()\n    if len(rounded_output) == 1:\n        return rounded_output[0]\n    else:\n        return rounded_output"}
{"task_id": 591, "completion_id": 1, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n\n    def relu(z):\n        return np.maximum(0, z)\n\n    def predict(x):\n        for layer in range(len(weights)):\n            input_with_bias = np.insert(x, 0, 1)\n            preact = np.dot(input_with_bias, np.transpose(weights[layer]))\n            x = relu(preact) if layer < len(weights) - 1 else preact\n        return x\n    prediction = predict(x)\n    if len(prediction) == 1:\n        return float(np.round(prediction, 4))\n    else:\n        return np.round(prediction, 4).tolist()"}
{"task_id": 591, "completion_id": 2, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n    \n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    input = np.array(x)\n    for layer_weights in weights[:-1]:\n        input = np.insert(input, 0, 1)\n        output = np.dot(layer_weights, input)\n        input = np.maximum(output, 0)\n    last_layer_weights = weights[-1]\n    input = np.insert(input, 0, 1)\n    output = np.dot(last_layer_weights, input)\n    if output.size == 1:\n        return round(float(output), 4)\n    else:\n        return [round(float(o), 4) for o in output]\nweights = [[[2, 3, 4], [-1, 2, -0.5]], [[1, 0.8], [-2, 1.5], [3, -1]]]\nx = [0.2, 0.5]"}
{"task_id": 591, "completion_id": 3, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    input_vector = x\n    for (layer_idx, layer_weights) in enumerate(weights):\n        input_with_bias = np.insert(input_vector, 0, 1)\n        layer_inputs = np.array(layer_weights) @ input_with_bias\n        input_vector = np.maximum(0, layer_inputs) if layer_idx < len(weights) - 1 else layer_inputs\n    input_vector = np.around(input_vector, 4)\n    return input_vector.item() if len(input_vector) == 1 else input_vector.tolist()\nweights = [[[2.0, 1.0, -3.0], [-1.0, 0.5, 2.5]], [[1.0, -1.5], [2.0, 0.5], [0.0, 1.0]], [[1.0, 1.0, -1.0], [-1.0, 2.0, 0.5]]]\nx = [3.0, -2.0]"}
{"task_id": 591, "completion_id": 4, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network's weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n\n    def relu(x):\n        return max(0, x)\n    x = np.array(x)\n    for (layer_idx, layer_weights) in enumerate(weights):\n        x = np.insert(x, 0, 1)\n        layer_weights = np.array(layer_weights)\n        x = np.dot(layer_weights, x)\n        if layer_idx != len(weights) - 1:\n            x = np.vectorize(relu)(x)\n    x = np.round(x, 4)\n    if x.size == 1:\n        return float(x)\n    else:\n        return x.tolist()\nweights = [[[0.4, 0.2], [-0.1, 0.5]], [[-0.2, -0.3, 0.1]]]\nx = [1.0, 2.0]"}
{"task_id": 591, "completion_id": 5, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n\n    def add_bias_term(vector):\n        return [1] + vector\n\n    def dot_product(v1, wmatrix):\n        return [np.dot(v1, neuron_w) for neuron_w in wmatrix]\n\n    def apply_relu(vector):\n        return [max(0, val) for val in vector]\n    input_vector = add_bias_term(x)\n    for layer in range(len(weights) - 1):\n        input_vector = dot_product(input_vector, weights[layer])\n        input_vector = apply_relu(input_vector)\n        if layer != len(weights) - 2:\n            input_vector = add_bias_term(input_vector)\n    output_vector = dot_product(input_vector, weights[-1])\n    rounded_output = [round(val, 4) for val in output_vector]\n    return rounded_output[0] if len(rounded_output) == 1 else rounded_output\nweights = [[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]]\nx = [1, 2]"}
{"task_id": 591, "completion_id": 6, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.array(x)\n    n_layers = len(weights)\n    for l in range(n_layers):\n        biased_input = np.insert(x, 0, 1)\n        W = np.array(weights[l])\n        z = W @ biased_input\n        if l == n_layers - 1:\n            x = z\n        else:\n            x = np.maximum(z, 0)\n    if len(x) == 1:\n        return round(float(x), 4)\n    else:\n        return [round(float(i), 4) for i in x]\nweights = [[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], [[0.7, -0.5, 0.8], [0.9, -0.6, -0.4]], [[0.1, -0.2, 0.3]]]\nx = [0.5, 0.6]"}
{"task_id": 591, "completion_id": 7, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n    \n    The network topology and parameters are encoded in *weights* where:\n      * *weights[L]* \u2013 weight matrix of layer L,\n      * each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      * the first weight of every neuron is its bias weight.\n      \n    All hidden layers use ReLU, the last layer is linear.\n    \n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n\n    def relu(x: float) -> float:\n        return max(0, x)\n    x = [1] + x\n    for layer in weights:\n        layer_outputs = []\n        for neuron_weights in layer:\n            weighted_sum = np.dot(x, neuron_weights)\n            if layer == weights[-1]:\n                layer_outputs.append(round(weighted_sum, 4))\n            else:\n                layer_outputs.append(round(relu(weighted_sum), 4))\n        x = [1] + layer_outputs\n    if len(x) == 1:\n        return x[0]\n    else:\n        return x[1:]\nweights = [[[-0.2, 0.3, -0.4], [0.5, -0.1, 0.2]], [[0.1, -0.3, 0.4]]]\nx = [0.5, -0.2]"}
{"task_id": 591, "completion_id": 8, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network's weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.array(x)\n    for layer_weights in weights[:-1]:\n        x = np.concatenate((np.array([1]), x))\n        x = np.dot(x, np.array(layer_weights).T)\n        x = np.maximum(0, x)\n    x = np.concatenate((np.array([1]), x))\n    output = np.dot(x, np.array(weights[-1]).T)\n    output = np.round(output, decimals=4)\n    if output.size == 1:\n        return float(output)\n    else:\n        return output.tolist()"}
{"task_id": 591, "completion_id": 9, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = [1] + x\n    for (l, layer_weights) in enumerate(weights):\n        layer_inputs = x\n        x = []\n        for neuron_weights in layer_weights:\n            neuron_output = sum((w * i for (w, i) in zip(neuron_weights, layer_inputs)))\n            if l < len(weights) - 1:\n                x.append(max(0, neuron_output))\n            else:\n                x.append(neuron_output)\n    if len(x) == 1:\n        prediction = round(x[0], 4)\n    else:\n        prediction = [round(neuron_output, 4) for neuron_output in x]\n    return prediction\nweights = [[[1, 0.5, -0.2], [-0.8, 0.3, -0.5]], [[-0.6, 0.9], [0.4, -0.3]], [[1.2, -1.5]]]\nx = [1.0, -1.0]"}
{"task_id": 595, "completion_id": 0, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Compute K-Means centroids without using ML libraries.\"\"\"\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        distances = np.sqrt(((X - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.array([X[labels == i].mean(axis=0) if X[labels == i].size != 0 else centroids[i] for i in range(k)])\n        if np.all(np.linalg.norm(centroids - new_centroids, axis=1) < 0.0001):\n            break\n        centroids = new_centroids\n    sorted_centroids = np.sort(centroids, axis=0)\n    rounded_centroids = np.around(sorted_centroids, decimals=4)\n    return rounded_centroids.tolist()"}
{"task_id": 595, "completion_id": 1, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Performs the K-Means clustering algorithm on the dataset X to find k centroids.\n    \n    Parameters:\n    - X: np.ndarray, the input 2-D array of shape (n_samples, n_features).\n    - k: int, the number of clusters.\n    - max_iters: int, the maximum number of iterations (default=100).\n    \n    Returns:\n    - A list of lists, where each inner list is a centroid rounded to 4 decimals.\n    \"\"\"\n\n    def initialize_centroids(X, k):\n        return X[:k].copy()\n\n    def assign_clusters(X, centroids):\n        dists = np.sum((X - centroids[:, np.newaxis]) ** 2, axis=2)\n        return np.argmin(dists, axis=0)\n\n    def update_centroids(X, labels, k):\n        new_centroids = []\n        for i in range(k):\n            if (labels == i).any():\n                new_centroids.append(X[labels == i].mean(axis=0))\n            else:\n                new_centroids.append(centroids[i])\n        return np.array(new_centroids)\n    centroids = initialize_centroids(X, k)\n    for _ in range(max_iters):\n        old_centroids = centroids.copy()\n        labels = assign_clusters(X, centroids)\n        centroids = update_centroids(X, labels, k)\n        if np.all(np.linalg.norm(centroids - old_centroids, axis=1) < 0.0001):\n            break\n    centroids = np.round(centroids, 4)\n    centroids.sort(axis=0)\n    return centroids.tolist()"}
{"task_id": 595, "completion_id": 2, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Computes centroids for k-means clustering.\n    \n    Parameters:\n    - X: np.ndarray, 2D array with shape (n_samples, n_features).\n    - k: int, the number of clusters.\n    - max_iters: int, the maximum number of iterations. Default is 100.\n    \n    Returns:\n    - A list of lists: Each inner list represents a centroid of shape (n_features,) rounded to 4 decimal places.\n    \"\"\"\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        old_centroids = centroids.copy()\n        distances = np.sum((X[:, np.newaxis, :] - centroids) ** 2, axis=-1)\n        labels = np.argmin(distances, axis=1)\n        for i in range(k):\n            cluster_samples = X[labels == i]\n            if cluster_samples.size:\n                centroids[i] = np.mean(cluster_samples, axis=0)\n        if np.allclose(centroids, old_centroids, atol=0.0001):\n            break\n    centroids = np.round(centroids, decimals=4)\n    sorted_centroids = sorted(centroids.tolist())\n    return sorted_centroids\nX = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\nk = 3"}
{"task_id": 595, "completion_id": 3, "solution": "import numpy as np\ndef squared_euclidean_distance(x, y):\n    \"\"\"Compute the squared Euclidean distance between two points.\"\"\"\n    return np.sum((x - y) ** 2)\ndef compute_closest_centroids(X, centroids):\n    \"\"\"Assign each sample to the nearest centroid.\"\"\"\n    num_samples = X.shape[0]\n    closest_centroids = np.zeros(num_samples, dtype=int)\n    for i in range(num_samples):\n        distances = [squared_euclidean_distance(X[i], centroid) for centroid in centroids]\n        closest_centroids[i] = np.argmin(distances)\n    return closest_centroids\ndef update_centroids(X, closest_centroids, k, centroids):\n    \"\"\"Update each centroid.\"\"\"\n    updated_centroids = np.copy(centroids)\n    for i in range(k):\n        cluster_points = X[closest_centroids == i]\n        if cluster_points.size > 0:\n            updated_centroids[i] = np.mean(cluster_points, axis=0)\n    return updated_centroids\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Perform K-Means clustering to compute the centroids.\n\n    Parameters\n    ----------\n    X : np.ndarray, shape (n_samples, n_features)\n        The input data.\n    k : int\n        The number of clusters.\n    max_iters : int, optional\n        The maximum number of iterations. Default is 100.\n\n    Returns\n    -------\n    list[list[float]]\n        List of sorted and rounded centroids.\n    \"\"\"\n    num_samples = X.shape[0]\n    centroids = X[:k]\n    for _ in range(max_iters):\n        closest_centroids = compute_closest_centroids(X, centroids)\n        updated_centroids = update_centroids(X, closest_centroids, k, centroids)\n        if np.allclose(centroids, updated_centroids, atol=0.0001):\n            break\n        centroids = updated_centroids\n    sorted_centroids = sorted(centroids, key=lambda x: (x[0], x[1] if len(x) > 1 else float('inf')))\n    rounded_centroids = [np.round(centroid, 4).tolist() for centroid in sorted_centroids]\n    return rounded_centroids"}
{"task_id": 595, "completion_id": 4, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Computes the centroids for given data points `X` using K-Means clustering.\n    \n    Parameters:\n    - X: np.ndarray, 2D array of shape (n_samples, n_features) representing the input data.\n    - k: int, the number of clusters to find.\n    - max_iters: int, the maximum number of iterations to perform (default 100).\n    \n    Returns:\n    - A list of lists representing the centroids after clustering, with each centroid's coordinates\n      rounded to 4 decimal places and sorted in ascending lexicographical order.\n    \"\"\"\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        distances = np.linalg.norm(X[:, np.newaxis, :] - centroids, ord=2, axis=2) ** 2\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.zeros((k, X.shape[1]))\n        counts = np.zeros(k)\n        for (i, label) in enumerate(labels):\n            new_centroids[label] += X[i]\n            counts[label] += 1\n        for i in range(k):\n            if counts[i] > 0:\n                new_centroids[i] /= counts[i]\n            else:\n                new_centroids[i] = centroids[i]\n        if np.all(np.abs(new_centroids - centroids) < 0.0001):\n            break\n        centroids = new_centroids\n    sorted_rounded_centroids = np.round(np.sort(centroids, axis=0), decimals=4).tolist()\n    return sorted_rounded_centroids\nX = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0], [8.0, 2.0], [10.0, 2.0], [9.0, 3.0]])\nk = 3"}
{"task_id": 595, "completion_id": 5, "solution": "import numpy as np\ndef squared_euclidean_distance(x, y):\n    return np.sum((x - y) ** 2)\ndef find_closest_centroid(sample, centroids):\n    distances = [squared_euclidean_distance(sample, centroid) for centroid in centroids]\n    return np.argmin(distances)\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        clusters = [[] for _ in range(k)]\n        for sample in X:\n            cluster_idx = find_closest_centroid(sample, centroids)\n            clusters[cluster_idx].append(sample)\n        new_centroids = centroids.copy()\n        for (i, cluster) in enumerate(clusters):\n            if cluster:\n                new_centroids[i] = np.mean(cluster, axis=0)\n        centroid_movement = np.linalg.norm(new_centroids - centroids, axis=1)\n        if np.all(centroid_movement < 0.0001):\n            break\n        centroids = new_centroids\n    sorted_centroids = sorted(map(list, centroids), key=lambda x: (x[0], x[1] if len(x) > 1 else float('inf')))\n    rounded_centroids = [[round(coord, 4) for coord in centroid] for centroid in sorted_centroids]\n    return rounded_centroids"}
{"task_id": 595, "completion_id": 6, "solution": "import numpy as np\ndef squared_euclidean_distance(point1, point2):\n    \"\"\"Compute squared Euclidean distance between two points.\"\"\"\n    return np.sum((point1 - point2) ** 2, axis=0)\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Apply K-Means algorithm to compute centroids only.\n    Returns the sorted centroids after convergence.\n    \"\"\"\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        closest_centroids = np.argmin([squared_euclidean_distance(X, c) for c in centroids], axis=0)\n        new_centroids = np.array([X[closest_centroids == i].mean(axis=0) if len(X[closest_centroids == i]) > 0 else centroids[i] for i in range(k)])\n        if np.all(np.linalg.norm(centroids - new_centroids, axis=1) < 0.0001):\n            break\n        centroids = new_centroids\n    sorted_centroids = sorted([list(np.round(c, decimals=4)) for c in centroids])\n    return sorted_centroids"}
{"task_id": 595, "completion_id": 7, "solution": "import numpy as np\ndef calculate_distance(point, centroid):\n    \"\"\"Calculate the squared Euclidean distance between a point and a centroid.\"\"\"\n    return np.sum((point - centroid) ** 2)\ndef kmeans_centroids(X: np.ndarray, k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"\n    Perform the K-Means clustering algorithm to find the centroids of the clusters.\n    \n    Parameters:\n    X (np.ndarray): The data points for clustering, an array with shape n_samples \u00d7 n_features.\n    k (int): The number of clusters.\n    max_iters (int): Maximum number of iterations to run the algorithm.\n    \n    Returns:\n    list[list[float]]: List of centroids, each rounded to 4 decimal places.\n    \"\"\"\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        clusters = [[] for _ in range(k)]\n        for point in X:\n            distances = [calculate_distance(point, centroid) for centroid in centroids]\n            closest_centroid_index = np.argmin(distances)\n            clusters[closest_centroid_index].append(point)\n        new_centroids = centroids.copy()\n        for (i, cluster_points) in enumerate(clusters):\n            if cluster_points:\n                new_centroids[i] = np.mean(cluster_points, axis=0)\n            else:\n                continue\n        centroid_changes = [np.linalg.norm(new - old) for (new, old) in zip(new_centroids, centroids)]\n        if all((change < 0.0001 for change in centroid_changes)):\n            break\n        centroids = new_centroids\n    sorted_centroids = np.round(np.sort(centroids, axis=0), 4)\n    return sorted_centroids.tolist()"}
{"task_id": 595, "completion_id": 8, "solution": "import numpy as np\ndef squared_euclidean_distance(a, b):\n    \"\"\"Calculate the squared Euclidean distance between two points.\"\"\"\n    return np.sum((a - b) ** 2, axis=1)\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Implement from scratch a K-Means clustering algorithm to compute the centroids.\n    \n    Parameters:\n    X (np.ndarray): 2-D NumPy array representing the samples.\n    k (int): Number of clusters.\n    max_iters (int): Maximum number of iterations.\n    \n    Returns:\n    list[list[float]]: List of centroids, sorted in lexicographical order and rounded to 4 decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        clusters = [[] for _ in range(k)]\n        for sample in X:\n            distances = squared_euclidean_distance(centroids, sample)\n            clusters[np.argmin(distances)].append(sample)\n        new_centroids = centroids.copy()\n        for (i, cluster) in enumerate(clusters):\n            if cluster:\n                new_centroids[i] = np.mean(cluster, axis=0)\n        movement = np.sum((new_centroids - centroids) ** 2)\n        if movement < 0.0001:\n            break\n        centroids = new_centroids\n    centroids = sorted(centroids, key=lambda x: tuple(x))\n    centroids = [list(np.round(centroid, decimals=4)) for centroid in centroids]\n    return centroids"}
{"task_id": 595, "completion_id": 9, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        prev_centroids = centroids.copy()\n        distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2) ** 2\n        closest = np.argmin(distances, axis=1)\n        for centroid_idx in range(k):\n            cluster_points = X[closest == centroid_idx]\n            if cluster_points.size:\n                centroids[centroid_idx] = np.mean(cluster_points, axis=0)\n        if np.all(np.linalg.norm(centroids - prev_centroids) < 0.0001):\n            break\n    sorted_centroids = centroids[np.lexsort(np.transpose(centroids)[::-1])]\n    rounded_centroids = [np.around(centroid, decimals=4).tolist() for centroid in sorted_centroids]\n    return rounded_centroids"}
