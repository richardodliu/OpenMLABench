{"task_id": 0, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    \n    Parameters:\n    - data: np.ndarray where the last column is the target y and all preceding columns are the features X.\n    - alpha: float, the regularisation strength.\n    \n    Returns:\n    - A list of floats representing the weight vector rounded to 4 decimal places.\n      Returns -1 if the matrix (X^T X + alpha I) is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X_with_bias = np.c_[np.ones(X.shape[0]), X]\n    gram_matrix = X_with_bias.T @ X_with_bias + alpha * np.eye(X_with_bias.shape[1])\n    if np.linalg.det(gram_matrix) == 0:\n        return -1\n    w_hat = np.linalg.inv(gram_matrix) @ X_with_bias.T @ y\n    return [round(w, 4) for w in w_hat]"}
{"task_id": 0, "completion_id": 1, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implements Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    \n    Parameters:\n    - data: An ndarray where the last column is the target y and all preceding columns are the features X.\n    - alpha: Regularisation strength, default is 0.0.\n    \n    Returns:\n    - A list of the weight vector rounded to 4 decimal places.\n      Returns -1 if the matrix (X^T X + alpha I) is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X = np.hstack((np.ones((X.shape[0], 1)), X))\n    n_features = X.shape[1]\n    I = np.eye(n_features)\n    A = X.T @ X + alpha * I\n    if np.linalg.det(A) == 0:\n        return -1\n    w = np.linalg.inv(A) @ X.T @ y\n    return w.round(4).tolist()"}
{"task_id": 0, "completion_id": 2, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    \n    Parameters:\n    data (np.ndarray): An ndarray where the last column is the target y and all preceding columns are the features X.\n    alpha (float): The regularisation strength.\n    \n    Returns:\n    list[float]: The weight vector rounded to 4 decimal places.\n    \n    If the matrix (X^T * X + alpha * I) is not invertible, returns -1.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X_b = np.c_[np.ones((X.shape[0], 1)), X]\n    I = np.identity(X_b.shape[1])\n    try:\n        weights = np.linalg.inv(X_b.T.dot(X_b) + alpha * I).dot(X_b.T).dot(y)\n        return [round(w, 4) for w in weights]\n    except np.linalg.LinAlgError:\n        return -1"}
{"task_id": 0, "completion_id": 3, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge Regression using the closed-form solution.\n    \n    Parameters:\n    - data: np.ndarray where the last column is the target y and all preceding columns are the features X.\n    - alpha: float, the regularization strength (default is 0.0).\n    \n    Returns:\n    - A list of coefficients rounded to 4 decimal places. If the matrix is not invertible, returns -1.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X_b = np.c_[np.ones((X.shape[0], 1)), X]\n    I = np.identity(X_b.shape[1])\n    A = X_b.T @ X_b + alpha * I\n    if np.linalg.det(A) == 0:\n        return -1\n    w = np.linalg.inv(A) @ X_b.T @ y\n    return w.round(4).tolist()"}
{"task_id": 0, "completion_id": 4, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge Regression using the closed-form solution.\n    \n    Parameters:\n    - data: A numpy ndarray where the last column is the target y and all preceding columns are the features X.\n    - alpha: Regularization strength, must be non-negative.\n    \n    Returns:\n    - A list of weights rounded to 4 decimal places. If the matrix (X^T X + alpha I) is not invertible, returns -1.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X = np.c_[np.ones(X.shape[0]), X]\n    n_features = X.shape[1]\n    I = np.identity(n_features)\n    A = X.T @ X + alpha * I\n    if np.linalg.det(A) == 0:\n        return -1\n    w = np.linalg.inv(A) @ X.T @ y\n    return [round(weight, 4) for weight in w.tolist()]"}
{"task_id": 0, "completion_id": 5, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    \n    Parameters:\n    - data: np.ndarray where the last column is the target y and all preceding columns are the features X.\n    - alpha: float, the regularisation strength. Defaults to 0.0.\n    \n    Returns:\n    - A list of the weight vector rounded to 4 decimal places.\n      Returns -1 if the matrix (X^T X + alpha I) is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X = np.hstack([np.ones((X.shape[0], 1)), X])\n    n_features = X.shape[1]\n    I = np.eye(n_features)\n    XTX_plus_alphaI = X.T @ X + alpha * I\n    if np.linalg.det(XTX_plus_alphaI) == 0:\n        return -1\n    w_hat = np.linalg.inv(XTX_plus_alphaI) @ X.T @ y\n    return [round(weight, 4) for weight in w_hat]"}
{"task_id": 0, "completion_id": 6, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge Regression using its closed-form solution.\n    \n    Parameters:\n    - data: np.ndarray, where the last column is the target y and all preceding columns are features X.\n    - alpha: float, regularization strength. Default is 0.0.\n    \n    Returns:\n    - list[float]: The weight vector rounded to 4 decimal places, or -1 if the matrix is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X_b = np.c_[np.ones((X.shape[0], 1)), X]\n    I = np.identity(X_b.shape[1])\n    A = X_b.T @ X_b + alpha * I\n    if np.linalg.det(A) == 0:\n        return -1\n    w = np.linalg.inv(A) @ X_b.T @ y\n    return w.round(4).tolist()"}
{"task_id": 0, "completion_id": 7, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"Compute the weight vector for Ridge Regression using the closed-form solution.\n    \n    Args:\n        data (np.ndarray): Input data where the last column is the target y and the preceding columns are features X.\n        alpha (float): Regularization strength (default is 0.0).\n    \n    Returns:\n        list[float]: Weight vector rounded to 4 decimal places, or -1 if the matrix is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X = np.column_stack((np.ones(X.shape[0]), X))\n    XTX = X.T @ X\n    I = np.identity(XTX.shape[0])\n    regularized_matrix = XTX + alpha * I\n    if np.linalg.det(regularized_matrix) == 0:\n        return -1\n    regularized_matrix_inv = np.linalg.inv(regularized_matrix)\n    XTy = X.T @ y\n    w = regularized_matrix_inv @ XTy\n    return w.round(4).tolist()"}
{"task_id": 0, "completion_id": 8, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    \n    Parameters:\n    - data: np.ndarray, where the last column is the target y and all preceding columns are the features X.\n    - alpha: float, the regularisation strength (default is 0.0).\n    \n    Returns:\n    - A list of rounded coefficients of the weight vector if successful, -1 if the matrix is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X_biased = np.hstack([np.ones((X.shape[0], 1)), X])\n    try:\n        inv_matrix = np.linalg.inv(X_biased.T @ X_biased + alpha * np.eye(X_biased.shape[1]))\n        w_hat = inv_matrix @ X_biased.T @ y\n        w_hat_rounded = np.round(w_hat, 4)\n        return w_hat_rounded.tolist()\n    except np.linalg.LinAlgError:\n        return -1"}
{"task_id": 0, "completion_id": 9, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularized) Linear Regression using its closed-form solution.\n    \n    Parameters:\n    - data: np.ndarray where the last column is the target y and all preceding columns are the features X.\n    - alpha: float, the regularization strength.\n    \n    Returns:\n    - A list of floats representing the weight vector rounded to 4 decimal places. \n      Returns -1 if the matrix (X^T X + alpha I) is not invertible.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X_b = np.c_[np.ones((X.shape[0], 1)), X]\n    n_features = X_b.shape[1]\n    I = np.identity(n_features)\n    A = X_b.T.dot(X_b) + alpha * I\n    if np.linalg.det(A) == 0:\n        return -1\n    w = np.linalg.inv(A).dot(X_b.T).dot(y)\n    return w.round(4).tolist()"}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    K = np.dot(X_train, X_train.T)\n    updates = 0\n    converged = False\n    while updates < n_iter and (not converged):\n        converged = True\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                converged = False\n                updates += 1\n                if updates >= n_iter:\n                    break\n    w = np.sum(alpha * y_train[:, np.newaxis] * X_train, axis=0)\n    return ([round(weight, 4) for weight in w], round(b, 4))"}
{"task_id": 1, "completion_id": 1, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    K = np.dot(X_train, X_train.T)\n    for _ in range(n_iter):\n        updated = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[:, i])\n            if y_train[i] * (activation + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                break\n        if not updated:\n            break\n    w = np.sum(alpha * y_train[:, np.newaxis] * X_train, axis=0)\n    return ([round(wi, 4) for wi in w], round(b, 4))"}
{"task_id": 1, "completion_id": 2, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    K = np.dot(X_train, X_train.T)\n    for _ in range(n_iter):\n        updates = 0\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[i, :])\n            if y_train[i] * (activation + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updates += 1\n        if updates == 0:\n            break\n    w = np.sum(alpha * y_train[:, np.newaxis] * X_train, axis=0)\n    return ([round(weight, 4) for weight in w], round(b, 4))"}
{"task_id": 1, "completion_id": 3, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    K = np.dot(X_train, X_train.T)\n    updates = 0\n    converged = False\n    while not converged and updates < n_iter:\n        converged = True\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                converged = False\n                break\n        updates += 1\n    w = np.round(np.sum(alpha * y_train[:, np.newaxis] * X_train, axis=0), 4)\n    b = np.round(b, 4)\n    return (w.tolist(), b)"}
{"task_id": 1, "completion_id": 4, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    K = np.dot(X_train, X_train.T)\n    for _ in range(n_iter):\n        update = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[:, i])\n            if y_train[i] * (activation + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                update = True\n                break\n        if not update:\n            break\n    w = np.round(np.sum(alpha * y_train[:, np.newaxis] * X_train, axis=0), 4)\n    b = np.round(b, 4)\n    return (w.tolist(), b)"}
{"task_id": 1, "completion_id": 5, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    K = np.dot(X_train, X_train.T)\n    for _ in range(n_iter):\n        updated = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[:, i])\n            if y_train[i] * (activation + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                break\n        if not updated:\n            break\n    w = np.dot(alpha * y_train, X_train)\n    return ([round(wi, 4) for wi in w], round(b, 4))"}
{"task_id": 1, "completion_id": 6, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    K = np.dot(X_train, X_train.T)\n    updates = 0\n    i = 0\n    while updates < n_iter:\n        margin = y_train[i] * (np.sum(alpha * y_train * K[i, :]) + b)\n        if margin <= 0:\n            alpha[i] += eta\n            b += eta * y_train[i]\n            updates += 1\n            i = 0\n        else:\n            i += 1\n        if i >= n_samples:\n            break\n    w = np.round(np.sum(alpha * y_train[:, np.newaxis] * X_train, axis=0), 4)\n    b = np.round(b, 4)\n    return (w.tolist(), b)"}
{"task_id": 1, "completion_id": 7, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    K = np.dot(X_train, X_train.T)\n    for _ in range(n_iter):\n        updated = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[:, i])\n            if y_train[i] * (activation + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                break\n        if not updated:\n            break\n    w = np.dot(alpha * y_train, X_train)\n    return ([round(weight, 4) for weight in w], round(b, 4))"}
{"task_id": 1, "completion_id": 8, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    K = np.dot(X_train, X_train.T)\n    for _ in range(n_iter):\n        updated = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[:, i]) + b\n            if y_train[i] * activation <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                break\n        if not updated:\n            break\n    w = np.round(np.dot(alpha * y_train, X_train), 4)\n    b = np.round(b, 4)\n    return (w.tolist(), b)"}
{"task_id": 1, "completion_id": 9, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    K = np.dot(X_train, X_train.T)\n    updates = 0\n    while updates < n_iter:\n        all_correct = True\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                all_correct = False\n                updates += 1\n                break\n        if all_correct:\n            break\n    w = np.sum(alpha * y_train[:, np.newaxis] * X_train, axis=0)\n    return ([round(weight, 4) for weight in w], round(b, 4))"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1.0 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1.0 / (1.0 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1.0 / (mu * (1 - mu))\n    return {'identity': {'link': identity_link, 'inv_link': identity_inv_link, 'derivative': identity_derivative}, 'log': {'link': log_link, 'inv_link': log_inv_link, 'derivative': log_derivative}, 'logit': {'link': logit_link, 'inv_link': logit_inv_link, 'derivative': logit_derivative}}\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 2, "completion_id": 1, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1 / (mu * (1 - mu))\n    links = {'identity': {'link': identity_link, 'inv_link': identity_inv_link, 'derivative': identity_derivative}, 'log': {'link': log_link, 'inv_link': log_inv_link, 'derivative': log_derivative}, 'logit': {'link': logit_link, 'inv_link': logit_inv_link, 'derivative': logit_derivative}}\n    return links\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 2, "completion_id": 2, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity(mu):\n        return mu\n\n    def identity_inv(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log(mu):\n        return np.log(mu)\n\n    def log_inv(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1.0 / mu\n\n    def logit(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv(eta):\n        return 1.0 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1.0 / (mu * (1 - mu))\n    return {'identity': {'link': identity, 'inv_link': identity_inv, 'derivative': identity_derivative}, 'log': {'link': log, 'inv_link': log_inv, 'derivative': log_derivative}, 'logit': {'link': logit, 'inv_link': logit_inv, 'derivative': logit_derivative}}\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 2, "completion_id": 3, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1.0 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1.0 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1.0 / (mu * (1 - mu))\n    return {'identity': {'link': identity_link, 'inv_link': identity_inv_link, 'derivative': identity_derivative}, 'log': {'link': log_link, 'inv_link': log_inv_link, 'derivative': log_derivative}, 'logit': {'link': logit_link, 'inv_link': logit_inv_link, 'derivative': logit_derivative}}"}
{"task_id": 2, "completion_id": 4, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1.0 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1.0 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1.0 / (mu * (1 - mu))\n    return {'identity': {'link': identity_link, 'inv_link': identity_inv_link, 'derivative': identity_derivative}, 'log': {'link': log_link, 'inv_link': log_inv_link, 'derivative': log_derivative}, 'logit': {'link': logit_link, 'inv_link': logit_inv_link, 'derivative': logit_derivative}}\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 2, "completion_id": 5, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1 / (mu * (1 - mu))\n    return {'identity': {'link': identity_link, 'inv_link': identity_inv_link, 'derivative': identity_derivative}, 'log': {'link': log_link, 'inv_link': log_inv_link, 'derivative': log_derivative}, 'logit': {'link': logit_link, 'inv_link': logit_inv_link, 'derivative': logit_derivative}}\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 2, "completion_id": 6, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    identity_link = lambda mu: mu\n    identity_inv_link = lambda eta: eta\n    identity_derivative = lambda mu: np.ones_like(mu)\n    log_link = lambda mu: np.log(mu)\n    log_inv_link = lambda eta: np.exp(eta)\n    log_derivative = lambda mu: 1 / mu\n    logit_link = lambda mu: np.log(mu / (1 - mu))\n    logit_inv_link = lambda eta: 1 / (1 + np.exp(-eta))\n    logit_derivative = lambda mu: 1 / (mu * (1 - mu))\n    return {'identity': {'link': identity_link, 'inv_link': identity_inv_link, 'derivative': identity_derivative}, 'log': {'link': log_link, 'inv_link': log_inv_link, 'derivative': log_derivative}, 'logit': {'link': logit_link, 'inv_link': logit_inv_link, 'derivative': logit_derivative}}"}
{"task_id": 2, "completion_id": 7, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1.0 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1.0 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1.0 / (mu * (1 - mu))\n    return {'identity': {'link': identity_link, 'inv_link': identity_inv_link, 'derivative': identity_derivative}, 'log': {'link': log_link, 'inv_link': log_inv_link, 'derivative': log_derivative}, 'logit': {'link': logit_link, 'inv_link': logit_inv_link, 'derivative': logit_derivative}}"}
{"task_id": 2, "completion_id": 8, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    return {'identity': {'link': lambda mu: mu, 'inv_link': lambda eta: eta, 'derivative': lambda mu: np.ones_like(mu)}, 'log': {'link': lambda mu: np.log(mu), 'inv_link': lambda eta: np.exp(eta), 'derivative': lambda mu: 1 / mu}, 'logit': {'link': lambda mu: np.log(mu / (1 - mu)), 'inv_link': lambda eta: 1 / (1 + np.exp(-eta)), 'derivative': lambda mu: 1 / (mu * (1 - mu))}}\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 2, "completion_id": 9, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1 / (mu * (1 - mu))\n    return {'identity': {'link': identity_link, 'inv_link': identity_inv_link, 'derivative': identity_derivative}, 'log': {'link': log_link, 'inv_link': log_inv_link, 'derivative': log_derivative}, 'logit': {'link': logit_link, 'inv_link': logit_inv_link, 'derivative': logit_derivative}}\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n\n    def build_tree(indices):\n        if len(indices) < 3:\n            return indices\n        feature_idx = np.random.choice(data.shape[1])\n        down = np.min(data[indices, feature_idx])\n        up = np.max(data[indices, feature_idx])\n        v = np.random.uniform(down, up)\n        left_indices = indices[data[indices, feature_idx] <= v]\n        right_indices = indices[data[indices, feature_idx] > v]\n        left_child = build_tree(left_indices)\n        right_child = build_tree(right_indices)\n        return (v, feature_idx, left_child, right_child)\n\n    def traverse_tree(sample_idx, node, depth):\n        if isinstance(node, np.ndarray):\n            return depth\n        (v, feature_idx, left_child, right_child) = node\n        if data[sample_idx, feature_idx] <= v:\n            return traverse_tree(sample_idx, left_child, depth + 1)\n        else:\n            return traverse_tree(sample_idx, right_child, depth + 1)\n    indices = np.arange(data.shape[0])\n    tree = build_tree(indices)\n    depths = [traverse_tree(i, tree, 0) for i in indices]\n    return depths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 1, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n\n    def build_isolation_tree(indices):\n        if len(indices) < 3:\n            return {'leaf': indices}\n        feature_index = np.random.choice(data.shape[1])\n        feature_values = data[indices, feature_index]\n        down = np.min(feature_values)\n        up = np.max(feature_values)\n        if down == up:\n            v = down\n        else:\n            v = np.random.uniform(down, up)\n        left_indices = indices[feature_values <= v]\n        right_indices = indices[feature_values > v]\n        node = {'feature_index': feature_index, 'split_value': v, 'left': build_isolation_tree(left_indices), 'right': build_isolation_tree(right_indices)}\n        return node\n\n    def compute_depth(node, sample_index, depth=0):\n        if 'leaf' in node:\n            return depth\n        feature_index = node['feature_index']\n        split_value = node['split_value']\n        if data[sample_index, feature_index] <= split_value:\n            return compute_depth(node['left'], sample_index, depth + 1)\n        else:\n            return compute_depth(node['right'], sample_index, depth + 1)\n    tree = build_isolation_tree(np.arange(data.shape[0]))\n    depths = [compute_depth(tree, i) for i in range(data.shape[0])]\n    return depths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 2, "solution": "import numpy as np\nfrom collections import Counter\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    (n_samples, n_features) = data.shape\n\n    def build_tree(indices):\n        if len(indices) < 3:\n            return {'type': 'leaf', 'indices': indices}\n        f = np.random.randint(0, n_features)\n        down = data[indices, f].min()\n        up = data[indices, f].max()\n        v = np.random.uniform(down, up)\n        left_indices = indices[data[indices, f] <= v]\n        right_indices = indices[data[indices, f] > v]\n        return {'type': 'node', 'feature': f, 'value': v, 'left': build_tree(left_indices), 'right': build_tree(right_indices)}\n\n    def traverse_tree(node, sample_index, depth):\n        if node['type'] == 'leaf':\n            return (depth, node['indices'].tolist().index(sample_index))\n        elif data[sample_index, node['feature']] <= node['value']:\n            return traverse_tree(node['left'], sample_index, depth + 1)\n        else:\n            return traverse_tree(node['right'], sample_index, depth + 1)\n    root = build_tree(np.arange(n_samples))\n    depths = [traverse_tree(root, i, 0)[0] for i in range(n_samples)]\n    return depths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 3, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n\n    def build_tree(indices):\n        if len(indices) < 3:\n            return {'type': 'leaf', 'indices': indices}\n        n_features = data.shape[1]\n        feature_index = np.random.randint(0, n_features)\n        feature_values = data[indices, feature_index]\n        down = np.min(feature_values)\n        up = np.max(feature_values)\n        if down == up:\n            return {'type': 'leaf', 'indices': indices}\n        split_value = np.random.uniform(down, up)\n        left_indices = indices[feature_values <= split_value]\n        right_indices = indices[feature_values > split_value]\n        return {'type': 'internal', 'feature_index': feature_index, 'split_value': split_value, 'left': build_tree(left_indices), 'right': build_tree(right_indices)}\n\n    def traverse_tree(node, depth, sample_index):\n        if node['type'] == 'leaf':\n            return depth\n        feature_index = node['feature_index']\n        split_value = node['split_value']\n        if data[sample_index, feature_index] <= split_value:\n            return traverse_tree(node['left'], depth + 1, sample_index)\n        else:\n            return traverse_tree(node['right'], depth + 1, sample_index)\n    n_samples = data.shape[0]\n    tree = build_tree(np.arange(n_samples))\n    depths = [traverse_tree(tree, 0, i) for i in range(n_samples)]\n    return depths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 4, "solution": "import numpy as np\nfrom collections import Counter\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n\n    def build_tree(indices):\n        if len(indices) < 3:\n            return {'leaf': indices}\n        feature_index = np.random.randint(data.shape[1])\n        feature_values = data[indices, feature_index]\n        (down, up) = (feature_values.min(), feature_values.max())\n        split_value = np.random.uniform(down, up)\n        left_indices = indices[feature_values <= split_value]\n        right_indices = indices[feature_values > split_value]\n        return {'feature_index': feature_index, 'split_value': split_value, 'left': build_tree(left_indices), 'right': build_tree(right_indices)}\n\n    def get_path_length(tree, index, current_depth=0):\n        if 'leaf' in tree:\n            return current_depth\n        feature_index = tree['feature_index']\n        split_value = tree['split_value']\n        if data[index, feature_index] <= split_value:\n            return get_path_length(tree['left'], index, current_depth + 1)\n        else:\n            return get_path_length(tree['right'], index, current_depth + 1)\n    root = build_tree(np.arange(data.shape[0]))\n    depths = [get_path_length(root, i) for i in range(data.shape[0])]\n    return depths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 5, "solution": "import numpy as np\nfrom collections import Counter\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n\n    def build_tree(indices):\n        if len(indices) < 3:\n            return ('leaf', indices)\n        feature = np.random.choice(data.shape[1])\n        down = np.min(data[indices, feature])\n        up = np.max(data[indices, feature])\n        v = np.random.uniform(down, up)\n        left_indices = indices[data[indices, feature] <= v]\n        right_indices = indices[data[indices, feature] > v]\n        left_child = build_tree(left_indices)\n        right_child = build_tree(right_indices)\n        return ('node', feature, v, left_child, right_child)\n\n    def traverse_tree(node, sample_index, depth):\n        if node[0] == 'leaf':\n            return depth\n        feature = node[1]\n        v = node[2]\n        sample_value = data[sample_index, feature]\n        if sample_value <= v:\n            return traverse_tree(node[3], sample_index, depth + 1)\n        else:\n            return traverse_tree(node[4], sample_index, depth + 1)\n    indices = np.arange(data.shape[0])\n    tree = build_tree(indices)\n    depths = [traverse_tree(tree, i, 0) for i in range(data.shape[0])]\n    return depths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 6, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n\n    class IsolationTreeNode:\n\n        def __init__(self, indices):\n            self.indices = indices\n            self.left = None\n            self.right = None\n            self.feature = None\n            self.threshold = None\n            self.is_leaf = False\n\n        def split(self, data):\n            if len(self.indices) < 3:\n                self.is_leaf = True\n                return\n            feature = np.random.choice(data.shape[1])\n            feature_values = data[self.indices, feature]\n            (down, up) = (np.min(feature_values), np.max(feature_values))\n            threshold = np.random.uniform(down, up)\n            self.feature = feature\n            self.threshold = threshold\n            left_indices = self.indices[feature_values <= threshold]\n            right_indices = self.indices[feature_values > threshold]\n            self.left = IsolationTreeNode(left_indices)\n            self.right = IsolationTreeNode(right_indices)\n            self.left.split(data)\n            self.right.split(data)\n\n        def find_depths(self, depths, current_depth=0):\n            if self.is_leaf:\n                for idx in self.indices:\n                    depths[idx] = current_depth\n            else:\n                if self.left:\n                    self.left.find_depths(depths, current_depth + 1)\n                if self.right:\n                    self.right.find_depths(depths, current_depth + 1)\n    root = IsolationTreeNode(np.arange(data.shape[0]))\n    root.split(data)\n    depths = [0] * data.shape[0]\n    root.find_depths(depths)\n    return depths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 7, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n\n    def build_tree(indices):\n        if len(indices) < 3:\n            return {'indices': indices}\n        f = np.random.choice(data.shape[1])\n        feature_values = data[indices, f]\n        down = np.min(feature_values)\n        up = np.max(feature_values)\n        v = np.random.uniform(down, up)\n        left_indices = indices[feature_values <= v]\n        right_indices = indices[feature_values > v]\n        left_child = build_tree(left_indices)\n        right_child = build_tree(right_indices)\n        return {'feature': f, 'value': v, 'left': left_child, 'right': right_child}\n\n    def traverse_tree(node, index, depth):\n        if 'indices' in node:\n            return depth\n        feature = node['feature']\n        value = node['value']\n        if data[index, feature] <= value:\n            return traverse_tree(node['left'], index, depth + 1)\n        else:\n            return traverse_tree(node['right'], index, depth + 1)\n    root = build_tree(np.arange(data.shape[0]))\n    depths = [traverse_tree(root, i, 0) for i in range(data.shape[0])]\n    return depths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 8, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n\n    def build_isolation_tree(indices):\n        if len(indices) < 3:\n            return {'indices': indices}\n        f = np.random.randint(data.shape[1])\n        down = np.min(data[indices, f])\n        up = np.max(data[indices, f])\n        v = np.random.uniform(down, up)\n        left_indices = indices[data[indices, f] <= v]\n        right_indices = indices[data[indices, f] > v]\n        return {'left': build_isolation_tree(left_indices), 'right': build_isolation_tree(right_indices), 'split_feature': f, 'split_value': v}\n\n    def traverse_tree(tree, depth=0):\n        if 'indices' in tree:\n            for index in tree['indices']:\n                depths[index] = depth\n        else:\n            traverse_tree(tree['left'], depth + 1)\n            traverse_tree(tree['right'], depth + 1)\n    indices = np.arange(data.shape[0])\n    tree = build_isolation_tree(indices)\n    depths = [0] * data.shape[0]\n    traverse_tree(tree)\n    return depths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 3, "completion_id": 9, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n\n    def build_tree(indices):\n        if len(indices) < 3:\n            return {'leaf': indices}\n        f = np.random.choice(data.shape[1])\n        down = np.min(data[indices, f])\n        up = np.max(data[indices, f])\n        v = np.random.uniform(down, up)\n        left_indices = indices[data[indices, f] <= v]\n        right_indices = indices[data[indices, f] > v]\n        return {'feature': f, 'value': v, 'left': build_tree(left_indices), 'right': build_tree(right_indices)}\n\n    def traverse_tree(node, indices, depth):\n        if 'leaf' in node:\n            for idx in indices:\n                depths[idx] = depth\n            return\n        (f, v) = (node['feature'], node['value'])\n        left_indices = indices[data[indices, f] <= v]\n        right_indices = indices[data[indices, f] > v]\n        traverse_tree(node['left'], left_indices, depth + 1)\n        traverse_tree(node['right'], right_indices, depth + 1)\n    n_samples = data.shape[0]\n    depths = [0] * n_samples\n    root = build_tree(np.arange(n_samples))\n    traverse_tree(root, np.arange(n_samples), 0)\n    return depths\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    all_items = [item for transaction in transactions for item in transaction]\n    item_counts = Counter(all_items)\n    frequent_items = {item for (item, count) in item_counts.items() if count >= min_support_count}\n    frequent_itemsets = {}\n    k = 1\n    candidates = [frozenset([item]) for item in frequent_items]\n    while candidates:\n        candidate_counts = Counter()\n        for transaction in transactions:\n            transaction_set = set(transaction)\n            for candidate in candidates:\n                if candidate.issubset(transaction_set):\n                    candidate_counts[candidate] += 1\n        current_frequent_itemsets = {itemset: count for (itemset, count) in candidate_counts.items() if count >= min_support_count}\n        frequent_itemsets.update({tuple(sorted(itemset)): count for (itemset, count) in current_frequent_itemsets.items()})\n        if current_frequent_itemsets:\n            k += 1\n            candidates = generate_next_candidates(current_frequent_itemsets.keys(), k)\n        else:\n            candidates = []\n    return frequent_itemsets\ndef generate_next_candidates(frequent_itemsets: List[frozenset], k: int) -> List[frozenset]:\n    \"\"\"Generate candidate itemsets of length k from frequent itemsets of length k-1.\"\"\"\n    n = len(frequent_itemsets)\n    candidates = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            a = frequent_itemsets[i]\n            b = frequent_itemsets[j]\n            if len(a | b) == k:\n                candidates.add(a | b)\n    return candidates\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 1, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    support_counts = Counter()\n    for transaction in transactions:\n        unique_items = set(transaction)\n        for item in unique_items:\n            support_counts[item,] += 1\n\n    def is_frequent(itemset: Tuple[Hashable, ...]) -> bool:\n        return support_counts[itemset] >= min_support_count\n\n    def generate_candidates(frequent_itemsets: List[Tuple[Hashable, ...]], k: int) -> List[Tuple[Hashable, ...]]:\n        candidates = set()\n        n = len(frequent_itemsets)\n        for i in range(n):\n            for j in range(i + 1, n):\n                a = frequent_itemsets[i]\n                b = frequent_itemsets[j]\n                if a[:-1] == b[:-1]:\n                    candidate = tuple(sorted(set(a).union(b)))\n                    if len(candidate) == k:\n                        valid = True\n                        for subset in combinations(candidate, k - 1):\n                            if tuple(subset) not in frequent_itemsets:\n                                valid = False\n                                break\n                        if valid:\n                            candidates.add(candidate)\n        return list(candidates)\n    k = 1\n    frequent_itemsets = [itemset for itemset in support_counts.keys() if is_frequent(itemset)]\n    while frequent_itemsets:\n        for itemset in frequent_itemsets:\n            support_counts[itemset] = 0\n        candidates = generate_candidates(frequent_itemsets, k + 1)\n        for transaction in transactions:\n            unique_items = set(transaction)\n            for candidate in candidates:\n                if all((item in unique_items for item in candidate)):\n                    support_counts[candidate] += 1\n        frequent_itemsets = [candidate for candidate in candidates if is_frequent(candidate)]\n        k += 1\n    result = {itemset: support_counts[itemset] for itemset in support_counts if is_frequent(itemset)}\n    return result\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 2, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    all_items = set((item for transaction in transactions for item in transaction))\n    itemset_support = {}\n    for k in range(1, len(all_items) + 1):\n        for itemset in combinations(all_items, k):\n            sorted_itemset = tuple(sorted(itemset))\n            support_count = sum((1 for transaction in transactions if set(itemset).issubset(set(transaction))))\n            if support_count >= min_support_count:\n                itemset_support[sorted_itemset] = support_count\n    return itemset_support\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 3, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    num_transactions = len(transactions)\n    min_support_count = math.ceil(minsup * num_transactions)\n    itemset_counter = Counter()\n    unique_items = set((item for transaction in transactions for item in transaction))\n    for k in range(1, len(unique_items) + 1):\n        for itemset in combinations(unique_items, k):\n            itemset = tuple(sorted(itemset))\n            count = sum((1 for transaction in transactions if set(itemset).issubset(transaction)))\n            if count >= min_support_count:\n                itemset_counter[itemset] = count\n    return dict(itemset_counter)\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 4, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    num_transactions = len(transactions)\n    min_support_count = math.ceil(minsup * num_transactions)\n    unique_items = set((item for transaction in transactions for item in transaction))\n    all_combinations = []\n    for r in range(1, len(unique_items) + 1):\n        all_combinations.extend(combinations(unique_items, r))\n    support_counts = Counter()\n    for transaction in transactions:\n        transaction_items = set(transaction)\n        for itemset in all_combinations:\n            if set(itemset).issubset(transaction_items):\n                support_counts[itemset] += 1\n    frequent_itemsets = {itemset: count for (itemset, count) in support_counts.items() if count >= min_support_count}\n    return frequent_itemsets\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 5, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    unique_items = set((item for transaction in transactions for item in transaction))\n    support_counts = Counter()\n    for k in range(1, len(unique_items) + 1):\n        for itemset in combinations(unique_items, k):\n            itemset_count = sum((all((item in transaction for item in itemset)) for transaction in transactions))\n            if itemset_count >= min_support_count:\n                support_counts[itemset] = itemset_count\n    return {itemset: count for (itemset, count) in support_counts.items()}\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 6, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    minsup_count = math.ceil(minsup * N)\n    unique_items = set((item for transaction in transactions for item in transaction))\n    all_candidates = []\n    for k in range(1, len(unique_items) + 1):\n        all_candidates.extend(combinations(unique_items, k))\n    support_count = Counter()\n    for transaction in transactions:\n        transaction_items = set(transaction)\n        for itemset in all_candidates:\n            if set(itemset).issubset(transaction_items):\n                support_count[itemset] += 1\n    frequent_itemsets = {itemset: count for (itemset, count) in support_count.items() if count >= minsup_count}\n    return frequent_itemsets\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 7, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n\n    def get_support(candidate: Tuple[Hashable, ...]) -> int:\n        return sum((1 for transaction in transactions_set if candidate <= transaction))\n    transactions_set = [frozenset(transaction) for transaction in transactions]\n    frequent_itemsets: Dict[Tuple[Hashable, ...], int] = {}\n    item_counter = Counter((item for transaction in transactions for item in transaction))\n    frequent_1_itemsets = {item: support for (item, support) in item_counter.items() if support >= min_support_count}\n    if not frequent_1_itemsets:\n        return {}\n    frequent_itemsets.update({(item,): support for (item, support) in frequent_1_itemsets.items()})\n    k = 2\n    while True:\n        candidates = set(combinations(frequent_1_itemsets.keys(), k))\n        candidate_support = {candidate: get_support(candidate) for candidate in candidates}\n        frequent_k_itemsets = {candidate: support for (candidate, support) in candidate_support.items() if support >= min_support_count}\n        if not frequent_k_itemsets:\n            break\n        frequent_itemsets.update({tuple(candidate): support for (candidate, support) in frequent_k_itemsets.items()})\n        frequent_1_itemsets = frequent_k_itemsets\n        k += 1\n    return frequent_itemsets\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 7, "completion_id": 8, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    n_transactions = len(transactions)\n    min_support_count = math.ceil(minsup * n_transactions)\n    all_items = [item for transaction in transactions for item in set(transaction)]\n    item_supports = Counter(all_items)\n    frequent_items = {item for (item, support) in item_supports.items() if support >= min_support_count}\n    if not frequent_items:\n        return {}\n    candidate_itemsets = []\n    for r in range(1, len(frequent_items) + 1):\n        candidate_itemsets.extend(combinations(frequent_items, r))\n    candidate_supports = Counter()\n    for transaction in transactions:\n        transaction_items = set(transaction)\n        for candidate in candidate_itemsets:\n            if set(candidate).issubset(transaction_items):\n                candidate_supports[candidate] += 1\n    frequent_itemsets = {itemset: support for (itemset, support) in candidate_supports.items() if support >= min_support_count}\n    return frequent_itemsets"}
{"task_id": 7, "completion_id": 9, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    unique_items = set()\n    for transaction in transactions:\n        unique_items.update(transaction)\n    frequent_itemsets = {}\n    for item in unique_items:\n        itemset = (item,)\n        count = sum((1 for transaction in transactions if set(itemset).issubset(set(transaction))))\n        if count >= min_support_count:\n            frequent_itemsets[itemset] = count\n    k = 2\n    while True:\n        candidate_itemsets = set()\n        for itemset1 in frequent_itemsets.keys():\n            for itemset2 in frequent_itemsets.keys():\n                if len(set(itemset1).union(set(itemset2))) == k:\n                    candidate_itemset = tuple(sorted(set(itemset1).union(set(itemset2))))\n                    candidate_itemsets.add(candidate_itemset)\n        candidate_support = Counter()\n        for transaction in transactions:\n            transaction_set = set(transaction)\n            for candidate in candidate_itemsets:\n                if set(candidate).issubset(transaction_set):\n                    candidate_support[candidate] += 1\n        new_frequent_itemsets = {itemset: count for (itemset, count) in candidate_support.items() if count >= min_support_count}\n        if not new_frequent_itemsets:\n            break\n        frequent_itemsets.update(new_frequent_itemsets)\n        k += 1\n    return frequent_itemsets\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    centroids = data[:k].copy()\n    for iteration in range(max_iter):\n        distances = np.sum((data[:, np.newaxis] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([data[labels == i].mean(axis=0) for i in range(k)])\n        for i in range(k):\n            if len(data[labels == i]) == 0:\n                random_idx = np.random.randint(0, len(data))\n                new_centroids[i] = data[random_idx]\n        max_centroid_change = np.max(np.linalg.norm(new_centroids - centroids, axis=1))\n        if max_centroid_change < epsilon:\n            break\n        centroids = new_centroids\n    centroids = np.round(centroids, 4).tolist()\n    return (centroids, labels.tolist())"}
{"task_id": 11, "completion_id": 1, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    centroids = data[:k].copy()\n    for _ in range(max_iter):\n        distances = np.array([[np.sum((x - c) ** 2) for c in centroids] for x in data])\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([data[labels == i].mean(axis=0) if np.any(labels == i) else data[np.random.randint(data.shape[0])] for i in range(k)])\n        for i in range(k):\n            if not np.any(labels == i):\n                new_centroids[i] = data[np.random.randint(data.shape[0])]\n        max_centroid_change = np.max(np.abs(new_centroids - centroids))\n        if max_centroid_change < epsilon:\n            break\n        centroids = new_centroids\n    rounded_centroids = [list(np.round(c, 4)) for c in centroids]\n    return (rounded_centroids, list(labels))"}
{"task_id": 11, "completion_id": 2, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    centroids = data[:k].copy()\n    for _ in range(max_iter):\n        labels = []\n        for sample in data:\n            distances = [np.sum((sample - centroid) ** 2) for centroid in centroids]\n            labels.append(np.argmin(distances))\n        new_centroids = np.zeros_like(centroids)\n        cluster_counts = np.zeros(k, dtype=int)\n        for (i, label) in enumerate(labels):\n            new_centroids[label] += data[i]\n            cluster_counts[label] += 1\n        for j in range(k):\n            if cluster_counts[j] == 0:\n                random_index = np.random.randint(data.shape[0])\n                new_centroids[j] = data[random_index]\n            else:\n                new_centroids[j] /= cluster_counts[j]\n        max_centroid_change = np.max(np.sum((new_centroids - centroids) ** 2, axis=1))\n        if max_centroid_change < epsilon:\n            break\n        centroids = new_centroids\n    rounded_centroids = np.round(centroids, 4).tolist()\n    return (rounded_centroids, labels)"}
{"task_id": 11, "completion_id": 3, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centers = data[:k]\n    for iteration in range(max_iter):\n        labels = []\n        for sample in data:\n            distances = np.sum((sample - centers) ** 2, axis=1)\n            nearest_center_index = np.argmin(distances)\n            labels.append(nearest_center_index)\n        new_centers = np.zeros_like(centers)\n        counts = np.zeros(k, dtype=int)\n        for (i, label) in enumerate(labels):\n            new_centers[label] += data[i]\n            counts[label] += 1\n        for j in range(k):\n            if counts[j] == 0:\n                random_index = np.random.randint(n_samples)\n                new_centers[j] = data[random_index]\n            else:\n                new_centers[j] /= counts[j]\n        max_center_change = np.max(np.sum((new_centers - centers) ** 2, axis=1))\n        centers = new_centers\n        if max_center_change < epsilon:\n            break\n    rounded_centers = np.round(centers, 4).tolist()\n    return (rounded_centers, labels)"}
{"task_id": 11, "completion_id": 4, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centroids = data[:k].copy()\n    for _ in range(max_iter):\n        labels = [np.argmin([np.sum((x - c) ** 2) for c in centroids]) for x in data]\n        new_centroids = np.array([data[labels == i].mean(axis=0) if np.any(labels == i) else data[np.random.randint(n_samples)] for i in range(k)])\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < epsilon):\n            break\n        centroids = new_centroids.copy()\n    centroids_rounded = np.round(centroids, 4).tolist()\n    return (centroids_rounded, labels)"}
{"task_id": 11, "completion_id": 5, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    centres = data[:k].copy()\n    (num_samples, num_features) = data.shape\n    labels = np.zeros(num_samples, dtype=int)\n    for _ in range(max_iter):\n        for i in range(num_samples):\n            distances = np.sum((data[i] - centres) ** 2, axis=1)\n            labels[i] = np.argmin(distances)\n        old_centres = centres.copy()\n        for j in range(k):\n            cluster_samples = data[labels == j]\n            if len(cluster_samples) == 0:\n                random_index = np.random.randint(0, num_samples)\n                centres[j] = data[random_index]\n            else:\n                centres[j] = np.mean(cluster_samples, axis=0)\n        max_center_change = np.max(np.sqrt(np.sum((centres - old_centres) ** 2, axis=1)))\n        if max_center_change < epsilon:\n            break\n    centres = np.round(centres, 4).tolist()\n    labels = labels.tolist()\n    return (centres, labels)"}
{"task_id": 11, "completion_id": 6, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    centroids = data[:k].copy().astype(float)\n    for _ in range(max_iter):\n        labels = []\n        for sample in data:\n            distances = np.sum((centroids - sample) ** 2, axis=1)\n            nearest_centroid_index = np.argmin(distances)\n            labels.append(nearest_centroid_index)\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(k, dtype=int)\n        for (label, sample) in zip(labels, data):\n            new_centroids[label] += sample\n            counts[label] += 1\n        for i in range(k):\n            if counts[i] == 0:\n                new_centroids[i] = data[np.random.randint(data.shape[0])]\n            else:\n                new_centroids[i] /= counts[i]\n        max_centroid_change = np.max(np.sum((new_centroids - centroids) ** 2, axis=1)) ** 0.5\n        if max_centroid_change < epsilon:\n            break\n        centroids = new_centroids.copy()\n    rounded_centroids = np.round(centroids, 4).tolist()\n    return (rounded_centroids, labels)"}
{"task_id": 11, "completion_id": 7, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    centres = data[:k].copy()\n    for _ in range(max_iter):\n        labels = []\n        for sample in data:\n            distances = np.sum((sample - centres) ** 2, axis=1)\n            labels.append(np.argmin(distances))\n        new_centres = np.array([data[labels == i].mean(axis=0) for i in range(k)])\n        for i in range(k):\n            if len(data[labels == i]) == 0:\n                random_idx = np.random.randint(0, data.shape[0])\n                new_centres[i] = data[random_idx]\n        max_change = np.max(np.abs(new_centres - centres))\n        if max_change < epsilon:\n            break\n        centres = new_centres\n    centres_rounded = np.round(centres, 4).tolist()\n    return (centres_rounded, labels)"}
{"task_id": 11, "completion_id": 8, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    centres = data[:k].copy()\n    for _ in range(max_iter):\n        labels = []\n        for sample in data:\n            distances = np.sum((sample - centres) ** 2, axis=1)\n            labels.append(np.argmin(distances))\n        new_centres = np.zeros((k, data.shape[1]))\n        counts = np.zeros(k)\n        for (label, sample) in zip(labels, data):\n            new_centres[label] += sample\n            counts[label] += 1\n        for i in range(k):\n            if counts[i] == 0:\n                random_idx = np.random.randint(data.shape[0])\n                new_centres[i] = data[random_idx]\n            else:\n                new_centres[i] /= counts[i]\n        max_centre_change = np.max(np.linalg.norm(new_centres - centres, axis=1))\n        centres = new_centres\n        if max_centre_change < epsilon:\n            break\n    rounded_centres = np.round(centres, 4).tolist()\n    return (rounded_centres, labels)"}
{"task_id": 11, "completion_id": 9, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    centres = data[:k].copy()\n    labels = np.zeros(n_samples, dtype=int)\n    for _ in range(max_iter):\n        for i in range(n_samples):\n            distances = np.sum((data[i] - centres) ** 2, axis=1)\n            labels[i] = np.argmin(distances)\n        old_centres = centres.copy()\n        for j in range(k):\n            cluster_samples = data[labels == j]\n            if len(cluster_samples) == 0:\n                random_index = np.random.randint(n_samples)\n                centres[j] = data[random_index]\n            else:\n                centres[j] = np.mean(cluster_samples, axis=0)\n        max_movement = np.max(np.sum((centres - old_centres) ** 2, axis=1))\n        if max_movement < epsilon:\n            break\n    centres = np.round(centres, 4).tolist()\n    return (centres, labels.tolist())"}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            users_rated_both = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(users_rated_both) == 0:\n                S[i, j] = S[j, i] = 0\n            else:\n                v1 = data[users_rated_both, i]\n                v2 = data[users_rated_both, j]\n                if criterion == 'cosine':\n                    std_v1 = np.std(v1)\n                    std_v2 = np.std(v2)\n                    if std_v1 > 0.001:\n                        v1 = v1 - np.mean(v1)\n                    if std_v2 > 0.001:\n                        v2 = v2 - np.mean(v2)\n                    dot_product = np.dot(v1, v2)\n                    norm_v1 = np.linalg.norm(v1)\n                    norm_v2 = np.linalg.norm(v2)\n                    if norm_v1 > 0 and norm_v2 > 0:\n                        S[i, j] = dot_product / (norm_v1 * norm_v2)\n                    else:\n                        S[i, j] = 0\n                elif criterion == 'pearson':\n                    (S[i, j], _) = np.corrcoef(v1, v2)\n                S[j, i] = S[i, j]\n    active_user_ratings = data[user_ind]\n    rated_items = np.where(active_user_ratings > 0)[0]\n    r = active_user_ratings[rated_items]\n    scores = defaultdict(float)\n    for t in range(n_item):\n        if t not in rated_items:\n            numerator = np.sum(r * S[t, rated_items])\n            denominator = np.sum(np.abs(S[t, rated_items]))\n            scores[t] = numerator / denominator if denominator != 0 else 0\n    recommended_items = sorted(scores, key=scores.get, reverse=True)[:k]\n    return recommended_items"}
{"task_id": 13, "completion_id": 1, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            users_who_rated_both = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(users_who_rated_both) == 0:\n                S[i, j] = 0\n                S[j, i] = 0\n            else:\n                v1 = data[users_who_rated_both, i]\n                v2 = data[users_who_rated_both, j]\n                if criterion == 'cosine':\n                    if np.std(v1) > 0.001 and np.std(v2) > 0.001:\n                        v1_mean_centered = v1 - np.mean(v1)\n                        v2_mean_centered = v2 - np.mean(v2)\n                        S[i, j] = np.dot(v1_mean_centered, v2_mean_centered) / (np.linalg.norm(v1_mean_centered) * np.linalg.norm(v2_mean_centered))\n                    else:\n                        S[i, j] = 0\n                elif criterion == 'pearson':\n                    S[i, j] = np.corrcoef(v1, v2)[0, 1]\n                S[j, i] = S[i, j]\n    rated_items = np.where(data[user_ind, :] > 0)[0]\n    r = data[user_ind, rated_items]\n    scores = defaultdict(float)\n    denominators = defaultdict(float)\n    for t in range(n_item):\n        if t not in rated_items:\n            for (i, item_ind) in enumerate(rated_items):\n                score_t = r[i] * S[t, item_ind]\n                denominator_t = np.abs(S[t, item_ind])\n                scores[t] += score_t\n                denominators[t] += denominator_t\n    final_scores = {item: scores[item] / denominators[item] if denominators[item] != 0 else 0 for item in scores}\n    sorted_items = sorted(final_scores.items(), key=lambda x: (-x[1], x[0]))\n    recommended_items = [item for (item, score) in sorted_items[:k]]\n    return recommended_items"}
{"task_id": 13, "completion_id": 2, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            users_rated_i = np.where(data[:, i] > 0)[0]\n            users_rated_j = np.where(data[:, j] > 0)[0]\n            common_users = np.intersect1d(users_rated_i, users_rated_j)\n            if len(common_users) == 0:\n                S[i, j] = 0\n                S[j, i] = 0\n            else:\n                v1 = data[common_users, i]\n                v2 = data[common_users, j]\n                if criterion == 'cosine':\n                    mean_v1 = np.mean(v1)\n                    mean_v2 = np.mean(v2)\n                    std_v1 = np.std(v1)\n                    std_v2 = np.std(v2)\n                    if std_v1 > 0.001 and std_v2 > 0.001:\n                        v1_centered = v1 - mean_v1\n                        v2_centered = v2 - mean_v2\n                        S[i, j] = np.dot(v1_centered, v2_centered) / (np.linalg.norm(v1_centered) * np.linalg.norm(v2_centered))\n                    else:\n                        S[i, j] = 0\n                elif criterion == 'pearson':\n                    S[i, j] = np.corrcoef(v1, v2)[0, 1]\n                S[j, i] = S[i, j]\n    rated_items = np.where(data[user_ind, :] > 0)[0]\n    r = data[user_ind, rated_items]\n    scores = defaultdict(float)\n    for t in range(n_item):\n        if t not in rated_items:\n            numerator = np.sum(r * S[t, rated_items])\n            denominator = np.sum(np.abs(S[t, rated_items]))\n            if denominator != 0:\n                scores[t] = numerator / denominator\n    recommended_items = sorted(scores, key=scores.get, reverse=True)[:k]\n    return recommended_items"}
{"task_id": 13, "completion_id": 3, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_users, n_items) = data.shape\n    S = np.zeros((n_items, n_items))\n    for i in range(n_items):\n        for j in range(i + 1, n_items):\n            users_who_rated_both = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(users_who_rated_both) == 0:\n                continue\n            v1 = data[users_who_rated_both, i]\n            v2 = data[users_who_rated_both, j]\n            if criterion == 'cosine':\n                std_v1 = np.std(v1)\n                std_v2 = np.std(v2)\n                if std_v1 > 0.001 and std_v2 > 0.001:\n                    v1_mean_centered = v1 - np.mean(v1)\n                    v2_mean_centered = v2 - np.mean(v2)\n                    similarity = np.dot(v1_mean_centered, v2_mean_centered) / (np.linalg.norm(v1_mean_centered) * np.linalg.norm(v2_mean_centered))\n                else:\n                    similarity = 0.0\n            elif criterion == 'pearson':\n                similarity = np.corrcoef(v1, v2)[0, 1]\n            else:\n                raise ValueError(\"Criterion must be either 'cosine' or 'pearson'\")\n            S[i, j] = similarity\n            S[j, i] = similarity\n    rated_items = np.where(data[user_ind, :] > 0)[0]\n    ratings = data[user_ind, rated_items]\n    if len(rated_items) == 0:\n        return []\n    scores = defaultdict(float)\n    for t in range(n_items):\n        if t in rated_items:\n            continue\n        numerator = 0.0\n        denominator = 0.0\n        for (idx, i) in enumerate(rated_items):\n            sim = S[t, i]\n            numerator += ratings[idx] * sim\n            denominator += abs(sim)\n        if denominator > 0:\n            scores[t] = numerator / denominator\n    sorted_scores = sorted(scores.items(), key=lambda item: item[1], reverse=True)\n    top_k_items = [item[0] for item in sorted_scores[:k]]\n    return top_k_items"}
{"task_id": 13, "completion_id": 4, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            common_users = np.nonzero((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(common_users) == 0:\n                S[i, j] = S[j, i] = 0\n                continue\n            v1 = data[common_users, i]\n            v2 = data[common_users, j]\n            if criterion == 'cosine':\n                std1 = np.std(v1)\n                std2 = np.std(v2)\n                if std1 > 0.001 and std2 > 0.001:\n                    v1 -= v1.mean()\n                    v2 -= v2.mean()\n                S[i, j] = S[j, i] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2)) if np.linalg.norm(v1) * np.linalg.norm(v2) != 0 else 0\n            elif criterion == 'pearson':\n                S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1] if not np.isnan(np.corrcoef(v1, v2)[0, 1]) else 0\n    rated_items = np.nonzero(data[user_ind, :] > 0)[0]\n    r = data[user_ind, rated_items]\n    scores = defaultdict(float)\n    denominators = defaultdict(float)\n    for t in range(n_item):\n        if t not in rated_items:\n            for (i_idx, i) in enumerate(rated_items):\n                scores[t] += r[i_idx] * S[t, i]\n                denominators[t] += abs(S[t, i])\n            if denominators[t] == 0:\n                scores[t] = 0\n            else:\n                scores[t] /= denominators[t]\n    sorted_items = sorted(scores.items(), key=lambda x: (-x[1], x[0]))\n    recommended_items = [item for (item, score) in sorted_items[:k]]\n    return recommended_items"}
{"task_id": 13, "completion_id": 5, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            users_rated_both = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if users_rated_both.size == 0:\n                S[i, j] = S[j, i] = 0\n                continue\n            v1 = data[users_rated_both, i]\n            v2 = data[users_rated_both, j]\n            if criterion == 'cosine':\n                std_v1 = np.std(v1)\n                std_v2 = np.std(v2)\n                if std_v1 > 0.001 and std_v2 > 0.001:\n                    v1_centered = v1 - np.mean(v1)\n                    v2_centered = v2 - np.mean(v2)\n                    cosine_sim = np.dot(v1_centered, v2_centered) / (np.linalg.norm(v1_centered) * np.linalg.norm(v2_centered))\n                else:\n                    cosine_sim = 0\n                S[i, j] = S[j, i] = cosine_sim\n            elif criterion == 'pearson':\n                pearson_sim = np.corrcoef(v1, v2)[0, 1]\n                S[i, j] = S[j, i] = pearson_sim\n    rated_items = np.where(data[user_ind] > 0)[0]\n    ratings = data[user_ind, rated_items]\n    scores = defaultdict(float)\n    for t in range(n_item):\n        if t not in rated_items:\n            numerator = np.sum(ratings * S[t, rated_items])\n            denominator = np.sum(np.abs(S[t, rated_items]))\n            score = numerator / denominator if denominator != 0 else 0\n            scores[t] = score\n    recommended_items = sorted(scores, key=scores.get, reverse=True)[:k]\n    return recommended_items"}
{"task_id": 13, "completion_id": 6, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    active_user_ratings = data[user_ind]\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            users_who_rated_both = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(users_who_rated_both) == 0:\n                S[i, j] = S[j, i] = 0\n            else:\n                v1 = data[users_who_rated_both, i]\n                v2 = data[users_who_rated_both, j]\n                if criterion == 'cosine':\n                    if np.std(v1) > 0.001:\n                        v1 -= np.mean(v1)\n                    if np.std(v2) > 0.001:\n                        v2 -= np.mean(v2)\n                    S[i, j] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2)) if np.linalg.norm(v1) * np.linalg.norm(v2) != 0 else 0\n                elif criterion == 'pearson':\n                    S[i, j] = np.corrcoef(v1, v2)[0, 1] if len(v1) > 1 else 0\n                S[j, i] = S[i, j]\n    rated_items = np.where(active_user_ratings > 0)[0]\n    scores = defaultdict(float)\n    denominators = defaultdict(float)\n    for t in range(n_item):\n        if t not in rated_items:\n            for i in rated_items:\n                scores[t] += active_user_ratings[i] * S[t, i]\n                denominators[t] += abs(S[t, i])\n            if denominators[t] != 0:\n                scores[t] /= denominators[t]\n            else:\n                scores[t] = 0\n    sorted_items = sorted(scores, key=scores.get, reverse=True)\n    return sorted_items[:k]"}
{"task_id": 13, "completion_id": 7, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            users_who_rated_both = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(users_who_rated_both) == 0:\n                S[i, j] = S[j, i] = 0\n                continue\n            v1 = data[users_who_rated_both, i]\n            v2 = data[users_who_rated_both, j]\n            if criterion == 'cosine':\n                if np.std(v1) > 0.001:\n                    v1 = v1 - np.mean(v1)\n                if np.std(v2) > 0.001:\n                    v2 = v2 - np.mean(v2)\n                similarity = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2)) if np.linalg.norm(v1) * np.linalg.norm(v2) != 0 else 0\n            elif criterion == 'pearson':\n                similarity = np.corrcoef(v1, v2)[0, 1]\n            else:\n                raise ValueError(\"Criterion must be either 'cosine' or 'pearson'\")\n            S[i, j] = S[j, i] = similarity\n    rated_items = np.where(data[user_ind, :] > 0)[0]\n    ratings = data[user_ind, rated_items]\n    scores = defaultdict(float)\n    for t in range(n_item):\n        if t not in rated_items:\n            denominator = np.sum(np.abs(S[t, rated_items]))\n            if denominator == 0:\n                scores[t] = 0\n            else:\n                numerator = np.sum(ratings * S[t, rated_items])\n                scores[t] = numerator / denominator\n    recommended_items = sorted(scores.keys(), key=lambda x: (scores[x], -x), reverse=True)[:k]\n    return recommended_items"}
{"task_id": 13, "completion_id": 8, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            usersRatedBoth = data[:, i] > 0\n            usersRatedBoth &= data[:, j] > 0\n            if not np.any(usersRatedBoth):\n                S[i, j] = S[j, i] = 0\n            else:\n                v1 = data[usersRatedBoth, i]\n                v2 = data[usersRatedBoth, j]\n                if criterion == 'cosine':\n                    if np.std(v1) > 0.001:\n                        v1 -= np.mean(v1)\n                    if np.std(v2) > 0.001:\n                        v2 -= np.mean(v2)\n                    if np.linalg.norm(v1) == 0 or np.linalg.norm(v2) == 0:\n                        S[i, j] = S[j, i] = 0\n                    else:\n                        S[i, j] = S[j, i] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                elif criterion == 'pearson':\n                    S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1]\n    rated_items = np.where(data[user_ind] > 0)[0]\n    r = data[user_ind, rated_items]\n    scores = defaultdict(float)\n    for t in range(n_item):\n        if t not in rated_items:\n            numerator = 0\n            denominator = 0\n            for (idx, i) in enumerate(rated_items):\n                numerator += r[idx] * S[t, i]\n                denominator += abs(S[t, i])\n            if denominator != 0:\n                scores[t] = numerator / denominator\n    sorted_items = sorted(scores, key=scores.get, reverse=True)\n    return sorted_items[:k]"}
{"task_id": 13, "completion_id": 9, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_user, n_item) = data.shape\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            users_rated_both = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(users_rated_both) == 0:\n                S[i, j] = S[j, i] = 0\n            else:\n                v1 = data[users_rated_both, i]\n                v2 = data[users_rated_both, j]\n                if criterion == 'cosine':\n                    std_v1 = np.std(v1)\n                    std_v2 = np.std(v2)\n                    if std_v1 > 0.001 and std_v2 > 0.001:\n                        v1_mean_centered = v1 - np.mean(v1)\n                        v2_mean_centered = v2 - np.mean(v2)\n                        S[i, j] = np.dot(v1_mean_centered, v2_mean_centered) / (np.linalg.norm(v1_mean_centered) * np.linalg.norm(v2_mean_centered))\n                    else:\n                        S[i, j] = 0\n                elif criterion == 'pearson':\n                    S[i, j] = np.corrcoef(v1, v2)[0, 1]\n                S[j, i] = S[i, j]\n    rated_items = np.where(data[user_ind, :] > 0)[0]\n    unrated_items = np.where(data[user_ind, :] == 0)[0]\n    r = data[user_ind, rated_items]\n    scores = defaultdict(float)\n    for t in unrated_items:\n        numerator = 0\n        denominator = 0\n        for (i, item) in enumerate(rated_items):\n            numerator += r[i] * S[t, item]\n            denominator += abs(S[t, item])\n        if denominator > 0:\n            scores[t] = numerator / denominator\n        else:\n            scores[t] = 0\n    recommended_items = sorted(scores, key=scores.get, reverse=True)[:k]\n    return recommended_items"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    max_gain = 0\n    best_feature = None\n    best_threshold = None\n    G = np.sum(g)\n    H = np.sum(h)\n    current_loss = -0.5 * G ** 2 / (H + lam) + gamma\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        if len(unique_values) < 2:\n            continue\n        sorted_indices = np.argsort(X[:, feature_index])\n        g_sorted = g[sorted_indices]\n        h_sorted = h[sorted_indices]\n        X_sorted = X[sorted_indices, feature_index]\n        G_L = 0\n        H_L = 0\n        for i in range(1, n_samples):\n            G_L += g_sorted[i - 1]\n            H_L += h_sorted[i - 1]\n            G_R = G - G_L\n            H_R = H - H_L\n            if i < 2 or i > n_samples - 2:\n                continue\n            loss_L = -0.5 * G_L ** 2 / (H_L + lam) + gamma\n            loss_R = -0.5 * G_R ** 2 / (H_R + lam) + gamma\n            gain = current_loss - (loss_L + loss_R)\n            if gain > max_gain:\n                max_gain = gain\n                best_feature = feature_index\n                best_threshold = (X_sorted[i - 1] + X_sorted[i]) / 2.0\n    return (best_feature, best_threshold) if max_gain > 0 else None"}
{"task_id": 19, "completion_id": 1, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n\n    def compute_loss(sum_g, sum_h):\n        if sum_h == 0:\n            return float('inf')\n        return -0.5 * sum_g ** 2 / (sum_h + lam) + gamma\n    best_gain = -np.inf\n    best_feature_index = None\n    best_threshold = None\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        sorted_indices = np.argsort(X[:, feature_index])\n        (g_left, h_left) = (0, 0)\n        (g_right, h_right) = (np.sum(g), np.sum(h))\n        for i in range(1, n_samples - 1):\n            g_left += g[sorted_indices[i - 1]]\n            h_left += h[sorted_indices[i - 1]]\n            g_right -= g[sorted_indices[i - 1]]\n            h_right -= h[sorted_indices[i - 1]]\n            if i < len(unique_values):\n                threshold = unique_values[i]\n            else:\n                continue\n            loss_before = compute_loss(g_left + g_right, h_left + h_right)\n            loss_after = compute_loss(g_left, h_left) + compute_loss(g_right, h_right)\n            gain = loss_before - loss_after\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = feature_index\n                best_threshold = threshold\n    return (best_feature_index, best_threshold) if best_gain > 0 else None"}
{"task_id": 19, "completion_id": 2, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_gain = -np.inf\n    best_feature = -1\n    best_threshold = None\n    for feature_idx in range(n_features):\n        unique_values = np.unique(X[:, feature_idx])\n        if len(unique_values) < 2:\n            continue\n        sorted_indices = np.argsort(X[:, feature_idx])\n        g_sorted = g[sorted_indices]\n        h_sorted = h[sorted_indices]\n        X_sorted = X[sorted_indices, feature_idx]\n        (G_L, H_L) = (0, 0)\n        (G_R, H_R) = (np.sum(g_sorted), np.sum(h_sorted))\n        for i in range(1, n_samples - 1):\n            threshold = (X_sorted[i] + X_sorted[i - 1]) / 2.0\n            G_L += g_sorted[i - 1]\n            H_L += h_sorted[i - 1]\n            G_R -= g_sorted[i - 1]\n            H_R -= h_sorted[i - 1]\n            gain = 0.5 * (G_L ** 2 / (H_L + lam) + G_R ** 2 / (H_R + lam) - (G_L + G_R) ** 2 / (H_L + H_R + lam)) - gamma\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_idx\n                best_threshold = threshold\n    if best_gain <= 0:\n        return None\n    return (best_feature, best_threshold)"}
{"task_id": 19, "completion_id": 3, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    g_total = np.sum(g)\n    h_total = np.sum(h)\n    total_loss = -0.5 * g_total ** 2 / (h_total + lam) + gamma\n    best_gain = 0\n    best_split = None\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        if len(unique_values) < 2:\n            continue\n        sorted_indices = np.argsort(X[:, feature_index])\n        g_left = 0\n        h_left = 0\n        for i in range(n_samples - 1):\n            index = sorted_indices[i]\n            g_left += g[index]\n            h_left += h[index]\n            g_right = g_total - g_left\n            h_right = h_total - h_left\n            if i + 1 >= 2 and n_samples - (i + 1) >= 2:\n                left_loss = -0.5 * g_left ** 2 / (h_left + lam) + gamma\n                right_loss = -0.5 * g_right ** 2 / (h_right + lam) + gamma\n                gain = total_loss - left_loss - right_loss\n                if gain > best_gain:\n                    best_gain = gain\n                    threshold = (X[index, feature_index] + X[sorted_indices[i + 1], feature_index]) / 2\n                    best_split = (feature_index, threshold)\n    return best_split"}
{"task_id": 19, "completion_id": 4, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_gain = -np.inf\n    best_threshold = None\n    best_feature = None\n    g_total = np.sum(g)\n    h_total = np.sum(h)\n    current_L = -0.5 * g_total ** 2 / (h_total + lam) + gamma\n    for feature_index in range(n_features):\n        thresholds = np.unique(X[:, feature_index])\n        (g_left, g_right) = (0, g_total)\n        (h_left, h_right) = (0, h_total)\n        for threshold in thresholds:\n            indices_left = X[:, feature_index] <= threshold\n            indices_right = X[:, feature_index] > threshold\n            g_left = np.sum(g[indices_left])\n            g_right = np.sum(g[indices_right])\n            h_left = np.sum(h[indices_left])\n            h_right = np.sum(h[indices_right])\n            if indices_left.sum() < 2 or indices_right.sum() < 2:\n                continue\n            L_left = -0.5 * g_left ** 2 / (h_left + lam) + gamma\n            L_right = -0.5 * g_right ** 2 / (h_right + lam) + gamma\n            gain = current_L - (L_left + L_right)\n            if gain > best_gain:\n                best_gain = gain\n                best_threshold = threshold\n                best_feature = feature_index\n    if best_gain <= 0:\n        return None\n    return (best_feature, best_threshold)"}
{"task_id": 19, "completion_id": 5, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    total_g = np.sum(g)\n    total_h = np.sum(h)\n\n    def leaf_loss(g_sum, h_sum):\n        if h_sum == 0:\n            return 0\n        return -0.5 * g_sum ** 2 / (h_sum + lam) + gamma\n    best_gain = 0\n    best_feature = None\n    best_threshold = None\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        if len(unique_values) < 2:\n            continue\n        sorted_indices = np.argsort(X[:, feature_index])\n        sorted_X = X[sorted_indices, feature_index]\n        sorted_g = g[sorted_indices]\n        sorted_h = h[sorted_indices]\n        left_g = 0\n        left_h = 0\n        current_loss = leaf_loss(total_g, total_h)\n        for i in range(1, n_samples - 1):\n            left_g += sorted_g[i - 1]\n            left_h += sorted_h[i - 1]\n            right_g = total_g - left_g\n            right_h = total_h - left_h\n            left_loss = leaf_loss(left_g, left_h)\n            right_loss = leaf_loss(right_g, right_h)\n            gain = current_loss - left_loss - right_loss\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_index\n                best_threshold = (sorted_X[i - 1] + sorted_X[i]) / 2.0\n    if best_gain > 0:\n        return (best_feature, best_threshold)\n    else:\n        return None"}
{"task_id": 19, "completion_id": 6, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_feature = None\n    best_threshold = None\n    max_gain = 0.0\n\n    def calculate_L(g_sum, h_sum):\n        if h_sum == 0:\n            return 0\n        return -0.5 * g_sum ** 2 / (h_sum + lam) + gamma\n    L_I = calculate_L(np.sum(g), np.sum(h))\n    for feature_index in range(n_features):\n        unique_feature_values = np.unique(X[:, feature_index])\n        feature_values = X[:, feature_index]\n        sorted_indices = np.argsort(feature_values)\n        sorted_g = g[sorted_indices]\n        sorted_h = h[sorted_indices]\n        sorted_feature_values = feature_values[sorted_indices]\n        G_L = 0.0\n        H_L = 0.0\n        G_R = np.sum(sorted_g)\n        H_R = np.sum(sorted_h)\n        for i in range(1, n_samples - 1):\n            G_L += sorted_g[i - 1]\n            H_L += sorted_h[i - 1]\n            G_R -= sorted_g[i - 1]\n            H_R -= sorted_h[i - 1]\n            if sorted_feature_values[i - 1] == sorted_feature_values[i]:\n                continue\n            threshold = (sorted_feature_values[i - 1] + sorted_feature_values[i]) / 2\n            L_L = calculate_L(G_L, H_L)\n            L_R = calculate_L(G_R, H_R)\n            gain = L_I - L_L - L_R\n            if gain > max_gain:\n                max_gain = gain\n                best_feature = feature_index\n                best_threshold = threshold\n    if best_feature is not None and max_gain > 0:\n        return (best_feature, best_threshold)\n    else:\n        return None"}
{"task_id": 19, "completion_id": 7, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_gain = float('-inf')\n    best_feature = None\n    best_threshold = None\n    G = g.sum()\n    H = h.sum()\n    overall_loss = -0.5 * G ** 2 / (H + lam) + gamma\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        if len(unique_values) < 2:\n            continue\n        sort_indices = np.argsort(X[:, feature_index])\n        sorted_g = g[sort_indices]\n        sorted_h = h[sort_indices]\n        sorted_X = X[sort_indices, feature_index]\n        G_L = 0\n        H_L = 0\n        G_R = G\n        H_R = H\n        for i in range(n_samples - 1):\n            G_L += sorted_g[i]\n            H_L += sorted_h[i]\n            G_R -= sorted_g[i]\n            H_R -= sorted_h[i]\n            if i == 0 or i == n_samples - 2 or sorted_X[i] == sorted_X[i + 1]:\n                continue\n            threshold = (sorted_X[i] + sorted_X[i + 1]) / 2\n            loss_L = -0.5 * G_L ** 2 / (H_L + lam) + gamma\n            loss_R = -0.5 * G_R ** 2 / (H_R + lam) + gamma\n            gain = overall_loss - loss_L - loss_R\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_index\n                best_threshold = threshold\n    return (best_feature, best_threshold) if best_gain > 0 else None"}
{"task_id": 19, "completion_id": 8, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    G = np.sum(g)\n    H = np.sum(h)\n    if n_samples < 2:\n        return None\n    best_gain = 0\n    best_threshold = None\n    best_feature = None\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        if len(unique_values) < 2:\n            continue\n        sorted_indices = np.argsort(feature_values)\n        sorted_g = g[sorted_indices]\n        sorted_h = h[sorted_indices]\n        sorted_X_feature = X[sorted_indices, feature_index]\n        (Gl, Hl) = (0, 0)\n        (Gr, Hr) = (G, H)\n        for i in range(n_samples - 1):\n            Gl += sorted_g[i]\n            Hl += sorted_h[i]\n            Gr -= sorted_g[i]\n            Hr -= sorted_h[i]\n            if Hl == 0 or Hr == 0:\n                continue\n            gain = 0.5 * (Gl ** 2 / (Hl + lam) + Gr ** 2 / (Hr + lam) - G ** 2 / (H + lam)) - gamma\n            if gain > best_gain:\n                best_gain = gain\n                best_threshold = (sorted_X_feature[i] + sorted_X_feature[i + 1]) / 2\n                best_feature = feature_index\n            if i < n_samples - 2 and sorted_X_feature[i] != sorted_X_feature[i + 1]:\n                threshold_candidate = (sorted_X_feature[i] + sorted_X_feature[i + 1]) / 2\n                (Gl_candidate, Hl_candidate) = (Gl, Hl)\n                (Gr_candidate, Hr_candidate) = (G - Gl_candidate, H - Hl_candidate)\n                candidate_gain = 0.5 * (Gl_candidate ** 2 / (Hl_candidate + lam) + Gr_candidate ** 2 / (Hr_candidate + lam) - G ** 2 / (H + lam)) - gamma\n                if candidate_gain > best_gain:\n                    best_gain = candidate_gain\n                    best_threshold = threshold_candidate\n                    best_feature = feature_index\n    if best_gain > 0:\n        return (best_feature, best_threshold)\n    else:\n        return None"}
{"task_id": 19, "completion_id": 9, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    G = np.sum(g)\n    H = np.sum(h)\n    current_loss = -0.5 * G ** 2 / (H + lam) + gamma\n    best_gain = 0\n    best_feature = None\n    best_threshold = None\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        for threshold in unique_values:\n            left_indices = X[:, feature_index] < threshold\n            right_indices = ~left_indices\n            if np.sum(left_indices) < 2 or np.sum(right_indices) < 2:\n                continue\n            (G_L, H_L) = (np.sum(g[left_indices]), np.sum(h[left_indices]))\n            (G_R, H_R) = (np.sum(g[right_indices]), np.sum(h[right_indices]))\n            left_loss = -0.5 * G_L ** 2 / (H_L + lam) + gamma\n            right_loss = -0.5 * G_R ** 2 / (H_R + lam) + gamma\n            gain = current_loss - left_loss - right_loss\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_index\n                best_threshold = threshold\n    if best_gain > 0:\n        return (best_feature, best_threshold)\n    else:\n        return None"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    x_array = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x_array))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x_rounded = np.round(sigmoid_x, 4)\n    gradient_x_rounded = np.round(gradient_x, 4)\n    if np.isscalar(x):\n        return (float(sigmoid_x_rounded), float(gradient_x_rounded))\n    else:\n        return (sigmoid_x_rounded.tolist(), gradient_x_rounded.tolist())"}
{"task_id": 20, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, (int, float)):\n        x = np.array([x])\n    elif isinstance(x, list):\n        x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x_rounded = np.round(sigmoid_x, 4)\n    gradient_x_rounded = np.round(gradient_x, 4)\n    if x.size == 1:\n        return (float(sigmoid_x_rounded[0]), float(gradient_x_rounded[0]))\n    return (sigmoid_x_rounded.tolist(), gradient_x_rounded.tolist())"}
{"task_id": 20, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, (int, float)):\n        x = np.array([x])\n    elif isinstance(x, list):\n        x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x_rounded = np.round(sigmoid_x, 4)\n    gradient_x_rounded = np.round(gradient_x, 4)\n    if isinstance(x, np.ndarray) and x.shape == (1,):\n        return (float(sigmoid_x_rounded[0]), float(gradient_x_rounded[0]))\n    else:\n        return (sigmoid_x_rounded.tolist(), gradient_x_rounded.tolist())"}
{"task_id": 20, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, (int, float)):\n        x_array = np.array([x])\n    elif isinstance(x, list):\n        x_array = np.array(x)\n    else:\n        x_array = x\n    sigmoid_x_array = 1 / (1 + np.exp(-x_array))\n    gradient_x_array = sigmoid_x_array * (1 - sigmoid_x_array)\n    sigmoid_x_rounded = np.round(sigmoid_x_array, 4)\n    gradient_x_rounded = np.round(gradient_x_array, 4)\n    if isinstance(x, (int, float)):\n        sigmoid_x = float(sigmoid_x_rounded[0])\n        gradient_x = float(gradient_x_rounded[0])\n    else:\n        sigmoid_x = sigmoid_x_rounded.tolist()\n        gradient_x = gradient_x_rounded.tolist()\n    return (sigmoid_x, gradient_x)"}
{"task_id": 20, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    x_array = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x_array))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x_rounded = np.round(sigmoid_x, 4)\n    gradient_x_rounded = np.round(gradient_x, 4)\n    if isinstance(x, (int, float)):\n        return (float(sigmoid_x_rounded), float(gradient_x_rounded))\n    else:\n        return (sigmoid_x_rounded.tolist(), gradient_x_rounded.tolist())"}
{"task_id": 20, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    is_scalar = isinstance(x, (int, float))\n    if isinstance(x, list):\n        x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x_rounded = np.round(sigmoid_x, 4)\n    gradient_x_rounded = np.round(gradient_x, 4)\n    if is_scalar:\n        return (float(sigmoid_x_rounded), float(gradient_x_rounded))\n    else:\n        return (sigmoid_x_rounded.tolist(), gradient_x_rounded.tolist())"}
{"task_id": 20, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    is_scalar = isinstance(x, (int, float))\n    x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x_rounded = np.round(sigmoid_x, 4)\n    gradient_x_rounded = np.round(gradient_x, 4)\n    if is_scalar:\n        return (float(sigmoid_x_rounded), float(gradient_x_rounded))\n    else:\n        return (sigmoid_x_rounded.tolist(), gradient_x_rounded.tolist())"}
{"task_id": 20, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    is_scalar = isinstance(x, (int, float))\n    x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x_rounded = np.round(sigmoid_x, 4)\n    gradient_x_rounded = np.round(gradient_x, 4)\n    if is_scalar:\n        return (float(sigmoid_x_rounded), float(gradient_x_rounded))\n    else:\n        return (sigmoid_x_rounded.tolist(), gradient_x_rounded.tolist())"}
{"task_id": 20, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    x_np = np.array(x)\n    sigmoid_x_np = 1 / (1 + np.exp(-x_np))\n    gradient_x_np = sigmoid_x_np * (1 - sigmoid_x_np)\n    if np.isscalar(x):\n        return (round(float(sigmoid_x_np), 4), round(float(gradient_x_np), 4))\n    else:\n        return (sigmoid_x_np.round(4).tolist(), gradient_x_np.round(4).tolist())"}
{"task_id": 20, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    is_scalar = isinstance(x, (int, float))\n    if is_scalar:\n        x = np.array([x])\n    elif isinstance(x, list):\n        x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n    if is_scalar:\n        return (float(sigmoid_x[0]), float(gradient_x[0]))\n    else:\n        return (sigmoid_x.tolist(), gradient_x.tolist())"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    X = np.array(x_train)\n    Y = np.array(y_train)\n    n_samples = len(X)\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n    unique_sorted_X = np.unique(X)\n    thresholds = (unique_sorted_X[:-1] + unique_sorted_X[1:]) / 2\n    while True:\n        min_err = float('inf')\n        best_stump = None\n        best_alpha = None\n        best_predictions = None\n        for theta in thresholds:\n            for direction in [0, 1]:\n                if direction == 0:\n                    predictions = np.where(X <= theta, 1, -1)\n                else:\n                    predictions = np.where(X > theta, 1, -1)\n                weighted_err = np.sum(weights[predictions != Y])\n                if weighted_err < min_err:\n                    min_err = weighted_err\n                    best_stump = (direction, theta)\n                    best_alpha = 0.5 * math.log((1 - weighted_err) / weighted_err)\n                    best_predictions = predictions\n        stumps.append(best_stump)\n        alphas.append(best_alpha)\n        weights *= np.exp(-best_alpha * Y * best_predictions)\n        weights /= np.sum(weights)\n        ensemble_predictions = np.zeros(n_samples)\n        for (alpha, (direction, theta)) in zip(alphas, stumps):\n            if direction == 0:\n                stump_predictions = np.where(X <= theta, 1, -1)\n            else:\n                stump_predictions = np.where(X > theta, 1, -1)\n            ensemble_predictions += alpha * stump_predictions\n        train_error = np.mean(np.sign(ensemble_predictions) != Y)\n        if train_error <= epsilon:\n            break\n    test_predictions = np.zeros(len(x_test))\n    for (alpha, (direction, theta)) in zip(alphas, stumps):\n        if direction == 0:\n            stump_predictions = np.where(np.array(x_test) <= theta, 1, -1)\n        else:\n            stump_predictions = np.where(np.array(x_test) > theta, 1, -1)\n        test_predictions += alpha * stump_predictions\n    return np.sign(test_predictions).astype(int).tolist()"}
{"task_id": 21, "completion_id": 1, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    n_samples = len(x_train)\n    D = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n    while True:\n        min_error = np.inf\n        best_stump = None\n        best_alpha = None\n        for d in [0, 1]:\n            thresholds = sorted(set(x_train))\n            mid_thresholds = [(thresholds[i] + thresholds[i + 1]) / 2 for i in range(len(thresholds) - 1)]\n            for theta in mid_thresholds:\n                if d == 0:\n                    predictions = np.where(x_train <= theta, 1, -1)\n                else:\n                    predictions = np.where(x_train > theta, 1, -1)\n                error = np.sum(D * (predictions != y_train))\n                if error > 0.5:\n                    error = 1 - error\n                if error < min_error:\n                    min_error = error\n                    best_stump = (d, theta)\n                    best_predictions = predictions\n        if min_error == 0:\n            alpha = np.inf\n        else:\n            alpha = 0.5 * math.log((1 - min_error) / min_error)\n        stumps.append(best_stump)\n        alphas.append(alpha)\n        D *= np.exp(-alpha * y_train * best_predictions)\n        D /= np.sum(D)\n        ensemble_predictions = np.sign(np.sum([alphas[i] * np.where(x_train <= stumps[i][1], 1, -1) if stumps[i][0] == 0 else alphas[i] * np.where(x_train > stumps[i][1], 1, -1) for i in range(len(stumps))], axis=0))\n        training_error = np.sum(ensemble_predictions != y_train) / n_samples\n        if training_error <= epsilon:\n            break\n    test_predictions = np.sign(np.sum([alphas[i] * np.where(x_test <= stumps[i][1], 1, -1) if stumps[i][0] == 0 else alphas[i] * np.where(x_test > stumps[i][1], 1, -1) for i in range(len(stumps))], axis=0))\n    return test_predictions.tolist()"}
{"task_id": 21, "completion_id": 2, "solution": "import numpy as np\nimport math\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    n_samples = len(x_train)\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n    while True:\n        min_err = float('inf')\n        best_stump = None\n        best_alpha = None\n        best_predictions = None\n        sorted_indices = np.argsort(x_train)\n        x_train_sorted = x_train[sorted_indices]\n        y_train_sorted = y_train[sorted_indices]\n        weights_sorted = weights[sorted_indices]\n        for i in range(n_samples - 1):\n            threshold = (x_train_sorted[i] + x_train_sorted[i + 1]) / 2\n            predictions = np.ones(n_samples)\n            predictions[x_train_sorted > threshold] = -1\n            weighted_error = np.sum(weights_sorted * (predictions != y_train_sorted))\n            if weighted_error < min_err:\n                min_err = weighted_error\n                best_stump = (0, threshold)\n                best_alpha = 0.5 * math.log((1 - weighted_error) / weighted_error)\n                best_predictions = predictions\n        for i in range(n_samples - 1):\n            threshold = (x_train_sorted[i] + x_train_sorted[i + 1]) / 2\n            predictions = -np.ones(n_samples)\n            predictions[x_train_sorted > threshold] = 1\n            weighted_error = np.sum(weights_sorted * (predictions != y_train_sorted))\n            if weighted_error < min_err:\n                min_err = weighted_error\n                best_stump = (1, threshold)\n                best_alpha = 0.5 * math.log((1 - weighted_error) / weighted_error)\n                best_predictions = predictions\n        if min_err == 0:\n            min_err = 1e-10\n        stumps.append(best_stump)\n        alphas.append(best_alpha)\n        weights *= np.exp(-best_alpha * y_train * best_predictions)\n        weights /= np.sum(weights)\n        ensemble_predictions = np.sign(np.sum([alpha * predict_with_stump(x_train, stump) for (alpha, stump) in zip(alphas, stumps)], axis=0))\n        training_error = np.sum(ensemble_predictions != y_train) / n_samples\n        if training_error <= epsilon:\n            break\n    test_predictions = np.sign(np.sum([alpha * predict_with_stump(x_test, stump) for (alpha, stump) in zip(alphas, stumps)], axis=0))\n    return test_predictions.tolist()\ndef predict_with_stump(x: np.array, stump: tuple):\n    (d, theta) = stump\n    if d == 0:\n        return (x <= theta).astype(int) * 2 - 1\n    else:\n        return (x > theta).astype(int) * 2 - 1"}
{"task_id": 21, "completion_id": 3, "solution": "import numpy as np\nimport math\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n = len(x_train)\n    D = np.full(n, 1 / n)\n    hypotheses = []\n    alphas = []\n    while True:\n        best_stump_error = math.inf\n        best_stump = None\n        best_direction = None\n        sorted_indices = np.argsort(x_train)\n        x_train_sorted = np.array(x_train)[sorted_indices]\n        y_train_sorted = np.array(y_train)[sorted_indices]\n        for i in range(n - 1):\n            threshold = (x_train_sorted[i] + x_train_sorted[i + 1]) / 2\n            for direction in [0, 1]:\n                predictions = np.ones(n)\n                if direction == 0:\n                    predictions[x_train_sorted > threshold] = -1\n                else:\n                    predictions[x_train_sorted <= threshold] = -1\n                weighted_error = np.sum(D * (predictions != y_train_sorted))\n                if weighted_error < best_stump_error:\n                    best_stump_error = weighted_error\n                    best_stump = threshold\n                    best_direction = direction\n        if best_stump_error >= 0.5:\n            break\n        alpha = 0.5 * math.log((1 - best_stump_error) / best_stump_error)\n        alphas.append(alpha)\n        hypotheses.append((best_stump, best_direction))\n        predictions = np.ones(n)\n        if best_direction == 0:\n            predictions[np.array(x_train) > best_stump] = -1\n        else:\n            predictions[np.array(x_train) <= best_stump] = -1\n        D *= np.exp(-alpha * y_train * predictions)\n        D /= np.sum(D)\n        ensemble_predictions = np.sum([a * h for (a, (_, _)) in zip(alphas, hypotheses) for h in [np.array([+1 if (x <= h[0] if h[1] == 0 else x > h[0]) else -1 for x in x_train])]], axis=0)\n        training_error = np.mean(np.sign(ensemble_predictions) != y_train)\n        if training_error <= epsilon:\n            break\n    test_predictions = np.sum([a * np.array([+1 if (x <= h[0] if h[1] == 0 else x > h[0]) else -1 for x in x_test]) for (a, h) in zip(alphas, hypotheses)], axis=0)\n    test_predictions = np.sign(test_predictions)\n    return test_predictions.tolist()"}
{"task_id": 21, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    n_samples = len(x_train)\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n\n    def weighted_error(predictions, y_train, weights):\n        return np.sum(weights[predictions != y_train])\n\n    def predict_stump(x, threshold, orientation):\n        return np.where(x <= threshold, orientation * 1, orientation * -1)\n    while True:\n        min_err = np.inf\n        best_stump = None\n        for orientation in [1, -1]:\n            thresholds = sorted(set(x_train))\n            for i in range(len(thresholds) - 1):\n                mid_threshold = (thresholds[i] + thresholds[i + 1]) / 2.0\n                predictions = predict_stump(x_train, mid_threshold, orientation)\n                err = weighted_error(predictions, y_train, weights)\n                if err < min_err:\n                    min_err = err\n                    best_stump = (mid_threshold, orientation)\n        alpha = 0.5 * math.log((1 - min_err) / min_err)\n        alphas.append(alpha)\n        (best_threshold, best_orientation) = best_stump\n        predictions = predict_stump(x_train, best_threshold, best_orientation)\n        stumps.append((best_threshold, best_orientation))\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        ensemble_predictions = np.sum(np.array([alpha * predict_stump(x_train, threshold, orientation) for (threshold, orientation) in stumps]), axis=0)\n        train_error = np.mean(np.sign(ensemble_predictions) != y_train)\n        if train_error <= epsilon:\n            break\n\n    def predict(x_test, stumps, alphas):\n        predictions = np.sum(np.array([alpha * predict_stump(x_test, threshold, orientation) for (threshold, orientation) in stumps]), axis=0)\n        return np.sign(predictions).astype(int)\n    return predict(x_test, stumps, alphas).tolist()"}
{"task_id": 21, "completion_id": 5, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n\n    def weighted_error(weights, predictions, y_train):\n        return np.dot(weights, predictions != y_train)\n\n    def predict_stump(x_train, threshold, polarity):\n        predictions = np.ones_like(x_train)\n        if polarity == 1:\n            predictions[x_train > threshold] = -1\n        else:\n            predictions[x_train <= threshold] = -1\n        return predictions\n    n_samples = len(x_train)\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n    while True:\n        best_error = float('inf')\n        best_stump = None\n        best_threshold = 0\n        best_polarity = 0\n        for feature_i in range(len(x_train)):\n            sorted_indices = np.argsort(x_train)\n            x_train_sorted = x_train[sorted_indices]\n            y_train_sorted = y_train[sorted_indices]\n            weights_sorted = weights[sorted_indices]\n            for i in range(len(x_train_sorted) - 1):\n                threshold = (x_train_sorted[i] + x_train_sorted[i + 1]) / 2\n                for polarity in [0, 1]:\n                    predictions = predict_stump(x_train_sorted, threshold, polarity)\n                    error = weighted_error(weights_sorted, predictions, y_train_sorted)\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (sorted_indices, feature_i, threshold, polarity)\n                        best_threshold = threshold\n                        best_polarity = polarity\n        if best_error == 0:\n            best_error = 1e-10\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n        alphas.append(alpha)\n        stumps.append(best_stump)\n        (sorted_indices, feature_i, threshold, polarity) = best_stump\n        predictions = predict_stump(x_train_sorted, threshold, polarity)\n        weights *= np.exp(-alpha * y_train_sorted * predictions)\n        weights /= np.sum(weights)\n        ensemble_predictions = np.zeros_like(y_train)\n        for (alpha, stump) in zip(alphas, stumps):\n            (sorted_indices, feature_i, threshold, polarity) = stump\n            predictions = predict_stump(x_train_sorted, threshold, polarity)\n            ensemble_predictions[sorted_indices] += alpha * predictions\n        ensemble_predictions = np.sign(ensemble_predictions)\n        training_error = np.mean(ensemble_predictions != y_train)\n        if training_error <= epsilon:\n            break\n    final_predictions = np.zeros_like(x_test)\n    for (alpha, stump) in zip(alphas, stumps):\n        (_, _, threshold, polarity) = stump\n        predictions = predict_stump(x_test, threshold, polarity)\n        final_predictions += alpha * predictions\n    final_predictions = np.sign(final_predictions)\n    final_predictions = np.where(final_predictions == 0, 1, final_predictions)\n    return final_predictions.tolist()"}
{"task_id": 21, "completion_id": 6, "solution": "import numpy as np\nimport math\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    n = len(x_train)\n    weights = np.ones(n) / n\n    stumps = []\n    alphas = []\n\n    def weighted_error(stump, weights):\n        (_, d, theta) = stump\n        predictions = np.ones_like(y_train)\n        if d == 0:\n            predictions[x_train > theta] = -1\n        else:\n            predictions[x_train <= theta] = -1\n        return np.dot(weights, (predictions != y_train).astype(int)) / np.sum(weights)\n\n    def sign(x):\n        return 1 if x >= 0 else -1\n    while True:\n        best_stump = None\n        min_error = float('inf')\n        for d in range(2):\n            sorted_indices = np.argsort(x_train)\n            for i in range(n - 1):\n                theta = (x_train[sorted_indices[i]] + x_train[sorted_indices[i + 1]]) / 2.0\n                stump = (lambda x, d=d, theta=theta: (d, theta), d, theta)\n                error = weighted_error(stump, weights)\n                if error < min_error:\n                    min_error = error\n                    best_stump = stump\n        if min_error == 0:\n            break\n        alpha = 0.5 * math.log((1 - min_error) / min_error)\n        stumps.append(best_stump)\n        alphas.append(alpha)\n        preds = np.ones_like(y_train)\n        (_, d, theta) = best_stump\n        if d == 0:\n            preds[x_train > theta] = -1\n        else:\n            preds[x_train <= theta] = -1\n        weights *= np.exp(-alpha * y_train * preds)\n        weights /= np.sum(weights)\n        ensemble_preds = np.zeros_like(y_train)\n        for (alpha, stump) in zip(alphas, stumps):\n            (_, d, theta) = stump\n            preds = np.ones_like(y_train)\n            if d == 0:\n                preds[x_train > theta] = -1\n            else:\n                preds[x_train <= theta] = -1\n            ensemble_preds += alpha * preds\n        train_error = np.mean(np.sign(ensemble_preds) != y_train)\n        if train_error <= epsilon:\n            break\n    test_preds = np.zeros(len(x_test))\n    for (alpha, stump) in zip(alphas, stumps):\n        (_, d, theta) = stump\n        preds = np.ones_like(x_test)\n        if d == 0:\n            preds[x_test > theta] = -1\n        else:\n            preds[x_test <= theta] = -1\n        test_preds += alpha * preds\n    return [sign(x) for x in test_preds]"}
{"task_id": 21, "completion_id": 7, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_samples = len(x_train)\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n\n    def decision_stump_predict(x, d, theta):\n        return 1 if (x <= theta) == (d == 0) else -1\n    while True:\n        (best_d, best_theta, best_err) = (None, None, float('inf'))\n        sorted_indices = np.argsort(x_train)\n        x_sorted = np.array(x_train)[sorted_indices]\n        y_sorted = np.array(y_train)[sorted_indices]\n        for i in range(n_samples - 1):\n            theta = (x_sorted[i] + x_sorted[i + 1]) / 2\n            for d in [0, 1]:\n                err = 0\n                for j in range(n_samples):\n                    pred = decision_stump_predict(x_sorted[j], d, theta)\n                    err += weights[sorted_indices[j]] if pred != y_sorted[j] else 0\n                if err < best_err:\n                    best_err = err\n                    best_d = d\n                    best_theta = theta\n        if best_err == 0:\n            alpha = float('+inf')\n        else:\n            alpha = 0.5 * math.log((1 - best_err) / best_err)\n        stumps.append((best_d, best_theta))\n        alphas.append(alpha)\n        for j in range(n_samples):\n            pred = decision_stump_predict(x_train[j], best_d, best_theta)\n            weights[j] *= np.exp(-alpha * y_train[j] * pred)\n        weights /= np.sum(weights)\n        train_errors = 0\n        for j in range(n_samples):\n            ensemble_pred = 0\n            for k in range(len(stumps)):\n                (d, theta) = stumps[k]\n                ensemble_pred += alphas[k] * decision_stump_predict(x_train[j], d, theta)\n            if np.sign(ensemble_pred) != y_train[j]:\n                train_errors += 1\n        train_error = train_errors / n_samples\n        if train_error <= epsilon:\n            break\n    test_predictions = []\n    for x in x_test:\n        ensemble_pred = 0\n        for (i, (d, theta)) in enumerate(stumps):\n            ensemble_pred += alphas[i] * decision_stump_predict(x, d, theta)\n        test_predictions.append(np.sign(ensemble_pred))\n    return test_predictions\nx_train = [1, 2, 3, 4, 5]\ny_train = [1, -1, -1, -1, 1]\nx_test = [1.5, 3.5, 4.5]\nepsilon = 0.01"}
{"task_id": 21, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    n_samples = len(x_train)\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n    while True:\n        best_stump = None\n        min_error = float('inf')\n        sorted_indices = np.argsort(x_train)\n        sorted_x = x_train[sorted_indices]\n        sorted_y = y_train[sorted_indices]\n        sorted_weights = weights[sorted_indices]\n        for d in [0, 1]:\n            for i in range(len(sorted_x) - 1):\n                theta = (sorted_x[i] + sorted_x[i + 1]) / 2.0\n                if d == 0:\n                    predictions = np.where(sorted_x <= theta, 1, -1)\n                else:\n                    predictions = np.where(sorted_x > theta, 1, -1)\n                error = np.sum(sorted_weights * (predictions != sorted_y))\n                if error < min_error:\n                    min_error = error\n                    best_stump = (d, theta)\n                    best_predictions = predictions\n        if min_error == 0:\n            break\n        alpha = 0.5 * math.log((1 - min_error) / min_error)\n        alphas.append(alpha)\n        stumps.append(best_stump)\n        weights *= np.exp(-alpha * best_predictions * sorted_y)\n        weights /= np.sum(weights)\n        y_pred_train = np.zeros(n_samples)\n        for (alpha, (d, theta)) in zip(alphas, stumps):\n            if d == 0:\n                stump_pred = np.where(x_train <= theta, 1, -1)\n            else:\n                stump_pred = np.where(x_train > theta, 1, -1)\n            y_pred_train += alpha * stump_pred\n        y_pred_train = np.sign(y_pred_train)\n        train_error = np.sum(y_pred_train != y_train) / n_samples\n        if train_error <= epsilon:\n            break\n    y_pred_test = np.zeros(len(x_test))\n    for (alpha, (d, theta)) in zip(alphas, stumps):\n        if d == 0:\n            stump_pred = np.where(x_test <= theta, 1, -1)\n        else:\n            stump_pred = np.where(x_test > theta, 1, -1)\n        y_pred_test += alpha * stump_pred\n    y_pred_test = np.sign(y_pred_test).astype(int)\n    y_pred_test[y_pred_test == 0] = -1\n    return y_pred_test.tolist()"}
{"task_id": 21, "completion_id": 9, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n\n    def decision_stump_predict(x, d, theta):\n        if d == 0:\n            return 1 if x <= theta else -1\n        else:\n            return 1 if x > theta else -1\n    n_samples = len(x_train)\n    sample_weights = np.ones(n_samples) / n_samples\n    weak_learners = []\n    weights = []\n    while True:\n        best_stump = None\n        best_error = float('inf')\n        best_d = None\n        best_theta = None\n        sorted_indices = np.argsort(x_train)\n        x_sorted = np.array(x_train)[sorted_indices]\n        y_sorted = np.array(y_train)[sorted_indices]\n        sample_weights_sorted = sample_weights[sorted_indices]\n        for i in range(n_samples - 1):\n            theta = (x_sorted[i] + x_sorted[i + 1]) / 2.0\n            for d in [0, 1]:\n                predictions = np.array([decision_stump_predict(x, d, theta) for x in x_sorted])\n                weighted_error = np.sum(sample_weights_sorted[predictions != y_sorted])\n                if weighted_error < best_error:\n                    best_error = weighted_error\n                    best_stump = predictions\n                    best_d = d\n                    best_theta = theta\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n        weights.append(alpha)\n        weak_learners.append((best_d, best_theta))\n        for i in range(n_samples):\n            sample_weights[sorted_indices[i]] *= np.exp(-alpha * y_sorted[i] * best_stump[i])\n        sample_weights /= np.sum(sample_weights)\n        ensemble_predictions = np.zeros(n_samples)\n        for (alpha, (d, theta)) in zip(weights, weak_learners):\n            ensemble_predictions += alpha * np.array([decision_stump_predict(x, d, theta) for x in x_train])\n        training_error = np.sum(ensemble_predictions * y_train < 0) / n_samples\n        if training_error <= epsilon:\n            break\n    test_predictions = np.zeros(len(x_test))\n    for (alpha, (d, theta)) in zip(weights, weak_learners):\n        test_predictions += alpha * np.array([decision_stump_predict(x, d, theta) for x in x_test])\n    return [1 if pred >= 0 else -1 for pred in test_predictions]"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    diff = X_train[:, np.newaxis, :] - X_test[np.newaxis, :, :]\n    squared_distances = np.sum(diff ** 2, axis=2)\n    kernel_matrix = np.exp(-gamma * squared_distances)\n    g_z = np.sum(alpha * y_train * kernel_matrix, axis=0) + b\n    predictions = np.sign(g_z)\n    return predictions.astype(int).tolist()"}
{"task_id": 25, "completion_id": 1, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    diff = X_train[:, np.newaxis, :] - X_test[np.newaxis, :, :]\n    squared_distances = np.sum(diff ** 2, axis=2)\n    kernel_matrix = np.exp(-gamma * squared_distances)\n    g_z = np.dot(alpha * y_train, kernel_matrix) + b\n    predictions = np.sign(g_z)\n    return predictions.astype(int).tolist()"}
{"task_id": 25, "completion_id": 2, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    diff = X_train[:, np.newaxis, :] - X_test[np.newaxis, :, :]\n    norm_squared = np.sum(diff ** 2, axis=2)\n    K = np.exp(-gamma * norm_squared)\n    g_z = np.sum(alpha * y_train * K, axis=0) + b\n    predictions = np.sign(g_z)\n    predictions = [int(pred) if pred != 0 else -1 for pred in predictions]\n    return predictions"}
{"task_id": 25, "completion_id": 3, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    diff = X_train[:, np.newaxis, :] - X_test[np.newaxis, :, :]\n    diff_squared = np.sum(diff ** 2, axis=2)\n    K = np.exp(-gamma * diff_squared)\n    g_z = np.sum(alpha * y_train * K, axis=0) + b\n    predictions = np.sign(g_z).astype(int)\n    predictions[predictions == 0] = -1\n    return predictions.tolist()"}
{"task_id": 25, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    X_train_squared = np.sum(X_train ** 2, axis=1).reshape(-1, 1)\n    X_test_squared = np.sum(X_test ** 2, axis=1).reshape(1, -1)\n    distances = X_train_squared + X_test_squared - 2 * np.dot(X_train, X_test.T)\n    K = np.exp(-gamma * distances)\n    g = np.dot(alpha * y_train, K) + b\n    return [1 if value >= 0 else -1 for value in g]"}
{"task_id": 25, "completion_id": 5, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    squared_diffs = np.sum(X_train ** 2, axis=1)[:, np.newaxis] + np.sum(X_test ** 2, axis=1) - 2 * np.dot(X_train, X_test.T)\n    K = np.exp(-gamma * squared_diffs)\n    g = np.dot(alpha * y_train, K) + b\n    predictions = np.where(g > 0, 1, -1).flatten().tolist()\n    return predictions"}
{"task_id": 25, "completion_id": 6, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    diff_matrix = X_train[:, np.newaxis, :] - X_test[np.newaxis, :, :]\n    norm_squared = np.sum(diff_matrix ** 2, axis=2)\n    kernel_values = np.exp(-gamma * norm_squared)\n    decision_function = np.dot(alpha * y_train, kernel_values) + b\n    predictions = np.sign(decision_function).astype(int)\n    predictions[predictions == 0] = 1\n    return predictions.tolist()"}
{"task_id": 25, "completion_id": 7, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    diff = X_train[:, np.newaxis, :] - X_test[np.newaxis, :, :]\n    squared_distances = np.sum(diff ** 2, axis=2)\n    K = np.exp(-gamma * squared_distances)\n    g_z = np.sum(alpha[:, np.newaxis] * y_train[:, np.newaxis] * K, axis=0) + b\n    predictions = np.sign(g_z)\n    return predictions.tolist()"}
{"task_id": 25, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    n = X_train.shape[0]\n    diff = X_train[:, np.newaxis, :] - X_test[np.newaxis, :, :]\n    norm_squared = np.sum(diff ** 2, axis=2)\n    K = np.exp(-gamma * norm_squared)\n    g_z = np.sum(alpha * y_train * K, axis=0) + b\n    predictions = np.sign(g_z).astype(int)\n    return predictions.tolist()"}
{"task_id": 25, "completion_id": 9, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    diff = X_train[np.newaxis, :, :] - X_test[:, np.newaxis, :]\n    squared_norms = np.sum(diff ** 2, axis=2)\n    kernel_matrix = np.exp(-gamma * squared_norms)\n    g_z = np.sum(alpha * y_train * kernel_matrix, axis=1) + b\n    predictions = np.sign(g_z).astype(int)\n    predictions[predictions == 0] = 1\n    return predictions.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X)\n    (m, n) = X_np.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, s, Vt) = np.linalg.svd(X_np, full_matrices=False)\n    S_k = np.diag(s[:k])\n    X_hat_np = U[:, :k] @ S_k @ Vt[:k, :]\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    X_hat = X_hat_np.round(4).tolist()\n    mse = round(mse, 4)\n    return (X_hat, mse)"}
{"task_id": 28, "completion_id": 1, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X)\n    (m, n) = X_np.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, s, Vt) = np.linalg.svd(X_np, full_matrices=False)\n    U_k = U[:, :k]\n    s_k = s[:k]\n    Vt_k = Vt[:k, :]\n    X_hat_np = U_k @ np.diag(s_k) @ Vt_k\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    X_hat = np.round(X_hat_np, 4).tolist()\n    mse = round(mse, 4)\n    return (X_hat, mse)"}
{"task_id": 28, "completion_id": 2, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_array = np.array(X)\n    (m, n) = X_array.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, s, Vt) = np.linalg.svd(X_array, full_matrices=False)\n    S_k = np.diag(s[:k])\n    X_hat_array = U[:, :k] @ S_k @ Vt[:k, :]\n    mse = np.mean((X_array - X_hat_array) ** 2)\n    X_hat_rounded = np.round(X_hat_array, 4).tolist()\n    mse_rounded = np.round(mse, 4)\n    return (X_hat_rounded, mse_rounded)"}
{"task_id": 28, "completion_id": 3, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X)\n    (m, n) = X_np.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, s, Vt) = np.linalg.svd(X_np, full_matrices=False)\n    U_truncated = U[:, :k]\n    s_truncated = s[:k]\n    Vt_truncated = Vt[:k, :]\n    X_hat_np = U_truncated @ np.diag(s_truncated) @ Vt_truncated\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    X_hat_rounded = np.round(X_hat_np, 4).tolist()\n    mse_rounded = round(mse, 4)\n    return (X_hat_rounded, mse_rounded)"}
{"task_id": 28, "completion_id": 4, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X)\n    (m, n) = X_np.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, s, VT) = np.linalg.svd(X_np, full_matrices=False)\n    U_k = U[:, :k]\n    s_k = s[:k]\n    VT_k = VT[:k, :]\n    X_hat_np = U_k @ np.diag(s_k) @ VT_k\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    X_hat = np.round(X_hat_np, 4).tolist()\n    mse = np.round(mse, 4)\n    return (X_hat, mse)"}
{"task_id": 28, "completion_id": 5, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X)\n    (m, n) = X_np.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, s, Vt) = np.linalg.svd(X_np, full_matrices=False)\n    S_k = np.diag(s[:k])\n    X_hat_np = U[:, :k] @ S_k @ Vt[:k, :]\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    X_hat = np.round(X_hat_np, 4).tolist()\n    mse = round(mse, 4)\n    return (X_hat, mse)"}
{"task_id": 28, "completion_id": 6, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_array = np.array(X)\n    (m, n) = X_array.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, s, VT) = np.linalg.svd(X_array, full_matrices=False)\n    U_truncated = U[:, :k]\n    s_truncated = s[:k]\n    VT_truncated = VT[:k, :]\n    X_hat_array = U_truncated @ np.diag(s_truncated) @ VT_truncated\n    X_hat = X_hat_array.round(4).tolist()\n    mse = np.mean((X_array - X_hat_array) ** 2).round(4)\n    return (X_hat, mse)"}
{"task_id": 28, "completion_id": 7, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X)\n    (m, n) = X_np.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, S, Vt) = np.linalg.svd(X_np, full_matrices=False)\n    U_k = U[:, :k]\n    S_k = S[:k]\n    Vt_k = Vt[:k, :]\n    X_hat_np = np.dot(U_k, np.dot(np.diag(S_k), Vt_k))\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    X_hat_rounded = X_hat_np.round(4).tolist()\n    mse_rounded = round(mse, 4)\n    return (X_hat_rounded, mse_rounded)"}
{"task_id": 28, "completion_id": 8, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_array = np.array(X)\n    (m, n) = X_array.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, s, Vt) = np.linalg.svd(X_array, full_matrices=False)\n    S_k = np.diag(s[:k])\n    X_k = U[:, :k] @ S_k @ Vt[:k, :]\n    mse = np.mean((X_array - X_k) ** 2)\n    X_hat_rounded = np.round(X_k, 4).tolist()\n    mse_rounded = np.round(mse, 4)\n    return (X_hat_rounded, mse_rounded)"}
{"task_id": 28, "completion_id": 9, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X)\n    (m, n) = X_np.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    (U, s, VT) = np.linalg.svd(X_np, full_matrices=False)\n    U_k = U[:, :k]\n    s_k = np.diag(s[:k])\n    VT_k = VT[:k, :]\n    X_hat_np = U_k @ s_k @ VT_k\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    X_hat = np.round(X_hat_np, 4).tolist()\n    mse = np.round(mse, 4)\n    return (X_hat, mse)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    predictions = np.zeros_like(y_train)\n    residuals = y_train - predictions\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = x_train[sorted_indices]\n    y_train_sorted = y_train[sorted_indices]\n\n    def calculate_rss(residuals, s):\n        left_mask = x_train_sorted <= s\n        right_mask = x_train_sorted > s\n        c1 = np.mean(residuals[left_mask])\n        c2 = np.mean(residuals[right_mask])\n        predicted_left = c1 * left_mask\n        predicted_right = c2 * right_mask\n        predicted = predicted_left + predicted_right\n        rss = np.sum((residuals - predicted) ** 2)\n        return (rss, c1, c2)\n    while np.sum(residuals ** 2) > epsilon:\n        best_rss = float('inf')\n        best_s = None\n        best_c1 = None\n        best_c2 = None\n        for i in range(len(x_train_sorted) - 1):\n            s = (x_train_sorted[i] + x_train_sorted[i + 1]) / 2\n            (rss, c1, c2) = calculate_rss(residuals, s)\n            if rss < best_rss:\n                best_rss = rss\n                best_s = s\n                best_c1 = c1\n                best_c2 = c2\n        if best_s is not None:\n            predictions[sorted_indices[x_train_sorted <= best_s]] += best_c1\n            predictions[sorted_indices[x_train_sorted > best_s]] += best_c2\n            residuals = y_train - predictions\n    prediction_for_query = 0\n    for (s, c1, c2) in stumps:\n        if x_query <= s:\n            prediction_for_query += c1\n        else:\n            prediction_for_query += c2\n    return round(prediction_for_query, 4)\nx_train = [1, 2, 3, 4, 5]\ny_train = [2, 3, 5, 7, 11]\nx_query = 3.5"}
{"task_id": 29, "completion_id": 1, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sort_indices = np.argsort(x_train)\n    x_train = x_train[sort_indices]\n    y_train = y_train[sort_indices]\n    residuals = y_train.copy()\n    predictions = np.zeros_like(y_train)\n    stumps = []\n    while np.sum(residuals ** 2) > epsilon:\n        candidate_splits = (x_train[:-1] + x_train[1:]) / 2.0\n        best_rss = float('inf')\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        for split in candidate_splits:\n            left_indices = x_train <= split\n            right_indices = x_train > split\n            c1 = np.mean(residuals[left_indices])\n            c2 = np.mean(residuals[right_indices])\n            rss = np.sum(residuals[left_indices] ** 2) - np.sum((residuals[left_indices] - c1) ** 2) + np.sum(residuals[right_indices] ** 2) - np.sum((residuals[right_indices] - c2) ** 2)\n            if rss < best_rss:\n                best_rss = rss\n                best_split = split\n                best_c1 = c1\n                best_c2 = c2\n        stumps.append((best_split, best_c1, best_c2))\n        predictions[left_indices] += best_c1\n        predictions[right_indices] += best_c2\n        residuals = y_train - predictions\n    prediction = 0.0\n    for (split, c1, c2) in stumps:\n        if x_query <= split:\n            prediction += c1\n        else:\n            prediction += c2\n    return round(prediction, 4)"}
{"task_id": 29, "completion_id": 2, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    ensemble_predictions = np.zeros_like(y_train)\n    residuals = y_train.copy()\n    stumps = []\n    while np.sum(residuals ** 2) > epsilon:\n        candidate_splits = (x_train[1:] + x_train[:-1]) / 2\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        best_rss = float('inf')\n        for split in candidate_splits:\n            left_mask = x_train <= split\n            right_mask = x_train > split\n            c1 = np.mean(residuals[left_mask])\n            c2 = np.mean(residuals[right_mask])\n            left_rss = np.sum(residuals[left_mask] ** 2)\n            right_rss = np.sum(residuals[right_mask] ** 2)\n            total_rss = left_rss + right_rss\n            if total_rss < best_rss:\n                best_split = split\n                best_c1 = c1\n                best_c2 = c2\n                best_rss = total_rss\n        stumps.append((best_split, best_c1, best_c2))\n        ensemble_predictions[left_mask] += best_c1\n        ensemble_predictions[right_mask] += best_c2\n        residuals = y_train - ensemble_predictions\n    prediction = 0.0\n    for (split, c1, c2) in stumps:\n        if x_query <= split:\n            prediction += c1\n        else:\n            prediction += c2\n    return round(prediction, 4)"}
{"task_id": 29, "completion_id": 3, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sort_indices = np.argsort(x_train)\n    x_train = x_train[sort_indices]\n    y_train = y_train[sort_indices]\n    residuals = y_train.copy()\n    ensemble_prediction = np.zeros_like(y_train, dtype=float)\n    split_points = (x_train[1:] + x_train[:-1]) / 2\n    while True:\n        best_rss = float('inf')\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        for s in split_points:\n            left_mask = x_train <= s\n            right_mask = x_train > s\n            c1 = np.mean(residuals[left_mask]) if np.any(left_mask) else 0\n            c2 = np.mean(residuals[right_mask]) if np.any(right_mask) else 0\n            rss = np.sum(residuals[left_mask] ** 2) - np.sum((residuals[left_mask] - c1) ** 2) + np.sum(residuals[right_mask] ** 2) - np.sum((residuals[right_mask] - c2) ** 2)\n            if rss < best_rss:\n                best_rss = rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n        if best_rss < epsilon:\n            break\n        stump_prediction = np.zeros_like(y_train)\n        stump_prediction[x_train <= best_split] = best_c1\n        stump_prediction[x_train > best_split] = best_c2\n        ensemble_prediction += stump_prediction\n        residuals = y_train - ensemble_prediction\n    final_prediction = ensemble_prediction[0]\n    for (s, c1, c2) in zip(split_points, np.diff(ensemble_prediction)[np.where(x_train <= split_points)[0]], np.diff(ensemble_prediction)[np.where(x_train <= split_points)[0] + 1]):\n        if x_query <= s:\n            final_prediction += c1\n        else:\n            final_prediction += c2\n    if x_query > split_points[-1]:\n        final_prediction += np.mean(residuals[x_train > split_points[-1]])\n    else:\n        final_prediction += np.mean(residuals[x_train <= split_points[-1]])\n    return round(final_prediction, 4)"}
{"task_id": 29, "completion_id": 4, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sort_indices = np.argsort(x_train)\n    x_train_sorted = x_train[sort_indices]\n    y_train_sorted = y_train[sort_indices]\n    residuals = y_train_sorted.copy()\n    prediction = 0.0\n    while np.sum(residuals ** 2) > epsilon:\n        candidate_splits = [(x_train_sorted[i] + x_train_sorted[i + 1]) / 2 for i in range(len(x_train_sorted) - 1)]\n        best_rss = float('inf')\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        for s in candidate_splits:\n            left_indices = x_train_sorted <= s\n            right_indices = x_train_sorted > s\n            c1 = np.mean(residuals[left_indices]) if np.any(left_indices) else 0\n            c2 = np.mean(residuals[right_indices]) if np.any(right_indices) else 0\n            rss = np.sum(residuals[left_indices] ** 2) + np.sum(residuals[right_indices] ** 2)\n            if rss < best_rss:\n                best_rss = rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n        prediction += best_c1 if x_query <= best_split else best_c2\n        residuals[left_indices] -= best_c1\n        residuals[right_indices] -= best_c2\n    return round(prediction, 4)"}
{"task_id": 29, "completion_id": 5, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sort_indices = np.argsort(x_train)\n    x_train = x_train[sort_indices]\n    y_train = y_train[sort_indices]\n    residuals = y_train.copy()\n    ensemble_prediction = np.zeros_like(y_train)\n\n    def calculate_rss_for_stump(s):\n        left_mask = x_train <= s\n        right_mask = x_train > s\n        c1 = np.mean(residuals[left_mask])\n        c2 = np.mean(residuals[right_mask])\n        prediction = np.where(left_mask, c1, c2)\n        rss = np.sum((residuals - prediction) ** 2)\n        return (rss, c1, c2)\n    while True:\n        best_rss = float('inf')\n        best_stump = None\n        best_c1 = best_c2 = None\n        for i in range(len(x_train) - 1):\n            s = (x_train[i] + x_train[i + 1]) / 2\n            (rss, c1, c2) = calculate_rss_for_stump(s)\n            if rss < best_rss:\n                best_rss = rss\n                best_stump = s\n                best_c1 = c1\n                best_c2 = c2\n        if best_rss < epsilon:\n            break\n        ensemble_prediction += np.where(x_train <= best_stump, best_c1, best_c2)\n        residuals = y_train - ensemble_prediction\n    final_prediction = 0\n    for (s, c1, c2) in zip(x_train[1:] - (x_train[1:] - x_train[:-1]) / 2, *np.unique(np.where(x_train <= x_train[1:] - (x_train[1:] - x_train[:-1]) / 2, best_c1, best_c2))):\n        final_prediction += c1 if x_query <= s else c2\n    final_prediction += np.mean(residuals)\n    return round(final_prediction, 4)"}
{"task_id": 29, "completion_id": 6, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sort_indices = np.argsort(x_train)\n    x_train_sorted = x_train[sort_indices]\n    y_train_sorted = y_train[sort_indices]\n    residuals = y_train_sorted.copy()\n    prediction = 0.0\n    while np.sum(residuals ** 2) > epsilon:\n        candidate_splits = (x_train_sorted[:-1] + x_train_sorted[1:]) / 2.0\n        min_rss = float('inf')\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        for s in candidate_splits:\n            left_indices = x_train_sorted <= s\n            right_indices = x_train_sorted > s\n            if np.any(left_indices) and np.any(right_indices):\n                c1 = np.mean(residuals[left_indices])\n                c2 = np.mean(residuals[right_indices])\n                rss = np.sum(residuals[left_indices] ** 2) + np.sum(residuals[right_indices] ** 2)\n                if rss < min_rss:\n                    min_rss = rss\n                    best_split = s\n                    best_c1 = c1\n                    best_c2 = c2\n        if best_split is not None:\n            prediction += best_c1 if x_query <= best_split else best_c2\n            residuals[left_indices] -= best_c1\n            residuals[right_indices] -= best_c2\n    return round(prediction, 4)"}
{"task_id": 29, "completion_id": 7, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = x_train[sorted_indices]\n    y_train_sorted = y_train[sorted_indices]\n    residuals = y_train_sorted.copy()\n    current_prediction = np.zeros_like(y_train_sorted)\n    stumps = []\n    while np.sum(residuals ** 2) > epsilon:\n        candidate_splits = [(x_train_sorted[i] + x_train_sorted[i + 1]) / 2 for i in range(len(x_train_sorted) - 1)]\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        best_rss = np.inf\n        for split in candidate_splits:\n            left_indices = x_train_sorted <= split\n            right_indices = x_train_sorted > split\n            c1 = np.mean(residuals[left_indices]) if np.any(left_indices) else 0\n            c2 = np.mean(residuals[right_indices]) if np.any(right_indices) else 0\n            current_rss = np.sum(residuals[left_indices] ** 2) - len(residuals[left_indices]) * c1 ** 2 + np.sum(residuals[right_indices] ** 2) - len(residuals[right_indices]) * c2 ** 2\n            if current_rss < best_rss:\n                best_split = split\n                best_c1 = c1\n                best_c2 = c2\n                best_rss = current_rss\n        stumps.append((best_split, best_c1, best_c2))\n        current_prediction[left_indices] += best_c1\n        current_prediction[right_indices] += best_c2\n        residuals = y_train_sorted - current_prediction\n    prediction = 0\n    for (split, c1, c2) in stumps:\n        if x_query <= split:\n            prediction += c1\n        else:\n            prediction += c2\n    return round(prediction, 4)"}
{"task_id": 29, "completion_id": 8, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = x_train[sorted_indices]\n    y_train_sorted = y_train[sorted_indices]\n    residuals = y_train_sorted.copy()\n    predictions = np.zeros_like(y_train_sorted)\n\n    def calculate_rss(stump, x, residuals):\n        (s, c1, c2) = stump\n        prediction = np.where(x <= s, c1, c2)\n        return np.sum((residuals - prediction) ** 2)\n    while True:\n        candidate_splits = [(x_train_sorted[i] + x_train_sorted[i + 1]) / 2 for i in range(len(x_train_sorted) - 1)]\n        best_stump = None\n        best_rss = float('inf')\n        for s in candidate_splits:\n            c1 = np.mean(residuals[x_train_sorted <= s])\n            c2 = np.mean(residuals[x_train_sorted > s])\n            current_rss = calculate_rss((s, c1, c2), x_train_sorted, residuals)\n            if current_rss < best_rss:\n                best_rss = current_rss\n                best_stump = (s, c1, c2)\n        if best_rss < epsilon:\n            break\n        (s, c1, c2) = best_stump\n        predictions[x_train_sorted <= s] += c1\n        predictions[x_train_sorted > s] += c2\n        residuals = y_train_sorted - predictions\n    final_prediction = 0.0\n    for (s, c1, c2) in best_stump:\n        if x_query <= s:\n            final_prediction += c1\n        else:\n            final_prediction += c2\n    return round(final_prediction, 4)"}
{"task_id": 29, "completion_id": 9, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    sort_indices = np.argsort(x_train)\n    x_train = x_train[sort_indices]\n    y_train = y_train[sort_indices]\n    residuals = y_train.copy()\n    ensemble_prediction = np.zeros_like(y_train)\n    while True:\n        candidate_splits = (x_train[:-1] + x_train[1:]) / 2\n        best_rss = float('inf')\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        for split in candidate_splits:\n            left_mask = x_train <= split\n            right_mask = x_train > split\n            c1 = np.mean(residuals[left_mask])\n            c2 = np.mean(residuals[right_mask])\n            rss = np.sum(residuals[left_mask] ** 2) + np.sum(residuals[right_mask] ** 2)\n            if rss < best_rss:\n                best_rss = rss\n                best_split = split\n                best_c1 = c1\n                best_c2 = c2\n        stump_prediction = np.where(x_train <= best_split, best_c1, best_c2)\n        ensemble_prediction += stump_prediction\n        residuals = y_train - ensemble_prediction\n        if best_rss < epsilon:\n            break\n    query_prediction = 0.0\n    for (split, c1, c2) in zip(candidate_splits, np.where(x_train <= candidate_splits, residuals, 0), np.where(x_train > candidate_splits, residuals, 0)):\n        if x_query <= split:\n            query_prediction += best_c1\n        else:\n            query_prediction += best_c2\n    if x_query <= best_split:\n        query_prediction += best_c1\n    else:\n        query_prediction += best_c2\n    return round(query_prediction, 4)"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray | int:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n    \n    Parameters:\n    - shape: A tuple representing the desired shape of the output tensor.\n    - sparsity: A float in the range [0, 1] representing the probability of an entry being 1.0.\n    - seed: An optional integer seed for reproducibility. If provided, the random number generator is seeded with this value.\n    \n    Returns:\n    - A NumPy array of the specified shape with entries 1.0 with probability 'sparsity' and 0.0 otherwise.\n    - Returns -1 if 'sparsity' is outside the range [0, 1].\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_tensor = np.random.rand(*shape)\n    binary_tensor = (random_tensor < sparsity).astype(float)\n    return binary_tensor"}
{"task_id": 34, "completion_id": 1, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n    \n    Parameters:\n    shape (tuple[int, ...]): The desired shape of the tensor.\n    sparsity (float): The probability of generating a 1.0 in the tensor. Must be in the range [0, 1].\n    seed (int | None): Optional seed for reproducibility.\n    \n    Returns:\n    np.ndarray: A NumPy array of the specified shape with dtype float, filled with 0.0s and 1.0s.\n                Returns -1 if the sparsity is outside the valid range [0, 1].\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_tensor = np.random.rand(*shape)\n    binary_tensor = (random_tensor < sparsity).astype(float)\n    return binary_tensor"}
{"task_id": 34, "completion_id": 2, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n    \n    Parameters:\n    - shape: A tuple specifying the dimensions of the output tensor.\n    - sparsity: A float in the range [0, 1] representing the probability of generating a 1.0.\n    - seed: An optional integer to seed the random number generator for reproducibility.\n    \n    Returns:\n    - A NumPy array with the specified shape, containing only 0.0s and 1.0s.\n    - Returns -1 if sparsity is outside the range [0, 1].\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_array = np.random.rand(*shape)\n    binary_tensor = (random_array < sparsity).astype(float)\n    return binary_tensor"}
{"task_id": 34, "completion_id": 3, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray:\n    \"\"\"\n    Generate a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n    \n    Parameters:\n    - shape: A tuple defining the shape of the output tensor.\n    - sparsity: A float value between 0 and 1 representing the probability of generating a 1.0.\n    - seed: An optional integer to seed the random number generator for reproducibility.\n    \n    Returns:\n    - A NumPy array of the specified shape with entries 1.0 with probability equal to sparsity\n      and 0.0 otherwise. Returns -1 if sparsity is outside the range [0, 1].\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_tensor = np.random.rand(*shape)\n    binary_tensor = (random_tensor < sparsity).astype(float)\n    return binary_tensor"}
{"task_id": 34, "completion_id": 4, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n    \n    Parameters:\n    - shape: A tuple defining the shape of the tensor.\n    - sparsity: A float in the closed interval [0, 1] representing the probability of generating a 1.0.\n    - seed: An optional integer seed for reproducibility.\n    \n    Returns:\n    - A NumPy array of the specified shape with dtype float, containing 0.0s and 1.0s.\n    - Returns -1 if the sparsity value is outside the legal range [0, 1].\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_array = np.random.rand(*shape)\n    binary_tensor = (random_array < sparsity).astype(float)\n    return binary_tensor"}
{"task_id": 34, "completion_id": 5, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s.\n    \n    Parameters:\n    - shape: A tuple specifying the desired shape of the tensor.\n    - sparsity: A float in the interval [0, 1] representing the probability of generating a 1.0.\n    - seed: An optional integer seed for reproducibility.\n    \n    Returns:\n    - A NumPy array of the specified shape filled with 0.0s and 1.0s, or -1 if sparsity is out of bounds.\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_values = np.random.rand(*shape)\n    binary_tensor = (random_values < sparsity).astype(float)\n    return binary_tensor"}
{"task_id": 34, "completion_id": 6, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the given sparsity.\n    \n    Parameters:\n    - shape: A tuple defining the shape of the tensor.\n    - sparsity: A float in the range [0, 1] representing the probability of generating a 1.0.\n    - seed: An optional integer seed for reproducibility.\n    \n    Returns:\n    - A NumPy array of the specified shape with 0.0s and 1.0s, or -1 if sparsity is out of range.\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_values = np.random.rand(*shape)\n    binary_tensor = (random_values < sparsity).astype(float)\n    return binary_tensor"}
{"task_id": 34, "completion_id": 7, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s.\n\n    Parameters:\n    - shape: A tuple representing the desired shape of the tensor.\n    - sparsity: A float in the interval [0, 1] representing the probability of generating a 1.0.\n    - seed: An optional integer to seed the random number generator for reproducibility.\n\n    Returns:\n    - A NumPy array of the specified shape with 0.0s and 1.0s, or -1 if sparsity is out of range.\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_tensor = np.random.rand(*shape)\n    binary_tensor = (random_tensor < sparsity).astype(float)\n    return binary_tensor"}
{"task_id": 34, "completion_id": 8, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray | int:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n    \n    Parameters:\n    shape (tuple[int, ...]): The desired shape of the output tensor.\n    sparsity (float): The probability of generating a 1.0 in the tensor. Must be in the range [0, 1].\n    seed (int | None): An optional seed for the random number generator to ensure reproducibility.\n    \n    Returns:\n    np.ndarray | int: A NumPy array of the specified shape with 0.0s and 1.0s based on the sparsity,\n                      or -1 if the sparsity value is outside the valid range.\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_values = np.random.rand(*shape)\n    binary_tensor = (random_values < sparsity).astype(float)\n    return binary_tensor"}
{"task_id": 34, "completion_id": 9, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None) -> np.ndarray | int:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n    \n    Parameters:\n    - shape (tuple[int, ...]): The desired shape of the output tensor.\n    - sparsity (float): The probability of generating a 1.0 in the tensor (default is 0.5).\n    - seed (int | None): An optional seed for reproducibility (default is None).\n    \n    Returns:\n    - np.ndarray: A NumPy array of the specified shape with 0.0s and 1.0s.\n    - int: -1 if the sparsity value is outside the range [0, 1].\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    random_array = np.random.rand(*shape)\n    binary_tensor = (random_array < sparsity).astype(float)\n    return binary_tensor"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_pos = n_samples // 2\n    indices = np.arange(n_samples)\n    partitioned_indices = np.argpartition(data[:, d], median_pos)\n    pivot = partitioned_indices[median_pos]\n    left_indices = partitioned_indices[partitioned_indices < median_pos]\n    right_indices = partitioned_indices[partitioned_indices > median_pos]\n    left = sorted(left_indices.tolist())\n    right = sorted(right_indices.tolist())\n    return (pivot, left, right)"}
{"task_id": 39, "completion_id": 1, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_index = n_samples // 2\n    partition_indices = np.argpartition(data[:, d], median_index)\n    pivot = partition_indices[median_index]\n    left_indices = partition_indices[:median_index]\n    right_indices = partition_indices[median_index + 1:]\n    median_value = data[pivot, d]\n    left_indices = [i for i in left_indices if data[i, d] < median_value]\n    right_indices = [i for i in right_indices if data[i, d] > median_value]\n    if median_index not in left_indices and median_index not in right_indices:\n        if data[median_index, d] < median_value:\n            left_indices.append(median_index)\n        elif data[median_index, d] > median_value:\n            right_indices.append(median_index)\n    left_indices.sort()\n    right_indices.sort()\n    return (pivot, left_indices, right_indices)"}
{"task_id": 39, "completion_id": 2, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_index = n_samples // 2\n    indices = np.arange(n_samples)\n    partitioned_indices = np.argpartition(data[:, d], median_index)\n    pivot = partitioned_indices[median_index]\n    left_indices = partitioned_indices[:median_index]\n    right_indices = partitioned_indices[median_index + 1:]\n    left_indices_sorted = sorted(left_indices)\n    right_indices_sorted = sorted(right_indices)\n    return (pivot, left_indices_sorted, right_indices_sorted)"}
{"task_id": 39, "completion_id": 3, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    column_values = data[:, d]\n    n_samples = len(column_values)\n    median_index = n_samples // 2\n    partitioned_indices = np.argpartition(column_values, median_index)\n    pivot_index = partitioned_indices[median_index]\n    left_indices = partitioned_indices[:median_index]\n    right_indices = partitioned_indices[median_index + 1:]\n    left = sorted(left_indices.tolist())\n    right = sorted(right_indices.tolist())\n    return (pivot_index, left, right)"}
{"task_id": 39, "completion_id": 4, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_index = n_samples // 2\n    indices = np.arange(n_samples)\n    argpartitioned_indices = np.argpartition(data[:, d], median_index, axis=0)\n    pivot = argpartitioned_indices[median_index]\n    left_indices = argpartitioned_indices[argpartitioned_indices < pivot]\n    right_indices = argpartitioned_indices[argpartitioned_indices > pivot]\n    left = sorted(left_indices)\n    right = sorted(right_indices)\n    return (pivot, left, right)"}
{"task_id": 39, "completion_id": 5, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_index = n_samples // 2\n    indices = np.arange(n_samples)\n    partitioned_indices = np.argpartition(data[:, d], median_index)\n    pivot_index = partitioned_indices[median_index]\n    left_indices = partitioned_indices[:median_index]\n    right_indices = partitioned_indices[median_index + 1:]\n    left_indices = sorted(left_indices)\n    right_indices = sorted(right_indices)\n    return (pivot_index, left_indices, right_indices)"}
{"task_id": 39, "completion_id": 6, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_index = n_samples // 2\n    indices = np.arange(n_samples)\n    partitioned_indices = np.argpartition(data[:, d], median_index)\n    pivot = partitioned_indices[median_index]\n    left_indices = partitioned_indices[partitioned_indices < median_index]\n    right_indices = partitioned_indices[partitioned_indices > median_index]\n    left = sorted(left_indices)\n    right = sorted(right_indices)\n    return (pivot, left, right)"}
{"task_id": 39, "completion_id": 7, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_index = n_samples // 2\n    partition_indices = np.argpartition(data[:, d], median_index)\n    pivot = partition_indices[median_index]\n    left_indices = partition_indices[:median_index]\n    right_indices = partition_indices[median_index + 1:]\n    left_indices_sorted = sorted(left_indices)\n    right_indices_sorted = sorted(right_indices)\n    return (pivot, left_indices_sorted, right_indices_sorted)"}
{"task_id": 39, "completion_id": 8, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_index = n_samples // 2\n    indices = np.argpartition(data[:, d], median_index)\n    pivot = indices[median_index]\n    left_indices = indices[:median_index]\n    right_indices = indices[median_index + 1:]\n    left_indices = left_indices[data[left_indices, d] < data[pivot, d]]\n    right_indices = right_indices[data[right_indices, d] > data[pivot, d]]\n    left = sorted(left_indices.tolist())\n    right = sorted(right_indices.tolist())\n    return (pivot, left, right)"}
{"task_id": 39, "completion_id": 9, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_index = n_samples // 2\n    indices = np.arange(n_samples)\n    partitioned_indices = np.argpartition(data[:, d], median_index)\n    pivot = partitioned_indices[median_index]\n    left_indices = partitioned_indices[:median_index]\n    right_indices = partitioned_indices[median_index + 1:]\n    left_indices.sort()\n    right_indices.sort()\n    return (pivot, left_indices.tolist(), right_indices.tolist())"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input array must be one-dimensional.'\n    assert stride >= 1, 'Stride must be a positive integer.'\n    assert len(x) >= frame_width, 'Input array must be at least as long as the frame width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    x_strided = as_strided(x, shape=(n_frames, frame_width), strides=(x.strides[0] * stride, x.strides[0]))\n    x_strided.flags.writeable = writeable if x.flags.writeable else False\n    return x_strided"}
{"task_id": 40, "completion_id": 1, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input signal must be one-dimensional.'\n    assert stride >= 1, 'Stride must be a positive integer.'\n    assert len(x) >= frame_width, 'Length of the input signal must be at least the frame width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    x_frames = as_strided(x, shape=(n_frames, frame_width), strides=(x.strides[0] * stride, x.strides[0]))\n    x_frames.flags.writeable = x.flags.writeable and writeable\n    return x_frames"}
{"task_id": 40, "completion_id": 2, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input array must be one-dimensional.'\n    assert stride >= 1, 'Stride must be a positive integer.'\n    assert len(x) >= frame_width, 'Input array must be at least as long as the frame width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    shape = (n_frames, frame_width)\n    strides = (x.strides[0] * stride, x.strides[0])\n    framed_signal = as_strided(x, shape=shape, strides=strides, writeable=writeable)\n    return framed_signal"}
{"task_id": 40, "completion_id": 3, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input signal x must be one-dimensional.'\n    assert stride >= 1, 'Stride must be a positive integer.'\n    assert len(x) >= frame_width, 'Length of x must be at least frame_width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    frames = as_strided(x, shape=(n_frames, frame_width), strides=(x.strides[0] * stride, x.strides[0]), writeable=writeable)\n    return frames"}
{"task_id": 40, "completion_id": 4, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input array must be one-dimensional.'\n    assert stride > 0, 'Stride must be a positive integer.'\n    assert len(x) >= frame_width, 'Input array length must be at least frame_width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    x_stride_bytes = x.strides[0]\n    new_shape = (n_frames, frame_width)\n    new_strides = (x_stride_bytes * stride, x_stride_bytes)\n    frames = as_strided(x, shape=new_shape, strides=new_strides, writeable=writeable)\n    return frames"}
{"task_id": 40, "completion_id": 5, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'x must be one-dimensional.'\n    assert stride > 0, 'Stride must be a positive integer.'\n    assert len(x) >= frame_width, 'The length of x must be at least frame_width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    x_strides = (x.strides[0] * stride, x.strides[0])\n    frames = as_strided(x, shape=(n_frames, frame_width), strides=x_strides, writeable=writeable)\n    return frames"}
{"task_id": 40, "completion_id": 6, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input signal must be one-dimensional.'\n    assert stride >= 1, 'Stride must be a positive integer.'\n    assert len(x) >= frame_width, 'Input signal must be at least as long as the frame width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    frames = as_strided(x, shape=(n_frames, frame_width), strides=(x.strides[0] * stride, x.strides[0]))\n    frames.flags.writeable = writeable if x.flags.writeable else False\n    return frames"}
{"task_id": 40, "completion_id": 7, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'x must be a one-dimensional array.'\n    assert stride > 0, 'Stride must be a positive integer.'\n    assert len(x) >= frame_width, 'The length of x must be at least frame_width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    shape = (n_frames, frame_width)\n    strides = (x.strides[0] * stride, x.strides[0])\n    frames = as_strided(x, shape=shape, strides=strides, writeable=writeable)\n    return frames"}
{"task_id": 40, "completion_id": 8, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input signal must be one-dimensional.'\n    assert stride >= 1, 'Stride must be a positive integer.'\n    assert len(x) >= frame_width, 'Input signal must be at least as long as the frame width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    frame_stride = stride * x.itemsize\n    sample_stride = x.itemsize\n    frames = as_strided(x, shape=(n_frames, frame_width), strides=(frame_stride, sample_stride), writeable=writeable)\n    return frames"}
{"task_id": 40, "completion_id": 9, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input signal must be one-dimensional.'\n    assert stride >= 1, 'Stride must be a positive integer.'\n    assert len(x) >= frame_width, 'Length of the signal must be at least the frame width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    frames = as_strided(x, shape=(n_frames, frame_width), strides=(x.strides[0] * stride, x.strides[0]))\n    frames.flags.writeable = writeable\n    return frames"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    if not np.allclose(np.sum(X, axis=1), 1, atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 1, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if not np.all(0 <= X <= 1):\n        return False\n    row_sums = X.sum(axis=1)\n    if not np.allclose(row_sums, 1, atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 2, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X) if not isinstance(X, np.ndarray) else X\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    if not np.allclose(np.sum(X, axis=1), np.ones(X.shape[0]), atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 3, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((0 <= X) & (X <= 1)):\n        return False\n    if not np.allclose(np.sum(X, axis=1), 1, atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 4, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, 1, atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 5, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((0 <= X) & (X <= 1)):\n        return False\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, 1, atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 6, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X) if not isinstance(X, np.ndarray) else X\n    if X.ndim != 2:\n        return False\n    if not np.all((0 <= X) & (X <= 1)):\n        return False\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, 1, atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 7, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if not (X >= 0).all() or not (X <= 1).all():\n        return False\n    row_sums = X.sum(axis=1)\n    return np.allclose(row_sums, 1, atol=1e-08)"}
{"task_id": 48, "completion_id": 8, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X) if isinstance(X, list) else X\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    if not np.allclose(np.sum(X, axis=1), 1, atol=1e-08):\n        return False\n    return True"}
{"task_id": 48, "completion_id": 9, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X) if not isinstance(X, np.ndarray) else X\n    if X.ndim != 2:\n        return False\n    if not np.all((0 <= X) & (X <= 1)):\n        return False\n    if not np.allclose(np.sum(X, axis=1), 1, atol=1e-08):\n        return False\n    return True"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    iteration = 0\n    while iteration < max_iter:\n        start = iteration * batch_size % n\n        end = (start + batch_size) % n\n        if start < end:\n            X_batch = X[start:end]\n            y_batch = y[start:end]\n        else:\n            X_batch = np.concatenate((X[start:], X[:end]))\n            y_batch = np.concatenate((y[start:], y[:end]))\n        predictions = X_batch @ w\n        errors = predictions - y_batch\n        g = 1 / len(X_batch) * X_batch.T @ errors\n        s = rho * s + (1 - rho) * g ** 2\n        w = w - eta * g / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(g) < epsilon:\n            break\n        iteration += 1\n    return [round(weight, 4) for weight in w.tolist()]"}
{"task_id": 55, "completion_id": 1, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for iteration in range(max_iter):\n        indices = np.arange(n)\n        np.random.shuffle(indices)\n        X_shuffled = X[indices]\n        y_shuffled = y[indices]\n        for batch_start in range(0, n, batch_size):\n            batch_end = batch_start + batch_size\n            X_batch = X_shuffled[batch_start:batch_end]\n            y_batch = y_shuffled[batch_start:batch_end]\n            gradient = 1 / len(X_batch) * X_batch.T @ (X_batch @ w - y_batch)\n            s = rho * s + (1 - rho) * gradient ** 2\n            w -= eta * gradient / (np.sqrt(s) + eps_station)\n        full_gradient = 1 / n * X.T @ (X @ w - y)\n        if np.linalg.norm(full_gradient) < epsilon:\n            break\n    return [round(weight, 4) for weight in w]"}
{"task_id": 55, "completion_id": 2, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for iteration in range(max_iter):\n        start_idx = iteration * batch_size % n\n        end_idx = (start_idx + batch_size) % n\n        if start_idx < end_idx:\n            X_batch = X[start_idx:end_idx]\n            y_batch = y[start_idx:end_idx]\n        else:\n            X_batch = np.vstack((X[start_idx:], X[:end_idx]))\n            y_batch = np.concatenate((y[start_idx:], y[:end_idx]))\n        g = 1 / len(X_batch) * X_batch.T @ (X_batch @ w - y_batch)\n        s = rho * s + (1 - rho) * g ** 2\n        w -= eta * g / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(g) < epsilon:\n            break\n    return [round(weight, 4) for weight in w]"}
{"task_id": 55, "completion_id": 3, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for _ in range(max_iter):\n        indices = np.arange(n)\n        np.random.shuffle(indices)\n        X_shuffled = X[indices]\n        y_shuffled = y[indices]\n        for i in range(0, n, batch_size):\n            X_batch = X_shuffled[i:i + batch_size]\n            y_batch = y_shuffled[i:i + batch_size]\n            grad = 1 / len(X_batch) * X_batch.T @ (X_batch @ w - y_batch)\n            s = rho * s + (1 - rho) * grad ** 2\n            w -= eta * grad / (np.sqrt(s) + eps_station)\n            if np.linalg.norm(grad) < epsilon:\n                return w.round(4).tolist()\n    return w.round(4).tolist()"}
{"task_id": 55, "completion_id": 4, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    iter_count = 0\n    while iter_count < max_iter:\n        indices = np.arange(n)\n        np.random.shuffle(indices)\n        X_shuffled = X[indices]\n        y_shuffled = y[indices]\n        for i in range(0, n, batch_size):\n            X_batch = X_shuffled[i:i + batch_size]\n            y_batch = y_shuffled[i:i + batch_size]\n            g = 1 / len(X_batch) * X_batch.T @ (X_batch @ w - y_batch)\n            s = rho * s + (1 - rho) * g ** 2\n            w -= eta * g / (np.sqrt(s) + eps_station)\n            if np.linalg.norm(g) < epsilon:\n                return w.round(4).tolist()\n        iter_count += 1\n    return w.round(4).tolist()"}
{"task_id": 55, "completion_id": 5, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for iteration in range(max_iter):\n        start_index = iteration * batch_size % n\n        end_index = (start_index + batch_size) % n\n        if end_index < start_index:\n            X_batch = np.vstack((X[start_index:], X[:end_index]))\n            y_batch = np.concatenate((y[start_index:], y[:end_index]))\n        else:\n            X_batch = X[start_index:end_index]\n            y_batch = y[start_index:end_index]\n        gradient = 1 / len(X_batch) * X_batch.T @ (X_batch @ w - y_batch)\n        s = rho * s + (1 - rho) * gradient ** 2\n        w -= eta * gradient / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(gradient) < epsilon:\n            break\n    return np.round(w, 4).tolist()"}
{"task_id": 55, "completion_id": 6, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for iteration in range(max_iter):\n        indices = np.arange(n)\n        np.random.shuffle(indices)\n        X_shuffled = X[indices]\n        y_shuffled = y[indices]\n        for batch_start in range(0, n, batch_size):\n            batch_end = batch_start + batch_size\n            X_batch = X_shuffled[batch_start:batch_end]\n            y_batch = y_shuffled[batch_start:batch_end]\n            g = 1 / len(X_batch) * X_batch.T @ (X_batch @ w - y_batch)\n            s = rho * s + (1 - rho) * g ** 2\n            w -= eta * g / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(g) < epsilon:\n            break\n    return [round(weight, 4) for weight in w.tolist()]"}
{"task_id": 55, "completion_id": 7, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for iteration in range(max_iter):\n        start = iteration * batch_size % n\n        end = (start + batch_size) % n\n        if end < start:\n            X_batch = np.vstack((X[start:], X[:end]))\n            y_batch = np.concatenate((y[start:], y[:end]))\n        else:\n            X_batch = X[start:end]\n            y_batch = y[start:end]\n        g = 1 / len(X_batch) * X_batch.T @ (X_batch @ w - y_batch)\n        s = rho * s + (1 - rho) * g ** 2\n        w -= eta * g / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(g) < epsilon:\n            break\n    return [round(weight, 4) for weight in w.tolist()]"}
{"task_id": 55, "completion_id": 8, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for iteration in range(max_iter):\n        start_idx = iteration * batch_size % n\n        end_idx = (start_idx + batch_size) % n\n        if start_idx < end_idx:\n            X_batch = X[start_idx:end_idx]\n            y_batch = y[start_idx:end_idx]\n        else:\n            X_batch = np.vstack((X[start_idx:], X[:end_idx]))\n            y_batch = np.hstack((y[start_idx:], y[:end_idx]))\n        grad = 1 / len(X_batch) * X_batch.T @ (X_batch @ w - y_batch)\n        s = rho * s + (1 - rho) * grad ** 2\n        w -= eta * grad / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(grad) < epsilon:\n            break\n    return [round(weight, 4) for weight in w.tolist()]"}
{"task_id": 55, "completion_id": 9, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for iteration in range(max_iter):\n        start_idx = iteration * batch_size % n\n        end_idx = (start_idx + batch_size) % n\n        if start_idx < end_idx:\n            X_batch = X[start_idx:end_idx]\n            y_batch = y[start_idx:end_idx]\n        else:\n            X_batch = np.concatenate((X[start_idx:], X[:end_idx]))\n            y_batch = np.concatenate((y[start_idx:], y[:end_idx]))\n        predictions = X_batch.dot(w)\n        errors = predictions - y_batch\n        gradient = 1 / len(X_batch) * X_batch.T.dot(errors)\n        s = rho * s + (1 - rho) * gradient ** 2\n        w = w - eta * gradient / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(gradient) < epsilon:\n            break\n    return [round(weight, 4) for weight in w.tolist()]"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute the SoftPlus activation or its gradient.\n    \n    Args:\n        x (scalar, list, or np.array): Input values.\n        deriv (bool, optional): If True, return the gradient (sigmoid) of SoftPlus. Defaults to False.\n    \n    Returns:\n        list or float: Rounded results of SoftPlus or its gradient.\n    \"\"\"\n    is_scalar = np.isscalar(x)\n    x = np.array(x, dtype=float)\n    if deriv:\n        grad = 1 / (1 + np.exp(-x))\n        result = np.round(grad, 4)\n    else:\n        softplus_vals = np.where(x > 20, x, np.log1p(np.exp(x)))\n        result = np.round(softplus_vals, 4)\n    return float(result) if is_scalar else result.tolist()"}
{"task_id": 56, "completion_id": 1, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute the SoftPlus activation or its derivative for the input x.\n    \n    Parameters:\n    x (scalar, list, or NumPy array): Input values.\n    deriv (bool): If True, compute the derivative of SoftPlus; otherwise, compute SoftPlus.\n    \n    Returns:\n    list or float: The computed SoftPlus or its derivative for each element in x, rounded to 4 decimal places.\n    \"\"\"\n    x_array = np.array(x, dtype=float)\n    if not deriv:\n        result = np.log1p(np.exp(-np.abs(x_array))) + np.maximum(x_array, 0)\n    else:\n        result = 1 / (1 + np.exp(-x_array))\n    result_rounded = np.round(result, 4)\n    if np.isscalar(x):\n        return float(result_rounded)\n    else:\n        return result_rounded.tolist()"}
{"task_id": 56, "completion_id": 2, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute the SoftPlus activation or its derivative.\n    \n    Args:\n        x: A scalar, Python list, or NumPy array of real numbers.\n        deriv: A boolean flag indicating whether to compute the derivative (default is False).\n    \n    Returns:\n        A Python list of the computed SoftPlus values or their derivatives, rounded to 4 decimal places.\n        If x is a scalar, returns a single rounded float.\n    \"\"\"\n    x = np.array(x, dtype=float)\n    if deriv:\n        result = 1 / (1 + np.exp(-x))\n    else:\n        result = np.where(x > 0, np.log1p(np.exp(-x)) + x, np.log1p(np.exp(x)))\n    result = np.round(result, 4)\n    if result.size == 1:\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 56, "completion_id": 3, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute the SoftPlus activation or its derivative for input x.\"\"\"\n\n    def compute_softplus(x):\n        return np.log1p(np.exp(np.where(x > 15, x, 0))) + np.where(x > 15, 0, np.log1p(np.exp(x)))\n\n    def compute_derivative(x):\n        return 1 / (1 + np.exp(-x))\n    x = np.array(x, dtype=float)\n    if deriv:\n        result = compute_derivative(x)\n    else:\n        result = compute_softplus(x)\n    result = np.round(result, 4)\n    if isinstance(x, np.ndarray):\n        if x.ndim == 0:\n            return float(result)\n        else:\n            return result.tolist()\n    else:\n        return float(result)"}
{"task_id": 56, "completion_id": 4, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute the SoftPlus activation or its derivative for a given input.\n\n    Parameters:\n    x (scalar, list, or np.ndarray): Input values.\n    deriv (bool): If True, compute the gradient of SoftPlus; otherwise, compute SoftPlus.\n\n    Returns:\n    float or list: Rounded result(s) of the SoftPlus activation or its derivative.\n    \"\"\"\n    x_array = np.array(x, dtype=np.float64)\n    if deriv:\n        result = 1 / (1 + np.exp(-x_array))\n    else:\n        result = np.where(x_array > 0, np.log1p(np.exp(-x_array)) + x_array, np.log1p(np.exp(x_array)))\n    rounded_result = np.round(result, 4)\n    if isinstance(x, (int, float)):\n        return float(rounded_result)\n    else:\n        return rounded_result.tolist()"}
{"task_id": 56, "completion_id": 5, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute the SoftPlus activation or its derivative.\n    \n    Parameters:\n    x (scalar, list, or np.array): Input values.\n    deriv (bool): Whether to compute the derivative (default is False).\n    \n    Returns:\n    list or float: SoftPlus(x) or SoftPlus'(x) rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(x, (int, float)):\n        x = np.array([x])\n    else:\n        x = np.array(x)\n    if deriv:\n        gradient = 1 / (1 + np.exp(-x))\n        result = np.round(gradient, 4)\n    else:\n        softplus_values = np.where(x > 0, np.log1p(np.exp(-x)) + x, np.log1p(np.exp(x)))\n        result = np.round(softplus_values, 4)\n    if result.size == 1:\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 56, "completion_id": 6, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute the SoftPlus activation or its gradient.\n    \n    Args:\n        x (scalar, list, or np.array): Input values.\n        deriv (bool): If True, compute the gradient (sigmoid); otherwise, compute SoftPlus.\n        \n    Returns:\n        float or list: Rounded result of the SoftPlus or sigmoid function.\n    \"\"\"\n\n    def compute(element):\n        if deriv:\n            return round(1 / (1 + np.exp(-element)), 4)\n        elif element > 15:\n            return round(element, 4)\n        elif element < -15:\n            return round(np.log1p(np.exp(element)), 4)\n        else:\n            return round(np.log1p(np.exp(element)), 4)\n    if isinstance(x, (int, float, np.number)):\n        return compute(x)\n    else:\n        x_array = np.array(x)\n        result = np.array([compute(xi) for xi in x_array])\n        return result.tolist()"}
{"task_id": 56, "completion_id": 7, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute the SoftPlus activation or its gradient (sigmoid) for the input x.\"\"\"\n\n    def softplus_stable(x):\n        return np.where(x > 20, x, np.log1p(np.exp(x)))\n\n    def sigmoid(x):\n        return 1 / (1 + np.exp(-x))\n    x_np = np.array(x, dtype=float)\n    if deriv:\n        result = sigmoid(x_np)\n    else:\n        result = softplus_stable(x_np)\n    result_rounded = np.round(result, 4)\n    return float(result_rounded) if np.isscalar(x) else result_rounded.tolist()"}
{"task_id": 56, "completion_id": 8, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Computes the SoftPlus activation or its derivative for the given input x.\"\"\"\n\n    def stable_softplus(x):\n        return np.where(x > 0, np.log1p(np.exp(-x)) + x, np.log1p(np.exp(x)))\n\n    def stable_sigmoid(x):\n        return np.where(x >= 0, 1 / (1 + np.exp(-x)), np.exp(x) / (1 + np.exp(x)))\n    x_array = np.array(x, dtype=float)\n    if deriv:\n        result = stable_sigmoid(x_array)\n    else:\n        result = stable_softplus(x_array)\n    result = np.round(result, 4)\n    if np.isscalar(x):\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 56, "completion_id": 9, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Compute the SoftPlus activation or its derivative for the input x.\"\"\"\n\n    def softplus_stable(z):\n        return np.log1p(np.exp(np.clip(z, -50, 50)))\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-np.clip(z, -50, 50)))\n    if isinstance(x, (list, np.ndarray)):\n        x = np.array(x)\n        if deriv:\n            result = sigmoid(x)\n        else:\n            result = softplus_stable(x)\n    elif deriv:\n        result = sigmoid(x)\n    else:\n        result = softplus_stable(x)\n    if isinstance(result, np.ndarray):\n        result = result.round(4).tolist()\n    else:\n        result = round(result, 4)\n    return result"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n    ngram_counts = Counter((tuple(corpus[i:i + N]) for i in range(len(corpus) - N + 1)))\n    if N > 1:\n        n_1gram_counts = Counter((tuple(corpus[i:i + N - 1]) for i in range(len(corpus) - N + 2)))\n    else:\n        n_1gram_counts = Counter(corpus)\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        if N > 1:\n            prefix = tuple(sequence[i:i + N - 1])\n        else:\n            prefix = sequence[i]\n        count_ngram = ngram_counts[ngram]\n        count_prefix = n_1gram_counts[prefix]\n        if count_ngram == 0 or count_prefix == 0:\n            return float('-inf')\n        probability = count_ngram / count_prefix\n        total_log_prob += np.log(probability)\n    return round(total_log_prob, 4)"}
{"task_id": 58, "completion_id": 1, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be an integer greater than or equal to 1.')\n    ngram_counts = Counter((tuple(corpus[i:i + N]) for i in range(len(corpus) - N + 1)))\n    if N > 1:\n        n1gram_counts = Counter((tuple(corpus[i:i + N - 1]) for i in range(len(corpus) - N + 2)))\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        if N == 1:\n            count_ngram = ngram_counts[ngram]\n            total_count = len(corpus)\n        else:\n            count_ngram = ngram_counts[ngram]\n            count_n1gram = n1gram_counts[ngram[:-1]]\n        if count_ngram == 0 or (N > 1 and count_n1gram == 0):\n            return float('-inf')\n        if N == 1:\n            prob = count_ngram / total_count\n        else:\n            prob = count_ngram / count_n1gram\n        log_prob += np.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 58, "completion_id": 2, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n    ngram_counter = Counter(zip(*[corpus[i:] for i in range(N)]))\n    if N > 1:\n        prev_ngram_counter = Counter(zip(*[corpus[i:] for i in range(N - 1)]))\n    else:\n        prev_ngram_counter = Counter(corpus)\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        ngram_count = ngram_counter[ngram]\n        if N > 1:\n            prev_ngram = tuple(sequence[i:i + N - 1])\n            prev_ngram_count = prev_ngram_counter[prev_ngram]\n        else:\n            prev_ngram_count = len(corpus)\n        if ngram_count == 0 or prev_ngram_count == 0:\n            return float('-inf')\n        probability = ngram_count / prev_ngram_count\n        total_log_prob += np.log(probability)\n    return round(total_log_prob, 4)"}
{"task_id": 58, "completion_id": 3, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n    ngram_counts = Counter((tuple(corpus[i:i + N]) for i in range(len(corpus) - N + 1)))\n    if N > 1:\n        n_minus_1_gram_counts = Counter((tuple(corpus[i:i + N - 1]) for i in range(len(corpus) - N + 1)))\n    else:\n        n_minus_1_gram_counts = Counter(corpus)\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        ngram_count = ngram_counts[ngram]\n        if N <= 1:\n            denominator = len(corpus)\n        else:\n            prefix = tuple(sequence[i:i + N - 1])\n            n_minus_1_gram_count = n_minus_1_gram_counts[prefix]\n        if ngram_count == 0 or (N > 1 and n_minus_1_gram_count == 0):\n            return float('-inf')\n        if N > 1:\n            log_prob = np.log(ngram_count / n_minus_1_gram_count)\n        else:\n            log_prob = np.log(ngram_count / denominator)\n        total_log_prob += log_prob\n    return round(total_log_prob, 4)"}
{"task_id": 58, "completion_id": 4, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N <= 0:\n        raise ValueError('N must be at least 1')\n    ngram_counts = Counter(zip(*[corpus[i:] for i in range(N)]))\n    n_1_gram_counts = Counter(zip(*[corpus[i:] for i in range(N - 1)]))\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        n_1_gram = tuple(sequence[i:i + N - 1])\n        ngram_count = ngram_counts[ngram]\n        n_1_gram_count = n_1_gram_counts[n_1_gram]\n        if ngram_count == 0 or n_1_gram_count == 0:\n            return float('-inf')\n        prob = ngram_count / n_1_gram_count\n        log_prob += np.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 58, "completion_id": 5, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n    ngram_counts = Counter((tuple(corpus[i:i + N]) for i in range(len(corpus) - N + 1)))\n    if N > 1:\n        n_minus_1_gram_counts = Counter((tuple(corpus[i:i + N - 1]) for i in range(len(corpus) - N + 2)))\n    else:\n        n_minus_1_gram_counts = Counter(corpus)\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        if N == 1:\n            prefix_count = len(corpus)\n        else:\n            prefix = tuple(sequence[i:i + N - 1])\n            prefix_count = n_minus_1_gram_counts[prefix]\n        ngram_count = ngram_counts[ngram]\n        if ngram_count == 0 or prefix_count == 0:\n            return float('-inf')\n        prob = ngram_count / prefix_count\n        total_log_prob += np.log(prob)\n    return round(total_log_prob, 4)"}
{"task_id": 58, "completion_id": 6, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n    ngram_counter = Counter(zip(*[corpus[i:] for i in range(N)]))\n    if N > 1:\n        n_minus_1_gram_counter = Counter(zip(*[corpus[i:] for i in range(N - 1)]))\n    else:\n        n_minus_1_gram_counter = Counter(corpus)\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        n_minus_1_gram = tuple(sequence[i:i + N - 1]) if N > 1 else sequence[i]\n        ngram_count = ngram_counter[ngram]\n        n_minus_1_gram_count = n_minus_1_gram_counter[n_minus_1_gram]\n        if ngram_count == 0 or n_minus_1_gram_count == 0:\n            return float('-inf')\n        prob = ngram_count / n_minus_1_gram_count\n        total_log_prob += np.log(prob)\n    return round(total_log_prob, 4)"}
{"task_id": 58, "completion_id": 7, "solution": "import numpy as np\nfrom collections import Counter\nfrom typing import List\ndef unsmoothed_ngram_log_prob(corpus: List[str], sequence: List[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be an integer greater than or equal to 1.')\n    ngram_counts = Counter((tuple(corpus[i:i + N]) for i in range(len(corpus) - N + 1)))\n    if N > 1:\n        n1gram_counts = Counter((tuple(corpus[i:i + N - 1]) for i in range(len(corpus) - N + 2)))\n    else:\n        n1gram_counts = None\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        if N == 1:\n            count_ngram = ngram_counts[ngram]\n            total_count = len(corpus)\n        else:\n            prefix = tuple(sequence[i:i + N - 1])\n            count_ngram = ngram_counts[ngram]\n            count_n1gram = n1gram_counts[prefix]\n            total_count = count_n1gram\n        if count_ngram == 0 or total_count == 0:\n            return float('-inf')\n        log_prob += np.log(count_ngram / total_count)\n    return round(log_prob, 4)"}
{"task_id": 58, "completion_id": 8, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N <= 0:\n        raise ValueError('N must be greater than or equal to 1')\n    ngram_counts = Counter(zip(*[corpus[i:] for i in range(N)]))\n    if N > 1:\n        n_1_gram_counts = Counter(zip(*[corpus[i:] for i in range(N - 1)]))\n    else:\n        n_1_gram_counts = Counter(corpus)\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        if N == 1:\n            count_ngram = n_1_gram_counts[ngram[0]]\n        else:\n            count_ngram = ngram_counts[ngram]\n            prefix = ngram[:-1]\n            count_n_1_gram = n_1_gram_counts[prefix]\n        if count_ngram == 0 or count_n_1_gram == 0:\n            return float('-inf')\n        prob = count_ngram / count_n_1_gram\n        total_log_prob += np.log(prob)\n    return round(total_log_prob, 4)"}
{"task_id": 58, "completion_id": 9, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n    ngram_counts = Counter((tuple(corpus[i:i + N]) for i in range(len(corpus) - N + 1)))\n    if N > 1:\n        n1gram_counts = Counter((tuple(corpus[i:i + N - 1]) for i in range(len(corpus) - N + 2)))\n    else:\n        n1gram_counts = None\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        ngram_count = ngram_counts.get(ngram, 0)\n        if N == 1:\n            denominator = len(corpus)\n        else:\n            prefix = tuple(sequence[i:i + N - 1])\n            prefix_count = n1gram_counts.get(prefix, 0)\n            denominator = prefix_count\n        if ngram_count == 0 or denominator == 0:\n            return float('-inf')\n        log_prob = np.log(ngram_count / denominator)\n        total_log_prob += log_prob\n    return round(total_log_prob, 4)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    m = len(X)\n    design_matrix = np.ones((m, degree + 1))\n    for j in range(1, degree + 1):\n        design_matrix[:, j] = X ** j\n    w = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        w_old = w.copy()\n        y_pred = design_matrix @ w\n        residuals = y - y_pred + w[0]\n        w[0] = np.mean(residuals)\n        for j in range(1, degree + 1):\n            x_j = design_matrix[:, j]\n            rho = x_j.T @ (y - design_matrix @ w + w[j] * x_j)\n            if rho < -reg_factor:\n                w[j] = (rho + reg_factor) / (x_j.T @ x_j)\n            elif rho > reg_factor:\n                w[j] = (rho - reg_factor) / (x_j.T @ x_j)\n            else:\n                w[j] = 0\n        if np.max(np.abs(w - w_old)) < tol:\n            break\n    return [round(coef, 4) for coef in w]"}
{"task_id": 62, "completion_id": 1, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y)\n    m = len(X)\n    design_matrix = np.ones((m, degree + 1))\n    for j in range(1, degree + 1):\n        design_matrix[:, j] = X ** j\n    weights = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        weights_prev = weights.copy()\n        residuals = y - design_matrix @ weights\n        weights[0] = np.mean(residuals)\n        for j in range(1, degree + 1):\n            x_j = design_matrix[:, j]\n            rho = x_j.T @ (residuals + weights[j] * x_j)\n            weights[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / (x_j.T @ x_j)\n        max_change = np.max(np.abs(weights - weights_prev))\n        if max_change < tol:\n            break\n    return [round(w, 4) for w in weights]"}
{"task_id": 62, "completion_id": 2, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    m = len(X)\n    X_poly = np.vander(X, degree + 1, increasing=True)\n    w = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        w_prev = w.copy()\n        w[0] = np.mean(y - X_poly[:, 1:].dot(w[1:]))\n        for j in range(1, degree + 1):\n            rho = X_poly[:, j].T.dot(y - X_poly.dot(w) + w[j] * X_poly[:, j])\n            w[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / X_poly[:, j].T.dot(X_poly[:, j])\n        if np.max(np.abs(w - w_prev)) < tol:\n            break\n    return [round(coef, 4) for coef in w.tolist()]"}
{"task_id": 62, "completion_id": 3, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    m = len(X)\n    X_expanded = np.vander(X, degree + 1, increasing=True)\n    w = np.zeros(degree + 1)\n    w_prev = np.copy(w)\n    for _ in range(n_iterations):\n        y_pred = X_expanded @ w\n        w[0] = np.mean(y - y_pred + w[0])\n        for j in range(1, degree + 1):\n            rho = X_expanded[:, j].T @ (y - X_expanded @ w + w[j] * X_expanded[:, j])\n            threshold = reg_factor\n            w[j] = np.sign(rho) * max(abs(rho) - threshold, 0) / (X_expanded[:, j].T @ X_expanded[:, j])\n        if np.all(np.abs(w - w_prev) < tol):\n            break\n        w_prev = np.copy(w)\n    return list(np.round(w, 4))"}
{"task_id": 62, "completion_id": 4, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y)\n    m = len(X)\n    design_matrix = np.ones((m, degree + 1))\n    for j in range(1, degree + 1):\n        design_matrix[:, j] = X ** j\n    weights = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        old_weights = np.copy(weights)\n        weights[0] = np.mean(y - design_matrix[:, 1:] @ weights[1:])\n        for j in range(1, degree + 1):\n            x_j = design_matrix[:, j]\n            X_rest_w_rest = design_matrix[:, :j] @ weights[:j] + design_matrix[:, j + 1:] @ weights[j + 1:]\n            rho = np.dot(x_j, y - X_rest_w_rest)\n            soft_threshold = np.sign(rho) * max(np.abs(rho) - reg_factor, 0)\n            weights[j] = soft_threshold / np.dot(x_j, x_j)\n        if np.max(np.abs(weights - old_weights)) < tol:\n            break\n    return [round(w, 4) for w in weights.tolist()]"}
{"task_id": 62, "completion_id": 5, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    m = len(y)\n    design_matrix = np.vander(X, degree + 1, increasing=True)\n    w = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        w_prev = np.copy(w)\n        w[0] = np.mean(y - design_matrix[:, 1:].dot(w[1:]))\n        for j in range(1, degree + 1):\n            X_j = design_matrix[:, j]\n            rho = X_j.T.dot(y - design_matrix.dot(w) + w[j] * X_j)\n            w[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / X_j.T.dot(X_j)\n        if np.max(np.abs(w - w_prev)) < tol:\n            break\n    return np.round(w, 4).tolist()"}
{"task_id": 62, "completion_id": 6, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y)\n    m = len(y)\n    design_matrix = np.vander(X, degree + 1, increasing=True)\n    weights = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        old_weights = weights.copy()\n        weights[0] = np.mean(y - design_matrix[:, 1:].dot(weights[1:]))\n        for j in range(1, degree + 1):\n            X_j = design_matrix[:, j]\n            residuals = y - design_matrix.dot(weights) + weights[j] * X_j\n            rho = X_j.T.dot(residuals)\n            if rho < -reg_factor:\n                weights[j] = (rho + reg_factor) / X_j.T.dot(X_j)\n            elif rho > reg_factor:\n                weights[j] = (rho - reg_factor) / X_j.T.dot(X_j)\n            else:\n                weights[j] = 0\n        if np.max(np.abs(weights - old_weights)) < tol:\n            break\n    return [round(w, 4) for w in weights]"}
{"task_id": 62, "completion_id": 7, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    m = len(X)\n    X_poly = np.vander(X, degree + 1, increasing=True)\n    w = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        w_prev = w.copy()\n        y_pred = X_poly @ w\n        w[0] = np.mean(y - y_pred[1:] @ w[1:])\n        for j in range(1, degree + 1):\n            residual = y - (X_poly @ w - w[j] * X_poly[:, j])\n            rho = X_poly[:, j].T @ residual\n            w[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / (X_poly[:, j].T @ X_poly[:, j])\n        if np.max(np.abs(w - w_prev)) < tol:\n            break\n    return [round(coef, 4) for coef in w]"}
{"task_id": 62, "completion_id": 8, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y)\n    m = len(y)\n    design_matrix = np.vander(X, degree + 1, increasing=True)\n    weights = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        prev_weights = np.copy(weights)\n        weights[0] = np.mean(y - np.dot(design_matrix[:, 1:], weights[1:]))\n        for j in range(1, degree + 1):\n            X_j = design_matrix[:, j]\n            residual = y - np.dot(design_matrix, weights) + weights[j] * X_j\n            rho = np.dot(X_j, residual)\n            soft_thresholded = np.sign(rho) * max(abs(rho) - reg_factor, 0)\n            weights[j] = soft_thresholded / np.dot(X_j, X_j)\n        if np.max(np.abs(weights - prev_weights)) < tol:\n            break\n    return np.round(weights, 4).tolist()"}
{"task_id": 62, "completion_id": 9, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y)\n    m = len(X)\n    X_matrix = np.vander(X, degree + 1, increasing=True)\n    w = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        w_prev = w.copy()\n        X_matrix_no_intercept = X_matrix[:, 1:]\n        y_pred = X_matrix @ w\n        w[0] = np.mean(y - X_matrix_no_intercept @ w[1:])\n        for j in range(1, degree + 1):\n            X_j = X_matrix[:, j]\n            rho = X_j.T @ (y - X_matrix @ w + w[j] * X_j)\n            soft_threshold = np.sign(rho) * max(abs(rho) - reg_factor, 0)\n            w[j] = soft_threshold / (X_j.T @ X_j)\n        max_change = np.max(np.abs(w - w_prev))\n        if max_change < tol:\n            break\n    return [round(coef, 4) for coef in w.tolist()]"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model.\n    \n    Parameters:\n    - A: Transition probability matrix of shape (N, N).\n    - B: Emission probability matrix of shape (N, M).\n    - obs: List of observation indices of length T.\n    - t: Integer time index for which to calculate \u03b2_t (0 \u2264 t < T).\n    \n    Returns:\n    - A list of N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    obs = np.array(obs)\n    N = A.shape[0]\n    T = len(obs)\n    beta = np.ones(N)\n    for i in range(T - 1, t, -1):\n        beta_next = beta\n        beta = np.sum(A * B[:, obs[i]] * beta_next, axis=1)\n    return [round(prob, 4) for prob in beta]"}
{"task_id": 63, "completion_id": 1, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector beta_t for a given time index t in a Hidden Markov Model.\n\n    Parameters:\n    A (list[list[float]]): Transition-probability matrix of shape (N, N).\n    B (list[list[float]]): Emission-probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices (length T).\n    t (int): Integer time index (0 \u2264 t < T).\n\n    Returns:\n    list[float]: A list containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1] = np.ones(N)\n    for k in range(T - 2, t - 1, -1):\n        for i in range(N):\n            beta[k, i] = np.sum(A[i] * B[:, obs[k + 1]] * beta[k + 1])\n    return [round(beta_t, 4) for beta_t in beta[t]]"}
{"task_id": 63, "completion_id": 2, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model.\n\n    Parameters:\n    - A (list[list[float]]): Transition-probability matrix of shape (N, N).\n    - B (list[list[float]]): Emission-probability matrix of shape (N, M).\n    - obs (list[int]): List of observation indices (length T).\n    - t (int): Integer time index (0 \u2264 t < T).\n\n    Returns:\n    - list[float]: List containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    obs = np.array(obs)\n    N = A.shape[0]\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for time in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[time, i] = np.sum(A[i, :] * B[:, obs[time + 1]] * beta[time + 1, :])\n    return beta[t, :].round(4).tolist()"}
{"task_id": 63, "completion_id": 3, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model.\n\n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices of length T.\n    t (int): Time index for which to calculate the backward probability vector (0 \u2264 t < T).\n\n    Returns:\n    list[float]: List containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for time_index in range(T - 2, t - 1, -1):\n        for i in range(N):\n            beta[time_index, i] = sum((A[i, j] * B[j, obs[time_index + 1]] * beta[time_index + 1, j] for j in range(N)))\n    return [round(beta[t, i], 4) for i in range(N)]"}
{"task_id": 63, "completion_id": 4, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector beta_t for a given time index t in a Hidden Markov Model.\n\n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices of length T.\n    t (int): Time index for which to calculate the backward probability vector (0 \u2264 t < T).\n\n    Returns:\n    list[float]: List of N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)\n    T = len(obs)\n    beta = np.ones(N)\n    for k in range(T - 1, t, -1):\n        beta_t = np.zeros(N)\n        for i in range(N):\n            for j in range(N):\n                beta_t[i] += A[i][j] * B[j][obs[k]] * beta[j]\n        beta = beta_t\n    return [round(prob, 4) for prob in beta]"}
{"task_id": 63, "completion_id": 5, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector beta_t for a given time index t in a Hidden Markov Model.\n\n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices of length T.\n    t (int): Time index for which to calculate the backward probability vector (0 \u2264 t < T).\n\n    Returns:\n    list[float]: List of N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    N = A.shape[0]\n    T = len(obs)\n    beta = np.ones(N)\n    for time in range(T - 2, t - 1, -1):\n        new_beta = np.zeros(N)\n        for i in range(N):\n            for j in range(N):\n                new_beta[i] += A[i, j] * B[j, obs[time + 1]] * beta[j]\n        beta = new_beta\n    return [round(b, 4) for b in beta]"}
{"task_id": 63, "completion_id": 6, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Computes the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model.\n\n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices of length T.\n    t (int): Time index for which to compute the backward probability vector (0 \u2264 t < T).\n\n    Returns:\n    list[float]: List containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)\n    T = len(obs)\n    beta = np.ones(N)\n    for i in range(T - 2, t - 1, -1):\n        beta_next = beta\n        beta = np.zeros(N)\n        for j in range(N):\n            beta[j] = np.sum(A[j, :] * B[:, obs[i + 1]] * beta_next)\n    return [round(b, 4) for b in beta]"}
{"task_id": 63, "completion_id": 7, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector beta_t for a given time index t in a Hidden Markov Model.\n\n    Parameters:\n    A (list[list[float]]): Transition-probability matrix of shape (N, N).\n    B (list[list[float]]): Emission-probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices of length T.\n    t (int): Integer time index (0 \u2264 t < T).\n\n    Returns:\n    list[float]: List of N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    obs = np.array(obs)\n    N = A.shape[0]\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1] = np.ones(N)\n    for time in range(T - 2, t - 1, -1):\n        for i in range(N):\n            beta[time, i] = np.sum(A[i, :] * B[:, obs[time + 1]] * beta[time + 1, :])\n    return list(np.round(beta[t], 4))"}
{"task_id": 63, "completion_id": 8, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector beta_t for a given time index t in a Hidden Markov Model.\n\n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices (length T).\n    t (int): Integer time index (0 \u2264 t < T).\n\n    Returns:\n    list[float]: List containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    obs = np.array(obs)\n    N = A.shape[0]\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for i in range(T - 2, t - 1, -1):\n        beta[i, :] = np.sum(A * B[:, obs[i + 1]] * beta[i + 1, :], axis=1)\n    return beta[t, :].round(4).tolist()"}
{"task_id": 63, "completion_id": 9, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model.\n    \n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices of length T.\n    t (int): Time index for which to compute the backward probability vector (0 \u2264 t < T).\n    \n    Returns:\n    list[float]: List of N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)\n    T = len(obs)\n    beta = np.ones(N)\n    for i in range(T - 2, t - 1, -1):\n        beta_next = beta\n        beta = np.zeros(N)\n        for j in range(N):\n            beta[j] = np.sum(A[j, :] * B[:, obs[i + 1]] * beta_next)\n    return [round(prob, 4) for prob in beta]"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(A)\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t + 1]] * beta[t + 1, :])\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n    return round(prob, 6)"}
{"task_id": 65, "completion_id": 1, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(A)\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t + 1]] * beta[t + 1, :])\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n    return round(prob, 6)"}
{"task_id": 65, "completion_id": 2, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    obs = np.array(obs)\n    N = A.shape[0]\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t + 1]] * beta[t + 1, :])\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n    return round(prob, 6)"}
{"task_id": 65, "completion_id": 3, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    obs = np.array(obs)\n    N = len(pi)\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t + 1]] * beta[t + 1, :])\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n    return round(prob, 6)"}
{"task_id": 65, "completion_id": 4, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    if A.size == 0 or B.size == 0 or pi.size == 0 or (not obs):\n        return 0.0\n    N = A.shape[0]\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1] = np.ones(N)\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t][i] = np.sum(A[i] * B[:, obs[t + 1]] * beta[t + 1])\n    sequence_probability = np.sum(pi * B[:, obs[0]] * beta[0])\n    return round(sequence_probability, 6)"}
{"task_id": 65, "completion_id": 5, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(A)\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            for j in range(N):\n                beta[t, i] += A[i][j] * B[j][obs[t + 1]] * beta[t + 1, j]\n    prob = 0.0\n    for i in range(N):\n        prob += pi[i] * B[i][obs[0]] * beta[0, i]\n    return round(prob, 6)"}
{"task_id": 65, "completion_id": 6, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    obs = np.array(obs)\n    if A.size == 0 or B.size == 0 or pi.size == 0 or (obs.size == 0):\n        return 0.0\n    N = A.shape[0]\n    T = obs.size\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t + 1]] * beta[t + 1, :])\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n    return round(prob, 6)"}
{"task_id": 65, "completion_id": 7, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    N = len(A)\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t + 1]] * beta[t + 1, :])\n    sequence_prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n    return round(sequence_prob, 6)"}
{"task_id": 65, "completion_id": 8, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    obs = np.array(obs)\n    N = A.shape[0]\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[-1, :] = 1\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t + 1]] * beta[t + 1, :])\n    sequence_prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n    return round(sequence_prob, 6)"}
{"task_id": 65, "completion_id": 9, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    obs = np.array(obs)\n    if A.size == 0 or B.size == 0 or pi.size == 0 or (obs.size == 0):\n        return 0.0\n    N = len(pi)\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t + 1]] * beta[t + 1, :])\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n    return round(prob, 6)"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n    n = len(S)\n    m = B.shape[1]\n    if S.shape != (n,) or A.shape != (n, n) or B.shape != (n, m):\n        return -1\n    if not (0 <= observations.min() and observations.max() < m):\n        return -1\n    if len(observations) == 0:\n        return -1\n    T = len(observations)\n    alpha = np.zeros((n, T))\n    alpha[:, 0] = S * B[:, observations[0]]\n    for t in range(1, T):\n        for i in range(n):\n            alpha[i, t] = np.sum(alpha[:, t - 1] * A[:, i]) * B[i, observations[t]]\n    likelihood = np.sum(alpha[:, T - 1])\n    return round(likelihood, 4)"}
{"task_id": 69, "completion_id": 1, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    if len(A) != n or any((len(row) != n for row in A)):\n        return -1\n    if not A or not B or (not S):\n        return -1\n    m = len(B[0])\n    if any((len(row) != m for row in B)):\n        return -1\n    T = len(observations)\n    if T == 0:\n        return -1\n    if any((obs < 0 or obs >= m for obs in observations)):\n        return -1\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    alpha = np.zeros((T, n))\n    alpha[0] = S * B[:, observations[0]]\n    for t in range(1, T):\n        alpha[t] = np.dot(alpha[t - 1], A) * B[:, observations[t]]\n    likelihood = np.sum(alpha[T - 1])\n    return round(likelihood, 4)"}
{"task_id": 69, "completion_id": 2, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    if any((len(row) != n for row in A)) or not A:\n        return -1\n    m = len(B[0])\n    if any((len(row) != m for row in B)) or not B:\n        return -1\n    if not observations:\n        return -1\n    if any((obs < 0 or obs >= m for obs in observations)):\n        return -1\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    T = len(observations)\n    alpha = np.zeros((n, T))\n    alpha[:, 0] = S * B[:, observations[0]]\n    for t in range(1, T):\n        for i in range(n):\n            alpha[i, t] = B[i, observations[t]] * np.sum(alpha[:, t - 1] * A[:, i])\n    likelihood = np.sum(alpha[:, T - 1])\n    return round(likelihood, 4)"}
{"task_id": 69, "completion_id": 3, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n    n = len(S)\n    if A.shape != (n, n):\n        return -1\n    m = B.shape[1]\n    if B.shape != (n, m):\n        return -1\n    if len(observations) == 0:\n        return -1\n    if not all((0 <= obs < m for obs in observations)):\n        return -1\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    alpha[0] = S * B[:, observations[0]]\n    for t in range(1, T):\n        alpha[t] = alpha[t - 1] @ A * B[:, observations[t]]\n    likelihood = np.sum(alpha[-1])\n    return round(likelihood, 4)"}
{"task_id": 69, "completion_id": 4, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    if not (isinstance(A, list) and all((len(row) == n for row in A))):\n        return -1\n    if not (isinstance(B, list) and all((len(row) == len(B[0]) for row in B))):\n        return -1\n    m = len(B[0])\n    if len(observations) == 0:\n        return -1\n    if not all((0 <= obs < m for obs in observations)):\n        return -1\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n    T = len(observations)\n    F = np.zeros((T, n))\n    F[0] = S * B[:, observations[0]]\n    for t in range(1, T):\n        F[t] = np.dot(F[t - 1], A) * B[:, observations[t]]\n    log_likelihood = np.sum(np.log(np.sum(F, axis=1)))\n    probability = np.sum(F[-1])\n    return round(probability, 4)"}
{"task_id": 69, "completion_id": 5, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n    n = len(S)\n    m = B.shape[1]\n    if A.shape != (n, n) or B.shape != (n, m) or len(observations) == 0:\n        return -1\n    if not np.all(observations >= 0) or not np.all(observations < m):\n        return -1\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    alpha[0] = S * B[:, observations[0]]\n    for t in range(1, T):\n        alpha[t] = np.dot(alpha[t - 1], A) * B[:, observations[t]]\n    probability = np.sum(alpha[-1])\n    return round(probability, 4)"}
{"task_id": 69, "completion_id": 6, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    n = len(S)\n    m = B.shape[1]\n    if A.shape != (n, n) or B.shape != (n, m) or (not all((0 <= obs < m for obs in observations))):\n        return -1\n    if not np.isclose(np.sum(S), 1) or not np.allclose(np.sum(A, axis=1), 1) or (not np.allclose(np.sum(B, axis=1), 1)):\n        return -1\n    if not observations:\n        return -1\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    alpha[0] = S * B[:, observations[0]]\n    for t in range(1, T):\n        alpha[t] = alpha[t - 1] @ A * B[:, observations[t]]\n    likelihood = np.sum(alpha[-1])\n    return round(likelihood, 4)"}
{"task_id": 69, "completion_id": 7, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    n = len(S)\n    if A.shape != (n, n) or B.shape[0] != n:\n        return -1\n    m = B.shape[1]\n    if not observations or any((obs < 0 or obs >= m for obs in observations)):\n        return -1\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    alpha[0, :] = S * B[:, observations[0]]\n    for t in range(1, T):\n        for j in range(n):\n            alpha[t, j] = np.sum(alpha[t - 1, :] * A[:, j]) * B[j, observations[t]]\n    probability = np.sum(alpha[T - 1, :])\n    return round(probability, 4)"}
{"task_id": 69, "completion_id": 8, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    if not A or len(A) != n or any((len(row) != n for row in A)):\n        return -1\n    if not B or len(B) != n or (not all((isinstance(row, list) for row in B))):\n        return -1\n    m = len(B[0])\n    if any((len(row) != m for row in B)):\n        return -1\n    if not observations:\n        return -1\n    if any((obs < 0 or obs >= m for obs in observations)):\n        return -1\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    alpha[0] = S * B[:, observations[0]]\n    for t in range(1, T):\n        alpha[t] = alpha[t - 1] @ A * B[:, observations[t]]\n    likelihood = np.sum(alpha[-1])\n    return round(likelihood, 4)\nS = [0.6, 0.4]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.5], [0.7, 0.3]]\nobservations = [0, 1, 0]"}
{"task_id": 69, "completion_id": 9, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    n = len(S)\n    if not A or len(A) != n or any((len(row) != n for row in A)):\n        return -1\n    m = len(B[0])\n    if not all((len(row) == m for row in B)):\n        return -1\n    if not observations or not all((0 <= obs < m for obs in observations)):\n        return -1\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    alpha[0] = S * B[:, observations[0]]\n    for t in range(1, T):\n        alpha[t] = np.dot(alpha[t - 1], A) * B[:, observations[t]]\n    probability = np.sum(alpha[T - 1])\n    return round(probability, 4)"}
{"task_id": 70, "completion_id": 0, "solution": "from collections import Counter, defaultdict\nclass FPNode:\n\n    def __init__(self, item, count, parent):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = defaultdict(FPNode)\n        self.link = None\nclass FPTree:\n\n    def __init__(self):\n        self.root = FPNode(None, 0, None)\n        self.header_table = defaultdict(lambda : None)\n\n    def insert_transaction(self, transaction, count):\n        current_node = self.root\n        for item in transaction:\n            if item in current_node.children:\n                current_node.children[item].count += count\n            else:\n                new_node = FPNode(item, count, current_node)\n                current_node.children[item] = new_node\n                if self.header_table[item] is None:\n                    self.header_table[item] = new_node\n                else:\n                    last_node = self.header_table[item]\n                    while last_node.link is not None:\n                        last_node = last_node.link\n                    last_node.link = new_node\n            current_node = current_node.children[item]\n\n    def create_conditional_pattern_base(self, base_item):\n        base_pat = defaultdict(int)\n        current_node = self.header_table[base_item]\n        while current_node is not None:\n            local_transaction = []\n            local_count = current_node.count\n            temp = current_node.parent\n            while temp.item is not None:\n                local_transaction.append(temp.item)\n                temp = temp.parent\n            for item in local_transaction:\n                base_pat[item] += local_count\n            current_node = current_node.link\n        return base_pat\ndef build_tree(transactions, min_support):\n    tree = FPTree()\n    item_counts = Counter()\n    for transaction in transactions:\n        item_counts += Counter(transaction)\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    sorted_frequent_items = sorted(frequent_items, key=frequent_items.get)\n    for transaction in transactions:\n        transaction = [item for item in transaction if item in frequent_items]\n        transaction.sort(key=lambda x: sorted_frequent_items.index(x))\n        tree.insert_transaction(transaction, 1)\n    return (tree, sorted_frequent_items)\ndef mine_frequent_itemsets(tree, min_support, frequent_items, prefix=[]):\n    frequent_itemsets = []\n    if prefix:\n        frequent_itemsets.append(sorted(prefix))\n    for item in frequent_items:\n        conditional_pat_base = tree.create_conditional_pattern_base(item)\n        cond_pat_base = [list(items) for (items, count) in conditional_pat_base.items() if count >= min_support]\n        (cond_tree, cond_items) = build_tree(cond_pat_base, min_support)\n        if cond_items:\n            frequent_itemsets.extend(mine_frequent_itemsets(cond_tree, min_support, cond_items, prefix + [item]))\n    return frequent_itemsets\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions or min_support <= 0:\n        return []\n    (tree, frequent_items) = build_tree(transactions, min_support)\n    frequent_itemsets = mine_frequent_itemsets(tree, min_support, frequent_items)\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 70, "completion_id": 1, "solution": "from collections import Counter, defaultdict\nclass FPNode:\n\n    def __init__(self, item, support, parent=None):\n        self.item = item\n        self.support = support\n        self.parent = parent\n        self.children = {}\n        self.link = None\nclass FPTree:\n\n    def __init__(self):\n        self.root = FPNode(None, 0)\n        self.header_table = defaultdict(lambda : None)\n\n    def insert_transaction(self, transaction, support):\n        current_node = self.root\n        for item in transaction:\n            if item not in current_node.children:\n                new_node = FPNode(item, support, current_node)\n                current_node.children[item] = new_node\n                self.update_links(item, new_node)\n                current_node = new_node\n            else:\n                current_node.children[item].support += support\n                current_node = current_node.children[item]\n\n    def update_links(self, item, node):\n        if self.header_table[item] is None:\n            self.header_table[item] = node\n        else:\n            current_node = self.header_table[item]\n            while current_node.link is not None:\n                current_node = current_node.link\n            current_node.link = node\n\n    def build_prefix_path(self, node):\n        prefix_path = []\n        while node.parent is not None:\n            prefix_path.append(node.item)\n            node = node.parent\n        return prefix_path[::-1]\ndef find_frequent_items(transactions, min_support):\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    return {item: count for (item, count) in item_counts.items() if count >= min_support}\ndef construct_fp_tree(transactions, min_support, frequent_items):\n    fp_tree = FPTree()\n    for transaction in transactions:\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        sorted_transaction = sorted(filtered_transaction, key=lambda x: frequent_items[x], reverse=True)\n        fp_tree.insert_transaction(sorted_transaction, 1)\n    return fp_tree\ndef conditional_tree(prefix, head, min_support):\n    conditional_prefixes = []\n    current_node = head\n    while current_node is not None:\n        prefix_path = current_node.build_prefix_path()\n        if prefix_path:\n            conditional_prefixes.append((prefix_path, current_node.support))\n        current_node = current_node.link\n    conditional_fp_tree = FPTree()\n    for (prefix_path, support) in conditional_prefixes:\n        conditional_fp_tree.insert_transaction(prefix + prefix_path, support)\n    return conditional_fp_tree\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    frequent_items = find_frequent_items(transactions, min_support)\n    if not frequent_items:\n        return []\n    frequent_items = dict(sorted(frequent_items.items(), key=lambda x: (x[1], x[0]), reverse=True))\n    fp_tree = construct_fp_tree(transactions, min_support, frequent_items)\n    frequent_itemsets = []\n\n    def mine_tree(tree, frequent_items, prefix):\n        for (item, head) in tree.header_table.items():\n            support = head.support\n            frequent_itemset = prefix + [item]\n            frequent_itemset.sort()\n            frequent_itemsets.append(frequent_itemset)\n            conditional_fp_tree = conditional_tree(frequent_itemset, head, min_support)\n            if conditional_fp_tree.header_table:\n                mine_tree(conditional_fp_tree, frequent_items, frequent_itemset)\n    mine_tree(fp_tree, frequent_items, [])\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 70, "completion_id": 2, "solution": "from collections import Counter, defaultdict, namedtuple\nclass Node(namedtuple('Node', ['name', 'count', 'parent', 'children'])):\n\n    def descendants(self):\n        graph = defaultdict(list)\n        seen = set()\n\n        def visit(node):\n            if node not in seen:\n                seen.add(node)\n                if node.parent:\n                    graph[node.parent.name].append(node.name)\n                for child in node.children.values():\n                    visit(child)\n        visit(self)\n        return graph\n\n    def paths(self, node, accumulator):\n        if not node.parent:\n            return [tuple(reversed(accumulator))]\n        paths = self.paths(node.parent, accumulator + [node.parent.name])\n        return paths\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions:\n        return []\n    support = Counter((item for transaction in transactions for item in transaction))\n    support = {item: count for (item, count) in support.items() if count >= min_support}\n    if not support:\n        return []\n    items = sorted(support, key=lambda x: (support[x], x), reverse=True)\n    root = Node(name=None, count=0, parent=None, children=defaultdict(Node))\n    for transaction in transactions:\n        counted_transaction = [item for item in transaction if item in support]\n        counted_transaction.sort(key=lambda x: (support[x], x), reverse=True)\n        node = root\n        for item in counted_transaction:\n            if item in node.children:\n                node.children[item] = Node(name=item, count=node.children[item].count + 1, parent=node, children=node.children[item].children)\n            else:\n                node.children[item] = Node(name=item, count=1, parent=node, children=defaultdict(Node))\n            node = node.children[item]\n\n    def mine_tree(path, prefix, conditions, frequent_itemsets):\n        if prefix:\n            frequent_itemsets.append(list(prefix))\n        for (node_name, node) in conditions.items():\n            transaction = [node.name] * node.count\n            prefix_path = [node.name] + list(prefix)\n            conditions_base = {node.name: node}\n            conditions_extension = {}\n            for condition_path in node.paths(node, []):\n                subnode = conditions_base[condition_path[0]]\n                for subnode_name in condition_path[1:]:\n                    if subnode_name in subnode.children:\n                        subnode.children[subnode_name] = Node(name=subnode_name, count=subnode.children[subnode_name].count + 1, parent=subnode, children=subnode.children[subnode_name].children)\n                    else:\n                        subnode.children[subnode_name] = Node(name=subnode_name, count=1, parent=subnode, children=defaultdict(Node))\n                    subnode = subnode.children[subnode_name]\n                transactions.append(transaction)\n                conditions_extension.update({name: subnode for (name, subnode) in subnode.children.items()})\n            mine_tree(prefix_path, prefix, conditions_extension, frequent_itemsets)\n    conditions = {item: root.children[item] for item in items}\n    frequent_itemsets = []\n    mine_tree([], [], conditions, frequent_itemsets)\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 70, "completion_id": 3, "solution": "from collections import Counter, defaultdict, namedtuple\nfrom typing import List, Dict, Tuple\nclass Node:\n\n    def __init__(self, item, count, parent=None):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = defaultdict(Node)\n        self.link = None\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n\n    def construct_tree(transactions, header):\n        root = Node(None, None)\n        for transaction in transactions:\n            transaction = [item for item in transaction if item in header]\n            sorted_transaction = sorted(transaction, key=lambda x: (header[x], x), reverse=True)\n            if sorted_transaction:\n                insert_tree(sorted_transaction, root, header)\n        return root\n\n    def insert_tree(transaction, node, header):\n        first_item = transaction.pop(0)\n        if first_item in node.children:\n            node.children[first_item].count += 1\n        else:\n            new_node = Node(first_item, 1, node)\n            node.children[first_item] = new_node\n            if header[first_item][-1] is not None:\n                header[first_item][-1].link = new_node\n            header[first_item][-1] = new_node\n        if transaction:\n            insert_tree(transaction, node.children[first_item], header)\n\n    def fp_growth_recursion(node, path, header, min_support, frequent_itemsets):\n        if node.item is not None:\n            path = [node.item] + path\n        for (item, count) in node.children.items():\n            conditional_pattern_base = []\n            conditional_items = backtracking(items_base[item], conditional_pattern_base)\n            conditional_tree_header = build_header(conditional_items, min_support)\n            if conditional_tree_header:\n                conditional_tree_root = construct_tree(conditional_items, conditional_tree_header)\n                fp_growth_recursion(conditional_tree_root, path, conditional_tree_header, min_support, frequent_itemsets)\n        if path:\n            frequent_itemsets.append(path)\n\n    def backtracking(items_base, conditional_pattern_base):\n        for path_count in items_base:\n            (path, count) = path_count\n            if path:\n                conditional_pattern_base.append(path + [path[-1]] * (count - 1))\n        return conditional_pattern_base\n\n    def build_header(items, min_support):\n        header = defaultdict(lambda : [0, None])\n        for transaction in items:\n            for item in transaction:\n                header[item][0] += 1\n        header = {k: v for (k, v) in header.items() if v[0] >= min_support}\n        return dict(sorted(header.items(), key=lambda x: (x[1][0], x[0]), reverse=True))\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    if not frequent_items:\n        return []\n    sorted_frequent_items = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n    header = defaultdict(lambda : [0, None])\n    for item in sorted_frequent_items:\n        header[item] = [frequent_items[item], None]\n    root = construct_tree(transactions, header)\n    items_base = {}\n    for (item, node) in header.items():\n        support_count = []\n        current_node = node[1]\n        while current_node is not None:\n            prefix_path = []\n            parent = current_node.parent\n            while parent is not None and parent.item is not None:\n                prefix_path.append(parent.item)\n                parent = parent.parent\n            if prefix_path:\n                support_count.append((prefix_path, current_node.count))\n            current_node = current_node.link\n        items_base[item] = support_count\n    frequent_itemsets = []\n    for (item, node) in header.items():\n        frequent_itemsets.append([item])\n        conditional_pattern_base = []\n        conditional_items = backtracking(items_base[item], conditional_pattern_base)\n        conditional_tree_header = build_header(conditional_items, min_support)\n        if conditional_tree_header:\n            conditional_tree_root = construct_tree(conditional_items, conditional_tree_header)\n            fp_growth_recursion(conditional_tree_root, [item], conditional_tree_header, min_support, frequent_itemsets)\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\ntransactions = [['milk', 'bread', 'butter'], ['bread', 'butter'], ['bread', 'milk', 'butter', 'cheese'], ['milk', 'bread'], ['bread', 'butter', 'cheese']]\nmin_support = 2"}
{"task_id": 70, "completion_id": 4, "solution": "from collections import Counter, defaultdict\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    if not frequent_items:\n        return []\n    sorted_items = sorted(frequent_items, key=frequent_items.get, reverse=True)\n\n    class FPNode:\n\n        def __init__(self, item, support, parent=None):\n            self.item = item\n            self.support = support\n            self.parent = parent\n            self.children = defaultdict(FPNode)\n            self.link = None\n\n    def insert_transaction(transaction, tree_root, header_table):\n        for item in transaction:\n            if item in tree_root.children:\n                tree_root.children[item].support += 1\n            else:\n                tree_root.children[item] = FPNode(item, 1, tree_root)\n                if header_table[item][1] is None:\n                    header_table[item][1] = tree_root.children[item]\n                else:\n                    current_node = header_table[item][1]\n                    while current_node.link is not None:\n                        current_node = current_node.link\n                    current_node.link = tree_root.children[item]\n            tree_root = tree_root.children[item]\n    tree_root = FPNode(None, 0, None)\n    header_table = {item: [support, None] for (item, support) in frequent_items.items()}\n    for transaction in transactions:\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        sorted_transaction = sorted(filtered_transaction, key=lambda x: sorted_items.index(x))\n        insert_transaction(sorted_transaction, tree_root, header_table)\n\n    def mine_fp_tree(header_table, frequent_itemsets, prefix):\n        for (item, header_entry) in sorted(header_table.items(), key=lambda x: x[1][0]):\n            support = header_entry[0]\n            new_prefix = prefix + [item]\n            frequent_itemsets.append(new_prefix)\n            conditional_patterns = []\n            conditional_pattern_base = header_entry[1]\n            while conditional_pattern_base is not None:\n                node = conditional_pattern_base\n                pattern = []\n                while node.parent is not None:\n                    pattern.append(node.item)\n                    node = node.parent\n                if pattern:\n                    conditional_patterns.append((pattern, conditional_pattern_base.support))\n                conditional_pattern_base = conditional_pattern_base.link\n            if conditional_patterns:\n                conditional_root = FPNode(None, 0, None)\n                conditional_header_table = defaultdict(lambda : [0, None])\n                for (pattern, support) in conditional_patterns:\n                    count = conditional_header_table[pattern[-1]][0] + support\n                    conditional_header_table[pattern[-1]][0] = count\n                    insert_transaction(pattern, conditional_root, conditional_header_table)\n                if any((node.children for node in conditional_root.children.values())):\n                    mine_fp_tree(conditional_header_table, frequent_itemsets, new_prefix)\n    frequent_itemsets = []\n    mine_fp_tree(header_table, frequent_itemsets, [])\n    frequent_itemsets = [sorted(itemset) for itemset in frequent_itemsets]\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\ntransactions = [['milk', 'bread', 'butter'], ['milk', 'bread'], ['bread', 'butter'], ['bread', 'butter', 'beer'], ['bread', 'beer']]\nmin_support = 2"}
{"task_id": 70, "completion_id": 5, "solution": "from collections import Counter, defaultdict, namedtuple\nclass FPTreeNode:\n\n    def __init__(self, value, count, parent):\n        self.value = value\n        self.count = count\n        self.parent = parent\n        self.link = None\n        self.children = defaultdict(FPTreeNode)\n\n    def add_child(self, value):\n        if value not in self.children:\n            self.children[value] = FPTreeNode(value, 0, self)\n        self.children[value].count += 1\n        return self.children[value]\ndef build_fp_tree(transactions, min_support):\n    frequency = defaultdict(int)\n    for transaction in transactions:\n        for item in transaction:\n            frequency[item] += 1\n    frequent = {item: support for (item, support) in frequency.items() if support >= min_support}\n    if not frequent:\n        return (None, None)\n    sorted_items = sorted(frequent, key=frequent.get, reverse=True)\n    header_table = defaultdict(lambda : None)\n    for item in sorted_items:\n        header_table[item] = None\n    root = FPTreeNode(None, 1, None)\n    for transaction in transactions:\n        sorted_transaction = [item for item in transaction if item in frequent]\n        sorted_transaction.sort(key=lambda x: sorted_items.index(x), reverse=True)\n        current_node = root\n        for item in sorted_transaction:\n            current_node = current_node.add_child(item)\n            if header_table[item] is None:\n                header_table[item] = current_node\n            else:\n                current = header_table[item]\n                while current.link is not None:\n                    current = current.link\n                current.link = current_node\n    return (root, header_table)\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    (root, header_table) = build_fp_tree(transactions, min_support)\n    if root is None or header_table is None:\n        return []\n    patterns = []\n    for node in header_table:\n        current_pattern = [node]\n        patterns.append((current_pattern, header_table[node].count))\n        conditional_prefix_path = []\n        conditional_patterns_base = []\n        current_node = header_table[node]\n        while current_node is not None:\n            find_paths(current_node, conditional_prefix_path)\n            if len(conditional_prefix_path) > 1:\n                conditional_patterns_base.append(conditional_prefix_path[1:])\n            conditional_prefix_path = []\n            current_node = current_node.link\n        if conditional_patterns_base:\n            (conditional_tree_root, conditional_header_table) = build_fp_tree(conditional_patterns_base, min_support)\n            if conditional_tree_root is not None and conditional_header_table is not None:\n                generate_patterns(current_pattern, list(conditional_header_table.values()), conditional_header_table, min_support, patterns)\n    frequent_itemsets = [pattern for (pattern, support) in patterns if support >= min_support]\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 70, "completion_id": 6, "solution": "from collections import Counter, defaultdict\nfrom typing import List, Tuple, Dict\nclass FPNode:\n\n    def __init__(self, item, support, parent=None):\n        self.item = item\n        self.support = support\n        self.parent = parent\n        self.children = defaultdict(FPNode)\n        self.link = None\n\n    def add_child(self, item, support):\n        if item not in self.children:\n            self.children[item] = FPNode(item, support, parent=self)\n        else:\n            self.children[item].support += support\n        return self.children[item]\ndef build_header_table(counts: Counter) -> Dict[str, FPNode]:\n    header_table = {}\n    for (item, count) in counts.items():\n        header_table[item] = None\n    return header_table\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions:\n        return []\n    counts = Counter((item for transaction in transactions for item in transaction))\n    root = FPNode(None, 0)\n    header_table = build_header_table(counts)\n    for transaction in transactions:\n        sorted_transaction = [item for item in transaction if counts[item] >= min_support]\n        sorted_transaction.sort(key=lambda x: counts[x], reverse=True)\n        insert_tree(sorted_transaction, root, header_table)\n    update_tree(root, header_table, counts, min_support)\n    frequent_itemsets = []\n    mine_fp_tree(header_table, [], min_support, frequent_itemsets)\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 70, "completion_id": 7, "solution": "from collections import Counter, defaultdict\nclass Node:\n\n    def __init__(self, item, count, parent=None):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = defaultdict(Node)\n        self.link = None\nclass FPTree:\n\n    def __init__(self, transactions, min_support):\n        self.header_table = defaultdict(lambda : [0, None])\n        self.root = Node(None, None, None)\n        self.build_tree(transactions, min_support)\n\n    def build_tree(self, transactions, min_support):\n        item_counter = Counter()\n        for transaction in transactions:\n            item_counter.update(transaction)\n        frequent_items = {item: support for (item, support) in item_counter.items() if support >= min_support}\n        if not frequent_items:\n            return\n        items_order = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n        for transaction in transactions:\n            transaction = [item for item in transaction if item in frequent_items]\n            transaction.sort(key=lambda x: (-frequent_items[x], x))\n            self.insert_tree(transaction, self.root, self.header_table, items_order)\n\n    def insert_tree(self, transaction, node, header_table, items_order):\n        if not transaction:\n            return\n        item = transaction[0]\n        if item in node.children:\n            node.children[item].count += 1\n        else:\n            new_node = Node(item, 1, node)\n            node.children[item] = new_node\n            if header_table[item][1] is None:\n                header_table[item][1] = new_node\n            else:\n                current_node = header_table[item][1]\n                while current_node.link:\n                    current_node = current_node.link\n                current_node.link = new_node\n        self.insert_tree(transaction[1:], node.children[item], header_table, items_order)\ndef find_support(node, patterns):\n    if node.parent is not None:\n        node = node.parent\n        pattern = [node.item]\n        while node.parent is not None:\n            node = node.parent\n            pattern.append(node.item)\n        patterns.append(pattern)\n    patterns_set = defaultdict(int)\n    for pattern in patterns:\n        pattern.sort()\n        patterns_set[tuple(pattern)] += 1\n    return patterns_set\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions:\n        return []\n    fp_tree = FPTree(transactions, min_support)\n    frequent_itemsets = []\n    for (item, (count, node)) in dict(fp_tree.header_table).items():\n        support_patterns = find_support(node, [])\n        for (pattern, p_count) in support_patterns.items():\n            if p_count >= min_support:\n                find_frequent_itemsets(list(pattern), fp_tree.header_table[pattern[-1]][1], fp_tree.header_table, min_support, frequent_itemsets)\n    frequent_itemsets = list(set(map(tuple, frequent_itemsets)))\n    frequent_itemsets = [list(itemset) for itemset in frequent_itemsets]\n    for itemset in frequent_itemsets:\n        itemset.sort()\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 70, "completion_id": 8, "solution": "from collections import Counter, defaultdict\nclass FPTree:\n\n    def __init__(self):\n        self.root = FPTreeNode(None, -1, None)\n        self.header_table = defaultdict(lambda : [None, 0])\n\n    def insert(self, transaction, count=1):\n        current_node = self.root\n        for item in transaction:\n            next_node = current_node.children.get(item)\n            if not next_node:\n                next_node = FPTreeNode(item, count, current_node)\n                current_node.children[item] = next_node\n                if self.header_table[item][0] is None:\n                    self.header_table[item][0] = next_node\n                else:\n                    current_header_node = self.header_table[item][0]\n                    while current_header_node.node_link is not None:\n                        current_header_node = current_header_node.node_link\n                    current_header_node.node_link = next_node\n                self.header_table[item][1] += count\n            else:\n                next_node.count += count\n            current_node = next_node\n\n    def conditional_tree(self, item):\n        prefix_paths = self.prefix_paths(item)\n        path_counter = defaultdict(int)\n        for path in prefix_paths:\n            if path:\n                path_counter[tuple(path)] += 1\n        conditional_tree = FPTree()\n        for (path, count) in path_counter.items():\n            conditional_tree.insert(path, count)\n        return conditional_tree\n\n    def prefix_paths(self, item):\n        nodes = self.header_table[item][0]\n        conditional_patterns = []\n        while nodes is not None:\n            prefix_path = []\n            parent_node = nodes.parent\n            while parent_node.parent is not None:\n                prefix_path.append(parent_node.name)\n                parent_node = parent_node.parent\n            if prefix_path:\n                conditional_patterns.append(prefix_path[::-1])\n            nodes = nodes.node_link\n        return conditional_patterns\nclass FPTreeNode:\n\n    def __init__(self, name, count, parent):\n        self.name = name\n        self.count = count\n        self.parent = parent\n        self.children = defaultdict(FPTreeNode)\n        self.node_link = None\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item for (item, count) in item_counts.items() if count >= min_support}\n    sorted_items = sorted(frequent_items, key=lambda x: (-item_counts[x], x))\n    fp_tree = FPTree()\n    for transaction in transactions:\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        sorted_filtered_transaction = sorted(filtered_transaction, key=lambda x: sorted_items.index(x))\n        if sorted_filtered_transaction:\n            fp_tree.insert(sorted_filtered_transaction)\n\n    def mine_tree(tree, prefix):\n        nodes = sorted(tree.header_table.items(), key=lambda x: (-x[1][1], x[0]))\n        for (item, (_, _)) in nodes:\n            new_frequent_set = prefix + [item]\n            frequent_itemsets.append(new_frequent_set)\n            conditional_tree = tree.conditional_tree(item)\n            if len(conditional_tree.header_table) > 0:\n                mine_tree(conditional_tree, new_frequent_set)\n    frequent_itemsets = []\n    mine_tree(fp_tree, [])\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 70, "completion_id": 9, "solution": "from collections import Counter, defaultdict, namedtuple\nclass Node:\n\n    def __init__(self, item, count, parent=None):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = defaultdict(Node)\n        self.link = None\nclass FPtree:\n\n    def __init__(self):\n        self.root = Node(None, 0)\n        self.frequent_items = {}\n\n    def add_transaction(self, transaction, table):\n        pointer = self.root\n        for item in transaction:\n            if item in pointer.children:\n                pointer = pointer.children[item]\n                pointer.count += 1\n            else:\n                new_node = Node(item, 1, pointer)\n                pointer.children[item] = new_node\n                pointer = new_node\n                if item in table:\n                    if table[item] is not None:\n                        pointer.link = table[item]\n                    table[item] = pointer\ndef build_fp_tree(transactions, min_support):\n    frequency = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: support for (item, support) in frequency.items() if support >= min_support}\n    frequent_items = dict(sorted(frequent_items.items(), key=lambda x: x[0]))\n    items_order = {item: idx for (idx, item) in enumerate(frequent_items)}\n    fp_tree = FPtree()\n    header_table = defaultdict(lambda : None)\n    for transaction in transactions:\n        transaction = sorted(transaction, key=lambda x: items_order[x], reverse=True)\n        fp_tree.add_transaction(transaction, header_table)\n    fp_tree.frequent_items = frequent_items\n    return (fp_tree, header_table)\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions or min_support < 1:\n        return []\n    (fp_tree, header_table) = build_fp_tree(transactions, min_support)\n    if not fp_tree.root.children:\n        return []\n    frequent_itemsets = set()\n    mine_tree(fp_tree, header_table, min_support, [], frequent_itemsets)\n    frequent_itemsets = [list(itemset) for itemset in frequent_itemsets]\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if k <= 0 or k > len(X_train):\n        return -1\n    X_train = np.array(X_train)\n    X_test = np.array(X_test)\n\n    def squared_euclidean_distance(a, b):\n        return np.sum((a - b) ** 2)\n    predictions = []\n    for test_sample in X_test:\n        distances = [squared_euclidean_distance(test_sample, train_sample) for train_sample in X_train]\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = [y_train[i] for i in nearest_indices]\n        label_counts = Counter(nearest_labels)\n        most_common_labels = label_counts.most_common()\n        max_count = most_common_labels[0][1]\n        tied_labels = [label for (label, count) in most_common_labels if count == max_count]\n        predicted_label = min(tied_labels)\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 75, "completion_id": 1, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if k <= 0 or k > len(X_train):\n        return -1\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n    predictions = []\n    for test_sample in X_test_np:\n        distances = np.sum((X_train_np - test_sample) ** 2, axis=1)\n        closest_indices = np.argsort(distances)[:k]\n        closest_labels = y_train_np[closest_indices]\n        prediction = np.argmax(np.bincount(closest_labels))\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 75, "completion_id": 2, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if k <= 0 or k > len(X_train):\n        return -1\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    predictions = []\n    for test_sample in X_test:\n        distances = np.sum((X_train - test_sample) ** 2, axis=1)\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = y_train[nearest_indices]\n        predicted_label = np.bincount(nearest_labels).argmax()\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 75, "completion_id": 3, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not 1 <= k <= len(X_train):\n        return -1\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n    predictions = []\n    for test_sample in X_test_np:\n        distances = np.sum((test_sample - X_train_np) ** 2, axis=1)\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = y_train_np[nearest_indices]\n        predicted_label = np.argmax(np.bincount(nearest_labels))\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 75, "completion_id": 4, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if k <= 0 or k > len(X_train):\n        return -1\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    predictions = []\n    for test_sample in X_test:\n        distances = np.sum((X_train - test_sample) ** 2, axis=1)\n        k_indices = np.argsort(distances)[:k]\n        k_nearest_labels = y_train[k_indices]\n        most_common_label = Counter(k_nearest_labels).most_common()\n        most_common_label = sorted(most_common_label, key=lambda x: (-x[1], x[0]))[0][0]\n        predictions.append(most_common_label)\n    return predictions"}
{"task_id": 75, "completion_id": 5, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if k <= 0 or k > len(X_train):\n        return -1\n    X_train = np.array(X_train)\n    X_test = np.array(X_test)\n    y_train = np.array(y_train)\n    predictions = []\n    for test_sample in X_test:\n        distances = np.sum((X_train - test_sample) ** 2, axis=1)\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = y_train[nearest_indices]\n        class_counts = np.bincount(nearest_labels)\n        predicted_class = np.argmax(class_counts)\n        predictions.append(predicted_class)\n    return predictions"}
{"task_id": 75, "completion_id": 6, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if k <= 0 or k > len(X_train):\n        return -1\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    def squared_euclidean_distance(a, b):\n        return np.sum((a - b) ** 2)\n    predictions = []\n    for x_test in X_test:\n        distances = [squared_euclidean_distance(x_test, x_train) for x_train in X_train]\n        k_nearest_indices = np.argsort(distances)[:k]\n        k_nearest_labels = y_train[k_nearest_indices]\n        label_counts = Counter(k_nearest_labels)\n        predicted_label = min(label_counts.items(), key=lambda x: (-x[1], x[0]))[0]\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 75, "completion_id": 7, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if k <= 0 or k > len(X_train):\n        return -1\n    X_train = np.array(X_train)\n    X_test = np.array(X_test)\n    predictions = []\n    for test_sample in X_test:\n        distances = np.sum((X_train - test_sample) ** 2, axis=1)\n        k_indices = np.argsort(distances)[:k]\n        k_nearest_labels = np.array(y_train)[k_indices]\n        label_counts = Counter(k_nearest_labels)\n        predicted_label = min(label_counts, key=lambda x: (-label_counts[x], x))\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 75, "completion_id": 8, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if k <= 0 or k > len(X_train):\n        return -1\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    predictions = []\n    for test_sample in X_test:\n        distances = np.sum((X_train - test_sample) ** 2, axis=1)\n        k_nearest_indices = np.argsort(distances)[:k]\n        k_nearest_labels = y_train[k_nearest_indices]\n        predicted_label = np.argmax(np.bincount(k_nearest_labels))\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 75, "completion_id": 9, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if k <= 0 or k > len(X_train):\n        return -1\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    predictions = []\n    for test_sample in X_test:\n        distances = np.sum((X_train - test_sample) ** 2, axis=1)\n        k_indices = np.argsort(distances)[:k]\n        k_nearest_labels = y_train[k_indices]\n        predicted_label = np.bincount(k_nearest_labels).argmax()\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(loss, 4)"}
{"task_id": 76, "completion_id": 1, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(loss, 4)"}
{"task_id": 76, "completion_id": 2, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(loss, 4)"}
{"task_id": 76, "completion_id": 3, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.asarray(y)\n    y_pred = np.asarray(y_pred)\n    epsilon = np.finfo(float).eps\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(loss, 4)"}
{"task_id": 76, "completion_id": 4, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(float(loss), 4)"}
{"task_id": 76, "completion_id": 5, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(loss, 4)"}
{"task_id": 76, "completion_id": 6, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    log_y_pred = np.log(y_pred + epsilon)\n    product = y * log_y_pred\n    total_loss = -np.sum(product)\n    return round(total_loss, 4)"}
{"task_id": 76, "completion_id": 7, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(loss, 4)"}
{"task_id": 76, "completion_id": 8, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(loss, 4)"}
{"task_id": 76, "completion_id": 9, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(loss, 4)"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(Z):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\ndef relu(Z):\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        cache = (A_prev, W, b, Z)\n        caches.append(cache)\n    W = parameters[f'W{L}']\n    b = parameters[f'b{L}']\n    Z = np.dot(W, A) + b\n    AL = sigmoid(Z)\n    cache = (A, W, b, Z)\n    caches.append(cache)\n    AL_rounded = np.round(AL, 4).tolist()\n    return (AL_rounded, caches)"}
{"task_id": 77, "completion_id": 1, "solution": "import numpy as np\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Rectified Linear Unit activation function.\"\"\"\n    return np.maximum(0, Z)\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        W = parameters['W' + str(l)]\n        b = parameters['b' + str(l)]\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        cache = (A_prev, W, b, Z)\n        caches.append(cache)\n    W = parameters['W' + str(L)]\n    b = parameters['b' + str(L)]\n    Z = np.dot(W, A) + b\n    AL = sigmoid(Z)\n    cache = (A, W, b, Z)\n    caches.append(cache)\n    AL_rounded = AL.round(4)\n    AL_list = AL_rounded.tolist()\n    return (AL_list, caches)"}
{"task_id": 77, "completion_id": 2, "solution": "import numpy as np\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Rectified Linear Unit activation function.\"\"\"\n    return np.maximum(0, Z)\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A_prev = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        caches.append((A_prev, W, b, Z))\n        A_prev = A\n    WL = parameters[f'W{L}']\n    bL = parameters[f'b{L}']\n    ZL = np.dot(WL, A_prev) + bL\n    AL = sigmoid(ZL)\n    caches.append((A_prev, WL, bL, ZL))\n    return AL.round(4).tolist()"}
{"task_id": 77, "completion_id": 3, "solution": "import numpy as np\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        W = parameters['W' + str(l)]\n        b = parameters['b' + str(l)]\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        cache = (A_prev, W, b, Z)\n        caches.append(cache)\n    WL = parameters['W' + str(L)]\n    bL = parameters['b' + str(L)]\n    ZL = np.dot(WL, A) + bL\n    AL = sigmoid(ZL)\n    cache = (A, WL, bL, ZL)\n    caches.append(cache)\n    AL_rounded = np.round(AL, 4).tolist()\n    return (AL_rounded, caches)"}
{"task_id": 77, "completion_id": 4, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n\n    def linear_activation_forward(A_prev, W, b, activation):\n        \"\"\"Perform the forward propagation for a single layer.\"\"\"\n        Z = np.dot(W, A_prev) + b\n        if activation == 'relu':\n            A = np.maximum(0, Z)\n        elif activation == 'sigmoid':\n            A = 1 / (1 + np.exp(-Z))\n        cache = ((A_prev, W, b), Z)\n        return (A, cache)\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        (A, cache) = linear_activation_forward(A_prev, parameters[f'W{l}'], parameters[f'b{l}'], 'relu')\n        caches.append(cache)\n    (AL, cache) = linear_activation_forward(A, parameters[f'W{L}'], parameters[f'b{L}'], 'sigmoid')\n    caches.append(cache)\n    AL_rounded = np.round(AL, 4).tolist()\n    return (AL_rounded, caches)"}
{"task_id": 77, "completion_id": 5, "solution": "import numpy as np\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A_prev = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        caches.append((A_prev, W, b, Z))\n        A_prev = A\n    WL = parameters[f'W{L}']\n    bL = parameters[f'b{L}']\n    ZL = np.dot(WL, A_prev) + bL\n    AL = sigmoid(ZL)\n    caches.append((A_prev, WL, bL, ZL))\n    AL_rounded = np.round(AL, 4).tolist()\n    return (AL_rounded, caches)"}
{"task_id": 77, "completion_id": 6, "solution": "import numpy as np\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Compute the ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Compute the sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A) + b\n        A = relu(Z)\n        caches.append((Z, A))\n    WL = parameters[f'W{L}']\n    bL = parameters[f'b{L}']\n    ZL = np.dot(WL, A) + bL\n    AL = sigmoid(ZL)\n    caches.append((ZL, AL))\n    return AL.round(4).tolist()"}
{"task_id": 77, "completion_id": 7, "solution": "import numpy as np\ndef ReLU(Z: np.ndarray) -> np.ndarray:\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A_prev = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        Wl = parameters[f'W{l}']\n        bl = parameters[f'b{l}']\n        Zl = np.dot(Wl, A_prev) + bl\n        Al = ReLU(Zl)\n        caches.append((A_prev, Wl, bl, Zl))\n        A_prev = Al\n    WL = parameters[f'W{L}']\n    bL = parameters[f'b{L}']\n    ZL = np.dot(WL, A_prev) + bL\n    AL = sigmoid(ZL)\n    caches.append((A_prev, WL, bL, ZL))\n    return AL.round(4).tolist()"}
{"task_id": 77, "completion_id": 8, "solution": "import numpy as np\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Compute the ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Compute the sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A_prev = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        caches.append((A_prev, W, b, Z))\n        A_prev = A\n    W = parameters[f'W{L}']\n    b = parameters[f'b{L}']\n    Z = np.dot(W, A_prev) + b\n    AL = sigmoid(Z)\n    caches.append((A_prev, W, b, Z))\n    AL_rounded = np.round(AL, 4).tolist()\n    return (AL_rounded, caches)"}
{"task_id": 77, "completion_id": 9, "solution": "import numpy as np\ndef relu(Z):\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\ndef sigmoid(Z):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        W = parameters['W' + str(l)]\n        b = parameters['b' + str(l)]\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        cache = (A_prev, W, b, Z)\n        caches.append(cache)\n    WL = parameters['W' + str(L)]\n    bL = parameters['b' + str(L)]\n    ZL = np.dot(WL, A) + bL\n    AL = sigmoid(ZL)\n    cache = (A, WL, bL, ZL)\n    caches.append(cache)\n    return (AL.round(4).tolist(), caches)"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    assert A2.shape == Y.shape, 'A2 and Y must have the same shape'\n    m = A2.shape[0]\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    cost = -1 / m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return round(cost, 6)"}
{"task_id": 81, "completion_id": 1, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    m = A2.shape[1] if A2.ndim == 2 else A2.size\n    cost = -1 / m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return round(cost, 6)"}
{"task_id": 81, "completion_id": 2, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    assert A2.shape == Y.shape, 'A2 and Y must have the same shape'\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    m = A2.shape[0]\n    cost = -1 / m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return round(cost, 6)"}
{"task_id": 81, "completion_id": 3, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    m = A2.shape[0]\n    cost = -1 / m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return round(cost, 6)"}
{"task_id": 81, "completion_id": 4, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    m = Y.shape[1] if Y.ndim == 2 else Y.size\n    cost = -(1 / m) * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return round(cost, 6)"}
{"task_id": 81, "completion_id": 5, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    m = A2.shape[0]\n    cost = -(1 / m) * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return np.round(cost, 6)"}
{"task_id": 81, "completion_id": 6, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    m = Y.shape[0]\n    cost = -1 / m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return round(cost, 6)"}
{"task_id": 81, "completion_id": 7, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    m = Y.shape[0]\n    cost = -(1 / m) * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return np.round(cost, 6)"}
{"task_id": 81, "completion_id": 8, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    m = A2.shape[0]\n    cost = -1 / m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return round(cost, 6)"}
{"task_id": 81, "completion_id": 9, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    m = Y.shape[0]\n    cost = -(1 / m) * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return round(cost, 6)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_action = np.argmax(Q)\n    base_prob = epsilon / n\n    probabilities = np.full(n, base_prob)\n    probabilities[greedy_action] = 1 - epsilon + base_prob\n    probabilities = np.round(probabilities / probabilities.sum(), 4)\n    return probabilities.tolist()\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 1, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_index = np.argmax(Q)\n    base_prob = epsilon / n\n    probs = np.full(n, base_prob)\n    probs[greedy_index] = 1 - epsilon + base_prob\n    probs = probs / np.sum(probs)\n    return [round(p, 4) for p in probs]\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 2, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_index = np.argmax(Q)\n    base_prob = epsilon / n\n    probabilities = np.full(n, base_prob)\n    probabilities[greedy_index] = 1 - epsilon + base_prob\n    probabilities = probabilities / np.sum(probabilities)\n    probabilities = np.round(probabilities, 4)\n    return probabilities.tolist()\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 3, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_action = np.argmax(Q)\n    base_prob = epsilon / n\n    probabilities = np.full(n, base_prob)\n    probabilities[greedy_action] += 1 - epsilon\n    probabilities = np.round(probabilities, 4)\n    if not np.isclose(np.sum(probabilities), 1.0, atol=1e-12):\n        raise ValueError('Probabilities do not sum to 1 within the required tolerance.')\n    return probabilities.tolist()\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 4, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_index = np.argmax(Q)\n    base_prob = epsilon / n\n    probabilities = np.full(n, base_prob)\n    probabilities[greedy_index] = 1 - epsilon + base_prob\n    probabilities = probabilities / probabilities.sum()\n    probabilities = np.round(probabilities, 4)\n    return probabilities.tolist()\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 5, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_action = np.argmax(Q)\n    base_prob = epsilon / n\n    greedy_prob = 1 - epsilon + base_prob\n    probabilities = np.full(n, base_prob)\n    probabilities[greedy_action] = greedy_prob\n    probabilities = probabilities / np.sum(probabilities)\n    probabilities = np.round(probabilities, 4)\n    return probabilities.tolist()\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 6, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q) if not isinstance(Q, np.ndarray) else Q\n    n = len(Q)\n    greedy_index = np.argmax(Q)\n    base_prob = epsilon / n\n    greedy_prob = 1 - epsilon + base_prob\n    probabilities = np.full(n, base_prob)\n    probabilities[greedy_index] = greedy_prob\n    probabilities = probabilities / np.sum(probabilities)\n    probabilities = np.round(probabilities, 4)\n    return probabilities.tolist()\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 7, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_action_index = np.argmax(Q)\n    base_prob = epsilon / n\n    greedy_prob = 1 - epsilon + base_prob\n    probabilities = np.full(n, base_prob)\n    probabilities[greedy_action_index] = greedy_prob\n    probabilities = np.round(probabilities, 4)\n    probabilities = probabilities / probabilities.sum()\n    return probabilities.tolist()\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 8, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_index = np.argmax(Q)\n    base_prob = epsilon / n\n    probabilities = np.full(n, base_prob)\n    probabilities[greedy_index] += 1 - epsilon\n    probabilities[greedy_index] = 1 - np.sum(probabilities) + probabilities[greedy_index]\n    return np.round(probabilities, 4).tolist()\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 82, "completion_id": 9, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_index = np.argmax(Q)\n    base_prob = epsilon / n\n    probabilities = np.full(n, base_prob)\n    probabilities[greedy_index] += 1 - epsilon\n    probabilities = probabilities / np.sum(probabilities)\n    probabilities = np.round(probabilities, 4)\n    return probabilities.tolist()\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    final_predictions = []\n    for sample_index in range(num_samples):\n        votes = [tree_predictions[sample_index] for tree_predictions in predictions]\n        vote_counts = Counter(votes)\n        max_count = max(vote_counts.values())\n        max_voted_labels = [label for (label, count) in vote_counts.items() if count == max_count]\n        final_prediction = min(max_voted_labels)\n        final_predictions.append(final_prediction)\n    return final_predictions"}
{"task_id": 86, "completion_id": 1, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    final_predictions = []\n    for sample_index in range(num_samples):\n        sample_votes = [tree_predictions[sample_index] for tree_predictions in predictions]\n        vote_counter = Counter(sample_votes)\n        most_common_votes = vote_counter.most_common()\n        most_common_votes.sort(key=lambda x: (-x[1], x[0]))\n        final_prediction = most_common_votes[0][0]\n        final_predictions.append(final_prediction)\n    return final_predictions"}
{"task_id": 86, "completion_id": 2, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    final_predictions = []\n    for sample_index in range(num_samples):\n        votes = [tree_predictions[sample_index] for tree_predictions in predictions]\n        vote_counts = Counter(votes)\n        most_common_votes = vote_counts.most_common()\n        max_count = most_common_votes[0][1]\n        top_labels = [label for (label, count) in most_common_votes if count == max_count]\n        final_prediction = min(top_labels)\n        final_predictions.append(final_prediction)\n    return final_predictions"}
{"task_id": 86, "completion_id": 3, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    final_predictions = []\n    for i in range(num_samples):\n        votes = [tree_predictions[i] for tree_predictions in predictions]\n        vote_counts = Counter(votes)\n        most_common_label = min(vote_counts, key=lambda x: (-vote_counts[x], x))\n        final_predictions.append(most_common_label)\n    return final_predictions"}
{"task_id": 86, "completion_id": 4, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    num_trees = len(predictions)\n    final_predictions = []\n    for sample_index in range(num_samples):\n        sample_votes = [predictions[tree_index][sample_index] for tree_index in range(num_trees)]\n        vote_counts = Counter(sample_votes)\n        majority_vote = min(vote_counts, key=lambda label: (-vote_counts[label], label))\n        final_predictions.append(majority_vote)\n    return final_predictions"}
{"task_id": 86, "completion_id": 5, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    aggregated_predictions = []\n    for sample_index in range(num_samples):\n        votes = [tree_predictions[sample_index] for tree_predictions in predictions]\n        vote_counts = Counter(votes)\n        most_common_vote = min(vote_counts.items(), key=lambda x: (-x[1], x[0]))[0]\n        aggregated_predictions.append(most_common_vote)\n    return aggregated_predictions"}
{"task_id": 86, "completion_id": 6, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    transposed_predictions = zip(*predictions)\n    aggregated_votes = []\n    for sample_votes in transposed_predictions:\n        vote_counter = Counter(sample_votes)\n        majority_vote = min(vote_counter, key=lambda x: (-vote_counter[x], x))\n        aggregated_votes.append(majority_vote)\n    return aggregated_votes"}
{"task_id": 86, "completion_id": 7, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    final_predictions = []\n    for sample_index in range(num_samples):\n        sample_votes = [tree_predictions[sample_index] for tree_predictions in predictions]\n        vote_counts = Counter(sample_votes)\n        max_votes = max(vote_counts.values())\n        best_label = min((label for (label, count) in vote_counts.items() if count == max_votes))\n        final_predictions.append(best_label)\n    return final_predictions"}
{"task_id": 86, "completion_id": 8, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    final_predictions = []\n    for sample_idx in range(num_samples):\n        votes = [tree_predictions[sample_idx] for tree_predictions in predictions]\n        vote_counts = Counter(votes)\n        (most_common_label, _) = vote_counts.most_common(1)[0]\n        final_predictions.append(most_common_label)\n    return final_predictions"}
{"task_id": 86, "completion_id": 9, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    num_samples = len(predictions[0])\n    aggregated_votes = []\n    for sample_index in range(num_samples):\n        votes = [tree_predictions[sample_index] for tree_predictions in predictions]\n        vote_counts = Counter(votes)\n        most_common_votes = vote_counts.most_common()\n        most_common_votes.sort(key=lambda x: (-x[1], x[0]))\n        aggregated_votes.append(most_common_votes[0][0])\n    return aggregated_votes\npredictions = [[0, 1, 0, 2], [0, 0, 1, 2], [1, 0, 0, 2]]"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_arr = np.array(z)\n    softplus_values = np.logaddexp(0.0, z_arr)\n    rounded_values = np.round(softplus_values, 4)\n    if isinstance(z, (int, float)):\n        return float(rounded_values)\n    return rounded_values.tolist()"}
{"task_id": 88, "completion_id": 1, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        z = np.array([z])\n    else:\n        z = np.array(z)\n    result = np.logaddexp(0.0, z)\n    rounded_result = np.round(result, 4)\n    if rounded_result.size == 1:\n        return float(rounded_result.item())\n    else:\n        return rounded_result.tolist()\nz = np.array([-1000, 0, 3])"}
{"task_id": 88, "completion_id": 2, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (list, np.ndarray)):\n        z_array = np.array(z)\n        result = np.logaddexp(0.0, z_array)\n        result_rounded = np.round(result, 4)\n        return result_rounded.tolist()\n    else:\n        result = np.logaddexp(0.0, z)\n        return round(result, 4)\nz = np.array([-1000, 0, 3])"}
{"task_id": 88, "completion_id": 3, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_array = np.array(z)\n    softplus_values = np.logaddexp(0.0, z_array)\n    rounded_values = np.round(softplus_values, 4)\n    if isinstance(z, (list, np.ndarray)):\n        return rounded_values.tolist()\n    else:\n        return float(rounded_values)\nz = np.array([-1000, 0, 3])"}
{"task_id": 88, "completion_id": 4, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_array = np.array(z)\n    result_array = np.logaddexp(0.0, z_array)\n    rounded_result_array = np.round(result_array, 4)\n    if np.isscalar(z):\n        return float(rounded_result_array)\n    else:\n        return rounded_result_array.tolist()"}
{"task_id": 88, "completion_id": 5, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        z = np.array([z])\n    else:\n        z = np.array(z)\n    softplus_values = np.logaddexp(0.0, z)\n    rounded_values = np.round(softplus_values, 4)\n    if isinstance(z, np.ndarray) and z.size > 1:\n        return rounded_values.tolist()\n    else:\n        return rounded_values.item()\nz = np.array([-1000, 0, 3])"}
{"task_id": 88, "completion_id": 6, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_array = np.array(z, dtype=float)\n    softplus_values = np.logaddexp(0.0, z_array)\n    rounded_values = np.round(softplus_values, 4)\n    if isinstance(z, (int, float)):\n        return float(rounded_values)\n    else:\n        return rounded_values.tolist()\nz = np.array([-1000, 0, 3])"}
{"task_id": 88, "completion_id": 7, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_array = np.array(z)\n    result = np.logaddexp(0.0, z_array)\n    rounded_result = np.round(result, 4)\n    if isinstance(z, (int, float)):\n        return float(rounded_result)\n    else:\n        return rounded_result.tolist()\nz = np.array([-1000, 0, 3])"}
{"task_id": 88, "completion_id": 8, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_array = np.array(z)\n    softplus_values = np.logaddexp(0.0, z_array)\n    rounded_values = np.round(softplus_values, 4)\n    if isinstance(z, (int, float)):\n        return float(rounded_values)\n    else:\n        return rounded_values.tolist()\nz = np.array([-1000, 0, 3])"}
{"task_id": 88, "completion_id": 9, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z_array = np.array(z)\n    softplus_values = np.logaddexp(0.0, z_array)\n    rounded_values = np.round(softplus_values, 4)\n    if isinstance(z, (int, float)):\n        return float(rounded_values)\n    return rounded_values.tolist()"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    true_values = bandit.arm_evs\n    estimates = policy.ev_estimates\n    sorted_estimates = [estimates[i] for i in sorted(estimates.keys())]\n    squared_errors = [(true - est) ** 2 for (true, est) in zip(true_values, sorted_estimates)]\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 90, "completion_id": 1, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    true_evs = bandit.arm_evs\n    estimates = policy.ev_estimates\n    sorted_estimates = [estimates[i] for i in sorted(estimates.keys())]\n    squared_errors = [(true - est) ** 2 for (true, est) in zip(true_evs, sorted_estimates)]\n    mean_squared_error = np.mean(squared_errors)\n    return round(mean_squared_error, 4)\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 90, "completion_id": 2, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    true_evs = bandit['arm_evs']\n    estimates = policy['ev_estimates']\n    if len(estimates) != len(true_evs):\n        return np.nan\n    squared_errors = [(true_evs[i] - estimates[i]) ** 2 for i in range(len(true_evs))]\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)\nbandit = {'arm_evs': [0.5, 0.2, 0.9]}\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 90, "completion_id": 3, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    true_values = np.array(bandit['arm_evs'])\n    estimates = np.array([policy['ev_estimates'][i] for i in sorted(policy['ev_estimates'])])\n    mse_value = np.mean((true_values - estimates) ** 2)\n    return round(mse_value, 4)\nbandit = {'arm_evs': [0.5, 0.2, 0.9]}\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 90, "completion_id": 4, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    true_evs = bandit['arm_evs']\n    estimates = policy['ev_estimates']\n    sorted_estimates = [estimates[i] for i in sorted(estimates.keys())]\n    squared_errors = [(est - true) ** 2 for (est, true) in zip(sorted_estimates, true_evs)]\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)\nbandit = {'arm_evs': [0.5, 0.2, 0.9]}\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 90, "completion_id": 5, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    true_values = bandit.arm_evs\n    estimates = policy.ev_estimates\n    if len(estimates) != len(true_values):\n        return np.nan\n    sorted_estimates = [estimates[i] for i in sorted(estimates.keys())]\n    squared_errors = [(true - est) ** 2 for (true, est) in zip(true_values, sorted_estimates)]\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 90, "completion_id": 6, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    true_values = bandit.arm_evs\n    estimates = policy.ev_estimates\n    sorted_estimates = [estimates[i] for i in sorted(estimates.keys())]\n    squared_errors = [(true - est) ** 2 for (true, est) in zip(true_values, sorted_estimates)]\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 90, "completion_id": 7, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    true_evs = bandit.arm_evs\n    estimates = [policy.ev_estimates[i] for i in sorted(policy.ev_estimates.keys())]\n    squared_errors = [(true - est) ** 2 for (true, est) in zip(true_evs, estimates)]\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 90, "completion_id": 8, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    if not isinstance(policy.ev_estimates, dict):\n        return np.nan\n    true_values = bandit.arm_evs\n    estimates = policy.ev_estimates\n    if len(estimates) != len(true_values):\n        return np.nan\n    sorted_estimates = [estimates[i] for i in range(len(true_values))]\n    squared_errors = [(true - estimate) ** 2 for (true, estimate) in zip(true_values, sorted_estimates)]\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 90, "completion_id": 9, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    true_evs = bandit.arm_evs\n    estimates = policy.ev_estimates\n    sorted_estimates = [estimates[i] for i in sorted(estimates)]\n    squared_errors = [(true - est) ** 2 for (true, est) in zip(true_evs, sorted_estimates)]\n    mean_squared_error = np.mean(squared_errors)\n    return round(mean_squared_error, 4)\npolicy = {'ev_estimates': {0: 0.4, 1: 0.25, 2: 0.8}}"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    tokens = []\n    for sentence in corpus:\n        tokens.extend(sentence.split())\n    vocabulary = set(tokens) | {'<UNK>'}\n    V = len(vocabulary)\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        words = ['<s>'] * (N - 1) + words + ['</s>']\n        for i in range(N - 1, len(words)):\n            ngram = tuple(words[i - N + 1:i + 1])\n            ngram_counts[ngram[:-1]][ngram[-1]] += 1\n            ngram_counts[ngram[:-1]]['<UNK>'] += 0\n    target_words = sequence.split()\n    if len(target_words) < N:\n        return 0.0\n    target_words = ['<s>'] * (N - 1) + target_words + ['</s>']\n    log_prob = 0.0\n    for i in range(N - 1, len(target_words)):\n        context = tuple(target_words[i - N + 1:i])\n        word = target_words[i]\n        if word not in vocabulary:\n            word = '<UNK>'\n        count_context = sum(ngram_counts[context].values())\n        count_ngram = ngram_counts[context][word]\n        prob = (count_ngram + K) / (count_context + K * V)\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 96, "completion_id": 1, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    corpus_tokens = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        corpus_tokens.extend(['<s>'] * N + tokens + ['</s>'] * N)\n    target_tokens = sequence.split()\n    if len(target_tokens) < N:\n        return 0.0\n    target_tokens = ['<s>'] * N + target_tokens + ['</s>'] * N\n    vocabulary = set(corpus_tokens)\n    vocabulary.add('<UNK>')\n    V = len(vocabulary)\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus:\n        tokens = sentence.split()\n        tokens = ['<s>'] * N + tokens + ['</s>'] * N\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            ngram_counts[ngram[:-1]][ngram[-1]] += 1\n    log_prob = 0.0\n    for i in range(N, len(target_tokens)):\n        context = tuple(target_tokens[i - N:i])\n        word = target_tokens[i]\n        if word not in vocabulary:\n            word = '<UNK>'\n        numerator = ngram_counts[context][word] + K\n        denominator = sum(ngram_counts[context].values()) + K * V\n        log_prob += math.log(numerator / denominator)\n    return round(log_prob, 4)"}
{"task_id": 96, "completion_id": 2, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    all_tokens = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        all_tokens.extend(tokens)\n    vocabulary = set(all_tokens)\n    vocabulary.add('<UNK>')\n    ngram_counts = [defaultdict(int) for _ in range(N + 1)]\n    for sentence in corpus:\n        tokens = sentence.split()\n        tokens = ['<s>'] * N + tokens + ['</s>'] * N\n        for i in range(len(tokens) - N):\n            for n in range(1, N + 1):\n                ngram = tuple(tokens[i:i + n])\n                ngram_counts[n][ngram] += 1\n    target_tokens = sequence.split()\n    if len(target_tokens) < N:\n        return 0.0\n    target_tokens = ['<s>'] * N + target_tokens + ['</s>'] * N\n    log_prob = 0.0\n    for i in range(N, len(target_tokens)):\n        for n in range(1, N + 1):\n            ngram = tuple(target_tokens[i - n + 1:i + 1])\n            context = tuple(target_tokens[i - n + 1:i])\n            ngram = tuple(('<UNK>' if token not in vocabulary else token for token in ngram))\n            context = tuple(('<UNK>' if token not in vocabulary else token for token in context))\n            count_ngram = ngram_counts[n][ngram]\n            count_context = ngram_counts[n - 1][context] if n > 1 else len(corpus)\n            prob = (count_ngram + K) / (count_context + K * len(vocabulary))\n            log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 96, "completion_id": 3, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    vocabulary = set()\n    for sentence in corpus:\n        words = sentence.split()\n        vocabulary.update(words)\n    vocabulary.add('<UNK>')\n    V = len(vocabulary)\n    ngram_counts = defaultdict(Counter)\n    unigram_counts = Counter()\n    for sentence in corpus:\n        words = sentence.split()\n        words = ['<s>'] * (N - 1) + words + ['</s>']\n        for i in range(len(words) - N + 1):\n            ngram = tuple(words[i:i + N])\n            context = ngram[:-1]\n            word = ngram[-1]\n            ngram_counts[context][word] += 1\n            if len(context) == 0:\n                unigram_counts[word] += 1\n    target_words = sequence.split()\n    if len(target_words) < N:\n        return 0.0\n    target_words = ['<s>'] * (N - 1) + target_words + ['</s>']\n    log_prob = 0.0\n    for i in range(len(target_words) - N + 1):\n        ngram = tuple(target_words[i:i + N])\n        context = ngram[:-1]\n        word = ngram[-1]\n        if word not in vocabulary:\n            word = '<UNK>'\n        count_context = sum(ngram_counts[context].values())\n        count_ngram = ngram_counts[context][word] + K\n        prob = count_ngram / (count_context + K * V)\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 96, "completion_id": 4, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    all_words = []\n    for sentence in corpus:\n        words = sentence.split()\n        all_words.extend(words)\n    vocabulary = set(all_words)\n    vocabulary.add('<UNK>')\n    V = len(vocabulary)\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        words = ['<s>'] * (N - 1) + words + ['</s>'] * (N - 1)\n        for i in range(N - 1, len(words)):\n            context = tuple(words[i - N + 1:i])\n            ngram = words[i]\n            ngram_counts[context][ngram] += 1\n            ngram_counts[context]['<UNK>'] += 1\n    target_words = sequence.split()\n    if len(target_words) < N:\n        return 0.0\n    target_words = ['<s>'] * (N - 1) + target_words + ['</s>'] * (N - 1)\n    log_prob = 0.0\n    for i in range(N - 1, len(target_words)):\n        context = tuple(target_words[i - N + 1:i])\n        ngram = target_words[i]\n        if ngram not in vocabulary:\n            ngram = '<UNK>'\n        count_context = sum(ngram_counts[context].values())\n        count_ngram_given_context = ngram_counts[context][ngram]\n        prob = (count_ngram_given_context + K) / (count_context + K * V)\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 96, "completion_id": 5, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    tokenized_corpus = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        if len(tokens) < N:\n            continue\n        tokenized_corpus.extend([f'<s>'] * (N - 1) + tokens + ['</s>'])\n    vocabulary = set(tokenized_corpus) | {'<UNK>'}\n    V = len(vocabulary)\n    ngram_counts = [defaultdict(int) for _ in range(N + 1)]\n    for sentence in corpus:\n        tokens = sentence.split()\n        if len(tokens) < N:\n            continue\n        tokens = [f'<s>'] * (N - 1) + tokens + ['</s>']\n        for i in range(len(tokens) - N + 1):\n            for n in range(1, N + 1):\n                ngram = tuple(tokens[i:i + n])\n                ngram_counts[n][ngram] += 1\n    sequence_tokens = sequence.split()\n    if len(sequence_tokens) < N:\n        return 0.0\n    sequence_tokens = [f'<s>'] * (N - 1) + sequence_tokens + ['</s>']\n    sentence_log_prob = 0.0\n    for i in range(N - 1, len(sequence_tokens)):\n        ngram = tuple(sequence_tokens[i - N + 1:i + 1])\n        context = tuple(sequence_tokens[i - N + 1:i])\n        ngram = tuple(('<UNK>' if word not in vocabulary else word for word in ngram))\n        context = tuple(('<UNK>' if word not in vocabulary else word for word in context))\n        count_ngram = ngram_counts[len(ngram)][ngram]\n        count_context = ngram_counts[len(ngram) - 1][context] if len(ngram) > 1 else 1\n        prob = (count_ngram + K) / (count_context + K * V)\n        sentence_log_prob += math.log(prob)\n    return round(sentence_log_prob, 4)"}
{"task_id": 96, "completion_id": 6, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    corpus_tokens = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        corpus_tokens.extend(['<s>'] * (N - 1))\n        corpus_tokens.extend(tokens)\n        corpus_tokens.append('</s>')\n    sequence_tokens = ['<s>'] * (N - 1)\n    sequence_tokens.extend(sequence.split())\n    if len(sequence_tokens) < N:\n        return 0.0\n    vocabulary = set(corpus_tokens)\n    vocabulary.add('<UNK>')\n    V = len(vocabulary)\n    ngram_counts = [defaultdict(int) for _ in range(N + 1)]\n    for i in range(len(corpus_tokens) - N + 1):\n        for n in range(1, N + 1):\n            ngram = tuple(corpus_tokens[i:i + n])\n            ngram_counts[n][ngram] += 1\n    log_prob = 0.0\n    for i in range(N - 1, len(sequence_tokens)):\n        context = tuple(sequence_tokens[i - N + 1:i])\n        word = sequence_tokens[i]\n        if word not in vocabulary:\n            word = '<UNK>'\n        ngram = context + (word,)\n        count_ngram = ngram_counts[N][ngram]\n        count_context = ngram_counts[N - 1][context]\n        prob = (count_ngram + K) / (count_context + K * V)\n        log_prob += math.log(prob)\n    return round(log_prob, 4)\ncorpus = ['this is a test', 'this is only a test']\nN = 2\nK = 1.0"}
{"task_id": 96, "completion_id": 7, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    ngram_counts = defaultdict(Counter)\n    word_counts = Counter()\n    for sentence in corpus:\n        words = sentence.split()\n        words = ['<s>'] * (N - 1) + words + ['</s>']\n        for i in range(len(words) - N + 1):\n            ngram = tuple(words[i:i + N])\n            ngram_minus_one = tuple(words[i:i + N - 1])\n            ngram_counts[ngram_minus_one][ngram[-1]] += 1\n            word_counts[ngram[-1]] += 1\n            word_counts['<UNK>'] += 1\n    vocabulary = set(word_counts.keys())\n    log_prob = 0.0\n    target_words = sequence.split()\n    if len(target_words) < N:\n        return 0.0\n    target_words = ['<s>'] * (N - 1) + target_words + ['</s>']\n    for i in range(len(target_words) - N + 1):\n        ngram = tuple(target_words[i:i + N])\n        ngram_minus_one = tuple(target_words[i:i + N - 1])\n        word = ngram[-1]\n        if word not in vocabulary:\n            word = '<UNK>'\n        count_ngram = ngram_counts[ngram_minus_one][word]\n        count_ngram_minus_one = sum(ngram_counts[ngram_minus_one].values())\n        vocab_size = len(vocabulary)\n        prob = (count_ngram + K) / (count_ngram_minus_one + K * vocab_size)\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 96, "completion_id": 8, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    tokenized_corpus = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        tokenized_corpus.extend(tokens)\n    vocab = set(tokenized_corpus) | {'<UNK>'}\n    vocab_size = len(vocab)\n    ngram_counts = defaultdict(Counter)\n    unigram_counts = Counter(tokenized_corpus)\n    for sentence in corpus:\n        tokens = ['<s>'] * (N - 1) + sentence.split() + ['</s>'] * (N - 1)\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            context = ngram[:-1]\n            word = ngram[-1]\n            ngram_counts[context][word] += 1\n            unigram_counts[context] += 1\n    sequence_tokens = ['<s>'] * (N - 1) + sequence.split() + ['</s>'] * (N - 1)\n    log_prob = 0.0\n    for i in range(N - 1, len(sequence_tokens)):\n        ngram = tuple(sequence_tokens[i - N + 1:i + 1])\n        context = ngram[:-1]\n        word = ngram[-1]\n        if word not in vocab:\n            word = '<UNK>'\n        numerator = ngram_counts[context][word] + K\n        denominator = unigram_counts[context] + K * vocab_size\n        log_prob += math.log(numerator / denominator)\n    return round(log_prob, 4)\ncorpus = ['this is a test sentence', 'this is another test', 'yet another test sentence']\nN = 3\nK = 1.0"}
{"task_id": 96, "completion_id": 9, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    tokenized_corpus = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        tokenized_corpus.extend(['<s>'] + tokens + ['</s>'])\n    vocabulary = set(tokenized_corpus)\n    vocabulary.add('<UNK>')\n    V = len(vocabulary)\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus:\n        tokens = sentence.split()\n        tokens = ['<s>'] + tokens + ['</s>']\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            ngram_counts[ngram[:-1]][ngram[-1]] += 1\n    tokens = sequence.split()\n    tokens = ['<s>'] + tokens + ['</s>']\n    if len(tokens) < N:\n        return 0.0\n    log_prob = 0.0\n    for i in range(len(tokens) - N + 1):\n        context = tuple(tokens[i:i + N - 1])\n        word = tokens[i + N - 1]\n        if word not in vocabulary:\n            word = '<UNK>'\n        count_context = sum(ngram_counts[context].values())\n        count_ngram = ngram_counts[context][word] + K\n        prob = count_ngram / (count_context + K * V)\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    def compute_loss():\n        return np.linalg.norm(X - np.dot(W, H), 'fro') ** 2 + alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n    for iteration in range(max_iter):\n        for k in range(K):\n            W_k = W[:, k]\n            H[k, :] = X.T @ W_k / (W_k.T @ W_k + alpha)\n        for n in range(N):\n            H_n = H[:, n]\n            W[n, :] = X[:, n].T @ H_n / (H_n.T @ H_n + alpha)\n        current_loss = compute_loss()\n        if current_loss < tol:\n            break\n    X_hat = np.dot(W, H)\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 1, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    def compute_loss():\n        return np.linalg.norm(X - W @ H, 'fro') ** 2 + alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n    prev_loss = float('inf')\n    for iteration in range(max_iter):\n        HTH = H.T @ H + alpha * np.eye(K)\n        HTX = H.T @ X\n        W = np.linalg.solve(HTH, HTX)\n        WTW = W.T @ W + alpha * np.eye(K)\n        WTX = W.T @ X\n        H = np.linalg.solve(WTW, WTX)\n        current_loss = compute_loss()\n        if np.abs(prev_loss - current_loss) < tol:\n            break\n        prev_loss = current_loss\n    X_hat = W @ H\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 2, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    def compute_loss(X, W, H, alpha):\n        reconstruction = W @ H\n        frobenius_norm = np.linalg.norm(X - reconstruction)\n        regularization = alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n        return frobenius_norm ** 2 + regularization\n    for iteration in range(max_iter):\n        for i in range(N):\n            left = H @ H.T + alpha * np.eye(K)\n            right = H @ X[i]\n            W[i] = np.linalg.solve(left, right)\n        for j in range(M):\n            left = W.T @ W + alpha * np.eye(K)\n            right = W.T @ X[:, j]\n            H[:, j] = np.linalg.solve(left, right)\n        current_loss = compute_loss(X, W, H, alpha)\n        if current_loss < tol:\n            break\n    X_hat = W @ H\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 3, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    def compute_loss():\n        return np.linalg.norm(X - W @ H, 'fro') ** 2 + alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n    prev_loss = compute_loss()\n    for _ in range(max_iter):\n        HtH = H.T @ H + alpha * np.eye(K)\n        for n in range(N):\n            Xn = X[n]\n            W[n] = np.linalg.solve(HtH, H.T @ Xn)\n        WtW = W.T @ W + alpha * np.eye(K)\n        for m in range(M):\n            Xm = X[:, m]\n            H[:, m] = np.linalg.solve(WtW, W.T @ Xm)\n        current_loss = compute_loss()\n        if np.abs(prev_loss - current_loss) < tol:\n            break\n        prev_loss = current_loss\n    X_hat = W @ H\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 4, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    def compute_loss(X, W, H, alpha):\n        reconstruction = np.dot(W, H)\n        loss = np.linalg.norm(X - reconstruction, ord='fro') ** 2\n        reg_loss = alpha * (np.linalg.norm(W, ord='fro') ** 2 + np.linalg.norm(H, ord='fro') ** 2)\n        return loss + reg_loss\n    prev_loss = float('inf')\n    for iteration in range(max_iter):\n        for i in range(N):\n            left_side = np.dot(H, H.T) + alpha * np.eye(K)\n            right_side = np.dot(H, X[i].T)\n            W[i] = np.linalg.solve(left_side, right_side)\n        for j in range(M):\n            left_side = np.dot(W.T, W) + alpha * np.eye(K)\n            right_side = np.dot(W.T, X[:, j])\n            H[:, j] = np.linalg.solve(left_side, right_side)\n        current_loss = compute_loss(X, W, H, alpha)\n        if abs(prev_loss - current_loss) < tol:\n            break\n        prev_loss = current_loss\n    X_hat = np.dot(W, H)\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 5, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    def compute_loss(X, W, H, alpha):\n        return np.linalg.norm(X - W.dot(H), 'fro') ** 2 + alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n    for iteration in range(max_iter):\n        HT_H = H.T.dot(H) + alpha * np.eye(K)\n        for i in range(N):\n            W[i] = np.linalg.solve(HT_H, H.T.dot(X[i]))\n        WT_W = W.T.dot(W) + alpha * np.eye(K)\n        for k in range(K):\n            H[k] = np.linalg.solve(WT_W, W.T.dot(X[:, k]))\n        loss = compute_loss(X, W, H, alpha)\n        if loss < tol:\n            break\n    X_hat = W.dot(H)\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 6, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    def compute_loss(X, W, H, alpha):\n        return np.linalg.norm(X - np.dot(W, H)) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n    previous_loss = float('inf')\n    for iteration in range(max_iter):\n        for n in range(N):\n            W[n, :] = np.linalg.solve(np.dot(H, H.T) + alpha * np.eye(K), np.dot(H, X[n, :]))\n        for m in range(M):\n            H[:, m] = np.linalg.solve(np.dot(W.T, W) + alpha * np.eye(K), np.dot(W.T, X[:, m]))\n        current_loss = compute_loss(X, W, H, alpha)\n        if abs(previous_loss - current_loss) < tol:\n            break\n        previous_loss = current_loss\n    X_hat = np.dot(W, H)\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 7, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    def compute_loss(X, W, H, alpha):\n        return np.linalg.norm(X - W @ H, 'fro') ** 2 + alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n\n    def update_W(X, H, alpha):\n        return np.linalg.solve(H @ H.T + alpha * np.eye(K), H @ X.T).T\n\n    def update_H(X, W, alpha):\n        return np.linalg.solve(W.T @ W + alpha * np.eye(K), W.T @ X)\n    prev_loss = float('inf')\n    for iteration in range(max_iter):\n        W = update_W(X, H, alpha)\n        H = update_H(X, W, alpha)\n        current_loss = compute_loss(X, W, H, alpha)\n        if abs(prev_loss - current_loss) < tol:\n            break\n        prev_loss = current_loss\n    X_hat = W @ H\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 8, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    def compute_loss():\n        return np.linalg.norm(X - W @ H, 'fro') ** 2 + alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n    for iteration in range(max_iter):\n        for i in range(N):\n            W[i, :] = np.linalg.solve(H @ H.T + alpha * np.eye(K), H @ X[i, :].T).T\n        for j in range(M):\n            H[:, j] = np.linalg.solve(W.T @ W + alpha * np.eye(K), W.T @ X[:, j]).T\n        current_loss = compute_loss()\n        if current_loss < tol:\n            break\n    X_hat = W @ H\n    return X_hat.round(4).tolist()"}
{"task_id": 108, "completion_id": 9, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    def compute_loss(X, W, H, alpha):\n        reconstruction_error = np.linalg.norm(X - W @ H, 'fro') ** 2\n        regularization = alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n        return reconstruction_error + regularization\n    loss = compute_loss(X, W, H, alpha)\n    prev_loss = loss\n    for iteration in range(max_iter):\n        HTH = H.T @ H\n        reg_HTH = HTH + alpha * np.eye(K)\n        for i in range(N):\n            W[i, :] = np.linalg.solve(reg_HTH, X[i, :] @ H.T)\n        WTW = W.T @ W\n        reg_WTW = WTW + alpha * np.eye(K)\n        for j in range(M):\n            H[:, j] = np.linalg.solve(reg_WTW, W.T @ X[:, j])\n        loss = compute_loss(X, W, H, alpha)\n        if abs(prev_loss - loss) < tol:\n            print(f'Converged after {iteration + 1} iterations.')\n            break\n        prev_loss = loss\n    X_hat = W @ H\n    X_hat_rounded = X_hat.round(4).tolist()\n    return X_hat_rounded"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    def kmeans_plus_plus_init(X, K):\n        (m, n) = X.shape\n        centroids = [X[np.random.choice(m)]]\n        for _ in range(K - 1):\n            distances = np.min([np.linalg.norm(X - c, axis=1) for c in centroids], axis=0)\n            probs = distances / distances.sum()\n            centroids.append(X[np.random.choice(m, p=probs)])\n        return np.array(centroids)\n    centroids = kmeans_plus_plus_init(X, K)\n    for _ in range(max_iter):\n        distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([X[labels == k].mean(axis=0) if (labels == k).any() else centroids[k] for k in range(K)])\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    rounded_centroids = np.round(centroids, 4).tolist()\n    sorted_centroids = sorted(rounded_centroids, key=lambda x: (x[0], x))\n    return sorted_centroids"}
{"task_id": 109, "completion_id": 1, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    def distance_to_centroids(sample, centroids):\n        return np.min([np.linalg.norm(sample - centroid) for centroid in centroids])\n    centroids = [X[np.random.choice(X.shape[0])]]\n    for _ in range(1, K):\n        distances = [distance_to_centroids(x, centroids) for x in X]\n        probabilities = distances / np.sum(distances)\n        next_centroid = X[np.random.choice(X.shape[0], p=probabilities)]\n        centroids.append(next_centroid)\n    centroids = np.array(centroids)\n    for _ in range(max_iter):\n        labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - centroids, axis=2), axis=1)\n        new_centroids = np.array([X[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    rounded_centroids = np.round(centroids, 4).tolist()\n    rounded_centroids.sort(key=lambda x: (x[0], x))\n    return rounded_centroids"}
{"task_id": 109, "completion_id": 2, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    def kmeans_plusplus_init(X, K):\n        centroids = [X[np.random.choice(X.shape[0])]]\n        for _ in range(1, K):\n            distances = np.min([np.linalg.norm(x - c, axis=1) for c in centroids], axis=0)\n            probabilities = distances / distances.sum()\n            next_center = X[np.random.choice(X.shape[0], p=probabilities)]\n            centroids.append(next_center)\n        return np.array(centroids)\n    centroids = kmeans_plusplus_init(X, K)\n    for _ in range(max_iter):\n        labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - centroids, axis=2), axis=1)\n        new_centroids = np.array([X[labels == k].mean(axis=0) for k in range(K)])\n        for k in range(K):\n            if len(X[labels == k]) == 0:\n                new_centroids[k] = centroids[k]\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    sorted_centroids = sorted(centroids.round(4), key=lambda x: (x[0], tuple(x)))\n    return sorted_centroids"}
{"task_id": 109, "completion_id": 3, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    def kmeans_plus_plus_init(X, K):\n        centroids = [X[np.random.choice(X.shape[0])]]\n        for _ in range(1, K):\n            distances = np.array([min([np.linalg.norm(x - c) for c in centroids]) for x in X])\n            probas = distances ** 2 / np.sum(distances ** 2)\n            centroids.append(X[np.random.choice(X.shape[0], p=probas)])\n        return np.array(centroids)\n    centroids = kmeans_plus_plus_init(X, K)\n    for _ in range(max_iter):\n        labels = np.array([np.argmin([np.linalg.norm(x - c) for c in centroids]) for x in X])\n        new_centroids = np.array([X[labels == k].mean(axis=0) if (labels == k).any() else centroids[k] for k in range(K)])\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    sorted_centroids = sorted(centroids, key=lambda c: (c[0], tuple(c)))\n    return [list(np.round(c, 4)) for c in sorted_centroids]"}
{"task_id": 109, "completion_id": 4, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    def _distance_to_nearest_centroid(sample, centroids):\n        return min((np.linalg.norm(sample - centroid) for centroid in centroids))\n    centroids = [X[np.random.choice(X.shape[0])]]\n    for _ in range(1, K):\n        distances = np.array([_distance_to_nearest_centroid(sample, centroids) for sample in X])\n        probabilities = distances / distances.sum()\n        new_centroid_idx = np.random.choice(X.shape[0], p=probabilities)\n        centroids.append(X[new_centroid_idx])\n    centroids = np.array(centroids)\n    for _ in range(max_iter):\n        labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - centroids, axis=2), axis=1)\n        new_centroids = np.array([X[labels == k].mean(axis=0) if (labels == k).any() else centroids[k] for k in range(K)])\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    sorted_centroids = sorted(centroids, key=lambda x: (x[0], tuple(x)))\n    return [np.round(centroid, 4).tolist() for centroid in sorted_centroids]"}
{"task_id": 109, "completion_id": 5, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    def choose_initial_centroids(X, K):\n        centroids = [X[np.random.choice(X.shape[0])]]\n        for _ in range(1, K):\n            distances = np.min([np.linalg.norm(X - c, axis=1) for c in centroids], axis=0)\n            probabilities = distances / distances.sum()\n            next_centroid = X[np.random.choice(X.shape[0], p=probabilities)]\n            centroids.append(next_centroid)\n        return np.array(centroids)\n    centroids = choose_initial_centroids(X, K)\n    for _ in range(max_iter):\n        distances = np.sqrt(((X - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.array([X[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    rounded_centroids = np.round(centroids, 4).tolist()\n    sorted_centroids = sorted(rounded_centroids, key=lambda x: (x[0], x))\n    return sorted_centroids"}
{"task_id": 109, "completion_id": 6, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    centroids = [X[random.randint(0, X.shape[0] - 1)]]\n    for _ in range(1, K):\n        distances = np.array([min([np.linalg.norm(x - c) for c in centroids]) for x in X])\n        probabilities = distances / distances.sum()\n        next_centroid = X[np.random.choice(range(X.shape[0]), p=probabilities)]\n        centroids.append(next_centroid)\n    centroids = np.array(centroids)\n    for _ in range(max_iter):\n        distances = np.array([[np.linalg.norm(x - c) for c in centroids] for x in X])\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([X[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    centroids = np.round(centroids, 4)\n    sorted_centroids = sorted(centroids, key=lambda c: (c[0], list(c)))\n    return sorted_centroids"}
{"task_id": 109, "completion_id": 7, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    centroids = [X[np.random.choice(X.shape[0])]]\n    for _ in range(1, K):\n        distances = np.array([min([np.linalg.norm(x - c) ** 2 for c in centroids]) for x in X])\n        probabilities = distances / distances.sum()\n        new_centroid = X[np.random.choice(X.shape[0], p=probabilities)]\n        centroids.append(new_centroid)\n    centroids = np.array(centroids)\n    for _ in range(max_iter):\n        labels = np.array([np.argmin([np.linalg.norm(x - c) ** 2 for c in centroids]) for x in X])\n        new_centroids = np.array([X[labels == k].mean(axis=0) if X[labels == k].size != 0 else centroids[k] for k in range(K)])\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    centroids = np.round(centroids, 4).tolist()\n    centroids.sort(key=lambda x: (x[0], x))\n    return centroids"}
{"task_id": 109, "completion_id": 8, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    def distance_to_closest_centroid(x, centroids):\n        return min([np.linalg.norm(x - c) for c in centroids])\n    centroids = [X[np.random.choice(X.shape[0])]]\n    for _ in range(1, K):\n        distances = np.array([distance_to_closest_centroid(x, centroids) for x in X])\n        probabilities = distances / distances.sum()\n        next_centroid_index = np.random.choice(X.shape[0], p=probabilities)\n        centroids.append(X[next_centroid_index])\n    centroids = np.array(centroids)\n    for _ in range(max_iter):\n        distances = np.array([[np.linalg.norm(x - c) for c in centroids] for x in X])\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([X[labels == k].mean(axis=0) if (labels == k).any() else centroids[k] for k in range(K)])\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    centroids = centroids.round(4)\n    sorted_centroids = sorted(centroids.tolist(), key=lambda x: (x[0], x))\n    return sorted_centroids"}
{"task_id": 109, "completion_id": 9, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    def kmeans_plus_plus_init(X, K):\n        centroids = [X[np.random.choice(X.shape[0])]]\n        for _ in range(1, K):\n            distances = np.array([min([np.linalg.norm(x - c) ** 2 for c in centroids]) for x in X])\n            probabilities = distances / distances.sum()\n            next_centroid = X[np.random.choice(X.shape[0], p=probabilities)]\n            centroids.append(next_centroid)\n        return np.array(centroids)\n\n    def assign_clusters(X, centroids):\n        return np.argmin(np.linalg.norm(X[:, np.newaxis] - centroids, axis=2), axis=1)\n\n    def update_centroids(X, labels, centroids):\n        new_centroids = np.array([X[labels == k].mean(axis=0) if (labels == k).any() else centroids[k] for k in range(K)])\n        return new_centroids\n    centroids = kmeans_plus_plus_init(X, K)\n    for _ in range(max_iter):\n        labels = assign_clusters(X, centroids)\n        new_centroids = update_centroids(X, labels, centroids)\n        if np.all(new_centroids == centroids):\n            break\n        centroids = new_centroids\n    sorted_centroids = sorted(centroids.round(4), key=lambda c: (c[0], tuple(c)))\n    return sorted_centroids"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes every character of the input string using a provided vocabulary.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text[:time_steps]]\n    return encoded + [0] * (time_steps - len(encoded))\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list/array of integer ids back to text.\"\"\"\n    return ''.join((inverse_vocab.get(index, '') for index in indices if index != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the raw text, predicts with the model, and decodes the output.\"\"\"\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_text_np = np.array(encoded_text).reshape(1, -1)\n    predictions = model.predict(encoded_text_np)\n    predicted_ids = np.argmax(predictions, axis=-1)[0]\n    decoded_string = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_string"}
{"task_id": 111, "completion_id": 1, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes a string into a fixed-length list of integer token ids.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text[:time_steps]]\n    encoded.extend([0] * (time_steps - len(encoded)))\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list of integer ids back to text.\"\"\"\n    return ''.join((inverse_vocab.get(index, '') for index in indices if index != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the input text, runs the model, and decodes the output.\"\"\"\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_input = np.array(encoded_input).reshape(1, -1)\n    prediction = model.predict(encoded_input)\n    predicted_ids = np.argmax(prediction, axis=-1)[0]\n    decoded_string = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_string\ninput_vocabulary = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\ninv_output_vocabulary = {v: k for (k, v) in output_vocabulary.items()}"}
{"task_id": 111, "completion_id": 2, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes a string into a fixed-length list of integer token ids.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    return encoded[:time_steps] + [0] * max(0, time_steps - len(encoded))\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list of integer ids back to a human-readable string, ignoring padding tokens.\"\"\"\n    return ''.join((inverse_vocab.get(idx, '') for idx in indices if idx != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the input text, feeds it to the model, and decodes the prediction.\"\"\"\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_input_array = np.array(encoded_input).reshape(1, -1)\n    prediction = model.predict(encoded_input_array)\n    predicted_ids = np.argmax(prediction, axis=-1)[0]\n    decoded_output = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_output"}
{"task_id": 111, "completion_id": 3, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes every character of the input string using a provided vocabulary.\"\"\"\n    encoded = []\n    for char in text:\n        encoded.append(vocabulary.get(char, 0))\n    if len(encoded) > time_steps:\n        return encoded[:time_steps]\n    else:\n        return encoded + [0] * (time_steps - len(encoded))\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list/array of integer ids back to text using an inverse vocabulary.\"\"\"\n    return ''.join((inverse_vocab.get(i, '') for i in indices if i != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the input, runs the model, decodes the output.\"\"\"\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    prediction = model.predict(np.array([encoded_text]))\n    predicted_ids = np.argmax(prediction, axis=-1)[0]\n    decoded_string = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_string"}
{"task_id": 111, "completion_id": 4, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes every character of the input string using a provided vocabulary.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text[:time_steps]]\n    return encoded + [0] * (time_steps - len(encoded))\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list/array of integer ids back to text.\"\"\"\n    return ''.join((inverse_vocab.get(idx, '') for idx in indices if idx != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the text, runs the model, and decodes the prediction.\"\"\"\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_input = np.array(encoded_input).reshape(1, -1)\n    predictions = model.predict(encoded_input)\n    predicted_ids = np.argmax(predictions, axis=-1)[0]\n    decoded_string = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_string\ninput_vocabulary = {chr(i): i for i in range(97, 123)}\ninv_output_vocabulary = {v: k for (k, v) in input_vocabulary.items()}"}
{"task_id": 111, "completion_id": 5, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Converts a raw text string into a fixed-length list of integer token ids.\"\"\"\n    encoded = []\n    for char in text:\n        if char in vocabulary:\n            encoded.append(vocabulary[char])\n        else:\n            encoded.append(0)\n    if len(encoded) < time_steps:\n        encoded.extend([0] * (time_steps - len(encoded)))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list/array of integer ids back to text.\"\"\"\n    decoded_chars = []\n    for index in indices:\n        if index != 0:\n            decoded_chars.append(inverse_vocab.get(index, ''))\n    return ''.join(decoded_chars)\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the input text, runs the model prediction, and decodes the output.\"\"\"\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_input = np.array([encoded_input], dtype=np.int32)\n    raw_prediction = model.predict(encoded_input)\n    predicted_ids = np.argmax(raw_prediction, axis=-1)\n    decoded_prediction = int_to_string(predicted_ids[0], inv_output_vocabulary)\n    return decoded_prediction\ninput_vocabulary = {chr(i): i for i in range(97, 123)}\ninv_output_vocabulary = {i: chr(i) for i in range(97, 123)}\ntext = 'hello world'"}
{"task_id": 111, "completion_id": 6, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes every character of the input string using a provided vocabulary.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    return encoded[:time_steps] + [0] * max(0, time_steps - len(encoded))\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list/array of integer ids back to text, ignoring padding tokens.\"\"\"\n    return ''.join((inverse_vocab.get(index, '') for index in indices if index != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the input text, runs it through the model, and decodes the output.\"\"\"\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_input = np.array(encoded_input).reshape(1, -1)\n    prediction = model.predict(encoded_input)\n    predicted_ids = np.argmax(prediction, axis=-1)\n    predicted_ids = predicted_ids.flatten()\n    decoded_output = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_output"}
{"task_id": 111, "completion_id": 7, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes a string into a fixed-length list of integer token ids.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    return encoded[:time_steps] + [0] * (time_steps - len(encoded)) if len(encoded) < time_steps else encoded[:time_steps]\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list of integer ids back to a human-readable string, ignoring padding tokens.\"\"\"\n    return ''.join((inverse_vocab.get(index, '') for index in indices if index != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the input text, makes a prediction using the model, and decodes the output.\"\"\"\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_input = np.array(encoded_input).reshape(1, TIME_STEPS)\n    predictions = model.predict(encoded_input)\n    predicted_indices = np.argmax(predictions, axis=-1)[0]\n    decoded_output = int_to_string(predicted_indices, inv_output_vocabulary)\n    return decoded_output"}
{"task_id": 111, "completion_id": 8, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes every character of the input string using a provided vocabulary.\n    \n    Args:\n        text (str): The input string to encode.\n        time_steps (int): The fixed length of the encoded list.\n        vocabulary (dict[str, int]): The vocabulary mapping characters to integers.\n    \n    Returns:\n        list[int]: The encoded list of integers with a fixed length.\n    \"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text[:time_steps]]\n    return encoded + [0] * (time_steps - len(encoded))\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list/array of integer ids back to text using an inverse vocabulary.\n    \n    Args:\n        indices (list[int]): The list of integer ids to decode.\n        inverse_vocab (dict[int, str]): The inverse vocabulary mapping integers to characters.\n    \n    Returns:\n        str: The decoded string with padding tokens omitted.\n    \"\"\"\n    return ''.join((inverse_vocab.get(idx, '') for idx in indices if idx != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the input text, runs it through the model, and decodes the output.\n    \n    Args:\n        model: The neural model to run the prediction on.\n        input_vocabulary (dict[str, int]): The input vocabulary.\n        inv_output_vocabulary (dict[int, str]): The inverse output vocabulary.\n        text (str): The input text to process.\n    \n    Returns:\n        str: The decoded prediction string.\n    \"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    input_batch = np.array(encoded).reshape(1, -1)\n    prediction = model.predict(input_batch)\n    predicted_ids = np.argmax(prediction, axis=-1)\n    decoded_output = int_to_string(predicted_ids.flatten(), inv_output_vocabulary)\n    return decoded_output"}
{"task_id": 111, "completion_id": 9, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes a string into a fixed-length list of integer token ids.\"\"\"\n    encoded = []\n    for char in text:\n        encoded.append(vocabulary.get(char, 0))\n    if len(encoded) > time_steps:\n        return encoded[:time_steps]\n    else:\n        return encoded + [0] * (time_steps - len(encoded))\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list of integer ids back to a text string ignoring padding tokens.\"\"\"\n    return ''.join((inverse_vocab.get(idx, '') for idx in indices if idx != 0))\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the input text, runs the model prediction, and decodes the output.\"\"\"\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_input_batch = np.array(encoded_input).reshape(1, -1)\n    model_output = model.predict(encoded_input_batch)\n    predicted_ids = np.argmax(model_output, axis=-1)[0]\n    predicted_string = int_to_string(predicted_ids, inv_output_vocabulary)\n    return predicted_string"}
{"task_id": 113, "completion_id": 0, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {predicted_string}')\n        predictions.append(predicted_string)\n    return predictions\nEXAMPLES = ['hello', 'world', 'example']\ndef dummy_model(input_string):\n    return input_string[::-1]\ninput_vocabulary = {}\ninv_output_vocabulary = {}\npredictions = run_examples(dummy_model, input_vocabulary, inv_output_vocabulary)"}
{"task_id": 113, "completion_id": 1, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {predicted_string}')\n        predictions.append(predicted_string)\n    return predictions"}
{"task_id": 113, "completion_id": 2, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {predicted_string}')\n        predictions.append(predicted_string)\n    return predictions"}
{"task_id": 113, "completion_id": 3, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        global EXAMPLES\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        char_list = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(char_list)\n        print(f'input:  {example}')\n        print(f'output: {predicted_string}')\n        predictions.append(predicted_string)\n    return predictions"}
{"task_id": 113, "completion_id": 4, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        predicted_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(predicted_chars)\n        print(f'input:  {example}')\n        print(f'output: {predicted_string}')\n        predictions.append(predicted_string)\n    return predictions"}
{"task_id": 113, "completion_id": 5, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {predicted_string}')\n        predictions.append(predicted_string)\n    return predictions"}
{"task_id": 113, "completion_id": 6, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {predicted_string}')\n        predictions.append(predicted_string)\n    return predictions"}
{"task_id": 113, "completion_id": 7, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        global EXAMPLES\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {predicted_string}')\n        predictions.append(predicted_string)\n    return predictions\ndef run_example(model, input_vocabulary, inv_output_vocabulary, example):\n    return list(model(example))"}
{"task_id": 113, "completion_id": 8, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {predicted_string}')\n        predictions.append(predicted_string)\n    return predictions"}
{"task_id": 113, "completion_id": 9, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {predicted_string}')\n        predictions.append(predicted_string)\n    return predictions"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    y = y.ravel()\n    w = w.ravel()\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    m = len(y)\n    loss = -1 / m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = 1 / m * np.dot(X.T, p - y)\n    loss_rounded = round(loss, 4)\n    gradient_rounded = np.round(gradient, 4).tolist()\n    return (loss_rounded, gradient_rounded)"}
{"task_id": 115, "completion_id": 1, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    y = y.flatten()\n    m = X.shape[0]\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    loss = -1 / m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = 1 / m * np.dot(X.T, p - y)\n    return (round(loss, 4), gradient.round(4).tolist())"}
{"task_id": 115, "completion_id": 2, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    (m, n) = X.shape\n    y = y.reshape(m, 1)\n    w = w.reshape(n, 1)\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = np.dot(X.T, p - y) / m\n    return (round(loss, 4), gradient.round(4).tolist())"}
{"task_id": 115, "completion_id": 3, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    y = y.reshape(-1, 1)\n    w = w.reshape(-1, 1)\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    m = X.shape[0]\n    loss = -1 / m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = 1 / m * X.T @ (p - y)\n    return (round(loss.item(), 4), gradient.round(4).tolist())"}
{"task_id": 115, "completion_id": 4, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    if y.ndim == 1:\n        y = y[:, np.newaxis]\n    if w.ndim == 1:\n        w = w[:, np.newaxis]\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    eps = 1e-20\n    p = np.clip(p, eps, 1 - eps)\n    m = X.shape[0]\n    loss = -1 / m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = 1 / m * np.dot(X.T, p - y)\n    return (round(loss.item(), 4), [list(map(lambda x: round(x, 4), row)) for row in gradient.tolist()])"}
{"task_id": 115, "completion_id": 5, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    (m, n) = X.shape\n    z = X.dot(w)\n    p = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = 1 / m * X.T.dot(p - y)\n    return (round(loss, 4), gradient.round(4).tolist())"}
{"task_id": 115, "completion_id": 6, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    y = y.reshape(-1, 1)\n    w = w.reshape(-1, 1)\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    m = X.shape[0]\n    loss = -1 / m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = 1 / m * X.T @ (p - y)\n    return (round(float(loss), 4), gradient.round(4).tolist())"}
{"task_id": 115, "completion_id": 7, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    (m, n) = X.shape\n    y = y.reshape(m, 1)\n    w = w.reshape(n, 1)\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    loss = -1 / m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = 1 / m * np.dot(X.T, p - y)\n    return (round(loss[0], 4), gradient.tolist())"}
{"task_id": 115, "completion_id": 8, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    y = y.reshape(-1, 1)\n    w = w.reshape(-1, 1)\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    m = X.shape[0]\n    loss = -1 / m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = 1 / m * X.T @ (p - y)\n    return (round(float(loss), 4), gradient.round(4).tolist())"}
{"task_id": 115, "completion_id": 9, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    y = y.flatten()\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    m = len(y)\n    loss = -(1 / m) * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = 1 / m * (X.T @ (p - y))\n    return (round(float(loss), 4), gradient.round(4).tolist())"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    stump_weights = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        best_threshold = None\n        best_polarity = None\n        for feature_i in range(n):\n            thresholds = np.unique(X_train[:, feature_i])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.ones(m)\n                    if polarity == 1:\n                        predictions[X_train[:, feature_i] < threshold] = -1\n                    else:\n                        predictions[X_train[:, feature_i] > threshold] = -1\n                    weighted_error = np.sum(weights[predictions != y_train])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = feature_i\n                        best_threshold = threshold\n                        best_polarity = polarity\n        alpha = 0.5 * np.log((1 - min_error) / min_error)\n        stump_weights.append(alpha)\n        predictions = np.ones(m)\n        if best_polarity == 1:\n            predictions[X_train[:, best_stump] < best_threshold] = -1\n        else:\n            predictions[X_train[:, best_stump] > best_threshold] = -1\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        stumps.append((best_stump, best_threshold, best_polarity))\n\n    def predict_sample(sample):\n        stump_prediction = 0\n        for (i, (feature_i, threshold, polarity)) in enumerate(stumps):\n            prediction = 1\n            if polarity == 1:\n                if sample[feature_i] < threshold:\n                    prediction = -1\n            elif sample[feature_i] > threshold:\n                prediction = -1\n            stump_prediction += stump_weights[i] * prediction\n        return np.sign(stump_prediction)\n    return [predict_sample(sample) for sample in X_test]"}
{"task_id": 118, "completion_id": 1, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    classifiers = []\n    alphas = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        for feature_i in range(n):\n            thresholds = np.unique(X_train[:, feature_i])\n            for threshold in thresholds:\n                for polarity in (1, -1):\n                    predictions = np.ones(m)\n                    predictions[X_train[:, feature_i] * polarity < threshold * polarity] = -1\n                    weighted_error = np.sum(weights[predictions != y_train])\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_feature = feature_i\n                        best_threshold = threshold\n                        best_polarity = polarity\n        alpha = 0.5 * np.log((1.0 - min_error) / (min_error + 1e-10))\n        weights *= np.exp(-alpha * y_train * best_predictions)\n        weights /= np.sum(weights)\n        classifiers.append((best_feature, best_threshold, best_polarity))\n        alphas.append(alpha)\n    predictions = np.zeros(X_test.shape[0])\n    for (alpha, (feature, threshold, polarity)) in zip(alphas, classifiers):\n        stump_predictions = np.ones(X_test.shape[0])\n        stump_predictions[X_test[:, feature] * polarity < threshold * polarity] = -1\n        predictions += alpha * stump_predictions\n    return [1 if pred >= 0 else -1 for pred in predictions]"}
{"task_id": 118, "completion_id": 2, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        best_threshold = None\n        for feature_idx in range(n):\n            unique_values = np.unique(X_train[:, feature_idx])\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n            for threshold in thresholds:\n                predictions = np.ones(m)\n                predictions[X_train[:, feature_idx] < threshold] = -1\n                error = np.sum(weights[predictions != y_train])\n                if error > 0.5:\n                    error = 1 - error\n                    predictions = -predictions\n                if error < min_error:\n                    min_error = error\n                    best_stump = feature_idx\n                    best_threshold = threshold\n                    best_predictions = predictions\n        epsilon = min_error\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        alphas.append(alpha)\n        weights *= np.exp(-alpha * y_train * best_predictions)\n        weights /= np.sum(weights)\n        stumps.append((best_stump, best_threshold, alpha))\n    predictions = np.zeros(X_test.shape[0])\n    for (feature_idx, threshold, alpha) in stumps:\n        stump_predictions = np.ones(X_test.shape[0])\n        stump_predictions[X_test[:, feature_idx] < threshold] = -1\n        predictions += alpha * stump_predictions\n    final_predictions = np.sign(predictions).astype(int)\n    return final_predictions.tolist()"}
{"task_id": 118, "completion_id": 3, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, _) = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    stump_weights = []\n\n    def train_decision_stump(X, y, sample_weights):\n        (m, n) = X.shape\n        min_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_sign = None\n        for feature in range(n):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                for sign in [-1, 1]:\n                    predictions = np.ones(m)\n                    if sign == 1:\n                        predictions[X[:, feature] <= threshold] = -1\n                    else:\n                        predictions[X[:, feature] > threshold] = -1\n                    weighted_error = np.sum(sample_weights[predictions != y])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_sign = sign\n        return (best_feature, best_threshold, best_sign, min_error)\n    for _ in range(n_clf):\n        (feature, threshold, sign, error) = train_decision_stump(X_train, y_train, weights)\n        stump_weight = 0.5 * np.log((1 - error) / error)\n        stump_weights.append(stump_weight)\n        predictions = np.ones(m)\n        if sign == 1:\n            predictions[X_train[:, feature] <= threshold] = -1\n        else:\n            predictions[X_train[:, feature] > threshold] = -1\n        weights *= np.exp(-stump_weight * y_train * predictions)\n        weights /= np.sum(weights)\n        stumps.append((feature, threshold, sign))\n\n    def predict_sample(sample):\n        stump_predictions = [stump_weight * (1 if sign == 1 and sample[feature] <= threshold else -1 if sign == 1 else 1 if sign == -1 and sample[feature] > threshold else -1) for (feature, threshold, sign, stump_weight) in zip(*stumps, stump_weights)]\n        return 1 if np.sum(stump_predictions) > 0 else -1\n    return [predict_sample(sample) for sample in X_test]"}
{"task_id": 118, "completion_id": 4, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    D = np.ones(m) / m\n    classifiers = []\n    classifier_weights = []\n    for _ in range(n_clf):\n        min_err = float('inf')\n        best_stump = {}\n        best_sign = None\n        for i in range(n):\n            thresholds = np.unique(X_train[:, i])\n            for threshold in thresholds:\n                for sign in [-1, 1]:\n                    pred = np.ones(m)\n                    pred[X_train[:, i] * sign < threshold * sign] = -1\n                    err = D[pred != y_train].sum()\n                    if err < min_err:\n                        min_err = err\n                        best_stump = {'feature': i, 'threshold': threshold, 'sign': sign}\n                        best_sign = sign\n        clf_w = 0.5 * np.log((1 - min_err) / min_err)\n        classifiers.append(best_stump)\n        classifier_weights.append(clf_w)\n        pred = np.ones(m)\n        pred[X_train[:, best_stump['feature']] * best_sign < best_stump['threshold'] * best_sign] = -1\n        D *= np.exp(-clf_w * y_train * pred)\n        D /= D.sum()\n\n    def predict_single(x, classifiers, classifier_weights):\n        score = 0\n        for (clf, clf_w) in zip(classifiers, classifier_weights):\n            (feature, threshold, sign) = (clf['feature'], clf['threshold'], clf['sign'])\n            if x[feature] * sign < threshold * sign:\n                score -= clf_w\n            else:\n                score += clf_w\n        return np.sign(score)\n    return [predict_single(x, classifiers, classifier_weights) for x in X_test]"}
{"task_id": 118, "completion_id": 5, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    w = np.ones(m) / m\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        best_threshold = None\n        best_polarity = None\n        for feature_i in range(n):\n            feature_values = X_train[:, feature_i]\n            unique_values = np.unique(feature_values)\n            for threshold in unique_values:\n                for polarity in [-1, 1]:\n                    predictions = np.ones(m)\n                    if polarity == 1:\n                        predictions[feature_values < threshold] = -1\n                    else:\n                        predictions[feature_values > threshold] = -1\n                    error = w.dot(predictions != y_train)\n                    if error > 0.5:\n                        error = 1 - error\n                        polarity *= -1\n                    if error < min_error:\n                        min_error = error\n                        best_stump = feature_i\n                        best_threshold = threshold\n                        best_polarity = polarity\n        alpha = 0.5 * np.log((1 - min_error) / min_error)\n        alphas.append(alpha)\n        w *= np.exp(-alpha * y_train * np.ones(m) if best_polarity == 1 else alpha * y_train * np.ones(m) if best_polarity == -1 else y_train * np.ones(m))\n        w /= w.sum()\n        stumps.append((best_stump, best_threshold, best_polarity))\n    m_test = X_test.shape[0]\n    predictions = np.zeros(m_test)\n    for (alpha, (feature_i, threshold, polarity)) in zip(alphas, stumps):\n        feature_values = X_test[:, feature_i]\n        predictions += alpha * polarity * ((feature_values < threshold) * 2 - 1)\n    return [1 if pred >= 0 else -1 for pred in predictions]"}
{"task_id": 118, "completion_id": 6, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_clf = max(1, n_clf)\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    stump_weights = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = {}\n        best_feature = 0\n        best_threshold = 0\n        for feature in range(n):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                predictions = np.ones(m)\n                predictions[X_train[:, feature] < threshold] = -1\n                error = np.sum(weights[predictions != y_train])\n                if error > 0.5:\n                    error = 1 - error\n                    predictions = -predictions\n                if error < min_error:\n                    min_error = error\n                    best_stump = {'feature': feature, 'threshold': threshold, 'prediction': predictions.copy()}\n                    best_feature = feature\n                    best_threshold = threshold\n        epsilon = min_error\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        stump_weights.append(alpha)\n        weights *= np.exp(-alpha * y_train * best_stump['prediction'])\n        weights /= np.sum(weights)\n        stumps.append(best_stump)\n    predictions = np.zeros(X_test.shape[0])\n    for (stump, alpha) in zip(stumps, stump_weights):\n        (feature, threshold, _) = (stump['feature'], stump['threshold'], stump['prediction'])\n        stump_prediction = np.ones(X_test.shape[0])\n        stump_prediction[X_test[:, feature] < threshold] = -1\n        predictions += alpha * stump_prediction\n    return [1 if p >= 0 else -1 for p in predictions]"}
{"task_id": 118, "completion_id": 7, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    alpha_vals = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = {}\n        best_pred = np.array([])\n        for feature in range(n):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for inequality in ('lt', 'gt'):\n                    predicted = np.ones(m)\n                    if inequality == 'lt':\n                        predicted[X_train[:, feature] <= threshold] = -1\n                    else:\n                        predicted[X_train[:, feature] > threshold] = -1\n                    misclassified = weights[predicted != y_train]\n                    error = misclassified.sum()\n                    if error > 0.5:\n                        error = 1 - error\n                        predicted *= -1\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {'feature': feature, 'threshold': threshold, 'inequality': inequality}\n                        best_pred = predicted.copy()\n        alpha = 0.5 * np.log((1 - min_error) / max(min_error, 1e-16))\n        weights *= np.exp(-alpha * y_train * best_pred)\n        weights /= weights.sum()\n        stumps.append(best_stump)\n        alpha_vals.append(alpha)\n    m_test = X_test.shape[0]\n    agg_pred = np.zeros(m_test)\n    for (stump, alpha) in zip(stumps, alpha_vals):\n        pred = np.ones(m_test)\n        if stump['inequality'] == 'lt':\n            pred[X_test[:, stump['feature']] <= stump['threshold']] = -1\n        else:\n            pred[X_test[:, stump['feature']] > stump['threshold']] = -1\n        agg_pred += alpha * pred\n    final_pred = np.sign(agg_pred)\n    return final_pred.tolist()"}
{"task_id": 118, "completion_id": 8, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        stump = find_best_stump(X_train, y_train, weights)\n        predictions = stump_predict(X_train, stump)\n        error = weighted_error(weights, predictions, y_train)\n        if error >= 0.5:\n            break\n        alpha = 0.5 * np.log((1 - error) / error)\n        alphas.append(alpha)\n        stumps.append(stump)\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= weights.sum()\n    final_predictions = np.zeros(X_test.shape[0])\n    for (alpha, stump) in zip(alphas, stumps):\n        final_predictions += alpha * stump_predict(X_test, stump)\n    return list(np.sign(final_predictions))\ndef find_best_stump(X: np.ndarray, y: np.ndarray, weights: np.ndarray):\n    (m, n) = X.shape\n    min_error = np.inf\n    best_stump = {}\n    best_threshold = 0\n    best_inversion = False\n    for i in range(n):\n        values = np.unique(X[:, i])\n        for threshold in values:\n            for inversion in [False, True]:\n                predictions = stump_predict(X, (i, threshold, inversion))\n                error = weighted_error(weights, predictions, y)\n                if error < min_error:\n                    min_error = error\n                    best_stump = (i, threshold, inversion)\n                    best_threshold = threshold\n                    best_inversion = inversion\n    return best_stump\ndef stump_predict(X: np.ndarray, stump):\n    (feature, threshold, inversion) = stump\n    predictions = np.ones(X.shape[0])\n    if inversion:\n        predictions[X[:, feature] <= threshold] = -1\n    else:\n        predictions[X[:, feature] > threshold] = -1\n    return predictions\ndef weighted_error(weights, predictions, y):\n    return (weights * (predictions != y)).sum()"}
{"task_id": 118, "completion_id": 9, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    w = np.ones(m) / m\n    clfs = []\n    alphas = []\n    for _ in range(n_clf):\n        best_stump = None\n        best_error = np.inf\n        best_polarity = None\n        best_threshold = None\n        for feature_i in range(n):\n            thresholds = np.unique(X_train[:, feature_i])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(m)\n                    predictions[X_train[:, feature_i] * polarity < threshold * polarity] = -1\n                    weighted_error = np.sum(w[predictions != y_train])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n                    if weighted_error < best_error:\n                        best_error = weighted_error\n                        best_threshold = threshold\n                        best_stump = feature_i\n                        best_polarity = polarity\n        epsilon = best_error\n        if epsilon == 0:\n            epsilon = 1e-10\n        alpha = 0.5 * np.log((1.0 - epsilon) / epsilon)\n        alphas.append(alpha)\n        w *= np.exp(-alpha * y_train * np.array([1 if stump == best_polarity else -1 for stump in X_train[:, best_stump] * best_polarity < best_threshold * best_polarity]))\n        w /= np.sum(w)\n        clfs.append((best_stump, best_threshold, best_polarity))\n    y_pred = np.zeros(X_test.shape[0])\n    for (i, (feature_i, threshold, polarity)) in enumerate(clfs):\n        predictions = np.ones(X_test.shape[0])\n        predictions[X_test[:, feature_i] * polarity < threshold * polarity] = -1\n        y_pred += alphas[i] * predictions\n    return [1 if pred > 0 else -1 for pred in y_pred]"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    classes = np.unique(y)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for c in classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        S_W += np.sum((X_c - mean_c).T @ (X_c - mean_c), axis=1)\n    mean_overall = np.mean(X, axis=0)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for c in classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        n_c = X_c.shape[0]\n        S_B += n_c * (mean_c - mean_overall).reshape(-1, 1) @ (mean_c - mean_overall).reshape(1, -1)\n    A = np.linalg.pinv(S_W) @ S_B\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    for i in range(sorted_eigenvectors.shape[1]):\n        first_non_zero = next((idx for (idx, val) in enumerate(sorted_eigenvectors[:, i]) if val != 0), 0)\n        if sorted_eigenvectors[first_non_zero, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    if n_components == 0:\n        return []\n    W = sorted_eigenvectors[:, :n_components]\n    projected_data = X @ W\n    return projected_data.round(4).tolist()\nX = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\nn_components = 1"}
{"task_id": 128, "completion_id": 1, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    mean_overall = np.mean(X, axis=0)\n    classes = np.unique(y)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for c in classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        S_W += np.dot((X_c - mean_c).T, X_c - mean_c)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for c in classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        N_c = X_c.shape[0]\n        S_B += N_c * np.dot((mean_c - mean_overall).reshape(-1, 1), (mean_c - mean_overall).reshape(1, -1))\n    A = np.linalg.pinv(S_W).dot(S_B)\n    (eigen_values, eigen_vectors) = np.linalg.eigh(A)\n    sorted_idx = np.argsort(eigen_values)[::-1]\n    eigen_values = eigen_values[sorted_idx]\n    eigen_vectors = eigen_vectors[:, sorted_idx]\n    for i in range(n_components):\n        first_non_zero_idx = next((j for j in range(eigen_vectors.shape[0]) if eigen_vectors[j, i] != 0))\n        if eigen_vectors[first_non_zero_idx, i] < 0:\n            eigen_vectors[:, i] *= -1\n    W = eigen_vectors[:, :n_components]\n    X_projected = X.dot(W)\n    X_projected_rounded = np.round(X_projected, 4)\n    return X_projected_rounded.tolist()\nX = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\nn_components = 1"}
{"task_id": 128, "completion_id": 2, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    classes = np.unique(y)\n    mean_vectors = np.array([X[y == c].mean(axis=0) for c in classes])\n    mean_overall = np.mean(X, axis=0)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for (c, mv) in zip(classes, mean_vectors):\n        class_scatter = np.cov(X[y == c].T)\n        S_W += class_scatter * X[y == c].shape[0]\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for (c, mv) in zip(classes, mean_vectors):\n        n_c = X[y == c].shape[0]\n        mean_diff = mv - mean_overall\n        S_B += n_c * np.outer(mean_diff, mean_diff)\n    A = np.linalg.pinv(S_W).dot(S_B)\n    (eigen_values, eigen_vectors) = np.linalg.eigh(A)\n    sorted_indices = np.argsort(eigen_values)[::-1]\n    eigen_values = eigen_values[sorted_indices]\n    eigen_vectors = eigen_vectors[:, sorted_indices]\n    for i in range(eigen_vectors.shape[1]):\n        if eigen_vectors[0, i] < 0:\n            eigen_vectors[:, i] *= -1\n    if n_components == 0:\n        return []\n    W = eigen_vectors[:, :n_components]\n    X_lda = X.dot(W)\n    X_lda_rounded = np.round(X_lda, 4)\n    return X_lda_rounded.tolist()\nX = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\nn_components = 1"}
{"task_id": 128, "completion_id": 3, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    means = np.array([X[y == c].mean(axis=0) for c in np.unique(y)])\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for (i, c) in enumerate(np.unique(y)):\n        X_c = X[y == c]\n        S_W += (X_c - means[i]).T @ (X_c - means[i])\n    global_mean = X.mean(axis=0)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for (i, c) in enumerate(np.unique(y)):\n        N_c = X[y == c].shape[0]\n        S_B += N_c * (means[i] - global_mean)[:, np.newaxis] @ (means[i] - global_mean)[np.newaxis, :]\n    A = np.linalg.pinv(S_W) @ S_B\n    (eigen_values, eigen_vectors) = np.linalg.eigh(A)\n    sorted_indices = np.argsort(eigen_values)[::-1]\n    eigen_values = eigen_values[sorted_indices]\n    eigen_vectors = eigen_vectors[:, sorted_indices]\n    for i in range(len(eigen_vectors)):\n        if np.any(eigen_vectors[:, i] != 0):\n            first_non_zero_index = np.nonzero(eigen_vectors[:, i])[0][0]\n            if eigen_vectors[first_non_zero_index, i] < 0:\n                eigen_vectors[:, i] *= -1\n    W = eigen_vectors[:, :n_components]\n    projected_X = X @ W\n    return projected_X.round(4).tolist()"}
{"task_id": 128, "completion_id": 4, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    unique_classes = np.unique(y)\n    d = X.shape[1]\n    S_W = np.zeros((d, d))\n    for c in unique_classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        S_W += np.dot((X_c - mean_c).T, X_c - mean_c)\n    overall_mean = np.mean(X, axis=0)\n    S_B = np.zeros((d, d))\n    for c in unique_classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        N_c = X_c.shape[0]\n        S_B += N_c * np.dot((mean_c - overall_mean).reshape(d, 1), (mean_c - overall_mean).reshape(1, d))\n    A = np.dot(np.linalg.pinv(S_W), S_B)\n    (eigen_values, eigen_vectors) = np.linalg.eigh(A)\n    sorted_idx = np.argsort(eigen_values)[::-1]\n    eigen_values = eigen_values[sorted_idx]\n    eigen_vectors = eigen_vectors[:, sorted_idx]\n    for i in range(eigen_vectors.shape[1]):\n        first_nonzero_idx = np.where(eigen_vectors[:, i] != 0)[0][0]\n        if eigen_vectors[first_nonzero_idx, i] < 0:\n            eigen_vectors[:, i] *= -1\n    W = eigen_vectors[:, :n_components]\n    X_projected = np.dot(X, W)\n    X_projected_rounded = np.round(X_projected, 4).tolist()\n    return X_projected_rounded"}
{"task_id": 128, "completion_id": 5, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    unique_classes = np.unique(y)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for c in unique_classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        S_W += np.dot((X_c - mean_c).T, X_c - mean_c)\n    overall_mean = np.mean(X, axis=0)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for c in unique_classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        n_c = X_c.shape[0]\n        S_B += n_c * np.dot((mean_c - overall_mean).reshape(-1, 1), (mean_c - overall_mean).reshape(1, -1))\n    A = np.dot(np.linalg.pinv(S_W), S_B)\n    (eigen_values, eigen_vectors) = np.linalg.eigh(A)\n    sorted_idx = np.argsort(eigen_values)[::-1]\n    eigen_values = eigen_values[sorted_idx]\n    eigen_vectors = eigen_vectors[:, sorted_idx]\n    for i in range(eigen_vectors.shape[1]):\n        max_idx = np.argmax(np.abs(eigen_vectors[:, i]))\n        if eigen_vectors[max_idx, i] < 0:\n            eigen_vectors[:, i] *= -1\n    W = eigen_vectors[:, :n_components]\n    X_lda = np.dot(X, W)\n    X_lda_rounded = np.round(X_lda, 4)\n    return X_lda_rounded.tolist()"}
{"task_id": 128, "completion_id": 6, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    mean_overall = np.mean(X, axis=0)\n    classes = np.unique(y)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for c in classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        S_W += np.dot((X_c - mean_c).T, X_c - mean_c)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for c in classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        N_c = X_c.shape[0]\n        S_B += N_c * np.dot((mean_c - mean_overall).reshape(-1, 1), (mean_c - mean_overall).reshape(1, -1))\n    A = np.linalg.pinv(S_W).dot(S_B)\n    (eigen_values, eigen_vectors) = np.linalg.eigh(A)\n    sorted_indices = np.argsort(eigen_values)[::-1]\n    sorted_eigen_values = eigen_values[sorted_indices]\n    sorted_eigen_vectors = eigen_vectors[:, sorted_indices]\n    if n_components > len(sorted_eigen_values):\n        n_components = len(sorted_eigen_values)\n    W = sorted_eigen_vectors[:, :n_components]\n    for i in range(W.shape[1]):\n        if W[:, i][0] < 0:\n            W[:, i] *= -1\n    projected_X = np.dot(X, W)\n    projected_X_rounded = np.round(projected_X, 4)\n    return projected_X_rounded.tolist()\nX = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\nn_components = 1"}
{"task_id": 128, "completion_id": 7, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    unique_labels = np.unique(y)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for label in unique_labels:\n        X_c = X[y == label]\n        mean_c = np.mean(X_c, axis=0)\n        S_W += np.dot((X_c - mean_c).T, X_c - mean_c)\n    mean_total = np.mean(X, axis=0)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for label in unique_labels:\n        X_c = X[y == label]\n        mean_c = np.mean(X_c, axis=0)\n        N_c = X_c.shape[0]\n        S_B += N_c * np.dot((mean_c - mean_total).reshape(-1, 1), (mean_c - mean_total).reshape(1, -1))\n    A = np.linalg.pinv(S_W).dot(S_B)\n    (eigen_values, eigen_vectors) = np.linalg.eigh(A)\n    sorted_indices = np.argsort(eigen_values)[::-1]\n    eigen_values = eigen_values[sorted_indices]\n    eigen_vectors = eigen_vectors[:, sorted_indices]\n    for i in range(eigen_vectors.shape[1]):\n        non_zero_idx = np.argmax(np.abs(eigen_vectors[:, i]))\n        if eigen_vectors[non_zero_idx, i] < 0:\n            eigen_vectors[:, i] *= -1\n    W = eigen_vectors[:, :n_components]\n    X_projected = X.dot(W)\n    X_projected_rounded = X_projected.round(4).tolist()\n    return X_projected_rounded\nX = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\nn_components = 1"}
{"task_id": 128, "completion_id": 8, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    classes = np.unique(y)\n    mean_vectors = np.array([X[y == c].mean(axis=0) for c in classes])\n    global_mean = X.mean(axis=0)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for (c, mv) in zip(classes, mean_vectors):\n        class_scatter = np.zeros((X.shape[1], X.shape[1]))\n        for row in X[y == c]:\n            (row, mv) = (row.reshape(X.shape[1], 1), mv.reshape(X.shape[1], 1))\n            class_scatter += (row - mv).dot((row - mv).T)\n        S_W += class_scatter\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for (i, mean_vec) in enumerate(mean_vectors):\n        n_c = X[y == i].shape[0]\n        mean_vec = mean_vec.reshape(X.shape[1], 1)\n        global_mean = global_mean.reshape(X.shape[1], 1)\n        S_B += n_c * (mean_vec - global_mean).dot((mean_vec - global_mean).T)\n    A = np.linalg.pinv(S_W).dot(S_B)\n    (eigen_values, eigen_vectors) = np.linalg.eigh(A)\n    sorted_index = np.argsort(eigen_values)[::-1]\n    sorted_eigen_value = eigen_values[sorted_index]\n    sorted_eigen_vector = eigen_vectors[:, sorted_index]\n    W = sorted_eigen_vector[:, :n_components]\n    for i in range(W.shape[1]):\n        if np.any(W[:, i] < 0):\n            W[:, i] *= -1\n    X_lda = X.dot(W)\n    X_lda_rounded = np.round(X_lda, 4)\n    return X_lda_rounded.tolist()\nX = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\nn_components = 1"}
{"task_id": 128, "completion_id": 9, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    classes = np.unique(y)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for c in classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        S_W += np.dot((X_c - mean_c).T, X_c - mean_c)\n    overall_mean = np.mean(X, axis=0)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for c in classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        N_c = X_c.shape[0]\n        S_B += N_c * np.dot((mean_c - overall_mean).reshape(-1, 1), (mean_c - overall_mean).reshape(1, -1))\n    A = np.linalg.pinv(S_W).dot(S_B)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(A)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    for i in range(n_components):\n        first_nonzero = next((j for j in range(eigenvectors.shape[0]) if eigenvectors[j, i] != 0))\n        if eigenvectors[first_nonzero, i] < 0:\n            eigenvectors[:, i] *= -1\n    W = eigenvectors[:, :n_components]\n    X_projected = X.dot(W)\n    X_projected_rounded = np.round(X_projected, 4)\n    return X_projected_rounded.tolist()\nX = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\nn_components = 1"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 1 and grid[0] == '.':\n        return 0\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    fire_queue = deque()\n    agent_queue = deque()\n    fire_time = [[math.inf] * n for _ in range(n)]\n    agent_time = [[math.inf] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j))\n                fire_time[i][j] = 0\n        if grid[0][0] == '.':\n            agent_queue.append((0, 0))\n            agent_time[0][0] = 0\n    while fire_queue:\n        (x, y) = fire_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.') and (fire_time[nx][ny] == math.inf):\n                fire_time[nx][ny] = fire_time[x][y] + 1\n                fire_queue.append((nx, ny))\n    while agent_queue:\n        (x, y) = agent_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.') and (agent_time[nx][ny] == math.inf):\n                if agent_time[x][y] + 1 < fire_time[nx][ny]:\n                    agent_time[nx][ny] = agent_time[x][y] + 1\n                    agent_queue.append((nx, ny))\n    if agent_time[n - 1][n - 1] == math.inf:\n        return -1\n    return agent_time[n - 1][n - 1]\ngrid = ['S..', '.#.', '..E']"}
{"task_id": 140, "completion_id": 1, "solution": "from collections import deque\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    if grid[0][0] == 'F' or grid[-1][-1] == 'F':\n        return -1\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    fire_times = [[math.inf] * n for _ in range(n)]\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j))\n                fire_times[i][j] = 0\n    while fire_queue:\n        (x, y) = fire_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.') and (fire_times[nx][ny] == math.inf):\n                fire_times[nx][ny] = fire_times[x][y] + 1\n                fire_queue.append((nx, ny))\n    agent_queue = deque([(0, 0, 0)])\n    visited = set((0, 0, 0))\n    while agent_queue:\n        (x, y, t) = agent_queue.popleft()\n        if (x, y) == (n - 1, n - 1):\n            return t\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.'):\n                next_time = t + 1\n                if next_time < fire_times[nx][ny] and (nx, ny, next_time) not in visited:\n                    visited.add((nx, ny, next_time))\n                    agent_queue.append((nx, ny, next_time))\n    return -1"}
{"task_id": 140, "completion_id": 2, "solution": "from collections import deque\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    if n == 1 and grid[0][0] == '.':\n        return 0\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    fire_queue = deque()\n    fire_time = [[math.inf] * n for _ in range(n)]\n    for r in range(n):\n        for c in range(n):\n            if grid[r][c] == 'F':\n                fire_queue.append((r, c))\n                fire_time[r][c] = 0\n    while fire_queue:\n        (r, c) = fire_queue.popleft()\n        for (dr, dc) in directions:\n            (nr, nc) = (r + dr, c + dc)\n            if 0 <= nr < n and 0 <= nc < n and (grid[nr][nc] == '.') and (fire_time[nr][nc] == math.inf):\n                fire_time[nr][nc] = fire_time[r][c] + 1\n                fire_queue.append((nr, nc))\n    agent_queue = deque([(0, 0, 0)])\n    visited = set((0, 0, 0))\n    while agent_queue:\n        (r, c, t) = agent_queue.popleft()\n        for (dr, dc) in directions:\n            (nr, nc) = (r + dr, c + dc)\n            if nr == n - 1 and nc == n - 1 and (fire_time[nr][nc] > t + 1 or fire_time[nr][nc] == math.inf):\n                return t + 1\n            if 0 <= nr < n and 0 <= nc < n and (grid[nr][nc] == '.') and ((nr, nc, t + 1) not in visited):\n                if fire_time[nr][nc] > t + 1:\n                    visited.add((nr, nc, t + 1))\n                    agent_queue.append((nr, nc, t + 1))\n    return -1"}
{"task_id": 140, "completion_id": 3, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    m = len(grid[0])\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    if grid[0][0] == 'F' or grid[n - 1][m - 1] == 'F':\n        return -1\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j))\n    agent_queue = deque([(0, 0, 0)])\n    visited = set((0, 0, 0))\n    while fire_queue or agent_queue:\n        fire_size = len(fire_queue)\n        for _ in range(fire_size):\n            (fx, fy) = fire_queue.popleft()\n            for (dx, dy) in directions:\n                (nx, ny) = (fx + dx, fy + dy)\n                if 0 <= nx < n and 0 <= ny < m and (grid[nx][ny] == '.'):\n                    grid[nx] = grid[nx][:ny] + 'F' + grid[nx][ny + 1:]\n                    fire_queue.append((nx, ny))\n        agent_size = len(agent_queue)\n        for _ in range(agent_size):\n            (ax, ay, at) = agent_queue.popleft()\n            if ax == n - 1 and ay == m - 1:\n                return at\n            for (dx, dy) in directions:\n                (nx, ny) = (ax + dx, ay + dy)\n                if 0 <= nx < n and 0 <= ny < m and (grid[nx][ny] == '.') and ((nx, ny, at + 1) not in visited):\n                    agent_queue.append((nx, ny, at + 1))\n                    visited.add((nx, ny, at + 1))\n    return -1"}
{"task_id": 140, "completion_id": 4, "solution": "from collections import deque\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    if n == 1:\n        return 0\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j))\n    agent_queue = deque([(0, 0)])\n    agent_time = 0\n\n    def is_valid(x, y, time):\n        return 0 <= x < n and 0 <= y < n and (grid[x][y] != '#') and (time < fire_time[x][y])\n    fire_time = [[math.inf] * n for _ in range(n)]\n    while fire_queue:\n        (x, y) = fire_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (fire_time[nx][ny] == math.inf):\n                fire_time[nx][ny] = fire_time[x][y] + 1\n                fire_queue.append((nx, ny))\n    while agent_queue:\n        for _ in range(len(agent_queue)):\n            (x, y) = agent_queue.popleft()\n            if (x, y) == (n - 1, n - 1):\n                return agent_time\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if is_valid(nx, ny, agent_time + 1):\n                    agent_queue.append((nx, ny))\n                    grid[nx] = grid[nx][:ny] + '#' + grid[nx][ny + 1:]\n        agent_time += 1\n    return -1"}
{"task_id": 140, "completion_id": 5, "solution": "from collections import deque\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 1 and grid[0][0] == '.':\n        return 0\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def bfs_fire():\n        fire_time = [[math.inf] * n for _ in range(n)]\n        queue = deque()\n        for i in range(n):\n            for j in range(n):\n                if grid[i][j] == 'F':\n                    queue.append((i, j))\n                    fire_time[i][j] = 0\n        while queue:\n            (x, y) = queue.popleft()\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.') and (fire_time[nx][ny] == math.inf):\n                    fire_time[nx][ny] = fire_time[x][y] + 1\n                    queue.append((nx, ny))\n        return fire_time\n\n    def bfs_agent(fire_time):\n        agent_time = [[math.inf] * n for _ in range(n)]\n        queue = deque()\n        queue.append((0, 0))\n        agent_time[0][0] = 0\n        while queue:\n            (x, y) = queue.popleft()\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if nx == n - 1 and ny == n - 1 and (agent_time[x][y] + 1 <= fire_time[nx][ny]):\n                    return agent_time[x][y] + 1\n                if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.') and (agent_time[nx][ny] == math.inf) and (agent_time[x][y] + 1 < fire_time[nx][ny]):\n                    agent_time[nx][ny] = agent_time[x][y] + 1\n                    queue.append((nx, ny))\n        return -1\n    fire_time = bfs_fire()\n    return bfs_agent(fire_time)"}
{"task_id": 140, "completion_id": 6, "solution": "from collections import deque\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    if n == 1 and grid[0][0] == '.':\n        return 0\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j))\n    fire_time = [[math.inf] * n for _ in range(n)]\n    while fire_queue:\n        (x, y) = fire_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.') and (fire_time[nx][ny] == math.inf):\n                fire_time[nx][ny] = fire_time[x][y] + 1\n                fire_queue.append((nx, ny))\n    agent_queue = deque([(0, 0)])\n    agent_time = [[math.inf] * n for _ in range(n)]\n    agent_time[0][0] = 0\n    while agent_queue:\n        (x, y) = agent_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.') and (agent_time[nx][ny] == math.inf):\n                if agent_time[x][y] + 1 < fire_time[nx][ny]:\n                    agent_time[nx][ny] = agent_time[x][y] + 1\n                    agent_queue.append((nx, ny))\n                    if (nx, ny) == (n - 1, n - 1):\n                        return agent_time[nx][ny]\n    return -1"}
{"task_id": 140, "completion_id": 7, "solution": "from collections import deque\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    if n == 1:\n        return 0\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def bfs_fire():\n        fire_queue = deque()\n        fire_time = [[math.inf] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if grid[i][j] == 'F':\n                    fire_queue.append((i, j))\n                    fire_time[i][j] = 0\n        while fire_queue:\n            (x, y) = fire_queue.popleft()\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.') and (fire_time[nx][ny] == math.inf):\n                    fire_time[nx][ny] = fire_time[x][y] + 1\n                    fire_queue.append((nx, ny))\n        return fire_time\n\n    def bfs_agent(fire_time):\n        agent_queue = deque([(0, 0, 0)])\n        visited = {(0, 0, 0)}\n        while agent_queue:\n            (x, y, t) = agent_queue.popleft()\n            if (x, y) == (n - 1, n - 1):\n                return t\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.'):\n                    next_time = t + 1\n                    if (nx, ny, next_time) not in visited and (next_time < fire_time[nx][ny] or fire_time[nx][ny] == math.inf):\n                        visited.add((nx, ny, next_time))\n                        agent_queue.append((nx, ny, next_time))\n        return -1\n    fire_time = bfs_fire()\n    return bfs_agent(fire_time)"}
{"task_id": 140, "completion_id": 8, "solution": "from collections import deque\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 1:\n        return 0 if grid[0][0] == '.' else -1\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    fire_queue = deque()\n    fire_time = [[math.inf] * n for _ in range(n)]\n    agent_queue = deque([(0, 0)])\n    agent_time = [[math.inf] * n for _ in range(n)]\n    agent_time[0][0] = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j))\n                fire_time[i][j] = 0\n    while fire_queue:\n        (x, y) = fire_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (fire_time[nx][ny] == math.inf):\n                fire_time[nx][ny] = fire_time[x][y] + 1\n                fire_queue.append((nx, ny))\n    while agent_queue:\n        (x, y) = agent_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (agent_time[nx][ny] == math.inf) and (fire_time[nx][ny] > agent_time[x][y] + 1):\n                agent_time[nx][ny] = agent_time[x][y] + 1\n                agent_queue.append((nx, ny))\n    return agent_time[n - 1][n - 1] if agent_time[n - 1][n - 1] != math.inf else -1"}
{"task_id": 140, "completion_id": 9, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if grid[0][0] == 'F' or grid[n - 1][n - 1] == 'F':\n        return -1\n    if n == 1 and grid[0][0] == '.':\n        return 0\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    fire_times = [[math.inf] * n for _ in range(n)]\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j))\n                fire_times[i][j] = 0\n    while fire_queue:\n        (x, y) = fire_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (fire_times[nx][ny] == math.inf):\n                fire_times[nx][ny] = fire_times[x][y] + 1\n                fire_queue.append((nx, ny))\n    agent_queue = deque([(0, 0, 0)])\n    visited = set((0, 0, 0))\n    while agent_queue:\n        (x, y, time) = agent_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if nx == n - 1 and ny == n - 1 and (time + 1 < fire_times[nx][ny] or fire_times[nx][ny] == math.inf):\n                return time + 1\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and ((nx, ny, time + 1) not in visited):\n                if time + 1 < fire_times[nx][ny] or fire_times[nx][ny] == math.inf:\n                    visited.add((nx, ny, time + 1))\n                    agent_queue.append((nx, ny, time + 1))\n    return -1"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.spatial.distance import cdist\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    if metric == 'euclidean':\n        dist_func = 'euclidean'\n    elif metric == 'manhattan':\n        dist_func = 'cityblock'\n    elif metric == 'cosine':\n        dist_func = 'cosine'\n    else:\n        dist_func = 'euclidean'\n    distances = cdist(X_test, X_train, metric=dist_func)\n    k_indices = np.argsort(distances, axis=1)[:, :k]\n    k_nearest_labels = y_train[k_indices]\n    predicted_labels = np.array([Counter(labels).most_common(1)[0][0] for labels in k_nearest_labels])\n    for (i, labels) in enumerate(k_nearest_labels):\n        label_counts = Counter(labels)\n        if len(label_counts) > 1 and label_counts.most_common(1)[0][1] == label_counts.most_common(2)[1][1]:\n            predicted_labels[i] = min(label_counts, key=lambda x: (label_counts[x], x))\n    return predicted_labels"}
{"task_id": 141, "completion_id": 1, "solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.spatial.distance import cdist\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Predict the class for each test sample using the k-Nearest Neighbors algorithm.\"\"\"\n    if metric == 'euclidean':\n        distance_metric = 'euclidean'\n    elif metric == 'manhattan':\n        distance_metric = 'cityblock'\n    elif metric == 'cosine':\n        distance_metric = 'cosine'\n    else:\n        distance_metric = 'euclidean'\n    distances = cdist(X_test, X_train, metric=distance_metric)\n    k_nearest_indices = np.argsort(distances, axis=1)[:, :k]\n    predictions = []\n    for indices in k_nearest_indices:\n        k_nearest_labels = y_train[indices]\n        most_common_label = Counter(k_nearest_labels).most_common()\n        most_common_sorted = sorted(most_common_label, key=lambda x: (-x[1], x[0]))\n        predictions.append(most_common_sorted[0][0])\n    return np.array(predictions)"}
{"task_id": 141, "completion_id": 2, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2, axis=1))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b), axis=1)\n\n    def cosine_distance(a, b):\n        dot_product = np.dot(a, b.T)\n        norm_a = np.linalg.norm(a, axis=1, keepdims=True)\n        norm_b = np.linalg.norm(b, axis=1)\n        cosine_sim = dot_product / (norm_a * norm_b)\n        return 1 - cosine_sim\n    if metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        distance_func = euclidean_distance\n    predictions = []\n    for test_sample in X_test:\n        distances = distance_func(test_sample, X_train)\n        k_indices = np.argsort(distances)[:k]\n        k_nearest_labels = y_train[k_indices]\n        most_common_label = np.bincount(k_nearest_labels).argmax()\n        predictions.append(most_common_label)\n    return np.array(predictions)"}
{"task_id": 141, "completion_id": 3, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n\n    def euclidean_distance(a, b):\n        return np.linalg.norm(a - b, ord=2, axis=1)\n\n    def manhattan_distance(a, b):\n        return np.linalg.norm(a - b, ord=1, axis=1)\n\n    def cosine_distance(a, b):\n        dot_product = np.dot(a, b.T)\n        norm_a = np.linalg.norm(a, ord=2, axis=1, keepdims=True)\n        norm_b = np.linalg.norm(b, ord=2, axis=1)\n        cosine_sim = dot_product / (norm_a * norm_b)\n        return 1 - cosine_sim\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        print(f'Unknown metric: {metric}. Falling back to Euclidean.')\n        distance_func = euclidean_distance\n    predictions = []\n    for test_sample in X_test:\n        distances = distance_func(test_sample, X_train)\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = y_train[nearest_indices]\n        prediction = np.bincount(nearest_labels).argmax()\n        predictions.append(prediction)\n    return np.array(predictions)"}
{"task_id": 141, "completion_id": 4, "solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.spatial.distance import cdist\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    if metric == 'euclidean':\n        dist_func = 'euclidean'\n    elif metric == 'manhattan':\n        dist_func = 'cityblock'\n    elif metric == 'cosine':\n        dist_func = 'cosine'\n    else:\n        dist_func = 'euclidean'\n    distances = cdist(X_test, X_train, metric=dist_func)\n    k_indices = np.argsort(distances, axis=1)[:, :k]\n    predictions = []\n    for indices in k_indices:\n        k_nearest_labels = y_train[indices]\n        label_counts = Counter(k_nearest_labels)\n        most_common = label_counts.most_common()\n        most_common.sort(key=lambda x: (-x[1], x[0]))\n        predictions.append(most_common[0][0])\n    return np.array(predictions)"}
{"task_id": 141, "completion_id": 5, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement the k-Nearest Neighbors classifier.\"\"\"\n\n    def euclidean_distance(a, b):\n        return np.linalg.norm(a - b, ord=2, axis=1)\n\n    def manhattan_distance(a, b):\n        return np.linalg.norm(a - b, ord=1, axis=1)\n\n    def cosine_distance(a, b):\n        dot_product = np.dot(a, b.T)\n        norm_a = np.linalg.norm(a, ord=2, axis=1, keepdims=True)\n        norm_b = np.linalg.norm(b, ord=2, axis=1, keepdims=True)\n        cosine_sim = dot_product / (norm_a * norm_b.T)\n        return 1 - cosine_sim\n    if metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        distance_func = euclidean_distance\n    predictions = []\n    for test_sample in X_test:\n        distances = distance_func(test_sample, X_train)\n        k_nearest_indices = np.argsort(distances)[:k]\n        k_nearest_labels = y_train[k_nearest_indices]\n        predicted_label = np.argmax(np.bincount(k_nearest_labels))\n        predictions.append(predicted_label)\n    return np.array(predictions)"}
{"task_id": 141, "completion_id": 6, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2, axis=1))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b), axis=1)\n\n    def cosine_distance(a, b):\n        a_norm = np.linalg.norm(a, axis=1, keepdims=True)\n        b_norm = np.linalg.norm(b, axis=1, keepdims=True)\n        cosine_sim = np.dot(a, b.T) / (a_norm * b_norm.T)\n        return 1 - cosine_sim\n    distances = np.zeros((X_test.shape[0], X_train.shape[0]))\n    if metric == 'euclidean':\n        for (i, x_test) in enumerate(X_test):\n            distances[i] = euclidean_distance(x_test, X_train)\n    elif metric == 'manhattan':\n        for (i, x_test) in enumerate(X_test):\n            distances[i] = manhattan_distance(x_test, X_train)\n    elif metric == 'cosine':\n        for (i, x_test) in enumerate(X_test):\n            distances[i] = cosine_distance(x_test.reshape(1, -1), X_train)\n    else:\n        for (i, x_test) in enumerate(X_test):\n            distances[i] = euclidean_distance(x_test, X_train)\n    predictions = []\n    for i in range(distances.shape[0]):\n        nearest_indices = np.argsort(distances[i])[:k]\n        nearest_labels = y_train[nearest_indices]\n        (unique_labels, counts) = np.unique(nearest_labels, return_counts=True)\n        sorted_labels = unique_labels[np.argsort(counts)[::-1]]\n        max_count_label = sorted_labels[0]\n        predictions.append(max_count_label)\n    return np.array(predictions)"}
{"task_id": 141, "completion_id": 7, "solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.spatial.distance import cdist\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    valid_metrics = ['euclidean', 'manhattan', 'cosine']\n    if metric not in valid_metrics:\n        metric = 'euclidean'\n    if metric == 'euclidean':\n        distance_matrix = cdist(X_test, X_train, metric='euclidean')\n    elif metric == 'manhattan':\n        distance_matrix = cdist(X_test, X_train, metric='cityblock')\n    elif metric == 'cosine':\n        distance_matrix = cdist(X_test, X_train, metric='cosine')\n    k_nearest_indices = np.argsort(distance_matrix, axis=1)[:, :k]\n    k_nearest_labels = y_train[k_nearest_indices]\n    predictions = np.array([Counter(labels).most_common(1)[0][0] for labels in k_nearest_labels])\n    return predictions"}
{"task_id": 141, "completion_id": 8, "solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.spatial.distance import cdist\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    if metric == 'euclidean':\n        distance_metric = 'euclidean'\n    elif metric == 'manhattan':\n        distance_metric = 'cityblock'\n    elif metric == 'cosine':\n        distance_metric = 'cosine'\n    else:\n        distance_metric = 'euclidean'\n    distances = cdist(X_test, X_train, metric=distance_metric)\n    k_nearest_indices = np.argsort(distances, axis=1)[:, :k]\n    predictions = []\n    for indices in k_nearest_indices:\n        k_nearest_labels = y_train[indices]\n        label_counts = Counter(k_nearest_labels)\n        most_common_label = min(label_counts.items(), key=lambda x: (-x[1], x[0]))[0]\n        predictions.append(most_common_label)\n    return np.array(predictions)"}
{"task_id": 141, "completion_id": 9, "solution": "import numpy as np\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2, axis=1))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b), axis=1)\n\n    def cosine_distance(a, b):\n        dot_product = np.dot(a, b.T)\n        norm_a = np.linalg.norm(a, axis=1).reshape(-1, 1)\n        norm_b = np.linalg.norm(b, axis=1)\n        cosine_sim = dot_product / (norm_a * norm_b)\n        return 1 - cosine_sim\n    if metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        distance_func = euclidean_distance\n    predictions = []\n    for test_sample in X_test:\n        distances = distance_func(test_sample, X_train)\n        k_nearest_indices = np.argsort(distances)[:k]\n        k_nearest_labels = y_train[k_nearest_indices]\n        most_common_label = np.argmax(np.bincount(k_nearest_labels))\n        predictions.append(most_common_label)\n    return np.array(predictions)"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b))\n\n    def cosine_distance(a, b, eps=1e-12):\n        dot_product = np.dot(a, b)\n        norm_a = np.linalg.norm(a)\n        norm_b = np.linalg.norm(b)\n        return 1 - dot_product / (norm_a * norm_b + eps)\n    distances = {'euclidean': euclidean_distance, 'manhattan': manhattan_distance, 'cosine': cosine_distance}\n    if metric not in distances:\n        raise ValueError(f'Unknown metric: {metric}')\n    distance_func = distances[metric]\n    predictions = []\n    for test_sample in X_test:\n        distances_to_train = [(distance_func(test_sample, train_sample), label) for (train_sample, label) in zip(X, y)]\n        distances_to_train.sort(key=lambda x: x[0])\n        k_neighbors = distances_to_train[:k]\n        neighbor_labels = [label for (_, label) in k_neighbors]\n        predicted_label = min(set(neighbor_labels), key=neighbor_labels.count)\n        predictions.append(predicted_label)\n    return predictions.tolist()"}
{"task_id": 146, "completion_id": 1, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b))\n\n    def cosine_distance(a, b):\n        epsilon = 1e-12\n        dot_product = np.dot(a, b)\n        norm_a = np.linalg.norm(a)\n        norm_b = np.linalg.norm(b)\n        return 1 - dot_product / (norm_a * norm_b + epsilon)\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError(\"Unsupported distance metric. Choose from 'euclidean', 'manhattan', or 'cosine'.\")\n    predictions = []\n    for test_sample in X_test:\n        distances = [distance_func(test_sample, train_sample) for train_sample in X]\n        k_indices = np.argsort(distances)[:k]\n        k_nearest_labels = y[k_indices]\n        (unique_labels, counts) = np.unique(k_nearest_labels, return_counts=True)\n        most_common_count = np.max(counts)\n        most_common_labels = unique_labels[counts == most_common_count]\n        predicted_label = np.min(most_common_labels)\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 146, "completion_id": 2, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b))\n\n    def cosine_distance(a, b):\n        epsilon = 1e-12\n        dot_product = np.dot(a, b)\n        norm_a = np.linalg.norm(a)\n        norm_b = np.linalg.norm(b)\n        return 1 - dot_product / (norm_a * norm_b + epsilon)\n    distance_functions = {'euclidean': euclidean_distance, 'manhattan': manhattan_distance, 'cosine': cosine_distance}\n    if metric not in distance_functions:\n        raise ValueError(\"Metric should be one of 'euclidean', 'manhattan', or 'cosine'.\")\n    distance_func = distance_functions[metric]\n    predictions = []\n    for test_sample in X_test:\n        distances = [distance_func(test_sample, x) for x in X]\n        closest_indices = np.argsort(distances)[:k]\n        k_nearest_labels = y[closest_indices]\n        (unique_labels, counts) = np.unique(k_nearest_labels, return_counts=True)\n        majority_vote = unique_labels[np.argmax(counts)]\n        if len(unique_labels) > 1 and np.max(counts) == (counts == counts.max()).sum():\n            majority_vote = unique_labels[np.argmin(unique_labels[counts == np.max(counts)])]\n        predictions.append(majority_vote)\n    return predictions"}
{"task_id": 146, "completion_id": 3, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b))\n\n    def cosine_distance(a, b, epsilon=1e-12):\n        dot_product = np.dot(a, b)\n        norm_a = np.linalg.norm(a)\n        norm_b = np.linalg.norm(b)\n        return 1 - dot_product / (norm_a * norm_b + epsilon)\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError(\"Metric must be one of 'euclidean', 'manhattan', or 'cosine'.\")\n    predictions = []\n    for test_sample in X_test:\n        distances = [distance_func(test_sample, train_sample) for train_sample in X]\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = y[nearest_indices]\n        (unique_labels, counts) = np.unique(nearest_labels, return_counts=True)\n        majority_vote = unique_labels[np.argmax(counts)]\n        if len(np.where(counts == counts.max())[0]) > 1:\n            majority_vote = unique_labels[np.where(counts == counts.max())].min()\n        predictions.append(majority_vote)\n    return predictions"}
{"task_id": 146, "completion_id": 4, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b))\n\n    def cosine_distance(a, b, eps=1e-12):\n        dot_product = np.dot(a, b)\n        norm_a = np.linalg.norm(a)\n        norm_b = np.linalg.norm(b)\n        return 1 - dot_product / (norm_a * norm_b + eps)\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError(\"Unsupported distance metric. Choose from 'euclidean', 'manhattan', or 'cosine'.\")\n    predictions = []\n    for test_sample in X_test:\n        distances = [distance_func(test_sample, train_sample) for train_sample in X]\n        closest_indices = np.argsort(distances)[:k]\n        closest_labels = y[closest_indices]\n        (unique_labels, counts) = np.unique(closest_labels, return_counts=True)\n        majority_label = unique_labels[np.argmax(counts)]\n        if np.sum(counts == np.max(counts)) > 1:\n            majority_label = unique_labels[np.argmin(unique_labels[counts == np.max(counts)])]\n        predictions.append(majority_label)\n    return predictions"}
{"task_id": 146, "completion_id": 5, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b))\n\n    def cosine_distance(a, b, eps=1e-12):\n        dot_product = np.dot(a, b)\n        norm_a = np.linalg.norm(a)\n        norm_b = np.linalg.norm(b)\n        return 1 - dot_product / (norm_a * norm_b + eps)\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError('Unsupported distance metric')\n    predictions = []\n    for test_sample in X_test:\n        distances = [distance_func(test_sample, X_train) for X_train in X]\n        k_indices = np.argsort(distances)[:k]\n        k_nearest_labels = y[k_indices]\n        label_counts = np.bincount(k_nearest_labels)\n        majority_vote = np.argmax(label_counts)\n        ties = np.where(label_counts == label_counts[majority_vote])[0]\n        smallest_label = ties.min()\n        predictions.append(smallest_label)\n    return predictions.tolist()"}
{"task_id": 146, "completion_id": 6, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b))\n\n    def cosine_distance(a, b, eps=1e-12):\n        dot_product = np.dot(a, b)\n        norm_a = np.linalg.norm(a)\n        norm_b = np.linalg.norm(b)\n        return 1 - dot_product / (norm_a * norm_b + eps)\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError(\"Invalid distance metric. Supported metrics: 'euclidean', 'manhattan', 'cosine'.\")\n    predicted_labels = []\n    n_train_samples = X.shape[0]\n    k = min(k, n_train_samples)\n    for test_sample in X_test:\n        distances = [distance_func(test_sample, train_sample) for train_sample in X]\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = y[nearest_indices]\n        label_counts = np.bincount(nearest_labels)\n        max_count = np.max(label_counts)\n        predicted_label = np.argmin(np.where(label_counts == max_count))\n        predicted_labels.append(predicted_label)\n    return predicted_labels"}
{"task_id": 146, "completion_id": 7, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    k = min(k, len(X))\n    X_norms = np.linalg.norm(X, axis=1, ord=2)\n    predictions = []\n    for test_sample in X_test:\n        if metric == 'euclidean':\n            distances = np.sqrt(np.sum((X - test_sample) ** 2, axis=1))\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X - test_sample), axis=1)\n        elif metric == 'cosine':\n            test_sample_norm = np.linalg.norm(test_sample, ord=2)\n            dot_products = np.dot(X, test_sample)\n            cosine_dists = 1 - dot_products / (X_norms * test_sample_norm + 1e-12)\n            distances = cosine_dists\n        else:\n            raise ValueError(\"Unsupported metric. Choose from 'euclidean', 'manhattan', or 'cosine'.\")\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = y[nearest_indices]\n        (unique_labels, counts) = np.unique(nearest_labels, return_counts=True)\n        majority_label = unique_labels[np.argmax(counts)]\n        if np.sum(counts == counts.max()) > 1:\n            majority_label = unique_labels[np.argmin(unique_labels[counts == counts.max()])]\n        predictions.append(majority_label)\n    return predictions"}
{"task_id": 146, "completion_id": 8, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b))\n\n    def cosine_distance(a, b, eps=1e-12):\n        dot_product = np.dot(a, b)\n        norm_a = np.linalg.norm(a)\n        norm_b = np.linalg.norm(b)\n        return 1 - dot_product / (norm_a * norm_b + eps)\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError(\"Unsupported distance metric. Choose from 'euclidean', 'manhattan', or 'cosine'.\")\n    predictions = []\n    for test_sample in X_test:\n        distances = [distance_func(test_sample, train_sample) for train_sample in X]\n        k_indices = np.argsort(distances)[:min(k, len(distances))]\n        k_nearest_labels = [y[i] for i in k_indices]\n        label_votes = {}\n        for label in k_nearest_labels:\n            if label in label_votes:\n                label_votes[label] += 1\n            else:\n                label_votes[label] = 1\n        max_vote = max(label_votes.values())\n        predicted_label = min([label for (label, vote) in label_votes.items() if vote == max_vote])\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 146, "completion_id": 9, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2))\n\n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2))\n\n    def cosine_distance(x1, x2):\n        epsilon = 1e-12\n        dot_product = np.dot(x1, x2)\n        norm_x1 = np.linalg.norm(x1)\n        norm_x2 = np.linalg.norm(x2)\n        return 1 - dot_product / (norm_x1 * norm_x2 + epsilon)\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError('Unsupported distance metric')\n    predictions = []\n    for x_test in X_test:\n        distances = []\n        for (x_train, label) in zip(X, y):\n            distance = distance_func(x_test, x_train)\n            distances.append((distance, label))\n        distances.sort(key=lambda x: x[0])\n        k_nearest = distances[:k]\n        votes = {label: 0 for label in y}\n        for (_, label) in k_nearest:\n            votes[label] += 1\n        sorted_votes = sorted(votes.items(), key=lambda item: (-item[1], item[0]))\n        predicted_label = sorted_votes[0][0]\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    h1 = np.dot(state, weights['W1']) + weights['b1']\n    h1_relu = np.maximum(0, h1)\n    h2 = np.dot(h1_relu, weights['W2']) + weights['b2']\n    h2_relu = np.maximum(0, h2)\n    action = np.dot(h2_relu, weights['W3']) + weights['b3']\n    action_tanh = np.tanh(action)\n    return [round(x, 4) for x in action_tanh]"}
{"task_id": 155, "completion_id": 1, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    hidden1 = np.dot(state, weights['W1']) + weights['b1']\n    hidden1_relu = np.maximum(0, hidden1)\n    hidden2 = np.dot(hidden1_relu, weights['W2']) + weights['b2']\n    hidden2_relu = np.maximum(0, hidden2)\n    action = np.dot(hidden2_relu, weights['W3']) + weights['b3']\n    action_tanh = np.tanh(action)\n    return [round(action_tanh_i, 4) for action_tanh_i in action_tanh]"}
{"task_id": 155, "completion_id": 2, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    z1 = np.dot(state, weights['W1']) + weights['b1']\n    a1 = np.maximum(0, z1)\n    z2 = np.dot(a1, weights['W2']) + weights['b2']\n    a2 = np.maximum(0, z2)\n    z3 = np.dot(a2, weights['W3']) + weights['b3']\n    action = np.tanh(z3)\n    return [round(a, 4) for a in action]\nstate = [0.1, -0.2, 0.3]\nweights = {'W1': np.array([[0.1, -0.1, 0.2], [0.3, 0.2, -0.3], [0.2, 0.2, 0.3]]), 'b1': np.array([0.1, -0.1, 0.0]), 'W2': np.array([[0.1, 0.2], [-0.1, 0.1], [0.2, -0.2]]), 'b2': np.array([0.0, 0.1]), 'W3': np.array([[0.3, -0.3], [0.2, 0.2]]), 'b3': np.array([0.1, -0.1])}\naction = actor_forward(state, weights)"}
{"task_id": 155, "completion_id": 3, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    hidden1 = np.maximum(0, np.dot(state, weights['W1']) + weights['b1'])\n    hidden2 = np.maximum(0, np.dot(hidden1, weights['W2']) + weights['b2'])\n    action = np.tanh(np.dot(hidden2, weights['W3']) + weights['b3'])\n    return [round(float(a), 4) for a in action]"}
{"task_id": 155, "completion_id": 4, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    h1 = np.dot(state, weights['W1']) + weights['b1']\n    h1_relu = np.maximum(0, h1)\n    h2 = np.dot(h1_relu, weights['W2']) + weights['b2']\n    h2_relu = np.maximum(0, h2)\n    action = np.dot(h2_relu, weights['W3']) + weights['b3']\n    action_tanh = np.tanh(action)\n    return [round(val, 4) for val in action_tanh]"}
{"task_id": 155, "completion_id": 5, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    hidden1 = np.maximum(0, np.dot(state, weights['W1']) + weights['b1'])\n    hidden2 = np.maximum(0, np.dot(hidden1, weights['W2']) + weights['b2'])\n    action = np.tanh(np.dot(hidden2, weights['W3']) + weights['b3'])\n    return np.round(action, 4).tolist()\nweights = {'W1': np.array([[0.1, 0.2], [0.3, 0.4]]), 'b1': np.array([0.1, 0.2]), 'W2': np.array([[0.5, 0.6], [0.7, 0.8]]), 'b2': np.array([0.3, 0.4]), 'W3': np.array([[0.9, 1.0], [1.1, 1.2]]), 'b3': np.array([0.5, 0.6])}\nstate = [0.5, 0.5]\naction = actor_forward(state, weights)"}
{"task_id": 155, "completion_id": 6, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    hidden1 = np.dot(state, weights['W1']) + weights['b1']\n    hidden1_relu = np.maximum(0, hidden1)\n    hidden2 = np.dot(hidden1_relu, weights['W2']) + weights['b2']\n    hidden2_relu = np.maximum(0, hidden2)\n    action = np.dot(hidden2_relu, weights['W3']) + weights['b3']\n    action_tanh = np.tanh(action)\n    return [round(x, 4) for x in action_tanh.tolist()]"}
{"task_id": 155, "completion_id": 7, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    hidden1 = np.dot(state, weights['W1']) + weights['b1']\n    hidden1_relu = np.maximum(0, hidden1)\n    hidden2 = np.dot(hidden1_relu, weights['W2']) + weights['b2']\n    hidden2_relu = np.maximum(0, hidden2)\n    action = np.dot(hidden2_relu, weights['W3']) + weights['b3']\n    action_tanh = np.tanh(action)\n    return [round(x, 4) for x in action_tanh]"}
{"task_id": 155, "completion_id": 8, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    z1 = np.dot(state, weights['W1']) + weights['b1']\n    a1 = np.maximum(0, z1)\n    z2 = np.dot(a1, weights['W2']) + weights['b2']\n    a2 = np.maximum(0, z2)\n    z3 = np.dot(a2, weights['W3']) + weights['b3']\n    action = np.tanh(z3)\n    return [round(x, 4) for x in action]"}
{"task_id": 155, "completion_id": 9, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    hidden1 = np.maximum(0, np.dot(state, weights['W1']) + weights['b1'])\n    hidden2 = np.maximum(0, np.dot(hidden1, weights['W2']) + weights['b2'])\n    action = np.tanh(np.dot(hidden2, weights['W3']) + weights['b3'])\n    return [round(x, 4) for x in action]"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n    w = np.zeros(X.shape[1])\n    b = 0.0\n\n    def soft_threshold(a, tau):\n        return np.sign(a) * max(abs(a) - tau, 0)\n    for _ in range(max_iters):\n        if fit_intercept:\n            b = np.mean(y - X[:, 1:] @ w[1:])\n        for j in range(1, X.shape[1]):\n            w[j] = 0\n            r_j = y - X @ w\n            w[j] = soft_threshold(np.dot(X[:, j], r_j), lambda_param * m) / np.sum(X[:, j] ** 2)\n    weights_list = np.round(w[1:], 4).tolist()\n    bias_float = np.round(b, 4)\n    return (weights_list, bias_float)"}
{"task_id": 160, "completion_id": 1, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n    w = np.zeros(X.shape[1])\n    for _ in range(max_iters):\n        for j in range(X.shape[1]):\n            if j == 0 and fit_intercept:\n                w[j] = np.mean(y - X[:, 1:].dot(w[1:]))\n            else:\n                w[j] = 0\n                rj = y - X.dot(w)\n                numerator = np.dot(X[:, j], rj)\n                denominator = np.sum(X[:, j] ** 2)\n                if denominator == 0:\n                    continue\n                w[j] = np.sign(numerator) * max(abs(numerator) - lambda_param * m, 0) / denominator\n    intercept = w[0] if fit_intercept else 0\n    weights = w[1:] if fit_intercept else w\n    return ([round(weight, 4) for weight in weights], round(intercept, 4))"}
{"task_id": 160, "completion_id": 2, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n    w = np.zeros(X.shape[1])\n    for _ in range(max_iters):\n        if fit_intercept:\n            w[0] = (y - X[:, 1:].dot(w[1:])).mean()\n        for j in range(1, X.shape[1]):\n            w_j_old = w[j]\n            w[j] = 0\n            r_j = y - X.dot(w)\n            a_j = X[:, j].dot(r_j)\n            tau = lambda_param * m\n            w[j] = np.sign(a_j) * max(abs(a_j) - tau, 0) / (X[:, j] ** 2).sum()\n    bias = round(w[0], 4) if fit_intercept else 0.0\n    weights = [round(wi, 4) for wi in w[1:]]\n    return (weights, bias)"}
{"task_id": 160, "completion_id": 3, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack((np.ones((m, 1)), X))\n    else:\n        X = np.hstack((np.zeros((m, 1)), X))\n    w = np.zeros(X.shape[1])\n    m = X.shape[0]\n\n    def soft_threshold(a, tau):\n        return np.sign(a) * max(abs(a) - tau, 0)\n    for _ in range(max_iters):\n        if fit_intercept:\n            w[0] = np.mean(y - X[:, 1:].dot(w[1:]))\n        for j in range(1, X.shape[1]):\n            w_j = w[j]\n            w[j] = 0\n            r_j = y - X.dot(w)\n            w[j] = soft_threshold(X[:, j].dot(r_j), lambda_param * m) / (X[:, j].dot(X[:, j]) + 1e-10)\n    bias = w[0] if fit_intercept else 0.0\n    weights = w[1:] if fit_intercept else w\n    return ([round(w, 4) for w in weights], round(bias, 4))"}
{"task_id": 160, "completion_id": 4, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.c_[np.ones(m), X]\n    else:\n        X = np.c_[np.zeros(m), X]\n    w = np.zeros(n + 1)\n    for _ in range(max_iters):\n        for j in range(n + 1):\n            if j == 0 and fit_intercept:\n                w[j] = np.mean(y - X[:, 1:].dot(w[1:]))\n            else:\n                w[j] = 0\n                r_j = y - X.dot(w)\n                Aj = X[:, j].dot(X[:, j])\n                Cj = X[:, j].dot(r_j)\n                w[j] = np.sign(Cj) * max(abs(Cj) - lambda_param * m, 0) / Aj if Aj > 0 else 0\n    if fit_intercept:\n        intercept = round(w[0], 4)\n        weights = [round(w_i, 4) for w_i in w[1:]]\n    else:\n        intercept = 0.0\n        weights = [round(w_i, 4) for w_i in w]\n    return (weights, intercept)"}
{"task_id": 160, "completion_id": 5, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n    w = np.zeros(X.shape[1])\n\n    def soft_threshold(a, tau):\n        return np.sign(a) * max(abs(a) - tau, 0)\n    for _ in range(max_iters):\n        if fit_intercept:\n            residuals = y - X @ w\n            w[0] = residuals.mean()\n        for j in range(1, n + 1):\n            w_j_old = w[j]\n            w[j] = 0\n            r_j = y - X @ w\n            x_j = X[:, j]\n            arg_soft_threshold = x_j @ r_j\n            tau = lambda_param * m\n            w[j] = soft_threshold(arg_soft_threshold, tau) / (x_j ** 2).sum()\n    intercept = w[0] if fit_intercept else 0.0\n    weights = w[1:] if fit_intercept else w\n    return (list(np.round(weights, 4)), np.round(intercept, 4))"}
{"task_id": 160, "completion_id": 6, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n    w = np.zeros(n + 1)\n    for _ in range(max_iters):\n        for j in range(n + 1):\n            if j == 0 and fit_intercept:\n                w[j] = np.mean(y - X[:, 1:].dot(w[1:]))\n            else:\n                w_j_old = w[j]\n                w[j] = 0\n                r_j = y - X.dot(w)\n                rho = X[:, j].dot(r_j)\n                alpha = X[:, j].dot(X[:, j])\n                w[j] = np.sign(rho) * max(abs(rho) - lambda_param * m, 0) / alpha\n    bias = round(w[0], 4) if fit_intercept else 0.0\n    weights = [round(wi, 4) for wi in w[1:]]\n    return (weights, bias)"}
{"task_id": 160, "completion_id": 7, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n    n = X.shape[1]\n    w = np.zeros(n)\n    for _ in range(max_iters):\n        if fit_intercept:\n            w[0] = np.mean(y - X[:, 1:].dot(w[1:]))\n        for j in range(1, n):\n            X_j = X[:, j]\n            X_j_squared_sum = np.sum(X_j ** 2)\n            r_j = y - X.dot(w) + w[j] * X_j\n            w[j] = np.sign(np.dot(X_j, r_j)) * max(abs(np.dot(X_j, r_j)) - lambda_param * m, 0) / X_j_squared_sum\n    bias = w[0] if fit_intercept else 0.0\n    weights = w[1:] if fit_intercept else w\n    return ([round(weight, 4) for weight in weights], round(bias, 4))"}
{"task_id": 160, "completion_id": 8, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n    w = np.zeros(n + 1)\n    for _ in range(max_iters):\n        if fit_intercept:\n            residuals = y - X @ w\n            w[0] = np.mean(residuals)\n        for j in range(1, n + 1):\n            X_j = X[:, j]\n            X_other = X[:, [i for i in range(n + 1) if i != j]]\n            w[j] = 0\n            residuals = y - X_other @ w[1:]\n            r_j = residuals\n            rho = X_j.T @ r_j\n            w_j_new = np.sign(rho) * max(abs(rho) - lambda_param * m, 0)\n            w[j] = w_j_new / (X_j.T @ X_j)\n    bias = w[0] if fit_intercept else 0\n    weights = w[1:].tolist()\n    return ([round(wi, 4) for wi in weights], round(bias, 4))"}
{"task_id": 160, "completion_id": 9, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X_b = np.c_[np.ones((m, 1)), X]\n        b = 0.0\n        weights = np.zeros(n + 1)\n    else:\n        X_b = np.c_[np.zeros((m, 1)), X]\n        b = 0.0\n        weights = np.zeros(n + 1)\n    for _ in range(max_iters):\n        if fit_intercept:\n            y_pred = X_b @ weights\n            residuals = y - y_pred\n            b = np.mean(residuals)\n            X_b[:, 0] = 1.0\n        else:\n            b = 0.0\n        for j in range(1, n + 1):\n            y_pred = X_b @ weights\n            residuals = y - y_pred + weights[j] * X_b[:, j]\n            xi_j_squared_sum = np.sum(X_b[:, j] ** 2)\n            w_j = np.sign(np.dot(X_b[:, j], residuals)) * max(np.abs(np.dot(X_b[:, j], residuals)) - lambda_param * m, 0) / xi_j_squared_sum\n            weights[j] = w_j\n    if fit_intercept:\n        final_weights = weights[1:]\n        final_bias = b\n    else:\n        final_weights = weights\n        final_bias = 0.0\n    return ([round(w, 4) for w in final_weights], round(final_bias, 4))"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    x = np.array(x) if not isinstance(x, np.ndarray) else x\n    y = np.array(y) if not isinstance(y, np.ndarray) else y\n    if x.size != y.size:\n        return -1\n    distance = np.mean(x != y)\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 1, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    x = np.asarray(x)\n    y = np.asarray(y)\n    if x.shape != y.shape:\n        return -1\n    distance = np.mean(x != y)\n    return round(float(distance), 4)"}
{"task_id": 165, "completion_id": 2, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(y, list):\n        y = np.array(y)\n    if x.shape != y.shape:\n        return -1\n    N = len(x)\n    distance = np.sum(x != y) / N\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 3, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    if not isinstance(y, np.ndarray):\n        y = np.array(y)\n    if x.shape != y.shape:\n        return -1\n    N = x.size\n    distance = np.sum(x != y) / N\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 4, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    x = np.array(x) if not isinstance(x, np.ndarray) else x\n    y = np.array(y) if not isinstance(y, np.ndarray) else y\n    if x.shape != y.shape:\n        return -1\n    distance = np.mean(x != y)\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 5, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    x_np = np.array(x)\n    y_np = np.array(y)\n    if x_np.size != y_np.size:\n        return -1\n    distance = np.mean(x_np != y_np)\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 6, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    if not isinstance(y, np.ndarray):\n        y = np.array(y)\n    if x.shape != y.shape:\n        return -1\n    distance = np.sum(x != y) / len(x)\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 7, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    if not isinstance(y, np.ndarray):\n        y = np.array(y)\n    if x.shape != y.shape:\n        return -1\n    N = x.size\n    distance = np.sum(x != y) / N\n    return round(distance, 4)"}
{"task_id": 165, "completion_id": 8, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n    if x_arr.shape != y_arr.shape:\n        return -1\n    N = x_arr.size\n    differences = np.sum(x_arr != y_arr)\n    hamming_dist = differences / N\n    return round(hamming_dist, 4)"}
{"task_id": 165, "completion_id": 9, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    x = np.array(x) if not isinstance(x, np.ndarray) else x\n    y = np.array(y) if not isinstance(y, np.ndarray) else y\n    if x.shape != y.shape:\n        return -1\n    distance = np.mean(x != y)\n    return round(distance, 4)"}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if window not in ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']:\n        raise ValueError('Unknown window type.')\n    n = np.arange(N)\n    if window == 'hamming':\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'hann':\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'blackman_harris':\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for 'generalized_cosine' window type.\")\n        M = len(coefficients)\n        w = np.zeros(N)\n        for k in range(M):\n            w += coefficients[k] * np.cos(2 * k * np.pi * n / (N - 1))\n    return [round(coef, 4) for coef in w.tolist()]"}
{"task_id": 169, "completion_id": 1, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if N == 1:\n        return [1.0]\n    n = np.arange(N)\n    if window == 'hamming':\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'hann':\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Coefficients must be provided for generalized_cosine window.')\n        w = sum((a * np.cos(2 * np.pi * k * n / (N - 1)) for (k, a) in enumerate(coefficients)))\n    else:\n        raise ValueError(f'Unknown window type: {window}')\n    return [round(coef, 4) for coef in w.tolist()]"}
{"task_id": 169, "completion_id": 2, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError('N must be a positive integer.')\n    n = np.arange(N)\n    w = np.zeros(N)\n    if window == 'hamming':\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'hann':\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'blackman_harris':\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Coefficients must be provided for the generalized_cosine window.')\n        for (k, a_k) in enumerate(coefficients):\n            w += a_k * np.cos(2 * np.pi * k * n / (N - 1))\n    else:\n        raise ValueError(f'Unknown window type: {window}')\n    return [round(coef, 4) for coef in w.tolist()]"}
{"task_id": 169, "completion_id": 3, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if N == 1:\n        return [1.0]\n    n = np.arange(N)\n    if window == 'hamming':\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'hann':\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == 'generalized_cosine' and coefficients is not None:\n        w = np.zeros(N)\n        for (k, a_k) in enumerate(coefficients):\n            w += a_k * np.cos(2 * k * np.pi * n / (N - 1))\n    else:\n        raise ValueError('Unknown window type.')\n    return [round(coef, 4) for coef in w.tolist()]"}
{"task_id": 169, "completion_id": 4, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if N == 1:\n        return [1.0]\n    n = np.arange(N)\n    if window == 'hamming':\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'hann':\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Coefficients must be provided for generalized_cosine window.')\n        w = sum((a * np.cos(2 * k * np.pi * n / (N - 1)) for (k, a) in enumerate(coefficients)))\n    else:\n        raise ValueError(f'Unknown window type: {window}')\n    return [round(coef, 4) for coef in w.tolist()]"}
{"task_id": 169, "completion_id": 5, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if window not in ['hamming', 'hann', 'blackman_harris', 'generalized_cosine']:\n        raise ValueError('Unknown window type.')\n    if N == 1:\n        return [1.0]\n    n = np.arange(N)\n    if window == 'hamming':\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'hann':\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Coefficients must be provided for generalized_cosine window.')\n        w = np.zeros(N)\n        for (k, ak) in enumerate(coefficients):\n            w += ak * np.cos(2 * k * np.pi * n / (N - 1))\n    return [round(coef, 4) for coef in w]"}
{"task_id": 169, "completion_id": 6, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if N == 1:\n        return [1.0]\n    n = np.arange(N)\n    if window == 'hamming':\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'hann':\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'blackman_harris':\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Coefficients must be provided for generalized_cosine window.')\n        w = sum((a_k * np.cos(2 * k * np.pi * n / (N - 1)) for (k, a_k) in enumerate(coefficients)))\n    else:\n        raise ValueError(f'Unknown window type: {window}')\n    return [round(coef, 4) for coef in w.tolist()]"}
{"task_id": 169, "completion_id": 7, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError('N must be a positive integer.')\n    n = np.arange(N)\n    if window == 'hamming':\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'hann':\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Coefficients must be provided for generalized_cosine window.')\n        M = len(coefficients)\n        w = np.zeros(N)\n        for k in range(M):\n            w += coefficients[k] * np.cos(2 * k * np.pi * n / (N - 1))\n    else:\n        raise ValueError(f'Unknown window type: {window}')\n    return [round(coef, 4) for coef in w.tolist()]"}
{"task_id": 169, "completion_id": 8, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if N == 1:\n        return [1.0] * N\n    if window == 'hamming':\n        a = 0.54\n        b = 0.46\n        w = [a - b * np.cos(2 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == 'hann':\n        a = 0.5\n        b = 0.5\n        w = [a - b * np.cos(2 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == 'blackman_harris':\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        w = [a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Coefficients must be provided for generalized_cosine window.')\n        w = [sum((a_k * np.cos(2 * np.pi * k * n / (N - 1)) for (k, a_k) in enumerate(coefficients))) for n in range(N)]\n    else:\n        raise ValueError(f'Unknown window type: {window}')\n    return [round(x, 4) for x in w]"}
{"task_id": 169, "completion_id": 9, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer.')\n    if N == 1:\n        return [1.0]\n    if window == 'hamming':\n        w = [0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == 'hann':\n        w = [0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        w = [a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for 'generalized_cosine' window.\")\n        M = len(coefficients)\n        w = [sum((a_k * np.cos(2 * np.pi * k * n / (N - 1)) for (k, a_k) in enumerate(coefficients))) for n in range(N)]\n    else:\n        raise ValueError(f'Unknown window type: {window}')\n    return [round(coef, 4) for coef in w]"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[y] for y in y_train])\n    X_train_b = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test_b = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    weights = np.zeros(X_train_b.shape[1])\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    n_samples = X_train_b.shape[0]\n    for epoch in range(epochs):\n        for start in range(0, n_samples, batch_size):\n            end = start + batch_size\n            X_batch = X_train_b[start:end]\n            y_batch = y_train_mapped[start:end]\n            predictions = sigmoid(np.dot(X_batch, weights))\n            gradient = np.dot(X_batch.T, predictions - y_batch) / len(y_batch)\n            weights -= learning_rate * gradient\n    test_probabilities = sigmoid(np.dot(X_test_b, weights))\n    predictions = np.where(test_probabilities >= 0.5, 1, 0)\n    original_label_map = {v: k for (k, v) in label_map.items()}\n    predicted_labels = [original_label_map[p] for p in predictions]\n    return predicted_labels"}
{"task_id": 171, "completion_id": 1, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    if len(np.unique(y_train)) == 1:\n        return [y_train[0]] * len(X_test)\n    label_map = {y_train[0]: 0, y_train[1]: 1}\n    y_train_mapped = np.array([label_map[y] for y in y_train])\n    X_train_b = np.c_[np.ones((X_train.shape[0], 1)), X_train]\n    X_test_b = np.c_[np.ones((X_test.shape[0], 1)), X_test]\n    weights = np.zeros(X_train_b.shape[1])\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    for _ in range(epochs):\n        indices = np.arange(X_train_b.shape[0])\n        np.random.shuffle(indices)\n        X_train_b_shuffled = X_train_b[indices]\n        y_train_mapped_shuffled = y_train_mapped[indices]\n        for i in range(0, X_train_b_shuffled.shape[0], batch_size):\n            X_batch = X_train_b_shuffled[i:i + batch_size]\n            y_batch = y_train_mapped_shuffled[i:i + batch_size]\n            y_pred = sigmoid(X_batch.dot(weights))\n            gradient = X_batch.T.dot(y_pred - y_batch) / y_batch.size\n            weights -= learning_rate * gradient\n    y_test_pred_prob = sigmoid(X_test_b.dot(weights))\n    y_test_pred_mapped = (y_test_pred_prob >= 0.5).astype(int)\n    inverse_label_map = {v: k for (k, v) in label_map.items()}\n    y_test_pred = [inverse_label_map[y] for y in y_test_pred_mapped]\n    return y_test_pred"}
{"task_id": 171, "completion_id": 2, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    if len(np.unique(y_train)) == 1:\n        return [y_train[0]] * len(X_test)\n    label_map = {y_train[0]: 0, y_train[1]: 1}\n    y_train_mapped = np.array([label_map[y] for y in y_train])\n    X_train = np.c_[np.ones(X_train.shape[0]), X_train]\n    X_test = np.c_[np.ones(X_test.shape[0]), X_test]\n    weights = np.zeros(X_train.shape[1])\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    for epoch in range(epochs):\n        indices = np.arange(X_train.shape[0])\n        np.random.shuffle(indices)\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_mapped[indices]\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n            z = np.dot(X_batch, weights)\n            y_pred = sigmoid(z)\n            gradient = np.dot(X_batch.T, y_pred - y_batch) / y_batch.size\n            weights -= learning_rate * gradient\n    z_test = np.dot(X_test, weights)\n    y_pred_test_prob = sigmoid(z_test)\n    y_pred_test_mapped = (y_pred_test_prob >= 0.5).astype(int)\n    reverse_label_map = {v: k for (k, v) in label_map.items()}\n    y_pred_test = [reverse_label_map[y] for y in y_pred_test_mapped]\n    return y_pred_test"}
{"task_id": 171, "completion_id": 3, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n    intercept_train = np.ones((X_train.shape[0], 1))\n    X_train = np.hstack((intercept_train, X_train))\n    intercept_test = np.ones((X_test.shape[0], 1))\n    X_test = np.hstack((intercept_test, X_test))\n    weights = np.zeros(X_train.shape[1])\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    for epoch in range(epochs):\n        indices = np.arange(X_train.shape[0])\n        np.random.shuffle(indices)\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_mapped[indices]\n        for start in range(0, X_train.shape[0], batch_size):\n            end = start + batch_size\n            X_batch = X_train_shuffled[start:end]\n            y_batch = y_train_shuffled[start:end]\n            z = np.dot(X_batch, weights)\n            y_pred_batch = sigmoid(z)\n            error = y_pred_batch - y_batch\n            gradient = np.dot(X_batch.T, error) / X_batch.shape[0]\n            weights -= learning_rate * gradient\n    z_test = np.dot(X_test, weights)\n    y_pred_test_prob = sigmoid(z_test)\n    inverse_label_map = {v: k for (k, v) in label_map.items()}\n    y_pred_test = [inverse_label_map[int(prob >= 0.5)] for prob in y_pred_test_prob]\n    return y_pred_test"}
{"task_id": 171, "completion_id": 4, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    reverse_label_map = {0: unique_labels[0], 1: unique_labels[1]}\n    y_train_internal = np.array([label_map[y] for y in y_train])\n    X_train = np.c_[np.ones(X_train.shape[0]), X_train]\n    X_test = np.c_[np.ones(X_test.shape[0]), X_test]\n    weights = np.zeros(X_train.shape[1])\n    for epoch in range(epochs):\n        indices = np.arange(X_train.shape[0])\n        np.random.shuffle(indices)\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_internal[indices]\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n            predictions = 1 / (1 + np.exp(-np.dot(X_batch, weights)))\n            gradient = np.dot(X_batch.T, predictions - y_batch) / X_batch.shape[0]\n            weights -= learning_rate * gradient\n    test_predictions_proba = 1 / (1 + np.exp(-np.dot(X_test, weights)))\n    test_predictions_internal = (test_predictions_proba >= 0.5).astype(int)\n    test_predictions = [reverse_label_map[p] for p in test_predictions_internal]\n    return test_predictions"}
{"task_id": 171, "completion_id": 5, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) != 2:\n        raise ValueError('Exactly two distinct labels are required for binary classification.')\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    reverse_label_map = {0: unique_labels[0], 1: unique_labels[1]}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    X_train = np.hstack([np.ones((X_train.shape[0], 1)), X_train])\n    X_test = np.hstack([np.ones((X_test.shape[0], 1)), X_test])\n    weights = np.zeros(X_train.shape[1])\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    num_samples = X_train.shape[0]\n    for epoch in range(epochs):\n        indices = np.arange(num_samples)\n        np.random.shuffle(indices)\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_mapped[indices]\n        for start in range(0, num_samples, batch_size):\n            end = start + batch_size\n            X_batch = X_train_shuffled[start:end]\n            y_batch = y_train_shuffled[start:end]\n            probabilities = sigmoid(X_batch.dot(weights))\n            error = probabilities - y_batch\n            gradient = X_batch.T.dot(error) / len(X_batch)\n            weights -= learning_rate * gradient\n    test_probabilities = sigmoid(X_test.dot(weights))\n    predictions_mapped = (test_probabilities >= 0.5).astype(int)\n    predictions = [reverse_label_map[pred] for pred in predictions_mapped]\n    return predictions"}
{"task_id": 171, "completion_id": 6, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) != 2:\n        raise ValueError('y_train must contain exactly two distinct labels.')\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[y] for y in y_train])\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    X_train = np.c_[np.ones(X_train.shape[0]), X_train]\n    X_test = np.c_[np.ones(X_test.shape[0]), X_test]\n    weights = np.zeros(X_train.shape[1])\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    for epoch in range(epochs):\n        indices = np.arange(X_train.shape[0])\n        np.random.shuffle(indices)\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_mapped[indices]\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n            z = np.dot(X_batch, weights)\n            predictions = sigmoid(z)\n            gradient = np.dot(X_batch.T, predictions - y_batch) / len(y_batch)\n            weights -= learning_rate * gradient\n    z_test = np.dot(X_test, weights)\n    probabilities = sigmoid(z_test)\n    predictions_mapped = (probabilities >= 0.5).astype(int)\n    inverse_label_map = {v: k for (k, v) in label_map.items()}\n    predictions = [inverse_label_map[p] for p in predictions_mapped]\n    return predictions"}
{"task_id": 171, "completion_id": 7, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n    X_train_intercept = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test_intercept = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    weights = np.zeros(X_train_intercept.shape[1])\n    num_samples = X_train_intercept.shape[0]\n    for epoch in range(epochs):\n        indices = np.arange(num_samples)\n        np.random.shuffle(indices)\n        X_train_shuffled = X_train_intercept[indices]\n        y_train_shuffled = y_train_mapped[indices]\n        for i in range(0, num_samples, batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n            z = np.dot(X_batch, weights)\n            predictions = 1 / (1 + np.exp(-z))\n            error = predictions - y_batch\n            gradient = np.dot(X_batch.T, error) / y_batch.size\n            weights -= learning_rate * gradient\n    z_test = np.dot(X_test_intercept, weights)\n    probabilities_test = 1 / (1 + np.exp(-z_test))\n    predictions_test = (probabilities_test >= 0.5).astype(int)\n    reverse_label_map = {v: k for (k, v) in label_map.items()}\n    predictions_test_original_labels = [reverse_label_map[label] for label in predictions_test]\n    return predictions_test_original_labels"}
{"task_id": 171, "completion_id": 8, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    reverse_label_map = {v: k for (k, v) in label_map.items()}\n    y_train_mapped = np.array([label_map[y] for y in y_train])\n    X_train = np.c_[np.ones(X_train.shape[0]), X_train]\n    X_test = np.c_[np.ones(X_test.shape[0]), X_test]\n    weights = np.zeros(X_train.shape[1])\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n\n    def mini_batch_gd(X, y, weights, epochs, learning_rate, batch_size):\n        m = X.shape[0]\n        for _ in range(epochs):\n            indices = np.arange(m)\n            np.random.shuffle(indices)\n            for i in range(0, m, batch_size):\n                batch_indices = indices[i:i + batch_size]\n                X_batch = X[batch_indices]\n                y_batch = y[batch_indices]\n                z = np.dot(X_batch, weights)\n                y_pred = sigmoid(z)\n                gradient = np.dot(X_batch.T, y_pred - y_batch) / len(batch_indices)\n                weights -= learning_rate * gradient\n    mini_batch_gd(X_train, y_train_mapped, weights, epochs, learning_rate, batch_size)\n    z_test = np.dot(X_test, weights)\n    y_test_pred_prob = sigmoid(z_test)\n    y_test_pred_mapped = (y_test_pred_prob > 0.5).astype(int)\n    y_test_pred = [reverse_label_map[y] for y in y_test_pred_mapped]\n    return y_test_pred"}
{"task_id": 171, "completion_id": 9, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n    X_train = np.c_[np.ones((X_train.shape[0], 1)), X_train]\n    X_test = np.c_[np.ones((X_test.shape[0], 1)), X_test]\n    weights = np.zeros(X_train.shape[1])\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    for _ in range(epochs):\n        indices = np.arange(X_train.shape[0])\n        np.random.shuffle(indices)\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_mapped[indices]\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n            z = np.dot(X_batch, weights)\n            y_pred = sigmoid(z)\n            gradient = np.dot(X_batch.T, y_pred - y_batch) / len(y_batch)\n            weights -= learning_rate * gradient\n    z_test = np.dot(X_test, weights)\n    y_pred_test_prob = sigmoid(z_test)\n    predictions_mapped = (y_pred_test_prob > 0.5).astype(int)\n    predictions_original_labels = [unique_labels[pred] for pred in predictions_mapped]\n    return predictions_original_labels"}
{"task_id": 176, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"Trains an AdaBoost classifier with decision stumps and predicts the test set labels.\"\"\"\n    X_train = np.array(X_train, dtype=float)\n    y_train = np.array(y_train, dtype=int)\n    X_test = np.array(X_test, dtype=float)\n    y_train = np.where(y_train == 0, -1, 1)\n    (n_samples, n_features) = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_stump = {}\n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples, dtype=int) * polarity\n                    predictions[X_train[:, feature] < threshold] *= -polarity\n                    missclassified = weights[predictions != y_train]\n                    error = np.sum(missclassified)\n                    if error < min_error:\n                        min_error = error\n                        best_stump['feature_index'] = feature\n                        best_stump['threshold'] = threshold\n                        best_stump['polarity'] = polarity\n                        best_predictions = predictions\n        if min_error == 0:\n            break\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        weights *= np.exp(-alpha * y_train * best_predictions)\n        weights /= np.sum(weights)\n        best_stump['alpha'] = alpha\n        stumps.append(best_stump)\n    test_predictions = np.zeros(X_test.shape[0], dtype=float)\n    for stump in stumps:\n        feature_index = stump['feature_index']\n        threshold = stump['threshold']\n        polarity = stump['polarity']\n        alpha = stump['alpha']\n        predictions = np.ones(X_test.shape[0], dtype=int) * polarity\n        predictions[X_test[:, feature_index] < threshold] *= -polarity\n        test_predictions += alpha * predictions\n    final_predictions = np.where(test_predictions >= 0, 1, 0)\n    return final_predictions.tolist()"}
{"task_id": 176, "completion_id": 1, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict on X_test.\"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    (n_samples, n_features) = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n    y_train_binary = np.where(y_train == 0, -1, 1)\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_stump = {}\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[X_train[:, feature_index] >= threshold] = -1\n                    else:\n                        predictions[X_train[:, feature_index] < threshold] = -1\n                    weighted_error = np.sum(weights[predictions != y_train_binary])\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n                    if min_error == 0:\n                        break\n                if min_error == 0:\n                    break\n            if min_error == 0:\n                break\n        error_rate = min_error / np.sum(weights)\n        if error_rate == 0:\n            error_rate = 1e-10\n        alpha = 0.5 * np.log((1 - error_rate) / error_rate)\n        predictions = np.ones(n_samples)\n        if best_stump['polarity'] == 1:\n            predictions[X_train[:, best_stump['feature_index']] >= best_stump['threshold']] = -1\n        else:\n            predictions[X_train[:, best_stump['feature_index']] < best_stump['threshold']] = -1\n        weights *= np.exp(-alpha * y_train_binary * predictions)\n        weights /= np.sum(weights)\n        stumps.append(best_stump)\n        alphas.append(alpha)\n        if min_error == 0:\n            break\n    final_predictions = np.zeros(X_test.shape[0])\n    for (alpha, stump) in zip(alphas, stumps):\n        stump_predictions = np.ones(X_test.shape[0])\n        if stump['polarity'] == 1:\n            stump_predictions[X_test[:, stump['feature_index']] >= stump['threshold']] = -1\n        else:\n            stump_predictions[X_test[:, stump['feature_index']] < stump['threshold']] = -1\n        final_predictions += alpha * stump_predictions\n    final_predictions = np.where(final_predictions > 0, 1, 0).tolist()\n    return final_predictions"}
{"task_id": 176, "completion_id": 2, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble using decision stumps and predict the classes for X_test.\"\"\"\n\n    def decision_stump_predict(X, feature_index, threshold, polarity):\n        \"\"\"Predict using a single decision stump.\"\"\"\n        prediction = np.ones(len(X))\n        if polarity == 1:\n            prediction[X[:, feature_index] >= threshold] = -1\n        else:\n            prediction[X[:, feature_index] < threshold] = -1\n        return prediction\n\n    def train_decision_stump(X, y, weights):\n        \"\"\"Train a single decision stump with the given weights.\"\"\"\n        (m, n) = X.shape\n        best_feature = 0\n        best_threshold = 0\n        best_polarity = 1\n        best_error = float('inf')\n        for feature_index in range(n):\n            unique_values = np.unique(X[:, feature_index])\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2.0\n            for threshold in thresholds:\n                for polarity in (1, -1):\n                    predictions = decision_stump_predict(X, feature_index, threshold, polarity)\n                    weighted_error = np.sum(weights[predictions != y])\n                    if weighted_error < best_error:\n                        best_error = weighted_error\n                        best_feature = feature_index\n                        best_threshold = threshold\n                        best_polarity = polarity\n        return (best_feature, best_threshold, best_polarity, best_error)\n    X_train = np.array(X_train)\n    y_train = np.array(y_train) * 2 - 1\n    n_samples = len(X_train)\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alpha = []\n    for _ in range(n_estimators):\n        (feature, thresh, polarity, error) = train_decision_stump(X_train, y_train, weights)\n        if error < 1e-10:\n            break\n        stumps.append((feature, thresh, polarity))\n        a = 0.5 * np.log((1.0 - error) / (error + 1e-10))\n        alpha.append(a)\n        predictions = decision_stump_predict(X_train, feature, thresh, polarity)\n        weights *= np.exp(-a * y_train * predictions)\n        weights /= np.sum(weights)\n    X_test = np.array(X_test)\n    predictions = np.zeros(len(X_test))\n    for (a, (feature, thresh, polarity)) in zip(alpha, stumps):\n        predictions += a * decision_stump_predict(X_test, feature, thresh, polarity)\n    predicted_classes = np.where(predictions > 0, 1, 0)\n    return predicted_classes.tolist()"}
{"task_id": 176, "completion_id": 3, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"Train an AdaBoost classifier using decision stumps and predict the class labels for X_test.\"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    weak_classifiers = []\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_stump = {}\n        best_predictions = np.zeros(n_samples)\n        for feature_i in range(n_features):\n            feature_values = X_train[:, feature_i]\n            unique_values = np.unique(feature_values)\n            for threshold in unique_values:\n                for polarity in (1, -1):\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[feature_values >= threshold] = -1\n                    else:\n                        predictions[feature_values < threshold] = -1\n                    weighted_error = np.sum(sample_weights[y_train != predictions])\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = {'feature_index': feature_i, 'threshold': threshold, 'polarity': polarity}\n                        best_predictions = predictions\n                    if min_error == 0:\n                        break\n                if min_error == 0:\n                    break\n            if min_error == 0:\n                break\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        sample_weights *= np.exp(-alpha * y_train * best_predictions)\n        sample_weights /= np.sum(sample_weights)\n        weak_classifiers.append({'stump': best_stump, 'alpha': alpha})\n        if min_error == 0:\n            break\n    n_test_samples = X_test.shape[0]\n    y_pred = np.zeros(n_test_samples)\n    for weak_classifier in weak_classifiers:\n        stump = weak_classifier['stump']\n        alpha = weak_classifier['alpha']\n        feature_values = X_test[:, stump['feature_index']]\n        predictions = np.ones(n_test_samples)\n        if stump['polarity'] == 1:\n            predictions[feature_values >= stump['threshold']] = -1\n        else:\n            predictions[feature_values < stump['threshold']] = -1\n        y_pred += alpha * predictions\n    y_pred = np.where(y_pred > 0, 1, 0)\n    return y_pred.tolist()"}
{"task_id": 176, "completion_id": 4, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble with decision stumps and predict the test set.\"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    (n_samples, n_features) = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    ensemble = []\n    for _ in range(n_estimators):\n        best_stump = {'feature_index': None, 'threshold': None, 'polarity': None, 'error': float('inf')}\n        for feature_i in range(n_features):\n            thresholds = np.unique(X_train[:, feature_i])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples) * polarity\n                    predictions[X_train[:, feature_i] < threshold if polarity == 1 else X_train[:, feature_i] >= threshold] *= -1\n                    weighted_error = (weights * (predictions != y_train)).sum()\n                    if weighted_error < best_stump['error']:\n                        best_stump['feature_index'] = feature_i\n                        best_stump['threshold'] = threshold\n                        best_stump['polarity'] = polarity\n                        best_stump['error'] = weighted_error\n        best_stump['alpha'] = 0.5 * np.log((1 - best_stump['error']) / (best_stump['error'] + 1e-10))\n        ensemble.append(best_stump)\n        for i in range(n_samples):\n            weights[i] *= np.exp(-best_stump['alpha'] * y_train[i] * predictions[i])\n        weights /= weights.sum()\n        if best_stump['error'] == 0:\n            break\n    n_test_samples = X_test.shape[0]\n    ensemble_predictions = np.zeros((n_test_samples, len(ensemble)))\n    for (i, stump) in enumerate(ensemble):\n        prediction = np.ones(n_test_samples) * stump['polarity']\n        prediction[X_test[:, stump['feature_index']] < stump['threshold'] if stump['polarity'] == 1 else X_test[:, stump['feature_index']] >= stump['threshold']] *= -1\n        ensemble_predictions[:, i] = stump['alpha'] * prediction\n    final_predictions = np.sign(np.sum(ensemble_predictions, axis=1))\n    final_predictions = np.where(final_predictions == 1, 1, 0).tolist()\n    return final_predictions"}
{"task_id": 176, "completion_id": 5, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"Trains an AdaBoost model using decision stumps and predicts the class labels for X_test.\"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    (n_samples, n_features) = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n    y_train_labels = np.where(y_train == 0, -1, 1)\n    for _ in range(n_estimators):\n        (stump, error) = find_best_stump(X_train, y_train_labels, weights)\n        if error == 0:\n            break\n        alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        predictions = stump.predict(X_train)\n        weights *= np.exp(-alpha * y_train_labels * predictions)\n        weights /= weights.sum()\n        stumps.append(stump)\n        alphas.append(alpha)\n    test_predictions = np.zeros(len(X_test))\n    for (alpha, stump) in zip(alphas, stumps):\n        test_predictions += alpha * stump.predict(X_test)\n    final_predictions = np.where(test_predictions >= 0, 1, 0)\n    return final_predictions.tolist()"}
{"task_id": 176, "completion_id": 6, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"Fill in here. The final implementation must follow the specification given in the task\n    description and return a list with the predicted class labels for *X_test*.\"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    stumps = []\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_feature_index = None\n        best_threshold = None\n        best_polarity = None\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    predictions[X_train[:, feature_index] * polarity < threshold * polarity] = -1\n                    error = np.sum(sample_weights[y_train != predictions])\n                    if error < min_error:\n                        min_error = error\n                        best_feature_index = feature_index\n                        best_threshold = threshold\n                        best_polarity = polarity\n        min_error = np.clip(min_error, a_min=1e-10, a_max=1 - 1e-10)\n        alpha = 0.5 * np.log((1 - min_error) / min_error)\n        if min_error == 0:\n            break\n        predictions = np.ones(n_samples)\n        predictions[X_train[:, best_feature_index] * best_polarity < best_threshold * best_polarity] = -1\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n        stumps.append((alpha, best_feature_index, best_threshold, best_polarity))\n    n_test_samples = X_test.shape[0]\n    predictions = np.zeros(n_test_samples)\n    for (alpha, feature_index, threshold, polarity) in stumps:\n        stump_predictions = np.ones(n_test_samples)\n        stump_predictions[X_test[:, feature_index] * polarity < threshold * polarity] = -1\n        predictions += alpha * stump_predictions\n    final_predictions = (predictions >= 0).astype(int)\n    return final_predictions.tolist()"}
{"task_id": 176, "completion_id": 7, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"Implement the AdaBoost algorithm using decision stumps as weak learners.\"\"\"\n\n    def decision_stump_predict(X, feature_index, threshold, polarity):\n        predictions = np.ones(X.shape[0])\n        if polarity == 1:\n            predictions[X[:, feature_index] >= threshold] = -1\n        else:\n            predictions[X[:, feature_index] < threshold] = -1\n        return predictions\n\n    def find_best_stump(X, y, weights):\n        (m, n) = X.shape\n        min_error = np.inf\n        best_feature_index = None\n        best_threshold = None\n        best_polarity = None\n        for feature_index in range(n):\n            thresholds = set(X[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = decision_stump_predict(X, feature_index, threshold, polarity)\n                    weighted_error = np.sum(weights[predictions != y])\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_feature_index = feature_index\n                        best_threshold = threshold\n                        best_polarity = polarity\n        return (best_feature_index, best_threshold, best_polarity, min_error)\n    X_train = np.array(X_train)\n    y_train = np.array(y_train) * 2 - 1\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    classifier_weights = []\n    for _ in range(n_estimators):\n        (best_feature_index, best_threshold, best_polarity, min_error) = find_best_stump(X_train, y_train, sample_weights)\n        if min_error == 0:\n            break\n        alpha = 0.5 * np.log((1.0 - min_error) / (min_error + 1e-10))\n        predictions = decision_stump_predict(X_train, best_feature_index, best_threshold, best_polarity)\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n        classifiers.append((best_feature_index, best_threshold, best_polarity))\n        classifier_weights.append(alpha)\n    X_test = np.array(X_test)\n    final_predictions = np.zeros(X_test.shape[0])\n    for ((feature_index, threshold, polarity), alpha) in zip(classifiers, classifier_weights):\n        predictions = decision_stump_predict(X_test, feature_index, threshold, polarity)\n        final_predictions += alpha * predictions\n    final_predictions = np.where(final_predictions > 0, 1, 0)\n    return final_predictions.tolist()"}
{"task_id": 176, "completion_id": 8, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict the class labels for X_test.\"\"\"\n\n    def decision_stump_predict(X, feature_index, threshold, polarity):\n        return polarity * (X[:, feature_index] < threshold).astype(int)\n\n    def weighted_error(y, y_pred, sample_weights):\n        return np.sum(sample_weights * (y != y_pred))\n\n    def normalize_weights(weights):\n        return weights / np.sum(weights)\n    X_train = np.array(X_train)\n    y_train = np.array(y_train) * 2 - 1\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n    for t in range(n_estimators):\n        min_error = float('inf')\n        best_stump = {}\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in (1, -1):\n                    y_pred = decision_stump_predict(X_train, feature_index, threshold, polarity)\n                    error = weighted_error(y_train, y_pred, sample_weights)\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n        if min_error == 0:\n            break\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        y_pred = decision_stump_predict(X_train, **best_stump)\n        sample_weights *= np.exp(-alpha * y_train * y_pred)\n        sample_weights = normalize_weights(sample_weights)\n        stumps.append(best_stump)\n        alphas.append(alpha)\n    X_test = np.array(X_test)\n    y_test_pred = np.zeros(len(X_test))\n    for (alpha, stump) in zip(alphas, stumps):\n        y_test_pred += alpha * decision_stump_predict(X_test, **stump)\n    y_test_pred = np.where(y_test_pred >= 0, 1, 0)\n    return y_test_pred.tolist()"}
{"task_id": 176, "completion_id": 9, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble with decision stumps and predict the class labels for X_test.\"\"\"\n\n    def predict_stump(X, feature_index, threshold, polarity):\n        return [polarity if x[feature_index] < threshold else -polarity for x in X]\n\n    def get_best_stump(X, y, w):\n        m = len(X)\n        n_features = len(X[0])\n        min_error = float('inf')\n        best_feature = 0\n        best_threshold = 0\n        best_polarity = 1\n        best_preds = [0] * m\n        for feature in range(n_features):\n            thresholds = set([row[feature] for row in X])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    preds = predict_stump(X, feature, threshold, polarity)\n                    err = np.sum(w * (np.array(y) != np.array(preds)))\n                    if err < min_error:\n                        min_error = err\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n                        best_preds = preds\n        return (best_feature, best_threshold, best_polarity, best_preds, min_error)\n    m = len(X_train)\n    y_train = [2 * y - 1 for y in y_train]\n    w = np.ones(m) / m\n    alphas = []\n    stumps = []\n    for _ in range(n_estimators):\n        (feature, threshold, polarity, preds, error) = get_best_stump(X_train, y_train, w)\n        if error < 1e-10:\n            error = 1e-10\n        alpha = 0.5 * np.log((1 - error) / error)\n        alphas.append(alpha)\n        stumps.append((feature, threshold, polarity))\n        w *= np.exp(-alpha * np.array(y_train) * np.array(preds))\n        w /= np.sum(w)\n        if error == 0:\n            break\n\n    def predict_test(X):\n        m_test = len(X)\n        stump_predictions = np.zeros(m_test)\n        for (alpha, (feature, threshold, polarity)) in zip(alphas, stumps):\n            stump_pred = np.array(predict_stump(X, feature, threshold, polarity))\n            stump_predictions += alpha * stump_pred\n        return [1 if pred > 0 else 0 for pred in stump_predictions]\n    return predict_test(X_test)"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1.0\n    upper_bound = 1.0\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = rng.uniform(-(upper_bound - lower_bound), upper_bound - lower_bound, (num_particles, n_dims))\n    pbest_positions = positions.copy()\n    pbest_scores = np.array([np.sum(p ** 2) for p in positions])\n    gbest_index = np.argmin(pbest_scores)\n    gbest_position = pbest_positions[gbest_index]\n    gbest_score = pbest_scores[gbest_index]\n    for _ in range(num_iterations):\n        r1 = rng.random((num_particles, n_dims))\n        r2 = rng.random((num_particles, n_dims))\n        velocities = w * velocities + c1 * r1 * (pbest_positions - positions) + c2 * r2 * (gbest_position - positions)\n        positions = np.clip(positions + velocities, lower_bound, upper_bound)\n        new_scores = np.array([np.sum(p ** 2) for p in positions])\n        improved_mask = new_scores < pbest_scores\n        pbest_scores[improved_mask] = new_scores[improved_mask]\n        pbest_positions[improved_mask] = positions[improved_mask]\n        gbest_index = np.argmin(pbest_scores)\n        gbest_position = pbest_positions[gbest_index]\n        gbest_score = pbest_scores[gbest_index]\n    return round(gbest_score, 4)"}
{"task_id": 178, "completion_id": 1, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    lower_bound = -1.0\n    upper_bound = 1.0\n    x = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    v = rng.uniform(-0.1, 0.1, (num_particles, n_dims))\n    p_best = x.copy()\n    p_best_vals = np.sum(p_best ** 2, axis=1)\n    g_best_idx = np.argmin(p_best_vals)\n    g_best = p_best[g_best_idx]\n    g_best_val = p_best_vals[g_best_idx]\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    for _ in range(num_iterations):\n        r1 = rng.uniform(0, 1, (num_particles, n_dims))\n        r2 = rng.uniform(0, 1, (num_particles, n_dims))\n        v = w * v + c1 * r1 * (p_best - x) + c2 * r2 * (g_best - x)\n        x = np.clip(x + v, lower_bound, upper_bound)\n        new_vals = np.sum(x ** 2, axis=1)\n        better_mask = new_vals < p_best_vals\n        p_best[better_mask] = x[better_mask]\n        p_best_vals[better_mask] = new_vals[better_mask]\n        new_g_best_idx = np.argmin(p_best_vals)\n        if p_best_vals[new_g_best_idx] < g_best_val:\n            g_best = p_best[new_g_best_idx]\n            g_best_val = p_best_vals[new_g_best_idx]\n    return round(g_best_val, 4)"}
{"task_id": 178, "completion_id": 2, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = rng.uniform(-0.1, 0.1, (num_particles, n_dims))\n    pbest_positions = positions.copy()\n    pbest_values = np.sum(positions ** 2, axis=1)\n    gbest_index = np.argmin(pbest_values)\n    gbest_position = pbest_positions[gbest_index]\n    gbest_value = pbest_values[gbest_index]\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    for _ in range(num_iterations):\n        r1 = rng.uniform(0, 1, (num_particles, n_dims))\n        r2 = rng.uniform(0, 1, (num_particles, n_dims))\n        velocities = w * velocities + c1 * r1 * (pbest_positions - positions) + c2 * r2 * (gbest_position - positions)\n        positions = np.clip(positions + velocities, -1, 1)\n        current_values = np.sum(positions ** 2, axis=1)\n        update_mask = current_values < pbest_values\n        pbest_values[update_mask] = current_values[update_mask]\n        pbest_positions[update_mask] = positions[update_mask]\n        gbest_index = np.argmin(pbest_values)\n        gbest_position = pbest_positions[gbest_index]\n        gbest_value = pbest_values[gbest_index]\n    return round(gbest_value, 4)"}
{"task_id": 178, "completion_id": 3, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    lower_bound = -1.0\n    upper_bound = 1.0\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    personal_best_positions = positions.copy()\n    personal_best_values = np.sum(personal_best_positions ** 2, axis=1)\n    global_best_index = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_index]\n    global_best_value = personal_best_values[global_best_index]\n    for _ in range(num_iterations):\n        r1 = rng.uniform(0, 1, (num_particles, n_dims))\n        r2 = rng.uniform(0, 1, (num_particles, n_dims))\n        velocities = w * velocities + c1 * r1 * (personal_best_positions - positions) + c2 * r2 * (global_best_position - positions)\n        positions = np.clip(positions + velocities, lower_bound, upper_bound)\n        current_values = np.sum(positions ** 2, axis=1)\n        improved = current_values < personal_best_values\n        personal_best_values[improved] = current_values[improved]\n        personal_best_positions[improved] = positions[improved]\n        global_best_index = np.argmin(personal_best_values)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_value = personal_best_values[global_best_index]\n    return round(global_best_value, 4)"}
{"task_id": 178, "completion_id": 4, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1\n    upper_bound = 1\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = rng.uniform(-0.1, 0.1, (num_particles, n_dims))\n    personal_best_positions = positions.copy()\n    personal_best_values = np.array([sphere_function(p) for p in personal_best_positions])\n    global_best_index = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_index]\n    global_best_value = personal_best_values[global_best_index]\n\n    def sphere_function(x):\n        return np.sum(x ** 2)\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            (r1, r2) = rng.uniform(0, 1, 2)\n            velocities[i] = w * velocities[i] + c1 * r1 * (personal_best_positions[i] - positions[i]) + c2 * r2 * (global_best_position - positions[i])\n            positions[i] = np.clip(positions[i] + velocities[i], lower_bound, upper_bound)\n            new_value = sphere_function(positions[i])\n            if new_value < personal_best_values[i]:\n                personal_best_positions[i] = positions[i]\n                personal_best_values[i] = new_value\n                if new_value < global_best_value:\n                    global_best_position = positions[i]\n                    global_best_value = new_value\n    return round(global_best_value, 4)"}
{"task_id": 178, "completion_id": 5, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(low=-1, high=1, size=(num_particles, n_dims))\n    velocities = rng.uniform(low=-0.1, high=0.1, size=(num_particles, n_dims))\n    personal_best_positions = positions.copy()\n    personal_best_values = np.sum(positions ** 2, axis=1)\n    global_best_index = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_index]\n    global_best_value = personal_best_values[global_best_index]\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            r1 = rng.uniform()\n            r2 = rng.uniform()\n            velocities[i] = w * velocities[i] + c1 * r1 * (personal_best_positions[i] - positions[i]) + c2 * r2 * (global_best_position - positions[i])\n            positions[i] = np.clip(positions[i] + velocities[i], -1, 1)\n            new_value = np.sum(positions[i] ** 2)\n            if new_value < personal_best_values[i]:\n                personal_best_positions[i] = positions[i]\n                personal_best_values[i] = new_value\n                if new_value < global_best_value:\n                    global_best_position = positions[i]\n                    global_best_value = new_value\n    return round(global_best_value, 4)"}
{"task_id": 178, "completion_id": 6, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1.0\n    upper_bound = 1.0\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = rng.uniform(-0.1, 0.1, (num_particles, n_dims))\n    personal_best_positions = positions.copy()\n    personal_best_values = np.array([np.sum(p ** 2) for p in positions])\n    global_best_index = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_index]\n    global_best_value = personal_best_values[global_best_index]\n    for _ in range(num_iterations):\n        r1 = rng.uniform(0, 1, (num_particles, n_dims))\n        r2 = rng.uniform(0, 1, (num_particles, n_dims))\n        velocities = w * velocities + c1 * r1 * (personal_best_positions - positions) + c2 * r2 * (global_best_position - positions)\n        positions = np.clip(positions + velocities, lower_bound, upper_bound)\n        current_values = np.array([np.sum(p ** 2) for p in positions])\n        mask = current_values < personal_best_values\n        personal_best_values[mask] = current_values[mask]\n        personal_best_positions[mask] = positions[mask]\n        global_best_index = np.argmin(personal_best_values)\n        if personal_best_values[global_best_index] < global_best_value:\n            global_best_value = personal_best_values[global_best_index]\n            global_best_position = personal_best_positions[global_best_index]\n    return round(global_best_value, 4)"}
{"task_id": 178, "completion_id": 7, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    lower_bound = -1\n    upper_bound = 1\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = rng.uniform(-1, 1, (num_particles, n_dims))\n    personal_best_positions = positions.copy()\n    personal_best_values = np.array([np.sum(p ** 2) for p in positions])\n    global_best_index = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_index]\n    global_best_value = personal_best_values[global_best_index]\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            r1 = rng.uniform(0, 1, n_dims)\n            r2 = rng.uniform(0, 1, n_dims)\n            velocities[i] = w * velocities[i] + c1 * r1 * (personal_best_positions[i] - positions[i]) + c2 * r2 * (global_best_position - positions[i])\n            positions[i] = np.clip(positions[i] + velocities[i], lower_bound, upper_bound)\n            new_value = np.sum(positions[i] ** 2)\n            if new_value < personal_best_values[i]:\n                personal_best_positions[i] = positions[i]\n                personal_best_values[i] = new_value\n                if new_value < global_best_value:\n                    global_best_position = positions[i]\n                    global_best_value = new_value\n    return round(global_best_value, 4)"}
{"task_id": 178, "completion_id": 8, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    lower_bound = np.full(n_dims, -1.0)\n    upper_bound = np.full(n_dims, 1.0)\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = rng.uniform(-0.5, 0.5, (num_particles, n_dims))\n    p_best_positions = positions.copy()\n    p_best_values = np.sum(positions ** 2, axis=1)\n    g_best_index = np.argmin(p_best_values)\n    g_best_position = p_best_positions[g_best_index]\n    g_best_value = p_best_values[g_best_index]\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    for _ in range(num_iterations):\n        r1 = rng.uniform(0, 1, (num_particles, n_dims))\n        r2 = rng.uniform(0, 1, (num_particles, n_dims))\n        velocities = w * velocities + c1 * r1 * (p_best_positions - positions) + c2 * r2 * (g_best_position - positions)\n        positions = np.clip(positions + velocities, lower_bound, upper_bound)\n        current_values = np.sum(positions ** 2, axis=1)\n        improved = current_values < p_best_values\n        p_best_positions[improved] = positions[improved]\n        p_best_values[improved] = current_values[improved]\n        g_best_index = np.argmin(p_best_values)\n        if p_best_values[g_best_index] < g_best_value:\n            g_best_position = p_best_positions[g_best_index]\n            g_best_value = p_best_values[g_best_index]\n    return round(g_best_value, 4)"}
{"task_id": 178, "completion_id": 9, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1.0\n    upper_bound = 1.0\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = rng.uniform(-0.1, 0.1, (num_particles, n_dims))\n    personal_best_positions = positions.copy()\n    personal_best_values = np.array([np.sum(p ** 2) for p in positions])\n    global_best_index = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_index]\n    global_best_value = personal_best_values[global_best_index]\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            (r1, r2) = rng.uniform(0, 1, 2)\n            velocities[i] = w * velocities[i] + c1 * r1 * (personal_best_positions[i] - positions[i]) + c2 * r2 * (global_best_position - positions[i])\n            positions[i] = np.clip(positions[i] + velocities[i], lower_bound, upper_bound)\n            new_value = np.sum(positions[i] ** 2)\n            if new_value < personal_best_values[i]:\n                personal_best_values[i] = new_value\n                personal_best_positions[i] = positions[i]\n                if new_value < global_best_value:\n                    global_best_value = new_value\n                    global_best_position = positions[i]\n    return round(global_best_value, 4)"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nfrom typing import List, Union\ndef knn_predict(X_train: List[List[float]], y_train: List[Union[int, str, float]], X_test: List[List[float]], k: int=5, task: str='classification') -> List[Union[int, str, float]]:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n\n    def euclidean_distance(point1: List[float], point2: List[float]) -> float:\n        return np.sqrt(np.sum(np.square(np.array(point1) - np.array(point2))))\n    predictions = []\n    for test_point in X_test:\n        distances = [(euclidean_distance(test_point, train_point), y) for (train_point, y) in zip(X_train, y_train)]\n        distances.sort(key=lambda x: (x[0], x[1]))\n        k = k if k > 0 and k <= len(distances) else len(distances)\n        k_nearest = distances[:k]\n        if task == 'classification':\n            counter = Counter([y for (_, y) in k_nearest])\n            most_common = counter.most_common()\n            max_count = max(most_common, key=lambda x: x[1])[1]\n            prediction = min((label for (label, count) in most_common if count == max_count))\n        else:\n            prediction = np.mean([y for (_, y) in k_nearest])\n            prediction = round(prediction, 4)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 180, "completion_id": 1, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\n    n_samples = len(X_train)\n    if k == 0 or k > n_samples:\n        k = n_samples\n    predictions = []\n    for test_point in X_test:\n        distances = [(euclidean_distance(test_point, X_train[i]), y_train[i]) for i in range(n_samples)]\n        distances.sort(key=lambda x: x[0])\n        k_nearest_labels = [label for (_, label) in distances[:k]]\n        if task == 'classification':\n            prediction = Counter(k_nearest_labels).most_common(1)[0][0]\n            tied_labels = [label for (label, count) in Counter(k_nearest_labels).items() if count == Counter(k_nearest_labels).most_common(1)[0][1]]\n            prediction = min(tied_labels)\n        elif task == 'regression':\n            prediction = round(np.mean(k_nearest_labels), 4)\n        else:\n            raise ValueError(\"Task must be either 'classification' or 'regression'\")\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 180, "completion_id": 2, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\n    n_train = len(X_train)\n    if k == 0 or k > n_train:\n        k = n_train\n    predictions = []\n    for test_point in X_test:\n        distances = [(euclidean_distance(test_point, train_point), index) for (index, train_point) in enumerate(X_train)]\n        distances.sort(key=lambda x: x[0])\n        k_nearest_indices = [index for (_, index) in distances[:k]]\n        if task == 'classification':\n            k_nearest_labels = [y_train[i] for i in k_nearest_indices]\n            label_counts = Counter(k_nearest_labels)\n            (most_common_label, _) = label_counts.most_common(1)[0]\n            predictions.append(most_common_label)\n        elif task == 'regression':\n            k_nearest_values = [y_train[i] for i in k_nearest_indices]\n            average_value = np.mean(k_nearest_values)\n            predictions.append(round(average_value, 4))\n    return predictions"}
{"task_id": 180, "completion_id": 3, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\n    if k == 0 or k > len(X_train):\n        k = len(X_train)\n    predictions = []\n    for test_point in X_test:\n        distances = [(euclidean_distance(test_point, train_point), label) for (train_point, label) in zip(X_train, y_train)]\n        distances.sort(key=lambda x: x[0])\n        k_nearest_labels = [label for (_, label) in distances[:k]]\n        if task == 'classification':\n            label_counts = Counter(k_nearest_labels)\n            most_common_labels = label_counts.most_common()\n            max_count = most_common_labels[0][1]\n            best_label = min((label for (label, count) in most_common_labels if count == max_count))\n            predictions.append(best_label)\n        elif task == 'regression':\n            mean_value = np.mean(k_nearest_labels)\n            predictions.append(round(mean_value, 4))\n    return predictions"}
{"task_id": 180, "completion_id": 4, "solution": "import numpy as np\nfrom collections import Counter\nfrom typing import List, Union\ndef euclidean_distance(point1: List[float], point2: List[float]) -> float:\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\ndef knn_predict(X_train: List[List[float]], y_train: List[Union[int, str]], X_test: List[List[float]], k: int=5, task: str='classification') -> List[Union[int, str, float]]:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : List[List[float]]\n        Training feature vectors.\n    y_train : List[Union[int, str]]\n        Targets associated with *X_train*.\n    X_test : List[List[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    List[Union[int, str, float]]\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    if k == 0 or k > len(X_train):\n        k = len(X_train)\n    predictions = []\n    for test_point in X_test:\n        distances = [(euclidean_distance(test_point, train_point), index) for (index, train_point) in enumerate(X_train)]\n        distances.sort(key=lambda x: x[0])\n        k_indices = [index for (_, index) in distances[:k]]\n        k_nearest_labels = [y_train[i] for i in k_indices]\n        if task == 'classification':\n            label_counts = Counter(k_nearest_labels)\n            most_common_labels = label_counts.most_common()\n            max_count = most_common_labels[0][1]\n            smallest_label = min((label for (label, count) in most_common_labels if count == max_count))\n            predictions.append(smallest_label)\n        elif task == 'regression':\n            average_value = np.mean(k_nearest_labels)\n            predictions.append(round(average_value, 4))\n        else:\n            raise ValueError(\"Task must be either 'classification' or 'regression'\")\n    return predictions"}
{"task_id": 180, "completion_id": 5, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\n\n    def get_neighbors_indices(distances, k):\n        return np.argsort(distances)[:k]\n    predictions = []\n    for test_point in X_test:\n        distances = [euclidean_distance(test_point, train_point) for train_point in X_train]\n        neighbors_indices = get_neighbors_indices(distances, k if k > 0 else len(X_train))\n        neighbor_labels = [y_train[i] for i in neighbors_indices]\n        if task == 'classification':\n            label_counts = Counter(neighbor_labels)\n            most_common_label = label_counts.most_common(1)[0][0]\n            for label in sorted(label_counts.keys()):\n                if label_counts[label] == label_counts[most_common_label]:\n                    most_common_label = label\n                    break\n            predictions.append(most_common_label)\n        elif task == 'regression':\n            average_value = sum(neighbor_labels) / len(neighbor_labels)\n            predictions.append(round(average_value, 4))\n    return predictions"}
{"task_id": 180, "completion_id": 6, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\n    if k == 0 or k > len(X_train):\n        k = len(X_train)\n    predictions = []\n    for test_point in X_test:\n        distances = [(euclidean_distance(test_point, train_point), idx) for (idx, train_point) in enumerate(X_train)]\n        distances.sort(key=lambda x: x[0])\n        k_nearest_indices = [dist[1] for dist in distances[:k]]\n        k_nearest_labels = [y_train[idx] for idx in k_nearest_indices]\n        if task == 'classification':\n            most_common = Counter(k_nearest_labels).most_common()\n            highest_count = most_common[0][1]\n            most_common_labels = [label for (label, count) in most_common if count == highest_count]\n            predictions.append(min(most_common_labels))\n        elif task == 'regression':\n            predictions.append(round(np.mean(k_nearest_labels), 4))\n    return predictions"}
{"task_id": 180, "completion_id": 7, "solution": "import numpy as np\nfrom collections import Counter\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    if k == 0 or k > len(X_train):\n        k = len(X_train)\n    predictions = []\n    for test_point in X_test:\n        distances = [(euclidean_distance(test_point, train_point), idx) for (idx, train_point) in enumerate(X_train)]\n        k_nearest_indices = sorted(distances, key=lambda x: x[0])[:k]\n        k_nearest_labels = [y_train[idx] for (_, idx) in k_nearest_indices]\n        if task == 'classification':\n            vote_counts = Counter(k_nearest_labels)\n            most_common = vote_counts.most_common()\n            max_vote_count = most_common[0][1]\n            smallest_label = min((label for (label, count) in most_common if count == max_vote_count))\n            predictions.append(smallest_label)\n        elif task == 'regression':\n            mean_value = np.mean(k_nearest_labels)\n            predictions.append(round(mean_value, 4))\n        else:\n            raise ValueError(\"Task must be either 'classification' or 'regression'\")\n    return predictions"}
{"task_id": 180, "completion_id": 8, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\n    if k == 0 or k > len(X_train):\n        k = len(X_train)\n    predictions = []\n    for test_point in X_test:\n        distances = [(euclidean_distance(test_point, train_point), label) for (train_point, label) in zip(X_train, y_train)]\n        k_nearest = sorted(distances, key=lambda x: x[0])[:k]\n        if task == 'classification':\n            k_nearest_labels = [label for (_, label) in k_nearest]\n            most_common_label = Counter(k_nearest_labels).most_common()\n            most_common_label.sort(key=lambda x: (-x[1], x[0]))\n            predictions.append(most_common_label[0][0])\n        elif task == 'regression':\n            k_nearest_values = [value for (_, value) in k_nearest]\n            predictions.append(round(np.mean(k_nearest_values), 4))\n    return predictions"}
{"task_id": 180, "completion_id": 9, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((np.array(a) - np.array(b)) ** 2))\n    n_train = len(X_train)\n    if k == 0 or k > n_train:\n        k = n_train\n    predictions = []\n    for x_test in X_test:\n        distances = [euclidean_distance(x_test, x_train) for x_train in X_train]\n        k_indices = np.argsort(distances)[:k]\n        k_nearest_labels = [y_train[i] for i in k_indices]\n        if task == 'classification':\n            most_common = Counter(k_nearest_labels).most_common()\n            max_count = most_common[0][1]\n            smallest_label = min((label for (label, count) in most_common if count == max_count))\n            predictions.append(smallest_label)\n        elif task == 'regression':\n            average_value = np.mean(k_nearest_labels)\n            predictions.append(round(average_value, 4))\n    return predictions"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    def gini_impurity(labels):\n        m = len(labels)\n        if m == 0:\n            return 0.0\n        counts = np.bincount(labels)\n        probabilities = counts / m\n        return 1.0 - np.sum(np.power(probabilities, 2))\n\n    def split_data(X, y, feature_index, threshold):\n        left_mask = X[:, feature_index] < threshold\n        (X_left, y_left) = (X[left_mask], y[left_mask])\n        (X_right, y_right) = (X[~left_mask], y[~left_mask])\n        return (X_left, y_left, X_right, y_right)\n\n    def best_split(X, y):\n        best_gini = float('inf')\n        best_feature_index = None\n        best_threshold = None\n        n_features = X.shape[1]\n        for feature_index in range(n_features):\n            unique_values = np.unique(X[:, feature_index])\n            for i in range(len(unique_values) - 1):\n                threshold = (unique_values[i] + unique_values[i + 1]) / 2.0\n                (X_left, y_left, X_right, y_right) = split_data(X, y, feature_index, threshold)\n                gini_left = gini_impurity(y_left)\n                gini_right = gini_impurity(y_right)\n                weighted_gini = len(y_left) / len(y) * gini_left + len(y_right) / len(y) * gini_right\n                if weighted_gini < best_gini:\n                    best_gini = weighted_gini\n                    best_feature_index = feature_index\n                    best_threshold = threshold\n        return (best_feature_index, best_threshold)\n\n    def majority_label(labels):\n        return np.bincount(labels).argmax()\n\n    def build_tree(X, y, depth):\n        if max_depth is not None and depth >= max_depth:\n            return majority_label(y)\n        if len(np.unique(y)) == 1:\n            return y[0]\n        (feature_index, threshold) = best_split(X, y)\n        if feature_index is None or threshold is None:\n            return majority_label(y)\n        (X_left, y_left, X_right, y_right) = split_data(X, y, feature_index, threshold)\n        if len(y_left) == 0 or len(y_right) == 0:\n            return majority_label(y)\n        left_child = build_tree(X_left, y_left, depth + 1)\n        right_child = build_tree(X_right, y_right, depth + 1)\n        node = {'feature_index': feature_index, 'threshold': threshold, 'left': left_child, 'right': right_child}\n        return node\n\n    def predict_single_sample(node, sample):\n        if isinstance(node, int):\n            return node\n        if sample[node['feature_index']] < node['threshold']:\n            return predict_single_sample(node['left'], sample)\n        else:\n            return predict_single_sample(node['right'], sample)\n    root = build_tree(X_train, y_train, 0)\n    predictions = [predict_single_sample(root, sample) for sample in X_test]\n    return predictions"}
{"task_id": 184, "completion_id": 1, "solution": "import numpy as np\nfrom collections import Counter\ndef gini_impurity(labels):\n    \"\"\"Calculate the Gini impurity for a list of labels.\"\"\"\n    m = len(labels)\n    if m == 0:\n        return 0.0\n    counts = np.bincount(labels)\n    probabilities = counts / m\n    return 1.0 - np.sum(probabilities ** 2)\ndef gini_gain(parent_labels, left_labels, right_labels):\n    \"\"\"Calculate the Gini gain for a split.\"\"\"\n    weight_left = len(left_labels) / len(parent_labels)\n    weight_right = len(right_labels) / len(parent_labels)\n    return gini_impurity(parent_labels) - (weight_left * gini_impurity(left_labels) + weight_right * gini_impurity(right_labels))\ndef find_best_split(X, y):\n    \"\"\"Find the best feature and threshold to split the data.\"\"\"\n    best_gain = -1.0\n    best_feature = None\n    best_threshold = None\n    parent_gini = gini_impurity(y)\n    (n_samples, n_features) = X.shape\n    for feature in range(n_features):\n        thresholds = np.unique(X[:, feature])\n        for i in range(1, len(thresholds)):\n            threshold = (thresholds[i] + thresholds[i - 1]) / 2\n            left_mask = X[:, feature] < threshold\n            right_mask = ~left_mask\n            left_labels = y[left_mask]\n            right_labels = y[right_mask]\n            if len(left_labels) > 0 and len(right_labels) > 0:\n                gain = gini_gain(y, left_labels, right_labels)\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = feature\n                    best_threshold = threshold\n    return (best_feature, best_threshold)\ndef majority_vote(labels):\n    \"\"\"Return the majority class label.\"\"\"\n    if len(labels) == 0:\n        return None\n    return Counter(labels).most_common(1)[0][0]\nclass DecisionTreeNode:\n\n    def __init__(self, feature=None, threshold=None, left=None, right=None, value=None):\n        self.feature = feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\ndef build_tree(X, y, depth, max_depth):\n    \"\"\"Recursively build the decision tree.\"\"\"\n    (num_samples, num_features) = X.shape\n    num_labels = len(np.unique(y))\n    if num_labels == 1 or depth == max_depth or num_samples == 0:\n        return DecisionTreeNode(value=majority_vote(y))\n    (best_feature, best_threshold) = find_best_split(X, y)\n    if best_feature is None:\n        return DecisionTreeNode(value=majority_vote(y))\n    left_mask = X[:, best_feature] < best_threshold\n    right_mask = ~left_mask\n    left_child = build_tree(X[left_mask], y[left_mask], depth + 1, max_depth)\n    right_child = build_tree(X[right_mask], y[right_mask], depth + 1, max_depth)\n    return DecisionTreeNode(feature=best_feature, threshold=best_threshold, left=left_child, right=right_child)\ndef predict_single(sample, tree):\n    \"\"\"Predict the class label for a single sample.\"\"\"\n    if tree.value is not None:\n        return tree.value\n    if sample[tree.feature] < tree.threshold:\n        return predict_single(sample, tree.left)\n    else:\n        return predict_single(sample, tree.right)\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    tree = build_tree(X_train, y_train, 0, max_depth)\n    predictions = [predict_single(sample, tree) for sample in X_test]\n    return predictions"}
{"task_id": 184, "completion_id": 2, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    def gini_impurity(labels):\n        m = len(labels)\n        if m == 0:\n            return 0.0\n        counts = np.bincount(labels)\n        probabilities = counts / m\n        return 1.0 - np.sum(probabilities ** 2)\n\n    def gini_gain(left_labels, right_labels, root_labels):\n        weight_left = len(left_labels) / len(root_labels)\n        weight_right = len(right_labels) / len(root_labels)\n        return gini_impurity(root_labels) - (weight_left * gini_impurity(left_labels) + weight_right * gini_impurity(right_labels))\n\n    def split_node(X, y):\n        (best_feature, best_threshold, best_gain, best_left, best_right, best_y_left, best_y_right) = (None, None, -1, None, None, None, None)\n        for feature in range(X.shape[1]):\n            sorted_indices = np.argsort(X[:, feature])\n            X_sorted = X[sorted_indices]\n            y_sorted = y[sorted_indices]\n            for i in range(1, len(X_sorted)):\n                if X_sorted[i, feature] != X_sorted[i - 1, feature]:\n                    threshold = (X_sorted[i, feature] + X_sorted[i - 1, feature]) / 2\n                    left_indices = X[:, feature] <= threshold\n                    right_indices = X[:, feature] > threshold\n                    left_labels = y[left_indices]\n                    right_labels = y[right_indices]\n                    gain = gini_gain(left_labels, right_labels, y)\n                    if gain > best_gain:\n                        best_gain = gain\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_left = X[left_indices]\n                        best_right = X[right_indices]\n                        best_y_left = y[left_indices]\n                        best_y_right = y[right_indices]\n        return (best_feature, best_threshold, best_gain, best_left, best_right, best_y_left, best_y_right)\n\n    def build_tree(X, y, depth=0):\n        num_labels = len(y)\n        if num_labels == 0:\n            return None\n        label_counts = np.bincount(y)\n        majority_class = np.argmax(label_counts)\n        if len(label_counts) == 1 or (max_depth is not None and depth >= max_depth):\n            return {'label': majority_class}\n        (best_feature, best_threshold, best_gain, best_left, best_right, best_y_left, best_y_right) = split_node(X, y)\n        if best_gain == 0:\n            return {'label': majority_class}\n        return {'feature': best_feature, 'threshold': best_threshold, 'left': build_tree(best_left, best_y_left, depth + 1), 'right': build_tree(best_right, best_y_right, depth + 1)}\n\n    def predict_single_sample(sample, tree):\n        while 'label' not in tree:\n            if sample[tree['feature']] <= tree['threshold']:\n                tree = tree['left']\n            else:\n                tree = tree['right']\n        return tree['label']\n    tree = build_tree(X_train, y_train)\n    return [predict_single_sample(sample, tree) for sample in X_test]"}
{"task_id": 184, "completion_id": 3, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    def gini_impurity(labels):\n        m = len(labels)\n        if m == 0:\n            return 0\n        impurity = 1.0\n        for label in np.unique(labels):\n            p = np.sum(labels == label) / m\n            impurity -= p ** 2\n        return impurity\n\n    def best_split(X, y):\n        best_gini = 1.0\n        best_feature = None\n        best_threshold = None\n        (m, n) = X.shape\n        for feature in range(n):\n            sorted_indices = np.argsort(X[:, feature])\n            sorted_X = X[sorted_indices]\n            sorted_y = y[sorted_indices]\n            for i in range(1, m):\n                if sorted_X[i, feature] == sorted_X[i - 1, feature]:\n                    continue\n                mid_point = (sorted_X[i, feature] + sorted_X[i - 1, feature]) / 2\n                left_y = sorted_y[:i]\n                right_y = sorted_y[i:]\n                gini_left = gini_impurity(left_y)\n                gini_right = gini_impurity(right_y)\n                gini_split = len(left_y) / m * gini_left + len(right_y) / m * gini_right\n                if gini_split < best_gini:\n                    best_gini = gini_split\n                    best_feature = feature\n                    best_threshold = mid_point\n        return (best_feature, best_threshold)\n\n    def build_tree(X, y, depth=0):\n        (n_samples, n_features) = X.shape\n        if max_depth is not None and depth >= max_depth:\n            return np.bincount(y).argmax()\n        unique_labels = np.unique(y)\n        if len(unique_labels) == 1:\n            return unique_labels[0]\n        (feature, threshold) = best_split(X, y)\n        if feature is None:\n            return np.bincount(y).argmax()\n        left_indices = X[:, feature] < threshold\n        right_indices = X[:, feature] >= threshold\n        left_child = build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_child = build_tree(X[right_indices], y[right_indices], depth + 1)\n        return (feature, threshold, left_child, right_child)\n\n    def predict_tree(node, sample):\n        if isinstance(node, int):\n            return node\n        (feature, threshold, left_child, right_child) = node\n        if sample[feature] < threshold:\n            return predict_tree(left_child, sample)\n        return predict_tree(right_child, sample)\n    tree = build_tree(X_train, y_train)\n    return [predict_tree(tree, sample) for sample in X_test]"}
{"task_id": 184, "completion_id": 4, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    def gini(labels):\n        m = len(labels)\n        if m == 0:\n            return 0.0\n        counts = np.bincount(labels)\n        probabilities = counts / m\n        return 1.0 - np.sum(probabilities ** 2)\n\n    def best_split(X, y):\n        best_gain = -1.0\n        best_feature = None\n        best_threshold = None\n        n_features = X.shape[1]\n        parent_gini = gini(y)\n        for feature in range(n_features):\n            sorted_indices = np.argsort(X[:, feature])\n            X_sorted = X[sorted_indices, feature]\n            y_sorted = y[sorted_indices]\n            for i in range(1, m):\n                if X_sorted[i] != X_sorted[i - 1]:\n                    threshold = (X_sorted[i] + X_sorted[i - 1]) / 2\n                    left_y = y_sorted[:i]\n                    right_y = y_sorted[i:]\n                    gini_left = gini(left_y)\n                    gini_right = gini(right_y)\n                    weight_left = len(left_y) / len(y)\n                    weight_right = len(right_y) / len(y)\n                    gini_gain = parent_gini - (weight_left * gini_left + weight_right * gini_right)\n                    if gini_gain > best_gain:\n                        best_gain = gini_gain\n                        best_feature = feature\n                        best_threshold = threshold\n        return (best_feature, best_threshold)\n\n    def majority_class(labels):\n        return np.bincount(labels).argmax()\n\n    class Node:\n\n        def __init__(self, feature=None, threshold=None, left=None, right=None, value=None):\n            self.feature = feature\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.value = value\n\n    def build_tree(X, y, depth=0):\n        n_labels = len(np.unique(y))\n        if n_labels == 1 or (max_depth is not None and depth >= max_depth):\n            return Node(value=majority_class(y))\n        (best_feature, best_threshold) = best_split(X, y)\n        if best_feature is None or best_threshold is None:\n            return Node(value=majority_class(y))\n        left_indices = X[:, best_feature] < best_threshold\n        right_indices = X[:, best_feature] >= best_threshold\n        if not np.any(left_indices) or not np.any(right_indices):\n            return Node(value=majority_class(y))\n        left_subtree = build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_subtree = build_tree(X[right_indices], y[right_indices], depth + 1)\n        return Node(feature=best_feature, threshold=best_threshold, left=left_subtree, right=right_subtree)\n\n    def predict_example(node, example):\n        if node.value is not None:\n            return node.value\n        if example[node.feature] < node.threshold:\n            return predict_example(node.left, example)\n        else:\n            return predict_example(node.right, example)\n    (m, _) = X_train.shape\n    if m == 0:\n        return []\n    root = build_tree(X_train, y_train)\n    predictions = [predict_example(root, example) for example in X_test]\n    return predictions"}
{"task_id": 184, "completion_id": 5, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    def gini_impurity(y):\n        m = len(y)\n        if m == 0:\n            return 0.0\n        counts = np.bincount(y)\n        probabilities = counts / m\n        return 1.0 - np.sum(probabilities ** 2)\n\n    def best_split(X, y):\n        (m, n) = X.shape\n        if m == 0:\n            return (None, None, None)\n        best_gini = np.inf\n        best_feature_index = None\n        best_threshold = None\n        parent_gini = gini_impurity(y)\n        for feature_index in range(n):\n            sorted_indices = np.argsort(X[:, feature_index])\n            X_sorted = X[sorted_indices]\n            y_sorted = y[sorted_indices]\n            for i in range(1, m):\n                if X_sorted[i, feature_index] == X_sorted[i - 1, feature_index]:\n                    continue\n                left_y = y_sorted[:i]\n                right_y = y_sorted[i:]\n                left_gini = gini_impurity(left_y)\n                right_gini = gini_impurity(right_y)\n                weighted_gini = i / m * left_gini + (m - i) / m * right_gini\n                if weighted_gini < best_gini:\n                    best_gini = weighted_gini\n                    best_feature_index = feature_index\n                    best_threshold = (X_sorted[i, feature_index] + X_sorted[i - 1, feature_index]) / 2\n        return (best_feature_index, best_threshold, best_gini)\n\n    def build_tree(X, y, depth=0):\n        if max_depth is not None and depth >= max_depth:\n            return np.bincount(y).argmax()\n        if len(np.unique(y)) == 1:\n            return y[0]\n        (best_feature_index, best_threshold, best_gini) = best_split(X, y)\n        if best_feature_index is None:\n            return np.bincount(y).argmax()\n        left_indices = X[:, best_feature_index] < best_threshold\n        right_indices = X[:, best_feature_index] >= best_threshold\n        if left_indices.sum() == 0 or right_indices.sum() == 0:\n            return np.bincount(y).argmax()\n        left_tree = build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_tree = build_tree(X[right_indices], y[right_indices], depth + 1)\n        return (best_feature_index, best_threshold, left_tree, right_tree)\n\n    def predict_tree(tree, X):\n        if isinstance(tree, int):\n            return tree\n        (feature_index, threshold, left_tree, right_tree) = tree\n        if X[feature_index] < threshold:\n            return predict_tree(left_tree, X)\n        else:\n            return predict_tree(right_tree, X)\n    tree = build_tree(X_train, y_train)\n    return [predict_tree(tree, x) for x in X_test]"}
{"task_id": 184, "completion_id": 6, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    def gini_impurity(y):\n        \"\"\"Calculate the Gini impurity of a list of labels.\"\"\"\n        m = len(y)\n        if m == 0:\n            return 0.0\n        classes = np.unique(y)\n        sums = sum(((np.sum(y == c) / m) ** 2 for c in classes))\n        return 1 - sums\n\n    def best_split(X, y):\n        \"\"\"Find the best split for a dataset.\"\"\"\n        best_gini = float('inf')\n        best_feature = None\n        best_threshold = None\n        for feature in range(X.shape[1]):\n            unique_values = np.unique(X[:, feature])\n            thresholds = (unique_values[1:] + unique_values[:-1]) / 2\n            for threshold in thresholds:\n                left_indices = X[:, feature] < threshold\n                right_indices = X[:, feature] >= threshold\n                left_y = y[left_indices]\n                right_y = y[right_indices]\n                (n_left, n_right) = (len(left_y), len(right_y))\n                gini_left = gini_impurity(left_y)\n                gini_right = gini_impurity(right_y)\n                weight_left = n_left / (n_left + n_right)\n                weight_right = n_right / (n_left + n_right)\n                gini = weight_left * gini_left + weight_right * gini_right\n                if gini < best_gini:\n                    best_gini = gini\n                    best_feature = feature\n                    best_threshold = threshold\n        return (best_gini, best_feature, best_threshold)\n\n    def build_tree(X, y, depth=0):\n        \"\"\"Recursively build the decision tree.\"\"\"\n        (n_samples, n_features) = X.shape\n        n_labels = len(np.unique(y))\n        if n_labels == 1 or (max_depth is not None and depth >= max_depth):\n            leaf_value = np.bincount(y).argmax()\n            return {'value': leaf_value, 'depth': depth}\n        (gini, feature, threshold) = best_split(X, y)\n        if gini is None:\n            leaf_value = np.bincount(y).argmax()\n            return {'value': leaf_value, 'depth': depth}\n        left_indices = X[:, feature] < threshold\n        right_indices = X[:, feature] >= threshold\n        left_tree = build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_tree = build_tree(X[right_indices], y[right_indices], depth + 1)\n        if not left_tree.get('value') is None and left_tree.get('value') == right_tree.get('value'):\n            return {'value': left_tree.get('value'), 'depth': depth}\n        return {'feature': feature, 'threshold': threshold, 'left': left_tree, 'right': right_tree, 'depth': depth}\n\n    def predict_tree(tree, X):\n        \"\"\"Predict using the decision tree.\"\"\"\n        predictions = []\n        for sample in X:\n            current_tree = tree\n            while 'value' not in current_tree:\n                if sample[current_tree['feature']] < current_tree['threshold']:\n                    current_tree = current_tree['left']\n                else:\n                    current_tree = current_tree['right']\n            predictions.append(current_tree['value'])\n        return predictions\n    tree = build_tree(X_train, y_train)\n    return predict_tree(tree, X_test)"}
{"task_id": 184, "completion_id": 7, "solution": "import numpy as np\ndef gini_impurity(y):\n    \"\"\"Calculate the Gini impurity for a given array of labels.\"\"\"\n    if len(y) == 0:\n        return 0.0\n    m = len(y)\n    classes = np.unique(y)\n    impurity = 1.0\n    for cls in classes:\n        p_cls = len(y[y == cls]) / m\n        impurity -= p_cls ** 2\n    return impurity\ndef gini_gain(y, y_left, y_right):\n    \"\"\"Calculate the Gini gain for a split based on left and right child impurity.\"\"\"\n    m = len(y)\n    m_left = len(y_left)\n    m_right = len(y_right)\n    return gini_impurity(y) - m_left / m * gini_impurity(y_left) - m_right / m * gini_impurity(y_right)\ndef majority_class(y):\n    \"\"\"Return the majority class label from a given array of labels.\"\"\"\n    return np.bincount(y).argmax()\ndef best_split(X, y):\n    \"\"\"Find the best feature and threshold to split the data based on Gini gain.\"\"\"\n    best_gain = -1.0\n    best_feature = None\n    best_threshold = None\n    for feature in range(X.shape[1]):\n        sorted_indices = np.argsort(X[:, feature])\n        X_sorted = X[sorted_indices]\n        y_sorted = y[sorted_indices]\n        for i in range(1, X_sorted.shape[0]):\n            if X_sorted[i, feature] != X_sorted[i - 1, feature]:\n                threshold = (X_sorted[i, feature] + X_sorted[i - 1, feature]) / 2.0\n                y_left = y_sorted[:i]\n                y_right = y_sorted[i:]\n                gain = gini_gain(y, y_left, y_right)\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = feature\n                    best_threshold = threshold\n    return (best_feature, best_threshold)\ndef build_tree(X, y, depth=0, max_depth=None):\n    \"\"\"Recursively build the decision tree.\"\"\"\n    num_samples = X.shape[0]\n    if len(np.unique(y)) == 1 or (max_depth is not None and depth >= max_depth):\n        return majority_class(y)\n    (feature, threshold) = best_split(X, y)\n    if feature is None or threshold is None:\n        return majority_class(y)\n    left_indices = X[:, feature] < threshold\n    right_indices = X[:, feature] >= threshold\n    if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n        return majority_class(y)\n    left_subtree = build_tree(X[left_indices], y[left_indices], depth + 1, max_depth)\n    right_subtree = build_tree(X[right_indices], y[right_indices], depth + 1, max_depth)\n    return (feature, threshold, left_subtree, right_subtree)\ndef predict_tree(X, tree):\n    \"\"\"Predict the class label for a single instance using the learned tree.\"\"\"\n    if isinstance(tree, int):\n        return tree\n    (feature, threshold, left_subtree, right_subtree) = tree\n    if X[feature] < threshold:\n        return predict_tree(X, left_subtree)\n    else:\n        return predict_tree(X, right_subtree)\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    tree = build_tree(X_train, y_train, max_depth=max_depth)\n    predictions = [predict_tree(x, tree) for x in X_test]\n    return predictions"}
{"task_id": 184, "completion_id": 8, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    def gini_impurity(y):\n        m = len(y)\n        if m == 0:\n            return 0.0\n        counts = np.bincount(y)\n        probabilities = counts / m\n        return 1.0 - np.sum(probabilities ** 2)\n\n    def gini_gain(y, y_left, y_right):\n        m = len(y)\n        m_left = len(y_left)\n        m_right = len(y_right)\n        if m_left == 0 or m_right == 0:\n            return 0.0\n        return gini_impurity(y) - m_left / m * gini_impurity(y_left) - m_right / m * gini_impurity(y_right)\n\n    def best_split(X, y, depth):\n        (m, n) = X.shape\n        if len(np.unique(y)) == 1 or depth == max_depth:\n            return (None, None, np.bincount(y).argmax())\n        best_gini = np.inf\n        best_feature = None\n        best_threshold = None\n        best_left_indices = None\n        best_right_indices = None\n        for feature in range(n):\n            sorted_indices = np.argsort(X[:, feature])\n            X_sorted = X[sorted_indices]\n            y_sorted = y[sorted_indices]\n            for i in range(1, m):\n                if X_sorted[i, feature] == X_sorted[i - 1, feature]:\n                    continue\n                threshold = (X_sorted[i, feature] + X_sorted[i - 1, feature]) / 2\n                left_indices = sorted_indices[:i]\n                right_indices = sorted_indices[i:]\n                (y_left, y_right) = (y_sorted[left_indices], y_sorted[right_indices])\n                current_gini = gini_gain(y_sorted, y_left, y_right)\n                if current_gini < best_gini:\n                    best_gini = current_gini\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_left_indices = left_indices\n                    best_right_indices = right_indices\n        if best_gini == np.inf:\n            return (None, None, np.bincount(y).argmax())\n        return (best_feature, best_threshold, best_left_indices, best_right_indices)\n\n    def build_tree(X, y, depth=0):\n        majority_class = np.bincount(y).argmax()\n        (feature, threshold, left_indices, right_indices) = best_split(X, y, depth)\n        if feature is None:\n            return majority_class\n        left_subtree = build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_subtree = build_tree(X[right_indices], y[right_indices], depth + 1)\n        return (feature, threshold, left_subtree, right_subtree)\n\n    def predict_tree(x, tree):\n        if isinstance(tree, int):\n            return tree\n        (feature, threshold, left_tree, right_tree) = tree\n        if x[feature] <= threshold:\n            return predict_tree(x, left_tree)\n        else:\n            return predict_tree(x, right_tree)\n    tree = build_tree(X_train, y_train)\n    predictions = [predict_tree(x, tree) for x in X_test]\n    return predictions"}
{"task_id": 184, "completion_id": 9, "solution": "import numpy as np\ndef gini_impurity(y: np.ndarray) -> float:\n    \"\"\"Calculate the Gini impurity for a given array of labels.\"\"\"\n    m = len(y)\n    if m == 0:\n        return 0.0\n    counts = np.bincount(y)\n    probabilities = counts / m\n    return 1.0 - np.sum(probabilities ** 2)\ndef gini_gain(parent_gini: float, left_y: np.ndarray, right_y: np.ndarray) -> float:\n    \"\"\"Calculate the Gini gain for a split.\"\"\"\n    left_weight = len(left_y) / (len(left_y) + len(right_y))\n    right_weight = len(right_y) / (len(left_y) + len(right_y))\n    return parent_gini - (left_weight * gini_impurity(left_y) + right_weight * gini_impurity(right_y))\ndef split_feature(values: np.ndarray, threshold: float) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"Split indices based on feature values.\"\"\"\n    left_indices = np.where(values <= threshold)[0]\n    right_indices = np.where(values > threshold)[0]\n    return (left_indices, right_indices)\ndef best_split(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Find the best feature and threshold to split the data.\"\"\"\n    best_feature_index = -1\n    best_threshold = -1\n    best_gain = -1\n    parent_gini = gini_impurity(y)\n    for feature_index in range(X.shape[1]):\n        unique_values = np.unique(X[:, feature_index])\n        if len(unique_values) < 2:\n            continue\n        for i in range(len(unique_values) - 1):\n            threshold = (unique_values[i] + unique_values[i + 1]) / 2\n            (left_indices, right_indices) = split_feature(X[:, feature_index], threshold)\n            if len(left_indices) == 0 or len(right_indices) == 0:\n                continue\n            gain = gini_gain(parent_gini, y[left_indices], y[right_indices])\n            if gain > best_gain:\n                best_gain = gain\n                best_threshold = threshold\n                best_feature_index = feature_index\n    return (best_feature_index, best_threshold)\ndef majority_class(y: np.ndarray) -> int:\n    \"\"\"Return the majority class in the array.\"\"\"\n    counts = np.bincount(y)\n    return np.argmax(counts)\nclass Node:\n\n    def __init__(self, feature_index: int, threshold: float, left: 'Node', right: 'Node', value: int):\n        self.feature_index = feature_index\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\ndef build_tree(X: np.ndarray, y: np.ndarray, depth: int, max_depth: int | None) -> Node:\n    \"\"\"Recursively build the decision tree.\"\"\"\n    if len(np.unique(y)) == 1:\n        return Node(None, None, None, None, y[0])\n    if max_depth is not None and depth >= max_depth:\n        return Node(None, None, None, None, majority_class(y))\n    (feature_index, threshold) = best_split(X, y)\n    if feature_index == -1:\n        return Node(None, None, None, None, majority_class(y))\n    (left_indices, right_indices) = split_feature(X[:, feature_index], threshold)\n    left_node = build_tree(X[left_indices], y[left_indices], depth + 1, max_depth)\n    right_node = build_tree(X[right_indices], y[right_indices], depth + 1, max_depth)\n    return Node(feature_index, threshold, left_node, right_node, None)\ndef predict_node(node: Node, sample: np.ndarray) -> int:\n    \"\"\"Predict the class label for a single sample using a trained tree.\"\"\"\n    if node.value is not None:\n        return node.value\n    if sample[node.feature_index] <= node.threshold:\n        return predict_node(node.left, sample)\n    else:\n        return predict_node(node.right, sample)\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    root = build_tree(X_train, y_train, 0, max_depth)\n    return [predict_node(root, sample) for sample in X_test]"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y)\n    (n_samples, n_features) = X.shape\n\n    def gini(labels):\n        m = len(labels)\n        counts = np.bincount(labels)\n        probabilities = counts / m\n        return 1.0 - np.sum(probabilities ** 2)\n    G_whole_dataset = gini(y)\n    best_gini = G_whole_dataset\n    best_feature_index = -1\n    best_threshold_value = None\n    for j in range(n_features):\n        feature = X[:, j]\n        unique_values = np.unique(feature)\n        if len(unique_values) == 1:\n            continue\n        for v in unique_values:\n            left_mask = feature <= v\n            right_mask = feature > v\n            left_labels = y[left_mask]\n            right_labels = y[right_mask]\n            if len(left_labels) == 0 or len(right_labels) == 0:\n                continue\n            G_left = gini(left_labels)\n            G_right = gini(right_labels)\n            n_left = len(left_labels)\n            n_right = len(right_labels)\n            n_total = n_left + n_right\n            G_split = n_left / n_total * G_left + n_right / n_total * G_right\n            if G_split < best_gini - 1e-12:\n                best_gini = G_split\n                best_feature_index = j\n                best_threshold_value = v\n            elif abs(G_split - best_gini) < 1e-12:\n                if j < best_feature_index:\n                    best_gini = G_split\n                    best_feature_index = j\n                    best_threshold_value = v\n                elif j == best_feature_index and v < best_threshold_value:\n                    best_threshold_value = v\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 190, "completion_id": 1, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n\n    def gini(node_labels):\n        counts = np.bincount(node_labels)\n        probabilities = counts / len(node_labels)\n        return 1 - np.sum(probabilities ** 2)\n    G_whole_dataset = gini(y)\n    if G_whole_dataset == 0:\n        return (-1, None, round(G_whole_dataset, 4))\n    best_gini = float('inf')\n    best_feature_index = -1\n    best_threshold_value = None\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        if len(unique_values) == 1:\n            continue\n        for threshold in unique_values:\n            left_indices = feature_values <= threshold\n            right_indices = feature_values > threshold\n            if not np.any(left_indices) or not np.any(right_indices):\n                continue\n            left_labels = y[left_indices]\n            right_labels = y[right_indices]\n            n_left = len(left_labels)\n            n_right = len(right_labels)\n            n_total = n_left + n_right\n            G_left = gini(left_labels)\n            G_right = gini(right_labels)\n            G_split = n_left / n_total * G_left + n_right / n_total * G_right\n            if G_split < best_gini:\n                best_gini = G_split\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n            elif np.isclose(G_split, best_gini, atol=1e-12):\n                if feature_index < best_feature_index or (feature_index == best_feature_index and threshold < best_threshold_value):\n                    best_gini = G_split\n                    best_feature_index = feature_index\n                    best_threshold_value = threshold\n    if best_feature_index == -1:\n        return (-1, None, round(G_whole_dataset, 4))\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 190, "completion_id": 2, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    classes = np.unique(y)\n    n_classes = len(classes)\n\n    def gini(labels):\n        counts = np.bincount(labels, minlength=n_classes)\n        probabilities = counts / len(labels)\n        return 1 - np.sum(probabilities ** 2)\n    G_whole_dataset = gini(y)\n    best_gini = G_whole_dataset\n    best_feature_index = -1\n    best_threshold_value = None\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        if len(unique_values) == 1:\n            continue\n        for threshold in unique_values[:-1]:\n            left_mask = X[:, feature_index] <= threshold\n            right_mask = X[:, feature_index] > threshold\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            y_left = y[left_mask]\n            y_right = y[right_mask]\n            G_left = gini(y_left)\n            G_right = gini(y_right)\n            n_left = len(y_left)\n            n_right = len(y_right)\n            G_split = n_left / n_samples * G_left + n_right / n_samples * G_right\n            if G_split < best_gini - 1e-12:\n                best_gini = G_split\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n            elif np.isclose(G_split, best_gini, atol=1e-12):\n                if feature_index < best_feature_index:\n                    best_gini = G_split\n                    best_feature_index = feature_index\n                    best_threshold_value = threshold\n                elif feature_index == best_feature_index and threshold < best_threshold_value:\n                    best_threshold_value = threshold\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 190, "completion_id": 3, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n\n    def gini_impurity(labels):\n        (unique_labels, counts) = np.unique(labels, return_counts=True)\n        probabilities = counts / counts.sum()\n        return 1 - np.sum(probabilities ** 2)\n    G_whole_dataset = gini_impurity(y)\n    best_gini = G_whole_dataset\n    best_feature_index = -1\n    best_threshold_value = None\n    for j in range(n_features):\n        unique_values = np.unique(X[:, j])\n        if len(unique_values) == 1:\n            continue\n        for v in unique_values:\n            left_mask = X[:, j] <= v\n            right_mask = X[:, j] > v\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            G_left = gini_impurity(y[left_mask])\n            G_right = gini_impurity(y[right_mask])\n            n_left = np.sum(left_mask)\n            n_right = np.sum(right_mask)\n            G_split = n_left / n_samples * G_left + n_right / n_samples * G_right\n            if G_split < best_gini or (np.isclose(G_split, best_gini) and j < best_feature_index) or (np.isclose(G_split, best_gini) and j == best_feature_index and (v < best_threshold_value)):\n                best_gini = G_split\n                best_feature_index = j\n                best_threshold_value = v\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 190, "completion_id": 4, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    unique_labels = np.unique(y)\n    n_labels = len(unique_labels)\n    if n_labels == 1:\n        return (-1, None, round(gini(y), 4))\n    gini_whole = gini(y)\n    best_gini = gini_whole\n    best_feature_index = -1\n    best_threshold_value = None\n    for j in range(n_features):\n        unique_values = np.unique(X[:, j])\n        if len(unique_values) == 1:\n            continue\n        for v in unique_values:\n            left_mask = X[:, j] <= v\n            right_mask = X[:, j] > v\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            left_labels = y[left_mask]\n            right_labels = y[right_mask]\n            gini_left = gini(left_labels)\n            gini_right = gini(right_labels)\n            n_left = len(left_labels)\n            n_right = len(right_labels)\n            n_total = n_samples\n            weighted_gini = n_left / n_total * gini_left + n_right / n_total * gini_right\n            if weighted_gini < best_gini or (abs(weighted_gini - best_gini) < 1e-12 and j < best_feature_index) or (abs(weighted_gini - best_gini) < 1e-12 and j == best_feature_index and (v < best_threshold_value)):\n                best_gini = weighted_gini\n                best_feature_index = j\n                best_threshold_value = v\n    if best_feature_index == -1:\n        return (-1, None, round(gini_whole, 4))\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))\ndef gini(labels):\n    (unique_labels, counts) = np.unique(labels, return_counts=True)\n    proportions = counts / len(labels)\n    return 1 - np.sum(proportions ** 2)"}
{"task_id": 190, "completion_id": 5, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n\n    def gini(y):\n        classes = np.unique(y)\n        p = np.array([np.mean(y == c) for c in classes])\n        return 1 - np.sum(p ** 2)\n    G_whole_dataset = gini(y)\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = float('inf')\n    for j in range(n_features):\n        values = np.unique(X[:, j])\n        if len(values) == 1:\n            continue\n        for v in values:\n            left_mask = X[:, j] <= v\n            right_mask = X[:, j] > v\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            G_left = gini(y[left_mask])\n            G_right = gini(y[right_mask])\n            n_left = np.sum(left_mask)\n            n_right = np.sum(right_mask)\n            n_total = n_samples\n            G_split = n_left / n_total * G_left + n_right / n_total * G_right\n            if G_split < best_gini or (np.isclose(G_split, best_gini) and j < best_feature_index) or (np.isclose(G_split, best_gini) and j == best_feature_index and (v < best_threshold_value)):\n                best_feature_index = j\n                best_threshold_value = v\n                best_gini = G_split\n    if best_feature_index == -1:\n        return (-1, None, round(G_whole_dataset, 4))\n    else:\n        return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 190, "completion_id": 6, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    n_classes = len(np.unique(y))\n    counts = np.bincount(y, minlength=n_classes)\n    p = counts / n_samples\n    G_whole_dataset = 1 - np.sum(p ** 2)\n    best_gini = 1.0\n    best_feature_index = -1\n    best_threshold_value = None\n    for j in range(n_features):\n        sorted_indices = np.argsort(X[:, j])\n        sorted_X = X[sorted_indices, j]\n        sorted_y = y[sorted_indices]\n        unique_values = np.unique(sorted_X)\n        for i in range(len(unique_values) - 1):\n            v = (unique_values[i] + unique_values[i + 1]) / 2.0\n            left_indices = sorted_indices[sorted_X <= v]\n            right_indices = sorted_indices[sorted_X > v]\n            if len(left_indices) == 0 or len(right_indices) == 0:\n                continue\n            left_counts = np.bincount(sorted_y[left_indices], minlength=n_classes)\n            right_counts = np.bincount(sorted_y[right_indices], minlength=n_classes)\n            p_left = left_counts / len(left_indices)\n            p_right = right_counts / len(right_indices)\n            G_left = 1 - np.sum(p_left ** 2)\n            G_right = 1 - np.sum(p_right ** 2)\n            G_split = len(left_indices) / n_samples * G_left + len(right_indices) / n_samples * G_right\n            if G_split < best_gini or (np.isclose(G_split, best_gini, atol=1e-12) and (j < best_feature_index or (j == best_feature_index and v < best_threshold_value))):\n                best_gini = G_split\n                best_feature_index = j\n                best_threshold_value = v\n    if best_gini == 1.0:\n        return (-1, None, round(G_whole_dataset, 4))\n    else:\n        return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 190, "completion_id": 7, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y)\n    (n_samples, n_features) = X.shape\n    (unique_labels, counts) = np.unique(y, return_counts=True)\n    p_k = counts / n_samples\n    G_whole_dataset = 1 - np.sum(p_k ** 2)\n    if len(unique_labels) == 1:\n        return (-1, None, round(G_whole_dataset, 4))\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = np.inf\n    for j in range(n_features):\n        feature_values = X[:, j]\n        unique_values = np.unique(feature_values)\n        if len(unique_values) == 1:\n            continue\n        sorted_indices = np.argsort(feature_values)\n        sorted_feature_values = feature_values[sorted_indices]\n        sorted_y = y[sorted_indices]\n        left_counts = np.zeros(len(unique_labels))\n        right_counts = counts.copy()\n        for i in range(1, n_samples):\n            label = sorted_y[i - 1]\n            right_counts[unique_labels == label] -= 1\n            left_counts[unique_labels == label] += 1\n            threshold = (sorted_feature_values[i - 1] + sorted_feature_values[i]) / 2\n            if i > 1 and threshold == (sorted_feature_values[i - 2] + sorted_feature_values[i - 1]) / 2:\n                continue\n            n_left = i\n            n_right = n_samples - i\n            p_left = left_counts / n_left\n            p_right = right_counts / n_right\n            G_left = 1 - np.sum(p_left ** 2)\n            G_right = 1 - np.sum(p_right ** 2)\n            G_split = n_left / n_samples * G_left + n_right / n_samples * G_right\n            if G_split < best_gini or (np.isclose(G_split, best_gini) and j < best_feature_index) or (np.isclose(G_split, best_gini) and j == best_feature_index and (threshold < best_threshold_value)):\n                best_gini = G_split\n                best_feature_index = j\n                best_threshold_value = threshold\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 190, "completion_id": 8, "solution": "import numpy as np\ndef gini_impurity(labels):\n    \"\"\"Calculate the Gini impurity for a list of class labels.\"\"\"\n    m = len(labels)\n    if m == 0:\n        return 0.0\n    counts = np.bincount(labels)\n    proportions = counts / m\n    return 1.0 - np.sum(proportions ** 2)\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    G_whole_dataset = gini_impurity(y)\n    best_gini = np.inf\n    best_feature_index = -1\n    best_threshold_value = None\n    for j in range(n_features):\n        unique_values = np.unique(X[:, j])\n        if len(unique_values) < 2:\n            continue\n        for i in range(len(unique_values) - 1):\n            threshold = (unique_values[i] + unique_values[i + 1]) / 2.0\n            left_indices = X[:, j] <= threshold\n            right_indices = X[:, j] > threshold\n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue\n            G_left = gini_impurity(y[left_indices])\n            G_right = gini_impurity(y[right_indices])\n            n_left = np.sum(left_indices)\n            n_right = np.sum(right_indices)\n            n_total = n_left + n_right\n            G_split = n_left / n_total * G_left + n_right / n_total * G_right\n            if G_split < best_gini or (np.isclose(G_split, best_gini, atol=1e-12) and j < best_feature_index) or (np.isclose(G_split, best_gini, atol=1e-12) and j == best_feature_index and (threshold < best_threshold_value)):\n                best_gini = G_split\n                best_feature_index = j\n                best_threshold_value = threshold\n    if best_feature_index == -1:\n        return (-1, None, round(G_whole_dataset, 4))\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 190, "completion_id": 9, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n\n    def gini(labels):\n        m = len(labels)\n        if m == 0:\n            return 0\n        counts = np.bincount(labels)\n        probabilities = counts / m\n        return 1 - np.sum(probabilities ** 2)\n    G_whole_dataset = gini(y)\n    best_gini = 1.0\n    best_feature_index = -1\n    best_threshold_value = None\n    for feature_index in range(X.shape[1]):\n        values = X[:, feature_index]\n        unique_values = np.unique(values)\n        for value in unique_values:\n            left_indices = values <= value\n            right_indices = values > value\n            if np.any(left_indices) and np.any(right_indices):\n                G_left = gini(y[left_indices])\n                G_right = gini(y[right_indices])\n                n_left = np.sum(left_indices)\n                n_right = np.sum(right_indices)\n                n_total = n_left + n_right\n                weighted_gini = n_left / n_total * G_left + n_right / n_total * G_right\n                if weighted_gini < best_gini or (np.isclose(weighted_gini, best_gini) and feature_index < best_feature_index) or (np.isclose(weighted_gini, best_gini) and feature_index == best_feature_index and (value < best_threshold_value)):\n                    best_gini = weighted_gini\n                    best_feature_index = feature_index\n                    best_threshold_value = value\n    if best_feature_index == -1:\n        return (-1, None, round(G_whole_dataset, 4))\n    else:\n        return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def validate_vectors(x, y):\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except ValueError:\n            return (False, -1)\n        if x.ndim != 1 or y.ndim != 1:\n            return (False, -1)\n        if x.size != y.size or x.size == 0:\n            return (False, -1)\n        return (True, (x, y))\n\n    def euclidean(x, y):\n        return np.sqrt(np.sum((x - y) ** 2))\n\n    def manhattan(x, y):\n        return np.sum(np.abs(x - y))\n\n    def chebyshev(x, y):\n        return np.max(np.abs(x - y))\n\n    def cosine(x, y):\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return 1 - np.dot(x, y) / (norm_x * norm_y)\n    metric_functions = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n    if name not in metric_functions:\n        return lambda x, y: -1\n    metric_func = metric_functions[name]\n\n    def d(x, y):\n        (valid, vectors) = validate_vectors(x, y)\n        if not valid:\n            return -1\n        (x, y) = vectors\n        result = metric_func(x, y)\n        return round(result, 4) if result != -1 else -1\n    return d"}
{"task_id": 191, "completion_id": 1, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def validate_vectors(x, y):\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except (ValueError, TypeError):\n            return (False, None, None)\n        if x.ndim != 1 or y.ndim != 1:\n            return (False, None, None)\n        if len(x) != len(y) or len(x) == 0:\n            return (False, None, None)\n        return (True, x, y)\n\n    def euclidean(x, y):\n        return np.sqrt(np.sum((x - y) ** 2))\n\n    def manhattan(x, y):\n        return np.sum(np.abs(x - y))\n\n    def chebyshev(x, y):\n        return np.max(np.abs(x - y))\n\n    def cosine(x, y):\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return 1 - np.dot(x, y) / (norm_x * norm_y)\n\n    def d(x, y):\n        (valid, x, y) = validate_vectors(x, y)\n        if not valid:\n            return -1\n        if name == 'euclidean':\n            return round(euclidean(x, y), 4)\n        elif name == 'manhattan':\n            return round(manhattan(x, y), 4)\n        elif name == 'chebyshev':\n            return round(chebyshev(x, y), 4)\n        elif name == 'cosine':\n            return round(cosine(x, y), 4)\n        else:\n            return -1\n    return d"}
{"task_id": 191, "completion_id": 2, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def euclidean(x, y):\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except (ValueError, TypeError):\n            return -1\n        if x.ndim != 1 or y.ndim != 1 or len(x) != len(y) or (len(x) == 0):\n            return -1\n        return round(np.linalg.norm(x - y), 4)\n\n    def manhattan(x, y):\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except (ValueError, TypeError):\n            return -1\n        if x.ndim != 1 or y.ndim != 1 or len(x) != len(y) or (len(x) == 0):\n            return -1\n        return round(np.sum(np.abs(x - y)), 4)\n\n    def chebyshev(x, y):\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except (ValueError, TypeError):\n            return -1\n        if x.ndim != 1 or y.ndim != 1 or len(x) != len(y) or (len(x) == 0):\n            return -1\n        return round(np.max(np.abs(x - y)), 4)\n\n    def cosine(x, y):\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except (ValueError, TypeError):\n            return -1\n        if x.ndim != 1 or y.ndim != 1 or len(x) != len(y) or (len(x) == 0):\n            return -1\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return round(1 - np.dot(x, y) / (norm_x * norm_y), 4)\n    metrics = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n    return metrics.get(name, lambda *args: -1)"}
{"task_id": 191, "completion_id": 3, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def validate_vectors(x, y):\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except (ValueError, TypeError):\n            return False\n        if x.ndim != 1 or y.ndim != 1:\n            return False\n        if x.size != y.size or x.size == 0:\n            return False\n        return (x, y)\n\n    def euclidean(x, y):\n        return round(np.sqrt(np.sum((x - y) ** 2)), 4)\n\n    def manhattan(x, y):\n        return round(np.sum(np.abs(x - y)), 4)\n\n    def chebyshev(x, y):\n        return round(np.max(np.abs(x - y)), 4)\n\n    def cosine(x, y):\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return round(1 - np.dot(x, y) / (norm_x * norm_y), 4)\n\n    def d(x, y):\n        validated = validate_vectors(x, y)\n        if validated is False:\n            return -1\n        (x, y) = validated\n        if name == 'euclidean':\n            return euclidean(x, y)\n        elif name == 'manhattan':\n            return manhattan(x, y)\n        elif name == 'chebyshev':\n            return chebyshev(x, y)\n        elif name == 'cosine':\n            return cosine(x, y)\n        else:\n            return -1\n    return d"}
{"task_id": 191, "completion_id": 4, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def validate_vectors(x, y):\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except (ValueError, TypeError):\n            return False\n        if x.ndim != 1 or y.ndim != 1 or x.size == 0 or (y.size == 0) or (x.size != y.size):\n            return False\n        return (x, y)\n\n    def euclidean(x, y):\n        return np.sqrt(np.sum((x - y) ** 2))\n\n    def manhattan(x, y):\n        return np.sum(np.abs(x - y))\n\n    def chebyshev(x, y):\n        return np.max(np.abs(x - y))\n\n    def cosine(x, y):\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return 1 - np.dot(x, y) / (norm_x * norm_y)\n    metrics = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n    if name not in metrics:\n        return lambda x, y: -1\n\n    def d(x, y):\n        vectors = validate_vectors(x, y)\n        if vectors is False:\n            return -1\n        (x, y) = vectors\n        result = metrics[name](x, y)\n        return round(result, 4) if result != -1 else -1\n    return d"}
{"task_id": 191, "completion_id": 5, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def is_valid_vector(v):\n        try:\n            np.array(v, dtype=float)\n            return len(v) > 0\n        except (ValueError, TypeError):\n            return False\n\n    def euclidean(x, y):\n        return np.sqrt(np.sum((np.array(x) - np.array(y)) ** 2))\n\n    def manhattan(x, y):\n        return np.sum(np.abs(np.array(x) - np.array(y)))\n\n    def chebyshev(x, y):\n        return np.max(np.abs(np.array(x) - np.array(y)))\n\n    def cosine(x, y):\n        x_arr = np.array(x)\n        y_arr = np.array(y)\n        norm_x = np.linalg.norm(x_arr)\n        norm_y = np.linalg.norm(y_arr)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return 1 - np.dot(x_arr, y_arr) / (norm_x * norm_y)\n    metrics = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n\n    def d(x, y):\n        if name not in metrics:\n            return -1\n        if not (is_valid_vector(x) and is_valid_vector(y)):\n            return -1\n        if len(x) != len(y):\n            return -1\n        return round(metrics[name](x, y), 4)\n    return d"}
{"task_id": 191, "completion_id": 6, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def validate(v1, v2):\n        try:\n            v1 = np.array(v1, dtype=float)\n            v2 = np.array(v2, dtype=float)\n        except (ValueError, TypeError):\n            return False\n        if v1.ndim != 1 or v2.ndim != 1:\n            return False\n        if len(v1) != len(v2) or len(v1) == 0:\n            return False\n        return True\n\n    def euclidean(v1, v2):\n        return np.sqrt(np.sum((v1 - v2) ** 2))\n\n    def manhattan(v1, v2):\n        return np.sum(np.abs(v1 - v2))\n\n    def chebyshev(v1, v2):\n        return np.max(np.abs(v1 - v2))\n\n    def cosine(v1, v2):\n        norm_v1 = np.linalg.norm(v1)\n        norm_v2 = np.linalg.norm(v2)\n        if norm_v1 == 0 or norm_v2 == 0:\n            return -1\n        return 1 - np.dot(v1, v2) / (norm_v1 * norm_v2)\n    metrics = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n    if name not in metrics:\n        return lambda v1, v2: -1\n\n    def d(v1, v2):\n        if not validate(v1, v2):\n            return -1\n        result = metrics[name](v1, v2)\n        return round(result, 4)\n    return d"}
{"task_id": 191, "completion_id": 7, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def is_valid_vector(v):\n        try:\n            np.array(v, dtype=float)\n            return True\n        except (ValueError, TypeError):\n            return False\n\n    def validate_vectors(x, y):\n        if not (is_valid_vector(x) and is_valid_vector(y)):\n            return False\n        (x, y) = (np.array(x, dtype=float), np.array(y, dtype=float))\n        if x.ndim != 1 or y.ndim != 1:\n            return False\n        if len(x) != len(y) or len(x) == 0:\n            return False\n        if name == 'cosine' and (np.linalg.norm(x) == 0 or np.linalg.norm(y) == 0):\n            return False\n        return True\n\n    def euclidean(x, y):\n        return np.sqrt(np.sum((x - y) ** 2))\n\n    def manhattan(x, y):\n        return np.sum(np.abs(x - y))\n\n    def chebyshev(x, y):\n        return np.max(np.abs(x - y))\n\n    def cosine(x, y):\n        return 1 - np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y))\n    metric_functions = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n    if name not in metric_functions:\n        return lambda x, y: -1\n\n    def d(x, y):\n        if not validate_vectors(x, y):\n            return -1\n        (x, y) = (np.array(x, dtype=float), np.array(y, dtype=float))\n        return round(metric_functions[name](x, y), 4)\n    return d"}
{"task_id": 191, "completion_id": 8, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def validate_vectors(x, y):\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except (TypeError, ValueError):\n            return (False, -1)\n        if x.ndim != 1 or y.ndim != 1:\n            return (False, -1)\n        if len(x) != len(y) or len(x) == 0:\n            return (False, -1)\n        return (True, (x, y))"}
{"task_id": 191, "completion_id": 9, "solution": "import numpy as np\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def validate_vectors(x, y):\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except (ValueError, TypeError):\n            return -1\n        if x.ndim != 1 or y.ndim != 1 or x.size != y.size or (x.size == 0):\n            return -1\n        return (x, y)\n\n    def euclidean(x, y):\n        return np.round(np.sqrt(np.sum((x - y) ** 2)), 4)\n\n    def manhattan(x, y):\n        return np.round(np.sum(np.abs(x - y)), 4)\n\n    def chebyshev(x, y):\n        return np.round(np.max(np.abs(x - y)), 4)\n\n    def cosine(x, y):\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        cos_sim = np.dot(x, y) / (norm_x * norm_y)\n        return np.round(1 - cos_sim, 4)\n    metric_functions = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n\n    def d(x, y):\n        vectors = validate_vectors(x, y)\n        if vectors == -1:\n            return -1\n        (x, y) = vectors\n        if name in metric_functions:\n            return metric_functions[name](x, y)\n        else:\n            return -1\n    return d"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    if not md_action:\n        if cont_action:\n            n_actions_per_dim.append(np.inf)\n            action_dim = 1\n        else:\n            n_actions_per_dim.append(env.action_space.n)\n            action_ids = [(i,) for i in range(env.action_space.n)]\n            action_dim = 1\n    elif cont_action:\n        action_dim = env.action_space.shape[0]\n        n_actions_per_dim = [np.inf] * action_dim\n    else:\n        action_dim = len(env.action_space.spaces)\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n                break\n        if all((n != np.inf for n in n_actions_per_dim)):\n            action_ids = list(product(*(range(n) for n in n_actions_per_dim)))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 1, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    if cont_action:\n        if md_action:\n            for space in env.action_space.spaces:\n                if hasattr(space, 'shape'):\n                    n_actions_per_dim.append(np.inf)\n                else:\n                    n_actions_per_dim.append(space.n)\n                action_dim += 1\n        else:\n            n_actions_per_dim.append(np.inf)\n            action_dim = 1\n    elif md_action:\n        for space in env.action_space.spaces:\n            if hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n            else:\n                n_actions_per_dim.append(space.n)\n                action_ids = list(product(*(range(n) for n in n_actions_per_dim)))\n            action_dim += 1\n        if np.inf in n_actions_per_dim:\n            action_ids = None\n    else:\n        n_actions_per_dim.append(env.action_space.n)\n        action_ids = [tuple([i]) for i in range(env.action_space.n)]\n        action_dim = 1\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 2, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = []\n    action_dim = 0\n    if md_action:\n        action_spaces = env.action_space.spaces\n        action_dim = len(action_spaces)\n        for space in action_spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n        if all((isinstance(n, int) for n in n_actions_per_dim)):\n            action_ids = list(product(*(range(n) for n in n_actions_per_dim)))\n        else:\n            action_ids = None\n    else:\n        action_dim = 1\n        if cont_action:\n            n_actions_per_dim.append(np.inf)\n            action_ids = None\n        else:\n            n_actions_per_dim.append(env.action_space.n)\n            action_ids = list(range(env.action_space.n))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 3, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    if cont_action:\n        if md_action:\n            action_dim = len(env.action_space.spaces)\n            n_actions_per_dim = [np.inf] * action_dim\n        else:\n            action_dim = env.action_space.shape[0]\n            n_actions_per_dim = [np.inf] * action_dim\n    elif md_action:\n        action_dim = len(env.action_space.spaces)\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n        if all((n != np.inf for n in n_actions_per_dim)):\n            action_ids = list(product(*(range(n) for n in n_actions_per_dim)))\n    else:\n        action_dim = 1\n        n_actions_per_dim.append(env.action_space.n)\n        action_ids = [(i,) for i in range(env.action_space.n)]\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 4, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    if md_action:\n        action_dim = len(env.action_space.spaces)\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n                cont_action = True\n    elif hasattr(env.action_space, 'n'):\n        n_actions_per_dim.append(env.action_space.n)\n        action_dim = 1\n    elif hasattr(env.action_space, 'shape'):\n        n_actions_per_dim.append(np.inf)\n        cont_action = True\n        action_dim = env.action_space.shape[0]\n    if not cont_action:\n        action_ids = list(product(*(range(n) for n in n_actions_per_dim)))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 5, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    if md_action:\n        action_spaces = env.action_space.spaces\n        action_dim = len(action_spaces)\n        for space in action_spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n    elif cont_action:\n        action_dim = env.action_space.shape[0] if hasattr(env.action_space, 'shape') else 1\n        n_actions_per_dim = [np.inf] * action_dim\n    else:\n        action_dim = 1\n        if hasattr(env.action_space, 'n'):\n            n_actions_per_dim.append(env.action_space.n)\n        else:\n            raise ValueError('Action space is neither continuous nor discrete.')\n    if not any(np.isinf(n_actions_per_dim)):\n        action_ids = list(product(*(range(n) for n in n_actions_per_dim)))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 6, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    if cont_action:\n        if md_action:\n            for space in env.action_space.spaces:\n                if hasattr(space, 'shape'):\n                    n_actions_per_dim.append(np.inf)\n                else:\n                    n_actions_per_dim.append(space.n)\n                action_dim += 1\n        else:\n            n_actions_per_dim.append(np.inf)\n            action_dim = 1\n    elif md_action:\n        ranges = []\n        for space in env.action_space.spaces:\n            if hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n            else:\n                n_actions_per_dim.append(space.n)\n                ranges.append(range(space.n))\n            action_dim += 1\n        if np.inf in n_actions_per_dim:\n            action_ids = None\n        else:\n            action_ids = list(product(*ranges))\n    else:\n        n_actions_per_dim.append(env.action_space.n)\n        action_ids = [(i,) for i in range(env.action_space.n)]\n        action_dim = 1\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 7, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    if not md_action:\n        if cont_action:\n            n_actions_per_dim = [np.inf]\n            action_dim = 1\n        else:\n            n_actions_per_dim = [env.action_space.n]\n            action_ids = [(i,) for i in range(env.action_space.n)]\n            action_dim = 1\n    elif cont_action:\n        action_dim = env.action_space.shape[0]\n        n_actions_per_dim = [np.inf] * action_dim\n    else:\n        action_dim = len(env.action_space.spaces)\n        n_actions_per_dim = [space.n for space in env.action_space.spaces]\n        if all((isinstance(space.n, int) for space in env.action_space.spaces)):\n            action_ids = list(product(*(range(space.n) for space in env.action_space.spaces)))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 8, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    if not md_action:\n        if cont_action:\n            n_actions_per_dim.append(np.inf)\n            action_dim = 1\n        else:\n            n_actions_per_dim.append(env.action_space.n)\n            action_ids = [(i,) for i in range(env.action_space.n)]\n            action_dim = 1\n    else:\n        sub_spaces = env.action_space.spaces\n        action_dim = len(sub_spaces)\n        for sub_space in sub_spaces:\n            if hasattr(sub_space, 'n'):\n                n_actions_per_dim.append(sub_space.n)\n            elif hasattr(sub_space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n                cont_action = True\n        if not cont_action:\n            action_ids = list(product(*(range(n) for n in n_actions_per_dim)))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 197, "completion_id": 9, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    if md_action:\n        action_dim = len(env.action_space.spaces)\n        for sub_space in env.action_space.spaces:\n            if hasattr(sub_space, 'n'):\n                n_actions_per_dim.append(sub_space.n)\n            elif hasattr(sub_space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n                action_ids = None\n        if not cont_action and all((hasattr(sub_space, 'n') for sub_space in env.action_space.spaces)):\n            action_ids = list(product(*(range(dim) for dim in n_actions_per_dim)))\n    else:\n        action_dim = 1\n        if cont_action:\n            n_actions_per_dim.append(np.inf)\n        else:\n            n_actions_per_dim.append(env.action_space.n)\n            action_ids = list(range(env.action_space.n))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    beta = np.zeros((V, phi[0].shape[1]))\n    for d in range(len(phi)):\n        for n in range(len(corpus[d])):\n            word_index = corpus[d][n]\n            beta[word_index] += phi[d][n]\n    column_sums = beta.sum(axis=0)\n    column_sums[column_sums == 0] = 1\n    beta /= column_sums\n    beta_rounded = np.round(beta, 4)\n    beta_list = beta_rounded.tolist()\n    return beta_list"}
{"task_id": 198, "completion_id": 1, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    beta = np.zeros((V, phi[0].shape[1]))\n    for (d, doc) in enumerate(corpus):\n        for (n, word) in enumerate(doc):\n            beta[word] += phi[d][n]\n    column_sums = beta.sum(axis=0)\n    for t in range(beta.shape[1]):\n        if column_sums[t] > 0:\n            beta[:, t] /= column_sums[t]\n    beta_rounded = np.round(beta, 4)\n    beta_list = beta_rounded.tolist()\n    return beta_list"}
{"task_id": 198, "completion_id": 2, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for d in range(len(corpus)):\n        for n in range(len(corpus[d])):\n            v = corpus[d][n]\n            beta[v] += phi[d][n]\n    col_sums = beta.sum(axis=0)\n    col_sums[col_sums == 0] = 1\n    beta = beta / col_sums\n    beta = np.round(beta, 4)\n    beta_list = beta.tolist()\n    return beta_list"}
{"task_id": 198, "completion_id": 3, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for d in range(len(phi)):\n        for n in range(len(corpus[d])):\n            v = corpus[d][n]\n            beta[v] += phi[d][n]\n    for t in range(T):\n        col_sum = np.sum(beta[:, t])\n        if col_sum > 0:\n            beta[:, t] /= col_sum\n    beta_rounded = np.round(beta, 4)\n    beta_list = beta_rounded.tolist()\n    return beta_list"}
{"task_id": 198, "completion_id": 4, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for d in range(len(corpus)):\n        for n in range(len(corpus[d])):\n            word_index = corpus[d][n]\n            beta[word_index] += phi[d][n]\n    for t in range(T):\n        col_sum = np.sum(beta[:, t])\n        if col_sum > 0:\n            beta[:, t] /= col_sum\n    beta_rounded = np.round(beta, 4)\n    return beta_rounded.tolist()"}
{"task_id": 198, "completion_id": 5, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for d in range(len(corpus)):\n        for n in range(len(corpus[d])):\n            word_index = corpus[d][n]\n            beta[word_index] += phi[d][n]\n    column_sums = np.sum(beta, axis=0)\n    for t in range(T):\n        if column_sums[t] > 0:\n            beta[:, t] /= column_sums[t]\n    beta_rounded = np.round(beta, 4)\n    beta_list_of_lists = beta_rounded.tolist()\n    return beta_list_of_lists"}
{"task_id": 198, "completion_id": 6, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for (d, doc) in enumerate(corpus):\n        for (n, word_index) in enumerate(doc):\n            beta[word_index] += phi[d][n]\n    column_sums = beta.sum(axis=0)\n    column_sums[column_sums == 0] = 1\n    beta = beta / column_sums\n    beta_rounded = np.round(beta, 4)\n    return beta_rounded.tolist()"}
{"task_id": 198, "completion_id": 7, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]\n    beta = np.zeros((V, T))\n    for d in range(len(corpus)):\n        for n in range(len(corpus[d])):\n            word_index = corpus[d][n]\n            beta[word_index] += phi[d][n]\n    col_sums = beta.sum(axis=0)\n    col_sums[col_sums == 0] = 1\n    beta = beta / col_sums\n    beta_rounded = np.round(beta, 4)\n    beta_list = beta_rounded.tolist()\n    return beta_list"}
{"task_id": 198, "completion_id": 8, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    beta = np.zeros((V, phi[0].shape[1]))\n    for d in range(len(corpus)):\n        for n in range(len(corpus[d])):\n            word_index = corpus[d][n]\n            beta[word_index] += phi[d][n]\n    col_sums = beta.sum(axis=0)\n    col_sums[col_sums == 0] = 1\n    beta = beta / col_sums\n    beta_rounded = np.round(beta, 4)\n    beta_list = beta_rounded.tolist()\n    return beta_list"}
{"task_id": 198, "completion_id": 9, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    beta = np.zeros((V, phi[0].shape[1]))\n    for (d, doc) in enumerate(corpus):\n        for (n, word) in enumerate(doc):\n            beta[word] += phi[d][n]\n    column_sums = beta.sum(axis=0)\n    for t in range(beta.shape[1]):\n        if column_sums[t] > 0:\n            beta[:, t] /= column_sums[t]\n    beta_rounded = np.round(beta, 4)\n    beta_list = beta_rounded.tolist()\n    return beta_list"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n = X.shape[0]\n    medoids = list(range(k))\n\n    def compute_cost():\n        total_cost = 0\n        labels = np.zeros(n, dtype=int)\n        for i in range(n):\n            distances = np.linalg.norm(X[i] - X[medoids], axis=1)\n            nearest_medoid_index = np.argmin(distances)\n            labels[i] = nearest_medoid_index\n            total_cost += distances[nearest_medoid_index]\n        return (total_cost, labels)\n    (total_cost, labels) = compute_cost()\n    while True:\n        best_improvement = 0\n        best_swap = None\n        for medoid_index in range(k):\n            for non_medoid_index in range(k, n):\n                new_medoids = medoids.copy()\n                new_medoids[medoid_index] = non_medoid_index\n                (new_total_cost, _) = compute_cost_with_new_medoids(new_medoids)\n                improvement = total_cost - new_total_cost\n                if improvement > best_improvement:\n                    best_improvement = improvement\n                    best_swap = (medoid_index, non_medoid_index)\n        if best_improvement > 0:\n            (medoid_to_replace, new_medoid) = best_swap\n            medoids[medoid_to_replace] = new_medoid\n            total_cost -= best_improvement\n        else:\n            break\n    (final_total_cost, final_labels) = compute_cost()\n    return final_labels.tolist()\ndef compute_cost_with_new_medoids(new_medoids):\n    n = X.shape[0]\n    total_cost = 0\n    labels = np.zeros(n, dtype=int)\n    for i in range(n):\n        distances = np.linalg.norm(X[i] - X[new_medoids], axis=1)\n        nearest_medoid_index = np.argmin(distances)\n        labels[i] = nearest_medoid_index\n        total_cost += distances[nearest_medoid_index]\n    return (total_cost, labels)\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 202, "completion_id": 1, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n\n    def euclidean_distance(a, b):\n        return np.linalg.norm(a - b)\n\n    def compute_cost(medoids, labels):\n        cost = 0\n        for (i, label) in enumerate(labels):\n            cost += euclidean_distance(X[i], medoids[label])\n        return cost\n\n    def assign_labels(medoids):\n        labels = []\n        for sample in X:\n            distances = [euclidean_distance(sample, medoid) for medoid in medoids]\n            labels.append(distances.index(min(distances)))\n        return labels\n    medoids = X[:k]\n    labels = assign_labels(medoids)\n    current_cost = compute_cost(medoids, labels)\n    improved = True\n    while improved:\n        improved = False\n        for j in range(k):\n            for l in range(k, len(X)):\n                if l not in medoids:\n                    new_medoids = medoids.copy()\n                    new_medoids[j] = X[l]\n                    new_labels = assign_labels(new_medoids)\n                    new_cost = compute_cost(new_medoids, new_labels)\n                    if new_cost < current_cost:\n                        medoids = new_medoids\n                        labels = new_labels\n                        current_cost = new_cost\n                        improved = True\n                        break\n            if improved:\n                break\n    labels = assign_labels(medoids)\n    return labels\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 202, "completion_id": 2, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n = X.shape[0]\n    medoids = list(range(k))\n\n    def EuclideanDistance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n\n    def compute_total_cost(medoids, X):\n        total_cost = 0\n        labels = assign_labels(X, medoids)\n        for i in range(n):\n            total_cost += EuclideanDistance(X[i], X[medoids[labels[i]]])\n        return (total_cost, labels)\n\n    def assign_labels(X, medoids):\n        labels = []\n        for point in X:\n            distances = [EuclideanDistance(point, X[medoid]) for medoid in medoids]\n            labels.append(distances.index(min(distances)))\n        return labels\n    while True:\n        (total_cost, labels) = compute_total_cost(medoids, X)\n        best_swap = None\n        best_improvement = 0\n        for medoid_index in range(k):\n            for non_medoid_index in range(k, n):\n                if non_medoid_index not in medoids:\n                    (medoids[medoid_index], medoids[non_medoid_index]) = (medoids[non_medoid_index], medoids[medoid_index])\n                    (new_cost, _) = compute_total_cost(medoids, X)\n                    improvement = total_cost - new_cost\n                    (medoids[medoid_index], medoids[non_medoid_index]) = (medoids[non_medoid_index], medoids[medoid_index])\n                    if improvement > best_improvement:\n                        best_improvement = improvement\n                        best_swap = (medoid_index, non_medoid_index)\n        if best_swap is None:\n            break\n        (medoids[best_swap[0]], medoids[best_swap[1]]) = (medoids[best_swap[1]], medoids[best_swap[0]])\n    final_labels = assign_labels(X, medoids)\n    return final_labels\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 202, "completion_id": 3, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n\n    def calculate_cost(X, medoids):\n        total_cost = 0\n        for x in X:\n            closest_medoid = min(medoids, key=lambda m: euclidean_distance(x, m))\n            total_cost += euclidean_distance(x, closest_medoid)\n        return total_cost\n\n    def assign_clusters(X, medoids):\n        return [min(range(k), key=lambda i: euclidean_distance(x, medoids[i])) for x in X]\n    medoids = X[:k]\n    n = X.shape[0]\n    while True:\n        current_clusters = assign_clusters(X, medoids)\n        current_cost = calculate_cost(X, medoids)\n        best_swap = None\n        best_cost_reduction = 0\n        for medoid_index in range(k):\n            for swap_candidate_index in range(k, n):\n                (medoids[medoid_index], X[swap_candidate_index]) = (X[swap_candidate_index], medoids[medoid_index])\n                new_clusters = assign_clusters(X, medoids)\n                new_cost = calculate_cost(X, medoids)\n                cost_reduction = current_cost - new_cost\n                if cost_reduction > best_cost_reduction:\n                    best_swap = (medoid_index, swap_candidate_index)\n                    best_cost_reduction = cost_reduction\n                (medoids[medoid_index], X[swap_candidate_index]) = (X[swap_candidate_index], medoids[medoid_index])\n        if best_swap is None:\n            break\n        (medoid_index, swap_candidate_index) = best_swap\n        medoids[medoid_index] = X[swap_candidate_index]\n    return assign_clusters(X, medoids)\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 202, "completion_id": 4, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n\n    def calculate_cost(medoids):\n        cost = 0\n        labels = assign_labels(X, medoids)\n        for (i, x) in enumerate(X):\n            cost += euclidean_distance(x, medoids[labels[i]])\n        return (cost, labels)\n\n    def assign_labels(X, medoids):\n        labels = []\n        for x in X:\n            distances = [euclidean_distance(x, medoid) for medoid in medoids]\n            labels.append(np.argmin(distances))\n        return labels\n    n_samples = X.shape[0]\n    medoids = list(range(k))\n    while True:\n        (best_cost, labels) = calculate_cost([X[i] for i in medoids])\n        best_swap = None\n        for i in medoids:\n            for j in range(n_samples):\n                if j not in medoids:\n                    medoids_i = medoids[:]\n                    medoids_i[medoids_i.index(i)] = j\n                    (cost, _) = calculate_cost([X[i] for i in medoids_i])\n                    if cost < best_cost:\n                        best_cost = cost\n                        best_swap = (i, j)\n        if best_swap is None:\n            break\n        medoids[medoids.index(best_swap[0])] = best_swap[1]\n    return assign_labels(X, [X[i] for i in medoids])\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 202, "completion_id": 5, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n\n    def compute_total_cost(X, medoids, labels):\n        cost = 0\n        for i in range(len(X)):\n            medoid = medoids[labels[i]]\n            cost += np.linalg.norm(X[i] - medoid)\n        return cost\n\n    def assign_labels(X, medoids):\n        labels = []\n        for x in X:\n            distances = [np.linalg.norm(x - medoid) for medoid in medoids]\n            labels.append(np.argmin(distances))\n        return labels\n    n = X.shape[0]\n    medoids = X[:k]\n    labels = assign_labels(X, medoids)\n    total_cost = compute_total_cost(X, medoids, labels)\n    while True:\n        best_cost = total_cost\n        best_swap = None\n        for j in range(k):\n            for l in range(n):\n                if l not in medoids:\n                    new_medoids = medoids.copy()\n                    new_medoids[j] = X[l]\n                    new_labels = assign_labels(X, new_medoids)\n                    new_cost = compute_total_cost(X, new_medoids, new_labels)\n                    if new_cost < best_cost:\n                        best_cost = new_cost\n                        best_swap = (j, l)\n        if best_swap is None:\n            break\n        (j, l) = best_swap\n        medoids[j] = X[l]\n        labels = assign_labels(X, medoids)\n        total_cost = best_cost\n    return labels\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 202, "completion_id": 6, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n\n    def euclidean_distance(a, b):\n        return np.linalg.norm(a - b)\n\n    def calculate_cost(medoids):\n        cost = 0\n        labels = assign_labels(X, medoids)\n        for (i, label) in enumerate(labels):\n            cost += euclidean_distance(X[i], medoids[label])\n        return (cost, labels)\n\n    def assign_labels(X, medoids):\n        labels = []\n        for x in X:\n            distances = [euclidean_distance(x, medoid) for medoid in medoids]\n            labels.append(np.argmin(distances))\n        return labels\n    n = X.shape[0]\n    medoids = X[:k]\n    (total_cost, labels) = calculate_cost(medoids)\n    while True:\n        best_improvement = 0\n        swap_medoid = None\n        swap_non_medoid = None\n        for i in range(k):\n            for j in range(n):\n                if j not in medoids:\n                    medoids_candidate = medoids.copy()\n                    medoids_candidate[i] = X[j]\n                    (candidate_cost, _) = calculate_cost(medoids_candidate)\n                    improvement = total_cost - candidate_cost\n                    if improvement > best_improvement:\n                        best_improvement = improvement\n                        swap_medoid = i\n                        swap_non_medoid = j\n        if best_improvement > 0:\n            medoids[swap_medoid] = X[swap_non_medoid]\n            total_cost -= best_improvement\n        else:\n            break\n    final_labels = assign_labels(X, medoids)\n    return final_labels\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 202, "completion_id": 7, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n = X.shape[0]\n    medoids = list(range(k))\n\n    def compute_cost(medoids):\n        cost = 0\n        labels = []\n        for i in range(n):\n            distances = [np.linalg.norm(X[i] - X[m]) for m in medoids]\n            cost += min(distances)\n            labels.append(distances.index(min(distances)))\n        return (cost, labels)\n    (current_cost, labels) = compute_cost(medoids)\n    while True:\n        best_cost = current_cost\n        best_swap = None\n        for i in range(k):\n            for j in range(k, n):\n                new_medoids = medoids[:i] + [j] + medoids[i + 1:]\n                (new_cost, _) = compute_cost(new_medoids)\n                if new_cost < best_cost:\n                    best_cost = new_cost\n                    best_swap = (i, j)\n        if best_swap is None:\n            break\n        (i, j) = best_swap\n        medoids[i] = j\n        current_cost = best_cost\n    (_, final_labels) = compute_cost(medoids)\n    return final_labels\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 202, "completion_id": 8, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    (n, d) = X.shape\n    medoids = list(range(k))\n    labels = assign_labels(X, medoids, k)\n    cost = total_cost(X, labels, medoids)\n    while True:\n        best_swap_cost = cost\n        best_swap = None\n        for i in range(k):\n            medoid_i = medoids[i]\n            for j in range(k, n):\n                if j not in medoids:\n                    new_medoids = medoids[:]\n                    new_medoids[i] = j\n                    new_labels = assign_labels(X, new_medoids, k)\n                    new_cost = total_cost(X, new_labels, new_medoids)\n                    if new_cost < best_swap_cost:\n                        best_swap_cost = new_cost\n                        best_swap = (i, j)\n        if best_swap is None or best_swap_cost == cost:\n            break\n        (i, j) = best_swap\n        medoids[i] = j\n        cost = best_swap_cost\n        labels = assign_labels(X, medoids, k)\n    return labels\ndef assign_labels(X: np.ndarray, medoids: list[int], k: int) -> list[int]:\n    n = X.shape[0]\n    labels = [0] * n\n    for i in range(n):\n        min_dist = float('inf')\n        for j in range(k):\n            dist = np.linalg.norm(X[i] - X[medoids[j]])\n            if dist < min_dist:\n                min_dist = dist\n                labels[i] = j\n    return labels\ndef total_cost(X: np.ndarray, labels: list[int], medoids: list[int]) -> float:\n    cost = 0\n    for (i, label) in enumerate(labels):\n        cost += np.linalg.norm(X[i] - X[medoids[label]])\n    return cost\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 202, "completion_id": 9, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    (n_samples, _) = X.shape\n    medoids = list(range(k))\n\n    def compute_cost(labels, medoids):\n        cost = 0\n        for i in range(n_samples):\n            cost += np.linalg.norm(X[i] - X[medoids[labels[i]]])\n        return cost\n\n    def assign_clusters(medoids):\n        labels = []\n        for i in range(n_samples):\n            distances = [np.linalg.norm(X[i] - X[j]) for j in medoids]\n            labels.append(np.argmin(distances))\n        return labels\n    labels = assign_clusters(medoids)\n    current_cost = compute_cost(labels, medoids)\n    while True:\n        best_cost_reduction = 0\n        swap_indices = None\n        for i in range(k):\n            for j in range(n_samples):\n                if j not in medoids:\n                    new_medoids = medoids[:]\n                    new_medoids[i] = j\n                    new_labels = assign_clusters(new_medoids)\n                    new_cost = compute_cost(new_labels, new_medoids)\n                    cost_reduction = current_cost - new_cost\n                    if cost_reduction > best_cost_reduction:\n                        best_cost_reduction = cost_reduction\n                        swap_indices = (i, j)\n        if best_cost_reduction > 0:\n            medoids[swap_indices[0]] = swap_indices[1]\n            labels = assign_clusters(medoids)\n            current_cost -= best_cost_reduction\n        else:\n            break\n    labels = assign_clusters(medoids)\n    return labels\nX = np.array([[0, 0], [1, 0], [0, 1], [5, 5], [6, 5], [5, 6]])\nk = 2"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n\n    def polynomial_features(x, degree):\n        return np.column_stack([np.power(x, power) for power in range(degree + 1)])\n    x_train_poly = polynomial_features(x_train, degree)[:, 1:]\n    x_test_poly = polynomial_features(x_test, degree)[:, 1:]\n\n    def standardize_features(x):\n        mean = np.mean(x, axis=0)\n        std = np.std(x, axis=0)\n        return ((x - mean) / std, mean, std)\n    (x_train_poly, mean, std) = standardize_features(x_train_poly)\n    x_test_poly = (x_test_poly - mean) / std\n    x_train_poly = np.column_stack((np.ones(x_train_poly.shape[0]), x_train_poly))\n    x_test_poly = np.column_stack((np.ones(x_test_poly.shape[0]), x_test_poly))\n    weights = np.zeros(x_train_poly.shape[1])\n    for _ in range(n_iterations):\n        predictions = np.dot(x_train_poly, weights)\n        errors = predictions - y_train\n        gradient = 2 / x_train_poly.shape[0] * np.dot(x_train_poly.T, errors)\n        gradient[0] = 0\n        l1_regularization = l1_ratio * np.sign(weights)\n        l1_regularization[0] = 0\n        l2_regularization = (1 - l1_ratio) * (2 * weights)\n        l2_regularization[0] = 0\n        weights -= learning_rate * (gradient + reg_factor * (l1_regularization + l2_regularization))\n    predictions_test = np.dot(x_test_poly, weights)\n    return np.round(predictions_test, 4).tolist()"}
{"task_id": 216, "completion_id": 1, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n\n    def polynomial_features(x, degree):\n        x = np.asarray(x)\n        (n_samples, n_features) = x.shape\n        X_poly = np.ones((n_samples, 1))\n        for d in range(1, degree + 1):\n            for i in range(n_features):\n                X_poly = np.column_stack((X_poly, x[:, i] ** d))\n        return X_poly\n\n    def standardize_features(X):\n        mean = X.mean(axis=0)\n        std = X.std(axis=0)\n        std[std == 0] = 1\n        return ((X - mean) / std, mean, std)\n    x_train = np.asarray(x_train)\n    y_train = np.asarray(y_train)\n    x_test = np.asarray(x_test)\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    X_train_poly = polynomial_features(x_train, degree)\n    X_test_poly = polynomial_features(x_test, degree)\n    (X_train_poly_std, mean, std) = standardize_features(X_train_poly[:, 1:])\n    X_test_poly_std = (X_test_poly[:, 1:] - mean) / std\n    X_train_poly = np.column_stack((X_train_poly[:, 0], X_train_poly_std))\n    X_test_poly = np.column_stack((X_test_poly[:, 0], X_test_poly_std))\n    n_features = X_train_poly.shape[1]\n    weights = np.zeros(n_features)\n    l1_ratio = max(0, min(1, l1_ratio))\n    l1_reg_factor = reg_factor * l1_ratio\n    l2_reg_factor = reg_factor * (1 - l1_ratio)\n    for _ in range(n_iterations):\n        predictions = np.dot(X_train_poly, weights)\n        errors = predictions - y_train\n        gradient = 2 / len(y_train) * np.dot(X_train_poly.T, errors)\n        gradient[1:] += l2_reg_factor * weights[1:]\n        gradient[1:] += l1_reg_factor * np.sign(weights[1:])\n        weights -= learning_rate * gradient\n    test_predictions = np.dot(X_test_poly, weights)\n    return np.round(test_predictions, 4).tolist()"}
{"task_id": 216, "completion_id": 2, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    if n_iterations < 1:\n        return -1\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    if x_train.shape[1] != x_test.shape[1]:\n        return -1\n\n    def polynomial_features(X, degree):\n        n_features = X.shape[1]\n        n_samples = X.shape[0]\n        x_poly = X\n        for i in range(2, degree + 1):\n            for j in range(n_features):\n                x_poly = np.column_stack((x_poly, X[:, j] ** i))\n        return x_poly\n    X_train_poly = polynomial_features(x_train, degree)\n    X_test_poly = polynomial_features(x_test, degree)\n    X_train_poly = np.column_stack((np.ones(X_train_poly.shape[0]), X_train_poly))\n    X_test_poly = np.column_stack((np.ones(X_test_poly.shape[0]), X_test_poly))\n    X_mean = np.mean(X_train_poly[:, 1:], axis=0)\n    X_std = np.std(X_train_poly[:, 1:], axis=0)\n    X_train_poly[:, 1:] = (X_train_poly[:, 1:] - X_mean) / X_std\n    X_test_poly[:, 1:] = (X_test_poly[:, 1:] - X_mean) / X_std\n    n_features = X_train_poly.shape[1]\n    weights = np.zeros(n_features)\n    for _ in range(n_iterations):\n        predictions = np.dot(X_train_poly, weights)\n        errors = predictions - y_train\n        gradient = np.dot(X_train_poly.T, errors) / X_train_poly.shape[0]\n        l1_penalty = reg_factor * l1_ratio * np.sign(weights[1:])\n        l2_penalty = reg_factor * (1 - l1_ratio) * 2 * weights[1:]\n        weights[1:] -= learning_rate * (gradient[1:] + l1_penalty + l2_penalty)\n        weights[0] -= learning_rate * gradient[0]\n    predictions_test = np.dot(X_test_poly, weights)\n    return np.round(predictions_test, 4).tolist()"}
{"task_id": 216, "completion_id": 3, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n\n    def polynomial_features(X, degree):\n        X_poly = np.asarray(X)\n        for deg in range(2, degree + 1):\n            X_poly = np.hstack((X_poly, np.asarray(X) ** deg))\n        return X_poly\n\n    def standardize_features(X):\n        mean = np.mean(X, axis=0)\n        std = np.std(X, axis=0)\n        std[std == 0] = 1\n        return ((X - mean) / std, mean, std)\n\n    def sign(x):\n        return np.where(x > 0, 1, np.where(x < 0, -1, 0))\n    if n_iterations < 1:\n        return -1\n    if len(x_train) != len(y_train):\n        return -1\n    x_train = np.asarray(x_train)\n    x_test = np.asarray(x_test)\n    if x_train.shape[1] != x_test.shape[1]:\n        return -1\n    x_train_poly = polynomial_features(x_train, degree)\n    x_test_poly = polynomial_features(x_test, degree)\n    (x_train_poly_std, mean, std) = standardize_features(x_train_poly)\n    x_test_poly_std = (x_test_poly - mean) / std\n    x_train_poly_std = np.c_[np.ones(x_train_poly_std.shape[0]), x_train_poly_std]\n    x_test_poly_std = np.c_[np.ones(x_test_poly_std.shape[0]), x_test_poly_std]\n    weights = np.zeros(x_train_poly_std.shape[1])\n    for _ in range(n_iterations):\n        predictions = np.dot(x_train_poly_std, weights)\n        error = predictions - y_train\n        gradient = 2 / len(x_train_poly_std) * np.dot(x_train_poly_std.T, error)\n        l1_penalty = l1_ratio * reg_factor * sign(weights[1:])\n        l2_penalty = (1 - l1_ratio) * reg_factor * 2 * weights[1:]\n        regularized_gradient = np.r_[np.zeros(1), l1_penalty + l2_penalty]\n        weights -= learning_rate * (gradient + regularized_gradient)\n    predictions_test = np.dot(x_test_poly_std, weights)\n    return np.round(predictions_test, 4).tolist()"}
{"task_id": 216, "completion_id": 4, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    x_train = np.array(x_train, dtype=float)\n    y_train = np.array(y_train, dtype=float).reshape(-1, 1)\n    x_test = np.array(x_test, dtype=float)\n    if n_iterations < 1:\n        return -1\n    if x_train.shape[1] != x_test.shape[1]:\n        return -1\n\n    def polynomial_features(x, degree):\n        (n_samples, n_features) = x.shape\n        features = [np.ones(n_samples)]\n        for d in range(1, degree + 1):\n            for j in range(n_features):\n                features.append(np.power(x[:, j], d))\n        return np.column_stack(features)\n    x_train_poly = polynomial_features(x_train, degree)\n    x_test_poly = polynomial_features(x_test, degree)\n    mean = np.mean(x_train_poly[:, 1:], axis=0)\n    std = np.std(x_train_poly[:, 1:], axis=0)\n    x_train_poly[:, 1:] = (x_train_poly[:, 1:] - mean) / std\n    x_test_poly[:, 1:] = (x_test_poly[:, 1:] - mean) / std\n    n_features = x_train_poly.shape[1]\n    weights = np.zeros((n_features, 1))\n    for _ in range(n_iterations):\n        predictions = x_train_poly.dot(weights)\n        errors = predictions - y_train\n        gradient = 2 / n_samples * x_train_poly.T.dot(errors)\n        gradient[1:] += reg_factor * (l1_ratio * np.sign(weights[1:]) + (1 - l1_ratio) * weights[1:])\n        weights -= learning_rate * gradient\n    predictions_test = x_test_poly.dot(weights)\n    return np.round(predictions_test.flatten(), 4).tolist()"}
{"task_id": 216, "completion_id": 5, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n\n    def polynomial_features(X, degree):\n        X_poly = np.asarray(X)\n        if degree == 1:\n            return X_poly\n        for deg in range(2, degree + 1):\n            X_poly = np.column_stack((X_poly, np.asarray(X) ** deg))\n        return X_poly\n\n    def standardize_features(X):\n        mean = X.mean(axis=0)\n        std = X.std(axis=0)\n        std[std == 0] = 1\n        return ((X - mean) / std, mean, std)\n\n    def add_bias_term(X):\n        return np.column_stack((np.ones(X.shape[0]), X))\n\n    def sign(x):\n        return np.where(x > 0, 1, np.where(x < 0, -1, 0))\n    x_train = np.asarray(x_train)\n    y_train = np.asarray(y_train)\n    x_test = np.asarray(x_test)\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    X_train_poly = polynomial_features(x_train, degree)\n    X_test_poly = polynomial_features(x_test, degree)\n    (X_train_poly_std, mean, std) = standardize_features(X_train_poly)\n    X_test_poly_std = (X_test_poly - mean) / std\n    X_train_poly_std = add_bias_term(X_train_poly_std)\n    X_test_poly_std = add_bias_term(X_test_poly_std)\n    weights = np.zeros(X_train_poly_std.shape[1])\n    for _ in range(n_iterations):\n        predictions = X_train_poly_std.dot(weights)\n        errors = predictions - y_train\n        grad_w = 2 / len(y_train) * X_train_poly_std.T.dot(errors)\n        l1_grad = l1_ratio * sign(weights[1:])\n        l2_grad = (1 - l1_ratio) * 2 * reg_factor * weights[1:]\n        reg_grad = np.concatenate(([0], l1_grad + l2_grad))\n        weights -= learning_rate * (grad_w + reg_grad)\n    test_predictions = X_test_poly_std.dot(weights)\n    return np.round(test_predictions, 4).tolist()"}
{"task_id": 216, "completion_id": 6, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n\n    def polynomial_features(X, degree):\n        X = np.asarray(X)\n        (n_samples, n_features) = X.shape\n        n_output_features = sum([n_features ** k for k in range(degree + 1)])\n        X_out = np.ones((n_samples, n_output_features))\n        col = 1\n        for deg in range(1, degree + 1):\n            for idx in np.ndindex(*[n_features] * deg):\n                X_out[:, col] = np.prod(X[:, idx], axis=1)\n                col += 1\n        return X_out\n\n    def standardize(X):\n        X = np.asarray(X)\n        mean = np.mean(X, axis=0)\n        std = np.std(X, axis=0)\n        X_normalized = (X - mean) / std\n        return (X_normalized, mean, std)\n\n    def add_bias_term(X):\n        return np.c_[np.ones(X.shape[0]), X]\n\n    def elastic_net_loss(X, y, weights, reg_factor, l1_ratio):\n        predictions = X.dot(weights)\n        mse = 1 / (2 * len(y)) * np.sum((predictions - y) ** 2)\n        l1_penalty = reg_factor * l1_ratio * np.sum(np.abs(weights[1:]))\n        l2_penalty = reg_factor * (1 - l1_ratio) * np.sum(weights[1:] ** 2)\n        return mse + l1_penalty + l2_penalty\n\n    def elastic_net_gradient(X, y, weights, reg_factor, l1_ratio):\n        predictions = X.dot(weights)\n        error = predictions - y\n        gradient = 1 / len(y) * X.T.dot(error)\n        l1_grad = reg_factor * l1_ratio * np.sign(weights[1:])\n        l2_grad = reg_factor * (1 - l1_ratio) * weights[1:]\n        gradient[1:] += l1_grad + l2_grad\n        return gradient\n    x_train = np.asarray(x_train)\n    x_test = np.asarray(x_test)\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    X_train_poly = polynomial_features(x_train, degree)\n    X_test_poly = polynomial_features(x_test, degree)\n    (X_train_poly_std, mean, std) = standardize(X_train_poly[:, 1:])\n    (X_test_poly_std, _, _) = standardize(X_test_poly[:, 1:], mean, std)\n    X_train_poly_std = add_bias_term(X_train_poly_std)\n    X_test_poly_std = add_bias_term(X_test_poly_std)\n    weights = np.zeros(X_train_poly_std.shape[1])\n    for _ in range(n_iterations):\n        gradient = elastic_net_gradient(X_train_poly_std, y_train, weights, reg_factor, l1_ratio)\n        weights -= learning_rate * gradient\n    predictions = X_test_poly_std.dot(weights)\n    return np.round(predictions, 4).tolist()"}
{"task_id": 216, "completion_id": 7, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    x_train = np.array(x_train, dtype=float)\n    y_train = np.array(y_train, dtype=float)\n    x_test = np.array(x_test, dtype=float)\n    if n_iterations < 1:\n        return -1\n    if x_train.shape[1] != x_test.shape[1]:\n        return -1\n\n    def polynomial_features(X, degree):\n        if degree == 1:\n            return X\n        else:\n            X_poly = X\n            for deg in range(2, degree + 1):\n                X_poly = np.hstack((X_poly, X ** deg))\n            return X_poly\n    x_train_poly = polynomial_features(x_train, degree)\n    x_test_poly = polynomial_features(x_test, degree)\n\n    def standardize(X):\n        mean = X.mean(axis=0)\n        std = X.std(axis=0)\n        std[std == 0] = 1\n        return ((X - mean) / std, mean, std)\n    (x_train_std, mean, std) = standardize(x_train_poly)\n    x_test_std = (x_test_poly - mean) / std\n    x_train_std = np.hstack((np.ones((x_train_std.shape[0], 1)), x_train_std))\n    x_test_std = np.hstack((np.ones((x_test_std.shape[0], 1)), x_test_std))\n    weights = np.zeros(x_train_std.shape[1])\n\n    def sign(w):\n        return np.where(w > 0, 1, -1) + (w == 0) * 0\n    for _ in range(n_iterations):\n        y_pred = x_train_std.dot(weights)\n        errors = y_pred - y_train\n        gradient = 2 / x_train_std.shape[0] * x_train_std.T.dot(errors)\n        gradient[1:] += reg_factor * ((1 - l1_ratio) * 2 * weights[1:] + l1_ratio * sign(weights[1:]))\n        weights -= learning_rate * gradient\n    y_test_pred = x_test_std.dot(weights)\n    return np.round(y_test_pred, 4).tolist()"}
{"task_id": 216, "completion_id": 8, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n\n    def polynomial_features(X, degree):\n        return np.concatenate([np.power(X, i) for i in range(1, degree + 1)], axis=1)\n    X_train_poly = polynomial_features(x_train, degree)\n    X_test_poly = polynomial_features(x_test, degree)\n    mean = np.mean(X_train_poly, axis=0)\n    std = np.std(X_train_poly, axis=0)\n    std[std == 0] = 1\n    X_train_poly = (X_train_poly - mean) / std\n    X_test_poly = (X_test_poly - mean) / std\n    X_train_poly = np.hstack([np.ones((X_train_poly.shape[0], 1)), X_train_poly])\n    X_test_poly = np.hstack([np.ones((X_test_poly.shape[0], 1)), X_test_poly])\n    weights = np.zeros(X_train_poly.shape[1])\n\n    def l1_penalty(weights):\n        return reg_factor * l1_ratio * np.sum(np.abs(weights[1:]))\n\n    def l2_penalty(weights):\n        return reg_factor * (1 - l1_ratio) * np.sum(weights[1:] ** 2)\n    for _ in range(n_iterations):\n        predictions = np.dot(X_train_poly, weights)\n        mse_gradient = 2 / X_train_poly.shape[0] * np.dot(X_train_poly.T, predictions - y_train)\n        l1_gradient = reg_factor * l1_ratio * np.sign(weights[1:])\n        l1_gradient = np.concatenate([[0], l1_gradient])\n        l2_gradient = reg_factor * (1 - l1_ratio) * weights\n        l2_gradient[0] = 0\n        weights -= learning_rate * (mse_gradient + l1_gradient + l2_gradient)\n    test_predictions = np.dot(X_test_poly, weights)\n    return np.round(test_predictions, 4).tolist()"}
{"task_id": 216, "completion_id": 9, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    if n_iterations < 1:\n        return -1\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    if x_train.shape[1] != x_test.shape[1]:\n        return -1\n\n    def polynomial_features(X, degree):\n        from itertools import combinations_with_replacement\n        from functools import reduce\n        from operator import mul\n        (n_samples, n_features) = X.shape\n        features = [X ** i for i in range(degree + 1)]\n        combos = combinations_with_replacement(range(n_features), degree)\n        feature_matrix = np.empty((n_samples, sum((1 for _ in combos))))\n        combos = combinations_with_replacement(range(n_features), degree)\n        for (index, combo) in enumerate(combos):\n            feature_matrix[:, index] = reduce(mul, [features[i][:, combo[i]] for i in range(degree)])\n        return feature_matrix\n\n    def standardize(X):\n        mean = X.mean(axis=0, keepdims=True)\n        std = X.std(axis=0, keepdims=True)\n        X_standardized = (X - mean) / std\n        return (X_standardized, mean, std)\n    x_train_poly = polynomial_features(x_train, degree)\n    x_test_poly = polynomial_features(x_test, degree)\n    (x_train_standardized, mean, std) = standardize(x_train_poly[:, 1:])\n    x_test_standardized = (x_test_poly[:, 1:] - mean) / std\n    x_train_final = np.c_[np.ones(x_train_poly.shape[0]), x_train_standardized]\n    x_test_final = np.c_[np.ones(x_test_poly.shape[0]), x_test_standardized]\n    weights = np.zeros(x_train_final.shape[1])\n    for _ in range(n_iterations):\n        predictions = np.dot(x_train_final, weights)\n        errors = predictions - y_train\n        gradient = np.dot(x_train_final.T, errors) / len(x_train)\n        gradient[1:] += reg_factor * (l1_ratio * np.sign(weights[1:]) + (1 - l1_ratio) * weights[1:])\n        weights -= learning_rate * gradient\n    predictions_test = np.dot(x_test_final, weights)\n    return np.round(predictions_test, 4).tolist()"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual, dtype=np.float64)\n    predicted = np.array(predicted, dtype=np.float64)\n    prob = 1 / (1 + np.exp(-predicted))\n    grad = actual * np.exp(-actual * predicted) / (1 + np.exp(-actual * predicted))\n    hess = prob * (1 - prob)\n    grad_rounded = np.round(grad, 6)\n    hess_rounded = np.round(hess, 6)\n    prob_rounded = np.round(prob, 6)\n    gradient_list = grad_rounded.tolist()\n    hessian_list = hess_rounded.tolist()\n    probability_list = prob_rounded.tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 217, "completion_id": 1, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    sigmoid_pred = 1 / (1 + np.exp(-predicted))\n    gradient = actual * np.exp(-actual * predicted) / (1 + np.exp(-actual * predicted))\n    hessian = sigmoid_pred * (1 - sigmoid_pred)\n    gradient_rounded = np.round(gradient, 6)\n    hessian_rounded = np.round(hessian, 6)\n    sigmoid_pred_rounded = np.round(sigmoid_pred, 6)\n    gradient_list = gradient_rounded.tolist()\n    hessian_list = hessian_rounded.tolist()\n    probability_list = sigmoid_pred_rounded.tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 217, "completion_id": 2, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    sigmoid_predicted = 1 / (1 + np.exp(-predicted))\n    gradient = actual * np.exp(-actual * predicted) / (1 + np.exp(-actual * predicted))\n    hessian = sigmoid_predicted * (1 - sigmoid_predicted)\n    gradient_list = [round(g, 6) for g in gradient]\n    hessian_list = [round(h, 6) for h in hessian]\n    probability_list = [round(p, 6) for p in sigmoid_predicted]\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 217, "completion_id": 3, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    sigmoid = 1 / (1 + np.exp(-predicted))\n    gradient = actual * sigmoid * (1 - sigmoid * actual)\n    hessian = sigmoid * (1 - sigmoid)\n    gradient = np.round(gradient, 6)\n    hessian = np.round(hessian, 6)\n    sigmoid = np.round(sigmoid, 6)\n    gradient_list = gradient.tolist()\n    hessian_list = hessian.tolist()\n    probability_list = sigmoid.tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 217, "completion_id": 4, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual, dtype=np.float64)\n    predicted = np.array(predicted, dtype=np.float64)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    probabilities = sigmoid(predicted)\n    gradient = actual * sigmoid(-actual * predicted)\n    hessian = probabilities * (1 - probabilities)\n    gradient = np.round(gradient, 6)\n    hessian = np.round(hessian, 6)\n    probabilities = np.round(probabilities, 6)\n    gradient_list = gradient.tolist()\n    hessian_list = hessian.tolist()\n    probability_list = probabilities.tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 217, "completion_id": 5, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual, dtype=np.float64)\n    predicted = np.array(predicted, dtype=np.float64)\n    sigmoid_predicted = 1 / (1 + np.exp(-predicted))\n    gradient = actual * sigmoid(-actual * predicted)\n    hessian = sigmoid_predicted * (1 - sigmoid_predicted)\n    gradient_rounded = np.round(gradient, 6)\n    hessian_rounded = np.round(hessian, 6)\n    sigmoid_predicted_rounded = np.round(sigmoid_predicted, 6)\n    gradient_list = gradient_rounded.tolist()\n    hessian_list = hessian_rounded.tolist()\n    probability_list = sigmoid_predicted_rounded.tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 217, "completion_id": 6, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    sigmoid = 1 / (1 + np.exp(-predicted))\n    gradient = actual * sigmoid * (-actual * predicted)\n    hessian = sigmoid * (1 - sigmoid)\n    gradient_list = np.round(gradient, 6).tolist()\n    hessian_list = np.round(hessian, 6).tolist()\n    probability_list = np.round(sigmoid, 6).tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 217, "completion_id": 7, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual, dtype=float)\n    predicted = np.array(predicted, dtype=float)\n    prob = 1 / (1 + np.exp(-predicted))\n    grad = actual * np.exp(-actual * predicted) / (1 + np.exp(-actual * predicted))\n    hess = prob * (1 - prob)\n    grad = np.round(grad, 6)\n    hess = np.round(hess, 6)\n    prob = np.round(prob, 6)\n    gradient_list = grad.tolist()\n    hessian_list = hess.tolist()\n    probability_list = prob.tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 217, "completion_id": 8, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    prob = sigmoid(predicted)\n    grad = actual * sigmoid(-actual * predicted)\n    hess = prob * (1 - prob)\n    grad = np.round(grad, 6)\n    hess = np.round(hess, 6)\n    prob = np.round(prob, 6)\n    gradient_list = grad.tolist()\n    hessian_list = hess.tolist()\n    probability_list = prob.tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 217, "completion_id": 9, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    prob = 1 / (1 + np.exp(-predicted))\n    grad = actual * np.exp(-actual * predicted) / (1 + np.exp(-actual * predicted))\n    hess = prob * (1 - prob)\n    grad_rounded = np.round(grad, 6)\n    hess_rounded = np.round(hess, 6)\n    prob_rounded = np.round(prob, 6)\n    gradient_list = grad_rounded.tolist()\n    hessian_list = hess_rounded.tolist()\n    probability_list = prob_rounded.tolist()\n    return (gradient_list, hessian_list, probability_list)"}
{"task_id": 218, "completion_id": 0, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_value(hand: list[int]) -> int:\n        value = sum(hand)\n        aces = hand.count(1)\n        while aces > 0 and value + 10 <= 21:\n            value += 10\n            aces -= 1\n        return value\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        return len(hand) == 2 and 1 in hand and (10 in hand)\n    player_value = hand_value(player)\n    dealer_value = hand_value(dealer)\n    if player_value > 21:\n        return -1.0\n    if dealer_value > 21:\n        return 1.0\n    if is_natural_blackjack(player):\n        return 1.5\n    if player_value > dealer_value:\n        return 1.0\n    elif player_value < dealer_value:\n        return -1.0\n    else:\n        return 0.0"}
{"task_id": 218, "completion_id": 1, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_value(hand: list[int]) -> int:\n        \"\"\"Calculate the value of a hand, considering the usability of Ace.\"\"\"\n        value = sum(hand)\n        aces = hand.count(1)\n        while aces > 0 and value + 10 <= 21:\n            value += 10\n            aces -= 1\n        return value\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"Check if a hand is a natural blackjack.\"\"\"\n        return len(hand) == 2 and 1 in hand and (10 in hand)\n    player_value = hand_value(player)\n    dealer_value = hand_value(dealer)\n    if player_value > 21:\n        return -1.0\n    if dealer_value > 21:\n        return 1.0\n    if is_natural_blackjack(player):\n        return 1.5\n    if player_value > dealer_value:\n        return 1.0\n    elif player_value < dealer_value:\n        return -1.0\n    else:\n        return 0.0"}
{"task_id": 218, "completion_id": 2, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_value(hand):\n        total = sum(hand)\n        aces = hand.count(1)\n        while total > 21 and aces:\n            total -= 10\n            aces -= 1\n        return total\n\n    def is_natural_blackjack(hand):\n        return len(hand) == 2 and 1 in hand and (10 in hand)\n    player_busts = hand_value(player) > 21\n    dealer_busts = hand_value(dealer) > 21\n    if player_busts:\n        return -1.0\n    if dealer_busts:\n        return 1.0\n    player_score = hand_value(player)\n    dealer_score = hand_value(dealer)\n    if player_score > dealer_score:\n        if is_natural_blackjack(player):\n            return 1.5\n        return 1.0\n    elif player_score < dealer_score:\n        return -1.0\n    else:\n        return 0.0"}
{"task_id": 218, "completion_id": 3, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_value(hand: list[int]) -> int:\n        \"\"\"Calculate the best possible value of a hand in Blackjack.\"\"\"\n        value = sum(hand)\n        aces = hand.count(1)\n        while value > 21 and aces > 0:\n            value -= 10\n            aces -= 1\n        return value\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"Check if a hand is a natural blackjack.\"\"\"\n        return len(hand) == 2 and 1 in hand and (10 in hand)\n    player_value = hand_value(player)\n    dealer_value = hand_value(dealer)\n    if player_value > 21:\n        return -1\n    if dealer_value > 21:\n        return 1\n    if is_natural_blackjack(player):\n        return 1.5\n    if player_value > dealer_value:\n        return 1\n    elif player_value < dealer_value:\n        return -1\n    else:\n        return 0"}
{"task_id": 218, "completion_id": 4, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_value(hand: list[int]) -> int:\n        \"\"\"Calculate the best possible value of a hand.\"\"\"\n        value = sum(hand)\n        aces = hand.count(1)\n        while aces > 0 and value + 10 <= 21:\n            value += 10\n            aces -= 1\n        return value\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"Check if the hand is a natural blackjack.\"\"\"\n        return len(hand) == 2 and 1 in hand and (10 in hand)\n    player_value = hand_value(player)\n    dealer_value = hand_value(dealer)\n    if player_value > 21:\n        return -1.0\n    if dealer_value > 21:\n        return 1.0\n    if is_natural_blackjack(player):\n        return 1.5\n    if player_value > dealer_value:\n        return 1.0\n    elif player_value < dealer_value:\n        return -1.0\n    else:\n        return 0.0"}
{"task_id": 218, "completion_id": 5, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_value(hand: list[int]) -> int:\n        total = sum(hand)\n        aces = hand.count(1)\n        while aces and total + 10 <= 21:\n            total += 10\n            aces -= 1\n        return total\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        return len(hand) == 2 and 1 in hand and (10 in hand)\n    player_bust = hand_value(player) > 21\n    dealer_bust = hand_value(dealer) > 21\n    if player_bust:\n        return -1.0\n    elif dealer_bust:\n        return 1.0\n    else:\n        player_score = hand_value(player)\n        dealer_score = hand_value(dealer)\n        if is_natural_blackjack(player):\n            return 1.5 if player_score > dealer_score else 0.0\n        elif player_score > dealer_score:\n            return 1.0\n        elif player_score < dealer_score:\n            return -1.0\n        else:\n            return 0.0"}
{"task_id": 218, "completion_id": 6, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def calculate_hand_value(hand: list[int]) -> int:\n        value = sum(hand)\n        aces = hand.count(1)\n        while value > 21 and aces > 0:\n            value -= 10\n            aces -= 1\n        return value\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        return len(hand) == 2 and 1 in hand and (10 in hand)\n    player_value = calculate_hand_value(player)\n    dealer_value = calculate_hand_value(dealer)\n    if player_value > 21:\n        return -1\n    if dealer_value > 21:\n        return 1\n    if is_natural_blackjack(player):\n        return 1.5\n    if player_value > dealer_value:\n        return 1\n    elif player_value < dealer_value:\n        return -1\n    else:\n        return 0"}
{"task_id": 218, "completion_id": 7, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_value(hand: list[int]) -> int:\n        total = sum(hand)\n        aces = hand.count(1)\n        while total <= 11 and aces > 0:\n            total += 10\n            aces -= 1\n        return total\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        return len(hand) == 2 and hand_value(hand) == 21\n    player_bust = hand_value(player) > 21\n    dealer_bust = hand_value(dealer) > 21\n    if player_bust:\n        return -1.0\n    if dealer_bust:\n        return 1.0\n    player_score = hand_value(player)\n    dealer_score = hand_value(dealer)\n    if is_natural_blackjack(player):\n        return 1.5\n    if player_score > dealer_score:\n        return 1.0\n    if player_score < dealer_score:\n        return -1.0\n    return 0.0"}
{"task_id": 218, "completion_id": 8, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def calculate_score(hand: list[int]) -> int:\n        value = sum(hand)\n        num_aces = hand.count(1)\n        while value + 10 <= 21 and num_aces > 0:\n            value += 10\n            num_aces -= 1\n        return value\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        return len(hand) == 2 and 1 in hand and (10 in hand)\n    player_score = calculate_score(player)\n    dealer_score = calculate_score(dealer)\n    if player_score > 21:\n        return -1.0\n    elif dealer_score > 21:\n        return 1.0\n    elif is_natural_blackjack(player):\n        return 1.5\n    elif player_score > dealer_score:\n        return 1.0\n    elif player_score < dealer_score:\n        return -1.0\n    else:\n        return 0.0"}
{"task_id": 218, "completion_id": 9, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_value(hand: list[int]) -> int:\n        value = sum(hand)\n        aces = hand.count(1)\n        while value > 21 and aces > 0:\n            value -= 10\n            aces -= 1\n        return value\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        return len(hand) == 2 and sum(hand) == 11 and (1 in hand) and (10 in hand)\n    player_value = hand_value(player)\n    dealer_value = hand_value(dealer)\n    if player_value > 21:\n        return -1\n    if dealer_value > 21:\n        return 1\n    if is_natural_blackjack(player):\n        return 1.5\n    if player_value > dealer_value:\n        return 1\n    elif player_value < dealer_value:\n        return -1\n    else:\n        return 0"}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"TODO: implement helper that returns element-wise squared log errors.\"\"\"\n    try:\n        actual_arr = np.array(actual)\n        predicted_arr = np.array(predicted)\n        if np.any(actual_arr < 0) or np.any(predicted_arr < 0):\n            return -1\n        sl_errors = (np.log1p(actual_arr) - np.log1p(predicted_arr)) ** 2\n        return sl_errors\n    except ValueError:\n        return -1\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    sl_errors = squared_log_error(actual, predicted)\n    if sl_errors == -1:\n        return -1\n    if len(actual) != len(predicted):\n        return -1\n    msle = np.mean(sl_errors)\n    return round(msle, 4)"}
{"task_id": 221, "completion_id": 1, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    try:\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n        if np.any(actual < 0) or np.any(predicted < 0):\n            return -1\n        return (np.log1p(actual) - np.log1p(predicted)) ** 2\n    except Exception as e:\n        return -1\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    try:\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n        if actual.shape != predicted.shape:\n            return -1\n        squared_errors = squared_log_error(actual, predicted)\n        if squared_errors == -1:\n            return -1\n        msle = np.mean(squared_errors)\n        return round(msle, 4)\n    except Exception as e:\n        return -1\nactual = [3, -0.5, 2, 7]\npredicted = [2.5, 0.3, 2, 8]"}
{"task_id": 221, "completion_id": 2, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    try:\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n        if actual.shape != predicted.shape:\n            return -1\n        if (actual < 0).any() or (predicted < 0).any():\n            return -1\n        sl_errors = (np.log1p(actual) - np.log1p(predicted)) ** 2\n        return sl_errors\n    except:\n        return -1\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    sl_errors = squared_log_error(actual, predicted)\n    if isinstance(sl_errors, int) and sl_errors == -1:\n        return -1\n    msle = np.mean(sl_errors)\n    return round(float(msle), 4)"}
{"task_id": 221, "completion_id": 3, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    try:\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n        if np.any(actual < 0) or np.any(predicted < 0):\n            return -1\n        squared_log_errors = (np.log1p(actual) - np.log1p(predicted)) ** 2\n        return squared_log_errors\n    except Exception as e:\n        return -1\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    try:\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n        if actual.shape != predicted.shape:\n            return -1\n        squared_logs = squared_log_error(actual, predicted)\n        if squared_logs == -1:\n            return -1\n        msle = np.mean(squared_logs)\n        return round(msle, 4)\n    except Exception as e:\n        return -1\nactual = [3, -0.5, 2, 7]\npredicted = [2.5, 0.3, 2, 8]"}
{"task_id": 221, "completion_id": 4, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Compute element-wise squared logarithmic errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    actual = np.asarray(actual)\n    predicted = np.asarray(predicted)\n    if actual.shape != predicted.shape:\n        return -1\n    if (actual < 0).any() or (predicted < 0).any():\n        return -1\n    sl_error = squared_log_error(actual, predicted)\n    msle = np.mean(sl_error)\n    return round(msle, 4)"}
{"task_id": 221, "completion_id": 5, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    try:\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n        if np.any(actual < 0) or np.any(predicted < 0):\n            return -1\n        return (np.log1p(actual) - np.log1p(predicted)) ** 2\n    except ValueError:\n        return -1\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    squared_errors = squared_log_error(actual, predicted)\n    if squared_errors == -1:\n        return -1\n    return round(np.mean(squared_errors), 4)"}
{"task_id": 221, "completion_id": 6, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    try:\n        actual = np.array(actual, dtype=np.float64)\n        predicted = np.array(predicted, dtype=np.float64)\n        if np.any(actual < 0) or np.any(predicted < 0):\n            return -1\n        return (np.log1p(actual) - np.log1p(predicted)) ** 2\n    except Exception as e:\n        return -1\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    try:\n        sq_log_errors = squared_log_error(actual, predicted)\n        if sq_log_errors == -1:\n            return -1\n        if len(actual) != len(predicted):\n            return -1\n        msle = np.mean(sq_log_errors)\n        return round(msle, 4)\n    except Exception as e:\n        return -1\nactual = [3, 0.5, 2, 7]\npredicted = [2.5, 0.3, 2, 8]"}
{"task_id": 221, "completion_id": 7, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Compute the element-wise squared logarithmic errors.\"\"\"\n    try:\n        actual_log = np.log1p(np.array(actual))\n        predicted_log = np.log1p(np.array(predicted))\n        squared_log_err = np.square(actual_log - predicted_log)\n        return squared_log_err\n    except ValueError:\n        return -1\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any(np.array(actual) < 0) or any(np.array(predicted) < 0):\n        return -1\n    squared_log_errors = squared_log_error(actual, predicted)\n    if squared_log_errors == -1:\n        return -1\n    msle = np.mean(squared_log_errors)\n    return round(float(msle), 4)"}
{"task_id": 221, "completion_id": 8, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    try:\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n        if not np.all(actual >= 0) or not np.all(predicted >= 0):\n            return -1\n        if actual.shape != predicted.shape:\n            return -1\n        return (np.log1p(actual) - np.log1p(predicted)) ** 2\n    except (TypeError, ValueError):\n        return -1\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    squared_errors = squared_log_error(actual, predicted)\n    if squared_errors == -1:\n        return -1\n    msle = np.mean(squared_errors)\n    return round(float(msle), 4)"}
{"task_id": 221, "completion_id": 9, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Returns element-wise squared log errors.\"\"\"\n    try:\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n        if (actual < 0).any() or (predicted < 0).any():\n            return -1\n        return (np.log1p(actual) - np.log1p(predicted)) ** 2\n    except Exception:\n        return -1\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    squared_errors = squared_log_error(actual, predicted)\n    if squared_errors == -1:\n        return -1\n    try:\n        if actual.shape != predicted.shape:\n            return -1\n        msle = np.mean(squared_errors)\n        return round(float(msle), 4)\n    except Exception:\n        return -1"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return round(sigmoid_scalar(z), 4)\n    z_array = np.array(z)\n    sigmoid_array = np.vectorize(sigmoid_scalar)(z_array)\n    result = sigmoid_array.tolist()\n    return result if isinstance(z, list) else [round(item, 4) for sublist in result for item in sublist] if isinstance(z, np.ndarray) and z.ndim == 2 else [round(item, 4) for item in result]\ndef sigmoid_scalar(z):\n    \"\"\"Compute the sigmoid for a single scalar value with numerical stability.\"\"\"\n    if z >= 0:\n        return 1 / (1 + np.exp(-z))\n    else:\n        return np.exp(z) / (1 + np.exp(z))"}
{"task_id": 222, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    is_scalar = np.isscalar(z)\n    z = np.array(z, dtype=float)\n    sigmoid_values = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    sigmoid_values = np.round(sigmoid_values, 4)\n    if is_scalar:\n        return float(sigmoid_values)\n    else:\n        return sigmoid_values.tolist()"}
{"task_id": 222, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        if z >= 0:\n            result = 1 / (1 + np.exp(-z))\n        else:\n            result = np.exp(z) / (1 + np.exp(z))\n        return round(result, 4)\n    z = np.array(z)\n    pos_mask = z >= 0\n    neg_mask = z < 0\n    result = np.empty_like(z, dtype=float)\n    result[pos_mask] = 1 / (1 + np.exp(-z[pos_mask]))\n    result[neg_mask] = np.exp(z[neg_mask]) / (1 + np.exp(z[neg_mask]))\n    return np.round(result, 4).tolist()"}
{"task_id": 222, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n\n    def stable_sigmoid(x):\n        if isinstance(x, np.ndarray):\n            result = np.where(x >= 0, 1 / (1 + np.exp(-x)), np.exp(x) / (1 + np.exp(x)))\n        else:\n            result = [stable_sigmoid(item) for item in x]\n        return result\n    if isinstance(z, (int, float)):\n        if z >= 0:\n            result = 1 / (1 + np.exp(-z))\n        else:\n            result = np.exp(z) / (1 + np.exp(z))\n        return round(float(result), 4)\n    else:\n        if isinstance(z, list):\n            z = np.array(z)\n        result = stable_sigmoid(z)\n        return [round(float(item), 4) if isinstance(item, (np.float32, np.float64)) else [round(float(sub_item), 4) for sub_item in item] for item in result] if isinstance(result, list) else [round(float(item), 4) for item in result]"}
{"task_id": 222, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n\n    def compute_sigmoid(x):\n        if x >= 0:\n            return 1 / (1 + np.exp(-x))\n        else:\n            return np.exp(x) / (1 + np.exp(x))\n    if isinstance(z, (int, float)):\n        return round(compute_sigmoid(z), 4)\n    else:\n        z_array = np.array(z)\n        sigmoid_array = np.where(z_array >= 0, 1 / (1 + np.exp(-z_array)), np.exp(z_array) / (1 + np.exp(z_array)))\n        rounded_array = np.round(sigmoid_array, 4)\n        return rounded_array.tolist()"}
{"task_id": 222, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n\n    def stable_sigmoid(x):\n        if x >= 0:\n            return 1 / (1 + np.exp(-x))\n        else:\n            return np.exp(x) / (1 + np.exp(x))\n    z_array = np.array(z, dtype=float)\n    result_array = np.vectorize(stable_sigmoid)(z_array)\n    result_array = np.round(result_array, 4)\n    if np.isscalar(z):\n        return float(result_array)\n    else:\n        return result_array.tolist()"}
{"task_id": 222, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        scalar_input = True\n        z = np.array([z])\n    else:\n        scalar_input = False\n        z = np.array(z)\n    sigmoid_values = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    sigmoid_values = np.round(sigmoid_values, 4)\n    if scalar_input:\n        return float(sigmoid_values[0])\n    else:\n        return sigmoid_values.tolist()"}
{"task_id": 222, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n\n    def stable_sigmoid(x):\n        if x >= 0:\n            return 1 / (1 + np.exp(-x))\n        else:\n            return np.exp(x) / (1 + np.exp(x))\n    if isinstance(z, (int, float)):\n        return round(stable_sigmoid(z), 4)\n    z_array = np.array(z)\n    result_array = np.where(z_array >= 0, 1 / (1 + np.exp(-z_array)), np.exp(z_array) / (1 + np.exp(z_array)))\n    result_array = np.round(result_array, 4)\n    if isinstance(z, list):\n        return result_array.tolist()\n    return result_array.tolist()"}
{"task_id": 222, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n\n    def stable_sigmoid(x):\n        \"\"\"Compute the sigmoid function in a numerically stable way.\"\"\"\n        if x >= 0:\n            return 1 / (1 + np.exp(-x))\n        else:\n            return np.exp(x) / (1 + np.exp(x))\n    if isinstance(z, (int, float)):\n        return round(stable_sigmoid(z), 4)\n    else:\n        z = np.array(z)\n        sigmoid_values = np.vectorize(stable_sigmoid)(z)\n        return np.round(sigmoid_values, 4).tolist()"}
{"task_id": 222, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        if z >= 0:\n            result = 1 / (1 + np.exp(-z))\n        else:\n            result = np.exp(z) / (1 + np.exp(z))\n        return round(float(result), 4)\n    z_array = np.array(z)\n    mask = z_array >= 0\n    result_array = np.empty_like(z_array, dtype=float)\n    result_array[mask] = 1 / (1 + np.exp(-z_array[mask]))\n    result_array[~mask] = np.exp(z_array[~mask]) / (1 + np.exp(z_array[~mask]))\n    result_array = np.round(result_array, 4)\n    if isinstance(z, list):\n        return result_array.tolist()\n    return result_array.tolist()"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    z_array = np.array(z)\n    activated_array = np.where(z_array >= 0, z_array, a * z_array)\n    return activated_array.tolist()"}
{"task_id": 224, "completion_id": 1, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    z_array = np.array(z, dtype=float)\n    activated_array = np.where(z_array >= 0, z_array, a * z_array)\n    return activated_array.tolist()"}
{"task_id": 224, "completion_id": 2, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n\n    def apply_leaky_relu(x):\n        if isinstance(x, (list, np.ndarray)):\n            return [apply_leaky_relu(item) for item in x]\n        else:\n            return x if x >= 0 else a * x\n    if isinstance(z, np.ndarray):\n        z = z.tolist()\n    return apply_leaky_relu(z)"}
{"task_id": 224, "completion_id": 3, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, (list, tuple)):\n        z = np.array(z)\n    activated = np.where(z >= 0, z, a * z)\n    return activated.tolist()"}
{"task_id": 224, "completion_id": 4, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, (list, tuple)):\n        z = np.array(z)\n    elif isinstance(z, (int, float)):\n        z = np.array([z])\n    activated = np.where(z >= 0, z, a * z)\n    return activated.tolist()"}
{"task_id": 224, "completion_id": 5, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n\n    def apply_leaky_relu(x):\n        if isinstance(x, (list, np.ndarray)):\n            return [apply_leaky_relu(xi) for xi in x]\n        else:\n            return x if x >= 0 else a * x\n    if isinstance(z, np.ndarray):\n        z = z.tolist()\n    result = apply_leaky_relu(z)\n    return result"}
{"task_id": 224, "completion_id": 6, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    z_array = np.array(z, dtype=float)\n    activated_array = np.where(z_array >= 0, z_array, a * z_array)\n    return activated_array.tolist()"}
{"task_id": 224, "completion_id": 7, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n\n    def apply_leaky_relu(value):\n        if isinstance(value, (list, np.ndarray)):\n            return [apply_leaky_relu(v) for v in value]\n        else:\n            return value if value >= 0 else a * value\n    z_array = np.array(z)\n    activated_array = np.vectorize(apply_leaky_relu)(z_array)\n    return activated_array.tolist()"}
{"task_id": 224, "completion_id": 8, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n\n    def apply_leaky_relu(x):\n        if isinstance(x, (list, np.ndarray)):\n            return [apply_leaky_relu(xi) for xi in x]\n        else:\n            return x if x >= 0 else a * x\n    if not isinstance(z, np.ndarray):\n        z = np.array(z)\n    result = apply_leaky_relu(z)\n    return result.tolist()"}
{"task_id": 224, "completion_id": 9, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, (list, tuple)):\n        z = np.array(z)\n    result = np.where(z >= 0, z, a * z)\n    if isinstance(z, np.ndarray):\n        return result.tolist()\n    elif isinstance(z, (list, tuple)):\n        return _convert_to_same_structure(result, z)\n    else:\n        return result.item()\ndef _convert_to_same_structure(array, original):\n    \"\"\"Helper function to convert a numpy array to a nested list with the same structure as the original.\"\"\"\n    if isinstance(original, (list, tuple)):\n        return type(original)((_convert_to_same_structure(array[i], original[i]) for i in range(len(original))))\n    else:\n        return array.item()"}
{"task_id": 226, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    classifiers = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    predictions[X_train[:, feature] * polarity < threshold * polarity] = -1\n                    weighted_error = np.sum(sample_weights[predictions != y_train])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        classifiers.append((alpha, best_feature, best_threshold, best_polarity))\n        predictions = np.ones(n_samples)\n        predictions[X_train[:, best_feature] * best_polarity < best_threshold * best_polarity] = -1\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n    n_test_samples = X_test.shape[0]\n    ensemble_predictions = np.zeros(n_test_samples)\n    for (alpha, feature, threshold, polarity) in classifiers:\n        predictions = np.ones(n_test_samples)\n        predictions[X_test[:, feature] * polarity < threshold * polarity] = -1\n        ensemble_predictions += alpha * predictions\n    return [int(np.sign(pred)) for pred in ensemble_predictions]"}
{"task_id": 226, "completion_id": 1, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = {}\n        for feature_i in range(n_features):\n            thresholds = np.unique(X_train[:, feature_i])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    predictions[X_train[:, feature_i] * polarity < threshold * polarity] = -1\n                    error = sample_weights[y_train != predictions].sum()\n                    if error > 0.5:\n                        error = 1 - error\n                        polarity = -polarity\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {'feature_index': feature_i, 'threshold': threshold, 'polarity': polarity}\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        alphas.append(alpha)\n        stumps.append(best_stump)\n        predictions = np.ones(n_samples)\n        predictions[X_train[:, best_stump['feature_index']] * best_stump['polarity'] < best_stump['threshold'] * best_stump['polarity']] = -1\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= sample_weights.sum()\n    y_pred = np.zeros(X_test.shape[0])\n    for (alpha, stump) in zip(alphas, stumps):\n        predictions = np.ones(X_test.shape[0])\n        predictions[X_test[:, stump['feature_index']] * stump['polarity'] < stump['threshold'] * stump['polarity']] = -1\n        y_pred += alpha * predictions\n    return [int(np.sign(y)) for y in y_pred]"}
{"task_id": 226, "completion_id": 2, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n\n    def decision_stump_predict(X, feature_index, threshold, polarity):\n        return polarity * ((X[:, feature_index] < threshold) * 2 - 1)\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    clfs = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_clf = None\n        (best_feature, best_threshold, best_polarity) = (None, None, None)\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = decision_stump_predict(X_train, feature_index, threshold, polarity)\n                    error = sample_weights[predictions != y_train].sum()\n                    if error < min_error:\n                        min_error = error\n                        best_clf = (feature_index, threshold, polarity)\n                        alpha = 0.5 * np.log((1 - error + 1e-10) / (error + 1e-10))\n                        best_alpha = alpha\n        clfs.append((best_alpha, best_clf))\n        predictions = decision_stump_predict(X_train, *best_clf)\n        missclassified_mask = predictions != y_train\n        sample_weights[missclassified_mask] *= np.exp(best_alpha)\n        sample_weights /= sample_weights.sum()\n    final_predictions = np.zeros(X_test.shape[0])\n    for (alpha, (feature_index, threshold, polarity)) in clfs:\n        final_predictions += alpha * decision_stump_predict(X_test, feature_index, threshold, polarity)\n    return [1 if pred > 0 else -1 for pred in final_predictions]"}
{"task_id": 226, "completion_id": 3, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n\n    def train_decision_stump(X, y, sample_weights):\n        min_error = float('inf')\n        best_stump = {}\n        (n_samples, n_features) = X.shape\n        for feature_i in range(n_features):\n            feature_values = np.sort(np.unique(X[:, feature_i]))\n            thresholds = (feature_values[:-1] + feature_values[1:]) / 2\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[X[:, feature_i] < threshold] = -1\n                    else:\n                        predictions[X[:, feature_i] >= threshold] = -1\n                    missclassified = sample_weights[y != predictions]\n                    error = np.sum(missclassified)\n                    if error > 0.5:\n                        error = 1 - error\n                        polarity = -polarity\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {'feature_index': feature_i, 'threshold': threshold, 'polarity': polarity}\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        return (best_stump, alpha)\n\n    def predict_stump(X, stump):\n        (feature_index, threshold, polarity) = (stump['feature_index'], stump['threshold'], stump['polarity'])\n        predictions = np.ones(X.shape[0])\n        if polarity == 1:\n            predictions[X[:, feature_index] < threshold] = -1\n        else:\n            predictions[X[:, feature_index] >= threshold] = -1\n        return predictions\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    stumps = []\n    for _ in range(n_clf):\n        (stump, alpha) = train_decision_stump(X_train, y_train, sample_weights)\n        stumps.append((stump, alpha))\n        predictions = predict_stump(X_train, stump)\n        missclassified = (predictions != y_train).astype(int)\n        sample_weights *= np.exp(alpha * missclassified)\n        sample_weights /= sample_weights.sum()\n    final_predictions = np.zeros(X_test.shape[0])\n    for (stump, alpha) in stumps:\n        stump_pred = predict_stump(X_test, stump)\n        final_predictions += alpha * stump_pred\n    return [int(np.sign(pred)) for pred in final_predictions]"}
{"task_id": 226, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    clfs = []\n    alphas = []\n    for _ in range(n_clf):\n        best_clf = None\n        best_error = float('inf')\n        best_polarity = None\n        best_threshold = None\n        best_feature = None\n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    predictions[X_train[:, feature] * polarity < threshold * polarity] = -1\n                    weighted_error = sample_weights[predictions != y_train].sum()\n                    if weighted_error < best_error:\n                        best_clf = predictions.copy()\n                        best_error = weighted_error\n                        best_polarity = polarity\n                        best_threshold = threshold\n                        best_feature = feature\n        alpha = 0.5 * math.log((1 - best_error) / (best_error + 1e-10))\n        alphas.append(alpha)\n        clfs.append((best_feature, best_threshold, best_polarity))\n        sample_weights *= np.exp(-alpha * y_train * best_clf)\n        sample_weights /= sample_weights.sum()\n    n_test_samples = X_test.shape[0]\n    predictions = np.zeros(n_test_samples)\n    for (i, (feature, threshold, polarity)) in enumerate(clfs):\n        stump_pred = np.ones(n_test_samples)\n        stump_pred[X_test[:, feature] * polarity < threshold * polarity] = -1\n        predictions += alphas[i] * stump_pred\n    return [int(np.sign(x)) for x in predictions]"}
{"task_id": 226, "completion_id": 5, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n\n    def decision_stump_predict(X, feature_index, threshold, polarity):\n        \"\"\"Predict using a single decision stump.\"\"\"\n        prediction = np.ones(X.shape[0])\n        if polarity == 1:\n            prediction[X[:, feature_index] < threshold] = -1\n        else:\n            prediction[X[:, feature_index] >= threshold] = -1\n        return prediction\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    classifiers = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_clf = None\n        for feature_i in range(n_features):\n            (thresholds, values) = zip(*sorted(zip(X_train[:, feature_i], y_train)))\n            thresholds = np.array(thresholds)\n            values = np.array(values)\n            for polarity in [1, -1]:\n                error = 0.5\n                predictions = np.ones(n_samples) * (-1 if polarity == 1 else 1)\n                for (index, threshold) in enumerate(thresholds):\n                    predictions[index:] *= -1\n                    misclassified = sample_weights[predictions != values]\n                    err = misclassified.sum()\n                    if err < min_error:\n                        min_error = err\n                        best_clf = (feature_i, threshold, polarity)\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        predictions = decision_stump_predict(X_train, *best_clf)\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= sample_weights.sum()\n        classifiers.append((alpha, best_clf))\n    y_pred = np.zeros(X_test.shape[0])\n    for (alpha, (feature_i, threshold, polarity)) in classifiers:\n        y_pred += alpha * decision_stump_predict(X_test, feature_i, threshold, polarity)\n    return [int(np.sign(pred)) for pred in y_pred]"}
{"task_id": 226, "completion_id": 6, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n\n    def decision_stump_predict(X, feature_index, threshold, polarity):\n        \"\"\"Predict using a decision stump.\"\"\"\n        return polarity * ((X[:, feature_index] < threshold) * 2 - 1)\n    (n_samples, n_features) = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        (best_feature, best_threshold, best_polarity) = (None, None, None)\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = decision_stump_predict(X_train, feature_index, threshold, polarity)\n                    weighted_error = np.sum(weights[predictions != y_train])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_feature = feature_index\n                        best_threshold = threshold\n                        best_polarity = polarity\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        weights *= np.exp(-alpha * y_train * decision_stump_predict(X_train, best_feature, best_threshold, best_polarity))\n        weights /= np.sum(weights)\n        stumps.append((best_feature, best_threshold, best_polarity))\n        alphas.append(alpha)\n\n    def predict_sample(sample):\n        stump_predictions = [alpha * decision_stump_predict(np.array([sample]), feature, threshold, polarity)[0] for (feature, threshold, polarity, alpha) in zip(stumps, alphas, stumps, alphas)]\n        return np.sign(np.sum(stump_predictions))\n    return [predict_sample(sample) for sample in X_test]"}
{"task_id": 226, "completion_id": 7, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n\n    def predict_stump(X, feature_index, threshold, polarity):\n        predictions = np.ones(X.shape[0])\n        if polarity == 1:\n            predictions[X[:, feature_index] < threshold] = -1\n        else:\n            predictions[X[:, feature_index] >= threshold] = -1\n        return predictions\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    clfs = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_clf = {}\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = predict_stump(X_train, feature_index, threshold, polarity)\n                    weighted_error = sample_weights[predictions != y_train].sum()\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_clf = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n        epsilon = min_error + 1e-10\n        alpha = 0.5 * math.log((1 - epsilon) / epsilon)\n        predictions = predict_stump(X_train, **best_clf)\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= sample_weights.sum()\n        clfs.append({'alpha': alpha, 'feature_index': best_clf['feature_index'], 'threshold': best_clf['threshold'], 'polarity': best_clf['polarity']})\n\n    def ensemble_predict(X):\n        ensemble_predictions = np.zeros(X.shape[0])\n        for clf in clfs:\n            predictions = predict_stump(X, clf['feature_index'], clf['threshold'], clf['polarity'])\n            ensemble_predictions += clf['alpha'] * predictions\n        return np.sign(ensemble_predictions)\n    return ensemble_predict(X_test).astype(int).tolist()"}
{"task_id": 226, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n\n    def train_decision_stump(X, y, sample_weights):\n        (m, n) = X.shape\n        min_error = float('inf')\n        best_stump = {}\n        best_predictions = np.zeros(m)\n        for feature in range(n):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(m)\n                    predictions[polarity * X[:, feature] < polarity * threshold] = -1\n                    weighted_error = sample_weights[predictions != y].sum()\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = {'feature': feature, 'threshold': threshold, 'polarity': polarity}\n                        best_predictions = predictions.copy()\n        return (best_stump, min_error, best_predictions)\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    clfs = []\n    for _ in range(n_clf):\n        (best_stump, error, stump_predictions) = train_decision_stump(X_train, y_train, sample_weights)\n        alpha = 0.5 * math.log((1 - error) / (error + 1e-10))\n        sample_weights *= np.exp(-alpha * y_train * stump_predictions)\n        sample_weights /= sample_weights.sum()\n        clfs.append({'stump': best_stump, 'alpha': alpha})\n    y_pred = np.zeros(X_test.shape[0])\n    for clf in clfs:\n        predictions = np.ones(X_test.shape[0])\n        stump = clf['stump']\n        polarity = stump['polarity']\n        feature = stump['feature']\n        threshold = stump['threshold']\n        predictions[polarity * X_test[:, feature] < polarity * threshold] = -1\n        y_pred += clf['alpha'] * predictions\n    return [int(np.sign(y)) for y in y_pred]"}
{"task_id": 226, "completion_id": 9, "solution": "import numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n\n    def decision_stump_predict(X, feature_index, threshold, polarity):\n        return polarity * ((X[:, feature_index] < threshold) * 2 - 1)\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    classifiers = []\n    alphas = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = {}\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = decision_stump_predict(X_train, feature_index, threshold, polarity)\n                    weighted_error = np.sum(sample_weights[y_train != predictions])\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        alphas.append(alpha)\n        classifiers.append(best_stump)\n        predictions = decision_stump_predict(X_train, **best_stump)\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n\n    def predict(X, classifiers, alphas):\n        stump_predictions = np.array([alpha * decision_stump_predict(X, **stump) for (stump, alpha) in zip(classifiers, alphas)])\n        return np.sign(np.sum(stump_predictions, axis=0))\n    return predict(X_test, classifiers, alphas).tolist()"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    flat_shape = (shape[0], np.prod(shape[1:]))\n    A = np.random.randn(*flat_shape)\n    (U, _, Vt) = np.linalg.svd(A, full_matrices=False)\n    Q = U if U.shape == flat_shape else Vt.T\n    orthogonal_matrix = (Q.reshape(shape) * scale).tolist()\n    flat = np.array(orthogonal_matrix).reshape(shape[0], -1)\n    identity_matrix_size = shape[0] if shape[0] <= flat.shape[1] else flat.shape[1]\n    identity_matrix = np.eye(identity_matrix_size) * scale ** 2\n    if shape[0] <= flat.shape[1]:\n        orthogonality_check = np.allclose(flat @ flat.T, identity_matrix, atol=1e-06)\n    else:\n        orthogonality_check = np.allclose(flat.T @ flat, identity_matrix, atol=1e-06)\n    if not orthogonality_check:\n        raise ValueError('The generated matrix does not satisfy the orthogonality condition.')\n    return orthogonal_matrix\nshape = (2, 2)\nscale = 0.5"}
{"task_id": 241, "completion_id": 1, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    d0 = shape[0]\n    prod_rest = np.prod(shape[1:])\n    A = np.random.randn(d0, prod_rest)\n    (U, _, VT) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = VT\n    Q_reshaped = Q.reshape(shape)\n    Q_scaled = Q_reshaped * scale\n    return Q_scaled.tolist()\nshape = (2, 2)\nscale = 0.5"}
{"task_id": 241, "completion_id": 2, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    d0 = shape[0]\n    d1_to_dn = np.prod(shape[1:])\n    A = np.random.randn(d0, d1_to_dn)\n    (U, S, VH) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = VH.T\n    result = (Q.reshape(shape) * scale).tolist()\n    flat = np.array(Q).reshape(d0, -1)\n    if d0 <= flat.shape[1]:\n        identity_approx = flat @ flat.T\n    else:\n        identity_approx = flat.T @ flat\n    assert np.allclose(identity_approx, scale ** 2 * np.eye(flat.shape[0] if d0 <= flat.shape[1] else flat.shape[1]), atol=1e-06), 'Orthogonality condition not satisfied'\n    return result\nshape = (2, 2)\nscale = 0.5"}
{"task_id": 241, "completion_id": 3, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    flat_size = np.prod(shape[1:])\n    A = np.random.randn(shape[0], flat_size)\n    (U, S, VT) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = VT.T\n    Q = Q.reshape(shape) * scale\n    flat = Q.reshape(shape[0], -1)\n    if shape[0] <= flat.shape[1]:\n        assert np.allclose(flat @ flat.T, scale ** 2 * np.eye(shape[0]), atol=1e-06)\n    else:\n        assert np.allclose(flat.T @ flat, scale ** 2 * np.eye(flat.shape[1]), atol=1e-06)\n    return Q.tolist()\nshape = (2, 2)\nscale = 0.5"}
{"task_id": 241, "completion_id": 4, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    flat_shape = (shape[0], np.prod(shape[1:]))\n    A = np.random.randn(*flat_shape)\n    (U, _, Vt) = np.linalg.svd(A, full_matrices=False)\n    Q = U if U.shape == A.shape else Vt\n    orthogonal_matrix = Q.reshape(shape) * scale\n    return orthogonal_matrix.tolist()\nshape = (2, 2)\nscale = 0.5"}
{"task_id": 241, "completion_id": 5, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    d0 = shape[0]\n    d1_to_dn = int(np.prod(shape[1:]))\n    A = np.random.randn(d0, d1_to_dn)\n    (U, S, VT) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = VT\n    Q_reshaped = Q.reshape(shape)\n    Q_scaled = Q_reshaped * scale\n    flat = Q_scaled.reshape(Q_scaled.shape[0], -1)\n    if Q_scaled.shape[0] <= flat.shape[1]:\n        identity_approx = flat @ flat.T\n        target = np.eye(Q_scaled.shape[0]) * scale ** 2\n    else:\n        identity_approx = flat.T @ flat\n        target = np.eye(flat.shape[1]) * scale ** 2\n    assert np.allclose(identity_approx, target, atol=1e-06), 'Orthogonality condition not satisfied'\n    return Q_scaled.tolist()\nshape = (2, 2)\nscale = 0.5"}
{"task_id": 241, "completion_id": 6, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    (d0, d1_product) = (shape[0], np.prod(shape[1:]))\n    A = np.random.randn(d0, d1_product)\n    (U, S, VT) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = VT.T\n    orthogonal_matrix = (Q.reshape(shape) * scale).tolist()\n    flat = np.array(orthogonal_matrix).reshape(shape[0], -1)\n    if shape[0] <= flat.shape[1]:\n        identity_approximation = flat @ flat.T\n        expected_identity = np.eye(shape[0]) * scale ** 2\n    else:\n        identity_approximation = flat.T @ flat\n        expected_identity = np.eye(flat.shape[1]) * scale ** 2\n    assert np.allclose(identity_approximation, expected_identity, atol=1e-06), 'Orthogonality condition not satisfied.'\n    return orthogonal_matrix\nshape = (2, 2)\nscale = 0.5"}
{"task_id": 241, "completion_id": 7, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    d0 = shape[0]\n    flat_shape = (d0, np.prod(shape[1:]))\n    A = np.random.randn(*flat_shape)\n    (U, _, Vt) = np.linalg.svd(A)\n    if U.shape == flat_shape:\n        Q = U\n    else:\n        Q = Vt\n    Q = Q.reshape(shape) * scale\n    flat = Q.reshape(d0, -1)\n    if d0 <= flat.shape[1]:\n        assert np.allclose(flat @ flat.T, scale ** 2 * np.eye(d0), atol=1e-06)\n    else:\n        assert np.allclose(flat.T @ flat, scale ** 2 * np.eye(flat.shape[1]), atol=1e-06)\n    return Q.tolist()\nshape = (2, 2)\nscale = 0.5"}
{"task_id": 241, "completion_id": 8, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    d0 = shape[0]\n    d1 = np.prod(shape[1:])\n    A = np.random.randn(d0, d1)\n    (U, _, Vt) = np.linalg.svd(A)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n    Q = Q.reshape(shape) * scale\n    return Q.tolist()\nshape = (2, 2)\nscale = 0.5"}
{"task_id": 241, "completion_id": 9, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    d0 = shape[0]\n    d1_to_dn_product = np.prod(shape[1:])\n    A = np.random.randn(d0, d1_to_dn_product)\n    (U, _, Vt) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n    Q_reshaped = Q.reshape(shape)\n    result = Q_reshaped * scale\n    return result.tolist()\nshape = (2, 2)\nscale = 0.5"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s = np.array(state)\n    W1 = np.ones((3, 4))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    Wa = np.ones((4, 3))\n    ba = np.zeros(3)\n    Wc = np.ones((4, 1))\n    bc = np.zeros(1)\n    z1 = np.maximum(0, np.dot(s, W1) + b1)\n    z2 = np.maximum(0, np.dot(z1, W2) + b2)\n    z3 = np.maximum(0, np.dot(z2, W3) + b3)\n    logits = np.dot(z3, Wa) + ba\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = np.dot(z3, Wc) + bc\n    action_probs_rounded = [round(prob, 4) for prob in action_probs]\n    state_value_rounded = round(state_value[0], 4)\n    return (action_probs_rounded, state_value_rounded)"}
{"task_id": 243, "completion_id": 1, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state_np = np.array(state)\n    W1 = np.ones((4, 3))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    Wa = np.ones((3, 4))\n    ba = np.zeros(3)\n    Wc = np.ones((1, 4))\n    bc = np.zeros(1)\n    z1 = np.maximum(0, np.dot(W1, state_np) + b1)\n    z2 = np.maximum(0, np.dot(W2, z1) + b2)\n    z3 = np.maximum(0, np.dot(W3, z2) + b3)\n    logits = np.dot(Wa, z3) + ba\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = np.dot(Wc, z3) + bc\n    return ([round(prob, 4) for prob in action_probs], round(state_value[0], 4))"}
{"task_id": 243, "completion_id": 2, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s = np.array(state)\n    W1 = np.ones((4, 3))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    Wa = np.ones((3, 4))\n    ba = np.zeros(3)\n    Wc = np.ones((1, 4))\n    bc = np.zeros(1)\n    z1 = np.maximum(0, s.dot(W1.T) + b1)\n    z2 = np.maximum(0, z1.dot(W2.T) + b2)\n    z3 = np.maximum(0, z2.dot(W3.T) + b3)\n    logits = z3.dot(Wa.T) + ba\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = (z3.dot(Wc.T) + bc)[0]\n    action_probs_rounded = np.round(action_probs, 4).tolist()\n    state_value_rounded = np.round(state_value, 4)\n    return (action_probs_rounded, state_value_rounded)\nstate = [1.0, 2.0, 3.0]"}
{"task_id": 243, "completion_id": 3, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    W1 = np.ones((3, 4))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    Wa = np.ones((4, 3))\n    ba = np.zeros(3)\n    Wc = np.ones((4, 1))\n    bc = np.zeros(1)\n    z1 = np.maximum(0, np.dot(state, W1) + b1)\n    z2 = np.maximum(0, np.dot(z1, W2) + b2)\n    z3 = np.maximum(0, np.dot(z2, W3) + b3)\n    logits = np.dot(z3, Wa) + ba\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = np.dot(z3, Wc) + bc\n    return ([round(prob, 4) for prob in action_probs], round(state_value[0], 4))"}
{"task_id": 243, "completion_id": 4, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s = np.array(state)\n    W1 = np.ones((3, 4))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    Wa = np.ones((4, 3))\n    ba = np.zeros(3)\n    Wc = np.ones((4, 1))\n    bc = np.zeros(1)\n    z1 = np.maximum(0, s @ W1 + b1)\n    z2 = np.maximum(0, z1 @ W2 + b2)\n    z3 = np.maximum(0, z2 @ W3 + b3)\n    logits = z3 @ Wa + ba\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = (z3 @ Wc + bc)[0]\n    action_probs_rounded = [round(prob, 4) for prob in action_probs]\n    state_value_rounded = round(state_value, 4)\n    return (action_probs_rounded, state_value_rounded)\nstate = [0.5, 0.3, 0.2]"}
{"task_id": 243, "completion_id": 5, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    s = np.array(state)\n    W1 = W2 = W3 = np.ones((4, 4))\n    Wa = np.ones((4, 3))\n    Wc = np.ones((4, 1))\n    b1 = b2 = b3 = ba = bc = np.zeros((4,))\n    z1 = np.maximum(0, np.dot(s, W1) + b1)\n    z2 = np.maximum(0, np.dot(z1, W2) + b2)\n    z3 = np.maximum(0, np.dot(z2, W3) + b3)\n    logits = np.dot(z3, Wa) + ba\n    state_value = np.dot(z3, Wc) + bc\n    exp_logits = np.exp(logits)\n    action_probs = exp_logits / np.sum(exp_logits)\n    action_probs_rounded = [round(prob, 4) for prob in action_probs]\n    state_value_rounded = round(state_value[0], 4)\n    return (action_probs_rounded, state_value_rounded)"}
{"task_id": 243, "completion_id": 6, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    W1 = np.ones((3, 4))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    Wa = np.ones((4, 3))\n    ba = np.zeros(3)\n    Wc = np.ones((4, 1))\n    bc = np.zeros(1)\n    z1 = np.maximum(0, np.dot(state, W1) + b1)\n    z2 = np.maximum(0, np.dot(z1, W2) + b2)\n    z3 = np.maximum(0, np.dot(z2, W3) + b3)\n    logits = np.dot(z3, Wa) + ba\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = np.dot(z3, Wc) + bc\n    return ([round(prob, 4) for prob in action_probs], round(state_value[0], 4))"}
{"task_id": 243, "completion_id": 7, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    W1 = np.ones((4, 3))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    Wa = np.ones((3, 4))\n    ba = np.zeros(3)\n    Wc = np.ones((1, 4))\n    bc = np.zeros(1)\n    z1 = np.maximum(0, np.dot(W1, state) + b1)\n    z2 = np.maximum(0, np.dot(W2, z1) + b2)\n    z3 = np.maximum(0, np.dot(W3, z2) + b3)\n    logits = np.dot(Wa, z3) + ba\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = np.dot(Wc, z3) + bc\n    action_probs_rounded = [round(prob, 4) for prob in action_probs]\n    state_value_rounded = round(state_value[0], 4)\n    return (action_probs_rounded, state_value_rounded)\nstate = [0.5, 0.3, 0.2]"}
{"task_id": 243, "completion_id": 8, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    W1 = np.ones((4, 3))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    Wa = np.ones((3, 4))\n    ba = np.zeros(3)\n    Wc = np.ones((1, 4))\n    bc = np.zeros(1)\n    z1 = np.maximum(0, np.dot(W1, state) + b1)\n    z2 = np.maximum(0, np.dot(W2, z1) + b2)\n    z3 = np.maximum(0, np.dot(W3, z2) + b3)\n    logits = np.dot(Wa, z3) + ba\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = np.dot(Wc, z3) + bc\n    action_probs_rounded = np.round(action_probs, 4).tolist()\n    state_value_rounded = np.round(state_value[0], 4)\n    return (action_probs_rounded, state_value_rounded)\nstate = [0.1, 0.2, 0.3]"}
{"task_id": 243, "completion_id": 9, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    W1 = np.ones((3, 4))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    Wa = np.ones((4, 3))\n    ba = np.zeros(3)\n    Wc = np.ones((4, 1))\n    bc = np.zeros(1)\n    z1 = np.maximum(0, np.dot(state, W1) + b1)\n    z2 = np.maximum(0, np.dot(z1, W2) + b2)\n    z3 = np.maximum(0, np.dot(z2, W3) + b3)\n    logits = np.dot(z3, Wa) + ba\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = np.dot(z3, Wc) + bc\n    return ([round(prob, 4) for prob in action_probs], round(state_value[0], 4))\nstate = [0.5, -0.2, 0.3]"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    (W1, b1) = (np.array(params['W1']), np.array(params['b1']))\n    (W2, b2) = (np.array(params['W2']), np.array(params['b2']))\n    (W3, b3) = (np.array(params['W3']), np.array(params['b3']))\n    (Wa, ba) = (np.array(params['Wa']), np.array(params['ba']))\n    (Wc, bc) = (np.array(params['Wc']), np.array(params['bc']))\n\n    def relu(x):\n        return np.maximum(0, x)\n\n    def softmax(x):\n        e_x = np.exp(x - np.max(x))\n        return e_x / e_x.sum(axis=0)\n    h1 = relu(np.dot(state, W1) + b1)\n    h2 = relu(np.dot(h1, W2) + b2)\n    h3 = relu(np.dot(h2, W3) + b3)\n    action_scores = np.dot(h3, Wa) + ba\n    probabilities = softmax(action_scores)\n    value = np.dot(h3, Wc) + bc\n    probabilities = np.round(probabilities, 4).tolist()\n    value = round(float(value), 4)\n    probabilities = [f'{p:.1f}' if p in {0.0, 1.0} else f'{p:.4f}' for p in probabilities]\n    probabilities = [float(p) for p in probabilities]\n    return (probabilities, value)"}
{"task_id": 249, "completion_id": 1, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state, dtype=np.float32)\n    (W1, b1) = (np.array(params['W1'], dtype=np.float32), np.array(params['b1'], dtype=np.float32))\n    (W2, b2) = (np.array(params['W2'], dtype=np.float32), np.array(params['b2'], dtype=np.float32))\n    (W3, b3) = (np.array(params['W3'], dtype=np.float32), np.array(params['b3'], dtype=np.float32))\n    (Wa, ba) = (np.array(params['Wa'], dtype=np.float32), np.array(params['ba'], dtype=np.float32))\n    (Wc, bc) = (np.array(params['Wc'], dtype=np.float32), np.array(params['bc'], dtype=np.float32))\n    h1 = np.maximum(0, np.dot(state, W1) + b1)\n    h2 = np.maximum(0, np.dot(h1, W2) + b2)\n    h3 = np.maximum(0, np.dot(h2, W3) + b3)\n    actor_output = np.dot(h3, Wa) + ba\n    probabilities = np.exp(actor_output - np.max(actor_output))\n    probabilities /= np.sum(probabilities)\n    value = np.dot(h3, Wc) + bc\n    probabilities = [round(p, 4) for p in probabilities]\n    value = round(value, 4)\n    probabilities = [0.0 if p == 0 else 1.0 if p == 1 else p for p in probabilities]\n    value = 0.0 if value == 0 else 1.0 if value == 1 else value\n    return (probabilities, value)"}
{"task_id": 249, "completion_id": 2, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    (W1, b1) = (np.array(params['W1']), np.array(params['b1']))\n    (W2, b2) = (np.array(params['W2']), np.array(params['b2']))\n    (W3, b3) = (np.array(params['W3']), np.array(params['b3']))\n    (Wa, ba) = (np.array(params['Wa']), np.array(params['ba']))\n    (Wc, bc) = (np.array(params['Wc']), np.array(params['bc']))\n    h1 = np.maximum(0, np.dot(state, W1) + b1)\n    h2 = np.maximum(0, np.dot(h1, W2) + b2)\n    h3 = np.maximum(0, np.dot(h2, W3) + b3)\n    action_scores = np.dot(h3, Wa) + ba\n    probabilities = np.exp(action_scores - np.max(action_scores))\n    probabilities /= np.sum(probabilities)\n    value = np.dot(h3, Wc) + bc\n    probabilities = [round(p, 4) if p not in (0.0, 1.0) else p for p in probabilities]\n    value = round(value[0], 4) if value[0] not in (0.0, 1.0) else value[0]\n    return (probabilities, value)"}
{"task_id": 249, "completion_id": 3, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state, dtype=np.float32)\n    (W1, b1) = (np.array(params['W1'], dtype=np.float32), np.array(params['b1'], dtype=np.float32))\n    (W2, b2) = (np.array(params['W2'], dtype=np.float32), np.array(params['b2'], dtype=np.float32))\n    (W3, b3) = (np.array(params['W3'], dtype=np.float32), np.array(params['b3'], dtype=np.float32))\n    (Wa, ba) = (np.array(params['Wa'], dtype=np.float32), np.array(params['ba'], dtype=np.float32))\n    (Wc, bc) = (np.array(params['Wc'], dtype=np.float32), np.array(params['bc'], dtype=np.float32))\n    h1 = np.maximum(0, np.dot(state, W1) + b1)\n    h2 = np.maximum(0, np.dot(h1, W2) + b2)\n    h3 = np.maximum(0, np.dot(h2, W3) + b3)\n    actor_output = np.dot(h3, Wa) + ba\n    probabilities = np.exp(actor_output - np.max(actor_output))\n    probabilities = probabilities / np.sum(probabilities)\n    value = np.dot(h3, Wc) + bc\n    probabilities = [np.round(p, 4) if p not in [0, 1] else np.round(p, 1) for p in probabilities]\n    value = np.round(value, 4)\n    return (probabilities, value.item())"}
{"task_id": 249, "completion_id": 4, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state, dtype=float)\n    W1 = np.array(params['W1'], dtype=float)\n    b1 = np.array(params['b1'], dtype=float)\n    W2 = np.array(params['W2'], dtype=float)\n    b2 = np.array(params['b2'], dtype=float)\n    W3 = np.array(params['W3'], dtype=float)\n    b3 = np.array(params['b3'], dtype=float)\n    Wa = np.array(params['Wa'], dtype=float)\n    ba = np.array(params['ba'], dtype=float)\n    Wc = np.array(params['Wc'], dtype=float)\n    bc = np.array(params['bc'], dtype=float)\n    h1 = np.maximum(0, state @ W1 + b1)\n    h2 = np.maximum(0, h1 @ W2 + b2)\n    h3 = np.maximum(0, h2 @ W3 + b3)\n    actor_scores = h3 @ Wa + ba\n    probabilities = np.exp(actor_scores - np.max(actor_scores))\n    probabilities /= np.sum(probabilities)\n    probabilities = [round(p, 4) if not (p == 0.0 or p == 1.0) else p for p in probabilities]\n    value = (h3 @ Wc + bc).item()\n    value = round(value, 4) if not (value == 0.0 or value == 1.0) else value\n    return (probabilities, value)"}
{"task_id": 249, "completion_id": 5, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n\n    def relu(x):\n        return np.maximum(0, x)\n\n    def softmax(x):\n        e_x = np.exp(x - np.max(x))\n        return e_x / e_x.sum(axis=0)\n    state = np.array(state)\n    (W1, b1) = (np.array(params['W1']), np.array(params['b1']))\n    (W2, b2) = (np.array(params['W2']), np.array(params['b2']))\n    (W3, b3) = (np.array(params['W3']), np.array(params['b3']))\n    (Wa, ba) = (np.array(params['Wa']), np.array(params['ba']))\n    (Wc, bc) = (np.array(params['Wc']), np.array(params['bc']))\n    h1 = relu(np.dot(state, W1) + b1)\n    h2 = relu(np.dot(h1, W2) + b2)\n    h3 = relu(np.dot(h2, W3) + b3)\n    action_scores = np.dot(h3, Wa) + ba\n    probabilities = softmax(action_scores)\n    value = np.dot(h3, Wc) + bc\n    probabilities = [round(p, 4) for p in probabilities]\n    value = round(float(value), 4)\n    if value == 0.0:\n        value = 0.0\n    elif value == 1.0:\n        value = 1.0\n    return (probabilities, value)"}
{"task_id": 249, "completion_id": 6, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    (W1, b1) = (np.array(params['W1']), np.array(params['b1']))\n    (W2, b2) = (np.array(params['W2']), np.array(params['b2']))\n    (W3, b3) = (np.array(params['W3']), np.array(params['b3']))\n    (Wa, ba) = (np.array(params['Wa']), np.array(params['ba']))\n    (Wc, bc) = (np.array(params['Wc']), np.array(params['bc']))\n\n    def relu(x):\n        return np.maximum(0, x)\n    h1 = relu(np.dot(state, W1) + b1)\n    h2 = relu(np.dot(h1, W2) + b2)\n    h3 = relu(np.dot(h2, W3) + b3)\n    action_scores = np.dot(h3, Wa) + ba\n    exp_scores = np.exp(action_scores - np.max(action_scores))\n    probabilities = exp_scores / np.sum(exp_scores)\n    value = np.dot(h3, Wc) + bc\n    probabilities = [round(p, 4) if not (p == 0.0 or p == 1.0) else float(f'{p:.1f}') for p in probabilities]\n    value = round(float(value), 4) if not (value == 0.0 or value == 1.0) else float(f'{value:.1f}')\n    return (probabilities, value)"}
{"task_id": 249, "completion_id": 7, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n\n    def relu(x):\n        return np.maximum(0, x)\n    (W1, b1) = (np.array(params['W1']), np.array(params['b1']))\n    (W2, b2) = (np.array(params['W2']), np.array(params['b2']))\n    (W3, b3) = (np.array(params['W3']), np.array(params['b3']))\n    (Wa, ba) = (np.array(params['Wa']), np.array(params['ba']))\n    (Wc, bc) = (np.array(params['Wc']), np.array(params['bc']))\n    hidden1 = relu(np.dot(state, W1) + b1)\n    hidden2 = relu(np.dot(hidden1, W2) + b2)\n    hidden3 = relu(np.dot(hidden2, W3) + b3)\n    actor_output = np.dot(hidden3, Wa) + ba\n    probabilities = np.exp(actor_output - np.max(actor_output))\n    probabilities /= np.sum(probabilities)\n    value = np.dot(hidden3, Wc) + bc\n    probabilities = [round(p, 4) for p in probabilities]\n    value = round(value.item(), 4)\n    return (probabilities, value)"}
{"task_id": 249, "completion_id": 8, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    (W1, b1) = (np.array(params['W1']), np.array(params['b1']))\n    (W2, b2) = (np.array(params['W2']), np.array(params['b2']))\n    (W3, b3) = (np.array(params['W3']), np.array(params['b3']))\n    (Wa, ba) = (np.array(params['Wa']), np.array(params['ba']))\n    (Wc, bc) = (np.array(params['Wc']), np.array(params['bc']))\n    h1 = np.maximum(0, np.dot(state, W1) + b1)\n    h2 = np.maximum(0, np.dot(h1, W2) + b2)\n    h3 = np.maximum(0, np.dot(h2, W3) + b3)\n    actor_scores = np.dot(h3, Wa) + ba\n    probabilities = np.exp(actor_scores - np.max(actor_scores))\n    probabilities /= np.sum(probabilities)\n    value = np.dot(h3, Wc) + bc\n    probabilities = [round(p, 4) for p in probabilities]\n    value = round(value[0], 4)\n    return (probabilities, value)"}
{"task_id": 249, "completion_id": 9, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    (W1, b1) = (np.array(params['W1']), np.array(params['b1']))\n    (W2, b2) = (np.array(params['W2']), np.array(params['b2']))\n    (W3, b3) = (np.array(params['W3']), np.array(params['b3']))\n    (Wa, ba) = (np.array(params['Wa']), np.array(params['ba']))\n    (Wc, bc) = (np.array(params['Wc']), np.array(params['bc']))\n    h1 = np.maximum(0, np.dot(state, W1) + b1)\n    h2 = np.maximum(0, np.dot(h1, W2) + b2)\n    h3 = np.maximum(0, np.dot(h2, W3) + b3)\n    action_scores = np.dot(h3, Wa) + ba\n    exp_scores = np.exp(action_scores - np.max(action_scores))\n    probabilities = exp_scores / np.sum(exp_scores)\n    value = np.dot(h3, Wc) + bc\n    probabilities = [round(p, 4) for p in probabilities]\n    value = round(value[0], 4)\n    probabilities = [0.0 if p == 0 else 1.0 if p == 1 else p for p in probabilities]\n    value = 0.0 if value == 0 else 1.0 if value == 1 else value\n    return (probabilities, value)"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    if gradient:\n        l1_component = l1_ratio * np.sign(w)\n        l2_component = (1 - l1_ratio) * w\n        grad = alpha * (l1_component + l2_component)\n        return [round(g, 4) for g in grad]\n    else:\n        l1_norm = np.sum(np.abs(w))\n        l2_norm = np.dot(w, w)\n        penalty = alpha * (l1_ratio * l1_norm + (1 - l1_ratio) * 0.5 * l2_norm)\n        return round(penalty, 4)"}
{"task_id": 253, "completion_id": 1, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return [round(g, 4) for g in grad.tolist()]\n    else:\n        l1_norm = np.sum(np.abs(w))\n        l2_norm = np.sum(w ** 2)\n        penalty = alpha * (l1_ratio * l1_norm + (1 - l1_ratio) * 0.5 * l2_norm)\n        return round(penalty, 4)"}
{"task_id": 253, "completion_id": 2, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_ratio = 1 - l1_ratio\n    if gradient:\n        grad_l1 = np.sign(w)\n        grad_l2 = w\n        grad = alpha * (l1_ratio * grad_l1 + l2_ratio * grad_l2)\n        return [round(g, 4) for g in grad.tolist()]\n    else:\n        l1_penalty = np.sum(np.abs(w))\n        l2_penalty = 0.5 * w.T @ w\n        penalty = alpha * (l1_ratio * l1_penalty + l2_ratio * l2_penalty)\n        return round(float(penalty), 4)\nw = [1.0, -2.0, 3.0]\nalpha = 0.5\nl1_ratio = 0.3"}
{"task_id": 253, "completion_id": 3, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_term = np.linalg.norm(w, ord=2)\n    l1_term = np.sum(np.abs(w))\n    if not gradient:\n        penalty_value = alpha * (l1_ratio * l1_term + (1 - l1_ratio) * 0.5 * l2_term ** 2)\n        return round(penalty_value, 4)\n    else:\n        gradient_value = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return [round(g, 4) for g in gradient_value]"}
{"task_id": 253, "completion_id": 4, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return [round(g, 4) for g in grad.tolist()]\n    else:\n        l1_part = l1_ratio * np.sum(np.abs(w))\n        l2_part = (1 - l1_ratio) * 0.5 * np.dot(w.T, w)\n        penalty = alpha * (l1_part + l2_part)\n        return round(penalty, 4)"}
{"task_id": 253, "completion_id": 5, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return [round(g, 4) for g in grad]\n    else:\n        l1_term = np.linalg.norm(w, 1)\n        l2_term = 0.5 * np.dot(w, w)\n        penalty = alpha * (l1_ratio * l1_term + (1 - l1_ratio) * l2_term)\n        return round(penalty, 4)"}
{"task_id": 253, "completion_id": 6, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_ratio = 1 - l1_ratio\n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + l2_ratio * w)\n        return [round(g, 4) for g in grad.tolist()]\n    else:\n        l1_penalty = l1_ratio * np.sum(np.abs(w))\n        l2_penalty = l2_ratio * 0.5 * np.sum(w ** 2)\n        penalty = alpha * (l1_penalty + l2_penalty)\n        return round(penalty, 4)"}
{"task_id": 253, "completion_id": 7, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_ratio = 1 - l1_ratio\n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + l2_ratio * w)\n        return [round(g, 4) for g in grad.tolist()]\n    else:\n        l1_term = np.sum(np.abs(w))\n        l2_term = 0.5 * np.sum(w ** 2)\n        penalty = alpha * (l1_ratio * l1_term + l2_ratio * l2_term)\n        return round(penalty, 4)\nw = [1.0, -2.0, 3.0]\nalpha = 0.5\nl1_ratio = 0.8\npenalty = elastic_net_regularization(w, alpha, l1_ratio, gradient=False)\ngrad = elastic_net_regularization(w, alpha, l1_ratio, gradient=True)"}
{"task_id": 253, "completion_id": 8, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.asarray(w)\n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return [round(g, 4) for g in grad]\n    else:\n        l2_norm = np.linalg.norm(w, 2)\n        l1_norm = np.sum(np.abs(w))\n        penalty = alpha * (l1_ratio * l2_norm + (1 - l1_ratio) * 0.5 * w.T @ w)\n        return round(penalty, 4)"}
{"task_id": 253, "completion_id": 9, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_ratio = 1 - l1_ratio\n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + l2_ratio * w)\n        return [round(g, 4) for g in grad.tolist()]\n    else:\n        l1_part = l1_ratio * np.linalg.norm(w, ord=1)\n        l2_part = l2_ratio * 0.5 * np.dot(w, w)\n        penalty = alpha * (l1_part + l2_part)\n        return round(penalty, 4)"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    param = model.parameters[param_name]\n    grads = np.zeros_like(param, dtype=np.float64)\n    it = np.nditer(param, flags=['multi_index'], op_flags=['readwrite'])\n    while not it.finished:\n        idx = it.multi_index\n        original_value = param[idx]\n        param[idx] = original_value + epsilon\n        model.flush_gradients()\n        predictions_pos = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t])\n            predictions_pos.append(prediction)\n        loss_pos = loss_func(predictions_pos)\n        param[idx] = original_value - epsilon\n        model.flush_gradients()\n        predictions_neg = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t])\n            predictions_neg.append(prediction)\n        loss_neg = loss_func(predictions_neg)\n        grads[idx] = (loss_pos - loss_neg) / (2 * epsilon)\n        param[idx] = original_value\n        it.iternext()\n    return grads.T"}
{"task_id": 256, "completion_id": 1, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    param = model.parameters[param_name]\n    orig_param = deepcopy(param)\n    grads = np.zeros_like(param, dtype=np.float64)\n    for i in np.ndindex(param.shape):\n        orig_val = param[i]\n        param[i] = orig_val + epsilon\n        model.flush_gradients()\n        predictions_pos = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_pos = loss_func(predictions_pos)\n        param[i] = orig_val - epsilon\n        model.flush_gradients()\n        predictions_neg = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_neg = loss_func(predictions_neg)\n        grads[i] = (loss_pos - loss_neg) / (2 * epsilon)\n        param[i] = orig_val\n    model.parameters[param_name] = orig_param\n    return grads.T"}
{"task_id": 256, "completion_id": 2, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    param = model.parameters[param_name]\n    grad = np.zeros_like(param, dtype=np.float64)\n    for i in range(param.size):\n        original_value = param.ravel()[i]\n        param.ravel()[i] = original_value + epsilon\n        model.flush_gradients()\n        predictions_plus = []\n        for t in range(n_t):\n            predictions_plus.append(model.forward(X[:, :, t]))\n        loss_plus = loss_func(predictions_plus)\n        param.ravel()[i] = original_value - epsilon\n        model.flush_gradients()\n        predictions_minus = []\n        for t in range(n_t):\n            predictions_minus.append(model.forward(X[:, :, t]))\n        loss_minus = loss_func(predictions_minus)\n        grad.ravel()[i] = (loss_plus - loss_minus) / (2 * epsilon)\n        param.ravel()[i] = original_value\n    return grad.T"}
{"task_id": 256, "completion_id": 3, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    param = model.parameters[param_name]\n    original_param = deepcopy(param)\n    param_shape = param.shape\n    grads = np.zeros_like(param)\n    for idx in np.ndindex(param_shape):\n        param[idx] = original_param[idx] + epsilon\n        model.flush_gradients()\n        predictions_plus = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t])\n            predictions_plus.append(prediction)\n        loss_plus = loss_func(predictions_plus)\n        param[idx] = original_param[idx] - epsilon\n        model.flush_gradients()\n        predictions_minus = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t])\n            predictions_minus.append(prediction)\n        loss_minus = loss_func(predictions_minus)\n        grads[idx] = (loss_plus - loss_minus) / (2 * epsilon)\n        param[idx] = original_param[idx]\n    return grads.T"}
{"task_id": 256, "completion_id": 4, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    param = model.parameters[param_name]\n    param = param.astype(np.float64)\n    grads = np.zeros_like(param, dtype=np.float64)\n    for i in range(param.size):\n        param_flat = param.reshape(-1)\n        original_value = param_flat[i]\n        param_flat[i] = original_value + epsilon\n        model.parameters[param_name] = param_flat.reshape(param.shape)\n        predictions_pos = []\n        for t in range(n_t):\n            model.flush_gradients()\n            prediction = model.forward(X[:, :, t])\n            predictions_pos.append(prediction)\n        loss_pos = loss_func(predictions_pos)\n        param_flat[i] = original_value - epsilon\n        model.parameters[param_name] = param_flat.reshape(param.shape)\n        predictions_neg = []\n        for t in range(n_t):\n            model.flush_gradients()\n            prediction = model.forward(X[:, :, t])\n            predictions_neg.append(prediction)\n        loss_neg = loss_func(predictions_neg)\n        grads_flat = grads.reshape(-1)\n        grads_flat[i] = (loss_pos - loss_neg) / (2 * epsilon)\n        param_flat[i] = original_value\n        model.parameters[param_name] = param_flat.reshape(param.shape)\n    return grads.T"}
{"task_id": 256, "completion_id": 5, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    param = model.parameters[param_name]\n    param_shape = param.shape\n    grads = np.zeros_like(param, dtype=np.float64)\n    for idx in np.ndindex(param_shape):\n        original_value = param[idx]\n        param[idx] = original_value + epsilon\n        model.flush_gradients()\n        predictions_plus = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t].astype(np.float64))\n            predictions_plus.append(prediction)\n        loss_plus = loss_func(predictions_plus)\n        param[idx] = original_value - epsilon\n        model.flush_gradients()\n        predictions_minus = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t].astype(np.float64))\n            predictions_minus.append(prediction)\n        loss_minus = loss_func(predictions_minus)\n        grads[idx] = (loss_plus - loss_minus) / (2 * epsilon)\n        param[idx] = original_value\n    return grads.T"}
{"task_id": 256, "completion_id": 6, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    param = model.parameters[param_name]\n    original_param = param.copy()\n    grads = np.zeros_like(param, dtype=np.float64)\n    for i in range(param.size):\n        flat_index = np.unravel_index(i, param.shape)\n        param[flat_index] = original_param[flat_index] + epsilon\n        model.flush_gradients()\n        predictions_pos = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t])\n            predictions_pos.append(prediction)\n        loss_pos = loss_func(predictions_pos)\n        param[flat_index] = original_param[flat_index] - epsilon\n        model.flush_gradients()\n        predictions_neg = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t])\n            predictions_neg.append(prediction)\n        loss_neg = loss_func(predictions_neg)\n        grads[flat_index] = (loss_pos - loss_neg) / (2 * epsilon)\n        param[flat_index] = original_param[flat_index]\n    return grads.T"}
{"task_id": 256, "completion_id": 7, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name == 'Ba':\n        param_name = 'ba'\n    if param_name == 'Bx':\n        param_name = 'bx'\n    param = model.parameters[param_name]\n    grad_shape = param.shape\n    grads = np.zeros_like(param, dtype=np.float64)\n    for idx in np.ndindex(param_shape):\n        param_perturbed_pos = deepcopy(param)\n        param_perturbed_pos[idx] += epsilon\n        model.parameters[param_name] = param_perturbed_pos\n        model.flush_gradients()\n        predictions_pos = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t])\n            predictions_pos.append(prediction)\n        loss_pos = loss_func(predictions_pos)\n        param_perturbed_neg = deepcopy(param)\n        param_perturbed_neg[idx] -= epsilon\n        model.parameters[param_name] = param_perturbed_neg\n        model.flush_gradients()\n        predictions_neg = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t])\n            predictions_neg.append(prediction)\n        loss_neg = loss_func(predictions_neg)\n        grads[idx] = (loss_pos - loss_neg) / (2 * epsilon)\n    model.parameters[param_name] = param\n    return grads.T"}
{"task_id": 256, "completion_id": 8, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    param = model.parameters[param_name]\n    numeric_grad = np.zeros_like(param, dtype=np.float64)\n    it = np.nditer(param, flags=['multi_index'], op_flags=['readwrite'])\n    while not it.finished:\n        idx = it.multi_index\n        original_val = param[idx]\n        param[idx] = original_val + epsilon\n        model.flush_gradients()\n        predictions_pos = []\n        for t in range(n_t):\n            pred = model.forward(X[:, :, t].astype(np.float64))\n            predictions_pos.append(pred)\n        loss_pos = loss_func(predictions_pos)\n        param[idx] = original_val - epsilon\n        model.flush_gradients()\n        predictions_neg = []\n        for t in range(n_t):\n            pred = model.forward(X[:, :, t].astype(np.float64))\n            predictions_neg.append(pred)\n        loss_neg = loss_func(predictions_neg)\n        param[idx] = original_val\n        numeric_grad[idx] = (loss_pos - loss_neg) / (2 * epsilon)\n        it.iternext()\n    return numeric_grad.T"}
{"task_id": 256, "completion_id": 9, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    param = model.parameters[param_name]\n    orig_shape = param.shape\n    param_flat = param.flatten()\n    grads = np.zeros_like(param_flat, dtype=np.float64)\n    for i in range(len(param_flat)):\n        param_flat_plus = deepcopy(param_flat)\n        param_flat_plus[i] += epsilon\n        model.parameters[param_name] = param_flat_plus.reshape(orig_shape)\n        model.flush_gradients()\n        predictions_plus = []\n        for t in range(n_t):\n            predictions_plus.append(model.forward(X[:, :, t]))\n        loss_plus = loss_func(predictions_plus)\n        param_flat_minus = deepcopy(param_flat)\n        param_flat_minus[i] -= epsilon\n        model.parameters[param_name] = param_flat_minus.reshape(orig_shape)\n        model.flush_gradients()\n        predictions_minus = []\n        for t in range(n_t):\n            predictions_minus.append(model.forward(X[:, :, t]))\n        loss_minus = loss_func(predictions_minus)\n        grads[i] = (loss_plus - loss_minus) / (2 * epsilon)\n    model.parameters[param_name] = param\n    return grads.reshape(orig_shape).T"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    clfs = []\n    alphas = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        best_threshold = 0\n        best_polarity = 1\n        for feature_i in range(n):\n            thresholds = np.unique(X_train[:, feature_i])\n            for threshold in thresholds:\n                for polarity in (1, -1):\n                    predictions = np.ones(m)\n                    predictions[X_train[:, feature_i] * polarity < threshold * polarity] = -1\n                    weighted_error = np.sum(weights[predictions != y_train])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity *= -1\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = (feature_i, threshold)\n                        best_polarity = polarity\n        epsilon = min_error\n        alpha = 0.5 * np.log((1 - epsilon) / (epsilon + 1e-10))\n        alphas.append(alpha)\n        predictions = np.ones(m)\n        (feature_i, threshold) = best_stump\n        predictions[X_train[:, feature_i] * best_polarity < threshold * best_polarity] = -1\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        clfs.append((feature_i, threshold, best_polarity))\n    (m_test, _) = X_test.shape\n    predictions = np.zeros(m_test)\n    for (alpha, (feature_i, threshold, polarity)) in zip(alphas, clfs):\n        prediction = np.ones(m_test)\n        prediction[X_test[:, feature_i] * polarity < threshold * polarity] = -1\n        predictions += alpha * prediction\n    return [1 if pred > 0 else -1 for pred in predictions]"}
{"task_id": 257, "completion_id": 1, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_clf = max(1, n_clf)\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    alphas = []\n    stumps = []\n\n    def weighted_error(y, y_pred, weights):\n        return np.sum(weights[y != y_pred])\n\n    def predict_stump(X, feature_idx, threshold, polarity):\n        conditions = X[:, feature_idx] < threshold if polarity == 1 else X[:, feature_idx] >= threshold\n        return np.where(conditions, -1, 1)\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        best_alpha = None\n        best_polarity = None\n        best_threshold = None\n        for feature_idx in range(n):\n            for threshold in X_train[:, feature_idx]:\n                for polarity in [-1, 1]:\n                    predictions = predict_stump(X_train, feature_idx, threshold, polarity)\n                    error = weighted_error(y_train, predictions, weights)\n                    if error > 0.5:\n                        error = 1 - error\n                        polarity *= -1\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature_idx, threshold, polarity)\n                        best_alpha = 0.5 * np.log((1 - error) / error)\n        stumps.append(best_stump)\n        alphas.append(best_alpha)\n        y_pred = predict_stump(X_train, best_stump[0], best_stump[1], best_stump[2])\n        weights *= np.exp(-best_alpha * y_train * y_pred)\n        weights /= weights.sum()\n\n    def predict_instance(x):\n        stump_preds = np.array([predict_stump(np.array([x]), stump[0], stump[1], stump[2]) for stump in stumps])\n        return np.sign(np.sum(np.array(alphas) * stump_preds.flatten()))\n    return [predict_instance(x) for x in X_test]"}
{"task_id": 257, "completion_id": 2, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_clf = max(1, n_clf)\n    (m, _) = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    stump_weights = []\n\n    def weighted_error(y_true, y_pred, w):\n        return np.sum(w[y_true != y_pred])\n\n    def train_stump():\n        min_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_pred = None\n        for feature_i in range(X_train.shape[1]):\n            (thresholds, classes) = zip(*sorted(zip(X_train[:, feature_i], y_train)))\n            thresholds = np.unique(np.array(thresholds))\n            for threshold in thresholds:\n                pred = np.ones(m)\n                pred[X_train[:, feature_i] < threshold] = -1\n                error = weighted_error(y_train, pred, weights)\n                if error > 0.5:\n                    error = 1 - error\n                    pred *= -1\n                if error < min_error:\n                    min_error = error\n                    best_pred = pred.copy()\n                    best_feature = feature_i\n                    best_threshold = threshold\n        return (best_feature, best_threshold, best_pred, min_error)\n    for _ in range(n_clf):\n        (feature, threshold, pred, error) = train_stump()\n        stump_weight = 0.5 * np.log((1 - error) / error)\n        weights *= np.exp(-stump_weight * y_train * pred)\n        weights /= weights.sum()\n        stumps.append((feature, threshold))\n        stump_weights.append(stump_weight)\n\n    def predict_sample(sample):\n        stump_pred = np.array([1 if sample[feature] > threshold else -1 for (feature, threshold) in stumps])\n        return np.sign(np.dot(stump_weights, stump_pred))\n    return [predict_sample(sample) for sample in X_test]"}
{"task_id": 257, "completion_id": 3, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    for _ in range(n_clf):\n        best_stump = None\n        best_error = float('inf')\n        best_polarity = 1\n        for feature_i in range(n):\n            thresholds = np.unique(X_train[:, feature_i])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(m)\n                    predictions[X_train[:, feature_i] * polarity < threshold * polarity] = -1\n                    weighted_error = np.sum(weights[predictions != y_train])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n                    if weighted_error < best_error:\n                        best_error = weighted_error\n                        best_stump = {'feature': feature_i, 'threshold': threshold, 'polarity': polarity}\n                        best_polarity = polarity\n        alpha = 0.5 * np.log((1 - best_error) / (best_error + 1e-10))\n        predictions = np.ones(m)\n        feature_values = X_train[:, best_stump['feature']]\n        predictions[feature_values * best_polarity < best_stump['threshold'] * best_polarity] = -1\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        stumps.append((best_stump, alpha))\n    stump_predictions = np.zeros((n_clf, X_test.shape[0]))\n    for (i, (stump, alpha)) in enumerate(stumps):\n        stump_pred = np.ones(X_test.shape[0])\n        feature_values = X_test[:, stump['feature']]\n        stump_pred[feature_values * stump['polarity'] < stump['threshold'] * stump['polarity']] = -1\n        stump_predictions[i] = alpha * stump_pred\n    final_predictions = np.sign(np.sum(stump_predictions, axis=0))\n    return final_predictions.tolist()"}
{"task_id": 257, "completion_id": 4, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, _) = X_train.shape\n    weights = np.ones(m) / m\n    alphas = []\n    stumps = []\n\n    def weighted_error(y_true, y_pred, weights):\n        return np.sum(weights[y_true != y_pred]) / np.sum(weights)\n\n    def train_stump():\n        min_error = float('inf')\n        best_stump = None\n        best_threshold = None\n        for feature_i in range(X_train.shape[1]):\n            thresholds = np.unique(X_train[:, feature_i])\n            for threshold in thresholds:\n                predictions = np.ones(m)\n                predictions[X_train[:, feature_i] < threshold] = -1\n                error = weighted_error(y_train, predictions, weights)\n                if error > 0.5:\n                    error = 1 - error\n                    predictions = -predictions\n                if error < min_error:\n                    min_error = error\n                    best_stump = (feature_i, threshold)\n                    best_predictions = predictions\n        return (best_stump, best_predictions, min_error)\n    for _ in range(n_clf):\n        (stump, predictions, error) = train_stump()\n        alpha = 0.5 * np.log((1 - error) / error)\n        alphas.append(alpha)\n        stumps.append(stump)\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n    def predict_sample(sample):\n        stump_preds = np.array([-1 if sample[stump[0]] < stump[1] else 1 for stump in stumps])\n        return np.sign(np.sum(alphas * stump_preds))\n    return [predict_sample(sample) for sample in X_test]"}
{"task_id": 257, "completion_id": 5, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    clfs = []\n    alphas = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = {}\n        for j in range(n):\n            thresholds = sorted(set(X_train[:, j]))\n            for threshold in thresholds:\n                for sign in (-1, 1):\n                    predictions = np.ones(m)\n                    predictions[X_train[:, j] * sign < threshold * sign] = -1\n                    weighted_error = np.sum(weights[predictions != y_train])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        sign *= -1\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = {'feature': j, 'threshold': threshold, 'sign': sign}\n                        best_predictions = predictions\n        beta = min_error / (1 - min_error)\n        clf_weight = np.log(1 / beta)\n        weights *= beta ** (1 - (best_predictions == y_train).astype(int))\n        weights /= np.sum(weights)\n        clfs.append(best_stump)\n        alphas.append(clf_weight)\n\n    def stump_predict(stump, X):\n        feature = stump['feature']\n        threshold = stump['threshold']\n        sign = stump['sign']\n        predictions = np.ones(X.shape[0])\n        predictions[X[:, feature] * sign < threshold * sign] = -1\n        return predictions\n    final_predictions = np.zeros(X_test.shape[0])\n    for (clf, clf_weight) in zip(clfs, alphas):\n        stump_pred = stump_predict(clf, X_test)\n        final_predictions += clf_weight * stump_pred\n    return [1 if vote > 0 else -1 for vote in final_predictions]"}
{"task_id": 257, "completion_id": 6, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, _) = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        best_stump = None\n        best_error = float('inf')\n        best_polarity = None\n        best_threshold = None\n        for feature_i in range(X_train.shape[1]):\n            thresholds = np.unique(X_train[:, feature_i])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = polarity * np.ones(m)\n                    predictions[X_train[:, feature_i] < threshold] = -polarity\n                    weighted_error = sum(weights[y_train != predictions])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n                    if weighted_error < best_error:\n                        best_error = weighted_error\n                        best_stump = feature_i\n                        best_threshold = threshold\n                        best_polarity = polarity\n        epsilon = best_error\n        alpha = 0.5 * np.log((1 - epsilon) / (epsilon + 1e-10))\n        alphas.append(alpha)\n        predictions = best_polarity * np.ones(m)\n        predictions[X_train[:, best_stump] < best_threshold] = -best_polarity\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        stumps.append((best_stump, best_threshold, best_polarity))\n    test_preds = np.zeros(X_test.shape[0])\n    for (alpha, (feature_i, threshold, polarity)) in zip(alphas, stumps):\n        predictions = polarity * np.ones(X_test.shape[0])\n        predictions[X_test[:, feature_i] < threshold] = -polarity\n        test_preds += alpha * predictions\n    return [1 if pred > 0 else -1 for pred in test_preds]"}
{"task_id": 257, "completion_id": 7, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    alphas = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = {}\n        best_threshold = 0\n        best_polarity = 0\n        for feature in range(n):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(m)\n                    predictions[X_train[:, feature] * polarity < threshold * polarity] = -1\n                    weighted_error = np.sum(weights[predictions != y_train])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = {'feature': feature, 'threshold': threshold, 'polarity': polarity}\n                        best_threshold = threshold\n                        best_polarity = polarity\n        epsilon = min_error\n        alpha = 0.5 * np.log((1.0 - epsilon) / (epsilon + 1e-10))\n        alphas.append(alpha)\n        predictions = np.ones(m)\n        predictions[X_train[:, best_stump['feature']] * best_polarity < best_threshold * best_polarity] = -1\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        stumps.append(best_stump)\n    test_predictions = np.zeros(len(X_test))\n    for (alpha, stump) in zip(alphas, stumps):\n        predictions = np.ones(len(X_test))\n        predictions[X_test[:, stump['feature']] * stump['polarity'] < stump['threshold'] * stump['polarity']] = -1\n        test_predictions += alpha * predictions\n    final_predictions = np.sign(test_predictions)\n    return final_predictions.astype(int).tolist()"}
{"task_id": 257, "completion_id": 8, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    stump_weights = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = {}\n        for i in range(n):\n            feature_values = np.sort(np.unique(X_train[:, i]))\n            thresholds = (feature_values[:-1] + feature_values[1:]) / 2.0\n            for threshold in thresholds:\n                predictions = np.ones(m)\n                predictions[X_train[:, i] < threshold] = -1\n                weighted_error = np.sum(weights[predictions != y_train])\n                if weighted_error > 0.5:\n                    weighted_error = 1 - weighted_error\n                    predictions = -1 * predictions\n                if weighted_error < min_error:\n                    min_error = weighted_error\n                    best_stump['feature'] = i\n                    best_stump['threshold'] = threshold\n                    best_stump['prediction'] = predictions\n        alpha = 0.5 * np.log((1 - min_error) / min_error)\n        stump_weights.append(alpha)\n        stumps.append(best_stump)\n        weights *= np.exp(-alpha * y_train * best_stump['prediction'])\n        weights /= np.sum(weights)\n    y_pred = np.zeros(X_test.shape[0])\n    for (stump, weight) in zip(stumps, stump_weights):\n        predictions = np.ones(X_test.shape[0])\n        predictions[X_test[:, stump['feature']] < stump['threshold']] = -1\n        y_pred += weight * predictions\n    return [1 if y >= 0 else -1 for y in y_pred]"}
{"task_id": 257, "completion_id": 9, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    stump_weights = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = {}\n        best_threshold = None\n        best_polarity = None\n        for feature_i in range(n):\n            feature_values = np.expand_dims(X_train[:, feature_i], axis=1)\n            unique_values = np.unique(feature_values)\n            for threshold in unique_values:\n                for polarity in [1, -1]:\n                    predictions = np.ones(m)\n                    predictions[feature_values * polarity < threshold * polarity] = -1\n                    weighted_error = np.sum(weights[predictions != y_train])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_polarity = polarity\n                        best_threshold = threshold\n                        best_stump = {'feature': feature_i, 'polarity': best_polarity}\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        stump_weights.append(alpha)\n        predictions = np.ones(m)\n        feature_values = X_train[:, best_stump['feature']]\n        predictions[feature_values * best_stump['polarity'] < best_threshold * best_stump['polarity']] = -1\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        stumps.append({'stump': best_stump, 'alpha': alpha})\n    stumps_predictions = np.array([stump['alpha'] * predict_with_stump(X_test, stump['stump']) for stump in stumps])\n    y_pred = np.sign(np.sum(stumps_predictions, axis=0))\n    return y_pred.tolist()\ndef predict_with_stump(X: np.ndarray, stump: dict) -> np.ndarray:\n    feature = stump['feature']\n    threshold = stump['threshold']\n    polarity = stump['polarity']\n    predictions = np.ones(X.shape[0])\n    feature_values = X[:, feature]\n    predictions[feature_values * polarity < threshold * polarity] = -1\n    return predictions"}
{"task_id": 261, "completion_id": 0, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('The shape must have at least two dimensions.')\n    if len(shape) == 2:\n        (fan_in, fan_out) = shape\n    else:\n        fan_in = shape[1] * np.prod(shape[2:])\n        fan_out = shape[0] * np.prod(shape[2:])\n    s = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=s, size=shape).astype(np.float)\nshape = (10, 3, 3, 3)"}
{"task_id": 261, "completion_id": 1, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions.')\n    fan_in = shape[1]\n    fan_out = shape[0]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    std_dev = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(0, std_dev, shape).astype(np.float)"}
{"task_id": 261, "completion_id": 2, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions')\n    fan_in = shape[1]\n    fan_out = shape[0]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    std_dev = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(0, std_dev, shape)"}
{"task_id": 261, "completion_id": 3, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions')\n    fan_in = shape[1] if len(shape) == 2 else shape[1] * np.prod(shape[2:])\n    fan_out = shape[0] if len(shape) == 2 else shape[0] * np.prod(shape[2:])\n    s = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(0, s, shape)"}
{"task_id": 261, "completion_id": 4, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions.')\n    fan_in = shape[1]\n    fan_out = shape[0]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    s = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=s, size=shape).astype(np.float)"}
{"task_id": 261, "completion_id": 5, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions for well-defined fan_in and fan_out.')\n    fan_in = shape[1]\n    fan_out = shape[0]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    s = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=s, size=shape)\nshape = (10, 20, 3, 3)"}
{"task_id": 261, "completion_id": 6, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions')\n    fan_in = shape[1]\n    fan_out = shape[0]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    std_dev = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=std_dev, size=shape)\nshape = (10, 20, 3, 3)"}
{"task_id": 261, "completion_id": 7, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions.')\n    fan_in = shape[1]\n    fan_out = shape[0]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    s = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=s, size=shape)"}
{"task_id": 261, "completion_id": 8, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions')\n    fan_in = shape[1]\n    fan_out = shape[0]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    std_dev = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=std_dev, size=shape).astype(np.float)"}
{"task_id": 261, "completion_id": 9, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions')\n    fan_in = shape[1]\n    fan_out = shape[0]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    s = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(0, s, shape)"}
{"task_id": 266, "completion_id": 0, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    vertex_to_index = {vertex: idx for (idx, vertex) in enumerate(V)}\n    adj_list = [[] for _ in V]\n    for (u, v) in E:\n        if v not in adj_list[vertex_to_index[u]]:\n            adj_list[vertex_to_index[u]].append(v)\n        if u not in adj_list[vertex_to_index[v]]:\n            adj_list[vertex_to_index[v]].append(u)\n    for i in range(len(adj_list)):\n        adj_list[i].sort(key=lambda x: V.index(x))\n    return adj_list"}
{"task_id": 266, "completion_id": 1, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    index_map = {vertex: index for (index, vertex) in enumerate(V)}\n    adj_list = [[] for _ in V]\n    for (u, v) in E:\n        if u != v:\n            if v not in adj_list[index_map[u]]:\n                adj_list[index_map[u]].append(v)\n            if u not in adj_list[index_map[v]]:\n                adj_list[index_map[v]].append(u)\n    for i in range(len(adj_list)):\n        adj_list[i].sort(key=lambda x: V.index(x))\n    return adj_list"}
{"task_id": 266, "completion_id": 2, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    adj_dict = {vertex: set() for vertex in V}\n    for (u, v) in E:\n        adj_dict[u].add(v)\n        adj_dict[v].add(u)\n    G = []\n    for vertex in V:\n        neighbors = sorted(adj_dict[vertex], key=lambda x: V.index(x))\n        G.append(neighbors)\n    return G"}
{"task_id": 266, "completion_id": 3, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    vertex_to_index = {vertex: index for (index, vertex) in enumerate(V)}\n    adj_list = [[] for _ in V]\n    for (u, v) in E:\n        if v not in adj_list[vertex_to_index[u]]:\n            adj_list[vertex_to_index[u]].append(v)\n        if u not in adj_list[vertex_to_index[v]]:\n            adj_list[vertex_to_index[v]].append(u)\n    for neighbors in adj_list:\n        neighbors.sort(key=lambda vertex: V.index(vertex))\n    return adj_list"}
{"task_id": 266, "completion_id": 4, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    vertex_index = {vertex: index for (index, vertex) in enumerate(V)}\n    adj_list = [[] for _ in V]\n    for (u, v) in E:\n        if v not in adj_list[vertex_index[u]]:\n            adj_list[vertex_index[u]].append(v)\n        if u not in adj_list[vertex_index[v]]:\n            adj_list[vertex_index[v]].append(u)\n    for i in range(len(adj_list)):\n        adj_list[i].sort(key=lambda vertex: vertex_index[vertex])\n    return adj_list\nV = [1, 2, 3]\nE = []"}
{"task_id": 266, "completion_id": 5, "solution": "from typing import Any, List, Tuple\nfrom collections import defaultdict\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    adj_set = defaultdict(set)\n    for (u, v) in E:\n        adj_set[u].add(v)\n        adj_set[v].add(u)\n    adj_list = []\n    vertex_order = {vertex: index for (index, vertex) in enumerate(V)}\n    for vertex in V:\n        neighbors = sorted(adj_set[vertex], key=lambda x: vertex_order[x])\n        adj_list.append(neighbors)\n    return adj_list"}
{"task_id": 266, "completion_id": 6, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    vertex_index = {vertex: idx for (idx, vertex) in enumerate(V)}\n    adj_list = {vertex: set() for vertex in V}\n    for (u, v) in E:\n        if u in vertex_index and v in vertex_index:\n            adj_list[u].add(v)\n            adj_list[v].add(u)\n    result = []\n    for vertex in V:\n        sorted_neighbors = sorted(adj_list[vertex], key=lambda x: vertex_index[x])\n        result.append(sorted_neighbors)\n    return result\nV = [1, 2, 3, 4, 5]\nE = [(1, 2), (2, 3), (3, 4), (4, 5), (1, 5), (2, 5), (3, 5), (2, 4)]"}
{"task_id": 266, "completion_id": 7, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    vertex_to_index = {vertex: index for (index, vertex) in enumerate(V)}\n    adj_list = [[] for _ in range(len(V))]\n    for (u, v) in E:\n        if u != v:\n            if v not in adj_list[vertex_to_index[u]]:\n                adj_list[vertex_to_index[u]].append(v)\n            if u not in adj_list[vertex_to_index[v]]:\n                adj_list[vertex_to_index[v]].append(u)\n    for neighbours in adj_list:\n        neighbours.sort(key=lambda vertex: vertex_to_index[vertex])\n    return adj_list"}
{"task_id": 266, "completion_id": 8, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    vertex_index = {vertex: i for (i, vertex) in enumerate(V)}\n    adj_list = [set() for _ in V]\n    for (u, v) in E:\n        if u in vertex_index and v in vertex_index:\n            adj_list[vertex_index[u]].add(v)\n            adj_list[vertex_index[v]].add(u)\n    sorted_adj_list = [sorted(list(adj_set), key=lambda x: V.index(x)) for adj_set in adj_list]\n    return sorted_adj_list\nV = ['A', 'B', 'C', 'D']\nE = [('A', 'B'), ('B', 'C'), ('B', 'D'), ('A', 'C'), ('C', 'D')]"}
{"task_id": 266, "completion_id": 9, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    vertex_to_index = {vertex: index for (index, vertex) in enumerate(V)}\n    adj_list = [[] for _ in V]\n    for (u, v) in E:\n        if u in vertex_to_index and v in vertex_to_index:\n            u_index = vertex_to_index[u]\n            v_index = vertex_to_index[v]\n            if v not in adj_list[u_index]:\n                adj_list[u_index].append(v)\n            if u not in adj_list[v_index]:\n                adj_list[v_index].append(u)\n    for i in range(len(adj_list)):\n        adj_list[i].sort(key=lambda x: V.index(x))\n    return adj_list"}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_error = np.inf\n    best_feature_index = None\n    best_threshold = None\n    best_polarity = None\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                predictions = polarity * np.where(feature_values < threshold, 1, -1)\n                weighted_error = np.sum(sample_weights * (predictions != y))\n                if weighted_error < best_error:\n                    best_error = weighted_error\n                    best_feature_index = feature_index\n                    best_threshold = threshold\n                    best_polarity = polarity\n    return {'feature_index': best_feature_index, 'threshold': round(best_threshold, 4) if best_threshold is not None else None, 'polarity': best_polarity, 'weighted_error': round(best_error, 4)}"}
{"task_id": 267, "completion_id": 1, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_error = float('inf')\n    best_feature = None\n    best_threshold = None\n    best_polarity = None\n    for feature_index in range(n_features):\n        feature_values = np.unique(X[:, feature_index])\n        thresholds = (feature_values[:-1] + feature_values[1:]) / 2.0\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                predictions = np.sign(polarity * (X[:, feature_index] - threshold))\n                weighted_error = np.sum(sample_weights * (predictions != y))\n                if weighted_error < best_error:\n                    best_error = weighted_error\n                    best_feature = feature_index\n                    best_threshold = threshold\n                    best_polarity = polarity\n    return {'feature_index': best_feature, 'threshold': round(best_threshold, 4) if best_threshold is not None else None, 'polarity': best_polarity, 'weighted_error': round(best_error, 4)}"}
{"task_id": 267, "completion_id": 2, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_stump = {'feature_index': 0, 'threshold': 0.0, 'polarity': 1, 'weighted_error': float('inf')}\n    for feature_index in range(n_features):\n        feature = X[:, feature_index]\n        unique_values = np.unique(feature)\n        thresholds = (unique_values[:-1] + unique_values[1:]) / 2.0\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                predictions = np.where(feature < threshold, polarity, -polarity)\n                weighted_error = np.sum(sample_weights * (predictions != y))\n                if weighted_error < best_stump['weighted_error']:\n                    best_stump['feature_index'] = feature_index\n                    best_stump['threshold'] = round(threshold, 4)\n                    best_stump['polarity'] = polarity\n                    best_stump['weighted_error'] = round(weighted_error, 4)\n    return best_stump"}
{"task_id": 267, "completion_id": 3, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_stump = {'feature_index': None, 'threshold': None, 'polarity': None, 'weighted_error': float('inf')}\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        thresholds = (unique_values[:-1] + unique_values[1:]) / 2.0\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                predictions = polarity * (feature_values >= threshold)\n                misclassified = predictions != y\n                weighted_error = np.sum(sample_weights * misclassified)\n                if weighted_error < best_stump['weighted_error']:\n                    best_stump = {'feature_index': feature_index, 'threshold': round(threshold, 4), 'polarity': polarity, 'weighted_error': round(weighted_error, 4)}\n    return best_stump"}
{"task_id": 267, "completion_id": 4, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_error = float('inf')\n    best_feature = None\n    best_threshold = None\n    best_polarity = None\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        for threshold in unique_values:\n            for polarity in [1, -1]:\n                predictions = np.ones(n_samples)\n                if polarity == 1:\n                    predictions[feature_values >= threshold] = -1\n                else:\n                    predictions[feature_values < threshold] = -1\n                weighted_error = np.sum(sample_weights * (predictions != y))\n                if weighted_error < best_error:\n                    best_error = weighted_error\n                    best_feature = feature_index\n                    best_threshold = threshold\n                    best_polarity = polarity\n    return {'feature_index': best_feature, 'threshold': round(best_threshold, 4), 'polarity': best_polarity, 'weighted_error': round(best_error, 4)}"}
{"task_id": 267, "completion_id": 5, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_err = float('inf')\n    best_feature = None\n    best_threshold = None\n    best_polarity = None\n    for feature_idx in range(n_features):\n        unique_values = np.unique(X[:, feature_idx])\n        thresholds = (unique_values[:-1] + unique_values[1:]) / 2.0\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                y_pred = polarity * ((X[:, feature_idx] < threshold) * 2 - 1)\n                err = np.sum(sample_weights * (y_pred != y))\n                if err < best_err:\n                    best_err = err\n                    best_feature = feature_idx\n                    best_threshold = threshold\n                    best_polarity = polarity\n    return {'feature_index': best_feature, 'threshold': round(best_threshold, 4), 'polarity': best_polarity, 'weighted_error': round(best_err, 4)}"}
{"task_id": 267, "completion_id": 6, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_stump = {'feature_index': 0, 'threshold': 0.0, 'polarity': 1, 'weighted_error': float('inf')}\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        thresholds = (unique_values[:-1] + unique_values[1:]) / 2.0\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                y_pred = np.where(X[:, feature_index] < threshold, polarity, -polarity)\n                misclassified = (y_pred != y).astype(float)\n                weighted_error = np.sum(sample_weights * misclassified)\n                if weighted_error < best_stump['weighted_error']:\n                    best_stump = {'feature_index': feature_index, 'threshold': round(threshold, 4), 'polarity': polarity, 'weighted_error': round(weighted_error, 4)}\n    return best_stump"}
{"task_id": 267, "completion_id": 7, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_err = float('inf')\n    best_feature_index = None\n    best_threshold = None\n    best_polarity = None\n    for feature_index in range(n_features):\n        feature_values = np.unique(X[:, feature_index])\n        thresholds = (feature_values[1:] + feature_values[:-1]) / 2.0\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                predictions = np.where(X[:, feature_index] < threshold, polarity, -polarity)\n                err = np.sum(sample_weights[predictions != y])\n                if err < best_err:\n                    best_err = err\n                    best_feature_index = feature_index\n                    best_threshold = threshold\n                    best_polarity = polarity\n    return {'feature_index': best_feature_index, 'threshold': round(best_threshold, 4), 'polarity': best_polarity, 'weighted_error': round(best_err, 4)}"}
{"task_id": 267, "completion_id": 8, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_stump = {'feature_index': None, 'threshold': None, 'polarity': None, 'weighted_error': float('inf')}\n    for feature_index in range(n_features):\n        feature_values = np.unique(X[:, feature_index])\n        thresholds = (feature_values[:-1] + feature_values[1:]) / 2.0\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                predictions = np.where(X[:, feature_index] < threshold, polarity, -polarity)\n                weighted_error = np.sum(sample_weights * (predictions != y))\n                if weighted_error < best_stump['weighted_error']:\n                    best_stump['feature_index'] = feature_index\n                    best_stump['threshold'] = round(threshold, 4)\n                    best_stump['polarity'] = polarity\n                    best_stump['weighted_error'] = round(weighted_error, 4)\n    return best_stump"}
{"task_id": 267, "completion_id": 9, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_error = np.inf\n    best_feature = 0\n    best_threshold = 0.0\n    best_polarity = 1\n    for feature_index in range(n_features):\n        feature_values = np.unique(X[:, feature_index])\n        thresholds = (feature_values[:-1] + feature_values[1:]) / 2\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                predictions = polarity * ((X[:, feature_index] < threshold) * 2 - 1)\n                error = np.sum(sample_weights * (predictions != y))\n                if error < best_error:\n                    best_error = error\n                    best_feature = feature_index\n                    best_threshold = threshold\n                    best_polarity = polarity\n    return {'feature_index': best_feature, 'threshold': round(best_threshold, 4), 'polarity': best_polarity, 'weighted_error': round(best_error, 4)}"}
{"task_id": 273, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n\n    def shannon_entropy(labels):\n        \"\"\"Compute the Shannon entropy of a list of labels.\"\"\"\n        if not labels:\n            return 0.0\n        label_counts = Counter(labels)\n        n = len(labels)\n        entropy = 0.0\n        for count in label_counts.values():\n            p = count / n\n            entropy -= p * math.log2(p)\n        return entropy\n    if not isinstance(feature, list):\n        feature = list(feature)\n    if not isinstance(target, list):\n        target = list(target)\n    paired_data = list(zip(feature, target))\n    paired_data.sort(key=lambda x: x[0])\n    sorted_features = [x[0] for x in paired_data]\n    sorted_targets = [x[1] for x in paired_data]\n    if len(set(sorted_features)) == 1:\n        return (None, 0.0)\n    n = len(sorted_features)\n    max_ig = -float('inf')\n    best_threshold = None\n    parent_entropy = shannon_entropy(sorted_targets)\n    for i in range(n - 1):\n        if sorted_features[i] != sorted_features[i + 1]:\n            threshold = (sorted_features[i] + sorted_features[i + 1]) / 2.0\n            left_labels = sorted_targets[:i + 1]\n            right_labels = sorted_targets[i + 1:]\n            left_entropy = shannon_entropy(left_labels)\n            right_entropy = shannon_entropy(right_labels)\n            ig = parent_entropy - len(left_labels) / n * left_entropy - len(right_labels) / n * right_entropy\n            if ig > max_ig:\n                max_ig = ig\n                best_threshold = threshold\n    if max_ig <= 0.0:\n        return (None, 0.0)\n    return (round(best_threshold, 4), round(max_ig, 4))"}
{"task_id": 273, "completion_id": 1, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    feature = np.asarray(feature)\n    target = np.asarray(target)\n\n    def entropy(labels):\n        counts = Counter(labels)\n        n = len(labels)\n        return -sum((count / n * math.log2(count / n) for count in counts.values() if count > 0))\n    H_parent = entropy(target)\n    n = len(feature)\n    sorted_indices = np.argsort(feature)\n    sorted_feature = feature[sorted_indices]\n    sorted_target = target[sorted_indices]\n    best_ig = 0.0\n    best_threshold = None\n    for i in range(n - 1):\n        if sorted_feature[i] != sorted_feature[i + 1]:\n            threshold = (sorted_feature[i] + sorted_feature[i + 1]) / 2.0\n            left_labels = sorted_target[:i + 1]\n            right_labels = sorted_target[i + 1:]\n            H_left = entropy(left_labels)\n            H_right = entropy(right_labels)\n            ig = H_parent - len(left_labels) / n * H_left - len(right_labels) / n * H_right\n            if ig > best_ig:\n                best_ig = ig\n                best_threshold = threshold\n            elif ig == best_ig:\n                best_threshold = min(best_threshold, threshold) if best_threshold is not None else threshold\n    return (round(best_threshold, 4), round(best_ig, 4)) if best_threshold is not None else (None, 0.0)"}
{"task_id": 273, "completion_id": 2, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n\n    def entropy(labels):\n        \"\"\"Calculate the Shannon entropy of a list of class labels.\"\"\"\n        n = len(labels)\n        if n == 0:\n            return 0.0\n        label_counts = Counter(labels)\n        entropy = 0.0\n        for count in label_counts.values():\n            p_x = count / n\n            entropy -= p_x * math.log2(p_x)\n        return entropy\n    combined = sorted(zip(feature, target))\n    n = len(combined)\n    if combined[0][0] == combined[-1][0]:\n        return (None, 0.0)\n    best_threshold = None\n    max_information_gain = 0.0\n    parent_entropy = entropy([label for (_, label) in combined])\n    for i in range(n - 1):\n        if combined[i][0] != combined[i + 1][0]:\n            threshold = (combined[i][0] + combined[i + 1][0]) / 2.0\n            left_labels = [label for (_, label) in combined[:i + 1]]\n            right_labels = [label for (_, label) in combined[i + 1:]]\n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n            left_weight = (i + 1) / n\n            right_weight = (n - i - 1) / n\n            information_gain = parent_entropy - left_weight * left_entropy - right_weight * right_entropy\n            if information_gain > max_information_gain:\n                max_information_gain = information_gain\n                best_threshold = threshold\n    return (round(best_threshold, 4), round(max_information_gain, 4)) if best_threshold is not None else (None, 0.0)"}
{"task_id": 273, "completion_id": 3, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n\n    def entropy(labels):\n        \"\"\"Calculate the Shannon entropy for a list of labels.\"\"\"\n        if not labels:\n            return 0.0\n        counts = Counter(labels)\n        total = len(labels)\n        return -sum((count / total * math.log2(count / total) for count in counts.values()))\n    feature = np.array(feature)\n    target = np.array(target)\n    sorted_indices = np.argsort(feature)\n    sorted_feature = feature[sorted_indices]\n    sorted_target = target[sorted_indices]\n    parent_entropy = entropy(sorted_target)\n    n = len(sorted_feature)\n    best_threshold = None\n    max_gain = 0.0\n    for i in range(n - 1):\n        if sorted_feature[i] == sorted_feature[i + 1]:\n            continue\n        threshold = (sorted_feature[i] + sorted_feature[i + 1]) / 2.0\n        left_indices = sorted_indices[:i + 1]\n        right_indices = sorted_indices[i + 1:]\n        left_labels = sorted_target[:i + 1]\n        right_labels = sorted_target[i + 1:]\n        left_entropy = entropy(left_labels)\n        right_entropy = entropy(right_labels)\n        gain = parent_entropy - len(left_labels) / n * left_entropy - len(right_labels) / n * right_entropy\n        if gain > max_gain:\n            max_gain = gain\n            best_threshold = threshold\n    return (round(best_threshold, 4), round(max_gain, 4)) if best_threshold is not None else (None, 0.0)"}
{"task_id": 273, "completion_id": 4, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n\n    def entropy(labels):\n        counts = Counter(labels)\n        total = len(labels)\n        return -sum((count / total * math.log2(count / total) for count in counts.values() if count > 0))\n    feature = np.array(feature)\n    target = np.array(target)\n    sorted_indices = np.argsort(feature)\n    feature_sorted = feature[sorted_indices]\n    target_sorted = target[sorted_indices]\n    best_threshold = None\n    best_information_gain = 0.0\n    parent_entropy = entropy(target_sorted)\n    for i in range(len(feature_sorted) - 1):\n        if feature_sorted[i] != feature_sorted[i + 1]:\n            threshold = round((feature_sorted[i] + feature_sorted[i + 1]) / 2.0, 4)\n            left_indices = feature_sorted < threshold\n            right_indices = feature_sorted >= threshold\n            left_labels = target_sorted[left_indices]\n            right_labels = target_sorted[right_indices]\n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n            left_weight = len(left_labels) / len(feature_sorted)\n            right_weight = len(right_labels) / len(feature_sorted)\n            information_gain = parent_entropy - left_weight * left_entropy - right_weight * right_entropy\n            if information_gain > best_information_gain:\n                best_information_gain = information_gain\n                best_threshold = threshold\n    return (best_threshold, round(best_information_gain, 4))"}
{"task_id": 273, "completion_id": 5, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    feature = np.asarray(feature)\n    target = np.asarray(target)\n    sorted_indices = np.argsort(feature)\n    sorted_feature = feature[sorted_indices]\n    sorted_target = target[sorted_indices]\n    n = len(target)\n    if n == 0:\n        return (None, 0.0)\n    parent_entropy = shannon_entropy(sorted_target)\n    max_gain = 0.0\n    best_threshold = None\n    for i in range(n - 1):\n        if sorted_feature[i] != sorted_feature[i + 1]:\n            threshold = (sorted_feature[i] + sorted_feature[i + 1]) / 2.0\n            left_indices = sorted_indices[:i + 1]\n            right_indices = sorted_indices[i + 1:]\n            left_entropy = shannon_entropy(target[left_indices])\n            right_entropy = shannon_entropy(target[right_indices])\n            gain = parent_entropy - len(left_indices) / n * left_entropy - len(right_indices) / n * right_entropy\n            if gain > max_gain:\n                max_gain = gain\n                best_threshold = threshold\n    if best_threshold is None:\n        return (None, 0.0)\n    return (round(best_threshold, 4), round(max_gain, 4))\ndef shannon_entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of class labels.\"\"\"\n    n = len(labels)\n    if n == 0:\n        return 0.0\n    label_counts = Counter(labels)\n    entropy = 0.0\n    for count in label_counts.values():\n        p = count / n\n        entropy -= p * math.log2(p)\n    return entropy"}
{"task_id": 273, "completion_id": 6, "solution": "import math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n\n    def shannon_entropy(labels):\n        \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n        label_counts = Counter(labels)\n        n = len(labels)\n        entropy = 0.0\n        for count in label_counts.values():\n            p = count / n\n            entropy -= p * math.log2(p)\n        return entropy\n    combined = sorted(zip(feature, target))\n    sorted_feature = [x for (x, _) in combined]\n    sorted_target = [y for (_, y) in combined]\n    n = len(sorted_feature)\n    max_gain = 0.0\n    best_threshold = None\n    parent_entropy = shannon_entropy(sorted_target)\n    for i in range(1, n):\n        if sorted_feature[i] == sorted_feature[i - 1]:\n            continue\n        threshold = round((sorted_feature[i - 1] + sorted_feature[i]) / 2.0, 4)\n        left_labels = sorted_target[:i]\n        right_labels = sorted_target[i:]\n        left_size = len(left_labels)\n        right_size = len(right_labels)\n        left_entropy = shannon_entropy(left_labels)\n        right_entropy = shannon_entropy(right_labels)\n        gain = parent_entropy - left_size / n * left_entropy - right_size / n * right_entropy\n        if gain > max_gain:\n            max_gain = gain\n            best_threshold = threshold\n        elif gain == max_gain and (best_threshold is None or threshold < best_threshold):\n            best_threshold = threshold\n    return (best_threshold, round(max_gain, 4)) if best_threshold is not None else (None, 0.0)"}
{"task_id": 273, "completion_id": 7, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of class labels.\"\"\"\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    entropy_value = 0.0\n    for count in label_counts.values():\n        probability = count / total_labels\n        entropy_value -= probability * math.log2(probability)\n    return entropy_value\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    feature = np.array(feature)\n    target = np.array(target)\n    sorted_indices = np.argsort(feature)\n    sorted_feature = feature[sorted_indices]\n    sorted_target = target[sorted_indices]\n    best_threshold = None\n    max_gain = 0.0\n    parent_entropy = entropy(sorted_target)\n    for i in range(len(sorted_feature) - 1):\n        if sorted_feature[i] != sorted_feature[i + 1]:\n            threshold = (sorted_feature[i] + sorted_feature[i + 1]) / 2.0\n            left_indices = sorted_indices[sorted_indices <= i]\n            right_indices = sorted_indices[sorted_indices > i]\n            left_target = sorted_target[left_indices]\n            right_target = sorted_target[right_indices]\n            n = len(sorted_feature)\n            left_entropy = entropy(left_target)\n            right_entropy = entropy(right_target)\n            gain = parent_entropy - len(left_target) / n * left_entropy - len(right_target) / n * right_entropy\n            if gain > max_gain:\n                max_gain = gain\n                best_threshold = threshold\n            elif gain == max_gain:\n                best_threshold = min(best_threshold, threshold) if best_threshold is not None else threshold\n    return (round(best_threshold, 4), round(max_gain, 4)) if best_threshold is not None else (None, 0.0)"}
{"task_id": 273, "completion_id": 8, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n\n    def entropy(labels):\n        \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n        counts = Counter(labels)\n        total = len(labels)\n        return -sum((count / total * math.log2(count / total) for count in counts.values() if count > 0))\n    data = sorted(zip(feature, target), key=lambda x: x[0])\n    n = len(data)\n    if n == 0:\n        return (None, 0.0)\n    H_parent = entropy([label for (_, label) in data])\n    max_gain = 0.0\n    best_threshold = None\n    for i in range(n - 1):\n        if data[i][0] != data[i + 1][0]:\n            threshold = round((data[i][0] + data[i + 1][0]) / 2.0, 4)\n            left_labels = [label for (_, label) in data[:i + 1]]\n            right_labels = [label for (_, label) in data[i + 1:]]\n            H_left = entropy(left_labels)\n            H_right = entropy(right_labels)\n            gain = H_parent - len(left_labels) / n * H_left - len(right_labels) / n * H_right\n            if gain > max_gain:\n                max_gain = gain\n                best_threshold = threshold\n    if max_gain <= 0.0:\n        return (None, 0.0)\n    return (round(best_threshold, 4), round(max_gain, 4))"}
{"task_id": 273, "completion_id": 9, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n\n    def entropy(labels):\n        counts = Counter(labels)\n        total = len(labels)\n        return -sum((count / total * math.log2(count / total) for count in counts.values() if count > 0))\n    n = len(feature)\n    if n == 0:\n        return (None, 0.0)\n    sorted_indices = np.argsort(feature)\n    sorted_feature = np.array(feature)[sorted_indices]\n    sorted_target = np.array(target)[sorted_indices]\n    H_parent = entropy(sorted_target)\n    best_threshold = None\n    max_info_gain = 0.0\n    for i in range(n - 1):\n        if sorted_feature[i] != sorted_feature[i + 1]:\n            threshold = (sorted_feature[i] + sorted_feature[i + 1]) / 2.0\n            left_labels = sorted_target[:i + 1]\n            right_labels = sorted_target[i + 1:]\n            H_left = entropy(left_labels)\n            H_right = entropy(right_labels)\n            info_gain = H_parent - len(left_labels) / n * H_left - len(right_labels) / n * H_right\n            if info_gain > max_info_gain:\n                max_info_gain = info_gain\n                best_threshold = threshold\n    return (round(best_threshold, 4), round(max_info_gain, 4)) if best_threshold is not None else (None, 0.0)"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 1, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 2, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 3, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable[[Tuple[int, int]], List[List[float]]]:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 4, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 5, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 6, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 7, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 8, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 286, "completion_id": 9, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, H_out, W_out))\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h * s_h:h * s_h + p_h, w * s_w:w * s_w + p_w])\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    grad_input[n, c, h * s_h:h * s_h + p_h, w * s_w:w * s_w + p_w] += accum_grad[n, c, h, w] / (p_h * p_w)\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    return (pooled_output, grad_input)"}
{"task_id": 287, "completion_id": 1, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, H_out, W_out))\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, h, w] / (p_h * p_w)\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    return (pooled_output, grad_input)"}
{"task_id": 287, "completion_id": 2, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, H_out, W_out))\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, h, w] / (p_h * p_w)\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    return (pooled_output, grad_input)"}
{"task_id": 287, "completion_id": 3, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_H = (H - p_h) // s_h + 1\n    out_W = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, out_H, out_W))\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_H):\n                for w in range(out_W):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_H):\n                for w in range(out_W):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, h, w] / (p_h * p_w)\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    return (pooled_output, grad_input)"}
{"task_id": 287, "completion_id": 4, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    output_h = (H - p_h) // s_h + 1\n    output_w = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, output_h, output_w))\n    for n in range(N):\n        for c in range(C):\n            for oh in range(output_h):\n                for ow in range(output_w):\n                    h_start = oh * s_h\n                    h_end = h_start + p_h\n                    w_start = ow * s_w\n                    w_end = w_start + p_w\n                    pooled_output[n, c, oh, ow] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for oh in range(output_h):\n                for ow in range(output_w):\n                    h_start = oh * s_h\n                    h_end = h_start + p_h\n                    w_start = ow * s_w\n                    w_end = w_start + p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, oh, ow] / (p_h * p_w)\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    return (pooled_output, grad_input)"}
{"task_id": 287, "completion_id": 5, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, H_out, W_out))\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, h, w] / (p_h * p_w)\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    return (pooled_output, grad_input)"}
{"task_id": 287, "completion_id": 6, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start = i * s_h\n                    h_end = h_start + p_h\n                    w_start = j * s_w\n                    w_end = w_start + p_w\n                    pooled_output[n, c, i, j] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start = i * s_h\n                    h_end = h_start + p_h\n                    w_start = j * s_w\n                    w_end = w_start + p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, i, j] / (p_h * p_w)\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    return (pooled_output, grad_input)"}
{"task_id": 287, "completion_id": 7, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, H_out, W_out))\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, h, w] / (p_h * p_w)\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    return (pooled_output, grad_input)"}
{"task_id": 287, "completion_id": 8, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, H_out, W_out))\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    (h_start, h_end) = (h * s_h, h * s_h + p_h)\n                    (w_start, w_end) = (w * s_w, w * s_w + p_w)\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    (h_start, h_end) = (h * s_h, h * s_h + p_h)\n                    (w_start, w_end) = (w * s_w, w * s_w + p_w)\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, h, w] / (p_h * p_w)\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    return (pooled_output, grad_input)"}
{"task_id": 287, "completion_id": 9, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_H = (H - p_h) // s_h + 1\n    out_W = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, out_H, out_W))\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_H):\n                for j in range(out_W):\n                    h_start = i * s_h\n                    h_end = h_start + p_h\n                    w_start = j * s_w\n                    w_end = w_start + p_w\n                    pooled_output[n, c, i, j] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_H):\n                for j in range(out_W):\n                    h_start = i * s_h\n                    h_end = h_start + p_h\n                    w_start = j * s_w\n                    w_end = w_start + p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, i, j] / (p_h * p_w)\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    return (pooled_output, grad_input)"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return tree_a.feature == tree_b.feature and np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08) and compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False"}
{"task_id": 290, "completion_id": 1, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return tree_a.feature == tree_b.feature and np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08) and compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False"}
{"task_id": 290, "completion_id": 2, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return tree_a.feature == tree_b.feature and np.isclose(tree_a.threshold, tree_b.threshold) and compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False"}
{"task_id": 290, "completion_id": 3, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return tree_a.feature == tree_b.feature and np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08) and compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False"}
{"task_id": 290, "completion_id": 4, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.allclose(tree_a.threshold, tree_b.threshold, atol=1e-08):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False"}
{"task_id": 290, "completion_id": 5, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    return False"}
{"task_id": 290, "completion_id": 6, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        feature_same = tree_a.feature == tree_b.feature\n        threshold_same = np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08)\n        left_same = compare_trees(tree_a.left, tree_b.left)\n        right_same = compare_trees(tree_a.right, tree_b.right)\n        return feature_same and threshold_same and left_same and right_same\n    else:\n        return False"}
{"task_id": 290, "completion_id": 7, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return tree_a.feature == tree_b.feature and np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08) and compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False"}
{"task_id": 290, "completion_id": 8, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature == tree_b.feature and np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08) and compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right):\n            return True\n    return False"}
{"task_id": 290, "completion_id": 9, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature == tree_b.feature and np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08):\n            return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    return False"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    num_columns = np_parent1.shape[1]\n    if not 0 <= cutoff <= num_columns:\n        raise ValueError('Cutoff must be between 0 and the number of columns (inclusive).')\n    child1 = np.copy(np_parent1)\n    child2 = np.copy(np_parent2)\n    child1[:, cutoff:] = np_parent2[:, cutoff:]\n    child2[:, cutoff:] = np_parent1[:, cutoff:]\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    return (child1_list, child2_list)\nparent1 = [[1, 2, 3], [4, 5, 6]]\nparent2 = [[7, 8, 9], [10, 11, 12]]\ncutoff = 1"}
{"task_id": 292, "completion_id": 1, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1_np = np.array(parent1)\n    parent2_np = np.array(parent2)\n    if parent1_np.shape != parent2_np.shape:\n        return -1\n    (rows, cols) = parent1_np.shape\n    child1_np = np.zeros((rows, cols))\n    child2_np = np.zeros((rows, cols))\n    child1_np[:, :cutoff] = parent1_np[:, :cutoff]\n    child1_np[:, cutoff:] = parent2_np[:, cutoff:]\n    child2_np[:, :cutoff] = parent2_np[:, :cutoff]\n    child2_np[:, cutoff:] = parent1_np[:, cutoff:]\n    child1 = child1_np.tolist()\n    child2 = child2_np.tolist()\n    return (child1, child2)"}
{"task_id": 292, "completion_id": 2, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    num_columns = np_parent1.shape[1]\n    if cutoff < 0 or cutoff > num_columns:\n        raise ValueError('Cutoff must be between 0 and the number of columns (inclusive).')\n    child1 = np.copy(np_parent1)\n    child2 = np.copy(np_parent2)\n    child1[:, cutoff:] = np_parent2[:, cutoff:]\n    child2[:, cutoff:] = np_parent1[:, cutoff:]\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    return (child1_list, child2_list)\nparent1 = [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]\nparent2 = [[0.9, 0.8, 0.7], [0.6, 0.5, 0.4]]\ncutoff = 1"}
{"task_id": 292, "completion_id": 3, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    num_columns = np_parent1.shape[1]\n    if not 0 <= cutoff <= num_columns:\n        return -1\n    child1 = np.concatenate((np_parent1[:, :cutoff], np_parent2[:, cutoff:]), axis=1)\n    child2 = np.concatenate((np_parent2[:, :cutoff], np_parent1[:, cutoff:]), axis=1)\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    return (child1_list, child2_list)"}
{"task_id": 292, "completion_id": 4, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    child1 = np.hstack((np_parent1[:, :cutoff], np_parent2[:, cutoff:]))\n    child2 = np.hstack((np_parent2[:, :cutoff], np_parent1[:, cutoff:]))\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    return (child1_list, child2_list)"}
{"task_id": 292, "completion_id": 5, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1_arr = np.array(parent1)\n    parent2_arr = np.array(parent2)\n    if parent1_arr.shape != parent2_arr.shape:\n        return -1\n    num_cols = parent1_arr.shape[1]\n    if not 0 <= cutoff <= num_cols:\n        raise ValueError(f'Cutoff value {cutoff} is out of bounds for columns {num_cols}')\n    child1_arr = np.hstack((parent1_arr[:, :cutoff], parent2_arr[:, cutoff:]))\n    child2_arr = np.hstack((parent2_arr[:, :cutoff], parent1_arr[:, cutoff:]))\n    child1 = child1_arr.tolist()\n    child2 = child2_arr.tolist()\n    return (child1, child2)\nparent1 = [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]\nparent2 = [[0.7, 0.8, 0.9], [1.0, 1.1, 1.2]]\ncutoff = 1"}
{"task_id": 292, "completion_id": 6, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    num_columns = np_parent1.shape[1]\n    if cutoff < 0 or cutoff > num_columns:\n        raise ValueError('Cutoff must be between 0 and the number of columns (inclusive).')\n    child1 = np.concatenate((np_parent1[:, :cutoff], np_parent2[:, cutoff:]), axis=1)\n    child2 = np.concatenate((np_parent2[:, :cutoff], np_parent1[:, cutoff:]), axis=1)\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    return (child1_list, child2_list)\nparent1 = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\nparent2 = [[7.0, 8.0, 9.0], [10.0, 11.0, 12.0]]\ncutoff = 1"}
{"task_id": 292, "completion_id": 7, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    (num_rows, num_cols) = np_parent1.shape\n    child1 = np.zeros_like(np_parent1)\n    child2 = np.zeros_like(np_parent2)\n    child1[:, :cutoff] = np_parent1[:, :cutoff]\n    child2[:, :cutoff] = np_parent2[:, :cutoff]\n    child1[:, cutoff:] = np_parent2[:, cutoff:]\n    child2[:, cutoff:] = np_parent1[:, cutoff:]\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    return (child1_list, child2_list)"}
{"task_id": 292, "completion_id": 8, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    num_columns = np_parent1.shape[1]\n    if not 0 <= cutoff <= num_columns:\n        raise ValueError('Cutoff value is out of bounds')\n    child1 = np.concatenate((np_parent1[:, :cutoff], np_parent2[:, cutoff:]), axis=1)\n    child2 = np.concatenate((np_parent2[:, :cutoff], np_parent1[:, cutoff:]), axis=1)\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    return (child1_list, child2_list)"}
{"task_id": 292, "completion_id": 9, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1_np = np.array(parent1)\n    parent2_np = np.array(parent2)\n    if parent1_np.shape != parent2_np.shape:\n        return -1\n    num_cols = parent1_np.shape[1]\n    if cutoff < 0 or cutoff > num_cols:\n        return -1\n    child1_np = np.hstack((parent1_np[:, :cutoff], parent2_np[:, cutoff:]))\n    child2_np = np.hstack((parent2_np[:, :cutoff], parent1_np[:, cutoff:]))\n    child1 = child1_np.tolist()\n    child2 = child2_np.tolist()\n    return (child1, child2)\nparent1 = [[1, 2, 3], [4, 5, 6]]\nparent2 = [[7, 8, 9], [10, 11, 12]]\ncutoff = 1"}
{"task_id": 294, "completion_id": 0, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {label: [] for label in G['_V2I']}\n    for edges in G['_G']:\n        for (source_label, target_label, weight) in edges:\n            adj[source_label].append((target_label, weight))\n            if not G['is_directed']:\n                adj[target_label].append((source_label, weight))\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    return adj"}
{"task_id": 294, "completion_id": 1, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {label: [] for label in G['_V2I'].keys()}\n    for (source_index, edges) in enumerate(G['_G']):\n        source_label = next((label for (label, index) in G['_V2I'].items() if index == source_index))\n        for (source_label, target_label, weight) in edges:\n            adj[source_label].append((target_label, weight))\n            if not G['is_directed']:\n                if (source_label, weight) not in adj[target_label]:\n                    adj[target_label].append((source_label, weight))\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    return adj"}
{"task_id": 294, "completion_id": 2, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {vertex: [] for vertex in G['_V2I']}\n    for edges in G['_G']:\n        for (source_label, target_label, weight) in edges:\n            adj[source_label].append((target_label, weight))\n            if not G['is_directed']:\n                adj[target_label].append((source_label, weight))\n    for vertex in adj:\n        adj[vertex].sort(key=lambda x: x[0])\n    return adj"}
{"task_id": 294, "completion_id": 3, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {label: [] for label in G['_V2I'].keys()}\n    for edges in G['_G']:\n        for (source_label, target_label, weight) in edges:\n            adj[source_label].append((target_label, weight))\n            if not G['is_directed']:\n                adj[target_label].append((source_label, weight))\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    return adj"}
{"task_id": 294, "completion_id": 4, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {}\n    for label in G['_V2I']:\n        adj[label] = []\n    for edges in G['_G']:\n        for (source_label, target_label, weight) in edges:\n            adj[source_label].append((target_label, weight))\n            if not G['is_directed']:\n                adj[target_label].append((source_label, weight))\n    for label in adj:\n        adj[label].sort()\n    return adj"}
{"task_id": 294, "completion_id": 5, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj: Dict[Any, List[Tuple[Any, float]]] = {label: [] for label in G['_V2I'].keys()}\n    for edge_list in G['_G']:\n        for (source_label, target_label, weight) in edge_list:\n            adj[source_label].append((target_label, weight))\n            if not G['is_directed']:\n                adj[target_label].append((source_label, weight))\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    return adj"}
{"task_id": 294, "completion_id": 6, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj: Dict[Any, List[Tuple[Any, float]]] = {label: [] for label in G['_V2I']}\n    for (index, edges) in enumerate(G['_G']):\n        source_label = list(G['_V2I'].keys())[index]\n        for edge in edges:\n            (_, target_label, weight) = edge\n            adj[source_label].append((target_label, weight))\n            if not G['is_directed']:\n                adj[target_label].append((source_label, weight))\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    return adj"}
{"task_id": 294, "completion_id": 7, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    is_directed = G['is_directed']\n    V2I = G['_V2I']\n    adjacency_lists = G['_G']\n    adj: Dict[Any, List[Tuple[Any, float]]] = {label: [] for label in V2I.keys()}\n    for (source_index, edges) in enumerate(adjacency_lists):\n        source_label = list(V2I.keys())[source_index]\n        for (source_label, target_label, weight) in edges:\n            adj[source_label].append((target_label, weight))\n            if not is_directed:\n                adj[target_label].append((source_label, weight))\n    for neighbors in adj.values():\n        neighbors.sort()\n    return adj"}
{"task_id": 294, "completion_id": 8, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj: Dict[Any, List[Tuple[Any, float]]] = {}\n    for vertex in G['_V2I']:\n        adj[vertex] = []\n    for edges in G['_G']:\n        for (source_label, target_label, weight) in edges:\n            adj[source_label].append((target_label, weight))\n            if not G['is_directed']:\n                adj[target_label].append((source_label, weight))\n    for vertex in adj:\n        adj[vertex].sort(key=lambda x: x[0])\n    return adj"}
{"task_id": 294, "completion_id": 9, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {label: [] for label in G['_V2I'].keys()}\n    for edges in G['_G']:\n        for (source_label, target_label, weight) in edges:\n            adj[source_label].append((target_label, weight))\n            if not G['is_directed']:\n                adj[target_label].append((source_label, weight))\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    return adj"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all((x == 0) | (x == 1))"}
{"task_id": 296, "completion_id": 1, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all((x == 0) | (x == 1))"}
{"task_id": 296, "completion_id": 2, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all((x == 0) | (x == 1))"}
{"task_id": 296, "completion_id": 3, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all((x == 0) | (x == 1))"}
{"task_id": 296, "completion_id": 4, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all((x == 0) | (x == 1))"}
{"task_id": 296, "completion_id": 5, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all((x == 0) | (x == 1))"}
{"task_id": 296, "completion_id": 6, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all(np.isin(x, [0, 1]))"}
{"task_id": 296, "completion_id": 7, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all((x == 0) | (x == 1))"}
{"task_id": 296, "completion_id": 8, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all((x == 0) | (x == 1))"}
{"task_id": 296, "completion_id": 9, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all((x == 0) | (x == 1))"}
{"task_id": 298, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n\n    def generate_ngrams(tokens, n):\n        return zip(*[tokens[i:] for i in range(n)])\n    ngram_counts = defaultdict(int)\n    prefix_counts = defaultdict(int)\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        for ngram in generate_ngrams(tokens, N):\n            ngram_counts[ngram] += 1\n            if N > 1:\n                prefix_counts[ngram[:-1]] += 1\n    query_tokens = query.split()\n    if N > 1:\n        query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    if len(query_tokens) < N:\n        return float('-inf')\n    log_prob = 0.0\n    for ngram in generate_ngrams(query_tokens, N):\n        prefix = ngram[:-1]\n        count_ngram = ngram_counts[ngram]\n        if N == 1:\n            count_prefix = sum(ngram_counts.values())\n        else:\n            count_prefix = prefix_counts[prefix]\n        if count_prefix == 0:\n            return float('-inf')\n        prob = count_ngram / count_prefix\n        if prob == 0:\n            return float('-inf')\n        log_prob += math.log(prob)\n    return round(log_prob, 4)\ncorpus = ['a b a', 'b a b']\nN = 1"}
{"task_id": 298, "completion_id": 1, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n\n    def pad_sentence(sentence: List[str], N: int) -> List[str]:\n        if N == 1:\n            return sentence\n        return ['<bol>'] * (N - 1) + sentence + ['<eol>']\n    ngram_counts = defaultdict(int)\n    n_minus_1_gram_counts = defaultdict(int)\n    for sentence in corpus:\n        tokens = sentence.split()\n        padded_tokens = pad_sentence(tokens, N)\n        for i in range(len(padded_tokens) - N + 1):\n            ngram = tuple(padded_tokens[i:i + N])\n            ngram_counts[ngram] += 1\n            if N > 1:\n                prefix = tuple(padded_tokens[i:i + N - 1])\n                n_minus_1_gram_counts[prefix] += 1\n    query_tokens = query.split()\n    if len(query_tokens) < N - 1:\n        return float('-inf')\n    padded_query_tokens = pad_sentence(query_tokens, N)\n    log_prob = 0.0\n    for i in range(len(padded_query_tokens) - N + 1):\n        ngram = tuple(padded_query_tokens[i:i + N])\n        if N == 1:\n            count = ngram_counts[ngram]\n            total_count = sum(ngram_counts.values())\n        else:\n            prefix = tuple(padded_query_tokens[i:i + N - 1])\n            count = ngram_counts[ngram]\n            total_count = n_minus_1_gram_counts[prefix]\n        if count == 0 or total_count == 0:\n            return float('-inf')\n        prob = count / total_count\n        log_prob += math.log(prob)\n    return round(log_prob, 4)\ncorpus = ['a b a', 'b a b']\nN = 1"}
{"task_id": 298, "completion_id": 2, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n    ngram_counter = Counter()\n    n1gram_counter = Counter()\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            n1gram = tuple(tokens[i:i + N - 1]) if N > 1 else None\n            ngram_counter[ngram] += 1\n            if N > 1:\n                n1gram_counter[n1gram] += 1\n    query_tokens = query.split()\n    if len(query_tokens) < N:\n        return float('-inf')\n    if N > 1:\n        query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        n1gram = tuple(query_tokens[i:i + N - 1]) if N > 1 else None\n        ngram_count = ngram_counter[ngram]\n        n1gram_count = n1gram_counter[n1gram] if N > 1 else sum(ngram_counter.values())\n        if ngram_count == 0 or n1gram_count == 0:\n            return float('-inf')\n        prob = ngram_count / n1gram_count\n        log_prob += math.log(prob)\n    return round(log_prob, 4)\ncorpus = ['a b a', 'b a b']\nN = 1"}
{"task_id": 298, "completion_id": 3, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n    token_counts = Counter()\n    prefix_counts = defaultdict(Counter)\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            prefix = tuple(tokens[i:i + N - 1])\n            token_counts[ngram] += 1\n            if N > 1:\n                prefix_counts[prefix][ngram[-1]] += 1\n    query_tokens = query.split()\n    if N > 1:\n        query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        prefix = tuple(query_tokens[i:i + N - 1])\n        if N == 1:\n            count_ngram = token_counts[ngram]\n            total_count = sum(token_counts.values())\n            if count_ngram == 0:\n                return float('-inf')\n            prob = count_ngram / total_count\n        else:\n            count_ngram = token_counts[ngram]\n            count_prefix = prefix_counts[prefix][ngram[-1]]\n            if count_prefix == 0:\n                return float('-inf')\n            prob = count_ngram / count_prefix\n        log_prob += math.log(prob)\n    return round(log_prob, 4)\ncorpus = ['a b a', 'b a b']\nN = 1"}
{"task_id": 298, "completion_id": 4, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n    tokenized_corpus = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        tokenized_corpus.append(tokens)\n    query_tokens = query.split()\n    if N > 1:\n        query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    if len(query_tokens) < N:\n        return float('-inf')\n    ngram_counts = defaultdict(int)\n    n_minus_1_gram_counts = defaultdict(int)\n    for sentence in tokenized_corpus:\n        for i in range(len(sentence) - N + 1):\n            n_gram = tuple(sentence[i:i + N])\n            n_minus_1_gram = tuple(sentence[i:i + N - 1])\n            ngram_counts[n_gram] += 1\n            n_minus_1_gram_counts[n_minus_1_gram] += 1\n    log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        n_gram = tuple(query_tokens[i:i + N])\n        n_minus_1_gram = tuple(query_tokens[i:i + N - 1])\n        n_gram_count = ngram_counts[n_gram]\n        n_minus_1_gram_count = n_minus_1_gram_counts[n_minus_1_gram]\n        if n_minus_1_gram_count == 0:\n            return float('-inf')\n        prob = n_gram_count / n_minus_1_gram_count\n        if prob == 0:\n            return float('-inf')\n        log_prob += math.log(prob)\n    return round(log_prob, 4)\ncorpus = ['a b a', 'b a b']\nN = 1"}
{"task_id": 298, "completion_id": 5, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n\n    def tokenize(sentence):\n        return sentence.split()\n\n    def pad_sequence(tokens, N):\n        if N > 1:\n            return ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        return tokens\n    tokenized_corpus = [tokenize(sentence) for sentence in corpus]\n    padded_corpus = [pad_sequence(tokens, N) for tokens in tokenized_corpus]\n    query_tokens = tokenize(query)\n    padded_query = pad_sequence(query_tokens, N)\n    if len(padded_query) < N:\n        return float('-inf')\n    ngram_counts = Counter()\n    n1gram_counts = Counter()\n    for sentence in padded_corpus:\n        for i in range(len(sentence) - N + 1):\n            ngram = tuple(sentence[i:i + N])\n            ngram_counts[ngram] += 1\n            if N > 1:\n                n1gram = tuple(sentence[i:i + N - 1])\n                n1gram_counts[n1gram] += 1\n    if N == 1:\n        all_tokens = [token for sentence in padded_corpus for token in sentence]\n        total_tokens = len(all_tokens)\n        n1gram_counts = Counter(all_tokens)\n        total_n1grams = total_tokens\n    log_prob = 0.0\n    for i in range(len(padded_query) - N + 1):\n        ngram = tuple(padded_query[i:i + N])\n        if N == 1:\n            n1gram = ngram[0]\n            count_n1gram = n1gram_counts[n1gram]\n        else:\n            n1gram = tuple(padded_query[i:i + N - 1])\n            count_n1gram = n1gram_counts[n1gram]\n        count_ngram = ngram_counts[ngram]\n        if count_n1gram == 0:\n            return float('-inf')\n        prob = count_ngram / count_n1gram\n        if prob == 0:\n            return float('-inf')\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 298, "completion_id": 6, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n\n    def generate_ngrams(tokens, n):\n        if n == 1:\n            return tokens\n        return zip(*[tokens[i:] for i in range(n)])\n    tokenized_corpus = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        tokenized_corpus.extend(tokens)\n    query_tokens = query.split()\n    if N > 1:\n        query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    if len(query_tokens) < N:\n        return float('-inf')\n    ngram_counts = Counter(generate_ngrams(tokenized_corpus, N))\n    n1gram_counts = Counter(generate_ngrams(tokenized_corpus, N - 1))\n    log_prob = 0.0\n    for ngram in generate_ngrams(query_tokens, N):\n        ngram_count = ngram_counts[ngram]\n        n1gram_count = n1gram_counts[ngram[:-1]]\n        if n1gram_count == 0 or ngram_count == 0:\n            return float('-inf')\n        prob = ngram_count / n1gram_count\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 298, "completion_id": 7, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError('N must be at least 1')\n    ngram_counts = Counter()\n    n1gram_counts = Counter()\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            n1gram = tuple(tokens[i:i + N - 1])\n            ngram_counts[ngram] += 1\n            n1gram_counts[n1gram] += 1\n    query_tokens = query.split()\n    if len(query_tokens) < N:\n        return float('-inf')\n    if N > 1:\n        query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        n1gram = tuple(query_tokens[i:i + N - 1])\n        if n1gram_counts[n1gram] == 0:\n            return float('-inf')\n        prob = ngram_counts[ngram] / n1gram_counts[n1gram]\n        if prob == 0:\n            return float('-inf')\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 298, "completion_id": 8, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    query_tokens = query.split()\n    if len(query_tokens) < N:\n        return float('-inf')\n    all_tokens = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        all_tokens.extend(tokens)\n    ngram_counts = defaultdict(int)\n    n1gram_counts = defaultdict(int)\n    for i in range(len(all_tokens) - N + 1):\n        ngram = tuple(all_tokens[i:i + N])\n        ngram_counts[ngram] += 1\n        if N > 1:\n            n1gram = tuple(all_tokens[i:i + N - 1])\n            n1gram_counts[n1gram] += 1\n    if N == 1:\n        total_tokens = len(all_tokens)\n    if N > 1:\n        query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        if N == 1:\n            count = ngram_counts[ngram]\n            prob = count / total_tokens\n        else:\n            n1gram = tuple(query_tokens[i:i + N - 1])\n            count = ngram_counts[ngram]\n            n1gram_count = n1gram_counts[n1gram]\n            if n1gram_count == 0:\n                return float('-inf')\n            prob = count / n1gram_count\n        if prob == 0:\n            return float('-inf')\n        log_prob += math.log(prob)\n    return round(log_prob, 4)\ncorpus = ['a b a', 'b a b']\nN = 1"}
{"task_id": 298, "completion_id": 9, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n\n    def tokenize_and_pad(sentence, N):\n        tokens = sentence.split()\n        if N > 1:\n            tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        return tokens\n    all_tokens = []\n    for sentence in corpus:\n        all_tokens.extend(tokenize_and_pad(sentence, N))\n    query_tokens = tokenize_and_pad(query, N)\n    ngram_counts = Counter(zip(*[all_tokens[i:] for i in range(N)]))\n    n1gram_counts = Counter(zip(*[all_tokens[i:] for i in range(N - 1)]))\n    log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        n1gram = tuple(query_tokens[i:i + N - 1])\n        count_ngram = ngram_counts[ngram]\n        count_n1gram = n1gram_counts[n1gram] if N > 1 else len(all_tokens)\n        if count_ngram == 0 or count_n1gram == 0:\n            return float('-inf')\n        log_prob += math.log(count_ngram / count_n1gram)\n    return round(log_prob, 4)\ncorpus = ['a b a', 'b a b']\nquery = 'a b'\nN = 1"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n, d) = X.shape\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = np.linalg.norm(X[i] - X[j])\n            weight = 1 / (1 + distance ** 2)\n            W[i, j] = weight\n            W[j, i] = weight\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    initial_centroids = E[:k]\n    centroids = initial_centroids.copy()\n    labels = np.zeros(n, dtype=int)\n    for _ in range(100):\n        for i in range(n):\n            distances = np.linalg.norm(E[i] - centroids, axis=1)\n            labels[i] = np.argmin(distances)\n        new_centroids = np.array([E[labels == j].mean(axis=0) for j in range(k)])\n        for j in range(k):\n            if len(E[labels == j]) == 0:\n                new_centroids[j] = E[np.random.choice(n)]\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    return labels.tolist()"}
{"task_id": 302, "completion_id": 1, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n, _) = X.shape\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j], 2))\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n\n    def k_means(E, k):\n        centroids = E[:k].copy()\n        assignments = np.zeros(n, dtype=int)\n        for _ in range(100):\n            new_assignments = np.argmin(np.sum((E[:, np.newaxis] - centroids) ** 2, axis=2), axis=1)\n            if np.array_equal(assignments, new_assignments):\n                break\n            assignments = new_assignments\n            for cluster_id in range(k):\n                cluster_points = E[assignments == cluster_id]\n                if len(cluster_points) == 0:\n                    centroids[cluster_id] = E[np.random.choice(n)]\n                else:\n                    centroids[cluster_id] = np.mean(cluster_points, axis=0)\n        return assignments.tolist()\n    return k_means(E, k)"}
{"task_id": 302, "completion_id": 2, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n, d) = X.shape\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n\n    def kmeans(data, k, max_iters=100):\n        (n_samples, _) = data.shape\n        centroids = data[:k]\n        labels = np.zeros(n_samples, dtype=int)\n        for _ in range(max_iters):\n            new_labels = np.argmin(np.linalg.norm(data[:, np.newaxis] - centroids, axis=2), axis=1)\n            if np.array_equal(new_labels, labels):\n                break\n            labels = new_labels\n            for i in range(k):\n                cluster_points = data[labels == i]\n                if len(cluster_points) == 0:\n                    centroids[i] = data[np.random.choice(n_samples)]\n                else:\n                    centroids[i] = np.mean(cluster_points, axis=0)\n        return labels.tolist()\n    cluster_labels = kmeans(E, k)\n    return cluster_labels"}
{"task_id": 302, "completion_id": 3, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n = X.shape[0]\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = np.linalg.norm(X[i] - X[j])\n            weight = 1 / (1 + distance)\n            W[i, j] = weight\n            W[j, i] = weight\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    idx = np.argsort(eigenvalues)\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    E = eigenvectors[:, 1:k]\n\n    def kmeans(data, k, max_iters=100):\n        (n_samples, _) = data.shape\n        centroids = data[:k].copy()\n        labels = np.zeros(n_samples, dtype=int)\n        for _ in range(max_iters):\n            for i in range(n_samples):\n                distances = np.linalg.norm(data[i] - centroids, axis=1)\n                labels[i] = np.argmin(distances)\n            new_centroids = np.zeros((k, data.shape[1]))\n            counts = np.zeros(k, dtype=int)\n            for i in range(n_samples):\n                new_centroids[labels[i]] += data[i]\n                counts[labels[i]] += 1\n            for i in range(k):\n                if counts[i] == 0:\n                    new_centroids[i] = data[np.random.choice(n_samples)]\n                else:\n                    new_centroids[i] /= counts[i]\n            if np.all(centroids == new_centroids):\n                break\n            centroids = new_centroids\n        return labels\n    cluster_labels = kmeans(E, k)\n    return cluster_labels.tolist()"}
{"task_id": 302, "completion_id": 4, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n, d) = X.shape\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j], ord=2))\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n\n    def k_means(E, k, max_iter=100):\n        centroids = E[:k].copy()\n        labels = np.zeros(n, dtype=int)\n        for _ in range(max_iter):\n            for i in range(n):\n                distances = np.linalg.norm(E[i] - centroids, axis=1)\n                labels[i] = np.argmin(distances)\n            new_centroids = np.array([E[labels == j].mean(axis=0) for j in range(k)])\n            for j in range(k):\n                if len(E[labels == j]) == 0:\n                    new_centroids[j] = E[np.random.choice(n)]\n            if np.allclose(centroids, new_centroids):\n                break\n            centroids = new_centroids\n        return labels.tolist()\n    return k_means(E, k)"}
{"task_id": 302, "completion_id": 5, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n_samples, _) = X.shape\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eig(L)\n    sorted_indices = np.argsort(eigenvalues)\n    E = eigenvectors[:, sorted_indices[:k]]\n\n    def kmeans(data, k, initial_centroids):\n        centroids = np.array(initial_centroids)\n        labels = np.zeros(data.shape[0], dtype=int)\n        for _ in range(100):\n            for i in range(data.shape[0]):\n                distances = np.linalg.norm(data[i] - centroids, axis=1)\n                labels[i] = np.argmin(distances)\n            new_centroids = np.array([data[labels == j].mean(axis=0) for j in range(k)])\n            for j in range(k):\n                if data[labels == j].shape[0] == 0:\n                    new_centroids[j] = data[np.random.choice(data.shape[0])]\n            if np.all(centroids == new_centroids):\n                break\n            centroids = new_centroids\n        return labels\n    cluster_labels = kmeans(E, k, E[:k])\n    return cluster_labels.tolist()"}
{"task_id": 302, "completion_id": 6, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n, d) = X.shape\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            w_ij = 1 / (1 + np.linalg.norm(X[i] - X[j], 2))\n            W[i, j] = w_ij\n            W[j, i] = w_ij\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigen_values, eigen_vectors) = np.linalg.eig(L)\n    idx = np.argsort(eigen_values)\n    eigen_values = eigen_values[idx]\n    eigen_vectors = eigen_vectors[:, idx]\n    E = eigen_vectors[:, :k]\n    centroids = E[:k]\n    labels = np.zeros(n, dtype=int)\n    for _ in range(100):\n        for i in range(n):\n            distances = np.linalg.norm(E[i] - centroids, axis=1)\n            labels[i] = np.argmin(distances)\n        new_centroids = np.zeros((k, k))\n        counts = np.zeros(k)\n        for i in range(n):\n            new_centroids[labels[i]] += E[i]\n            counts[labels[i]] += 1\n        for j in range(k):\n            if counts[j] == 0:\n                new_centroids[j] = E[np.random.choice(n)]\n            else:\n                new_centroids[j] /= counts[j]\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    return labels.tolist()"}
{"task_id": 302, "completion_id": 7, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n, _) = X.shape\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            weight = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n            W[i, j] = weight\n            W[j, i] = weight\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    E = E / np.linalg.norm(E, axis=1, keepdims=True)\n\n    def kmeans(data, k, initial_centroids):\n        centroids = initial_centroids\n        labels = np.zeros(data.shape[0], dtype=int)\n        for iteration in range(100):\n            prev_labels = labels.copy()\n            for (i, point) in enumerate(data):\n                distances = np.linalg.norm(point - centroids, axis=1)\n                labels[i] = np.argmin(distances)\n            for label in range(k):\n                cluster_points = data[labels == label]\n                if cluster_points.shape[0] == 0:\n                    centroids[label] = data[np.random.choice(data.shape[0])]\n                else:\n                    centroids[label] = np.mean(cluster_points, axis=0)\n            if np.array_equal(labels, prev_labels):\n                break\n        return labels\n    initial_centroids = E[:k]\n    cluster_labels = kmeans(E, k, initial_centroids)\n    return cluster_labels.tolist()"}
{"task_id": 302, "completion_id": 8, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n, d) = X.shape\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eig(L)\n    sorted_indices = np.argsort(eigenvalues)\n    E = eigenvectors[:, sorted_indices[:k]]\n    centroids = E[:k].copy()\n    labels = np.zeros(n, dtype=int)\n    max_iter = 100\n    for _ in range(max_iter):\n        for i in range(n):\n            distances = np.linalg.norm(E[i] - centroids, axis=1)\n            labels[i] = np.argmin(distances)\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(k, dtype=int)\n        for i in range(n):\n            new_centroids[labels[i]] += E[i]\n            counts[labels[i]] += 1\n        for i in range(k):\n            if counts[i] == 0:\n                random_index = np.random.choice(n)\n                new_centroids[i] = E[random_index]\n                counts[i] = 1\n            else:\n                new_centroids[i] /= counts[i]\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids.copy()\n    return labels.tolist()"}
{"task_id": 302, "completion_id": 9, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n, _) = X.shape\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eig(L)\n    sorted_indices = np.argsort(eigenvalues)\n    E = eigenvectors[:, sorted_indices[:k]]\n    centroids = E[:k].copy()\n    labels = np.zeros(n, dtype=int)\n    for _ in range(100):\n        for i in range(n):\n            distances = np.linalg.norm(E[i] - centroids, axis=1)\n            labels[i] = np.argmin(distances)\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(k, dtype=int)\n        for i in range(n):\n            new_centroids[labels[i]] += E[i]\n            counts[labels[i]] += 1\n        for j in range(k):\n            if counts[j] == 0:\n                new_centroids[j] = E[np.random.choice(n)]\n            else:\n                new_centroids[j] /= counts[j]\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    return labels.tolist()"}
{"task_id": 303, "completion_id": 0, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_index = max(ix - 1, 0)\n    (prev_label, prev_mine) = params[prev_index]\n    (curr_label, curr_mine) = params[ix]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'"}
{"task_id": 303, "completion_id": 1, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_label, prev_mine) = params[prev_ix]\n    (curr_label, curr_mine) = params[ix]\n    debug_output = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return debug_output"}
{"task_id": 303, "completion_id": 2, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_label, prev_mine) = params[prev_ix]\n    (curr_label, curr_mine) = params[ix]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\nMine [{curr_label}]:\\n{curr_mine}\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'"}
{"task_id": 303, "completion_id": 3, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_label, prev_mine) = params[prev_ix]\n    (curr_label, curr_mine) = params[ix]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'"}
{"task_id": 303, "completion_id": 4, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_label, prev_mine) = params[prev_ix]\n    (curr_label, curr_mine) = params[ix]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\nMine [{curr_label}]:\\n{curr_mine}\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'"}
{"task_id": 303, "completion_id": 5, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_label, prev_mine) = params[prev_ix]\n    (curr_label, curr_mine) = params[ix]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'"}
{"task_id": 303, "completion_id": 6, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_label, prev_mine) = params[prev_ix]\n    (curr_label, curr_mine) = params[ix]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'"}
{"task_id": 303, "completion_id": 7, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_mine, prev_label) = params[prev_ix]\n    (curr_mine, curr_label) = params[ix]\n    debug_str = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\nMine [{curr_label}]:\\n{curr_mine}\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return debug_str"}
{"task_id": 303, "completion_id": 8, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_label, prev_mine) = params[prev_ix]\n    (curr_label, curr_mine) = params[ix]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'"}
{"task_id": 303, "completion_id": 9, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_label, prev_mine) = params[prev_ix]\n    (curr_label, curr_mine) = params[ix]\n    debug_str = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\nMine [{curr_label}]:\\n{curr_mine}\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return debug_str"}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    (N, M) = X.shape\n    if V is None:\n        V_inv = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V_inv = V * np.eye(M)\n    elif isinstance(V, (list, tuple, np.ndarray)) and len(V) == M:\n        V_inv = np.diag(V)\n    else:\n        V_inv = V\n    XTX = X.T @ X\n    V_inv_mu = V_inv @ np.array(mu) if isinstance(mu, (int, float)) else V_inv @ np.array(mu)\n    XTy = X.T @ y\n    Sigma_b = np.linalg.inv(V_inv + XTX)\n    mu_b = Sigma_b @ (V_inv_mu + XTy)\n    return np.round(mu_b, 4).tolist()"}
{"task_id": 304, "completion_id": 1, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    (N, M) = X.shape\n    if V is None:\n        V_inv = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V_inv = V * np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V_inv = np.diag(V)\n    elif isinstance(V, np.ndarray) and V.ndim == 2:\n        V_inv = V\n    else:\n        raise ValueError('V must be None, a scalar, a list/tuple, or a 2D array.')\n    V_inv = np.linalg.inv(V_inv)\n    if isinstance(mu, (int, float)):\n        mu = np.full(M, mu)\n    XTX = X.T @ X\n    Sigma_b_inv = V_inv + XTX\n    Sigma_b = np.linalg.inv(Sigma_b_inv)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    return [round(coef, 4) for coef in mu_b]"}
{"task_id": 304, "completion_id": 2, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.column_stack((np.ones(X.shape[0]), X))\n    (N, M) = X.shape\n    if isinstance(mu, (int, float)):\n        mu = np.full(M, mu, dtype=float)\n    else:\n        mu = np.array(mu, dtype=float)\n    if V is None:\n        V_inv = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V_inv = np.eye(M) / V\n    elif isinstance(V, (list, tuple, np.ndarray)):\n        V = np.array(V, dtype=float)\n        if V.ndim == 1:\n            V_inv = np.diag(1.0 / V)\n        elif V.ndim == 2 and V.shape[0] == V.shape[1] == M:\n            V_inv = np.linalg.inv(V)\n        else:\n            raise ValueError('V must be scalar, 1-D sequence, or square 2-D array of size MxM.')\n    else:\n        raise ValueError('V must be None, scalar, or sequence of size M.')\n    XTX = X.T @ X\n    XTy = X.T @ y\n    Sigma_b_inv = V_inv + XTX\n    Sigma_b = np.linalg.inv(Sigma_b_inv)\n    mu_b = Sigma_b @ (V_inv @ mu + XTy)\n    return [round(coef, 4) for coef in mu_b]"}
{"task_id": 304, "completion_id": 3, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    (N, M) = X.shape\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    else:\n        mu = np.array(mu)\n    if V is None:\n        V_inv = np.eye(M)\n    elif np.isscalar(V):\n        V_inv = V * np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V_inv = np.diag(V)\n    else:\n        V_inv = V\n    XTX = X.T @ X\n    Sigma_b = np.linalg.inv(V_inv + XTX)\n    XTy = X.T @ y\n    mu_b = Sigma_b @ (V_inv @ mu + XTy)\n    return [round(coef, 4) for coef in mu_b]"}
{"task_id": 304, "completion_id": 4, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n    M = X.shape[1]\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    if V is None:\n        V = np.eye(M)\n    elif np.isscalar(V):\n        V = V * np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    XTX = X.T @ X\n    Sigma_b_inv = V_inv + XTX\n    Sigma_b = np.linalg.inv(Sigma_b_inv)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    return [round(coeff, 4) for coeff in mu_b]"}
{"task_id": 304, "completion_id": 5, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.column_stack((np.ones(X.shape[0]), X))\n    (N, M) = X.shape\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    mu = np.asarray(mu)\n    if V is None:\n        V_inv = np.eye(M)\n    elif np.isscalar(V):\n        V_inv = V * np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V_inv = np.diag(V)\n    else:\n        V_inv = np.linalg.inv(V)\n    XTX = X.T @ X\n    XTy = X.T @ y\n    Sigma_b = np.linalg.inv(V_inv + XTX)\n    mu_b = Sigma_b @ (V_inv @ mu + XTy)\n    return [round(coef, 4) for coef in mu_b.tolist()]"}
{"task_id": 304, "completion_id": 6, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    M = X.shape[1]\n    if isinstance(mu, (int, float)):\n        mu = np.full(M, mu)\n    else:\n        mu = np.array(mu)\n    if V is None:\n        V_inv = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V_inv = np.eye(M) / V\n    elif isinstance(V, (list, tuple)):\n        V_inv = np.diag(1.0 / np.array(V))\n    else:\n        V_inv = np.linalg.inv(V)\n    XTX = X.T @ X\n    Sigma_b = np.linalg.inv(V_inv + XTX)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    return [round(coef, 4) for coef in mu_b]"}
{"task_id": 304, "completion_id": 7, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    (N, M) = X.shape\n    if V is None:\n        V_inv = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V_inv = np.eye(M) * (1 / V)\n    elif isinstance(V, (list, tuple)):\n        V_inv = np.diag(1 / np.array(V))\n    elif isinstance(V, np.ndarray) and V.ndim == 2:\n        V_inv = np.linalg.inv(V)\n    else:\n        raise ValueError('Invalid type for V')\n    if isinstance(mu, (int, float)):\n        mu = np.full(M, mu)\n    elif isinstance(mu, (list, tuple, np.ndarray)):\n        mu = np.array(mu)\n    else:\n        raise ValueError('Invalid type for mu')\n    if mu.shape[0] != M:\n        raise ValueError('Length of mu does not match number of features')\n    Sigma_b = np.linalg.inv(V_inv + X.T @ X)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    return [round(coef, 4) for coef in mu_b]"}
{"task_id": 304, "completion_id": 8, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.column_stack((np.ones(X.shape[0]), X))\n    M = X.shape[1]\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    if V is None:\n        V_inv = np.eye(M)\n    elif np.isscalar(V):\n        V_inv = 1 / V * np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V_inv = np.diag(1 / np.array(V))\n    else:\n        V_inv = np.linalg.inv(V)\n    XTX = X.T @ X\n    Sigma_b = np.linalg.inv(V_inv + XTX)\n    XTy = X.T @ y\n    mu_b = Sigma_b @ (V_inv @ mu + XTy)\n    return [round(coef, 4) for coef in mu_b.tolist()]"}
{"task_id": 304, "completion_id": 9, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.column_stack((np.ones(X.shape[0]), X))\n    (N, M) = X.shape\n    if V is None:\n        V = np.eye(M)\n    elif np.isscalar(V):\n        V = V * np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    else:\n        V = np.array(V)\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    else:\n        mu = np.array(mu)\n    V_inv = np.linalg.inv(V)\n    XTX = X.T @ X\n    Sigma_b = np.linalg.inv(V_inv + XTX)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    return [round(coef, 4) for coef in mu_b]"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10 ** (mel / 2595) - 1)\n    mel_points = np.linspace(hz_to_mel(min_freq), hz_to_mel(max_freq), n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        f_left = hz_points[i]\n        f_center = hz_points[i + 1]\n        f_right = hz_points[i + 2]\n        for k in range(N // 2 + 1):\n            f_k = k * fs / N\n            if f_left < f_k <= f_center:\n                filterbank[i, k] = (f_k - f_left) / (f_center - f_left)\n            elif f_center < f_k < f_right:\n                filterbank[i, k] = (f_right - f_k) / (f_right - f_center)\n        if normalize:\n            if f_right != f_left:\n                filterbank[i] *= 2 / (f_right - f_left)\n    filterbank = np.round(filterbank, 4).tolist()\n    return filterbank"}
{"task_id": 308, "completion_id": 1, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10 ** (mel / 2595) - 1)\n    mel_min = hz_to_mel(min_freq)\n    mel_max = hz_to_mel(max_freq)\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n    n_bins = N // 2 + 1\n    F = np.zeros((n_filters, n_bins))\n    for i in range(n_filters):\n        f_left = hz_points[i]\n        f_center = hz_points[i + 1]\n        f_right = hz_points[i + 2]\n        for k in range(n_bins):\n            f_k = k * fs / N\n            if f_left < f_k <= f_center:\n                F[i, k] = (f_k - f_left) / (f_center - f_left)\n            elif f_center < f_k <= f_right:\n                F[i, k] = (f_right - f_k) / (f_right - f_center)\n            if normalize:\n                F[i, k] *= 2 / (f_right - f_left)\n    F_rounded = np.round(F, 4).tolist()\n    return F_rounded"}
{"task_id": 308, "completion_id": 2, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(m):\n        return 700 * (10 ** (m / 2595) - 1)\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        (left, center, right) = hz_points[i:i + 3]\n        for k in range(N // 2 + 1):\n            freq = k * fs / N\n            if left < freq < center:\n                filterbank[i][k] = (freq - left) / (center - left)\n            elif center < freq < right:\n                filterbank[i][k] = (right - freq) / (right - center)\n        if normalize:\n            filterbank[i] *= 2 / (hz_points[i + 2] - hz_points[i])\n    filterbank = [[round(val, 4) for val in row] for row in filterbank]\n    return filterbank"}
{"task_id": 308, "completion_id": 3, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10 ** (mel / 2595) - 1)\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        f_left = hz_points[i]\n        f_center = hz_points[i + 1]\n        f_right = hz_points[i + 2]\n        for k in range(N // 2 + 1):\n            f_k = k * fs / N\n            if f_left < f_k < f_center:\n                filterbank[i, k] = (f_k - f_left) / (f_center - f_left)\n            elif f_center < f_k < f_right:\n                filterbank[i, k] = (f_right - f_k) / (f_right - f_center)\n        if normalize:\n            area = hz_to_mel(f_right) - hz_to_mel(f_left)\n            filterbank[i] *= 2 / area\n    filterbank = [[round(value, 4) for value in row] for row in filterbank.tolist()]\n    return filterbank"}
{"task_id": 308, "completion_id": 4, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10 ** (mel / 2595) - 1)\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        left = hz_points[i]\n        center = hz_points[i + 1]\n        right = hz_points[i + 2]\n        for k in range(N // 2 + 1):\n            f_k = k * fs / N\n            if left < f_k < center:\n                filterbank[i, k] = (f_k - left) / (center - left)\n            elif center < f_k < right:\n                filterbank[i, k] = (right - f_k) / (right - center)\n        if normalize:\n            filterbank[i] = 2 / (hz_points[i + 2] - hz_points[i]) * filterbank[i]\n    filterbank = np.round(filterbank, 4).tolist()\n    return filterbank"}
{"task_id": 308, "completion_id": 5, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(m):\n        return 700 * (10 ** (m / 2595) - 1)\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        f_left = hz_points[i]\n        f_center = hz_points[i + 1]\n        f_right = hz_points[i + 2]\n        for k in range(N // 2 + 1):\n            f_k = k * fs / N\n            if f_left < f_k < f_center:\n                filterbank[i, k] = (f_k - f_left) / (f_center - f_left)\n            elif f_center <= f_k < f_right:\n                filterbank[i, k] = (f_right - f_k) / (f_right - f_center)\n        if normalize:\n            filterbank[i] *= 2 / (f_right - f_left)\n    filterbank = np.round(filterbank, 4).tolist()\n    return filterbank"}
{"task_id": 308, "completion_id": 6, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10 ** (mel / 2595) - 1)\n    mel_min = hz_to_mel(min_freq)\n    mel_max = hz_to_mel(max_freq)\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n    freqs = mel_to_hz(mel_points)\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        f_left = freqs[i]\n        f_center = freqs[i + 1]\n        f_right = freqs[i + 2]\n        for k in range(N // 2 + 1):\n            f_k = k * fs / N\n            if f_left < f_k <= f_center:\n                filterbank[i, k] = (f_k - f_left) / (f_center - f_left)\n            elif f_center < f_k <= f_right:\n                filterbank[i, k] = (f_right - f_k) / (f_right - f_center)\n        if normalize:\n            filterbank[i, :] *= 2 / (f_right - f_left)\n    filterbank = np.round(filterbank, 4).tolist()\n    return filterbank"}
{"task_id": 308, "completion_id": 7, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10 ** (mel / 2595) - 1)\n    mel_points = np.linspace(hz_to_mel(min_freq), hz_to_mel(max_freq), n_filters + 2)\n    freqs = mel_to_hz(mel_points)\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        f_left = freqs[i]\n        f_center = freqs[i + 1]\n        f_right = freqs[i + 2]\n        k_left = int(np.floor(f_left * (N // 2 + 1) / fs))\n        k_center = int(np.floor(f_center * (N // 2 + 1) / fs))\n        k_right = int(np.floor(f_right * (N // 2 + 1) / fs))\n        for k in range(k_left, k_center + 1):\n            if k_right - k_left == 0:\n                filterbank[i, k] = 0\n            else:\n                filterbank[i, k] = (k - k_left) / (k_center - k_left)\n        for k in range(k_center, k_right + 1):\n            if k_right - k_left == 0:\n                filterbank[i, k] = 0\n            else:\n                filterbank[i, k] = (k_right - k) / (k_right - k_center)\n        if normalize:\n            filterbank[i, :] *= 2 / (freqs[i + 2] - freqs[i])\n    filterbank = [[round(float(val), 4) for val in row] for row in filterbank]\n    return filterbank"}
{"task_id": 308, "completion_id": 8, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(m):\n        return 700 * (10 ** (m / 2595) - 1)\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n    n_bins = N // 2 + 1\n    F = np.zeros((n_filters, n_bins))\n    for i in range(n_filters):\n        f_left = hz_points[i]\n        f_center = hz_points[i + 1]\n        f_right = hz_points[i + 2]\n        il = int(np.ceil(N * f_left / fs))\n        ic = int(np.floor(N * f_center / fs))\n        ir = int(np.floor(N * f_right / fs))\n        for k in range(il, ic + 1):\n            F[i][k] = (k * fs / N - f_left) / (f_center - f_left)\n        for k in range(ic + 1, ir + 1):\n            F[i][k] = (f_right - k * fs / N) / (f_right - f_center)\n    if normalize:\n        for i in range(n_filters):\n            filter_area = np.sum(F[i])\n            F[i] *= 2 / (hz_points[i + 2] - hz_points[i]) / filter_area\n    F_rounded = [[round(w, 4) for w in row] for row in F]\n    return F_rounded"}
{"task_id": 308, "completion_id": 9, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10 ** (mel / 2595) - 1)\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        (left_hz, center_hz, right_hz) = (hz_points[i], hz_points[i + 1], hz_points[i + 2])\n        left_bin = int(np.floor(left_hz * (N / fs)))\n        center_bin = int(np.floor(center_hz * (N / fs)))\n        right_bin = int(np.floor(right_hz * (N / fs)))\n        for k in range(left_bin, center_bin):\n            filterbank[i, k] = (k * fs / N - left_hz) / (center_hz - left_hz)\n        for k in range(center_bin, right_bin + 1):\n            filterbank[i, k] = (right_hz - k * fs / N) / (right_hz - center_hz)\n    if normalize:\n        for i in range(n_filters):\n            if filterbank[i].sum() > 0:\n                filterbank[i] *= 2 / (hz_points[i + 2] - hz_points[i])\n    filterbank_list = filterbank.tolist()\n    filterbank_list = [[round(value, 4) for value in row] for row in filterbank_list]\n    return filterbank_list"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    n = np.arange(window_len if symmetric else window_len + 1)\n    bh_window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    if not symmetric:\n        bh_window = bh_window[:-1]\n    return [round(x, 4) for x in bh_window]"}
{"task_id": 312, "completion_id": 1, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    n = np.arange(0, window_len)\n    bh_window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    if not symmetric:\n        bh_window = bh_window[:-1]\n    return [round(x, 4) for x in bh_window]"}
{"task_id": 312, "completion_id": 2, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    n = np.arange(window_len) if symmetric else np.arange(window_len + 1)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    if not symmetric:\n        window = window[:-1]\n    return [round(w, 4) for w in window]"}
{"task_id": 312, "completion_id": 3, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if symmetric:\n        window = [a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N) for n in range(window_len)]\n    else:\n        window = [a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N) for n in range(window_len + 1)]\n        window = window[:-1]\n    return [round(x, 4) for x in window]"}
{"task_id": 312, "completion_id": 4, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    if not symmetric:\n        window = window[:-1]\n    return [round(coeff, 4) for coeff in window]"}
{"task_id": 312, "completion_id": 5, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    if not symmetric:\n        window = window[:-1]\n    return [round(val, 4) for val in window]"}
{"task_id": 312, "completion_id": 6, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    if not symmetric:\n        window = window[:-1]\n    return [round(x, 4) for x in window]"}
{"task_id": 312, "completion_id": 7, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    n = np.arange(0, window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    if not symmetric:\n        window = window[:-1]\n    return [round(w, 4) for w in window]"}
{"task_id": 312, "completion_id": 8, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    n = np.arange(window_len)\n    if not symmetric:\n        n = np.arange(window_len + 1)[:-1]\n    bh_window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    return [round(coeff, 4) for coeff in bh_window]"}
{"task_id": 312, "completion_id": 9, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    if not symmetric:\n        window = window[:-1]\n    return [round(x, 4) for x in window]"}
{"task_id": 313, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Compute the digamma function using a recursive approach and asymptotic expansion.\"\"\"\n    if x < 6:\n        return digamma(x + 1) - 1 / x\n    return math.log(x) - 0.5 / x - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma_d = gamma[d]\n    psi_gamma_dt = digamma(gamma_d[t])\n    psi_sum_gamma_d = digamma(sum(gamma_d))\n    result = psi_gamma_dt - psi_sum_gamma_d\n    return round(result, 4)"}
{"task_id": 313, "completion_id": 1, "solution": "import math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n\n    def digamma(x):\n        shift = 6.0\n        result = 0.0\n        for _ in range(int(shift - x)):\n            result -= 1.0 / (x + _)\n        x += shift\n        result += math.log(x) - 0.5 / x - 1.0 / (12 * x ** 2) + 1.0 / (120 * x ** 4) - 1.0 / (252 * x ** 6)\n        return result\n    gamma_dt = gamma[d, t]\n    sum_gamma_d = np.sum(gamma[d, :])\n    expectation = digamma(gamma_dt) - digamma(sum_gamma_d)\n    return round(expectation, 4)"}
{"task_id": 313, "completion_id": 2, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Compute the digamma function using a recursive method for small x and asymptotic expansion for large x.\"\"\"\n    while x < 6:\n        x += 1\n        result = -1 / x\n    else:\n        result = 0\n    result += math.log(x) - 0.5 / x - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n    return result\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma_d = gamma[d]\n    sum_gamma_d = sum(gamma_d)\n    psi_gamma_dt = digamma(gamma_d[t])\n    psi_sum_gamma_d = digamma(sum_gamma_d)\n    result = psi_gamma_dt - psi_sum_gamma_d\n    return round(result, 4)"}
{"task_id": 313, "completion_id": 3, "solution": "import math\nimport numpy as np\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n\n    def digamma(x):\n        \"\"\"Compute the digamma function using asymptotic expansion and recursion.\"\"\"\n        while x < 6:\n            digamma_result = digamma(x + 1) - 1 / x\n            x += 1\n            return digamma_result\n        term1 = math.log(x)\n        term2 = -1 / (2 * x)\n        term3 = -1 / (12 * x ** 2)\n        term4 = 1 / (120 * x ** 4)\n        term5 = -1 / (252 * x ** 6)\n        return term1 + term2 + term3 + term4 + term5\n    if not isinstance(gamma, np.ndarray):\n        gamma = np.array(gamma)\n    gamma_dt = gamma[d, t]\n    sum_gamma_d = np.sum(gamma[d, :])\n    result = digamma(gamma_dt) - digamma(sum_gamma_d)\n    return round(result, 4)"}
{"task_id": 313, "completion_id": 4, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Compute the digamma function \u03c8(x) using recursion and asymptotic expansion.\"\"\"\n    while x < 6:\n        x += 1\n        result = -1 / x\n    else:\n        result = 0\n    result += math.log(x) - 0.5 / x - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n    return result\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    if not isinstance(gamma, np.ndarray):\n        gamma = np.array(gamma)\n    psi_gamma_dt = digamma(gamma[d, t])\n    sum_gamma_d = np.sum(gamma[d, :])\n    psi_sum_gamma_d = digamma(sum_gamma_d)\n    expected_log = psi_gamma_dt - psi_sum_gamma_d\n    return round(expected_log, 4)"}
{"task_id": 313, "completion_id": 5, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Compute the digamma function using recursion and asymptotic expansion.\"\"\"\n    if x < 6:\n        return digamma(x + 1) - 1 / x\n    term1 = math.log(x)\n    term2 = -1 / (2 * x)\n    term3 = -1 / (12 * x ** 2)\n    term4 = 1 / (120 * x ** 4)\n    term5 = -1 / (252 * x ** 6)\n    return term1 + term2 + term3 + term4 + term5\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma_d = gamma[d]\n    gamma_dt = gamma_d[t]\n    sum_gamma_d = sum(gamma_d)\n    result = digamma(gamma_dt) - digamma(sum_gamma_d)\n    return round(result, 4)"}
{"task_id": 313, "completion_id": 6, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Compute the digamma function using recursion and asymptotic expansion.\"\"\"\n    while x < 6:\n        x += 1\n        result = -1 / x\n    else:\n        result = 0\n    result += math.log(x) - 0.5 / x - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n    return result\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    if not isinstance(gamma, np.ndarray):\n        gamma = np.array(gamma)\n    gamma_d = gamma[d, :]\n    gamma_dt = gamma_d[t]\n    sum_gamma_d = np.sum(gamma_d)\n    expectation = digamma(gamma_dt) - digamma(sum_gamma_d)\n    return round(expectation, 4)"}
{"task_id": 313, "completion_id": 7, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Compute the digamma function using recursion and asymptotic expansion.\"\"\"\n    while x < 6:\n        x += 1\n        result = -1 / x\n    else:\n        result = 0\n    result += math.log(x) - 0.5 / x - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n    return result\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma = np.asarray(gamma)\n    psi_gamma_dt = digamma(gamma[d, t])\n    psi_sum_gamma_d = digamma(np.sum(gamma[d, :]))\n    expected_log = psi_gamma_dt - psi_sum_gamma_d\n    return round(expected_log, 4)"}
{"task_id": 313, "completion_id": 8, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Compute the digamma function \u03c8(x) using recursion and asymptotic expansion.\"\"\"\n    while x < 6:\n        x += 1\n        result = -1 / x\n    else:\n        result = 0\n    result += math.log(x) - 0.5 / x - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n    return result\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma_d = gamma[d]\n    gamma_dt = gamma_d[t]\n    sum_gamma_d = sum(gamma_d)\n    psi_gamma_dt = digamma(gamma_dt)\n    psi_sum_gamma_d = digamma(sum_gamma_d)\n    expectation = psi_gamma_dt - psi_sum_gamma_d\n    return round(expectation, 4)"}
{"task_id": 313, "completion_id": 9, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Compute the digamma function \u03c8(x) using recursion and asymptotic expansion.\"\"\"\n    while x < 6:\n        x += 1\n        result = -1 / x\n    else:\n        result = 0\n    result += math.log(x) - 0.5 / x - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n    return result\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma_d = gamma[d]\n    psi_gamma_dt = digamma(gamma_d[t])\n    psi_sum_gamma_d = digamma(sum(gamma_d))\n    result = psi_gamma_dt - psi_sum_gamma_d\n    return round(result, 4)"}
{"task_id": 317, "completion_id": 0, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    (curr_prediction, curr_label) = params[ix]\n    prev_gold = golds.get(prev_label, 'Unknown')\n    curr_gold = golds.get(curr_label, 'Unknown')\n    report = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return report"}
{"task_id": 317, "completion_id": 1, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    (curr_prediction, curr_label) = params[ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    report = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return report"}
{"task_id": 317, "completion_id": 2, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    (curr_prediction, curr_label) = params[ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    report = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return report"}
{"task_id": 317, "completion_id": 3, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    (curr_prediction, curr_label) = params[ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    report = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return report"}
{"task_id": 317, "completion_id": 4, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    curr_ix = ix\n    (prev_prediction, prev_label) = params[prev_ix]\n    (curr_prediction, curr_label) = params[curr_ix]\n    prev_gold = golds.get(prev_label, 'N/A')\n    curr_gold = golds.get(curr_label, 'N/A')\n    report = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return report"}
{"task_id": 317, "completion_id": 5, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    (curr_prediction, curr_label) = params[ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    report = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return report"}
{"task_id": 317, "completion_id": 6, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    (curr_prediction, curr_label) = params[ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    report = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------\\n'\n    return report"}
{"task_id": 317, "completion_id": 7, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    (curr_prediction, curr_label) = params[ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    report = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return report"}
{"task_id": 317, "completion_id": 8, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    header = '------------------------- DEBUG -------------------------\\n'\n    footer = '----------------------- END DEBUG -----------------------\\n'\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    prev_gold = golds.get(prev_label, '')\n    (curr_prediction, curr_label) = params[ix]\n    curr_gold = golds.get(curr_label, '')\n    prev_block = f'Mine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n'\n    curr_block = f'Mine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}'\n    return header + prev_block + curr_block + warn_str + footer\nparams = [('This is my first prediction', 'label1'), ('This is my second prediction', 'label2'), ('This is my third prediction', 'label3')]\nix = 1\nwarn_str = ' (WARNING: mismatch)'"}
{"task_id": 317, "completion_id": 9, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    (curr_prediction, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------\\n'"}
{"task_id": 318, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        (best_feature, best_threshold, best_polarity) = (None, None, None)\n        for feature_i in range(n_features):\n            feature_values = np.sort(np.unique(X_train[:, feature_i]))\n            for t in feature_values:\n                for p in [-1, 1]:\n                    predictions = np.ones(n_samples)\n                    if p == 1:\n                        predictions[X_train[:, feature_i] < t] = -1\n                    else:\n                        predictions[X_train[:, feature_i] >= t] = -1\n                    missclassified = [int(y != p) for (y, p) in zip(y_train, predictions)]\n                    error = sum((w * m for (w, m) in zip(sample_weights, missclassified)))\n                    if error > 0.5:\n                        error = 1.0 - error\n                        p *= -1\n                    if error < min_error:\n                        min_error = error\n                        best_feature = feature_i\n                        best_threshold = t\n                        best_polarity = p\n        alpha = 0.5 * math.log((1.0 - min_error) / (min_error + 1e-10))\n        alphas.append(alpha)\n        for (i, y) in enumerate(y_train):\n            sample_weights[i] *= math.exp(-alpha * y * predictions[i])\n        sample_weights /= sample_weights.sum()\n        stumps.append({'feature': best_feature, 'threshold': best_threshold, 'polarity': best_polarity})\n    n_test_samples = X_test.shape[0]\n    final_predictions = np.zeros(n_test_samples)\n    for (alpha, stump) in zip(alphas, stumps):\n        predictions = np.ones(n_test_samples)\n        if stump['polarity'] == 1:\n            predictions[X_test[:, stump['feature']] < stump['threshold']] = -1\n        else:\n            predictions[X_test[:, stump['feature']] >= stump['threshold']] = -1\n        final_predictions += alpha * predictions\n    return [1 if pred >= 0 else -1 for pred in final_predictions]"}
{"task_id": 318, "completion_id": 1, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    for _ in range(n_estimators):\n        best_stump = {'feature': None, 'threshold': None, 'polarity': None}\n        min_error = float('inf')\n        for feature in range(n_features):\n            thresholds = np.sort(np.unique(X_train[:, feature]))\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = polarity * np.where(X_train[:, feature] >= threshold, 1, -1)\n                    error = np.sum(weights[predictions != y_train])\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {'feature': feature, 'threshold': threshold, 'polarity': polarity}\n        epsilon = max(min_error, 1e-10)\n        alpha = 0.5 * math.log((1 - epsilon) / epsilon)\n        weights *= np.exp(-alpha * y_train * np.where(X_train[:, best_stump['feature']] >= best_stump['threshold'], best_stump['polarity'], -best_stump['polarity']))\n        weights /= np.sum(weights)\n        stumps.append((alpha, best_stump))\n    predictions_test = np.zeros(X_test.shape[0])\n    for (alpha, stump) in stumps:\n        (feature, threshold, polarity) = (stump['feature'], stump['threshold'], stump['polarity'])\n        predictions_test += alpha * polarity * np.where(X_test[:, feature] >= threshold, 1, -1)\n    return [1 if pred >= 0 else -1 for pred in predictions_test]"}
{"task_id": 318, "completion_id": 2, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = polarity * np.sign(X_train[:, feature] - threshold)\n                    weighted_error = np.sum(weights[predictions != y_train])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n        alpha = 0.5 * math.log((1 - min_error) / max(min_error, 1e-10))\n        stumps.append((best_feature, best_threshold, best_polarity))\n        alphas.append(alpha)\n        predictions = best_polarity * np.sign(X_train[:, best_feature] - best_threshold)\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n    final_predictions = np.zeros(X_test.shape[0])\n    for (alpha, (feature, threshold, polarity)) in zip(alphas, stumps):\n        final_predictions += alpha * polarity * np.sign(X_test[:, feature] - threshold)\n    return [1 if pred >= 0 else -1 for pred in final_predictions]"}
{"task_id": 318, "completion_id": 3, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    alpha = []\n    for _ in range(n_estimators):\n        stump = {}\n        min_error = float('inf')\n        for feature_i in range(n_features):\n            feature_values = X_train[:, feature_i]\n            threshold_values = np.unique(feature_values)\n            for threshold in threshold_values:\n                for polarity in [-1, 1]:\n                    predictions = np.ones(n_samples)\n                    predictions[feature_values * polarity < threshold * polarity] = -1\n                    error = weights[y_train != predictions].sum()\n                    if error > 0.5:\n                        error = 1 - error\n                        polarity = -polarity\n                    if error < min_error:\n                        min_error = error\n                        stump['feature_i'] = feature_i\n                        stump['threshold'] = threshold\n                        stump['polarity'] = polarity\n        epsilon = min_error\n        a = 0.5 * math.log((1.0 - epsilon) / (epsilon + 1e-10))\n        alpha.append(a)\n        predictions = np.ones(n_samples)\n        feature_values = X_train[:, stump['feature_i']]\n        predictions[feature_values * stump['polarity'] < stump['threshold'] * stump['polarity']] = -1\n        weights *= np.exp(-a * y_train * predictions)\n        weights /= weights.sum()\n        stumps.append(stump)\n    n_test_samples = X_test.shape[0]\n    final_predictions = np.zeros(n_test_samples)\n    for (a, stump) in zip(alpha, stumps):\n        predictions = np.ones(n_test_samples)\n        feature_values = X_test[:, stump['feature_i']]\n        predictions[feature_values * stump['polarity'] < stump['threshold'] * stump['polarity']] = -1\n        final_predictions += a * predictions\n    return [1 if pred >= 0 else -1 for pred in final_predictions]"}
{"task_id": 318, "completion_id": 4, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    stumps = []\n    stump_errors = []\n    stump_weights = []\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        best_predictions = None\n        for feature_i in range(n_features):\n            feature_values = X_train[:, feature_i]\n            thresholds = np.unique(feature_values)\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[feature_values < threshold] = -1\n                    else:\n                        predictions[feature_values >= threshold] = -1\n                    error = sample_weights[predictions != y_train].sum()\n                    if error < min_error:\n                        min_error = error\n                        best_feature = feature_i\n                        best_threshold = threshold\n                        best_polarity = polarity\n                        best_predictions = predictions\n        alpha = 0.5 * math.log((1 - min_error) / min_error)\n        stump = {'feature': best_feature, 'threshold': best_threshold, 'polarity': best_polarity}\n        stumps.append(stump)\n        stump_errors.append(min_error)\n        stump_weights.append(alpha)\n        sample_weights *= np.where(best_predictions == y_train, 1, np.exp(alpha))\n        sample_weights /= sample_weights.sum()\n    final_predictions = np.zeros(X_test.shape[0])\n    for (stump, alpha) in zip(stumps, stump_weights):\n        feature_i = stump['feature']\n        threshold = stump['threshold']\n        polarity = stump['polarity']\n        predictions = np.ones(X_test.shape[0])\n        if polarity == 1:\n            predictions[X_test[:, feature_i] < threshold] = -1\n        else:\n            predictions[X_test[:, feature_i] >= threshold] = -1\n        final_predictions += alpha * predictions\n    return [int(np.sign(pred)) for pred in final_predictions]"}
{"task_id": 318, "completion_id": 5, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    stump_weights = []\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_polarity = 1\n        best_threshold = 0\n        best_feature = 0\n        for feature in range(n_features):\n            feature_values = X_train[:, feature]\n            (thresholds, _) = np.unique(feature_values, return_index=True)\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.ones(n_samples)\n                    predictions[feature_values < threshold] = -1\n                    predictions *= polarity\n                    weighted_error = np.sum(weights[y_train != predictions])\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_polarity = polarity\n                        best_threshold = threshold\n                        best_feature = feature\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        stumps.append((best_feature, best_threshold, best_polarity))\n        stump_weights.append(alpha)\n    n_test_samples = X_test.shape[0]\n    pred = np.zeros(n_test_samples)\n    for ((feature, threshold, polarity), alpha) in zip(stumps, stump_weights):\n        predictions = np.ones(n_test_samples)\n        predictions[X_test[:, feature] < threshold] = -1\n        predictions *= polarity\n        pred += alpha * predictions\n    predictions = np.sign(pred)\n    return predictions.astype(int).tolist()"}
{"task_id": 318, "completion_id": 6, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    weak_classifiers = []\n    alpha_values = []\n    for _ in range(n_estimators):\n        best_stump = None\n        best_threshold = None\n        best_polarity = None\n        best_error = float('inf')\n        for feature in range(n_features):\n            unique_values = np.unique(X_train[:, feature])\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[X_train[:, feature] < threshold] = -1\n                    else:\n                        predictions[X_train[:, feature] >= threshold] = -1\n                    error = np.sum(weights[predictions != y_train])\n                    if error > 0.5:\n                        error = 1 - error\n                        polarity = -polarity\n                    if error < best_error:\n                        best_error = error\n                        best_stump = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n        if best_error == 0:\n            best_error = 1e-10\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n        alpha_values.append(alpha)\n        weights *= np.exp(-alpha * y_train * ((X_train[:, best_stump] < best_threshold) * 2 - 1))\n        weights /= np.sum(weights)\n        weak_classifiers.append((best_stump, best_threshold, best_polarity))\n    n_test_samples = X_test.shape[0]\n    final_predictions = np.zeros(n_test_samples)\n    for (alpha, (feature, threshold, polarity)) in zip(alpha_values, weak_classifiers):\n        if polarity == 1:\n            final_predictions[X_test[:, feature] < threshold] += alpha\n        else:\n            final_predictions[X_test[:, feature] >= threshold] += alpha\n    predicted_labels = np.sign(final_predictions).astype(int).tolist()\n    return predicted_labels"}
{"task_id": 318, "completion_id": 7, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    alphas = []\n    stumps = []\n    for _ in range(n_estimators):\n        best_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            for t in thresholds:\n                for p in [-1, 1]:\n                    predictions = np.ones(n_samples) * p\n                    predictions[X_train[:, feature] < t] = -p\n                    weighted_error = np.sum(weights[y_train != predictions])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        p = -p\n                    if weighted_error < best_error:\n                        best_error = weighted_error\n                        best_feature = feature\n                        best_threshold = t\n                        best_polarity = p\n        epsilon = best_error\n        alpha = 0.5 * math.log((1 - epsilon) / epsilon)\n        alphas.append(alpha)\n        predictions = np.ones(n_samples) * best_polarity\n        predictions[X_train[:, best_feature] < best_threshold] = -best_polarity\n        stumps.append((best_feature, best_threshold, best_polarity))\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n    final_predictions = np.zeros(X_test.shape[0])\n    for (alpha, (feature, threshold, polarity)) in zip(alphas, stumps):\n        predictions = np.ones(X_test.shape[0]) * polarity\n        predictions[X_test[:, feature] < threshold] = -polarity\n        final_predictions += alpha * predictions\n    return [1 if pred > 0 else -1 for pred in final_predictions]"}
{"task_id": 318, "completion_id": 8, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    alphas = []\n\n    def train_decision_stump():\n        min_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.ones(n_samples)\n                    predictions[X_train[:, feature] < threshold] = -1\n                    predictions *= polarity\n                    missclassified = weights[y_train != predictions]\n                    error = np.sum(missclassified)\n                    if error > 0.5:\n                        error = 1 - error\n                        polarity *= -1\n                    if error < min_error:\n                        min_error = error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        return (best_feature, best_threshold, best_polarity, alpha)\n    for _ in range(n_estimators):\n        (feature, threshold, polarity, alpha) = train_decision_stump()\n        alphas.append(alpha)\n        stumps.append((feature, threshold, polarity))\n        predictions = np.ones(n_samples)\n        for (feature, threshold, polarity) in stumps:\n            predictions[X_train[:, feature] < threshold] *= -1\n            predictions *= polarity\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n    def predict_sample(sample):\n        score = 0\n        for ((feature, threshold, polarity), alpha) in zip(stumps, alphas):\n            prediction = polarity if sample[feature] < threshold else -polarity\n            score += alpha * prediction\n        return 1 if score > 0 else -1\n    return [predict_sample(sample) for sample in X_test]"}
{"task_id": 318, "completion_id": 9, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n\n    def decision_stump_predict(X, j, t, p):\n        \"\"\"Predict using a single decision stump.\"\"\"\n        return p * np.where(X[:, j] >= t, 1, -1)\n\n    def weighted_error(y_true, y_pred, weights):\n        \"\"\"Calculate the weighted error of a prediction.\"\"\"\n        return np.sum(weights[y_true != y_pred])\n    (n_samples, n_features) = X_train.shape\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    ensemble_predictions = np.zeros(X_test.shape[0])\n    alpha = np.zeros(n_estimators)\n    for m in range(n_estimators):\n        min_error = np.inf\n        best_stump = {'j': None, 't': None, 'p': None}\n        for j in range(n_features):\n            thresholds = np.unique(X_train[:, j])\n            for t in thresholds:\n                for p in (-1, 1):\n                    y_pred = decision_stump_predict(X_train, j, t, p)\n                    error = weighted_error(y_train, y_pred, sample_weights)\n                    if error > 0.5:\n                        error = 1 - error\n                        p = -p\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {'j': j, 't': t, 'p': p}\n        alpha_m = 0.5 * math.log((1 - min_error) / min_error)\n        alpha[m] = alpha_m\n        stump_pred = decision_stump_predict(X_train, best_stump['j'], best_stump['t'], best_stump['p'])\n        ensemble_predictions += alpha_m * decision_stump_predict(X_test, best_stump['j'], best_stump['t'], best_stump['p'])\n        sample_weights *= np.exp(-alpha_m * y_train * stump_pred)\n        sample_weights /= np.sum(sample_weights)\n    final_predictions = np.sign(ensemble_predictions).astype(int)\n    return final_predictions.tolist()"}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    delta_f = fs / N\n    if positive_only:\n        frequencies = np.arange(0, N // 2 + 1) * delta_f\n    else:\n        frequencies = np.fft.fftfreq(N, d=1 / fs)\n    return [round(freq, 4) for freq in frequencies.tolist()]"}
{"task_id": 329, "completion_id": 1, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    df = fs / N\n    if positive_only:\n        frequencies = np.arange(0, N // 2 + 1) * df\n    else:\n        frequencies = np.fft.fftfreq(N, 1 / fs)\n    return [round(freq, 4) for freq in frequencies.tolist()]"}
{"task_id": 329, "completion_id": 2, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    delta_f = fs / N\n    if positive_only:\n        freqs = np.arange(N // 2 + 1) * delta_f\n    else:\n        freqs = np.fft.fftfreq(N, d=1 / fs)\n    return [round(freq, 4) for freq in freqs.tolist()]"}
{"task_id": 329, "completion_id": 3, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    delta_f = fs / N\n    if positive_only:\n        frequencies = np.arange(0, N // 2 + 1) * delta_f\n    else:\n        frequencies = np.fft.fftfreq(N, 1 / fs)\n    return [round(freq, 4) for freq in frequencies.tolist()]"}
{"task_id": 329, "completion_id": 4, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    df = fs / N\n    if positive_only:\n        frequencies = np.arange(0, N // 2 + 1) * df\n    else:\n        frequencies = np.fft.fftfreq(N, 1 / fs)\n    return [round(freq, 4) for freq in frequencies.tolist()]"}
{"task_id": 329, "completion_id": 5, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    df = fs / N\n    if positive_only:\n        frequencies = [k * df for k in range(N // 2 + 1)]\n    else:\n        frequencies = list(np.fft.fftfreq(N, d=1 / fs))\n    frequencies = [round(freq, 4) for freq in frequencies]\n    return frequencies"}
{"task_id": 329, "completion_id": 6, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    df = fs / N\n    freqs = np.fft.fftfreq(N, d=1 / fs)\n    if positive_only:\n        freqs = freqs[:N // 2 + 1]\n    return [round(freq, 4) for freq in freqs.tolist()]"}
{"task_id": 329, "completion_id": 7, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    delta_f = fs / N\n    if positive_only:\n        freqs = np.arange(0, N // 2 + 1) * delta_f\n    else:\n        freqs = np.fft.fftfreq(N, d=1 / fs)\n    return [round(freq, 4) for freq in freqs.tolist()]"}
{"task_id": 329, "completion_id": 8, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    df = fs / N\n    if positive_only:\n        frequencies = np.arange(0, N // 2 + 1) * df\n    else:\n        frequencies = np.fft.fftfreq(N, d=1 / fs)\n    return [round(freq, 4) for freq in frequencies.tolist()]"}
{"task_id": 329, "completion_id": 9, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    df = fs / N\n    if positive_only:\n        k = np.arange(0, N // 2 + 1)\n        frequencies = k * df\n    else:\n        k = np.arange(0, N)\n        frequencies = np.fft.fftfreq(k.size, d=1 / fs)\n    return [round(freq, 4) for freq in frequencies.tolist()]"}
{"task_id": 331, "completion_id": 0, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask)\n    (n_samples, n_estimators) = predictions.shape\n    oob_predictions = np.zeros((n_samples, n_estimators))\n    n_oob = np.sum(oob_mask, axis=1)\n    sample_oob_avg = np.zeros(n_samples)\n    for i in range(n_samples):\n        if n_oob[i] > 0:\n            oob_predictions[i] = predictions[i] * oob_mask[i]\n            sample_oob_avg[i] = np.sum(oob_predictions[i]) / n_oob[i]\n    oob_indices = np.where(n_oob > 0)[0]\n    if len(oob_indices) == 0:\n        return -1\n    squared_errors = (sample_oob_avg[oob_indices] - y_true[oob_indices]) ** 2\n    oob_mse_value = np.mean(squared_errors)\n    return round(oob_mse_value, 4)"}
{"task_id": 331, "completion_id": 1, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    n_samples = y_true.shape[0]\n    oob_sums = np.zeros(n_samples)\n    oob_counts = np.zeros(n_samples)\n    for i in range(n_samples):\n        oob_sums[i] = np.sum(predictions[i, oob_mask[i]])\n        oob_counts[i] = np.sum(oob_mask[i])\n    oob_indices = oob_counts > 0\n    if not np.any(oob_indices):\n        return -1\n    oob_mean_predictions = oob_sums[oob_indices] / oob_counts[oob_indices]\n    y_true_oob = y_true[oob_indices]\n    squared_errors = (oob_mean_predictions - y_true_oob) ** 2\n    oob_mse_value = np.mean(squared_errors)\n    return round(oob_mse_value, 4)"}
{"task_id": 331, "completion_id": 2, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    (n_samples, n_estimators) = predictions.shape\n    oob_errors = []\n    for i in range(n_samples):\n        oob_predictions = predictions[i, oob_mask[i]]\n        if oob_predictions.size > 0:\n            oob_average = np.mean(oob_predictions)\n            oob_error = (oob_average - y_true[i]) ** 2\n            oob_errors.append(oob_error)\n    if not oob_errors:\n        return -1\n    oob_mse_value = np.mean(oob_errors)\n    return round(oob_mse_value, 4)"}
{"task_id": 331, "completion_id": 3, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask)\n    (n_samples, _) = predictions.shape\n    oob_predictions = np.zeros(n_samples)\n    oob_counts = np.zeros(n_samples)\n    for i in range(n_samples):\n        oob_indices = np.where(oob_mask[i])[0]\n        if oob_indices.size > 0:\n            oob_predictions[i] = predictions[i, oob_indices].mean()\n            oob_counts[i] = oob_indices.size\n    valid_samples = oob_counts > 0\n    if not np.any(valid_samples):\n        return -1\n    squared_errors = (oob_predictions[valid_samples] - y_true[valid_samples]) ** 2\n    oob_mse_value = np.mean(squared_errors)\n    return round(oob_mse_value, 4)"}
{"task_id": 331, "completion_id": 4, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    n_samples = y_true.shape[0]\n    oob_errors = []\n    for i in range(n_samples):\n        oob_preds = predictions[i, oob_mask[i]]\n        if oob_preds.size > 0:\n            oob_avg_pred = np.mean(oob_preds)\n            oob_error = (oob_avg_pred - y_true[i]) ** 2\n            oob_errors.append(oob_error)\n    if not oob_errors:\n        return -1\n    return round(np.mean(oob_errors), 4)"}
{"task_id": 331, "completion_id": 5, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    predictions = np.asarray(predictions)\n    oob_mask = np.asarray(oob_mask)\n    (n_samples, n_estimators) = predictions.shape\n    oob_mse_values = []\n    for i in range(n_samples):\n        oob_preds = predictions[i, oob_mask[i]]\n        if oob_preds.size > 0:\n            oob_mean = np.mean(oob_preds)\n            squared_error = (oob_mean - y_true[i]) ** 2\n            oob_mse_values.append(squared_error)\n    if len(oob_mse_values) == 0:\n        return -1\n    oob_mse_result = np.mean(oob_mse_values)\n    return round(oob_mse_result, 4)"}
{"task_id": 331, "completion_id": 6, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    n_samples = y_true.shape[0]\n    oob_predictions_sum = np.zeros(n_samples)\n    oob_counts = np.zeros(n_samples)\n    for i in range(n_samples):\n        oob_indices = np.where(oob_mask[i])[0]\n        if oob_indices.size > 0:\n            oob_predictions_sum[i] = np.sum(predictions[i, oob_indices])\n            oob_counts[i] = oob_indices.size\n    squared_errors = []\n    for i in range(n_samples):\n        if oob_counts[i] > 0:\n            avg_oob_prediction = oob_predictions_sum[i] / oob_counts[i]\n            squared_error = (avg_oob_prediction - y_true[i]) ** 2\n            squared_errors.append(squared_error)\n    if squared_errors:\n        oob_mse_value = np.mean(squared_errors)\n        return round(oob_mse_value, 4)\n    else:\n        return -1"}
{"task_id": 331, "completion_id": 7, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    (n_samples, _) = predictions.shape\n    oob_errors = []\n    for i in range(n_samples):\n        oob_predictions = predictions[i, oob_mask[i]]\n        if len(oob_predictions) > 0:\n            oob_average = np.mean(oob_predictions)\n            squared_error = (oob_average - y_true[i]) ** 2\n            oob_errors.append(squared_error)\n    if not oob_errors:\n        return -1\n    oob_mse_value = np.mean(oob_errors)\n    return round(oob_mse_value, 4)"}
{"task_id": 331, "completion_id": 8, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    oob_predictions = []\n    for i in range(len(y_true)):\n        sample_oob_predictions = predictions[i, oob_mask[i]]\n        if sample_oob_predictions.size > 0:\n            oob_mean = np.mean(sample_oob_predictions)\n            oob_predictions.append((oob_mean, y_true[i]))\n    if not oob_predictions:\n        return -1.0\n    oob_mse = np.mean([(oob_mean - true_value) ** 2 for (oob_mean, true_value) in oob_predictions])\n    return round(oob_mse, 4)"}
{"task_id": 331, "completion_id": 9, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    n_samples = y_true.shape[0]\n    oob_predictions = np.zeros(n_samples)\n    oob_counts = np.zeros(n_samples)\n    for i in range(n_samples):\n        oob_predictions[i] = np.mean(predictions[i, oob_mask[i]])\n        oob_counts[i] = np.sum(oob_mask[i])\n    valid_samples = oob_counts > 0\n    if np.sum(valid_samples) == 0:\n        return -1.0\n    squared_errors = (oob_predictions[valid_samples] - y_true[valid_samples]) ** 2\n    result = np.mean(squared_errors)\n    return round(result, 4)"}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_support = Counter()\n    for transaction in transactions:\n        unique_items = set(transaction)\n        for item in unique_items:\n            item_support[item] += 1\n    frequent_items = {item: support for (item, support) in item_support.items() if support >= min_support}\n    sorted_items = sorted(frequent_items, key=lambda item: (-frequent_items[item], item))\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        ordered_transaction = sorted(set(transaction) & set(sorted_items), key=lambda item: sorted_items.index(item))\n        node = root\n        for item in ordered_transaction:\n            if item not in node['children']:\n                node['children'][item] = {'support': 0, 'children': {}}\n            node = node['children'][item]\n            node['support'] += 1\n    return root\ntransactions = [['a', 'b', 'c'], ['a', 'b'], ['b', 'c'], ['a', 'c'], ['a', 'b', 'c'], ['a']]\nmin_support = 2"}
{"task_id": 332, "completion_id": 1, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_support = Counter()\n    for transaction in transactions:\n        unique_items = set(transaction)\n        for item in unique_items:\n            item_support[item] += 1\n    frequent_items = {item for (item, support) in item_support.items() if support >= min_support}\n    sorted_frequent_items = sorted(frequent_items, key=lambda item: (-item_support[item], item))\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        filtered_sorted_transaction = [item for item in sorted_frequent_items if item in transaction]\n        current_node = root\n        for item in filtered_sorted_transaction:\n            if item not in current_node['children']:\n                current_node['children'][item] = {'support': 0, 'children': {}}\n            current_node = current_node['children'][item]\n            current_node['support'] += 1\n    return root\ntransactions = [['milk', 'bread', 'butter'], ['milk', 'bread'], ['milk', 'bread', 'butter', 'beer'], ['bread', 'butter'], ['bread', 'butter', 'beer'], ['beer', 'butter']]\nmin_support = 2"}
{"task_id": 332, "completion_id": 2, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_support = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: support for (item, support) in item_support.items() if support >= min_support}\n    ordered_items = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        transaction = sorted(set(transaction).intersection(ordered_items), key=lambda x: ordered_items.index(x))\n        node = root\n        for item in transaction:\n            if item not in node['children']:\n                node['children'][item] = {'support': 0, 'children': {}}\n            node = node['children'][item]\n            node['support'] += 1\n    return root\ntransactions = [['m', 'n', 'o', 'p'], ['n', 'o', 'o', 'p', 'q'], ['m', 'n', 'o', 'y'], ['m', 'x', 'z'], ['s', 'x', 'o', 'n']]\nmin_support = 2"}
{"task_id": 332, "completion_id": 3, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_support = Counter()\n    for transaction in transactions:\n        unique_items = set(transaction)\n        item_support.update(unique_items)\n    frequent_items = {item: support for (item, support) in item_support.items() if support >= min_support}\n    sorted_frequent_items = sorted(frequent_items.keys(), key=lambda x: (-frequent_items[x], x))\n    item_order = {item: index for (index, item) in enumerate(sorted_frequent_items)}\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        transaction_items = sorted(set(transaction) & set(frequent_items), key=lambda x: item_order[x])\n        current_node = root\n        for item in transaction_items:\n            if item not in current_node['children']:\n                current_node['children'][item] = {'support': 1, 'children': {}}\n            else:\n                current_node['children'][item]['support'] += 1\n            current_node = current_node['children'][item]\n    return root"}
{"task_id": 332, "completion_id": 4, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_support = Counter()\n    for transaction in transactions:\n        unique_items = set(transaction)\n        item_support.update(unique_items)\n    frequent_items = {item for (item, support) in item_support.items() if support >= min_support}\n    sorted_items = sorted(frequent_items, key=lambda item: (-item_support[item], item))\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        filtered_sorted_transaction = sorted(set(transaction) & frequent_items, key=lambda item: sorted_items.index(item))\n        current_node = root\n        current_node['support'] += 1\n        for item in filtered_sorted_transaction:\n            if item not in current_node['children']:\n                current_node['children'][item] = {'support': 0, 'children': {}}\n            current_node = current_node['children'][item]\n            current_node['support'] += 1\n    return root\ntransactions = [['a', 'b', 'c'], ['a', 'b', 'c', 'd'], ['b', 'c', 'e'], ['b', 'c', 'd', 'e'], ['a', 'b', 'c', 'e']]\nmin_support = 2"}
{"task_id": 332, "completion_id": 5, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    sorted_items = sorted(frequent_items.keys(), key=lambda x: (-frequent_items[x], x))\n    item_order = {item: idx for (idx, item) in enumerate(sorted_items)}\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        ordered_transaction = sorted(set(transaction), key=lambda x: item_order.get(x, float('inf')))\n        ordered_transaction = [item for item in ordered_transaction if item in frequent_items]\n        current_node = root\n        for item in ordered_transaction:\n            if item not in current_node['children']:\n                current_node['children'][item] = {'support': 0, 'children': {}}\n            current_node['children'][item]['support'] += 1\n            current_node = current_node['children'][item]\n    return root\ntransactions = [['milk', 'bread', 'butter'], ['bread', 'butter'], ['milk', 'bread'], ['bread', 'butter'], ['milk', 'bread', 'butter'], ['bread', 'milk']]\nmin_support = 2"}
{"task_id": 332, "completion_id": 6, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_support = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: support for (item, support) in item_support.items() if support >= min_support}\n    sorted_items = sorted(frequent_items.keys(), key=lambda item: (-frequent_items[item], item))\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        transaction = sorted(set(transaction), key=lambda item: sorted_items.index(item) if item in frequent_items else -1)\n        current_node = root\n        for item in transaction:\n            if item not in current_node['children']:\n                current_node['children'][item] = {'support': 0, 'children': {}}\n            current_node = current_node['children'][item]\n            current_node['support'] += 1\n    return root\ntransactions = [['m', 'n', 'n', 'n', 'o'], ['l', 'm', 'n', 'o', 'p'], ['m', 'n', 'n', 'o', 'q'], ['l', 'm', 'n', 'o', 'p'], ['o', 'p', 'q'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c'], ['a', 'b', 'd'], ['m', 'n', 'o']]\nmin_support = 2"}
{"task_id": 332, "completion_id": 7, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_support = Counter()\n    for transaction in transactions:\n        transaction_set = set(transaction)\n        item_support.update(transaction_set)\n    frequent_items = {item: support for (item, support) in item_support.items() if support >= min_support}\n    ordered_frequent_items = sorted(frequent_items.keys(), key=lambda x: (-frequent_items[x], x))\n    item_order = {item: index for (index, item) in enumerate(ordered_frequent_items)}\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        transaction_set = set(transaction)\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        filtered_transaction.sort(key=lambda x: item_order[x])\n        current_node = root\n        for item in filtered_transaction:\n            if item not in current_node['children']:\n                current_node['children'][item] = {'support': 0, 'children': {}}\n            current_node = current_node['children'][item]\n            current_node['support'] += 1\n    return root\ntransactions = [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'b', 'c', 'e'], ['b', 'e'], ['a', 'b', 'c', 'e'], ['a', 'b', 'c', 'f'], ['b', 'e', 'f']]\nmin_support = 2"}
{"task_id": 332, "completion_id": 8, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    sorted_items = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n    item_order = {item: idx for (idx, item) in enumerate(sorted_items)}\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        filtered_transaction = sorted(set(transaction), key=lambda item: item_order.get(item, float('inf')))\n        filtered_transaction = [item for item in filtered_transaction if item in frequent_items]\n        current_node = root\n        for item in filtered_transaction:\n            if item not in current_node['children']:\n                current_node['children'][item] = {'support': 0, 'children': {}}\n            current_node['children'][item]['support'] += 1\n            current_node = current_node['children'][item]\n    return root\ntransactions = [['a', 'b', 'c'], ['a', 'b'], ['a', 'c'], ['b', 'c'], ['a', 'b', 'c', 'd'], ['b', 'c', 'd'], ['a', 'b', 'd']]\nmin_support = 2"}
{"task_id": 332, "completion_id": 9, "solution": "from collections import Counter\nfrom itertools import groupby\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_support = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: support for (item, support) in item_support.items() if support >= min_support}\n    ordered_items = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        filtered_transaction = sorted(set((item for item in transaction if item in frequent_items)), key=lambda x: ordered_items.index(x))\n        current_node = root\n        for item in filtered_transaction:\n            if item not in current_node['children']:\n                current_node['children'][item] = {'support': 0, 'children': {}}\n            current_node['children'][item]['support'] += 1\n            current_node = current_node['children'][item]\n    return root\ntransactions = [['a', 'b', 'c'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c'], ['a', 'c'], ['a', 'b', 'c', 'c']]\nmin_support = 2"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T) + c0\n    K_rounded = K.round(4).tolist()\n    return K_rounded"}
{"task_id": 336, "completion_id": 1, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T) + c0\n    K_rounded = np.round(K, 4).tolist()\n    return K_rounded"}
{"task_id": 336, "completion_id": 2, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T) + c0\n    K_rounded = np.round(K, 4).tolist()\n    return K_rounded"}
{"task_id": 336, "completion_id": 3, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T) + c0\n    K_rounded = np.round(K, 4).tolist()\n    return K_rounded"}
{"task_id": 336, "completion_id": 4, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T) + c0\n    K_rounded = np.round(K, 4)\n    return K_rounded.tolist()"}
{"task_id": 336, "completion_id": 5, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | np.ndarray, Y: list[list[int | float]] | np.ndarray | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    Y = np.array(Y, dtype=float) if Y is not None else X\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = X @ Y.T + c0\n    K_rounded = np.round(K, 4)\n    return K_rounded.tolist()"}
{"task_id": 336, "completion_id": 6, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T) + c0\n    K_rounded = np.round(K, 4)\n    return K_rounded.tolist()"}
{"task_id": 336, "completion_id": 7, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T) + c0\n    K_rounded = np.round(K, 4)\n    return K_rounded.tolist()"}
{"task_id": 336, "completion_id": 8, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T) + c0\n    K_rounded = np.round(K, 4)\n    return K_rounded.tolist()"}
{"task_id": 336, "completion_id": 9, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    kernel_matrix = np.dot(X, Y.T) + c0\n    kernel_matrix_rounded = kernel_matrix.round(4).tolist()\n    return kernel_matrix_rounded\nX = []\nY = [[5, 6], [7, 9]]\nc0 = 1"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat_t = m_t / (1 - beta1 ** t)\n    v_hat_t = v_t / (1 - beta2 ** t)\n    param_t = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    updated_param = np.round(param_t, 8).tolist()\n    new_m = np.round(m_t, 8).tolist()\n    new_v = np.round(v_t, 8).tolist()\n    return (updated_param, new_m, new_v)"}
{"task_id": 340, "completion_id": 1, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat_t = m_t / (1 - beta1 ** t)\n    v_hat_t = v_t / (1 - beta2 ** t)\n    param_new = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    param_new_list = param_new.flatten().tolist()\n    m_t_list = m_t.flatten().tolist()\n    v_t_list = v_t.flatten().tolist()\n    param_new_list = [round(x, 8) for x in param_new_list]\n    m_t_list = [round(x, 8) for x in m_t_list]\n    v_t_list = [round(x, 8) for x in v_t_list]\n    return (param_new_list, m_t_list, v_t_list)"}
{"task_id": 340, "completion_id": 2, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_t_hat = m_t / (1 - beta1 ** t)\n    v_t_hat = v_t / (1 - beta2 ** t)\n    param_t = param - lr * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    updated_param = np.round(param_t, 8).tolist()\n    new_m = np.round(m_t, 8).tolist()\n    new_v = np.round(v_t, 8).tolist()\n    return (updated_param, new_m, new_v)"}
{"task_id": 340, "completion_id": 3, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_t_hat = m_t / (1 - beta1 ** t)\n    v_t_hat = v_t / (1 - beta2 ** t)\n    param_t_prime = param - lr * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    return (param_t_prime.round(8).tolist(), m_t.round(8).tolist(), v_t.round(8).tolist())"}
{"task_id": 340, "completion_id": 4, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_new = beta1 * m + (1 - beta1) * grad\n    v_new = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m_new / (1 - beta1 ** t)\n    v_hat = v_new / (1 - beta2 ** t)\n    param_new = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    param_new_list = np.round(param_new, 8).tolist()\n    m_new_list = np.round(m_new, 8).tolist()\n    v_new_list = np.round(v_new, 8).tolist()\n    return (param_new_list, m_new_list, v_new_list)"}
{"task_id": 340, "completion_id": 5, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_t_hat = m_t / (1 - beta1 ** t)\n    v_t_hat = v_t / (1 - beta2 ** t)\n    param_t = param - lr * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    updated_param = np.round(param_t, 8).tolist()\n    new_m = np.round(m_t, 8).tolist()\n    new_v = np.round(v_t, 8).tolist()\n    return (updated_param, new_m, new_v)"}
{"task_id": 340, "completion_id": 6, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_t_hat = m_t / (1 - beta1 ** t)\n    v_t_hat = v_t / (1 - beta2 ** t)\n    theta_t_prime = param - lr * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    return (np.round(theta_t_prime, 8).tolist(), np.round(m_t, 8).tolist(), np.round(v_t, 8).tolist())"}
{"task_id": 340, "completion_id": 7, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_t_hat = m_t / (1 - beta1 ** t)\n    v_t_hat = v_t / (1 - beta2 ** t)\n    param_t = param - lr * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    return (param_t.tolist(), m_t.tolist(), v_t.tolist())"}
{"task_id": 340, "completion_id": 8, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat_t = m_t / (1 - beta1 ** t)\n    v_hat_t = v_t / (1 - beta2 ** t)\n    param_t = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    return (param_t.round(8).tolist(), m_t.round(8).tolist(), v_t.round(8).tolist())"}
{"task_id": 340, "completion_id": 9, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat_t = m_t / (1 - beta1 ** t)\n    v_hat_t = v_t / (1 - beta2 ** t)\n    param_t = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    param_t_rounded = np.round(param_t, 8).tolist()\n    m_t_rounded = np.round(m_t, 8).tolist()\n    v_t_rounded = np.round(v_t, 8).tolist()\n    return (param_t_rounded, m_t_rounded, v_t_rounded)"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    N = theta_samples.shape[0]\n    num_retain = int(retain_prcnt * N)\n    elite_indices = np.argsort(rewards)[-num_retain:]\n    elite_samples = theta_samples[elite_indices]\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0, ddof=0)\n    mean_rounded = [round(x, 4) for x in mean]\n    variance_rounded = [round(x, 4) for x in variance]\n    return (mean_rounded, variance_rounded)"}
{"task_id": 343, "completion_id": 1, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    num_samples = int(retain_prcnt * len(theta_samples))\n    top_indices = np.argsort(rewards)[-num_samples:]\n    elite_samples = theta_samples[top_indices]\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    return ([round(m, 4) for m in mean], [round(v, 4) for v in variance])"}
{"task_id": 343, "completion_id": 2, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    N = len(theta_samples)\n    num_elites = int(retain_prcnt * N)\n    elite_indices = np.argsort(rewards)[-num_elites:]\n    elite_samples = theta_samples[elite_indices]\n    elite_mean = np.mean(elite_samples, axis=0)\n    elite_variance = np.var(elite_samples, axis=0)\n    mean_rounded = [round(m, 4) for m in elite_mean]\n    variance_rounded = [round(v, 4) for v in elite_variance]\n    return (mean_rounded, variance_rounded)"}
{"task_id": 343, "completion_id": 3, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    N = theta_samples.shape[0]\n    num_retain = int(retain_prcnt * N)\n    sorted_indices = np.argsort(rewards)[::-1]\n    elite_samples = theta_samples[sorted_indices[:num_retain]]\n    elite_mean = np.mean(elite_samples, axis=0)\n    elite_variance = np.var(elite_samples, axis=0)\n    elite_mean_rounded = np.round(elite_mean, 4).tolist()\n    elite_variance_rounded = np.round(elite_variance, 4).tolist()\n    return (elite_mean_rounded, elite_variance_rounded)"}
{"task_id": 343, "completion_id": 4, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    n_samples = int(retain_prcnt * len(theta_samples))\n    sorted_indices = np.argsort(rewards)[::-1]\n    elite_samples = theta_samples[sorted_indices[:n_samples]]\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    mean_rounded = [round(x, 4) for x in mean]\n    variance_rounded = [round(x, 4) for x in variance]\n    return (mean_rounded, variance_rounded)"}
{"task_id": 343, "completion_id": 5, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    num_samples_to_retain = int(retain_prcnt * len(theta_samples))\n    elite_indices = np.argsort(rewards)[-num_samples_to_retain:]\n    elite_samples = theta_samples[elite_indices]\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    mean_rounded = [round(x, 4) for x in mean]\n    variance_rounded = [round(x, 4) for x in variance]\n    return (mean_rounded, variance_rounded)"}
{"task_id": 343, "completion_id": 6, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    num_retain = int(retain_prcnt * len(theta_samples))\n    top_indices = np.argsort(rewards)[-num_retain:]\n    elite_samples = theta_samples[top_indices]\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0, ddof=0)\n    mean_rounded = [round(m, 4) for m in mean]\n    variance_rounded = [round(v, 4) for v in variance]\n    return (mean_rounded, variance_rounded)"}
{"task_id": 343, "completion_id": 7, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    rewards = np.array(rewards)\n    num_retain = int(retain_prcnt * len(rewards))\n    elite_indices = np.argsort(rewards)[-num_retain:]\n    elite_samples = theta_samples[elite_indices]\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    return ([round(m, 4) for m in mean], [round(v, 4) for v in variance])"}
{"task_id": 343, "completion_id": 8, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    rewards = np.array(rewards)\n    num_retain = int(retain_prcnt * len(theta_samples))\n    elite_indices = np.argsort(rewards)[-num_retain:]\n    elite_samples = theta_samples[elite_indices]\n    elite_mean = np.mean(elite_samples, axis=0)\n    elite_variance = np.var(elite_samples, axis=0)\n    elite_mean_rounded = [round(x, 4) for x in elite_mean]\n    elite_variance_rounded = [round(x, 4) for x in elite_variance]\n    return (elite_mean_rounded, elite_variance_rounded)"}
{"task_id": 343, "completion_id": 9, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    N = theta_samples.shape[0]\n    retain_count = int(retain_prcnt * N)\n    elite_indices = np.argsort(rewards)[-retain_count:]\n    elite_samples = theta_samples[elite_indices]\n    elite_mean = np.mean(elite_samples, axis=0)\n    elite_variance = np.var(elite_samples, axis=0, ddof=0)\n    elite_mean_rounded = [round(value, 4) for value in elite_mean]\n    elite_variance_rounded = [round(value, 4) for value in elite_variance]\n    return (elite_mean_rounded, elite_variance_rounded)"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total_count = len(labels)\n    entropy_value = 0.0\n    for count in label_counts.values():\n        probability = count / total_count\n        entropy_value -= probability * math.log2(probability)\n    return round(entropy_value, 5)"}
{"task_id": 353, "completion_id": 1, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    entropy_value = 0.0\n    for count in label_counts.values():\n        probability = count / total_labels\n        entropy_value -= probability * math.log2(probability)\n    return round(entropy_value, 5)"}
{"task_id": 353, "completion_id": 2, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total_count = len(labels)\n    entropy_value = 0.0\n    for count in label_counts.values():\n        p_i = count / total_count\n        entropy_value -= p_i * math.log2(p_i)\n    return round(entropy_value, 5)"}
{"task_id": 353, "completion_id": 3, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    labels = list(labels)\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    entropy_value = 0.0\n    for count in label_counts.values():\n        probability = count / total_labels\n        entropy_value -= probability * math.log2(probability)\n    return round(entropy_value, 5)"}
{"task_id": 353, "completion_id": 4, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    entropy_value = 0.0\n    for count in label_counts.values():\n        probability = count / total_labels\n        entropy_value -= probability * math.log2(probability)\n    return round(entropy_value, 5)"}
{"task_id": 353, "completion_id": 5, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    labels = list(labels)\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    probabilities = [count / total_labels for count in label_counts.values()]\n    entropy_value = -sum((p * math.log2(p) for p in probabilities if p > 0))\n    return round(entropy_value, 5)"}
{"task_id": 353, "completion_id": 6, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total_count = len(labels)\n    entropy_value = 0.0\n    for count in label_counts.values():\n        p_i = count / total_count\n        if p_i > 0:\n            entropy_value -= p_i * math.log2(p_i)\n    return round(entropy_value, 5)"}
{"task_id": 353, "completion_id": 7, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    n = len(labels)\n    entropy_value = 0.0\n    for count in label_counts.values():\n        p_i = count / n\n        entropy_value -= p_i * math.log2(p_i)\n    return round(entropy_value, 5)"}
{"task_id": 353, "completion_id": 8, "solution": "import math\nfrom collections import Counter\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total_count = len(labels)\n    probabilities = [count / total_count for count in label_counts.values()]\n    entropy_value = -sum((p * math.log2(p) for p in probabilities if p > 0))\n    return round(entropy_value, 5)"}
{"task_id": 353, "completion_id": 9, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total_count = len(labels)\n    entropy_value = 0.0\n    for count in label_counts.values():\n        probability = count / total_count\n        entropy_value -= probability * math.log2(probability)\n    return round(entropy_value, 5)"}
{"task_id": 354, "completion_id": 0, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, in_ch_w, out_ch) = W.shape\n    if isinstance(pad, int):\n        pr1 = pr2 = pc1 = pc2 = pad\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            (pr1, pr2) = (pc1, pc2) = pad\n        else:\n            (pr1, pr2, pc1, pc2) = pad\n    elif pad == 'same':\n        pr1 = (dilation * (kernel_rows - 1) - (in_rows % stride - kernel_rows % stride) + stride - 1) // 2\n        pr2 = (dilation * (kernel_rows - 1) - (in_rows % stride - kernel_rows % stride) + stride - 1) // 2\n        pc1 = (dilation * (kernel_cols - 1) - (in_cols % stride - kernel_cols % stride) + stride - 1) // 2\n        pc2 = (dilation * (kernel_cols - 1) - (in_cols % stride - kernel_cols % stride) + stride - 1) // 2\n    X_padded = np.pad(X, ((0, 0), (pr1, pr2), (pc1, pc2), (0, 0)), mode='constant')\n    in_rows_eff = (in_rows + pr1 + pr2 - (kernel_rows - 1) * dilation - 1) // stride + 1\n    in_cols_eff = (in_cols + pc1 + pc2 - (kernel_cols - 1) * dilation - 1) // stride + 1\n    X_col = np.zeros((in_ch * kernel_rows * kernel_cols, n_ex * in_rows_eff * in_cols_eff))\n    for ex in range(n_ex):\n        for i in range(in_rows_eff):\n            start_row = i * stride\n            end_row = start_row + (kernel_rows - 1) * dilation + 1\n            for j in range(in_cols_eff):\n                start_col = j * stride\n                end_col = start_col + (kernel_cols - 1) * dilation + 1\n                patches = X_padded[ex, start_row:end_row:dilation, start_col:end_col:dilation, :]\n                X_col[:, ex * in_rows_eff * in_cols_eff + i * in_cols_eff + j] = patches.flatten()\n    W_col = W.reshape(kernel_rows * kernel_cols * in_ch, out_ch)\n    out_col = np.dot(W_col.T, X_col)\n    out = out_col.reshape(out_ch, n_ex, in_rows_eff, in_cols_eff).transpose(1, 2, 3, 0)\n    return out.tolist()"}
{"task_id": 354, "completion_id": 1, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad = (pad[0], pad[0], pad[1], pad[1])\n    elif isinstance(pad, str) and pad == 'same':\n        pr1 = (in_rows * (stride - 1) + kernel_rows - stride) // 2\n        pr2 = (in_rows * (stride - 1) + kernel_rows - stride + 1) // 2\n        pc1 = (in_cols * (stride - 1) + kernel_cols - stride) // 2\n        pc2 = (in_cols * (stride - 1) + kernel_cols - stride + 1) // 2\n        pad = (pr1, pr2, pc1, pc2)\n    (pr1, pr2, pc1, pc2) = pad\n    X_padded = np.pad(X, ((0, 0), (pr1, pr2), (pc1, pc2), 0), mode='constant')\n    out_rows = 1 + (in_rows + pr1 + pr2 - ((kernel_rows - 1) * dilation + 1)) // stride\n    out_cols = 1 + (in_cols + pc1 + pc2 - ((kernel_cols - 1) * dilation + 1)) // stride\n    X_col = np.zeros((W.size, out_rows * out_cols * n_ex))\n    for ex in range(n_ex):\n        for row in range(out_rows):\n            for col in range(out_cols):\n                row_start = row * stride\n                col_start = col * stride\n                for k_row in range(kernel_rows):\n                    for k_col in range(kernel_cols):\n                        for ch in range(in_ch):\n                            r = row_start + k_row * dilation\n                            c = col_start + k_col * dilation\n                            idx = ((k_row * kernel_cols + k_col) * in_ch + ch) * out_rows * out_cols * n_ex + row * out_cols * n_ex + col * n_ex + ex\n                            X_col[idx] = X_padded[ex, r, c, ch]\n    W_col = W.transpose(0, 1, 2, 3).reshape(W.size, out_ch)\n    H_col = X_col.T @ W_col\n    H = H_col.T.reshape(out_ch, out_rows, out_cols, n_ex).transpose(3, 1, 2, 0)\n    return H.tolist()"}
{"task_id": 354, "completion_id": 2, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif len(pad) == 2:\n        pad = (pad[0], pad[0], pad[1], pad[1])\n    if pad == 'same':\n        out_rows = in_rows\n        out_cols = in_cols\n        pr1 = (out_rows - 1) * stride + (kernel_rows - 1) * (dilation + 1) + 1 - in_rows\n        pr2 = pr1\n        pc1 = (out_cols - 1) * stride + (kernel_cols - 1) * (dilation + 1) + 1 - in_cols\n        pc2 = pc1\n    else:\n        (pr1, pr2, pc1, pc2) = pad\n        out_rows = (in_rows + pr1 + pr2 - (kernel_rows - 1) * (dilation + 1) - 1) // stride + 1\n        out_cols = (in_cols + pc1 + pc2 - (kernel_cols - 1) * (dilation + 1) - 1) // stride + 1\n    X_padded = np.pad(X, ((0, 0), (pr1, pr2), (pc1, pc2), 0), 'constant')\n\n    def im2col(image, kernel_rows, kernel_cols, stride, dilation):\n        (_, img_rows, img_cols, _) = image.shape\n        out_rows = (img_rows - (kernel_rows - 1) * (dilation + 1) - 1) // stride + 1\n        out_cols = (img_cols - (kernel_cols - 1) * (dilation + 1) - 1) // stride + 1\n        col = np.zeros((kernel_rows * kernel_cols * in_ch, out_rows * out_cols))\n        for i in range(out_rows):\n            for j in range(out_cols):\n                row = i * stride\n                col_idx = j * stride\n                for k in range(kernel_rows):\n                    for l in range(kernel_cols):\n                        for c in range(in_ch):\n                            col[(k * kernel_cols + l) * in_ch + c, i * out_cols + j] = image[0, row + k * (dilation + 1), col_idx + l * (dilation + 1), c]\n        return col\n    X_col = np.zeros((kernel_rows * kernel_cols * in_ch, out_rows * out_cols * n_ex))\n    for ex in range(n_ex):\n        X_col[:, ex * out_rows * out_cols:(ex + 1) * out_rows * out_cols] = im2col(X_padded[ex:ex + 1], kernel_rows, kernel_cols, stride, dilation)\n    W_col = W.reshape(kernel_rows * kernel_cols * in_ch, out_ch)\n    out_col = np.dot(W_col.T, X_col)\n    out = out_col.reshape(out_ch, out_rows, out_cols, n_ex).transpose(3, 1, 2, 0)\n    return out.tolist()"}
{"task_id": 354, "completion_id": 3, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad = (pad[0], pad[0], pad[1], pad[1])\n    elif isinstance(pad, str) and pad == 'same':\n        pr1 = (in_rows * (stride - 1) + kernel_rows - stride) // 2\n        pr2 = (in_rows * (stride - 1) + kernel_rows - stride + 1) // 2\n        pc1 = (in_cols * (stride - 1) + kernel_cols - stride) // 2\n        pc2 = (in_cols * (stride - 1) + kernel_cols - stride + 1) // 2\n        pad = (pr1, pr2, pc1, pc2)\n    X_padded = np.pad(X, ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0)), mode='constant')\n    out_rows = (in_rows + pad[0] + pad[1] - (dilation * (kernel_rows - 1) + 1)) // stride + 1\n    out_cols = (in_cols + pad[2] + pad[3] - (dilation * (kernel_cols - 1) + 1)) // stride + 1\n    cols = np.zeros((kernel_rows * kernel_cols * in_ch, n_ex * out_rows * out_cols))\n    for ex in range(n_ex):\n        for r in range(out_rows):\n            for c in range(out_cols):\n                r_start = r * stride\n                c_start = c * stride\n                r_end = r_start + (dilation * (kernel_rows - 1) + 1)\n                c_end = c_start + (dilation * (kernel_cols - 1) + 1)\n                cols[:, ex * out_rows * out_cols + r * out_cols + c] = X_padded[ex, r_start:r_end:dilation, c_start:c_end:dilation, :].flatten()\n    W_reshaped = W.transpose(2, 0, 1, 3).reshape(kernel_rows * kernel_cols * in_ch, out_ch)\n    out = np.dot(W_reshaped.T, cols)\n    out = out.reshape(out_ch, n_ex, out_rows, out_cols).transpose(1, 2, 3, 0)\n    return out.tolist()"}
{"task_id": 354, "completion_id": 4, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad = (pad[0], pad[0], pad[1], pad[1])\n    elif pad == 'same':\n        pr = ((in_rows - 1) * stride + kernel_rows - in_rows) // 2\n        pc = ((in_cols - 1) * stride + kernel_cols - in_cols) // 2\n        pad = (pr, pr, pc, pc)\n    (pr1, pr2, pc1, pc2) = pad\n    X_padded = np.pad(X, ((0, 0), (pr1, pr2), (pc1, pc2), 0), mode='constant')\n    out_rows = (in_rows + pr1 + pr2 - kernel_rows) // stride + 1\n    out_cols = (in_cols + pc1 + pc2 - kernel_cols) // stride + 1\n    im2col = []\n    for k in range(out_rows):\n        for l in range(out_cols):\n            r = k * stride\n            c = l * stride\n            col = X_padded[:, r:r + kernel_rows, c:c + kernel_cols, :].reshape(n_ex, -1)\n            im2col.append(col)\n    im2col = np.column_stack(im2col)\n    W_reshaped = W.transpose(3, 0, 1, 2).reshape(out_ch, -1)\n    Z = W_reshaped @ im2col\n    Z = Z.reshape(out_ch, out_rows, out_cols, n_ex).transpose(3, 1, 2, 0)\n    return Z.tolist()"}
{"task_id": 354, "completion_id": 5, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad = (pad[0], pad[0], pad[1], pad[1])\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        pass\n    elif pad == 'same':\n        out_rows = (in_rows + stride - 1) // stride\n        out_cols = (in_cols + stride - 1) // stride\n        pr1 = ((out_rows - 1) * stride + (kernel_rows - 1) * (dilation + 1) + 1 - in_rows) // 2\n        pr2 = (out_rows - 1) * stride + (kernel_rows - 1) * (dilation + 1) + 1 - in_rows - pr1\n        pc1 = ((out_cols - 1) * stride + (kernel_cols - 1) * (dilation + 1) + 1 - in_cols) // 2\n        pc2 = (out_cols - 1) * stride + (kernel_cols - 1) * (dilation + 1) + 1 - in_cols - pc1\n        pad = (pr1, pr2, pc1, pc2)\n    else:\n        pad = (0, 0, 0, 0)\n    (pr1, pr2, pc1, pc2) = pad\n    X_padded = np.pad(X, ((0, 0), (pr1, pr2), (pc1, pc2), 0), mode='constant', constant_values=0)\n    out_rows = (in_rows + pr1 + pr2 - (kernel_rows - 1) * (dilation + 1) - 1) // stride + 1\n    out_cols = (in_cols + pc1 + pc2 - (kernel_cols - 1) * (dilation + 1) - 1) // stride + 1\n    X_im2col = np.zeros((out_rows * out_cols, kernel_rows * kernel_cols * in_ch))\n    for i in range(out_rows):\n        for j in range(out_cols):\n            row_start = i * stride\n            row_end = row_start + kernel_rows * (dilation + 1)\n            col_start = j * stride\n            col_end = col_start + kernel_cols * (dilation + 1)\n            X_im2col[i * out_cols + j, :] = X_padded[:, row_start:row_end:dilation + 1, col_start:col_end:dilation + 1, :].reshape(n_ex, -1)\n    W_im2col = W.transpose(3, 2, 0, 1).reshape(out_ch, -1)\n    Y = X_im2col @ W_im2col.T\n    Y = Y.reshape(n_ex, out_rows, out_cols, out_ch)\n    return Y.tolist()"}
{"task_id": 354, "completion_id": 6, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    if isinstance(pad, int):\n        (pr, pc) = (pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (pr, pc) = pad\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        (pr1, pr2, pc1, pc2) = pad\n        (pr, pc) = (pr1 + pr2, pc1 + pc2)\n    elif pad == 'same':\n        pr = ((stride - 1) * in_rows - stride + kernel_rows + dilation * (kernel_rows - 1)) // 2\n        pc = ((stride - 1) * in_cols - stride + kernel_cols + dilation * (kernel_cols - 1)) // 2\n    else:\n        (pr, pc) = (0, 0)\n    out_rows = (in_rows + pr - (kernel_rows - 1) * dilation - 1) // stride + 1\n    out_cols = (in_cols + pc - (kernel_cols - 1) * dilation - 1) // stride + 1\n    X_padded = np.pad(X, ((0, 0), (pr // 2, pr - pr // 2), (pc // 2, pc - pc // 2), (0, 0)), mode='constant')\n    W_col = W.transpose(3, 0, 1, 2).reshape(out_ch, -1)\n    X_col = np.zeros((in_ch * (kernel_rows + (kernel_rows - 1) * dilation) * (kernel_cols + (kernel_cols - 1) * dilation), out_rows * out_cols * n_ex))\n    for ex in range(n_ex):\n        for i in range(out_rows):\n            for j in range(out_cols):\n                col_idx = i * out_cols + j\n                row_start = i * stride\n                col_start = j * stride\n                for k in range(kernel_rows):\n                    for l in range(kernel_cols):\n                        d_row = k * dilation\n                        d_col = l * dilation\n                        X_col[:, col_idx + ex * out_rows * out_cols] = X_padded[ex, row_start + d_row, col_start + d_col, :].flatten()\n    out_col = W_col @ X_col\n    out = out_col.reshape(out_ch, out_rows, out_cols, n_ex).transpose(3, 1, 2, 0)\n    return out.tolist()"}
{"task_id": 354, "completion_id": 7, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, in_ch, out_ch) = W.shape\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad = (pad[0], pad[0], pad[1], pad[1])\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        pass\n    elif pad == 'same':\n        pr = ((in_rows - 1) * stride + kernel_rows - in_rows + dilation * (kernel_rows - 1)) // 2\n        pc = ((in_cols - 1) * stride + kernel_cols - in_cols + dilation * (kernel_cols - 1)) // 2\n        pad = (pr, pr, pc, pc)\n    X_padded = np.pad(X, ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0)), mode='constant')\n    out_rows = (in_rows + pad[0] + pad[1] - (dilation * (kernel_rows - 1) + 1)) // stride + 1\n    out_cols = (in_cols + pad[2] + pad[3] - (dilation * (kernel_cols - 1) + 1)) // stride + 1\n    X_col = np.zeros((kernel_rows * kernel_cols * in_ch, out_rows * out_cols * n_ex))\n    for ex in range(n_ex):\n        for row in range(out_rows):\n            for col in range(out_cols):\n                r_start = row * stride\n                c_start = col * stride\n                r_end = r_start + dilation * (kernel_rows - 1) + 1\n                c_end = c_start + dilation * (kernel_cols - 1) + 1\n                X_col[:, row * out_cols * n_ex + col * n_ex + ex] = X_padded[ex, r_start:r_end:dilation, c_start:c_end:dilation, :].flatten()\n    W_col = W.transpose(3, 2, 0, 1).reshape(out_ch, -1)\n    out_col = W_col @ X_col\n    out = out_col.reshape(out_ch, out_rows, out_cols, n_ex).transpose(3, 1, 2, 0)\n    return out.tolist()"}
{"task_id": 354, "completion_id": 8, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, in_ch, out_ch) = W.shape\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (pr, pc) = pad\n        pad = (pr, pr, pc, pc)\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        pad = pad\n    elif pad == 'same':\n        pr1 = max((in_rows - 1) * stride - in_rows + kernel_rows, 0)\n        pc1 = max((in_cols - 1) * stride - in_cols + kernel_cols, 0)\n        pr2 = max((in_rows - 1) * stride - in_rows + kernel_rows - pr1, 0)\n        pc2 = max((in_cols - 1) * stride - in_cols + kernel_cols - pc1, 0)\n        pad = (pr1, pr2, pc1, pc2)\n    else:\n        pad = (0, 0, 0, 0)\n    X_padded = np.pad(X, ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0)), mode='constant')\n    out_rows = (in_rows + pad[0] + pad[1] - (kernel_rows - 1) * (dilation + 1)) // stride + 1\n    out_cols = (in_cols + pad[2] + pad[3] - (kernel_cols - 1) * (dilation + 1)) // stride + 1\n    X_cols = np.zeros((kernel_rows * kernel_cols * in_ch, out_rows * out_cols * n_ex))\n    for ex in range(n_ex):\n        for row in range(out_rows):\n            for col in range(out_cols):\n                r_start = row * stride\n                c_start = col * stride\n                r_end = r_start + kernel_rows * (dilation + 1)\n                c_end = c_start + kernel_cols * (dilation + 1)\n                patch = X_padded[ex, r_start:r_end:dilation + 1, c_start:c_end:dilation + 1, :]\n                X_cols[:, row * out_cols * n_ex + col * n_ex + ex] = patch.flatten()\n    W_col = W.reshape(kernel_rows * kernel_cols * in_ch, out_ch)\n    res = W_col.T @ X_cols\n    conv_result = res.reshape(out_ch, out_rows, out_cols, n_ex).transpose(3, 1, 2, 0)\n    return conv_result.tolist()"}
{"task_id": 354, "completion_id": 9, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            pad = (pad[0], pad[0], pad[1], pad[1])\n    elif pad == 'same':\n        pr1 = (stride * (in_rows - 1) + kernel_rows - in_rows) // 2\n        pr2 = (stride * (in_rows - 1) + kernel_rows - in_rows + 1) // 2\n        pc1 = (stride * (in_cols - 1) + kernel_cols - in_cols) // 2\n        pc2 = (stride * (in_cols - 1) + kernel_cols - in_cols + 1) // 2\n        pad = (pr1, pr2, pc1, pc2)\n    X_padded = np.pad(X, ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0)), mode='constant')\n    out_rows = (in_rows + pad[0] + pad[1] - (dilation * (kernel_rows - 1) + 1)) // stride + 1\n    out_cols = (in_cols + pad[2] + pad[3] - (dilation * (kernel_cols - 1) + 1)) // stride + 1\n    X_col = []\n    for ex in range(n_ex):\n        for i in range(out_rows):\n            for j in range(out_cols):\n                r = i * stride\n                c = j * stride\n                X_slice = X_padded[ex, r:r + (dilation * (kernel_rows - 1) + 1):dilation + 1, c:c + (dilation * (kernel_cols - 1) + 1):dilation + 1, :]\n                X_col.append(X_slice.flatten())\n    X_col = np.array(X_col).T\n    W_col = W.transpose(3, 2, 0, 1).reshape(out_ch, -1)\n    out_col = W_col @ X_col\n    out = out_col.reshape(out_ch, out_rows, out_cols, n_ex).transpose(3, 1, 2, 0)\n    return out.tolist()"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    centred_data = data - mean\n    if solver == 'svd':\n        (U, S, VT) = np.linalg.svd(centred_data, full_matrices=False)\n        eigen_vectors = VT.T\n        explained_variance = S ** 2 / (centred_data.shape[0] - 1)\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centred_data, rowvar=False, ddof=1)\n        (eigen_values, eigen_vectors) = np.linalg.eigh(cov_matrix)\n        explained_variance = eigen_values\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'\")\n    sorted_indices = np.argsort(explained_variance)[::-1]\n    eigen_vectors = eigen_vectors[:, sorted_indices]\n    explained_variance = explained_variance[sorted_indices]\n    n_components = min(n_components, eigen_vectors.shape[1])\n    eigen_vectors = eigen_vectors[:, :n_components]\n    explained_variance = explained_variance[:n_components]\n    for i in range(n_components):\n        max_index = np.argmax(np.abs(eigen_vectors[:, i]))\n        if eigen_vectors[max_index, i] < 0:\n            eigen_vectors[:, i] *= -1\n    scores = centred_data.dot(eigen_vectors)\n    total_variance = np.sum(explained_variance)\n    explained_variance_ratio = explained_variance / total_variance\n    scores_rounded = np.round(scores, 4).tolist()\n    explained_variance_ratio_rounded = np.round(explained_variance_ratio, 4).tolist()\n    return (scores_rounded, explained_variance_ratio_rounded)"}
{"task_id": 355, "completion_id": 1, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    mean_data = np.mean(data, axis=0)\n    centred_data = data - mean_data\n    if solver == 'svd':\n        (U, s, VT) = np.linalg.svd(centred_data)\n        principal_directions = VT.T\n        explained_variance = s ** 2 / (data.shape[0] - 1)\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centred_data, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n        sorted_indices = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[sorted_indices]\n        eigenvectors = eigenvectors[:, sorted_indices]\n        principal_directions = eigenvectors\n        explained_variance = eigenvalues\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'.\")\n    num_components = min(n_components, data.shape[1])\n    principal_directions = principal_directions[:, :num_components]\n    explained_variance = explained_variance[:num_components]\n    for i in range(num_components):\n        first_non_zero_idx = np.where(principal_directions[:, i] != 0)[0][0]\n        if principal_directions[first_non_zero_idx, i] < 0:\n            principal_directions[:, i] *= -1\n    scores = centred_data @ principal_directions\n    total_variance = np.sum(np.var(centred_data, axis=0))\n    explained_variance_ratio = explained_variance / total_variance\n    scores_rounded = scores.round(4).tolist()\n    explained_variance_ratio_rounded = explained_variance_ratio.round(4).tolist()\n    return (scores_rounded, explained_variance_ratio_rounded)"}
{"task_id": 355, "completion_id": 2, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    centered_data = data - mean\n    if solver == 'svd':\n        (U, S, VT) = np.linalg.svd(centered_data, full_matrices=False)\n        components = VT.T\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n        sorted_indices = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[sorted_indices]\n        eigenvectors = eigenvectors[:, sorted_indices]\n        components = eigenvectors\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'\")\n    components = components[:, :n_components]\n    eigenvalues = eigenvalues[:n_components]\n    for i in range(n_components):\n        first_non_zero_index = np.nonzero(components[:, i])[0][0]\n        if components[first_non_zero_index, i] < 0:\n            components[:, i] *= -1\n    scores = centered_data @ components\n    total_variance = np.sum(np.var(centered_data, axis=0, ddof=1))\n    explained_variance = eigenvalues / total_variance\n    explained_variance_ratio = explained_variance.tolist()\n    scores_rounded = scores.round(4).tolist()\n    explained_variance_ratio_rounded = [round(var, 4) for var in explained_variance_ratio]\n    return (scores_rounded, explained_variance_ratio_rounded)"}
{"task_id": 355, "completion_id": 3, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    centred_data = data - mean\n    if solver == 'svd':\n        (U, S, VT) = np.linalg.svd(centred_data, full_matrices=False)\n        principal_directions = VT.T\n        explained_variance = S ** 2 / (len(data) - 1)\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centred_data, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n        idx = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[idx]\n        eigenvectors = eigenvectors[:, idx]\n        explained_variance = eigenvalues\n        principal_directions = eigenvectors\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'.\")\n    total_variance = np.sum(explained_variance)\n    explained_variance_ratio = explained_variance / total_variance\n    sorted_indices = np.argsort(explained_variance_ratio)[::-1]\n    principal_directions = principal_directions[:, sorted_indices]\n    explained_variance_ratio = explained_variance_ratio[sorted_indices]\n    n_components = min(n_components, len(explained_variance_ratio))\n    principal_directions = principal_directions[:, :n_components]\n    explained_variance_ratio = explained_variance_ratio[:n_components]\n    for i in range(n_components):\n        first_nonzero_idx = np.flatnonzero(principal_directions[:, i])[0]\n        if principal_directions[first_nonzero_idx, i] < 0:\n            principal_directions[:, i] *= -1\n    scores = centred_data @ principal_directions\n    scores_rounded = np.round(scores, 4).tolist()\n    explained_variance_ratio_rounded = np.round(explained_variance_ratio, 4).tolist()\n    return (scores_rounded, explained_variance_ratio_rounded)"}
{"task_id": 355, "completion_id": 4, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    centred_data = data - mean\n    if solver == 'svd':\n        (U, S, Vt) = np.linalg.svd(centred_data, full_matrices=False)\n        eigenvalues = S ** 2 / (data.shape[0] - 1)\n        eigenvectors = Vt.T\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centred_data, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n        idx = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[idx]\n        eigenvectors = eigenvectors[:, idx]\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'\")\n    sorted_idx = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_idx]\n    sorted_eigenvectors = eigenvectors[:, sorted_idx]\n    n_components = min(n_components, len(sorted_eigenvalues))\n    kept_eigenvectors = sorted_eigenvectors[:, :n_components]\n    for i in range(n_components):\n        max_idx = np.argmax(np.abs(kept_eigenvectors[:, i]))\n        if kept_eigenvectors[max_idx, i] < 0:\n            kept_eigenvectors[:, i] *= -1\n    scores = centred_data @ kept_eigenvectors\n    total_variance = np.sum(sorted_eigenvalues)\n    explained_variance = sorted_eigenvalues[:n_components]\n    explained_variance_ratio = explained_variance / total_variance\n    scores_rounded = np.round(scores, 4).tolist()\n    explained_variance_ratio_rounded = np.round(explained_variance_ratio, 4).tolist()\n    return (scores_rounded, explained_variance_ratio_rounded)"}
{"task_id": 355, "completion_id": 5, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    mean_centered_data = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (U, S, VT) = np.linalg.svd(mean_centered_data, full_matrices=False)\n        directions = VT.T\n        explained_variance = np.square(S)\n    elif solver == 'eigen':\n        cov_matrix = np.cov(mean_centered_data, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n        sorted_indices = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[sorted_indices]\n        eigenvectors = eigenvectors[:, sorted_indices]\n        directions = eigenvectors\n        explained_variance = eigenvalues\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'\")\n    total_variance = np.sum(explained_variance)\n    explained_variance_ratio = explained_variance / total_variance\n    sorted_indices = np.argsort(explained_variance_ratio)[::-1]\n    directions = directions[:, sorted_indices]\n    explained_variance_ratio = explained_variance_ratio[sorted_indices]\n    n_components = min(n_components, directions.shape[1])\n    directions = directions[:, :n_components]\n    explained_variance_ratio = explained_variance_ratio[:n_components]\n    for i in range(directions.shape[1]):\n        first_non_zero_index = np.where(directions[:, i] != 0)[0][0]\n        if directions[first_non_zero_index, i] < 0:\n            directions[:, i] *= -1\n    scores = mean_centered_data @ directions\n    scores_rounded = scores.round(4).tolist()\n    explained_variance_ratio_rounded = explained_variance_ratio.round(4).tolist()\n    return (scores_rounded, explained_variance_ratio_rounded)"}
{"task_id": 355, "completion_id": 6, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    centred_data = data - mean\n    if solver == 'svd':\n        (U, S, Vt) = np.linalg.svd(centred_data, full_matrices=False)\n        principal_components = Vt.T\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centred_data, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n        idx = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[idx]\n        eigenvectors = eigenvectors[:, idx]\n        principal_components = eigenvectors\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'\")\n    n_components = min(n_components, principal_components.shape[1])\n    principal_components = principal_components[:, :n_components]\n    for i in range(n_components):\n        max_idx = np.argmax(np.abs(principal_components[:, i]))\n        if principal_components[max_idx, i] < 0:\n            principal_components[:, i] *= -1\n    scores = centred_data @ principal_components\n    total_variance = np.sum(eigenvalues)\n    explained_variance = eigenvalues[:n_components]\n    explained_variance_ratio = explained_variance / total_variance\n    scores_rounded = np.round(scores, 4).tolist()\n    explained_variance_ratio_rounded = np.round(explained_variance_ratio, 4).tolist()\n    return (scores_rounded, explained_variance_ratio_rounded)"}
{"task_id": 355, "completion_id": 7, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    centred_data = data - mean\n    if solver == 'svd':\n        (U, s, Vt) = np.linalg.svd(centred_data, full_matrices=False)\n        explained_variance = s ** 2 / (centred_data.shape[0] - 1)\n        components = Vt.T\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centred_data, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n        idx = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[idx]\n        eigenvectors = eigenvectors[:, idx]\n        explained_variance = eigenvalues / (centred_data.shape[0] - 1)\n        components = eigenvectors\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'\")\n    n_components = min(n_components, components.shape[1])\n    components = components[:, :n_components]\n    explained_variance = explained_variance[:n_components]\n    for i in range(n_components):\n        idx = np.argmax(np.abs(components[:, i]))\n        if components[idx, i] < 0:\n            components[:, i] *= -1\n    scores = centred_data @ components\n    scores_rounded = scores.round(4).tolist()\n    explained_variance_ratio_rounded = (explained_variance / np.sum(explained_variance)).round(4).tolist()\n    return (scores_rounded, explained_variance_ratio_rounded)"}
{"task_id": 355, "completion_id": 8, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    centred_data = data - mean\n    if solver == 'svd':\n        (u, s, vh) = np.linalg.svd(centred_data, full_matrices=False)\n        principal_directions = vh.T\n        singular_values = s\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centred_data, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n        idx = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[idx]\n        eigenvectors = eigenvectors[:, idx]\n        principal_directions = eigenvectors\n        singular_values = np.sqrt(eigenvalues * (data.shape[0] - 1))\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'\")\n    sorted_idx = np.argsort(singular_values)[::-1]\n    principal_directions = principal_directions[:, sorted_idx]\n    singular_values = singular_values[sorted_idx]\n    n_components = min(n_components, principal_directions.shape[1])\n    principal_directions = principal_directions[:, :n_components]\n    singular_values = singular_values[:n_components]\n    for i in range(n_components):\n        max_idx = np.where(principal_directions[:, i] != 0)[0][0]\n        if principal_directions[max_idx, i] < 0:\n            principal_directions[:, i] *= -1\n    scores = centred_data @ principal_directions\n    total_variance = np.sum(singular_values ** 2) / (data.shape[0] - 1)\n    explained_variance = singular_values ** 2 / (data.shape[0] - 1)\n    explained_variance_ratio = explained_variance / total_variance\n    scores = np.round(scores, 4).tolist()\n    explained_variance_ratio = np.round(explained_variance_ratio, 4).tolist()\n    return (scores, explained_variance_ratio)"}
{"task_id": 355, "completion_id": 9, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    mean = np.mean(data, axis=0)\n    centered_data = data - mean\n    if solver == 'svd':\n        (U, S, Vt) = np.linalg.svd(centered_data, full_matrices=False)\n        components = Vt.T\n        explained_variance = S ** 2 / (data.shape[0] - 1)\n    elif solver == 'eigen':\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n        idx = np.argsort(eigenvalues)[::-1]\n        components = eigenvectors[:, idx]\n        explained_variance = eigenvalues[idx]\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'.\")\n    sorted_indices = np.argsort(explained_variance)[::-1]\n    components = components[:, sorted_indices]\n    explained_variance = explained_variance[sorted_indices]\n    n_components = min(n_components, components.shape[1])\n    components = components[:, :n_components]\n    explained_variance = explained_variance[:n_components]\n    for i in range(n_components):\n        max_idx = np.argmax(np.abs(components[:, i]))\n        if components[max_idx, i] < 0:\n            components[:, i] *= -1\n    scores = centered_data @ components\n    total_variance = np.sum(explained_variance)\n    explained_variance_ratio = explained_variance / total_variance\n    scores_rounded = scores.round(4).tolist()\n    explained_variance_ratio_rounded = explained_variance_ratio.round(4).tolist()\n    return (scores_rounded, explained_variance_ratio_rounded)"}
{"task_id": 356, "completion_id": 0, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return int(np.argmax(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 1, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return int(np.argmax(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 2, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return int(np.argmax(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 3, "solution": "import numpy as np\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return int(np.argmax(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 4, "solution": "import numpy\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return int(numpy.argmax(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 5, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return int(np.argmax(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 6, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return int(numpy.argmax(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 7, "solution": "import numpy\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return int(numpy.argmax(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 8, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return int(np.argmax(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 356, "completion_id": 9, "solution": "import numpy\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return int(numpy.argmax(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = np.array(data[:K], dtype=float)\n    for _ in range(max_iters):\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.zeros_like(centroids)\n        for k in range(K):\n            assigned = data[labels == k]\n            if len(assigned) > 0:\n                new_centroids[k] = assigned.mean(axis=0)\n            else:\n                new_centroids[k] = centroids[k]\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    centroids = sorted(centroids, key=lambda x: tuple(x))\n    rounded_centroids = np.round(centroids, 4).tolist()\n    return rounded_centroids\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [9, 8], [8, 9]])\nK = 2"}
{"task_id": 357, "completion_id": 1, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([data[labels == k].mean(axis=0) for k in range(K)])\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    centroids = np.round(centroids[np.lexsort((centroids[:, 1], centroids[:, 0]))], 4)\n    return centroids.tolist()\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [9, 8], [8, 9]])\nK = 2"}
{"task_id": 357, "completion_id": 2, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([data[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        if np.all(np.linalg.norm(new_centroids - centroids) < 1e-06):\n            break\n        centroids = new_centroids\n    sorted_centroids = sorted(centroids, key=lambda x: tuple(x))\n    rounded_centroids = [list(np.round(centroid, 4)) for centroid in sorted_centroids]\n    return rounded_centroids"}
{"task_id": 357, "completion_id": 3, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([data[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    sorted_centroids = sorted(np.round(centroids, 4), key=lambda x: tuple(x))\n    return sorted_centroids"}
{"task_id": 357, "completion_id": 4, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K].copy()\n    tolerance = 1e-06\n    for _ in range(max_iters):\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        closest_centroids = np.argmin(distances, axis=1)\n        new_centroids = np.array([data[closest_centroids == k].mean(axis=0) if any(closest_centroids == k) else centroids[k] for k in range(K)])\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < tolerance):\n            break\n        centroids = new_centroids\n    sorted_centroids = np.round(sorted(centroids, key=lambda x: tuple(x)), 4).tolist()\n    return sorted_centroids\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [9, 8], [8, 9]])\nK = 2"}
{"task_id": 357, "completion_id": 5, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    if K == 1:\n        return [list(np.round(np.mean(data, axis=0), 4))]\n    centroids = data[:K].astype(float)\n    for _ in range(max_iters):\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([np.mean(data[labels == k], axis=0) for k in range(K)])\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-06):\n            break\n        centroids = new_centroids\n    sorted_centroids = np.round(centroids[np.lexsort(np.transpose(centroids))], 4).tolist()\n    return sorted_centroids"}
{"task_id": 357, "completion_id": 6, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K].astype(float)\n    for _ in range(max_iters):\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([data[labels == k].mean(axis=0) if (labels == k).any() else centroids[k] for k in range(K)])\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    centroids_sorted = np.round(np.sort(centroids, axis=0), 4)\n    return centroids_sorted.tolist()\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [9, 8], [8, 9]])\nK = 2"}
{"task_id": 357, "completion_id": 7, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([data[labels == k].mean(axis=0) for k in range(K)])\n        for k in range(K):\n            if len(data[labels == k]) == 0:\n                new_centroids[k] = centroids[k]\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-06):\n            break\n        centroids = new_centroids\n    sorted_centroids = sorted(centroids, key=lambda x: tuple(x))\n    rounded_centroids = [list(map(lambda x: round(x, 4), centroid)) for centroid in sorted_centroids]\n    return rounded_centroids\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [9, 8], [8, 9]])\nK = 2"}
{"task_id": 357, "completion_id": 8, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    if K == 1:\n        centroid = np.mean(data, axis=0)\n        return [centroid.round(4).tolist()]\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.zeros_like(centroids)\n        for k in range(K):\n            cluster_points = data[labels == k]\n            if len(cluster_points) > 0:\n                new_centroids[k] = cluster_points.mean(axis=0)\n            else:\n                new_centroids[k] = centroids[k]\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    sorted_centroids = centroids.round(4).tolist()\n    sorted_centroids.sort()\n    return sorted_centroids\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [9, 8], [8, 9]])\nK = 2"}
{"task_id": 357, "completion_id": 9, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K].copy().astype(float)\n    for _ in range(max_iters):\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([data[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-06):\n            break\n        centroids = new_centroids\n    centroids_sorted = sorted(centroids, key=lambda x: tuple(x))\n    centroids_rounded = np.round(centroids_sorted, 4).tolist()\n    return centroids_rounded\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [9, 8], [8, 9]])\nK = 2"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = np.sum(matrix, axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    stochastic_matrix = matrix / row_sums[:, np.newaxis]\n    stochastic_matrix_rounded = np.round(stochastic_matrix, 4)\n    return stochastic_matrix_rounded.tolist()"}
{"task_id": 362, "completion_id": 1, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = matrix.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    stochastic_matrix = matrix / row_sums[:, np.newaxis]\n    stochastic_matrix_rounded = np.round(stochastic_matrix, 4)\n    return stochastic_matrix_rounded.tolist()"}
{"task_id": 362, "completion_id": 2, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = matrix.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    normalized_matrix = matrix / row_sums[:, np.newaxis]\n    normalized_matrix_rounded = np.round(normalized_matrix, 4)\n    return normalized_matrix_rounded.tolist()"}
{"task_id": 362, "completion_id": 3, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = np.sum(matrix, axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    stochastic_matrix = matrix / row_sums[:, np.newaxis]\n    stochastic_matrix_rounded = np.round(stochastic_matrix, 4).tolist()\n    return stochastic_matrix_rounded"}
{"task_id": 362, "completion_id": 4, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation. If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = matrix.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    stochastic_matrix = matrix / row_sums[:, np.newaxis]\n    stochastic_matrix_rounded = np.round(stochastic_matrix, 4)\n    return stochastic_matrix_rounded.tolist()"}
{"task_id": 362, "completion_id": 5, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = np.sum(matrix, axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    stochastic_matrix = matrix / row_sums[:, np.newaxis]\n    stochastic_matrix_rounded = np.round(stochastic_matrix, 4)\n    return stochastic_matrix_rounded.tolist()"}
{"task_id": 362, "completion_id": 6, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = np.sum(matrix, axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    stochastic_matrix = matrix / row_sums[:, np.newaxis]\n    stochastic_matrix_rounded = np.round(stochastic_matrix, 4)\n    return stochastic_matrix_rounded.tolist()"}
{"task_id": 362, "completion_id": 7, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = np.sum(matrix, axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    stochastic_matrix = matrix / row_sums[:, np.newaxis]\n    stochastic_matrix_rounded = np.round(stochastic_matrix, 4)\n    return stochastic_matrix_rounded.tolist()"}
{"task_id": 362, "completion_id": 8, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = matrix.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    stochastic_matrix = matrix / row_sums[:, np.newaxis]\n    stochastic_matrix = np.round(stochastic_matrix, 4)\n    return stochastic_matrix.tolist()"}
{"task_id": 362, "completion_id": 9, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    matrix = np.array(data, dtype=float)\n    row_sums = np.sum(matrix, axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    stochastic_matrix = matrix / row_sums[:, np.newaxis]\n    stochastic_matrix = np.round(stochastic_matrix, 4)\n    return stochastic_matrix.tolist()"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def is_space_continuous(space: Space, is_tuple: bool) -> bool:\n        if is_tuple:\n            if isinstance(space, Tuple):\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces))\n            elif isinstance(space, Dict):\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces.values()))\n            else:\n                return False\n        else:\n            return isinstance(space, Box)\n    cont_action = is_space_continuous(env.action_space, tuple_action)\n    cont_obs = is_space_continuous(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 1, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def is_box_space(space: Space) -> bool:\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, (Tuple, Dict)):\n            sub_spaces = space.spaces if isinstance(space, Dict) else space.spaces\n            return all((is_box_space(sub_space) for sub_space in sub_spaces))\n        else:\n            return False\n    cont_action = is_box_space(env.action_space) if tuple_action else isinstance(env.action_space, Box)\n    cont_obs = is_box_space(env.observation_space) if tuple_obs else isinstance(env.observation_space, Box)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 2, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def is_box(space: Space) -> bool:\n        return isinstance(space, Box)\n\n    def are_all_boxes(spaces: Iterable[Space]) -> bool:\n        return all((is_box(space) for space in spaces))\n    cont_action = False\n    cont_obs = False\n    if tuple_action:\n        if isinstance(env.action_space, Tuple):\n            cont_action = are_all_boxes(env.action_space.spaces)\n        elif isinstance(env.action_space, Dict):\n            cont_action = are_all_boxes(env.action_space.spaces.values())\n    else:\n        cont_action = is_box(env.action_space)\n    if tuple_obs:\n        if isinstance(env.observation_space, Tuple):\n            cont_obs = are_all_boxes(env.observation_space.spaces)\n        elif isinstance(env.observation_space, Dict):\n            cont_obs = are_all_boxes(env.observation_space.spaces.values())\n    else:\n        cont_obs = is_box(env.observation_space)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 3, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def check_space(space: Space, is_composite: bool) -> bool:\n        if is_composite:\n            if isinstance(space, Tuple):\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces))\n            elif isinstance(space, Dict):\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces.values()))\n            else:\n                return False\n        else:\n            return isinstance(space, Box)\n    cont_action = check_space(env.action_space, tuple_action)\n    cont_obs = check_space(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 4, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def check_space(space: Space, is_tuple: bool) -> bool:\n        if is_tuple:\n            if isinstance(space, Tuple):\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces))\n            elif isinstance(space, Dict):\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces.values()))\n            else:\n                return False\n        else:\n            return isinstance(space, Box)\n    cont_action = check_space(env.action_space, tuple_action)\n    cont_obs = check_space(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 5, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def check_continuous(space: Space, is_tuple: bool) -> bool:\n        if is_tuple:\n            if isinstance(space, Tuple):\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces))\n            elif isinstance(space, Dict):\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces.values()))\n            else:\n                return False\n        else:\n            return isinstance(space, Box)\n    cont_action = check_continuous(env.action_space, tuple_action)\n    cont_obs = check_continuous(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 6, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def is_space_continuous(space: Space, is_composite: bool) -> bool:\n        if is_composite:\n            if isinstance(space, Tuple):\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces))\n            elif isinstance(space, Dict):\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces.values()))\n        else:\n            return isinstance(space, Box)\n        return False\n    cont_action = is_space_continuous(env.action_space, tuple_action)\n    cont_obs = is_space_continuous(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 7, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def check_continuous(space: Space, composite: bool) -> bool:\n        if composite:\n            if isinstance(space, Tuple):\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces))\n            elif isinstance(space, Dict):\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces.values()))\n            else:\n                return False\n        else:\n            return isinstance(space, Box)\n    cont_action = check_continuous(env.action_space, tuple_action)\n    cont_obs = check_continuous(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 8, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def check_space_continuous(space: Space, is_tuple: bool) -> bool:\n        if is_tuple:\n            if isinstance(space, Tuple):\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces))\n            elif isinstance(space, Dict):\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces.values()))\n            else:\n                return False\n        else:\n            return isinstance(space, Box)\n    cont_action = check_space_continuous(env.action_space, tuple_action)\n    cont_obs = check_space_continuous(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)"}
{"task_id": 363, "completion_id": 9, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def check_space(space: Space, is_tuple: bool) -> bool:\n        if is_tuple:\n            if isinstance(space, Tuple):\n                return all((isinstance(s, Box) for s in space.spaces))\n            elif isinstance(space, Dict):\n                return all((isinstance(s, Box) for s in space.spaces.values()))\n            else:\n                return False\n        else:\n            return isinstance(space, Box)\n    cont_action = check_space(env.action_space, tuple_action)\n    cont_obs = check_space(env.observation_space, tuple_obs)\n    return (cont_action, cont_obs)"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        exp_running_pred = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        softmax_running_pred = exp_running_pred / np.sum(exp_running_pred, axis=1, keepdims=True)\n        return np.argmax(softmax_running_pred, axis=1)"}
{"task_id": 369, "completion_id": 1, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        probabilities = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities /= np.sum(probabilities, axis=1, keepdims=True)\n        return np.argmax(probabilities, axis=1)"}
{"task_id": 369, "completion_id": 2, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        probabilities = np.exp(running_pred) / np.sum(np.exp(running_pred), axis=1, keepdims=True)\n        predicted_classes = np.argmax(probabilities, axis=1)\n        return predicted_classes\nlearning_rate = 0.1"}
{"task_id": 369, "completion_id": 3, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        probabilities = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities /= np.sum(probabilities, axis=1, keepdims=True)\n        return np.argmax(probabilities, axis=1)"}
{"task_id": 369, "completion_id": 4, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for update in updates:\n        running_pred -= learning_rate * update\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        probabilities = softmax(running_pred)\n        predicted_classes = np.argmax(probabilities, axis=1)\n        return predicted_classes\ndef softmax(logits: np.ndarray) -> np.ndarray:\n    \"\"\"Compute the softmax of the logits array row-wise.\"\"\"\n    exp_logits = np.exp(logits - np.max(logits, axis=1, keepdims=True))\n    return exp_logits / np.sum(exp_logits, axis=1, keepdims=True)"}
{"task_id": 369, "completion_id": 5, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for update in updates:\n        running_pred -= learning_rate * update\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        probabilities = softmax(running_pred)\n        return np.argmax(probabilities, axis=1)\ndef softmax(x: np.ndarray) -> np.ndarray:\n    \"\"\"Compute the softmax function for each row of the input array.\"\"\"\n    e_x = np.exp(x - np.max(x, axis=1, keepdims=True))\n    return e_x / e_x.sum(axis=1, keepdims=True)"}
{"task_id": 369, "completion_id": 6, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        probabilities = softmax(running_pred)\n        return np.argmax(probabilities, axis=1)\ndef softmax(logits: np.ndarray) -> np.ndarray:\n    \"\"\"Compute the softmax of each row of logits.\"\"\"\n    max_logit = np.max(logits, axis=1, keepdims=True)\n    exp_logits = np.exp(logits - max_logit)\n    return exp_logits / np.sum(exp_logits, axis=1, keepdims=True)"}
{"task_id": 369, "completion_id": 7, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for update in updates:\n        running_pred -= learning_rate * update\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        softmax_pred = np.exp(running_pred) / np.sum(np.exp(running_pred), axis=1, keepdims=True)\n        return np.argmax(softmax_pred, axis=1)"}
{"task_id": 369, "completion_id": 8, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        probabilities = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities /= probabilities.sum(axis=1, keepdims=True)\n        return np.argmax(probabilities, axis=1)\nlearning_rate = 0.1"}
{"task_id": 369, "completion_id": 9, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    if not updates:\n        raise ValueError('The updates list should not be empty.')\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        softmax_pred = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        softmax_pred /= softmax_pred.sum(axis=1, keepdims=True)\n        return np.argmax(softmax_pred, axis=1)"}
{"task_id": 371, "completion_id": 0, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    effective_kernel_width = (kernel_width - 1) * dilation + 1\n    if isinstance(pad, tuple):\n        (p_left, p_right) = pad\n    elif isinstance(pad, int):\n        p_left = p_right = pad\n    elif pad == 'same':\n        out_len = np.ceil(signal_length / stride)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        p_left = int(np.floor(total_pad / 2))\n        p_right = int(total_pad - p_left)\n    else:\n        raise ValueError('Invalid padding argument')\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    output_length = int((signal_length + p_left + p_right - effective_kernel_width) / stride) + 1\n    output_volume = np.zeros((n_examples, output_length, out_channels))\n    for i in range(n_examples):\n        for j in range(output_length):\n            start = j * stride\n            end = start + effective_kernel_width\n            receptive_field = X_padded[i, start:end:stride if dilation == 0 else 1, :]\n            if dilation > 0:\n                receptive_field = receptive_field[:, ::dilation + 1]\n            for k in range(out_channels):\n                output_volume[i, j, k] = np.sum(receptive_field * W[:, :, k])\n    return output_volume.tolist()"}
{"task_id": 371, "completion_id": 1, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    effective_kernel = (kernel_width - 1) * dilation + kernel_width\n    if isinstance(pad, int):\n        pad_left = pad_right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (pad_left, pad_right) = pad\n    elif pad == 'same':\n        out_len = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - signal_length)\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n    else:\n        raise ValueError('Invalid padding argument')\n    X_padded = np.pad(X, ((0, 0), (pad_left, pad_right), (0, 0)), mode='constant', constant_values=0)\n    out_length = (X_padded.shape[1] - effective_kernel) // stride + 1\n    output = np.zeros((n_examples, out_length, out_channels))\n    for example in range(n_examples):\n        for out_channel in range(out_channels):\n            for i in range(out_length):\n                x_start = i * stride\n                x_end = x_start + effective_kernel\n                x_slice = X_padded[example, x_start:x_end:1 + dilation]\n                output[example, i, out_channel] = np.sum(x_slice * W[:, :, out_channel])\n    return output.tolist()"}
{"task_id": 371, "completion_id": 2, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    effective_kernel_width = (kernel_width - 1) * dilation + kernel_width\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        (p_left, p_right) = pad\n    elif pad == 'same':\n        out_len = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError('Invalid padding type')\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    output_length = (signal_length + p_left + p_right - effective_kernel_width) // stride + 1\n    output = np.zeros((n_examples, output_length, out_channels))\n    for example in range(n_examples):\n        for out_channel in range(out_channels):\n            for i in range(output_length):\n                start = i * stride\n                end = start + effective_kernel_width\n                input_slice = X_padded[example, start:end:1 + dilation, :]\n                output[example, i, out_channel] = np.sum(W[:, :, out_channel] * input_slice)\n    return output.tolist()"}
{"task_id": 371, "completion_id": 3, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, in_channels_W, out_channels) = W.shape\n    effective_kernel_width = (kernel_width - 1) * dilation + 1\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        (p_left, p_right) = pad\n    elif pad == 'same':\n        out_len = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError('Invalid padding argument')\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant', constant_values=0)\n    out_length = (X_padded.shape[1] - effective_kernel_width) // stride + 1\n    output = np.zeros((n_examples, out_length, out_channels))\n    for ex in range(n_examples):\n        for oc in range(out_channels):\n            for i in range(out_length):\n                h_start = i * stride\n                h_end = h_start + effective_kernel_width\n                region = X_padded[ex, h_start:h_end:1 + dilation, :]\n                output[ex, i, oc] = np.sum(region * W[:, :, oc])\n    return output.tolist()"}
{"task_id": 371, "completion_id": 4, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    effective_kernel = (kernel_width - 1) * dilation + 1\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        (p_left, p_right) = pad\n    elif pad == 'same':\n        out_len = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError('Invalid padding value')\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    output_length = 1 + (X_padded.shape[1] - effective_kernel) // stride\n    output = np.zeros((n_examples, output_length, out_channels))\n    for example in range(n_examples):\n        for out_channel in range(out_channels):\n            for idx in range(output_length):\n                start = idx * stride\n                end = start + effective_kernel\n                window = X_padded[example, start:end:stride if dilation == 0 else 1, :]\n                output[example, idx, out_channel] = np.sum(window * W[:, :, out_channel])\n    return output.tolist()"}
{"task_id": 371, "completion_id": 5, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    effective_kernel_width = kernel_width + (kernel_width - 1) * dilation\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        (p_left, p_right) = pad\n    elif pad == 'same':\n        out_len = np.ceil(signal_length / stride)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        p_left = int(np.floor(total_pad / 2))\n        p_right = int(total_pad - p_left)\n    else:\n        raise ValueError(\"Pad must be an integer, a tuple, or the string 'same'.\")\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    out_length = (signal_length + p_left + p_right - effective_kernel_width) // stride + 1\n    out = np.zeros((n_examples, out_length, out_channels))\n    for i in range(n_examples):\n        for j in range(out_length):\n            for k in range(out_channels):\n                h_start = j * stride\n                h_end = h_start + effective_kernel_width\n                for ci in range(in_channels):\n                    kernel_slice = W[:, ci, k][::dilation + 1]\n                    signal_slice = X_padded[i, h_start:h_end:stride + 1, ci]\n                    out[i, j, k] += np.sum(kernel_slice * signal_slice)\n    return out.tolist()"}
{"task_id": 371, "completion_id": 6, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    effective_kernel_width = (kernel_width - 1) * dilation + 1\n    if isinstance(pad, int):\n        pad_left = pad\n        pad_right = pad\n    elif isinstance(pad, tuple):\n        (pad_left, pad_right) = pad\n    elif pad == 'same':\n        out_len = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n    else:\n        raise ValueError('Invalid padding argument')\n    X_padded = np.pad(X, ((0, 0), (pad_left, pad_right), (0, 0)), mode='constant')\n    output_length = (X_padded.shape[1] - effective_kernel_width) // stride + 1\n    output_volume = np.zeros((n_examples, output_length, out_channels))\n    for i in range(n_examples):\n        for j in range(output_length):\n            start = j * stride\n            end = start + effective_kernel_width\n            region = X_padded[i, start:end, :, np.newaxis]\n            if dilation > 0:\n                region_with_dilation = np.insert(region, slice(1, None), np.zeros((dilation, in_channels, 1)), axis=0)\n            else:\n                region_with_dilation = region\n            output_volume[i, j, :] = np.sum(region_with_dilation * W, axis=(0, 1))\n    return output_volume.tolist()"}
{"task_id": 371, "completion_id": 7, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, l_in, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    effective_kernel = (kernel_width - 1) * dilation + 1\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        (p_left, p_right) = pad\n    elif pad == 'same':\n        out_len = np.ceil(l_in / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - l_in)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError(\"Invalid padding value. Must be an int, tuple, or 'same'.\")\n    X_pad = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant', constant_values=0)\n    l_out = (l_in + p_left + p_right - effective_kernel) // stride + 1\n    Y = np.zeros((n_examples, l_out, out_channels))\n    for i in range(n_examples):\n        for j in range(out_channels):\n            for k in range(l_out):\n                start = k * stride\n                end = start + effective_kernel\n                x_slice = X_pad[i, start:end:1 + dilation]\n                Y[i, k, j] = np.sum(x_slice * W[:, :, j])\n    return Y.tolist()"}
{"task_id": 371, "completion_id": 8, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    effective_kernel_width = (kernel_width - 1) * dilation + 1\n    if pad == 'same':\n        out_len = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        (p_left, p_right) = pad\n    else:\n        raise ValueError('Invalid padding type')\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant', constant_values=0)\n    padded_length = X_padded.shape[1]\n    output_length = (padded_length - effective_kernel_width) // stride + 1\n    output = np.zeros((n_examples, output_length, out_channels))\n    for example in range(n_examples):\n        for out_channel in range(out_channels):\n            for position in range(output_length):\n                start = position * stride\n                end = start + effective_kernel_width\n                indices = start + np.arange(kernel_width) * (dilation + 1)\n                output[example, position, out_channel] = np.sum(X_padded[example, indices, :] * W[:, :, out_channel])\n    return output.tolist()"}
{"task_id": 371, "completion_id": 9, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    effective_kernel_width = kernel_width + (kernel_width - 1) * (dilation - 1)\n    if isinstance(pad, tuple):\n        (p_left, p_right) = pad\n    elif isinstance(pad, int):\n        p_left = p_right = pad\n    elif pad == 'same':\n        out_len = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError(\"Invalid padding type. Must be int, tuple, or 'same'.\")\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    out_length = 1 + (X_padded.shape[1] - effective_kernel_width) // stride\n    output = np.zeros((n_examples, out_length, out_channels))\n    for i in range(n_examples):\n        for j in range(out_length):\n            for k in range(out_channels):\n                x_start = j * stride\n                x_end = x_start + effective_kernel_width\n                region = X_padded[i, x_start:x_end, :]\n                for w in range(kernel_width):\n                    for c in range(in_channels):\n                        output[i, j, k] += np.sum(region[w * dilation:w * dilation + 1, c] * W[w, c, k])\n    return output.tolist()"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    y = np.array(y)\n    (unique_labels, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 1, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    y = np.array(y)\n    N = len(y)\n    (unique_classes, counts) = np.unique(y, return_counts=True)\n    p_c = counts / N\n    gini_impurity = 1 - np.sum(p_c ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 2, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    y = np.array(y)\n    N = len(y)\n    (unique_classes, counts) = np.unique(y, return_counts=True)\n    p_c = counts / N\n    gini_impurity = 1 - np.sum(p_c ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 3, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    y = np.array(y)\n    N = len(y)\n    (unique_classes, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / N\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 4, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    if not isinstance(y, np.ndarray):\n        y = np.array(y)\n    N = len(y)\n    (unique_classes, counts) = np.unique(y, return_counts=True)\n    p_c = counts / N\n    gini_impurity = 1 - np.sum(p_c ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 5, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    y = np.array(y)\n    class_counts = np.bincount(y)\n    N = len(y)\n    p = class_counts / N\n    gini_impurity = 1 - np.sum(p ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 6, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    y = np.array(y)\n    (unique, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 7, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    y = np.array(y)\n    (unique_classes, counts) = np.unique(y, return_counts=True)\n    N = len(y)\n    p = counts / N\n    gini_impurity = 1 - np.sum(p ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 8, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    y = np.array(y)\n    class_counts = np.bincount(y)\n    N = len(y)\n    p_c = class_counts / N\n    gini_impurity = 1.0 - np.sum(p_c ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 373, "completion_id": 9, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    y = np.array(y)\n    (unique_classes, counts) = np.unique(y, return_counts=True)\n    N = len(y)\n    p_c = counts / N\n    gini_impurity = 1 - np.sum(p_c ** 2)\n    return round(gini_impurity, 4)"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    if X.shape[0] != y.size:\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_pred = X @ theta + b\n        error = y_pred - y\n        dw = 2 / m * (X.T @ error)\n        db = 2 / m * np.sum(error)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    return (theta.round(4).tolist(), round(b, 4))"}
{"task_id": 374, "completion_id": 1, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_hat = np.dot(X, theta) + b\n        dw = 2 / m * np.dot(X.T, y_hat - y)\n        db = 2 / m * np.sum(y_hat - y)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    return ([round(t, 4) for t in theta], round(b, 4))"}
{"task_id": 374, "completion_id": 2, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    y = y.reshape(-1, 1)\n    for _ in range(n_iterations):\n        y_pred = X @ theta + b\n        errors = y_pred - y\n        dw = 2 / m * (X.T @ errors).flatten()\n        db = 2 / m * np.sum(errors)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    return ([round(val, 4) for val in theta], round(b, 4))"}
{"task_id": 374, "completion_id": 3, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    b = 0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, theta) + b\n        error = y_pred - y\n        dw = 2 / m * np.dot(X.T, error)\n        db = 2 / m * np.sum(error)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    return ([round(w, 4) for w in theta], round(b, 4))"}
{"task_id": 374, "completion_id": 4, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n    \n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, theta) + b\n        dw = 2 / m * np.dot(X.T, y_pred - y)\n        db = 2 / m * np.sum(y_pred - y)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    return ([round(t, 4) for t in theta], round(b, 4))"}
{"task_id": 374, "completion_id": 5, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    y = y.reshape(-1, 1)\n    for _ in range(n_iterations):\n        y_pred = X.dot(theta) + b\n        diff = y_pred - y\n        dw = 2 / m * X.T.dot(diff)\n        db = 2 / m * np.sum(diff)\n        theta -= learning_rate * dw.flatten()\n        b -= learning_rate * db\n    return ([round(w, 4) for w in theta], round(b, 4))"}
{"task_id": 374, "completion_id": 6, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    y = y.reshape(m, 1)\n    for _ in range(n_iterations):\n        y_pred = X @ theta + b\n        error = y_pred - y\n        dw = 2 / m * X.T @ error\n        db = 2 / m * np.sum(error)\n        theta -= learning_rate * dw.flatten()\n        b -= learning_rate * db\n    return ([round(w, 4) for w in theta], round(b, 4))"}
{"task_id": 374, "completion_id": 7, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_pred = X @ theta + b\n        error = y_pred - y\n        dw = 2 / m * X.T @ error\n        db = 2 / m * np.sum(error)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    return (theta.round(4).tolist(), round(b, 4))"}
{"task_id": 374, "completion_id": 8, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_pred = X @ theta + b\n        errors = y_pred - y\n        dw = 2 / m * (X.T @ errors)\n        db = 2 / m * np.sum(errors)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    theta_rounded = [round(t, 4) for t in theta]\n    b_rounded = round(b, 4)\n    return (theta_rounded, b_rounded)"}
{"task_id": 374, "completion_id": 9, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    for _ in range(n_iterations):\n        y_pred = X @ theta + b\n        errors = y_pred - y\n        dw = 2 / m * (X.T @ errors)\n        db = 2 / m * np.sum(errors)\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    return ([round(weight, 4) for weight in theta], round(b, 4))"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_np = np.array(X)\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    return np.allclose(X_np, X_np.T, atol=1e-08)"}
{"task_id": 376, "completion_id": 1, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_np = np.array(X)\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    return np.allclose(X_np, X_np.T)"}
{"task_id": 376, "completion_id": 2, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    matrix = np.array(X)\n    if matrix.shape[0] != matrix.shape[1]:\n        return False\n    return np.allclose(matrix, matrix.T, atol=1e-08)"}
{"task_id": 376, "completion_id": 3, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_array = np.array(X)\n    if X_array.shape[0] != X_array.shape[1]:\n        return False\n    return np.allclose(X_array, X_array.T, atol=1e-08)"}
{"task_id": 376, "completion_id": 4, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_np = np.array(X)\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    return np.allclose(X_np, X_np.T, atol=1e-08)"}
{"task_id": 376, "completion_id": 5, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    np_array = np.array(X)\n    if np_array.shape[0] != np_array.shape[1]:\n        return False\n    return np.allclose(np_array, np_array.T, atol=1e-08)"}
{"task_id": 376, "completion_id": 6, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    np_array = np.array(X)\n    if np_array.shape[0] != np_array.shape[1]:\n        return False\n    return np.allclose(np_array, np_array.T)"}
{"task_id": 376, "completion_id": 7, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_np = np.array(X)\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    return np.allclose(X_np, X_np.T, atol=1e-08)"}
{"task_id": 376, "completion_id": 8, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    np_array = np.array(X)\n    if np_array.shape[0] != np_array.shape[1]:\n        return False\n    return np.allclose(np_array, np_array.T, atol=1e-08)"}
{"task_id": 376, "completion_id": 9, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X_array = np.array(X)\n    if X_array.shape[0] != X_array.shape[1]:\n        return False\n    return np.allclose(X_array, X_array.T, atol=1e-08)"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient for logistic (binomial deviance) loss used in Gradient Boosting for binary classification.\n    \n    Parameters:\n    y (list): Binary class labels (0 or 1).\n    f (list): Current prediction scores (floats).\n    \n    Returns:\n    list: The list of negative gradients rounded to four decimal places, or -1 if y contains values other than 0 or 1.\n    \"\"\"\n    if not all((label in (0, 1) for label in y)):\n        return -1\n    y_prime = np.array([2 * label - 1 for label in y])\n    f = np.array(f)\n    g = y_prime / (1 + np.exp(y_prime * f))\n    return [round(value, 4) for value in g]"}
{"task_id": 377, "completion_id": 1, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculate the negative gradient for logistic loss in Gradient Boosting.\n\n    Parameters:\n    y (list): Binary class labels (0 or 1).\n    f (list): Current prediction scores (floats).\n\n    Returns:\n    list: Negative gradients rounded to four decimal places.\n          Returns -1 if the label array contains values other than 0 or 1.\n    \"\"\"\n    y_prime = [2 * yi - 1 for yi in y]\n    if any((yi not in [0, 1] for yi in y)):\n        return -1\n    g = [yi / (1 + np.exp(yi * fi)) for (yi, fi) in zip(y_prime, f)]\n    g_rounded = [round(gi, 4) for gi in g]\n    return g_rounded"}
{"task_id": 377, "completion_id": 2, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculate the negative gradient for logistic loss used in Gradient Boosting.\n    \n    Parameters:\n    y (list): Binary class labels (0 or 1).\n    f (list): Current prediction scores (floats).\n    \n    Returns:\n    list: Negative gradients rounded to four decimal places, or -1 if y contains invalid values.\n    \"\"\"\n    y_array = np.array(y)\n    f_array = np.array(f)\n    if not np.all(np.isin(y_array, [0, 1])):\n        return -1\n    y_prime = 2 * y_array - 1\n    g = y_prime / (1 + np.exp(y_prime * f_array))\n    return [round(val, 4) for val in g]"}
{"task_id": 377, "completion_id": 3, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient of the logistic loss for binary classification.\n    \n    Parameters:\n    y (list): Binary class labels (0 or 1).\n    f (list): Current prediction scores (floats).\n    \n    Returns:\n    list: Negative gradients rounded to four decimal places.\n          Returns -1 if the label array contains values other than 0 or 1.\n    \"\"\"\n    y_np = np.array(y)\n    f_np = np.array(f)\n    if not np.all(np.isin(y_np, [0, 1])):\n        return -1\n    y_prime = 2 * y_np - 1\n    g = y_prime / (1 + np.exp(y_prime * f_np))\n    return np.round(g, 4).tolist()"}
{"task_id": 377, "completion_id": 4, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient of the logistic loss for binary classification.\n\n    Parameters:\n    y (list): Binary class labels (0 or 1).\n    f (list): Current prediction scores (floats).\n\n    Returns:\n    list: Negative gradients rounded to four decimal places, or -1 if labels are invalid.\n    \"\"\"\n    if not all((label in [0, 1] for label in y)):\n        return -1\n    y_prime = [2 * label - 1 for label in y]\n    gradients = []\n    for (y_i, f_i) in zip(y_prime, f):\n        gradient = y_i / (1 + np.exp(y_i * f_i))\n        gradients.append(round(gradient, 4))\n    return gradients"}
{"task_id": 377, "completion_id": 5, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculate the negative gradient of the logistic loss for binary classification.\n    \n    Parameters:\n    y (list): Binary class labels (0 or 1).\n    f (list): Current prediction scores (floats).\n    \n    Returns:\n    list: Negative gradients rounded to four decimal places.\n    \"\"\"\n    if not all((yl in [0, 1] for yl in y)):\n        return -1\n    y_prime = [2 * yl - 1 for yl in y]\n    g = [round(y_prime_i / (1 + np.exp(y_prime_i * f_i)), 4) for (y_prime_i, f_i) in zip(y_prime, f)]\n    return g"}
{"task_id": 377, "completion_id": 6, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculate the negative gradient of the logistic loss for binary classification.\n\n    Parameters:\n    y (list): Binary class labels (0 or 1).\n    f (list): Current prediction scores (floats).\n\n    Returns:\n    list: List of negative gradients rounded to four decimal places.\n          Returns -1 if the label array contains values other than 0 or 1.\n    \"\"\"\n    y = np.array(y)\n    f = np.array(f)\n    if not np.all((y == 0) | (y == 1)):\n        return -1\n    y_prime = 2 * y - 1\n    g = y_prime / (1 + np.exp(y_prime * f))\n    g_rounded = np.round(g, 4).tolist()\n    return g_rounded"}
{"task_id": 377, "completion_id": 7, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient of the logistic loss for binary classification.\n\n    Parameters:\n    y (list): A list of binary class labels (0 or 1).\n    f (list): A list of current prediction scores (floats).\n\n    Returns:\n    list: A list of negative gradients rounded to four decimal places.\n          Returns -1 if the label array contains values other than 0 or 1.\n    \"\"\"\n    if not all((label in [0, 1] for label in y)):\n        return -1\n    y_prime = [2 * label - 1 for label in y]\n    g = []\n    for (y_i, f_i) in zip(y_prime, f):\n        gradient = y_i / (1 + np.exp(y_i * f_i))\n        g.append(round(gradient, 4))\n    return g"}
{"task_id": 377, "completion_id": 8, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient of the logistic loss for binary classification.\n    \n    Parameters:\n    y (list): Binary class labels, where each element is either 0 or 1.\n    f (list): Current prediction scores, where each element is a float.\n    \n    Returns:\n    list: A list of negative gradients rounded to four decimal places.\n          If the label array contains values other than 0 or 1, returns -1.\n    \"\"\"\n    y_array = np.array(y)\n    f_array = np.array(f)\n    if not np.all(np.isin(y_array, [0, 1])):\n        return -1\n    y_prime = 2 * y_array - 1\n    g = y_prime / (1 + np.exp(y_prime * f_array))\n    g_rounded = np.round(g, 4)\n    return g_rounded.tolist()"}
{"task_id": 377, "completion_id": 9, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculate the negative gradient of the logistic loss for Gradient Boosting.\n    \n    Parameters:\n    y (list): Binary class labels (0 or 1).\n    f (list): Current prediction scores (floats).\n    \n    Returns:\n    list: List of negative gradients rounded to four decimal places.\n          Returns -1 if the label array contains values other than 0 or 1.\n    \"\"\"\n    if not all((label in [0, 1] for label in y)):\n        return -1\n    y_prime = [2 * label - 1 for label in y]\n    g = [y_prime_i / (1 + np.exp(y_prime_i * f_i)) for (y_prime_i, f_i) in zip(y_prime, f)]\n    g_rounded = [round(g_i, 4) for g_i in g]\n    return g_rounded"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x = np.array(x, dtype=float)\n    if order == 0:\n        selu_result = scale * np.where(x > 0, x, alpha * (np.exp(x) - 1))\n        return np.round(selu_result, 4).tolist()\n    elif order == 1:\n        first_derivative = scale * np.where(x > 0, 1, alpha * np.exp(x))\n        return np.round(first_derivative, 4).tolist()\n    elif order == 2:\n        second_derivative = scale * alpha * np.where(x > 0, 0, np.exp(x))\n        return np.round(second_derivative, 4).tolist()\n    else:\n        raise ValueError('Order must be 0, 1, or 2.')"}
{"task_id": 380, "completion_id": 1, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x = np.asarray(x)\n    result = np.zeros_like(x, dtype=float)\n    if order == 0:\n        result = np.where(x > 0, scale * x, scale * alpha * (np.exp(x) - 1))\n    elif order == 1:\n        result = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    elif order == 2:\n        result = np.where(x > 0, 0, scale * alpha * np.exp(x))\n    else:\n        raise ValueError('Order must be 0, 1, or 2.')\n    result = np.round(result, 4).tolist()\n    return result"}
{"task_id": 380, "completion_id": 2, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x_np = np.array(x, dtype=float)\n    if order == 0:\n        result = np.where(x_np > 0, x_np, alpha * (np.exp(x_np) - 1))\n        result = scale * result\n    elif order == 1:\n        result = np.where(x_np > 0, scale, scale * alpha * np.exp(x_np))\n    elif order == 2:\n        result = np.where(x_np > 0, 0, scale * alpha * np.exp(x_np))\n    else:\n        raise ValueError('Order must be 0, 1, or 2.')\n    return np.round(result, 4).tolist()"}
{"task_id": 380, "completion_id": 3, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x = np.array(x, dtype=float)\n    if order == 0:\n        selu_result = scale * np.where(x > 0, x, alpha * (np.exp(x) - 1))\n    elif order == 1:\n        selu_first_derivative = scale * np.where(x > 0, 1, alpha * np.exp(x))\n    elif order == 2:\n        selu_second_derivative = scale * np.where(x > 0, 0, alpha * np.exp(x))\n    else:\n        raise ValueError('Order can only be 0, 1, or 2.')\n    result = np.round(selu_result, 4).tolist()\n    return result"}
{"task_id": 380, "completion_id": 4, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x = np.array(x)\n    if order == 0:\n        selu_x = np.where(x > 0, scale * x, scale * alpha * (np.exp(x) - 1))\n    elif order == 1:\n        selu_x = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    elif order == 2:\n        selu_x = np.where(x > 0, 0, scale * alpha * np.exp(x))\n    else:\n        raise ValueError('Order must be 0, 1, or 2.')\n    result = np.round(selu_x, 4).tolist()\n    if isinstance(x, np.ndarray) and x.ndim == 0:\n        return result[0]\n    return result"}
{"task_id": 380, "completion_id": 5, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    x = np.array(x, dtype=np.float64)\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if order == 0:\n        selu_x = np.where(x > 0, scale * x, scale * alpha * (np.exp(x) - 1))\n    elif order == 1:\n        selu_x = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    elif order == 2:\n        selu_x = np.where(x > 0, 0, scale * alpha * np.exp(x))\n    else:\n        raise ValueError('order must be 0, 1, or 2')\n    result = np.round(selu_x, 4).tolist()\n    if isinstance(x, np.ndarray) and x.ndim == 0:\n        return result[0]\n    return result"}
{"task_id": 380, "completion_id": 6, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x_arr = np.array(x)\n    if order == 0:\n        selu_x = np.where(x_arr > 0, scale * x_arr, scale * alpha * (np.exp(x_arr) - 1))\n    elif order == 1:\n        selu_derivative = np.where(x_arr > 0, scale, scale * alpha * np.exp(x_arr))\n    elif order == 2:\n        selu_second_derivative = np.where(x_arr > 0, 0, scale * alpha * np.exp(x_arr))\n    else:\n        raise ValueError('Order must be 0, 1, or 2.')\n    result = np.round(selu_x, 4).tolist()\n    return result"}
{"task_id": 380, "completion_id": 7, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x = np.array(x)\n    result = np.zeros_like(x, dtype=float)\n    if order == 0:\n        result[x > 0] = scale * x[x > 0]\n        result[x <= 0] = scale * alpha * (np.exp(x[x <= 0]) - 1)\n    elif order == 1:\n        result[x > 0] = scale\n        result[x <= 0] = scale * alpha * np.exp(x[x <= 0])\n    elif order == 2:\n        result[x > 0] = 0\n        result[x <= 0] = scale * alpha * np.exp(x[x <= 0])\n    else:\n        raise ValueError('Order must be 0, 1, or 2.')\n    return np.round(result, 4).tolist()"}
{"task_id": 380, "completion_id": 8, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x = np.array(x, dtype=float)\n    elu = np.where(x > 0, x, alpha * (np.exp(x) - 1))\n    selu_val = scale * elu\n    if order == 0:\n        result = selu_val\n    elif order == 1:\n        first_derivative = np.where(x > 0, scale, scale * (alpha * np.exp(x)))\n        result = first_derivative\n    elif order == 2:\n        second_derivative = np.where(x > 0, 0, scale * (alpha * np.exp(x)))\n        result = second_derivative\n    else:\n        raise ValueError('Order must be 0, 1, or 2.')\n    return np.round(result, 4).tolist()"}
{"task_id": 380, "completion_id": 9, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x = np.array(x, dtype=float)\n    if order == 0:\n        selu_x = scale * np.where(x > 0, x, alpha * (np.exp(x) - 1))\n        result = selu_x\n    elif order == 1:\n        first_derivative = scale * np.where(x > 0, 1, alpha * np.exp(x))\n        result = first_derivative\n    elif order == 2:\n        second_derivative = scale * np.where(x > 0, 0, alpha * np.exp(x))\n        result = second_derivative\n    else:\n        raise ValueError('Order must be 0, 1, or 2.')\n    rounded_result = np.round(result, 4).tolist()\n    return rounded_result"}
{"task_id": 387, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        best_split = None\n        best_mse = float('inf')\n        best_left_mean = None\n        best_right_mean = None\n        for i in range(sorted_x.shape[0] - 1):\n            if sorted_x[i] == sorted_x[i + 1]:\n                continue\n            split = (sorted_x[i] + sorted_x[i + 1]) / 2.0\n            left_residuals = sorted_residuals[sorted_x <= split]\n            right_residuals = sorted_residuals[sorted_x > split]\n            left_mean = np.mean(left_residuals) if left_residuals.size > 0 else 0\n            right_mean = np.mean(right_residuals) if right_residuals.size > 0 else 0\n            mse = np.sum((left_residuals - left_mean) ** 2) + np.sum((right_residuals - right_mean) ** 2)\n            if mse < best_mse:\n                best_mse = mse\n                best_split = split\n                best_left_mean = left_mean\n                best_right_mean = right_mean\n        if best_split is None:\n            residual_mean = np.mean(residuals)\n            stump_prediction = np.full_like(residuals, residual_mean)\n        else:\n            stump_prediction = np.where(x <= best_split, best_left_mean, best_right_mean)\n        y_pred += learning_rate * stump_prediction\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 387, "completion_id": 1, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    N = len(x)\n    y_pred = np.full(N, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sort_indices = np.argsort(x)\n        x_sorted = x[sort_indices]\n        residuals_sorted = residuals[sort_indices]\n        best_split = None\n        best_error = float('inf')\n        best_left_mean = 0\n        best_right_mean = 0\n        for i in range(N - 1):\n            if x_sorted[i] == x_sorted[i + 1]:\n                continue\n            t = (x_sorted[i] + x_sorted[i + 1]) / 2.0\n            left_mean = np.mean(residuals_sorted[:i + 1])\n            right_mean = np.mean(residuals_sorted[i + 1:])\n            left_error = np.sum((residuals_sorted[:i + 1] - left_mean) ** 2)\n            right_error = np.sum((residuals_sorted[i + 1:] - right_mean) ** 2)\n            error = left_error + right_error\n            if error < best_error:\n                best_error = error\n                best_split = t\n                best_left_mean = left_mean\n                best_right_mean = right_mean\n        if best_split is None:\n            stump_prediction = np.full(N, np.mean(residuals))\n        else:\n            stump_prediction = np.where(x <= best_split, best_left_mean, best_right_mean)\n        y_pred += learning_rate * stump_prediction\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 387, "completion_id": 2, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    N = len(y)\n    y_pred = np.full(N, y.mean())\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        best_split = None\n        best_mse = float('inf')\n        best_left_mean = None\n        best_right_mean = None\n        for i in range(N - 1):\n            if sorted_x[i] == sorted_x[i + 1]:\n                continue\n            split_point = (sorted_x[i] + sorted_x[i + 1]) / 2\n            left_resids = sorted_residuals[:i + 1]\n            right_resids = sorted_residuals[i + 1:]\n            left_mean = np.mean(left_resids)\n            right_mean = np.mean(right_resids)\n            left_mse = np.sum((left_resids - left_mean) ** 2)\n            right_mse = np.sum((right_resids - right_mean) ** 2)\n            mse = left_mse + right_mse\n            if mse < best_mse:\n                best_mse = mse\n                best_split = split_point\n                best_left_mean = left_mean\n                best_right_mean = right_mean\n        if best_split is None:\n            stump_pred = np.full(N, residuals.mean())\n        else:\n            stump_pred = np.where(x <= best_split, best_left_mean, best_right_mean)\n        y_pred += learning_rate * stump_pred\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 387, "completion_id": 3, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, y.mean())\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        x_sorted = x[sorted_indices]\n        residuals_sorted = residuals[sorted_indices]\n        best_split = None\n        best_sse = float('inf')\n        for i in range(len(x_sorted) - 1):\n            if x_sorted[i] != x_sorted[i + 1]:\n                t = (x_sorted[i] + x_sorted[i + 1]) / 2\n                left_residuals = residuals_sorted[x_sorted <= t]\n                right_residuals = residuals_sorted[x_sorted > t]\n                sse_left = np.sum(left_residuals ** 2)\n                sse_right = np.sum(right_residuals ** 2)\n                sse = sse_left + sse_right\n                if sse < best_sse:\n                    best_sse = sse\n                    best_split = t\n        if best_split is None:\n            y_pred += learning_rate * residuals.mean()\n        else:\n            stump_pred = np.where(x <= best_split, residuals_sorted[x_sorted <= best_split].mean(), residuals_sorted[x_sorted > best_split].mean())\n            y_pred += learning_rate * stump_pred[np.argsort(sorted_indices)]\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 387, "completion_id": 4, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        best_split_point = None\n        best_split_error = float('inf')\n        best_left_pred = None\n        best_right_pred = None\n        for i in range(len(sorted_x) - 1):\n            if sorted_x[i] == sorted_x[i + 1]:\n                continue\n            split_point = (sorted_x[i] + sorted_x[i + 1]) / 2.0\n            left_residuals = sorted_residuals[sorted_x <= split_point]\n            right_residuals = sorted_residuals[sorted_x > split_point]\n            left_pred = np.mean(left_residuals) if left_residuals.size > 0 else 0\n            right_pred = np.mean(right_residuals) if right_residuals.size > 0 else 0\n            split_error = np.sum((sorted_residuals[sorted_x <= split_point] - left_pred) ** 2) + np.sum((sorted_residuals[sorted_x > split_point] - right_pred) ** 2)\n            if split_error < best_split_error:\n                best_split_error = split_error\n                best_split_point = split_point\n                best_left_pred = left_pred\n                best_right_pred = right_pred\n        if best_split_point is None:\n            best_left_pred = best_right_pred = np.mean(residuals)\n        y_pred += learning_rate * (best_left_pred * (x <= best_split_point) + best_right_pred * (x > best_split_point))\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 387, "completion_id": 5, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(x)\n    y_pred = np.full(n_samples, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        best_split = None\n        best_score = float('inf')\n        for i in range(n_samples - 1):\n            if sorted_x[i] == sorted_x[i + 1]:\n                continue\n            t = (sorted_x[i] + sorted_x[i + 1]) / 2.0\n            left_residuals = sorted_residuals[sorted_x <= t]\n            right_residuals = sorted_residuals[sorted_x > t]\n            if len(left_residuals) > 0:\n                mean_left = np.mean(left_residuals)\n            else:\n                mean_left = 0\n            if len(right_residuals) > 0:\n                mean_right = np.mean(right_residuals)\n            else:\n                mean_right = 0\n            score = np.sum((left_residuals - mean_left) ** 2) + np.sum((right_residuals - mean_right) ** 2)\n            if score < best_score:\n                best_score = score\n                best_split = t\n        if best_split is None:\n            mean_residual = np.mean(residuals)\n            y_pred += learning_rate * mean_residual\n        else:\n            y_pred[sorted_x <= best_split] += learning_rate * np.mean(sorted_residuals[sorted_x <= best_split])\n            y_pred[sorted_x > best_split] += learning_rate * np.mean(sorted_residuals[sorted_x > best_split])\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 387, "completion_id": 6, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        x_sorted = x[sorted_indices]\n        residuals_sorted = residuals[sorted_indices]\n        best_split = None\n        best_error = float('inf')\n        (best_rL, best_rR) = (0, 0)\n        for i in range(len(x_sorted) - 1):\n            if x_sorted[i] == x_sorted[i + 1]:\n                continue\n            t = (x_sorted[i] + x_sorted[i + 1]) / 2.0\n            rL = residuals_sorted[sorted_indices <= t]\n            rR = residuals_sorted[sorted_indices > t]\n            rL_mean = np.mean(rL) if rL.size > 0 else 0\n            rR_mean = np.mean(rR) if rR.size > 0 else 0\n            error = np.sum((rL - rL_mean) ** 2) + np.sum((rR - rR_mean) ** 2)\n            if error < best_error:\n                best_error = error\n                best_split = t\n                (best_rL, best_rR) = (rL_mean, rR_mean)\n        if best_split is None:\n            stump_prediction = np.full_like(y, np.mean(residuals))\n        else:\n            stump_prediction = np.where(x <= best_split, best_rL, best_rR)\n        y_pred += learning_rate * stump_prediction\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 387, "completion_id": 7, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        best_split = None\n        best_sse = np.inf\n        for i in range(len(sorted_x) - 1):\n            if sorted_x[i] == sorted_x[i + 1]:\n                continue\n            split = (sorted_x[i] + sorted_x[i + 1]) / 2.0\n            left_residuals = sorted_residuals[sorted_x <= split]\n            right_residuals = sorted_residuals[sorted_x > split]\n            sse = np.sum(left_residuals ** 2) + np.sum(right_residuals ** 2)\n            if sse < best_sse:\n                best_sse = sse\n                best_split = split\n        if best_split is None:\n            stump_pred = np.full_like(y, np.mean(residuals))\n        else:\n            stump_pred = np.where(x <= best_split, np.mean(sorted_residuals[sorted_x <= best_split]), np.mean(sorted_residuals[sorted_x > best_split]))\n        y_pred += learning_rate * stump_pred\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 387, "completion_id": 8, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, y.mean())\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        x_sorted = x[sorted_indices]\n        residuals_sorted = residuals[sorted_indices]\n        best_split = None\n        best_score = float('inf')\n        for i in range(len(x_sorted) - 1):\n            if x_sorted[i] == x_sorted[i + 1]:\n                continue\n            split_point = (x_sorted[i] + x_sorted[i + 1]) / 2.0\n            left_residuals = residuals_sorted[:i + 1]\n            right_residuals = residuals_sorted[i + 1:]\n            left_mean = left_residuals.mean() if len(left_residuals) > 0 else 0\n            right_mean = right_residuals.mean() if len(right_residuals) > 0 else 0\n            left_error = np.sum((left_residuals - left_mean) ** 2)\n            right_error = np.sum((right_residuals - right_mean) ** 2)\n            total_error = left_error + right_error\n            if total_error < best_score:\n                best_score = total_error\n                best_split = split_point\n                best_left_mean = left_mean\n                best_right_mean = right_mean\n        if best_split is None:\n            best_left_mean = residuals.mean()\n            best_right_mean = residuals.mean()\n        stump_predictions = np.where(x <= best_split, best_left_mean, best_right_mean)\n        y_pred += learning_rate * stump_predictions\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 387, "completion_id": 9, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, y.mean())\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        indices = np.argsort(x)\n        sorted_residuals = residuals[indices]\n        sorted_x = x[indices]\n        if len(np.unique(sorted_x)) == 1:\n            best_prediction = residuals.mean()\n            y_pred += learning_rate * best_prediction\n            continue\n        best_split_index = None\n        best_split_value = None\n        best_mse = float('inf')\n        for i in range(len(sorted_x) - 1):\n            split_value = (sorted_x[i] + sorted_x[i + 1]) / 2\n            left_residuals = sorted_residuals[:i + 1]\n            right_residuals = sorted_residuals[i + 1:]\n            left_mean = left_residuals.mean()\n            right_mean = right_residuals.mean()\n            mse = np.sum(left_residuals ** 2) + np.sum(right_residuals ** 2)\n            if mse < best_mse:\n                best_mse = mse\n                best_split_index = i\n                best_split_value = split_value\n\n        def stump_predict(x_value):\n            if x_value <= best_split_value:\n                return sorted_residuals[:best_split_index + 1].mean()\n            else:\n                return sorted_residuals[best_split_index + 1:].mean()\n        stump_predictions = np.array([stump_predict(xi) for xi in x])\n        y_pred += learning_rate * stump_predictions\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * grad ** 2\n    w -= learning_rate * grad / np.sqrt(Eg + epsilon)\n    w_rounded = np.round(w, 4).tolist()\n    Eg_rounded = np.round(Eg, 4).tolist()\n    return (w_rounded, Eg_rounded)"}
{"task_id": 394, "completion_id": 1, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    epsilon = 1e-08\n    w = w - learning_rate * grad / (np.sqrt(Eg) + epsilon)\n    w_rounded = np.round(w, 4).tolist()\n    Eg_rounded = np.round(Eg, 4).tolist()\n    return (w_rounded, Eg_rounded)"}
{"task_id": 394, "completion_id": 2, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    w = w - learning_rate * grad / (np.sqrt(Eg) + epsilon)\n    w_next = np.round(w, 4).tolist()\n    Eg_next = np.round(Eg, 4).tolist()\n    return (w_next, Eg_next)"}
{"task_id": 394, "completion_id": 3, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg_next = rho * Eg + (1 - rho) * grad ** 2\n    w_next = w - learning_rate * grad / np.sqrt(Eg_next + 1e-08)\n    w_next = np.round(w_next, 4).tolist()\n    Eg_next = np.round(Eg_next, 4).tolist()\n    return (w_next, Eg_next)"}
{"task_id": 394, "completion_id": 4, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    eps = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg_next = rho * Eg + (1 - rho) * grad ** 2\n    w_next = w - learning_rate * grad / np.sqrt(Eg_next + eps)\n    w_next_rounded = np.round(w_next, 4).tolist()\n    Eg_next_rounded = np.round(Eg_next, 4).tolist()\n    return (w_next_rounded, Eg_next_rounded)"}
{"task_id": 394, "completion_id": 5, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    epsilon = 1e-08\n    w = w - learning_rate * grad / np.sqrt(Eg + epsilon)\n    w_rounded = np.round(w, 4).tolist()\n    Eg_rounded = np.round(Eg, 4).tolist()\n    return (w_rounded, Eg_rounded)"}
{"task_id": 394, "completion_id": 6, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg_next = rho * Eg + (1 - rho) * np.square(grad)\n    epsilon = 1e-08\n    w_next = w - learning_rate * grad / np.sqrt(Eg_next + epsilon)\n    w_next_rounded = np.round(w_next, 4).tolist()\n    Eg_next_rounded = np.round(Eg_next, 4).tolist()\n    return (w_next_rounded, Eg_next_rounded)"}
{"task_id": 394, "completion_id": 7, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * grad ** 2\n    w = w - learning_rate * grad / np.sqrt(Eg + 1e-08)\n    w_next = np.round(w, 4).tolist()\n    Eg_next = np.round(Eg, 4).tolist()\n    return (w_next, Eg_next)"}
{"task_id": 394, "completion_id": 8, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    w = w - learning_rate * grad / np.sqrt(Eg + epsilon)\n    w_rounded = np.round(w, 4).tolist()\n    Eg_rounded = np.round(Eg, 4).tolist()\n    return (w_rounded, Eg_rounded)"}
{"task_id": 394, "completion_id": 9, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg_next = rho * Eg + (1 - rho) * grad ** 2\n    w_next = w - learning_rate * grad / np.sqrt(Eg_next + epsilon)\n    w_next_list = np.round(w_next, 4).tolist()\n    Eg_next_list = np.round(Eg_next, 4).tolist()\n    return (w_next_list, Eg_next_list)"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        elu_values = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        elu_values = np.where(x >= 0, 1, elu(x, alpha) + alpha)\n    return [round(value, 4) for value in elu_values]"}
{"task_id": 398, "completion_id": 1, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        elu_values = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        elu_values = np.where(x >= 0, 1, elu(x, alpha) + alpha)\n    return [round(value, 4) for value in elu_values]"}
{"task_id": 398, "completion_id": 2, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        elu_derivative = np.where(x >= 0, 1.0, elu(x, alpha) + alpha)\n        return [round(val, 4) for val in elu_derivative]\n    else:\n        elu_activation = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        return [round(val, 4) for val in elu_activation]"}
{"task_id": 398, "completion_id": 3, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        result = np.where(x >= 0, 1, elu(x, alpha) + alpha)\n    return [round(val, 4) for val in result]"}
{"task_id": 398, "completion_id": 4, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        elu_derivative = np.where(x >= 0, 1, elu(x, alpha) + alpha)\n    else:\n        elu_derivative = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    return [round(value, 4) for value in elu_derivative.tolist()]"}
{"task_id": 398, "completion_id": 5, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        gradient = np.where(x >= 0, 1, elu(x, alpha, derivative=False) + alpha)\n        return [round(value, 4) for value in gradient]\n    else:\n        activation = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        return [round(value, 4) for value in activation]"}
{"task_id": 398, "completion_id": 6, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x_array = np.array(x)\n    if derivative:\n        gradient = np.where(x_array >= 0, 1, elu(x_array, alpha) + alpha)\n        return [round(g, 4) for g in gradient.tolist()]\n    else:\n        activation = np.where(x_array >= 0, x_array, alpha * (np.exp(x_array) - 1))\n        return [round(a, 4) for a in activation.tolist()]"}
{"task_id": 398, "completion_id": 7, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        elu_values = elu(x, alpha=alpha, derivative=False)\n        gradient = np.where(x >= 0, 1, elu_values + alpha)\n    else:\n        gradient = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    result = [round(value, 4) for value in gradient]\n    return result"}
{"task_id": 398, "completion_id": 8, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        elu_values = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        elu_values = np.where(x >= 0, 1, np.exp(x))\n    result = [round(value, 4) for value in elu_values]\n    return result"}
{"task_id": 398, "completion_id": 9, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        elu_prime = np.where(x >= 0, 1, elu(x, alpha) + alpha)\n    else:\n        elu_prime = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    return [round(value, 4) for value in elu_prime.tolist()]"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\nfrom collections.abc import Iterable\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def process_data(data):\n        tuple_flag = any((isinstance(x, Iterable) and (not isinstance(x, (str, bytes))) for x in data))\n        if tuple_flag:\n            data = [np.array(x) if isinstance(x, Iterable) else np.array([x]) for x in data]\n        else:\n            data = np.array(data).reshape(-1, 1)\n        multidim_flag = data.shape[1] > 1\n        continuous_flag = np.any(np.diff(np.unique(np.floor(data.flatten()))) < 1e-10)\n        unique_values = [np.unique(data[:, i]).tolist() for i in range(data.shape[1])]\n        n_unique_per_dim = [len(uv) for uv in unique_values]\n        return {'tuple': tuple_flag, 'multidim': multidim_flag, 'continuous': continuous_flag, 'n_per_dim': n_unique_per_dim, 'dim': data.shape[1], 'ids': unique_values}\n    action_stats = process_data(actions)\n    obs_stats = process_data(observations)\n    return {'tuple_actions': action_stats['tuple'], 'tuple_observations': obs_stats['tuple'], 'multidim_actions': action_stats['multidim'], 'multidim_observations': obs_stats['multidim'], 'continuous_actions': action_stats['continuous'], 'continuous_observations': obs_stats['continuous'], 'n_actions_per_dim': action_stats['n_per_dim'], 'action_dim': action_stats['dim'], 'n_obs_per_dim': obs_stats['n_per_dim'], 'obs_dim': obs_stats['dim'], 'action_ids': action_stats['ids'], 'obs_ids': obs_stats['ids']}\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 1, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def analyze_data(lst):\n        tuple_flag = False\n        multidim_flag = False\n        continuous_flag = False\n        unique_values_per_dim = []\n        dim = 1\n        flattened_data = []\n        for item in lst:\n            if isinstance(item, (list, tuple, np.ndarray)):\n                tuple_flag = True\n                if len(item) > 1:\n                    multidim_flag = True\n                flattened_data.extend(item)\n            else:\n                flattened_data.append(item)\n        if multidim_flag:\n            dim = len(lst[0]) if isinstance(lst[0], (list, tuple, np.ndarray)) else 1\n            for i in range(dim):\n                unique_values = set()\n                for item in lst:\n                    if isinstance(item, (list, tuple, np.ndarray)):\n                        unique_values.add(item[i])\n                    else:\n                        unique_values.add(item)\n                unique_values_per_dim.append(sorted(unique_values))\n        else:\n            unique_values_per_dim.append(sorted(set(flattened_data)))\n        for value in flattened_data:\n            if isinstance(value, float) and (not value.is_integer()):\n                continuous_flag = True\n                break\n        return {'tuple_flag': tuple_flag, 'multidim_flag': multidim_flag, 'continuous_flag': continuous_flag, 'n_per_dim': [len(uv) for uv in unique_values_per_dim], 'dim': dim, 'ids': unique_values_per_dim}\n    actions_analysis = analyze_data(actions)\n    observations_analysis = analyze_data(observations)\n    result = {'tuple_actions': actions_analysis['tuple_flag'], 'tuple_observations': observations_analysis['tuple_flag'], 'multidim_actions': actions_analysis['multidim_flag'], 'multidim_observations': observations_analysis['multidim_flag'], 'continuous_actions': actions_analysis['continuous_flag'], 'continuous_observations': observations_analysis['continuous_flag'], 'n_actions_per_dim': actions_analysis['n_per_dim'], 'action_dim': actions_analysis['dim'], 'n_obs_per_dim': observations_analysis['n_per_dim'], 'obs_dim': observations_analysis['dim'], 'action_ids': actions_analysis['ids'], 'obs_ids': observations_analysis['ids']}\n    return result\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 2, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def compute_stats(data):\n        is_tuple = any((isinstance(x, (list, tuple, np.ndarray)) for x in data))\n        if is_tuple:\n            data = [np.array(x).flatten() for x in data]\n        else:\n            data = [np.array(x) for x in data]\n        data_stack = np.array(data)\n        multidim = data_stack.shape[1] > 1 if data_stack.ndim > 1 else False\n        continuous = any((~np.array_equal(x, x.astype(int)) for x in data_stack.flatten()))\n        unique_values_per_dim = [list(np.unique(data_stack[:, i])) for i in range(data_stack.shape[1])]\n        n_unique_per_dim = [len(unique_values) for unique_values in unique_values_per_dim]\n        dim = data_stack.shape[1]\n        return {'tuple': is_tuple, 'multidim': multidim, 'continuous': continuous, 'n_per_dim': n_unique_per_dim, 'dim': dim, 'ids': unique_values_per_dim}\n    action_stats = compute_stats(actions)\n    observation_stats = compute_stats(observations)\n    result = {'tuple_actions': action_stats['tuple'], 'tuple_observations': observation_stats['tuple'], 'multidim_actions': action_stats['multidim'], 'multidim_observations': observation_stats['multidim'], 'continuous_actions': action_stats['continuous'], 'continuous_observations': observation_stats['continuous'], 'n_actions_per_dim': action_stats['n_per_dim'], 'action_dim': action_stats['dim'], 'n_obs_per_dim': observation_stats['n_per_dim'], 'obs_dim': observation_stats['dim'], 'action_ids': action_stats['ids'], 'obs_ids': observation_stats['ids']}\n    return result\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 3, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def analyze(data):\n        tuple_data = any((isinstance(item, (list, tuple, np.ndarray)) for item in data))\n        if tuple_data:\n            flattened = [item for sublist in data for item in sublist]\n            dim = len(data[0])\n        else:\n            flattened = data\n            dim = 1\n        unique_values = [sorted(set(flattened[i::dim])) for i in range(dim)]\n        n_unique_per_dim = [len(unique) for unique in unique_values]\n        multidim = dim > 1\n        continuous = any((isinstance(item, float) and (not float(item).is_integer()) for item in flattened))\n        return {'tuple': tuple_data, 'multidim': multidim, 'continuous': continuous, 'n_per_dim': n_unique_per_dim, 'dim': dim, 'ids': unique_values}\n    action_stats = analyze(actions)\n    obs_stats = analyze(observations)\n    result = {'tuple_actions': action_stats['tuple'], 'tuple_observations': obs_stats['tuple'], 'multidim_actions': action_stats['multidim'], 'multidim_observations': obs_stats['multidim'], 'continuous_actions': action_stats['continuous'], 'continuous_observations': obs_stats['continuous'], 'n_actions_per_dim': action_stats['n_per_dim'], 'action_dim': action_stats['dim'], 'n_obs_per_dim': obs_stats['n_per_dim'], 'obs_dim': obs_stats['dim'], 'action_ids': action_stats['ids'], 'obs_ids': obs_stats['ids']}\n    return result\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 4, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def analyze(data):\n        tuple_data = any((isinstance(x, (list, tuple, np.ndarray)) for x in data))\n        flat_data = np.array([x if isinstance(x, (list, tuple, np.ndarray)) else [x] for x in data]).flatten()\n        if tuple_data:\n            dim = len(data[0])\n        else:\n            dim = 1\n        multidim = dim > 1\n        continuous = any((not isinstance(x, int) for x in flat_data))\n        unique_values_per_dim = []\n        ids_per_dim = []\n        if tuple_data:\n            for i in range(dim):\n                dim_values = np.array([x[i] for x in data])\n                unique_values = np.unique(dim_values)\n                unique_values_per_dim.append(len(unique_values))\n                ids_per_dim.append(sorted(unique_values))\n        else:\n            unique_values = np.unique(flat_data)\n            unique_values_per_dim.append(len(unique_values))\n            ids_per_dim.append(sorted(unique_values))\n        return {'tuple': tuple_data, 'multidim': multidim, 'continuous': continuous, 'n_per_dim': unique_values_per_dim, 'dim': dim, 'ids': ids_per_dim}\n    action_stats = analyze(actions)\n    observation_stats = analyze(observations)\n    return {'tuple_actions': action_stats['tuple'], 'tuple_observations': observation_stats['tuple'], 'multidim_actions': action_stats['multidim'], 'multidim_observations': observation_stats['multidim'], 'continuous_actions': action_stats['continuous'], 'continuous_observations': observation_stats['continuous'], 'n_actions_per_dim': action_stats['n_per_dim'], 'action_dim': action_stats['dim'], 'n_obs_per_dim': observation_stats['n_per_dim'], 'obs_dim': observation_stats['dim'], 'action_ids': action_stats['ids'], 'obs_ids': observation_stats['ids']}\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 5, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def process_data(data):\n        tuple_data = any((isinstance(x, (list, tuple, np.ndarray)) for x in data))\n        if tuple_data:\n            flattened_data = [item for sublist in data for item in sublist]\n            dim = len(data[0])\n        else:\n            flattened_data = data\n            dim = 1\n        multidim = dim > 1\n        continuous = any((isinstance(x, float) and (not x.is_integer()) for x in flattened_data))\n        unique_ids = [sorted(set(flattened_data[i::dim])) for i in range(dim)]\n        n_per_dim = [len(ids) for ids in unique_ids]\n        return {'tuple_data': tuple_data, 'multidim': multidim, 'continuous': continuous, 'n_per_dim': n_per_dim, 'dim': dim, 'ids': unique_ids}\n    action_stats = process_data(actions)\n    observation_stats = process_data(observations)\n    return {'tuple_actions': action_stats['tuple_data'], 'tuple_observations': observation_stats['tuple_data'], 'multidim_actions': action_stats['multidim'], 'multidim_observations': observation_stats['multidim'], 'continuous_actions': action_stats['continuous'], 'continuous_observations': observation_stats['continuous'], 'n_actions_per_dim': action_stats['n_per_dim'], 'action_dim': action_stats['dim'], 'n_obs_per_dim': observation_stats['n_per_dim'], 'obs_dim': observation_stats['dim'], 'action_ids': action_stats['ids'], 'obs_ids': observation_stats['ids']}"}
{"task_id": 411, "completion_id": 6, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def analyze(data):\n        tuple_data = any((isinstance(x, (list, tuple, np.ndarray)) for x in data))\n        flattened_data = [item for sublist in data for item in sublist] if tuple_data else data\n        multidim_data = len(flattened_data) != len(data) or (tuple_data and len(data[0]) > 1)\n        continuous_data = any((isinstance(x, float) and (not x.is_integer()) for x in flattened_data))\n        unique_values = [list(set(dim)) for dim in zip(*data)] if tuple_data else [list(set(flattened_data))]\n        n_values_per_dim = [len(dim) for dim in unique_values]\n        dimension = len(unique_values)\n        ids_per_dim = [sorted(dim) for dim in unique_values]\n        return {'tuple': tuple_data, 'multidim': multidim_data, 'continuous': continuous_data, 'n_per_dim': n_values_per_dim, 'dim': dimension, 'ids': ids_per_dim}\n    action_stats = analyze(actions)\n    obs_stats = analyze(observations)\n    return {'tuple_actions': action_stats['tuple'], 'tuple_observations': obs_stats['tuple'], 'multidim_actions': action_stats['multidim'], 'multidim_observations': obs_stats['multidim'], 'continuous_actions': action_stats['continuous'], 'continuous_observations': obs_stats['continuous'], 'n_actions_per_dim': action_stats['n_per_dim'], 'n_obs_per_dim': obs_stats['n_per_dim'], 'action_dim': action_stats['dim'], 'obs_dim': obs_stats['dim'], 'action_ids': action_stats['ids'], 'obs_ids': obs_stats['ids']}\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 7, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def analyze(data):\n        tuple_data = any((isinstance(x, (list, tuple, np.ndarray)) for x in data))\n        if tuple_data:\n            flattened_data = [item for sublist in data for item in sublist]\n            dim = len(data[0])\n        else:\n            flattened_data = data\n            dim = 1\n        multidim_data = dim > 1\n        continuous_data = any((isinstance(x, float) and (not x.is_integer()) for x in flattened_data))\n        unique_values_per_dim = []\n        sorted_unique_values_per_dim = []\n        if multidim_data:\n            for d in range(dim):\n                unique_values = set((data[i][d] for i in range(len(data))))\n                unique_values_per_dim.append(len(unique_values))\n                sorted_unique_values_per_dim.append(sorted(unique_values))\n        else:\n            unique_values = set(flattened_data)\n            unique_values_per_dim.append(len(unique_values))\n            sorted_unique_values_per_dim.append(sorted(unique_values))\n        return {'tuple_data': tuple_data, 'multidim_data': multidim_data, 'continuous_data': continuous_data, 'n_per_dim': unique_values_per_dim, 'dim': dim, 'ids': sorted_unique_values_per_dim}\n    action_stats = analyze(actions)\n    observation_stats = analyze(observations)\n    return {'tuple_actions': action_stats['tuple_data'], 'tuple_observations': observation_stats['tuple_data'], 'multidim_actions': action_stats['multidim_data'], 'multidim_observations': observation_stats['multidim_data'], 'continuous_actions': action_stats['continuous_data'], 'continuous_observations': observation_stats['continuous_data'], 'n_actions_per_dim': action_stats['n_per_dim'], 'action_dim': action_stats['dim'], 'n_obs_per_dim': observation_stats['n_per_dim'], 'obs_dim': observation_stats['dim'], 'action_ids': action_stats['ids'], 'obs_ids': observation_stats['ids']}\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 8, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def analyze(data):\n        tuple_data = any((isinstance(x, (list, tuple, np.ndarray)) for x in data))\n        if tuple_data:\n            data = [np.array(x).flatten() for x in data]\n        else:\n            data = [np.array([x]) for x in data]\n        data = np.stack(data)\n        multidim_data = data.shape[1] > 1\n        continuous_data = np.any(np.modf(data)[0] != 0)\n        unique_values_per_dim = [np.unique(data[:, i]).tolist() for i in range(data.shape[1])]\n        n_values_per_dim = [len(uv) for uv in unique_values_per_dim]\n        dim = data.shape[1]\n        return {'tuple': tuple_data, 'multidim': multidim_data, 'continuous': continuous_data, 'n_per_dim': n_values_per_dim, 'dim': dim, 'ids': unique_values_per_dim}\n    action_stats = analyze(actions)\n    obs_stats = analyze(observations)\n    return {'tuple_actions': action_stats['tuple'], 'tuple_observations': obs_stats['tuple'], 'multidim_actions': action_stats['multidim'], 'multidim_observations': obs_stats['multidim'], 'continuous_actions': action_stats['continuous'], 'continuous_observations': obs_stats['continuous'], 'n_actions_per_dim': action_stats['n_per_dim'], 'action_dim': action_stats['dim'], 'n_obs_per_dim': obs_stats['n_per_dim'], 'obs_dim': obs_stats['dim'], 'action_ids': action_stats['ids'], 'obs_ids': obs_stats['ids']}\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 411, "completion_id": 9, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def analyze(data_list):\n        tuple_present = any((isinstance(x, (list, tuple, np.ndarray)) for x in data_list))\n        flat_list = [item for sublist in data_list for item in (sublist if tuple_present else [sublist])]\n        unique_values = set(flat_list)\n        continuous = any((not isinstance(x, int) and isinstance(x, (float, np.float)) for x in unique_values))\n        if tuple_present:\n            dim = len(data_list[0])\n            n_per_dim = [len(set((sublist[i] for sublist in data_list))) for i in range(dim)]\n            ids_per_dim = [sorted(set((sublist[i] for sublist in data_list))) for i in range(dim)]\n        else:\n            dim = 1\n            n_per_dim = [len(unique_values)]\n            ids_per_dim = [sorted(unique_values)]\n        return {'tuple': tuple_present, 'multidim': dim > 1, 'continuous': continuous, 'n_per_dim': n_per_dim, 'dim': dim, 'ids': ids_per_dim}\n    action_stats = analyze(actions)\n    observation_stats = analyze(observations)\n    return {'tuple_actions': action_stats['tuple'], 'tuple_observations': observation_stats['tuple'], 'multidim_actions': action_stats['multidim'], 'multidim_observations': observation_stats['multidim'], 'continuous_actions': action_stats['continuous'], 'continuous_observations': observation_stats['continuous'], 'n_actions_per_dim': action_stats['n_per_dim'], 'action_dim': action_stats['dim'], 'n_obs_per_dim': observation_stats['n_per_dim'], 'obs_dim': observation_stats['dim'], 'action_ids': action_stats['ids'], 'obs_ids': observation_stats['ids']}\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]"}
{"task_id": 413, "completion_id": 0, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n\n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    def best_split(X, y):\n        (best_feature, best_threshold, best_mse) = (None, None, float('inf'))\n        (m, n) = X.shape\n        for feature in range(n):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                left_mask = X[:, feature] < threshold\n                right_mask = ~left_mask\n                left_y = y[left_mask]\n                right_y = y[right_mask]\n                if len(left_y) == 0 or len(right_y) == 0:\n                    continue\n                left_mse = mean_squared_error(left_y, np.mean(left_y))\n                right_mse = mean_squared_error(right_y, np.mean(right_y))\n                mse = (len(left_y) * left_mse + len(right_y) * right_mse) / m\n                if mse < best_mse:\n                    best_mse = mse\n                    best_feature = feature\n                    best_threshold = threshold\n        return (best_feature, best_threshold)\n\n    def build_tree(X, y, depth=0):\n        m = len(y)\n        if m == 0 or depth == max_depth:\n            return np.mean(y)\n        (feature, threshold) = best_split(X, y)\n        if feature is None or threshold is None:\n            return np.mean(y)\n        left_mask = X[:, feature] < threshold\n        right_mask = ~left_mask\n        left_tree = build_tree(X[left_mask], y[left_mask], depth + 1)\n        right_tree = build_tree(X[right_mask], y[right_mask], depth + 1)\n        return (feature, threshold, left_tree, right_tree)\n\n    def predict_tree(tree, X):\n        if not isinstance(tree, tuple):\n            return tree\n        (feature, threshold, left_tree, right_tree) = tree\n        left_mask = X[:, feature] < threshold\n        right_mask = ~left_mask\n        predictions = np.zeros(X.shape[0])\n        predictions[left_mask] = predict_tree(left_tree, X[left_mask])\n        predictions[right_mask] = predict_tree(right_tree, X[right_mask])\n        return predictions\n\n    def predict(X, trees):\n        predictions = np.zeros(X.shape[0])\n        predictions += np.mean(y_train)\n        for tree in trees:\n            predictions += learning_rate * predict_tree(tree, X)\n        return predictions\n    predictions_train = np.mean(y_train) * np.ones(y_train.shape[0])\n    trees = []\n    for _ in range(n_estimators):\n        residuals = y_train - predictions_train\n        tree = build_tree(X_train, residuals)\n        trees.append(tree)\n        predictions_train += learning_rate * predict_tree(tree, X_train)\n    final_predictions = predict(X_test, trees)\n    return [round(float(pred), 4) for pred in final_predictions]"}
{"task_id": 413, "completion_id": 1, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n\n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    def best_split(X, y):\n        (best_feature, best_threshold, best_value, best_score) = (None, None, None, np.inf)\n        (m, n_features) = X.shape\n        parent_score = mean_squared_error(y, np.full(m, np.mean(y)))\n        for feature in range(n_features):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                left_idx = np.where(X[:, feature] < threshold)[0]\n                right_idx = np.where(X[:, feature] >= threshold)[0]\n                if len(left_idx) == 0 or len(right_idx) == 0:\n                    continue\n                left_score = mean_squared_error(y[left_idx], np.full(len(left_idx), np.mean(y[left_idx])))\n                right_score = mean_squared_error(y[right_idx], np.full(len(right_idx), np.mean(y[right_idx])))\n                score = len(left_idx) / m * left_score + len(right_idx) / m * right_score\n                if score < best_score:\n                    (best_feature, best_threshold, best_value, best_score) = (feature, threshold, (np.mean(y[left_idx]), np.mean(y[right_idx])), score)\n        return (best_feature, best_threshold, best_value, best_score > parent_score - 1e-07)\n\n    def build_tree(X, y, depth=0):\n        if depth >= max_depth:\n            return np.mean(y)\n        (feature, threshold, value, no_improvement) = best_split(X, y)\n        if no_improvement:\n            return np.mean(y)\n        left_idx = np.where(X[:, feature] < threshold)[0]\n        right_idx = np.where(X[:, feature] >= threshold)[0]\n        left_subtree = build_tree(X[left_idx], y[left_idx], depth + 1)\n        right_subtree = build_tree(X[right_idx], y[right_idx], depth + 1)\n        return (feature, threshold, left_subtree, right_subtree)\n\n    def predict_tree(tree, X):\n        if isinstance(tree, float):\n            return np.full(X.shape[0], tree)\n        (feature, threshold, left, right) = tree\n        left_idx = np.where(X[:, feature] < threshold)[0]\n        right_idx = np.where(X[:, feature] >= threshold)[0]\n        y_pred = np.zeros(X.shape[0])\n        if len(left_idx) > 0:\n            y_pred[left_idx] = predict_tree(left, X[left_idx])\n        if len(right_idx) > 0:\n            y_pred[right_idx] = predict_tree(right, X[right_idx])\n        return y_pred\n    predictions = np.full(X_train.shape[0], np.mean(y_train))\n    test_predictions = np.full(X_test.shape[0], np.mean(y_train))\n    for _ in range(n_estimators):\n        residuals = y_train - predictions\n        tree = build_tree(X_train, residuals)\n        predictions += learning_rate * predict_tree(tree, X_train)\n        test_predictions += learning_rate * predict_tree(tree, X_test)\n    return [round(pred, 4) for pred in test_predictions]"}
{"task_id": 413, "completion_id": 2, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n\n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    def best_split(X, y):\n        m = len(y)\n        if m == 1:\n            return (None, None)\n        best_feature = None\n        best_threshold = None\n        best_error = mean_squared_error(y, np.full(m, np.mean(y)))\n        n_features = X.shape[1]\n        for feature in range(n_features):\n            (thresholds, classes) = zip(*sorted(zip(X[:, feature], y)))\n            num_left = [0] * m\n            num_right = [m] * m\n            sum_left = [0] * m\n            sum_right = [sum(classes)] * m\n            for i in range(1, m):\n                x = thresholds[i]\n                y = classes[i]\n                sum_left[i] = sum_left[i - 1] + y\n                sum_right[i] = sum_right[i - 1] - y\n                num_left[i] = num_left[i - 1] + 1\n                num_right[i] = num_right[i - 1] - 1\n                if x == thresholds[i - 1]:\n                    continue\n                curr_error = sum_left[i] ** 2 / num_left[i] + sum_right[i] ** 2 / num_right[i]\n                if curr_error < best_error:\n                    best_error = curr_error\n                    best_feature = feature\n                    best_threshold = (x + thresholds[i - 1]) / 2\n        return (best_feature, best_threshold)\n\n    def build_tree(X, y, depth):\n        if depth >= max_depth or mean_squared_error(y, np.full(len(y), np.mean(y))) < 1e-07:\n            return np.mean(y)\n        (best_feature, best_threshold) = best_split(X, y)\n        if best_feature is None:\n            return np.mean(y)\n        true_indices = X[:, best_feature] <= best_threshold\n        false_indices = X[:, best_feature] > best_threshold\n        true_branch = build_tree(X[true_indices], y[true_indices], depth + 1)\n        false_branch = build_tree(X[false_indices], y[false_indices], depth + 1)\n        return (best_feature, best_threshold, true_branch, false_branch)\n\n    def predict_tree(X, tree):\n        if isinstance(tree, float):\n            return tree\n        (feature, threshold, left, right) = tree\n        if X[feature] <= threshold:\n            return predict_tree(X, left)\n        else:\n            return predict_tree(X, right)\n\n    def predict_all(X, trees):\n        predictions = np.zeros(X.shape[0])\n        for tree in trees:\n            predictions += np.array([predict_tree(x, tree) for x in X]) * learning_rate\n        return predictions\n    y_pred_train = np.full(len(y_train), np.mean(y_train))\n    trees = []\n    for _ in range(n_estimators):\n        residuals = y_train - y_pred_train\n        tree = build_tree(X_train, residuals, 0)\n        trees.append(tree)\n        y_pred_train += predict_all(X_train, [tree]) * learning_rate\n    predictions = predict_all(X_test, trees)\n    return [round(pred, 4) for pred in predictions]"}
{"task_id": 413, "completion_id": 3, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n\n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    def best_split(X, y):\n        (best_feature, best_value, best_error) = (None, None, float('inf'))\n        mean_y = np.mean(y)\n        n_samples = X.shape[0]\n        for feature in range(X.shape[1]):\n            unique_values = np.unique(X[:, feature])\n            for value in unique_values:\n                left_mask = X[:, feature] < value\n                y_left = y[left_mask]\n                y_right = y[~left_mask]\n                if y_left.size and y_right.size:\n                    left_error = mean_squared_error(y_left, np.mean(y_left))\n                    right_error = mean_squared_error(y_right, np.mean(y_right))\n                    error = (left_error * y_left.size + right_error * y_right.size) / n_samples\n                    if error < best_error:\n                        best_error = error\n                        best_value = value\n                        best_feature = feature\n        return (best_feature, best_value)\n\n    class TreeNode:\n\n        def __init__(self, feature=None, value=None, left=None, right=None, mean=None):\n            self.feature = feature\n            self.value = value\n            self.left = left\n            self.right = right\n            self.mean = mean\n\n    def build_tree(X, y, depth=0):\n        if depth == max_depth or len(np.unique(y)) == 1:\n            return TreeNode(mean=np.mean(y))\n        (feature, value) = best_split(X, y)\n        if feature is None or value is None:\n            return TreeNode(mean=np.mean(y))\n        left_mask = X[:, feature] < value\n        right_mask = ~left_mask\n        left_node = build_tree(X[left_mask], y[left_mask], depth + 1)\n        right_node = build_tree(X[right_mask], y[right_mask], depth + 1)\n        return TreeNode(feature=feature, value=value, left=left_node, right=right_node)\n\n    def predict_tree(tree, X):\n        if tree.mean is not None:\n            return tree.mean\n        if X[tree.feature] < tree.value:\n            return predict_tree(tree.left, X)\n        else:\n            return predict_tree(tree.right, X)\n\n    def predict_trees(trees, X):\n        tree_preds = np.array([predict_tree(tree, X) for tree in trees])\n        return np.mean(tree_preds)\n    predictions = np.full(X_train.shape[0], np.mean(y_train))\n    trees = []\n    for i in range(n_estimators):\n        residuals = y_train - predictions\n        tree = build_tree(X_train, residuals, 0)\n        predictions += learning_rate * np.array([predict_tree(tree, x) for x in X_train])\n        trees.append(tree)\n    final_predictions = np.array([predict_trees(trees, x) for x in X_test])\n    return [round(pred, 4) for pred in final_predictions]"}
{"task_id": 413, "completion_id": 4, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n\n    def fit_tree(X, y, depth=0):\n        if depth >= max_depth or len(np.unique(y)) == 1:\n            return np.mean(y)\n        (best_feature, best_threshold, best_mse) = (None, None, float('inf'))\n        for feature in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                left_indices = X[:, feature] <= threshold\n                right_indices = X[:, feature] > threshold\n                left_mse = np.mean((y[left_indices] - np.mean(y[left_indices])) ** 2)\n                right_mse = np.mean((y[right_indices] - np.mean(y[right_indices])) ** 2)\n                mse = (left_indices.sum() * left_mse + right_indices.sum() * right_mse) / len(y)\n                if mse < best_mse:\n                    (best_feature, best_threshold, best_mse) = (feature, threshold, mse)\n        if best_mse == float('inf'):\n            return np.mean(y)\n        left_indices = X[:, best_feature] <= best_threshold\n        right_indices = X[:, best_feature] > best_threshold\n        left_tree = fit_tree(X[left_indices], y[left_indices], depth + 1)\n        right_tree = fit_tree(X[right_indices], y[right_indices], depth + 1)\n        return (best_feature, best_threshold, left_tree, right_tree)\n\n    def predict_tree(X, tree):\n        if isinstance(tree, float):\n            return tree\n        (feature, threshold, left_tree, right_tree) = tree\n        if X[feature] <= threshold:\n            return predict_tree(X, left_tree)\n        else:\n            return predict_tree(X, right_tree)\n    predictions = np.full(X_train.shape[0], np.mean(y_train))\n    test_predictions = np.full(X_test.shape[0], np.mean(y_train))\n    for _ in range(n_estimators):\n        residuals = y_train - predictions\n        tree = fit_tree(X_train, residuals)\n        for i in range(X_train.shape[0]):\n            predictions[i] += learning_rate * predict_tree(X_train[i], tree)\n        for i in range(X_test.shape[0]):\n            test_predictions[i] += learning_rate * predict_tree(X_test[i], tree)\n    return [round(float(pred), 4) for pred in test_predictions]"}
{"task_id": 413, "completion_id": 5, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n\n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    def best_split(X, y):\n        (best_idx, best_threshold, best_mse, best_left, best_right) = (None, None, float('inf'), None, None)\n        (n_samples, n_features) = X.shape\n        for feature in range(n_features):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                left_mask = X[:, feature] < threshold\n                right_mask = X[:, feature] >= threshold\n                (y_left, y_right) = (y[left_mask], y[right_mask])\n                if len(y_left) > 0 and len(y_right) > 0:\n                    mse_left = mean_squared_error(y_left, y_left.mean())\n                    mse_right = mean_squared_error(y_right, y_right.mean())\n                    mse = len(y_left) / n_samples * mse_left + len(y_right) / n_samples * mse_right\n                    if mse < best_mse:\n                        best_idx = feature\n                        best_threshold = threshold\n                        best_mse = mse\n                        best_left = (X[left_mask], y[left_mask])\n                        best_right = (X[right_mask], y[right_mask])\n        return (best_idx, best_threshold, best_left, best_right)\n\n    def build_tree(X, y, depth):\n        if depth >= max_depth or len(np.unique(y)) == 1:\n            return np.mean(y)\n        (idx, threshold, left, right) = best_split(X, y)\n        if idx is None:\n            return np.mean(y)\n        return {'idx': idx, 'threshold': threshold, 'left': build_tree(left[0], left[1], depth + 1), 'right': build_tree(right[0], right[1], depth + 1)}\n\n    def predict_tree(X, tree):\n        if isinstance(tree, np.float64):\n            return tree\n        if X[tree['idx']] < tree['threshold']:\n            return predict_tree(X, tree['left'])\n        else:\n            return predict_tree(X, tree['right'])\n    F = np.zeros_like(y_train, dtype=float)\n    F_pred = np.zeros(X_test.shape[0], dtype=float)\n    initial_pred = np.mean(y_train)\n    F_pred += initial_pred\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        tree = build_tree(X_train, residuals, depth=0)\n        for i in range(len(X_train)):\n            F[i] += learning_rate * predict_tree(X_train[i], tree)\n        for i in range(len(X_test)):\n            F_pred[i] += learning_rate * predict_tree(X_test[i], tree)\n    return [round(float(pred), 4) for pred in F_pred]"}
{"task_id": 413, "completion_id": 6, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n\n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    def split_node(X, y):\n        best_score = float('inf')\n        best_feature = best_threshold = None\n        for feature_i in range(X.shape[1]):\n            unique_values = np.unique(X[:, feature_i])\n            for threshold in unique_values:\n                (X_left, y_left) = (X[X[:, feature_i] <= threshold], y[X[:, feature_i] <= threshold])\n                (X_right, y_right) = (X[X[:, feature_i] > threshold], y[X[:, feature_i] > threshold])\n                if len(X_left) == 0 or len(X_right) == 0:\n                    continue\n                gini = (X_left.shape[0] * mean_squared_error(y_left, np.mean(y_left)) + X_right.shape[0] * mean_squared_error(y_right, np.mean(y_right))) / X.shape[0]\n                if gini < best_score:\n                    best_score = gini\n                    best_feature = feature_i\n                    best_threshold = threshold\n        return (best_feature, best_threshold)\n\n    def build_tree(X, y, depth=0):\n        if depth == max_depth or mean_squared_error(y, np.mean(y)) == 0:\n            return np.mean(y)\n        (best_feature, best_threshold) = split_node(X, y)\n        if best_feature is None:\n            return np.mean(y)\n        left_mask = X[:, best_feature] <= best_threshold\n        right_mask = X[:, best_feature] > best_threshold\n        left_tree = build_tree(X[left_mask], y[left_mask], depth + 1)\n        right_tree = build_tree(X[right_mask], y[right_mask], depth + 1)\n        return (best_feature, best_threshold, left_tree, right_tree)\n\n    def predict_tree(tree, x):\n        if isinstance(tree, float):\n            return tree\n        (feature, threshold, left_tree, right_tree) = tree\n        if x[feature] <= threshold:\n            return predict_tree(left_tree, x)\n        else:\n            return predict_tree(right_tree, x)\n    y_pred = np.full_like(y_train, fill_value=np.mean(y_train), dtype=float)\n    ensemble = []\n    for _ in range(n_estimators):\n        residuals = y_train - y_pred\n        tree = build_tree(X_train, residuals)\n        ensemble.append(tree)\n        for j in range(len(y_pred)):\n            y_pred[j] += learning_rate * predict_tree(tree, X_train[j])\n    y_test_pred = np.zeros(X_test.shape[0])\n    for i in range(X_test.shape[0]):\n        y_test_pred[i] = np.mean(y_train)\n        for tree in ensemble:\n            y_test_pred[i] += learning_rate * predict_tree(tree, X_test[i])\n    return [round(pred, 4) for pred in y_test_pred]"}
{"task_id": 413, "completion_id": 7, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n\n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    def split(X, y, feature, threshold):\n        left_mask = X[:, feature] < threshold\n        right_mask = X[:, feature] >= threshold\n        (X_left, y_left) = (X[left_mask], y[left_mask])\n        (X_right, y_right) = (X[right_mask], y[right_mask])\n        return (X_left, y_left, X_right, y_right)\n\n    def find_best_split(X, y):\n        best_mse = np.inf\n        best_feature = None\n        best_threshold = None\n        for feature in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                (X_left, y_left, X_right, y_right) = split(X, y, feature, threshold)\n                if len(y_left) == 0 or len(y_right) == 0:\n                    continue\n                mse = (len(y_left) * mean_squared_error(y_left, np.mean(y_left)) + len(y_right) * mean_squared_error(y_right, np.mean(y_right))) / len(y)\n                if mse < best_mse:\n                    best_mse = mse\n                    best_feature = feature\n                    best_threshold = threshold\n        return (best_feature, best_threshold)\n\n    def build_tree(X, y, depth=0):\n        if depth >= max_depth or np.all(y == y[0]):\n            return np.mean(y)\n        (feature, threshold) = find_best_split(X, y)\n        (X_left, y_left, X_right, y_right) = split(X, y, feature, threshold)\n        left_child = build_tree(X_left, y_left, depth + 1)\n        right_child = build_tree(X_right, y_right, depth + 1)\n        return (feature, threshold, left_child, right_child)\n\n    def predict_tree(tree, X_sample):\n        if isinstance(tree, float):\n            return tree\n        (feature, threshold, left_child, right_child) = tree\n        if X_sample[feature] < threshold:\n            return predict_tree(left_child, X_sample)\n        else:\n            return predict_tree(right_child, X_sample)\n    predictions = np.full(y_train.shape, np.mean(y_train))\n    trees = []\n    for _ in range(n_estimators):\n        residuals = y_train - predictions\n        tree = build_tree(X_train, residuals)\n        trees.append(tree)\n        for (i, X_sample) in enumerate(X_train):\n            predictions[i] += learning_rate * predict_tree(tree, X_sample)\n    final_predictions = np.zeros(X_test.shape[0])\n    for X_sample in X_test:\n        prediction = np.mean(y_train)\n        for tree in trees:\n            prediction += learning_rate * predict_tree(tree, X_sample)\n        final_predictions[i] = prediction\n    return [round(p, 4) for p in final_predictions]"}
{"task_id": 413, "completion_id": 8, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n\n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    def best_split(X, y):\n        best_mse = float('inf')\n        (best_feature, best_threshold, best_left, best_right) = (None, None, None, None)\n        for feature in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                left_mask = X[:, feature] <= threshold\n                right_mask = X[:, feature] > threshold\n                (left_y, right_y) = (y[left_mask], y[right_mask])\n                if len(left_y) == 0 or len(right_y) == 0:\n                    continue\n                mse = (len(left_y) * mean_squared_error(left_y, np.mean(left_y)) + len(right_y) * mean_squared_error(right_y, np.mean(right_y))) / len(y)\n                if mse < best_mse:\n                    best_mse = mse\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_left = (X[left_mask], left_y)\n                    best_right = (X[right_mask], right_y)\n        return (best_mse, best_feature, best_threshold, best_left, best_right)\n\n    class Node:\n\n        def __init__(self, feature=None, threshold=None, left=None, right=None, value=None):\n            self.feature = feature\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.value = value\n\n    def build_tree(X, y, depth=0):\n        if depth >= max_depth or len(np.unique(y)) == 1:\n            return Node(value=np.mean(y))\n        (mse, feature, threshold, left, right) = best_split(X, y)\n        if mse == float('inf'):\n            return Node(value=np.mean(y))\n        left_node = build_tree(left[0], left[1], depth + 1)\n        right_node = build_tree(right[0], right[1], depth + 1)\n        return Node(feature=feature, threshold=threshold, left=left_node, right=right_node)\n\n    def predict_tree(node, X):\n        if node.value is not None:\n            return node.value\n        if X[node.feature] <= node.threshold:\n            return predict_tree(node.left, X)\n        else:\n            return predict_tree(node.right, X)\n\n    def predict_trees(trees, X, learning_rate):\n        predictions = np.zeros(X.shape[0])\n        for tree in trees:\n            predictions += learning_rate * np.array([predict_tree(tree, x) for x in X])\n        return predictions\n    F = np.full_like(y_train, np.mean(y_train))\n    predictions_test = np.full(X_test.shape[0], np.mean(y_train))\n    trees = []\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        tree = build_tree(X_train, residuals)\n        trees.append(tree)\n        F += learning_rate * predict_tree(tree, X_train)\n        predictions_test += learning_rate * np.array([predict_tree(tree, x) for x in X_test])\n    return [round(y_pred, 4) for y_pred in predictions_test]"}
{"task_id": 413, "completion_id": 9, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n\n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    def best_split(X, y):\n        m = len(y)\n        if m <= 1:\n            return (None, None, None)\n        best_criteria = None\n        best_gain = 0\n        (best_x_col, best_x_split) = (None, None)\n        for i in range(X.shape[1]):\n            x_col = X[:, i]\n            for x_split in np.unique(x_col):\n                (x_l, x_r) = (x_col < x_split, x_col >= x_split)\n                (y_l, y_r) = (y[x_l], y[x_r])\n                (l_mean, r_mean) = (np.mean(y_l), np.mean(y_r) if len(y_r) != 0 else 0)\n                (num_l, num_r) = (len(y_l), len(y_r))\n                num_parent = num_l + num_r\n                parent_var = mean_squared_error(y, np.full_like(y, np.mean(y)))\n                child_var = num_l / num_parent * mean_squared_error(y_l, np.full_like(y_l, l_mean)) + num_r / num_parent * mean_squared_error(y_r, np.full_like(y_r, r_mean))\n                gain = parent_var - child_var\n                if gain > best_gain:\n                    best_gain = gain\n                    best_criteria = (i, x_split)\n                    (best_x_col, best_x_split) = (x_l, x_r)\n                    (best_y_l, best_y_r) = (y_l, y_r)\n        return (best_criteria, best_x_col, best_x_split, best_y_l, best_y_r)\n\n    def build_tree(X, y, depth=0):\n        if depth >= max_depth or len(y) == 1:\n            return np.mean(y)\n        (best_criteria, best_x_col, best_x_split, best_y_l, best_y_r) = best_split(X, y)\n        if best_criteria is None:\n            return np.mean(y)\n        (i, x_split) = best_criteria\n        left = build_tree(X[best_x_col], best_y_l, depth + 1)\n        right = build_tree(X[best_x_split], best_y_r, depth + 1)\n        return (i, x_split, left, right)\n\n    def tree_predict(tree, x):\n        if isinstance(tree, float):\n            return tree\n        (feature_i, threshold, left, right) = tree\n        if x[feature_i] < threshold:\n            return tree_predict(left, x)\n        else:\n            return tree_predict(right, x)\n    y_pred = np.full_like(y_train, np.mean(y_train))\n    trees = []\n    for _ in range(n_estimators):\n        residuals = y_train - y_pred\n        tree = build_tree(X_train, residuals)\n        trees.append(tree)\n        for i in range(len(X_train)):\n            y_pred[i] += learning_rate * tree_predict(tree, X_train[i])\n    y_test_pred = np.zeros(len(X_test))\n    for tree in trees:\n        for i in range(len(X_test)):\n            y_test_pred[i] += learning_rate * tree_predict(tree, X_test[i])\n    y_test_pred = y_pred_mean + y_test_pred\n    y_test_pred = np.round(y_test_pred, 4).tolist()\n    return y_test_pred"}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the probability density function (PDF) of a multivariate Gaussian distribution\n    for each sample in X given the mean and covariance matrix.\n\n    Parameters:\n    - X: A NumPy array of shape (n_samples, n_features) or (n_features, ) for a single sample.\n    - mean: A NumPy array of shape (n_features, ) representing the mean vector of the distribution.\n    - cov: A NumPy array of shape (n_features, n_features) representing the covariance matrix.\n\n    Returns:\n    - A Python list containing the PDF values for each sample in X, rounded to four decimal places.\n    \"\"\"\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    (n_samples, d) = X.shape\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    norm_factor = 1 / math.sqrt((2 * math.pi) ** d * det_cov)\n    pdf_values = []\n    for i in range(n_samples):\n        diff = X[i] - mean\n        exp_term = -0.5 * diff.T @ inv_cov @ diff\n        pdf_value = norm_factor * math.exp(exp_term)\n        pdf_values.append(round(pdf_value, 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 1, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the probability density function (PDF) of a multivariate Gaussian distribution.\n\n    Parameters:\n    X (np.ndarray): A NumPy array of shape (n_samples, n_features) containing the data points.\n    mean (np.ndarray): The mean vector of the distribution with shape (n_features,).\n    cov (np.ndarray): The covariance matrix of the distribution with shape (n_features, n_features).\n\n    Returns:\n    list: A list containing the PDF values for each data point in X, rounded to four decimal places.\n    \"\"\"\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    (n_samples, n_features) = X.shape\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    normalization_factor = 1 / math.sqrt((2 * math.pi) ** n_features * det_cov)\n    pdf_values = []\n    for i in range(n_samples):\n        diff = X[i] - mean\n        exponent = -0.5 * np.dot(diff.T, np.dot(inv_cov, diff))\n        pdf_value = normalization_factor * math.exp(exponent)\n        pdf_values.append(round(pdf_value, 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 2, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the Multivariate Gaussian Probability Density Function (PDF) for each data point in X.\n\n    Parameters:\n    X (numpy.ndarray): A 2D numpy array of shape (n_samples, n_features) containing the data points.\n                       If X is 1-dimensional, it is treated as (n_samples, 1).\n    mean (numpy.ndarray): A 1D numpy array of length n_features representing the mean vector.\n    cov (numpy.ndarray): A 2D numpy array of shape (n_features, n_features) representing the covariance matrix.\n\n    Returns:\n    list: A list of PDF values for each data point in X, rounded to four decimal places.\n    \"\"\"\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    (n_samples, d) = X.shape\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    norm_const = 1.0 / math.sqrt((2 * math.pi) ** d * det_cov)\n    pdf_values = []\n    for i in range(n_samples):\n        diff = X[i] - mean\n        exponent = -0.5 * np.dot(np.dot(diff.T, inv_cov), diff)\n        pdf_value = norm_const * math.exp(exponent)\n        pdf_values.append(round(pdf_value, 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 3, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the probability density function (PDF) of a multivariate Gaussian distribution.\n    \n    Parameters:\n    - X: NumPy array of shape (n_samples, n_features) or (n_features,).\n    - mean: NumPy array of shape (n_features,) representing the mean vector.\n    - cov: NumPy array of shape (n_features, n_features) representing the covariance matrix.\n    \n    Returns:\n    - A list of PDF values for each sample rounded to four decimal places.\n    \"\"\"\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    (n_samples, n_features) = X.shape\n    mean = np.array(mean).reshape(n_features)\n    cov = np.array(cov)\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    norm_const = 1 / math.sqrt((2 * math.pi) ** n_features * det_cov)\n    pdf_values = []\n    for x in X:\n        x = np.array(x).reshape(n_features)\n        diff = x - mean\n        exponent = -0.5 * np.dot(np.dot(diff.T, inv_cov), diff)\n        pdf_value = norm_const * math.exp(exponent)\n        pdf_values.append(round(pdf_value, 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the multivariate Gaussian probability density function (PDF) for a given dataset X,\n    with specified mean and covariance matrix.\n    \n    Parameters:\n    - X: NumPy array of shape (n_samples, n_features) or (n_features,) for a single sample.\n    - mean: Mean vector of the distribution, with shape (n_features,).\n    - cov: Covariance matrix of the distribution, with shape (n_features, n_features).\n    \n    Returns:\n    - A list of PDF values for each data point in X, rounded to four decimal places.\n    \"\"\"\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    (n_samples, n_features) = X.shape\n    inv_cov = np.linalg.inv(cov)\n    det_cov = np.linalg.det(cov)\n    norm_factor = 1.0 / math.sqrt((2 * math.pi) ** n_features * det_cov)\n    pdf_values = []\n    for i in range(n_samples):\n        diff = X[i] - mean\n        exponent = -0.5 * np.dot(diff.T, np.dot(inv_cov, diff))\n        pdf_value = norm_factor * math.exp(exponent)\n        pdf_values.append(round(pdf_value, 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 5, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the probability density function (PDF) of a multivariate Gaussian distribution.\n\n    Parameters:\n    X (np.ndarray): An array of shape (n_samples, n_features) or (n_samples,) representing the data points.\n    mean (np.ndarray): The mean vector of the distribution of shape (n_features,).\n    cov (np.ndarray): The covariance matrix of shape (n_features, n_features).\n\n    Returns:\n    list: A list of PDF values for each data point in X, rounded to four decimal places.\n    \"\"\"\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    (n_samples, n_features) = X.shape\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    norm_const = 1.0 / math.sqrt((2 * math.pi) ** n_features * det_cov)\n    pdf_values = []\n    for i in range(n_samples):\n        diff = X[i] - mean\n        exp_term = -0.5 * np.dot(np.dot(diff.T, inv_cov), diff)\n        pdf_value = norm_const * math.exp(exp_term)\n        pdf_values.append(round(pdf_value, 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 6, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the probability density function (PDF) of a multivariate Gaussian distribution.\n\n    Parameters:\n    X (np.ndarray): A 1D or 2D NumPy array of shape (n_samples, n_features) containing the data points.\n    mean (np.ndarray): The mean vector of the distribution of shape (n_features,).\n    cov (np.ndarray): The covariance matrix of shape (n_features, n_features).\n\n    Returns:\n    list: A list containing the PDF values for each data point in X, rounded to four decimal places.\n    \"\"\"\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    (n_samples, n_features) = X.shape\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    norm_const = 1.0 / math.sqrt((2 * math.pi) ** n_features * det_cov)\n    pdf_values = []\n    for i in range(n_samples):\n        diff = X[i] - mean\n        exponent = -0.5 * np.dot(diff.T, np.dot(inv_cov, diff))\n        pdf_value = norm_const * math.exp(exponent)\n        pdf_values.append(round(pdf_value, 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 7, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the probability density function (PDF) of a multivariate Gaussian distribution.\n    \n    Parameters:\n    X (np.ndarray): A NumPy array of shape (n_samples, n_features) or (n_features,) \n                    containing the data points for which the PDF values must be evaluated.\n    mean (np.ndarray): The mean vector of the distribution of shape (n_features,).\n    cov (np.ndarray): The covariance matrix of shape (n_features, n_features) which \n                      must be positive-definite (invertible).\n    \n    Returns:\n    list: A list containing the PDF values for each X[i] rounded to four decimal places.\n    \"\"\"\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    (n_samples, n_features) = X.shape\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    norm_factor = 1 / np.sqrt((2 * np.pi) ** n_features * det_cov)\n    pdf_values = []\n    for i in range(n_samples):\n        diff = X[i] - mean\n        exponent = -0.5 * np.dot(np.dot(diff, inv_cov), diff)\n        pdf = norm_factor * math.exp(exponent)\n        pdf_values.append(round(pdf, 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the probability density function (PDF) of a multivariate Gaussian distribution.\n    \n    Parameters:\n    X (np.ndarray): A NumPy array of shape (n_samples, n_features) containing the data points.\n    mean (np.ndarray): The mean vector of the distribution of shape (n_features,).\n    cov (np.ndarray): The covariance matrix of the distribution of shape (n_features, n_features).\n    \n    Returns:\n    list: A list of PDF values for each data point in X, rounded to four decimal places.\n    \"\"\"\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    n_features = X.shape[1]\n    n_samples = X.shape[0]\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    norm_term = 1 / np.sqrt((2 * np.pi) ** n_features * det_cov)\n    pdf_values = []\n    for i in range(n_samples):\n        diff = X[i] - mean\n        exponent = -0.5 * np.dot(np.dot(diff.T, inv_cov), diff)\n        pdf_value = norm_term * np.exp(exponent)\n        pdf_values.append(round(pdf_value.item(), 4))\n    return pdf_values"}
{"task_id": 416, "completion_id": 9, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the probability density function (PDF) of a multivariate Gaussian distribution.\n\n    Parameters:\n    X (np.array): Data points of shape (n_samples, n_features) or (n_features,) for a single sample.\n    mean (np.array): Mean vector of the distribution of shape (n_features,).\n    cov (np.array): Covariance matrix of the distribution of shape (n_features, n_features).\n\n    Returns:\n    list: A list of PDF values, one for each data point in X, rounded to four decimal places.\n    \"\"\"\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    (n_samples, n_features) = X.shape\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    norm_factor = 1.0 / np.sqrt((2 * np.pi) ** n_features * det_cov)\n    pdf_values = []\n    for i in range(n_samples):\n        diff = X[i] - mean\n        exponent = -0.5 * diff.T @ inv_cov @ diff\n        pdf_value = norm_factor * np.exp(exponent)\n        pdf_values.append(round(pdf_value, 4))\n    return pdf_values"}
{"task_id": 419, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n        X_new = np.hstack((np.ones((X_new.shape[0], 1)), X_new))\n    if isinstance(mu, (int, float)):\n        mu = np.full(X.shape[1], mu)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(X.shape[1])\n    elif len(V.shape) == 1:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    y_pred = X_new @ mu_p\n    return [round(pred, 4) for pred in y_pred]"}
{"task_id": 419, "completion_id": 1, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    if isinstance(mu, (int, float)):\n        mu = np.full(X.shape[1], mu)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(X.shape[1])\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    XTX = X.T @ X\n    XTy = X.T @ y\n    Sigma_p = np.linalg.inv(V_inv + XTX)\n    mu_p = Sigma_p @ (V_inv @ mu + XTy)\n    y_pred = X_new @ mu_p\n    return [round(pred, 4) for pred in y_pred]"}
{"task_id": 419, "completion_id": 2, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    if isinstance(mu, (int, float)):\n        mu = np.full(X.shape[1], mu)\n    else:\n        mu = np.asarray(mu)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V = np.eye(X.shape[1]) * V\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    else:\n        V = np.asarray(V)\n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    y_pred = X_new @ mu_p\n    return [round(pred, 4) for pred in y_pred]"}
{"task_id": 419, "completion_id": 3, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    from numpy.linalg import inv, cholesky\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n        X_new = np.c_[np.ones(X_new.shape[0]), X_new]\n    if isinstance(mu, (float, int)):\n        mu = np.full(X.shape[1], mu)\n    else:\n        mu = np.array(mu)\n        if mu.shape[0] != X.shape[1]:\n            raise ValueError('mu must be a scalar or have the same length as the number of features (including intercept if fit_intercept=True)')\n    if V is None:\n        V_inv = np.eye(X.shape[1])\n    else:\n        V = np.array(V)\n        if V.ndim == 0 or (V.ndim == 1 and len(V) == 1):\n            V_inv = np.eye(X.shape[1]) / V\n        elif V.ndim == 1:\n            V_inv = np.diag(1 / V)\n        elif V.ndim == 2:\n            V_inv = inv(V)\n        else:\n            raise ValueError('V must be a scalar, 1-D array, or 2-D square matrix.')\n    XTX = X.T @ X\n    XTy = X.T @ y\n    V_inv_mu = V_inv @ mu\n    Sigma_p_inv = V_inv + XTX\n    Sigma_p = inv(Sigma_p_inv)\n    mu_p = Sigma_p @ (V_inv_mu + XTy)\n    y_pred = X_new @ mu_p\n    return [round(val, 4) for val in y_pred]"}
{"task_id": 419, "completion_id": 4, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    if isinstance(mu, (int, float)):\n        mu = np.full(X.shape[1], mu)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(X.shape[1])\n    elif len(V.shape) == 1:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    y_pred = X_new @ mu_p\n    return [round(val, 4) for val in y_pred.tolist()]"}
{"task_id": 419, "completion_id": 5, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    if isinstance(mu, (int, float)):\n        mu = np.full(X.shape[1], mu)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(X.shape[1])\n    elif isinstance(V, np.ndarray):\n        if V.ndim == 1:\n            V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    Sigma_p_inv = V_inv + X.T @ X\n    Sigma_p = np.linalg.inv(Sigma_p_inv)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    y_pred = X_new @ mu_p\n    return [round(val, 4) for val in y_pred]"}
{"task_id": 419, "completion_id": 6, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    if isinstance(mu, (int, float)):\n        mu = np.full(X.shape[1], mu)\n    elif isinstance(mu, np.ndarray) and mu.shape[0] != X.shape[1]:\n        raise ValueError('The length of mu must match the number of features in X.')\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V = np.eye(X.shape[1]) * V\n    elif isinstance(V, np.ndarray) and V.shape[0] != X.shape[1]:\n        raise ValueError('The shape of V must match the number of features in X.')\n    V_inv = np.linalg.inv(V)\n    X_T = X.T\n    X_TX = X_T @ X\n    X_Ty = X_T @ y\n    Sigma_p = np.linalg.inv(V_inv + X_TX)\n    mu_p = Sigma_p @ (V_inv @ mu + X_Ty)\n    y_pred = X_new @ mu_p\n    return [round(p, 4) for p in y_pred]"}
{"task_id": 419, "completion_id": 7, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    if isinstance(mu, (int, float)):\n        mu = np.full(X.shape[1], mu)\n    else:\n        mu = np.array(mu)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(X.shape[1])\n    elif len(V.shape) == 1:\n        V = np.diag(V)\n    else:\n        V = np.array(V)\n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    y_pred = X_new @ mu_p\n    return [round(pred, 4) for pred in y_pred]"}
{"task_id": 419, "completion_id": 8, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    if isinstance(mu, (int, float)):\n        mu = np.full(X.shape[1], mu)\n    else:\n        mu = np.array(mu)\n    if V is None:\n        V_inv = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V_inv = np.eye(X.shape[1]) / V\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V_inv = np.diag(1 / V)\n    else:\n        V_inv = np.linalg.inv(V)\n    XTX = X.T @ X\n    XTy = X.T @ y\n    Sigma_p_inv = V_inv + XTX\n    Sigma_p = np.linalg.inv(Sigma_p_inv)\n    mu_p = Sigma_p @ (V_inv @ mu + XTy)\n    y_pred = X_new @ mu_p\n    return [round(pred, 4) for pred in y_pred]"}
{"task_id": 419, "completion_id": 9, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        intercept_col = np.ones((X.shape[0], 1))\n        X = np.hstack([intercept_col, X])\n        intercept_col_new = np.ones((X_new.shape[0], 1))\n        X_new = np.hstack([intercept_col_new, X_new])\n    if isinstance(mu, (float, int)):\n        mu = np.full(X.shape[1], mu)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (float, int)):\n        V = V * np.eye(X.shape[1])\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    XTX = X.T @ X\n    XTy = X.T @ y\n    Sigma_p = np.linalg.inv(V_inv + XTX)\n    mu_p = Sigma_p @ (V_inv @ mu + XTy)\n    y_pred = X_new @ mu_p\n    return [round(pred, 4) for pred in y_pred.tolist()]"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculates the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((a < 0 for a in actual)) or any((p < 0 for p in predicted)):\n        return -1\n    n = len(actual)\n    log_diffs = [(np.log1p(predicted[i]) - np.log1p(actual[i])) ** 2 for i in range(n)]\n    rmsle = np.sqrt(np.mean(log_diffs))\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 1, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((a < 0 for a in actual)) or any((p < 0 for p in predicted)):\n        return -1\n    n = len(actual)\n    rmsle = np.sqrt(1 / n * np.sum((np.log1p(predicted) - np.log1p(actual)) ** 2))\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 2, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((a < 0 for a in actual)) or any((p < 0 for p in predicted)):\n        return -1\n    n = len(actual)\n    rmsle = np.sqrt(1 / n * np.sum((np.log1p(predicted) - np.log1p(actual)) ** 2))\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 3, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((a < 0 for a in actual)) or any((p < 0 for p in predicted)):\n        return -1\n    n = len(actual)\n    rmsle = np.sqrt(1 / n * np.sum((np.log1p(predicted) - np.log1p(actual)) ** 2))\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 4, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Stub for the RMSLE metric.  Complete the body of the function.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((a < 0 for a in actual)) or any((p < 0 for p in predicted)):\n        return -1\n    n = len(actual)\n    rmsle = np.sqrt(1 / n * np.sum((np.log1p(predicted) - np.log1p(actual)) ** 2))\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 5, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((a < 0 for a in actual)) or any((p < 0 for p in predicted)):\n        return -1\n    n = len(actual)\n    rmsle = np.sqrt(1 / n * np.sum((np.log1p(predicted) - np.log1p(actual)) ** 2))\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 6, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((a < 0 for a in actual)) or any((p < 0 for p in predicted)):\n        return -1\n    n = len(actual)\n    log_diff_squared = [(np.log1p(pred) - np.log1p(act)) ** 2 for (act, pred) in zip(actual, predicted)]\n    rmsle = np.sqrt(1 / n * sum(log_diff_squared))\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 7, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((a < 0 for a in actual)) or any((p < 0 for p in predicted)):\n        return -1\n    n = len(actual)\n    rmsle = np.sqrt(1 / n * np.sum((np.log1p(predicted) - np.log1p(actual)) ** 2))\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 8, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Stub for the RMSLE metric.  Complete the body of the function.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((a < 0 for a in actual)) or any((p < 0 for p in predicted)):\n        return -1\n    n = len(actual)\n    log_diff_sum = sum(((np.log1p(predicted[i]) - np.log1p(actual[i])) ** 2 for i in range(n)))\n    rmsle = np.sqrt(log_diff_sum / n)\n    return round(rmsle, 4)"}
{"task_id": 423, "completion_id": 9, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((a < 0 for a in actual)) or any((p < 0 for p in predicted)):\n        return -1\n    n = len(actual)\n    rmsle = np.sqrt(1 / n * np.sum((np.log1p(predicted) - np.log1p(actual)) ** 2))\n    return round(rmsle, 4)"}
{"task_id": 428, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    if symmetric:\n        n = np.arange(window_len)\n        window = 0.5 - 0.5 * np.cos(2 * math.pi * n / (window_len - 1))\n    else:\n        n = np.arange(window_len + 1)\n        window = 0.5 - 0.5 * np.cos(2 * math.pi * n / window_len)\n        window = window[:-1]\n    window = np.round(window, 4)\n    return window.tolist()"}
{"task_id": 428, "completion_id": 1, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        n = np.arange(window_len)\n    else:\n        n = np.arange(window_len + 1)[:-1]\n    window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (len(n) - 1))\n    window = np.round(window, 4)\n    return window.tolist()"}
{"task_id": 428, "completion_id": 2, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        N = window_len\n    else:\n        N = window_len + 1\n    n = np.arange(N)\n    window = 0.5 - 0.5 * np.cos(2 * math.pi * n / (N - 1))\n    if not symmetric:\n        window = window[:-1]\n    return [round(coef, 4) for coef in window.tolist()]"}
{"task_id": 428, "completion_id": 3, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    if symmetric:\n        N = window_len\n    else:\n        N = window_len + 1\n    window = [0.5 - 0.5 * math.cos(2 * math.pi * n / (N - 1)) for n in range(N)]\n    if not symmetric:\n        window = window[:-1]\n    return [round(x, 4) for x in window]"}
{"task_id": 428, "completion_id": 4, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    actual_len = window_len + 1 if not symmetric else window_len\n    window = [0.5 - 0.5 * math.cos(2 * math.pi * n / (actual_len - 1)) for n in range(actual_len)]\n    if not symmetric:\n        window = window[:-1]\n    window = [round(x, 4) for x in window]\n    return window"}
{"task_id": 428, "completion_id": 5, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        n = np.arange(window_len)\n        window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len - 1))\n    else:\n        n = np.arange(window_len + 1)\n        window = 0.5 - 0.5 * np.cos(2 * np.pi * n / window_len)\n        window = window[:-1]\n    window = np.round(window, 4)\n    return window.tolist()"}
{"task_id": 428, "completion_id": 6, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        n = np.arange(window_len)\n        window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len - 1))\n    else:\n        n = np.arange(window_len + 1)\n        window = 0.5 - 0.5 * np.cos(2 * np.pi * n / window_len)\n        window = window[:-1]\n    window = np.round(window, 4)\n    return window.tolist()"}
{"task_id": 428, "completion_id": 7, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        N = window_len\n    else:\n        N = window_len + 1\n    n = np.arange(N)\n    window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    if not symmetric:\n        window = window[:-1]\n    return [round(x, 4) for x in window.tolist()]"}
{"task_id": 428, "completion_id": 8, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        n = np.arange(window_len)\n        window = 0.5 - 0.5 * np.cos(2 * math.pi * n / (window_len - 1))\n    else:\n        n = np.arange(window_len + 1)\n        window = 0.5 - 0.5 * np.cos(2 * math.pi * n / window_len)\n        window = window[:-1]\n    window = np.round(window, 4)\n    return window.tolist()"}
{"task_id": 428, "completion_id": 9, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    if symmetric:\n        N = window_len\n    else:\n        N = window_len + 1\n    window = np.array([0.5 - 0.5 * math.cos(2 * math.pi * n / (N - 1)) for n in range(N)])\n    if not symmetric:\n        window = window[:-1]\n    window = np.round(window, 4)\n    return window.tolist()"}
{"task_id": 433, "completion_id": 0, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    return (float(fan_in), float(fan_out))"}
{"task_id": 433, "completion_id": 1, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        fan_in = float(shape[1])\n        fan_out = float(shape[0])\n    return (fan_in, fan_out)"}
{"task_id": 433, "completion_id": 2, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        fan_in = float(shape[1])\n        fan_out = float(shape[0])\n    return (fan_in, fan_out)"}
{"task_id": 433, "completion_id": 3, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        fan_in = shape[1]\n        fan_out = shape[0]\n    return (float(fan_in), float(fan_out))"}
{"task_id": 433, "completion_id": 4, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    return (float(fan_in), float(fan_out))"}
{"task_id": 433, "completion_id": 5, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        fan_in = float(shape[0])\n        fan_out = float(shape[1])\n    return (fan_in, fan_out)"}
{"task_id": 433, "completion_id": 6, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    return (float(fan_in), float(fan_out))"}
{"task_id": 433, "completion_id": 7, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    return (float(fan_in), float(fan_out))"}
{"task_id": 433, "completion_id": 8, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    return (float(fan_in), float(fan_out))"}
{"task_id": 433, "completion_id": 9, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (out_channels, in_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        fan_in = float(shape[1])\n        fan_out = float(shape[0])\n    return (fan_in, fan_out)"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    y_pred = np.full_like(y, y.mean())\n    if n_estimators <= 0 or learning_rate == 0:\n        return y_pred.round(4).tolist()\n\n    def ols_linear_regression(X, y):\n        X_b = np.c_[np.ones((X.shape[0], 1)), X]\n        theta_best = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y)\n        return theta_best\n    for t in range(n_estimators):\n        residuals = y - y_pred\n        theta = ols_linear_regression(X, residuals)\n        h_t = np.c_[np.ones((X.shape[0], 1)), X].dot(theta)\n        y_pred += learning_rate * h_t\n    return y_pred.round(4).tolist()"}
{"task_id": 435, "completion_id": 1, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        mean_y = np.mean(y)\n        return [round(mean_y, 4)] * len(y)\n    y_pred = np.mean(y) * np.ones_like(y)\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        X_with_intercept = np.column_stack((np.ones_like(y), X))\n        coefficients = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ X_with_intercept.T @ residuals\n        h_t = X_with_intercept @ coefficients\n        y_pred += learning_rate * h_t\n    return [round(val, 4) for val in y_pred]"}
{"task_id": 435, "completion_id": 2, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        mean_y = np.mean(y)\n        return [round(mean_y, 4)] * len(y)\n    y_hat = np.full(len(y), np.mean(y))\n    for t in range(n_estimators):\n        residuals = y - y_hat\n        X_with_intercept = np.c_[np.ones(X.shape[0]), X]\n        beta = np.linalg.lstsq(X_with_intercept, residuals, rcond=None)[0]\n        h_t = X_with_intercept @ beta\n        y_hat += learning_rate * h_t\n    return [round(val, 4) for val in y_hat]"}
{"task_id": 435, "completion_id": 3, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    y_pred = np.full_like(y, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        X_with_intercept = np.c_[np.ones(X.shape[0]), X]\n        coefficients = np.linalg.lstsq(X_with_intercept, residuals, rcond=None)[0]\n        h_t = X_with_intercept @ coefficients\n        y_pred += learning_rate * h_t\n    return [round(val, 4) for val in y_pred]"}
{"task_id": 435, "completion_id": 4, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    y_pred = np.full_like(y, fill_value=np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        X_with_intercept = np.hstack((np.ones((X.shape[0], 1)), X))\n        weights = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ (X_with_intercept.T @ residuals)\n        h_t = X_with_intercept @ weights\n        y_pred += learning_rate * h_t\n    return [round(val, 4) for val in y_pred]"}
{"task_id": 435, "completion_id": 5, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    y_pred = np.full_like(y, np.mean(y))\n    for t in range(n_estimators):\n        residuals = y - y_pred\n        X_with_intercept = np.c_[np.ones(X.shape[0]), X]\n        beta = np.linalg.lstsq(X_with_intercept, residuals, rcond=None)[0]\n        h_t = X_with_intercept @ beta\n        y_pred += learning_rate * h_t\n    return [round(val, 4) for val in y_pred]"}
{"task_id": 435, "completion_id": 6, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    y_pred = np.full_like(y, np.mean(y))\n    for t in range(n_estimators):\n        residuals = y - y_pred\n        X_with_intercept = np.column_stack((np.ones(X.shape[0]), X))\n        coefficients = np.linalg.lstsq(X_with_intercept, residuals, rcond=None)[0]\n        weak_learner_pred = X_with_intercept @ coefficients\n        y_pred += learning_rate * weak_learner_pred\n    return [round(val, 4) for val in y_pred]"}
{"task_id": 435, "completion_id": 7, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    y_pred = np.full_like(y, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        X_with_intercept = np.c_[X, np.ones_like(y)]\n        beta = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ X_with_intercept.T @ residuals\n        weak_learner_pred = X_with_intercept @ beta\n        y_pred += learning_rate * weak_learner_pred\n    return [round(pred, 4) for pred in y_pred]"}
{"task_id": 435, "completion_id": 8, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description. Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    y_pred = np.full_like(y, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        X_with_intercept = np.c_[np.ones(X.shape[0]), X]\n        beta = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ X_with_intercept.T @ residuals\n        h_t = X_with_intercept @ beta\n        y_pred += learning_rate * h_t\n    return [round(val, 4) for val in y_pred]"}
{"task_id": 435, "completion_id": 9, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    y_pred = np.full_like(y, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        X_with_intercept = np.hstack((np.ones((X.shape[0], 1)), X))\n        beta = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ X_with_intercept.T @ residuals\n        h_t = X_with_intercept @ beta\n        y_pred += learning_rate * h_t\n    return [round(pred, 4) for pred in y_pred]"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n\n    def compute_sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    is_scalar = np.isscalar(x)\n    x = np.array(x)\n    sigma = compute_sigmoid(x)\n    if order == 0:\n        result = sigma\n    elif order == 1:\n        result = sigma * (1 - sigma)\n    elif order == 2:\n        result = sigma * (1 - sigma) * (1 - 2 * sigma)\n    else:\n        return -1\n    result = np.round(result, 4)\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 437, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    is_scalar = np.isscalar(x)\n    x = np.array(x)\n    sigma_x = 1 / (1 + np.exp(-x))\n    if order == 0:\n        result = sigma_x\n    elif order == 1:\n        result = sigma_x * (1 - sigma_x)\n    elif order == 2:\n        result = sigma_x * (1 - sigma_x) * (1 - 2 * sigma_x)\n    result = np.round(result, 4)\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 437, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in (0, 1, 2):\n        return -1\n    is_scalar = isinstance(x, (int, float))\n    x = np.array(x)\n    sigma = 1 / (1 + np.exp(-x))\n    if order == 0:\n        result = sigma\n    elif order == 1:\n        result = sigma * (1 - sigma)\n    elif order == 2:\n        result = sigma * (1 - sigma) * (1 - 2 * sigma)\n    result = np.round(result, 4)\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 437, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    is_scalar = isinstance(x, (int, float))\n    x = np.array(x, dtype=float)\n    sigma = 1 / (1 + np.exp(-x))\n    if order == 0:\n        result = sigma\n    elif order == 1:\n        result = sigma * (1 - sigma)\n    elif order == 2:\n        result = sigma * (1 - sigma) * (1 - 2 * sigma)\n    else:\n        return -1\n    result = np.round(result, 4)\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 437, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    is_scalar = np.isscalar(x)\n    x = np.array(x, dtype=float)\n    sigma_x = 1 / (1 + np.exp(-x))\n    if order == 0:\n        result = sigma_x\n    elif order == 1:\n        result = sigma_x * (1 - sigma_x)\n    elif order == 2:\n        result = sigma_x * (1 - sigma_x) * (1 - 2 * sigma_x)\n    else:\n        return -1\n    result = np.round(result, 4)\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 437, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n\n    def process_result(result):\n        if np.isscalar(x):\n            return round(float(result), 4)\n        else:\n            return result.round(4).tolist()\n    if isinstance(x, (int, float)):\n        x = np.array([x])\n    elif isinstance(x, list):\n        x = np.array(x)\n    elif not isinstance(x, np.ndarray):\n        raise ValueError('Input must be a scalar, list, or numpy array')\n    sigma_x = 1 / (1 + np.exp(-x))\n    if order == 0:\n        result = sigma_x\n    elif order == 1:\n        result = sigma_x * (1 - sigma_x)\n    elif order == 2:\n        result = sigma_x * (1 - sigma_x) * (1 - 2 * sigma_x)\n    else:\n        return -1\n    return process_result(result)"}
{"task_id": 437, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    is_scalar = np.isscalar(x)\n    x = np.array(x)\n    sig = 1 / (1 + np.exp(-x))\n    if order == 0:\n        result = sig\n    elif order == 1:\n        result = sig * (1 - sig)\n    elif order == 2:\n        result = sig * (1 - sig) * (1 - 2 * sig)\n    result = np.round(result, 4)\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 437, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    is_scalar = isinstance(x, (int, float))\n    x_array = np.array(x, dtype=float)\n    sigma_x = 1 / (1 + np.exp(-x_array))\n    if order == 0:\n        result = sigma_x\n    elif order == 1:\n        result = sigma_x * (1 - sigma_x)\n    elif order == 2:\n        result = sigma_x * (1 - sigma_x) * (1 - 2 * sigma_x)\n    result = np.round(result, 4)\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 437, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    is_scalar = np.isscalar(x)\n    x = np.array(x)\n    sigma_x = 1 / (1 + np.exp(-x))\n    if order == 0:\n        result = sigma_x\n    elif order == 1:\n        result = sigma_x * (1 - sigma_x)\n    elif order == 2:\n        result = sigma_x * (1 - sigma_x) * (1 - 2 * sigma_x)\n    result = np.round(result, 4)\n    return result.item() if is_scalar else result.tolist()"}
{"task_id": 437, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    is_scalar = np.isscalar(x)\n    x = np.array(x, dtype=float)\n    sigma = 1 / (1 + np.exp(-x))\n    if order == 0:\n        result = sigma\n    elif order == 1:\n        result = sigma * (1 - sigma)\n    elif order == 2:\n        result = sigma * (1 - sigma) * (1 - 2 * sigma)\n    else:\n        return -1\n    result = np.round(result, 4)\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if num_classes < np.max(y) + 1:\n        return -1\n    one_hot_matrix = np.zeros((y.size, num_classes), dtype=int)\n    one_hot_matrix[np.arange(y.size), y] = 1\n    return one_hot_matrix.tolist()"}
{"task_id": 438, "completion_id": 1, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    if num_classes is None:\n        num_classes = max(y) + 1\n    if num_classes < max(y) + 1:\n        return -1\n    one_hot_matrix = np.zeros((len(y), num_classes), dtype=int)\n    one_hot_matrix[np.arange(len(y)), y] = 1\n    return one_hot_matrix.tolist()"}
{"task_id": 438, "completion_id": 2, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if not isinstance(y, (list, np.ndarray)):\n        raise ValueError('Input y must be a list or a NumPy array.')\n    if isinstance(y, list):\n        y = np.array(y)\n    required_num_classes = np.max(y) + 1\n    if num_classes is None:\n        num_classes = required_num_classes\n    if num_classes < required_num_classes:\n        return -1\n    one_hot_matrix = np.zeros((y.size, num_classes), dtype=int)\n    one_hot_matrix[np.arange(y.size), y] = 1\n    return one_hot_matrix.tolist()"}
{"task_id": 438, "completion_id": 3, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if num_classes < np.max(y) + 1:\n        return -1\n    one_hot_matrix = np.zeros((len(y), num_classes), dtype=int)\n    one_hot_matrix[np.arange(len(y)), y] = 1\n    return one_hot_matrix.tolist()"}
{"task_id": 438, "completion_id": 4, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if num_classes < np.max(y) + 1:\n        return -1\n    one_hot_matrix = np.zeros((y.size, num_classes), dtype=int)\n    one_hot_matrix[np.arange(y.size), y] = 1\n    return one_hot_matrix.tolist()"}
{"task_id": 438, "completion_id": 5, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if num_classes < np.max(y) + 1:\n        return -1\n    one_hot_encoded = np.zeros((len(y), num_classes), dtype=int)\n    one_hot_encoded[np.arange(len(y)), y] = 1\n    return one_hot_encoded.tolist()"}
{"task_id": 438, "completion_id": 6, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.asarray(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if num_classes < np.max(y) + 1:\n        return -1\n    one_hot_matrix = np.zeros((y.size, num_classes), dtype=int)\n    one_hot_matrix[np.arange(y.size), y] = 1\n    return one_hot_matrix.tolist()"}
{"task_id": 438, "completion_id": 7, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif num_classes < np.max(y) + 1:\n        return -1\n    one_hot_matrix = np.zeros((y.shape[0], num_classes), dtype=int)\n    one_hot_matrix[np.arange(y.size), y] = 1\n    return one_hot_matrix.tolist()"}
{"task_id": 438, "completion_id": 8, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif num_classes < np.max(y) + 1:\n        return -1\n    one_hot_matrix = np.zeros((y.size, num_classes), dtype=int)\n    one_hot_matrix[np.arange(y.size), y] = 1\n    return one_hot_matrix.tolist()"}
{"task_id": 438, "completion_id": 9, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if num_classes < np.max(y) + 1:\n        return -1\n    one_hot_matrix = np.zeros((y.size, num_classes), dtype=int)\n    one_hot_matrix[np.arange(y.size), y] = 1\n    return one_hot_matrix.tolist()"}
{"task_id": 439, "completion_id": 0, "solution": "import itertools\nfrom collections import defaultdict\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n\n    def support(itemset):\n        \"\"\"Calculate the support of an itemset.\"\"\"\n        return sum((1 for transaction in transactions if itemset.issubset(transaction))) / len(transactions)\n\n    def self_join(frequent_itemsets, k):\n        \"\"\"Generate length-k candidates by self-joining length-(k-1) frequent itemsets.\"\"\"\n        candidates = set()\n        frequent_itemsets = sorted(frequent_itemsets)\n        n = len(frequent_itemsets)\n        for i in range(n):\n            for j in range(i + 1, n):\n                itemset1 = frequent_itemsets[i]\n                itemset2 = frequent_itemsets[j]\n                if itemset1[:k - 2] == itemset2[:k - 2] and itemset1[k - 2] < itemset2[k - 2]:\n                    candidate = itemset1 | itemset2\n                    if all((frozenset(candidate) - frozenset({item}) in frequent_itemsets for item in candidate)):\n                        candidates.add(candidate)\n        return candidates\n    item_count = defaultdict(int)\n    for transaction in transactions:\n        for item in transaction:\n            item_count[frozenset({item})] += 1\n    min_support_count = len(transactions) * min_sup\n    frequent_itemsets = {itemset for (itemset, count) in item_count.items() if count >= min_support_count}\n    k = 2\n    while frequent_itemsets:\n        result.extend(sorted(frequent_itemsets, key=lambda x: (len(x), tuple(x))))\n        candidate_itemsets = self_join(frequent_itemsets, k)\n        frequent_itemsets = {itemset for itemset in candidate_itemsets if support(itemset) >= min_support_count}\n        k += 1\n    return result"}
{"task_id": 439, "completion_id": 1, "solution": "import itertools\nfrom typing import List, Tuple, Hashable\ndef apriori_frequent_itemsets(transactions: List[List[Hashable]], min_sup: float) -> List[Tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n\n    def support(itemset: Tuple, transactions: List[List[Hashable]]) -> float:\n        \"\"\"Calculate the support of an itemset.\"\"\"\n        count = sum((1 for transaction in transactions if set(itemset).issubset(set(transaction))))\n        return count / len(transactions)\n\n    def generate_candidates(frequent_itemsets: List[Tuple], k: int) -> List[Tuple]:\n        \"\"\"Generate candidate itemsets of size k.\"\"\"\n        candidates = set()\n        for itemset1 in frequent_itemsets:\n            for itemset2 in frequent_itemsets:\n                candidate = tuple(sorted(set(itemset1).union(set(itemset2))))\n                if len(candidate) == k:\n                    all_k_minus_1_subsets = itertools.combinations(candidate, k - 1)\n                    if all((subset in frequent_itemsets for subset in all_k_minus_1_subsets)):\n                        candidates.add(candidate)\n        return list(candidates)\n    all_items = set((item for transaction in transactions for item in transaction))\n    candidate_1_itemsets = [(item,) for item in all_items]\n    frequent_itemsets = [itemset for itemset in candidate_1_itemsets if support(itemset, transactions) >= min_sup]\n    k = 2\n    while frequent_itemsets:\n        candidates = generate_candidates(frequent_itemsets, k)\n        frequent_itemsets = [itemset for itemset in candidates if support(itemset, transactions) >= min_sup]\n        all_frequent_itemsets.extend(frequent_itemsets)\n        k += 1\n    all_frequent_itemsets.sort(key=lambda itemset: (len(itemset), itemset))\n    return all_frequent_itemsets\ntransactions = [['milk', 'bread', 'butter'], ['milk', 'bread'], ['bread', 'butter'], ['bread', 'butter', 'beer'], ['bread', 'beer'], ['bread', 'milk', 'bread', 'butter', 'beer']]\nmin_sup = 0.5"}
{"task_id": 439, "completion_id": 2, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n\n    def support(itemset, transactions):\n        return sum((1 for transaction in transactions if itemset.issubset(transaction))) / len(transactions)\n\n    def generate_candidates(frequent_itemsets, k):\n        candidates = set()\n        for itemset1 in frequent_itemsets:\n            for itemset2 in frequent_itemsets:\n                if len(itemset1.union(itemset2)) == k:\n                    if all((subset in frequent_itemsets for subset in itertools.combinations(itemset1.union(itemset2), k - 1))):\n                        candidates.add(itemset1.union(itemset2))\n        return candidates\n    items = set((item for transaction in transactions for item in transaction))\n    frequent_itemsets = {frozenset([item]) for item in items if support(frozenset([item]), transactions) >= min_sup}\n    all_frequent_itemsets = list(frequent_itemsets)\n    k = 2\n    while frequent_itemsets:\n        frequent_itemsets = {cand for cand in generate_candidates(frequent_itemsets, k) if support(cand, transactions) >= min_sup}\n        all_frequent_itemsets.extend(frequent_itemsets)\n        k += 1\n    all_frequent_itemsets = [tuple(sorted(itemset)) for itemset in all_frequent_itemsets]\n    all_frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return all_frequent_itemsets"}
{"task_id": 439, "completion_id": 3, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n\n    def support(itemset: tuple) -> float:\n        return sum((1 for transaction in transactions if set(itemset).issubset(set(transaction)))) / len(transactions)\n    itemset_supports = {}\n    for transaction in transactions:\n        for item in transaction:\n            itemset = (item,)\n            if itemset not in itemset_supports:\n                itemset_supports[itemset] = 0\n            itemset_supports[itemset] += 1\n    k = 1\n    frequent_itemsets = {itemset for (itemset, count) in itemset_supports.items() if count / len(transactions) >= min_sup}\n    frequent_itemsets = sorted(frequent_itemsets)\n    while frequent_itemsets:\n        result.extend(frequent_itemsets)\n        candidate_itemsets = set()\n        for i in range(len(frequent_itemsets)):\n            for j in range(i + 1, len(frequent_itemsets)):\n                itemset1 = frequent_itemsets[i]\n                itemset2 = frequent_itemsets[j]\n                if itemset1[:-1] == itemset2[:-1]:\n                    candidate = tuple(sorted(set(itemset1) | set(itemset2)))\n                    if all((subset in frequent_itemsets for subset in itertools.combinations(candidate, k))):\n                        candidate_itemsets.add(candidate)\n        frequent_itemsets = []\n        for itemset in candidate_itemsets:\n            if support(itemset) >= min_sup:\n                frequent_itemsets.append(itemset)\n        frequent_itemsets = sorted(frequent_itemsets)\n        k += 1\n    result.sort(key=lambda x: (len(x), x))\n    return result\ntransactions = [['milk', 'bread', 'butter'], ['milk', 'bread'], ['bread', 'butter'], ['milk', 'butter'], ['bread']]\nmin_sup = 0.6"}
{"task_id": 439, "completion_id": 4, "solution": "import itertools\nfrom collections import defaultdict\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    min_support_count = len(transactions) * min_sup\n    item_support_count = defaultdict(int)\n    for transaction in transactions:\n        for item in transaction:\n            item_support_count[item,] += 1\n    frequent_itemsets = {item: support_count for (item, support_count) in item_support_count.items() if support_count >= min_support_count}\n    current_frequent_itemsets = [itemset for itemset in frequent_itemsets]\n    all_frequent_itemsets = list(current_frequent_itemsets)\n    k = 2\n    while current_frequent_itemsets:\n        candidate_itemsets = set(itertools.combinations(sorted(current_frequent_itemsets), 2))\n        candidate_itemsets = {tuple(sorted(set(a) | set(b))): 0 for (a, b) in candidate_itemsets if len(set(a) | set(b)) == k and all((tuple(sorted(s)) in frequent_itemsets for s in itertools.combinations(set(a) | set(b), k - 1)))}\n        for transaction in transactions:\n            for itemset in candidate_itemsets:\n                if set(itemset).issubset(transaction):\n                    candidate_itemsets[itemset] += 1\n        current_frequent_itemsets = [itemset for (itemset, support_count) in candidate_itemsets.items() if support_count >= min_support_count]\n        all_frequent_itemsets.extend(current_frequent_itemsets)\n        k += 1\n    return sorted(all_frequent_itemsets)\ntransactions = [['milk', 'bread'], ['bread', 'butter'], ['milk', 'bread', 'butter'], ['bread']]\nmin_sup = 0.5"}
{"task_id": 439, "completion_id": 5, "solution": "import itertools\nfrom collections import defaultdict\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n\n    def generate_frequent_1_itemsets(transactions, min_sup):\n        item_count = defaultdict(int)\n        for transaction in transactions:\n            for item in transaction:\n                item_count[item] += 1\n        num_transactions = len(transactions)\n        frequent_itemsets = {frozenset([item]) for (item, count) in item_count.items() if count / num_transactions >= min_sup}\n        return frequent_itemsets\n\n    def generate_candidate_itemsets(frequent_itemsets, k):\n        candidate_itemsets = set()\n        frequent_itemsets_list = list(frequent_itemsets)\n        num_frequent_itemsets = len(frequent_itemsets_list)\n        for i in range(num_frequent_itemsets):\n            for j in range(i + 1, num_frequent_itemsets):\n                a = frequent_itemsets_list[i]\n                b = frequent_itemsets_list[j]\n                if len(a | b) == k:\n                    candidate_itemsets.add(a | b)\n        return candidate_itemsets\n\n    def prune_candidate_itemsets(candidate_itemsets, frequent_itemsets, k):\n        frequent_itemsets_k_minus_1 = {frozenset(itemset) for itemset in frequent_itemsets if len(itemset) == k - 1}\n        pruned_candidates = set()\n        for candidate in candidate_itemsets:\n            if all((subset in frequent_itemsets_k_minus_1 for subset in itertools.combinations(candidate, k - 1))):\n                pruned_candidates.add(candidate)\n        return pruned_candidates\n\n    def count_support(candidate_itemsets, transactions):\n        itemset_count = defaultdict(int)\n        for transaction in transactions:\n            for itemset in candidate_itemsets:\n                if itemset.issubset(transaction):\n                    itemset_count[itemset] += 1\n        num_transactions = len(transactions)\n        return {itemset for (itemset, count) in itemset_count.items() if count / num_transactions >= min_sup}\n    frequent_itemsets = generate_frequent_1_itemsets(transactions, min_sup)\n    all_frequent_itemsets = []\n    k = 2\n    while frequent_itemsets:\n        all_frequent_itemsets.extend(frequent_itemsets)\n        candidate_itemsets = generate_candidate_itemsets(frequent_itemsets, k)\n        candidate_itemsets = prune_candidate_itemsets(candidate_itemsets, frequent_itemsets, k)\n        frequent_itemsets = count_support(candidate_itemsets, transactions)\n        k += 1\n    return sorted((tuple(sorted(itemset)) for itemset in all_frequent_itemsets), key=lambda x: (len(x), x))"}
{"task_id": 439, "completion_id": 6, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n\n    def support(itemset, transactions):\n        return sum((1 for transaction in transactions if set(itemset).issubset(transaction))) / len(transactions)\n\n    def generate_candidates(frequent_itemsets, k):\n        candidates = set()\n        frequent_itemsets = list(frequent_itemsets)\n        n = len(frequent_itemsets)\n        for i in range(n):\n            for j in range(i + 1, n):\n                a = frequent_itemsets[i]\n                b = frequent_itemsets[j]\n                if a[:k - 2] == b[:k - 2] and a[k - 2] < b[k - 2]:\n                    candidate = tuple(sorted(set(a) | set(b)))\n                    if len(candidate) == k:\n                        candidates.add(candidate)\n        return candidates\n\n    def prune_candidates(candidates, frequent_itemsets, k):\n        pruned_candidates = set()\n        for candidate in candidates:\n            all_subsets_of_size_k_minus_1 = itertools.combinations(candidate, k - 1)\n            if all((subset in frequent_itemsets for subset in all_subsets_of_size_k_minus_1)):\n                pruned_candidates.add(candidate)\n        return pruned_candidates\n    all_items = set((item for transaction in transactions for item in transaction))\n    frequent_itemsets = {item: support([item], transactions) for item in all_items}\n    frequent_itemsets = {item for (item, sup) in frequent_itemsets.items() if sup >= min_sup}\n    frequent_itemsets = {frozenset([item]) for item in frequent_itemsets}\n    k = 2\n    result = []\n    while frequent_itemsets:\n        result.extend(frequent_itemsets)\n        candidates = generate_candidates(frequent_itemsets, k)\n        candidates = prune_candidates(candidates, frequent_itemsets, k)\n        frequent_itemsets = {candidate for candidate in candidates if support(candidate, transactions) >= min_sup}\n        k += 1\n    result = [tuple(itemset) for itemset in result]\n    result.sort(key=lambda x: (len(x), x))\n    return result"}
{"task_id": 439, "completion_id": 7, "solution": "import itertools\nfrom typing import List, Tuple, Hashable\ndef apriori_frequent_itemsets(transactions: List[List[Hashable]], min_sup: float) -> List[Tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n\n    def count_itemsets(itemsets: set[Tuple], transactions: List[List[Hashable]]) -> List[Tuple]:\n        \"\"\"Count the support of each itemset in the transactions.\"\"\"\n        itemset_count = {itemset: 0 for itemset in itemsets}\n        for transaction in transactions:\n            transaction_set = set(transaction)\n            for itemset in itemsets:\n                if set(itemset).issubset(transaction_set):\n                    itemset_count[itemset] += 1\n        return [(itemset, count) for (itemset, count) in itemset_count.items() if count >= min_support_count]\n\n    def generate_candidates(itemsets: set[Tuple]) -> set[Tuple]:\n        \"\"\"Generate candidate itemsets of size k+1 from frequent itemsets of size k.\"\"\"\n        k = len(next(iter(itemsets)))\n        if k == 1:\n            return set((tuple(sorted(c)) for c in itertools.combinations(itemsets, 2)))\n        else:\n            candidates = set()\n            itemset_list = sorted(itemsets)\n            n_items = len(itemset_list)\n            for i in range(n_items):\n                for j in range(i + 1, n_items):\n                    is_candidate = True\n                    for l in range(k - 1):\n                        if itemset_list[i][l] != itemset_list[j][l]:\n                            is_candidate = False\n                            break\n                    if is_candidate:\n                        candidate = tuple(sorted(set(itemset_list[i]) | set(itemset_list[j])))\n                        if all((tuple(sorted(subset)) in itemsets for subset in itertools.combinations(candidate, k))):\n                            candidates.add(candidate)\n            return candidates\n    min_support_count = min_sup * len(transactions)\n    frequent_itemsets = []\n    all_items = set((item for transaction in transactions for item in transaction))\n    candidate_1_itemsets = {(item,) for item in all_items}\n    frequent_itemsets.extend(count_itemsets(candidate_1_itemsets, transactions))\n    k = 2\n    while frequent_itemsets and frequent_itemsets[-1][1] >= min_support_count:\n        current_frequent_itemsets = set((itemset[0] for itemset in frequent_itemsets if len(itemset[0]) == k - 1))\n        candidate_itemsets = generate_candidates(current_frequent_itemsets)\n        frequent_itemsets_k = count_itemsets(candidate_itemsets, transactions)\n        frequent_itemsets.extend(frequent_itemsets_k)\n        k += 1\n    frequent_itemsets.sort(key=lambda x: (len(x[0]), x[0]))\n    return [itemset for (itemset, count) in frequent_itemsets]\ntransactions = [['milk', 'bread', 'butter'], ['bread', 'butter'], ['milk', 'bread'], ['bread', 'butter', 'beer'], ['bread', 'beer', 'chips']]\nmin_sup = 0.4"}
{"task_id": 439, "completion_id": 8, "solution": "import itertools\nfrom collections import defaultdict\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n\n    def get_itemset_support(itemset, transactions_support):\n        return transactions_support[itemset] / total_transactions\n\n    def generate_frequent_itemsets(itemsets, transactions_support, min_sup):\n        frequent_itemsets = []\n        for itemset in itemsets:\n            if get_itemset_support(itemset, transactions_support) >= min_sup:\n                frequent_itemsets.append(itemset)\n        return frequent_itemsets\n\n    def generate_candidate_itemsets(itemsets, k):\n        candidates = set()\n        n = len(itemsets)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if itemsets[i][:k - 1] == itemsets[j][:k - 1]:\n                    candidate = tuple(sorted(set(itemsets[i]) | set(itemsets[j])))\n                    if all((subset in itemsets for subset in itertools.combinations(candidate, k))):\n                        candidates.add(candidate)\n        return list(candidates)\n    total_transactions = len(transactions)\n    if total_transactions == 0:\n        return []\n    item_count = defaultdict(int)\n    for transaction in transactions:\n        for item in transaction:\n            item_count[item,] += 1\n    frequent_itemsets = generate_frequent_itemsets(item_count.keys(), item_count, min_sup)\n    frequent_itemsets.sort()\n    k = 2\n    while frequent_itemsets:\n        candidate_itemsets = generate_candidate_itemsets(frequent_itemsets, k)\n        candidate_count = defaultdict(int)\n        for transaction in transactions:\n            transaction_items = tuple(sorted(transaction))\n            for candidate in candidate_itemsets:\n                if all((item in transaction_items for item in candidate)):\n                    candidate_count[candidate] += 1\n        frequent_itemsets = generate_frequent_itemsets(candidate_count.keys(), candidate_count, min_sup)\n        frequent_itemsets.sort()\n        k += 1\n        result.extend(frequent_itemsets)\n    result.sort(key=lambda x: (len(x), x))\n    return result"}
{"task_id": 439, "completion_id": 9, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n\n    def support(itemset):\n        \"\"\"Calculate the support of an itemset.\"\"\"\n        return sum((1 for transaction in transactions if itemset.issubset(transaction))) / len(transactions)\n\n    def generate_candidates(frequent_itemsets, k):\n        \"\"\"Generate candidate itemsets of size k from frequent itemsets of size k-1.\"\"\"\n        candidates = set()\n        for itemset1 in frequent_itemsets:\n            for itemset2 in frequent_itemsets:\n                candidate = itemset1 | itemset2\n                if len(candidate) == k:\n                    candidates.add(candidate)\n        return candidates\n\n    def has_infrequent_subset(candidate, frequent_itemsets):\n        \"\"\"Check if the candidate has any infrequent subset.\"\"\"\n        subsets = itertools.combinations(candidate, len(candidate) - 1)\n        return any((set(subset) not in frequent_itemsets for subset in subsets))\n    all_items = set((item for transaction in transactions for item in transaction))\n    frequent_itemsets = [frozenset([item]) for item in all_items if support({item}) >= min_sup]\n    frequent_itemsets.sort()\n    result = [tuple(itemset) for itemset in frequent_itemsets]\n    k = 2\n    while frequent_itemsets:\n        candidate_itemsets = generate_candidates(frequent_itemsets, k)\n        candidate_itemsets = {candidate for candidate in candidate_itemsets if not has_infrequent_subset(candidate, frequent_itemsets)}\n        frequent_itemsets = [candidate for candidate in candidate_itemsets if support(candidate) >= min_sup]\n        frequent_itemsets.sort()\n        result.extend([tuple(itemset) for itemset in frequent_itemsets])\n        k += 1\n    return result\ntransactions = [['milk', 'bread'], ['bread', 'butter'], ['bread', 'milk', 'butter'], ['bread', 'milk'], ['milk', 'butter']]\nmin_sup = 0.5"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    mean_probabilities = np.mean(predictions_array, axis=0)\n    rounded_probabilities = np.round(mean_probabilities, 4)\n    rounded_probabilities_list = rounded_probabilities.tolist()\n    predicted_classes = np.argmax(rounded_probabilities, axis=1).tolist()\n    return (rounded_probabilities_list, predicted_classes)"}
{"task_id": 440, "completion_id": 1, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    averaged_probabilities_rounded = np.round(averaged_probabilities, 4)\n    predicted_classes = np.argmax(averaged_probabilities_rounded, axis=1)\n    averaged_probabilities_list = averaged_probabilities_rounded.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    return (averaged_probabilities_list, predicted_classes_list)"}
{"task_id": 440, "completion_id": 2, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    averaged_probabilities_rounded = np.round(averaged_probabilities, 4)\n    predicted_classes = np.argmax(averaged_probabilities_rounded, axis=1)\n    averaged_probabilities_list = averaged_probabilities_rounded.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    return (averaged_probabilities_list, predicted_classes_list)"}
{"task_id": 440, "completion_id": 3, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    averaged_probabilities_rounded = np.round(averaged_probabilities, 4)\n    predicted_classes = np.argmax(averaged_probabilities_rounded, axis=1)\n    averaged_probabilities_rounded_list = averaged_probabilities_rounded.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    return (averaged_probabilities_rounded_list, predicted_classes_list)"}
{"task_id": 440, "completion_id": 4, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    averaged_probabilities_rounded = np.round(averaged_probabilities, 4)\n    averaged_probabilities_list = averaged_probabilities_rounded.tolist()\n    predicted_classes = np.argmax(averaged_probabilities_rounded, axis=1).tolist()\n    return (averaged_probabilities_list, predicted_classes)"}
{"task_id": 440, "completion_id": 5, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    averaged_probabilities_rounded = np.round(averaged_probabilities, 4)\n    predicted_classes = np.argmax(averaged_probabilities_rounded, axis=1)\n    averaged_probabilities_list = averaged_probabilities_rounded.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    return (averaged_probabilities_list, predicted_classes_list)"}
{"task_id": 440, "completion_id": 6, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    averaged_probabilities_rounded = np.round(averaged_probabilities, 4)\n    predicted_classes = np.argmax(averaged_probabilities_rounded, axis=1)\n    averaged_probabilities_list = averaged_probabilities_rounded.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    return (averaged_probabilities_list, predicted_classes_list)"}
{"task_id": 440, "completion_id": 7, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    averaged_probabilities_rounded = np.round(averaged_probabilities, 4)\n    predicted_classes = np.argmax(averaged_probabilities_rounded, axis=1)\n    averaged_probabilities_list = averaged_probabilities_rounded.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    return (averaged_probabilities_list, predicted_classes_list)"}
{"task_id": 440, "completion_id": 8, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    averaged_probabilities_rounded = np.round(averaged_probabilities, 4)\n    predicted_classes = np.argmax(averaged_probabilities_rounded, axis=1)\n    averaged_probabilities_list = averaged_probabilities_rounded.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    return (averaged_probabilities_list, predicted_classes_list)"}
{"task_id": 440, "completion_id": 9, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    averaged_probabilities_rounded = np.round(averaged_probabilities, 4)\n    predicted_classes = np.argmax(averaged_probabilities_rounded, axis=1)\n    averaged_probabilities_list = averaged_probabilities_rounded.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    return (averaged_probabilities_list, predicted_classes_list)"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    C = X.shape[1]\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, list):\n        sigma = np.array(sigma)\n        if len(sigma) != C or np.any(sigma <= 0):\n            return -1\n    elif isinstance(sigma, (int, float)):\n        sigma = float(sigma)\n        if sigma <= 0:\n            return -1\n    else:\n        return -1\n    diff = X[:, np.newaxis, :] - Y[np.newaxis, :, :]\n    squared_diff = (diff / sigma) ** 2\n    sum_squared_diff = np.sum(squared_diff, axis=2)\n    kernel_matrix = np.exp(-0.5 * sum_squared_diff)\n    kernel_matrix_rounded = np.round(kernel_matrix, 4)\n    return kernel_matrix_rounded.tolist()\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 444, "completion_id": 1, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    C = X.shape[1]\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma = np.full(C, sigma)\n    elif isinstance(sigma, (list, np.ndarray)):\n        if len(sigma) != C or not all((s > 0 for s in sigma)):\n            return -1\n        sigma = np.array(sigma)\n    else:\n        return -1\n    sigma_squared = sigma ** 2\n    diff = X[:, np.newaxis, :] - Y[np.newaxis, :, :]\n    squared_diff = (diff / sigma) ** 2\n    exp_arg = -0.5 * np.sum(squared_diff, axis=2)\n    kernel_matrix = np.exp(exp_arg)\n    return kernel_matrix.round(4).tolist()\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 444, "completion_id": 2, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    C = X.shape[1]\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n    elif isinstance(sigma, (list, np.ndarray)):\n        if len(sigma) != C or any((s <= 0 for s in sigma)):\n            return -1\n    else:\n        return -1\n    if isinstance(sigma, (int, float)):\n        sigma = np.full(C, sigma)\n    else:\n        sigma = np.array(sigma)\n    diff = X[:, np.newaxis, :] - Y[np.newaxis, :, :]\n    squared_diff = diff ** 2 / sigma ** 2\n    squared_diff_sum = np.sum(squared_diff, axis=2)\n    kernel_matrix = np.exp(-0.5 * squared_diff_sum)\n    kernel_matrix_rounded = np.round(kernel_matrix, 4).tolist()\n    return kernel_matrix_rounded\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 444, "completion_id": 3, "solution": "import numpy as np\nfrom typing import List, Union\ndef rbf_kernel(X: List[List[Union[int, float]]], Y: List[List[Union[int, float]]] | None=None, sigma: Union[float, List[float], None]=None) -> List[List[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is not None:\n        Y = np.array(Y)\n    else:\n        Y = X\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    C = X.shape[1]\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, list):\n        sigma = np.array(sigma)\n        if len(sigma) != C:\n            return -1\n    elif isinstance(sigma, (int, float)):\n        sigma = np.array([sigma] * C)\n    else:\n        return -1\n    if np.any(sigma <= 0):\n        return -1\n    XY_diff = np.expand_dims(X, 1) - np.expand_dims(Y, 0)\n    squared_distances = np.sum((XY_diff / sigma) ** 2, axis=2)\n    kernel_matrix = np.exp(-0.5 * squared_distances)\n    kernel_matrix_rounded = np.round(kernel_matrix, 4).tolist()\n    return kernel_matrix_rounded"}
{"task_id": 444, "completion_id": 4, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is not None:\n        Y = np.array(Y)\n    else:\n        Y = X\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    C = X.shape[1]\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, list):\n        if len(sigma) != C:\n            return -1\n        sigma = np.array(sigma)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n    else:\n        return -1\n    sigma = np.array(sigma)\n\n    def compute_rbf(x, y):\n        diff = (x - y) / sigma\n        squared_diff = np.sum(diff ** 2)\n        return np.exp(-0.5 * squared_diff)\n    (N, M) = (X.shape[0], Y.shape[0])\n    kernel_matrix = np.zeros((N, M))\n    for i in range(N):\n        for j in range(M):\n            kernel_matrix[i, j] = compute_rbf(X[i], Y[j])\n    kernel_matrix_rounded = np.round(kernel_matrix, 4)\n    return kernel_matrix_rounded.tolist()\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 444, "completion_id": 5, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    C = X.shape[1]\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n    elif isinstance(sigma, list):\n        if len(sigma) != C:\n            return -1\n        if any((s <= 0 for s in sigma)):\n            return -1\n    else:\n        return -1\n    XX = np.sum(X ** 2, axis=1, keepdims=True)\n    YY = np.sum(Y ** 2, axis=1)\n    XY = np.dot(X, Y.T)\n    squared_distances = XX + YY - 2 * XY\n    if isinstance(sigma, (int, float)):\n        kernel_matrix = np.exp(-0.5 * squared_distances / sigma ** 2)\n    else:\n        sigma = np.array(sigma)\n        sigma_squared = sigma ** 2\n        feature_squared_distances = np.outer(np.sum((X / sigma) ** 2, axis=1), np.sum((Y / sigma) ** 2, axis=1)) - 2 * np.dot(X / sigma, (Y / sigma).T)\n        kernel_matrix = np.exp(-0.5 * feature_squared_distances)\n    kernel_matrix = np.round(kernel_matrix, 4)\n    return kernel_matrix.tolist()\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 444, "completion_id": 6, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is not None:\n        Y = np.array(Y)\n    else:\n        Y = X\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    C = X.shape[1]\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, list):\n        sigma = np.array(sigma)\n        if len(sigma) != C:\n            return -1\n    elif isinstance(sigma, (int, float)):\n        sigma = np.full(C, sigma)\n    else:\n        return -1\n    if np.any(sigma <= 0):\n        return -1\n    X_norm_squared = np.sum(X ** 2, axis=1, keepdims=True)\n    Y_norm_squared = np.sum(Y ** 2, axis=1)\n    distance_matrix = X_norm_squared + Y_norm_squared - 2 * np.dot(X, Y.T)\n    scaled_distance_matrix = distance_matrix / (2 * sigma ** 2)\n    kernel_matrix = np.exp(-scaled_distance_matrix)\n    kernel_matrix_rounded = np.around(kernel_matrix, 4)\n    return kernel_matrix_rounded.tolist()\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 444, "completion_id": 7, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is not None:\n        Y = np.array(Y)\n    else:\n        Y = X\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    C = X.shape[1]\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n    elif isinstance(sigma, (list, np.ndarray)):\n        if len(sigma) != C or any((s <= 0 for s in sigma)):\n            return -1\n    else:\n        return -1\n    if isinstance(sigma, (int, float)):\n        distance_matrix = np.sum((X[:, np.newaxis, :] - Y[np.newaxis, :, :]) ** 2, axis=2)\n        kernel_matrix = np.exp(-0.5 * (distance_matrix / sigma ** 2))\n    else:\n        distance_matrix = np.sum(((X[:, np.newaxis, :] - Y[np.newaxis, :, :]) / sigma) ** 2, axis=2)\n        kernel_matrix = np.exp(-0.5 * distance_matrix)\n    kernel_matrix_rounded = np.round(kernel_matrix, 4)\n    return kernel_matrix_rounded.tolist()\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 444, "completion_id": 8, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    num_features = X.shape[1]\n    if sigma is None:\n        sigma = np.sqrt(num_features / 2)\n    elif isinstance(sigma, (int, float)):\n        sigma = float(sigma)\n        if sigma <= 0:\n            return -1\n    elif isinstance(sigma, (list, np.ndarray)):\n        if len(sigma) != num_features or any((s <= 0 for s in sigma)):\n            return -1\n        sigma = np.array(sigma)\n    else:\n        return -1\n    if isinstance(sigma, (int, float)):\n        diff = X[:, np.newaxis] - Y[np.newaxis, :]\n        squared_diff = np.sum((diff / sigma) ** 2, axis=2)\n    else:\n        diff = X[:, np.newaxis] - Y[np.newaxis, :]\n        squared_diff = np.sum((diff.T / sigma) ** 2, axis=0).T\n    kernel_matrix = np.exp(-0.5 * squared_diff)\n    return kernel_matrix.round(4).tolist()\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 444, "completion_id": 9, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    C = X.shape[1]\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma = np.full(C, sigma)\n    elif isinstance(sigma, (list, np.ndarray)):\n        if len(sigma) != C or any((s <= 0 for s in sigma)):\n            return -1\n        sigma = np.array(sigma)\n    else:\n        return -1\n    diff = X[:, np.newaxis, :] - Y[np.newaxis, :, :]\n    squared_diff = (diff / sigma) ** 2\n    summed_squared_diff = np.sum(squared_diff, axis=2)\n    kernel_matrix = np.exp(-0.5 * summed_squared_diff)\n    kernel_matrix_rounded = np.round(kernel_matrix, 4).tolist()\n    return kernel_matrix_rounded\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0"}
{"task_id": 446, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef entropy(labels):\n    \"\"\"Compute the Shannon entropy of a list of labels.\"\"\"\n    if not labels:\n        return 0.0\n    counts = Counter(labels)\n    total = len(labels)\n    return -sum((count / total * np.log2(count / total) for count in counts.values()))\ndef majority_label(labels):\n    \"\"\"Find the majority label in a list of labels. In case of ties, return the smallest label.\"\"\"\n    if not labels:\n        return None\n    counts = Counter(labels)\n    majority_count = max(counts.values())\n    return min((label for (label, count) in counts.items() if count == majority_count))\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    parent_entropy = entropy(y)\n    best_gain = 0.0\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n    majority_label_y = majority_label(y)\n    for j in range(n_features):\n        feature_values = X[:, j]\n        unique_values = np.unique(feature_values)\n        if len(unique_values) < 2:\n            continue\n        thresholds = [(unique_values[i] + unique_values[i + 1]) / 2 for i in range(len(unique_values) - 1)]\n        for t in thresholds:\n            left_indices = feature_values <= t\n            right_indices = feature_values > t\n            y_left = y[left_indices]\n            y_right = y[right_indices]\n            p_left = len(y_left) / n_samples\n            p_right = len(y_right) / n_samples\n            current_gain = parent_entropy - (p_left * entropy(y_left) + p_right * entropy(y_right))\n            if current_gain > best_gain:\n                best_gain = current_gain\n                best_feature_index = j\n                best_threshold = round(t, 4)\n                left_majority_label = majority_label(y_left)\n                right_majority_label = majority_label(y_right)\n    if best_gain == 0.0:\n        return (-1, None, majority_label_y, majority_label_y)\n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)"}
{"task_id": 446, "completion_id": 1, "solution": "import numpy as np\nfrom collections import Counter\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n\n    def shannon_entropy(labels):\n        counts = Counter(labels)\n        total = len(labels)\n        return -sum((count / total * np.log2(count / total) for count in counts.values()))\n    parent_entropy = shannon_entropy(y)\n    best_gain = 0.0\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n    for j in range(n_features):\n        feature_column = X[:, j]\n        unique_values = np.unique(feature_column)\n        for i in range(len(unique_values) - 1):\n            t = round((unique_values[i] + unique_values[i + 1]) / 2, 4)\n            left_indices = feature_column <= t\n            right_indices = feature_column > t\n            left_labels = y[left_indices]\n            right_labels = y[right_indices]\n            if len(left_labels) == 0 or len(right_labels) == 0:\n                continue\n            left_entropy = shannon_entropy(left_labels)\n            right_entropy = shannon_entropy(right_labels)\n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n            gain = parent_entropy - p_left * left_entropy - p_right * right_entropy\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = t\n                left_majority_label = Counter(left_labels).most_common(1)[0][0]\n                right_majority_label = Counter(right_labels).most_common(1)[0][0]\n    if best_feature_index == -1:\n        majority_label = Counter(y).most_common(1)[0][0]\n        return (-1, None, majority_label, majority_label)\n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)"}
{"task_id": 446, "completion_id": 2, "solution": "import numpy as np\nfrom collections import Counter\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    if len(labels) == 0:\n        return 0.0\n    counts = Counter(labels)\n    frequencies = [count / len(labels) for count in counts.values()]\n    return -sum((p * np.log2(p) for p in frequencies if p > 0))\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    parent_entropy = entropy(y)\n    best_gain = 0\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n    majority_label = Counter(y).most_common(1)[0][0]\n    for j in range(n_features):\n        feature = X[:, j]\n        sorted_indices = np.argsort(feature)\n        sorted_feature = feature[sorted_indices]\n        sorted_labels = y[sorted_indices]\n        thresholds = [(sorted_feature[i] + sorted_feature[i + 1]) / 2 for i in range(len(sorted_feature) - 1) if sorted_feature[i] != sorted_feature[i + 1]]\n        for t in thresholds:\n            left_labels = sorted_labels[sorted_feature <= t]\n            right_labels = sorted_labels[sorted_feature > t]\n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n            gain = parent_entropy - (p_left * left_entropy + p_right * right_entropy)\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = t\n                left_majority_label = Counter(left_labels).most_common(1)[0][0]\n                right_majority_label = Counter(right_labels).most_common(1)[0][0]\n            elif gain == best_gain:\n                if j < best_feature_index or (j == best_feature_index and t < best_threshold):\n                    best_threshold = t\n                    left_majority_label = Counter(left_labels).most_common(1)[0][0]\n                    right_majority_label = Counter(right_labels).most_common(1)[0][0]\n    if best_feature_index == -1:\n        return (-1, None, majority_label, majority_label)\n    return (best_feature_index, round(best_threshold, 4), left_majority_label, right_majority_label)"}
{"task_id": 446, "completion_id": 3, "solution": "import numpy as np\nfrom collections import Counter\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    return -sum((count / total_labels * np.log2(count / total_labels) for count in label_counts.values()))\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    parent_entropy = entropy(y)\n    best_gain = 0.0\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n\n    def majority_label(labels):\n        if not labels:\n            return None\n        label_counts = Counter(labels)\n        return min(label_counts.items(), key=lambda x: (-x[1], x[0]))[0]\n    overall_majority_label = majority_label(y)\n    for j in range(n_features):\n        sorted_indices = np.argsort(X[:, j])\n        sorted_X = X[sorted_indices, j]\n        sorted_y = y[sorted_indices]\n        unique_values = np.unique(sorted_X)\n        if len(unique_values) < 2:\n            continue\n        for i in range(len(unique_values) - 1):\n            t = (unique_values[i] + unique_values[i + 1]) / 2.0\n            left_indices = sorted_X <= t\n            right_indices = sorted_X > t\n            left_y = sorted_y[left_indices]\n            right_y = sorted_y[right_indices]\n            p_left = len(left_y) / n_samples\n            p_right = len(right_y) / n_samples\n            left_entropy = entropy(left_y)\n            right_entropy = entropy(right_y)\n            gain = parent_entropy - (p_left * left_entropy + p_right * right_entropy)\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(t, 4)\n                left_majority_label = majority_label(left_y)\n                right_majority_label = majority_label(right_y)\n    if best_gain == 0.0:\n        return (-1, None, overall_majority_label, overall_majority_label)\n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)"}
{"task_id": 446, "completion_id": 4, "solution": "import numpy as np\nfrom collections import Counter\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n\n    def entropy(labels):\n        if len(labels) == 0:\n            return 0.0\n        value_counts = Counter(labels)\n        probs = np.array([count / len(labels) for count in value_counts.values()])\n        return -np.sum(probs * np.log2(probs))\n\n    def majority_label(labels):\n        if len(labels) == 0:\n            return None\n        value_counts = Counter(labels)\n        most_common = value_counts.most_common()\n        majority_count = most_common[0][1]\n        majority_labels = [label for (label, count) in most_common if count == majority_count]\n        return min(majority_labels)\n    (n_samples, n_features) = X.shape\n    parent_entropy = entropy(y)\n    best_gain = -1\n    best_feature_index = -1\n    best_threshold = None\n    best_left_majority_label = None\n    best_right_majority_label = None\n    majority_label_y = majority_label(y)\n    for j in range(n_features):\n        feature_values = X[:, j]\n        unique_values = np.unique(feature_values)\n        if len(unique_values) < 2:\n            continue\n        thresholds = [(unique_values[i] + unique_values[i + 1]) / 2 for i in range(len(unique_values) - 1)]\n        for t in thresholds:\n            left_indices = feature_values <= t\n            right_indices = feature_values > t\n            y_left = y[left_indices]\n            y_right = y[right_indices]\n            p_left = len(y_left) / n_samples\n            p_right = len(y_right) / n_samples\n            current_gain = parent_entropy - (p_left * entropy(y_left) + p_right * entropy(y_right))\n            if current_gain > best_gain:\n                best_gain = current_gain\n                best_feature_index = j\n                best_threshold = round(t, 4)\n                best_left_majority_label = majority_label(y_left)\n                best_right_majority_label = majority_label(y_right)\n    if best_gain == -1:\n        return (-1, None, majority_label_y, majority_label_y)\n    return (best_feature_index, best_threshold, best_left_majority_label, best_right_majority_label)"}
{"task_id": 446, "completion_id": 5, "solution": "import numpy as np\nfrom collections import Counter\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    if len(labels) == 0:\n        return 0.0\n    label_counts = Counter(labels)\n    probs = [count / len(labels) for count in label_counts.values()]\n    return -sum((p * np.log2(p) for p in probs if p > 0))\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    parent_entropy = entropy(y)\n    best_gain = 0\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n    parent_label_counts = Counter(y)\n    majority_label = min(parent_label_counts, key=lambda k: (-parent_label_counts[k], k))\n    for j in range(n_features):\n        feature_values = X[:, j]\n        unique_values = np.unique(feature_values)\n        thresholds = (unique_values[:-1] + unique_values[1:]) / 2.0\n        for t in thresholds:\n            left_indices = X[:, j] <= t\n            right_indices = X[:, j] > t\n            left_labels = y[left_indices]\n            right_labels = y[right_indices]\n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n            gain = parent_entropy - (p_left * left_entropy + p_right * right_entropy)\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(t, 4)\n                left_majority_label = Counter(left_labels).most_common(1)[0][0]\n                right_majority_label = Counter(right_labels).most_common(1)[0][0]\n            elif gain == best_gain:\n                if j < best_feature_index:\n                    best_feature_index = j\n                    best_threshold = round(t, 4)\n                    left_majority_label = Counter(left_labels).most_common(1)[0][0]\n                    right_majority_label = Counter(right_labels).most_common(1)[0][0]\n                elif j == best_feature_index and t < best_threshold:\n                    best_threshold = round(t, 4)\n                    left_majority_label = Counter(left_labels).most_common(1)[0][0]\n                    right_majority_label = Counter(right_labels).most_common(1)[0][0]\n    if best_gain == 0:\n        return (-1, None, majority_label, majority_label)\n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)"}
{"task_id": 446, "completion_id": 6, "solution": "import numpy as np\nfrom collections import Counter\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    if len(labels) == 0:\n        return 0.0\n    label_counts = Counter(labels)\n    probabilities = [count / len(labels) for count in label_counts.values()]\n    return -sum((p * np.log2(p) for p in probabilities if p > 0))\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    best_gain = 0.0\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n    parent_entropy = entropy(y)\n    majority_label = Counter(y).most_common(1)[0][0]\n    for j in range(n_features):\n        unique_values = np.unique(X[:, j])\n        if len(unique_values) < 2:\n            continue\n        thresholds = [(unique_values[i] + unique_values[i + 1]) / 2 for i in range(len(unique_values) - 1)]\n        for t in thresholds:\n            left_indices = X[:, j] <= t\n            right_indices = X[:, j] > t\n            left_labels = y[left_indices]\n            right_labels = y[right_indices]\n            if len(left_labels) == 0 or len(right_labels) == 0:\n                continue\n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n            weighted_child_entropy = p_left * left_entropy + p_right * right_entropy\n            gain = parent_entropy - weighted_child_entropy\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(t, 4)\n                left_majority_label = Counter(left_labels).most_common(1)[0][0]\n                right_majority_label = Counter(right_labels).most_common(1)[0][0]\n            elif gain == best_gain:\n                if j < best_feature_index:\n                    best_feature_index = j\n                    best_threshold = round(t, 4)\n                    left_majority_label = Counter(left_labels).most_common(1)[0][0]\n                    right_majority_label = Counter(right_labels).most_common(1)[0][0]\n                elif j == best_feature_index and t < best_threshold:\n                    best_threshold = round(t, 4)\n                    left_majority_label = Counter(left_labels).most_common(1)[0][0]\n                    right_majority_label = Counter(right_labels).most_common(1)[0][0]\n    if best_gain == 0.0:\n        return (-1, None, majority_label, majority_label)\n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)"}
{"task_id": 446, "completion_id": 7, "solution": "import numpy as np\nfrom collections import Counter\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n\n    def shannon_entropy(labels):\n        counts = Counter(labels)\n        total = len(labels)\n        entropy = 0.0\n        for count in counts.values():\n            p = count / total\n            entropy -= p * np.log2(p)\n        return entropy\n\n    def majority_label(labels):\n        counts = Counter(labels)\n        max_count = max(counts.values())\n        majority_labels = [label for (label, count) in counts.items() if count == max_count]\n        return min(majority_labels)\n    parent_entropy = shannon_entropy(y)\n    majority_label_y = majority_label(y)\n    best_feature_index = -1\n    best_threshold = None\n    best_gain = 0.0\n    left_majority_label = majority_label_y\n    right_majority_label = majority_label_y\n    for j in range(n_features):\n        unique_values = np.unique(X[:, j])\n        thresholds = [(unique_values[i] + unique_values[i + 1]) / 2 for i in range(len(unique_values) - 1)]\n        for t in thresholds:\n            left_indices = X[:, j] <= t\n            right_indices = X[:, j] > t\n            left_labels = y[left_indices]\n            right_labels = y[right_indices]\n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n            H_left = shannon_entropy(left_labels) if left_labels.size > 0 else 0.0\n            H_right = shannon_entropy(right_labels) if right_labels.size > 0 else 0.0\n            gain = parent_entropy - p_left * H_left - p_right * H_right\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(t, 4)\n                left_majority_label = majority_label(left_labels)\n                right_majority_label = majority_label(right_labels)\n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)"}
{"task_id": 446, "completion_id": 8, "solution": "import numpy as np\nfrom collections import Counter\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n\n    def entropy(labels):\n        counts = Counter(labels)\n        total = len(labels)\n        return -sum((count / total * np.log2(count / total) for count in counts.values()))\n\n    def majority_label(labels):\n        counts = Counter(labels)\n        most_common = counts.most_common()\n        max_count = most_common[0][1]\n        return min((label for (label, count) in most_common if count == max_count))\n    parent_entropy = entropy(y)\n    (n_samples, n_features) = X.shape\n    best_gain = 0\n    best_feature_index = -1\n    best_threshold = None\n    majority_label_all = majority_label(y)\n    for j in range(n_features):\n        column = X[:, j]\n        unique_values = np.unique(column)\n        if len(unique_values) == 1:\n            continue\n        thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n        for t in thresholds:\n            left_mask = X[:, j] <= t\n            right_mask = X[:, j] > t\n            y_left = y[left_mask]\n            y_right = y[right_mask]\n            if len(y_left) == 0 or len(y_right) == 0:\n                continue\n            p_left = len(y_left) / n_samples\n            p_right = len(y_right) / n_samples\n            gain = parent_entropy - (p_left * entropy(y_left) + p_right * entropy(y_right))\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(t, 4)\n                left_majority_label = majority_label(y_left)\n                right_majority_label = majority_label(y_right)\n    if best_gain == 0:\n        return (-1, None, majority_label_all, majority_label_all)\n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)"}
{"task_id": 446, "completion_id": 9, "solution": "import numpy as np\nfrom collections import Counter\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n\n    def entropy(labels):\n        value_counts = np.bincount(labels)\n        probabilities = value_counts / len(labels)\n        return -np.sum(probabilities * np.log2(probabilities + 1e-09))\n    parent_entropy = entropy(y)\n    best_gain = 0\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n    majority_label = Counter(y).most_common(1)[0][0]\n    for j in range(n_features):\n        sorted_indices = np.argsort(X[:, j])\n        sorted_X = X[sorted_indices, j]\n        sorted_y = y[sorted_indices]\n        thresholds = [(sorted_X[i] + sorted_X[i + 1]) / 2 for i in range(n_samples - 1) if sorted_X[i] != sorted_X[i + 1]]\n        for t in thresholds:\n            left_indices = sorted_indices[sorted_X <= t]\n            right_indices = sorted_indices[sorted_X > t]\n            left_labels = sorted_y[sorted_X <= t]\n            right_labels = sorted_y[sorted_X > t]\n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n            gain = parent_entropy - (p_left * left_entropy + p_right * right_entropy)\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(t, 4)\n                left_majority_label = Counter(left_labels).most_common(1)[0][0]\n                right_majority_label = Counter(right_labels).most_common(1)[0][0]\n    if best_gain == 0:\n        return (-1, None, majority_label, majority_label)\n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X = np.array(X)\n    subset1 = []\n    subset2 = []\n    for sample in X:\n        if isinstance(threshold, (int, float)):\n            if sample[feature_i] >= threshold:\n                subset1.append(sample.tolist())\n            else:\n                subset2.append(sample.tolist())\n        elif sample[feature_i] == threshold:\n            subset1.append(sample.tolist())\n        else:\n            subset2.append(sample.tolist())\n    return [subset1, subset2]"}
{"task_id": 452, "completion_id": 1, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    subset_1 = []\n    subset_2 = []\n    for sample in X:\n        value = sample[feature_i]\n        if isinstance(threshold, (int, float)):\n            if value >= threshold:\n                subset_1.append(sample.tolist())\n            else:\n                subset_2.append(sample.tolist())\n        elif value == threshold:\n            subset_1.append(sample.tolist())\n        else:\n            subset_2.append(sample.tolist())\n    return [subset_1, subset_2]"}
{"task_id": 452, "completion_id": 2, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    is_numeric_threshold = isinstance(threshold, (int, float))\n    subset1 = []\n    subset2 = []\n    for sample in X:\n        if is_numeric_threshold:\n            if sample[feature_i] >= threshold:\n                subset1.append(sample.tolist())\n            else:\n                subset2.append(sample.tolist())\n        elif sample[feature_i] == threshold:\n            subset1.append(sample.tolist())\n        else:\n            subset2.append(sample.tolist())\n    return [subset1, subset2]"}
{"task_id": 452, "completion_id": 3, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    numeric_threshold = isinstance(threshold, (int, float))\n    subset_1 = []\n    subset_2 = []\n    for sample in X:\n        value = sample[feature_i]\n        if numeric_threshold:\n            if value >= threshold:\n                subset_1.append(sample.tolist())\n            else:\n                subset_2.append(sample.tolist())\n        elif value == threshold:\n            subset_1.append(sample.tolist())\n        else:\n            subset_2.append(sample.tolist())\n    return [subset_1, subset_2]"}
{"task_id": 452, "completion_id": 4, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    subset1 = []\n    subset2 = []\n    is_numeric = isinstance(threshold, (int, float))\n    for sample in X:\n        feature_value = sample[feature_i]\n        if is_numeric and feature_value >= threshold:\n            subset1.append(sample.tolist())\n        elif not is_numeric and feature_value == threshold:\n            subset1.append(sample.tolist())\n        else:\n            subset2.append(sample.tolist())\n    return [subset1, subset2]"}
{"task_id": 452, "completion_id": 5, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    is_numeric = isinstance(threshold, (int, float))\n    subset1 = []\n    subset2 = []\n    for sample in X:\n        value = sample[feature_i]\n        if is_numeric and value >= threshold or (not is_numeric and value == threshold):\n            subset1.append(sample.tolist())\n        else:\n            subset2.append(sample.tolist())\n    return [subset1, subset2]"}
{"task_id": 452, "completion_id": 6, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    subset1 = []\n    subset2 = []\n    is_numeric = isinstance(threshold, (int, float))\n    for sample in X:\n        if is_numeric:\n            if sample[feature_i] >= threshold:\n                subset1.append(sample.tolist())\n            else:\n                subset2.append(sample.tolist())\n        elif sample[feature_i] == threshold:\n            subset1.append(sample.tolist())\n        else:\n            subset2.append(sample.tolist())\n    return [subset1, subset2]"}
{"task_id": 452, "completion_id": 7, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    is_numeric_threshold = isinstance(threshold, (int, float))\n    subset1 = []\n    subset2 = []\n    for sample in X:\n        sample_list = sample.tolist() if isinstance(sample, np.ndarray) else sample\n        if is_numeric_threshold and sample_list[feature_i] >= threshold or (not is_numeric_threshold and sample_list[feature_i] == threshold):\n            subset1.append(sample_list)\n        else:\n            subset2.append(sample_list)\n    return [subset1, subset2]"}
{"task_id": 452, "completion_id": 8, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    subset1 = []\n    subset2 = []\n    for sample in X:\n        feature_value = sample[feature_i]\n        if isinstance(threshold, (int, float)):\n            if feature_value >= threshold:\n                subset1.append(sample)\n            else:\n                subset2.append(sample)\n        elif feature_value == threshold:\n            subset1.append(sample)\n        else:\n            subset2.append(sample)\n    subset1 = [list(sample) for sample in subset1]\n    subset2 = [list(sample) for sample in subset2]\n    return [subset1, subset2]"}
{"task_id": 452, "completion_id": 9, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    subset1 = []\n    subset2 = []\n    is_numeric = isinstance(threshold, (int, float))\n    for sample in X:\n        if is_numeric and sample[feature_i] >= threshold or (not is_numeric and sample[feature_i] == threshold):\n            subset1.append(sample.tolist())\n        else:\n            subset2.append(sample.tolist())\n    return [subset1, subset2]"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not (Q.shape == Q_next.shape and len(Q) == len(actions) == len(rewards) == len(dones)):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    (batch_size, n_actions) = Q.shape\n    updated_Q = Q.copy()\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        updated_Q[i, actions[i]] = target\n    updated_Q_rounded = np.round(updated_Q, 4)\n    return updated_Q_rounded.tolist()"}
{"task_id": 453, "completion_id": 1, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not (isinstance(Q, np.ndarray) and isinstance(Q_next, np.ndarray)):\n        return -1\n    if Q.shape != Q_next.shape:\n        return -1\n    if not len(actions) == len(rewards) == len(dones) == Q.shape[0]:\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    (batch_size, n_actions) = Q.shape\n    targets = Q.copy()\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        targets[i, actions[i]] = target\n    return np.round(targets, 4).tolist()"}
{"task_id": 453, "completion_id": 2, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if Q.shape != Q_next.shape:\n        return -1\n    if not (isinstance(actions, list) and all((isinstance(a, int) for a in actions))):\n        return -1\n    if not (isinstance(rewards, list) and all((isinstance(r, (int, float)) for r in rewards))):\n        return -1\n    if not (isinstance(dones, list) and all((isinstance(d, bool) for d in dones))):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    if not len(Q) == len(actions) == len(rewards) == len(dones):\n        return -1\n    batch_size = Q.shape[0]\n    updated_Q = Q.copy()\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        updated_Q[i, actions[i]] = target\n    updated_Q_rounded = np.round(updated_Q, 4).tolist()\n    return updated_Q_rounded"}
{"task_id": 453, "completion_id": 3, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not (isinstance(Q, np.ndarray) and isinstance(Q_next, np.ndarray)):\n        return -1\n    if Q.shape != Q_next.shape:\n        return -1\n    if not (isinstance(actions, list) and isinstance(rewards, list) and isinstance(dones, list)):\n        return -1\n    if len(actions) != len(rewards) or len(rewards) != len(dones) or len(dones) != Q.shape[0]:\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    Q_target = np.copy(Q)\n    for i in range(Q.shape[0]):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        Q_target[i, actions[i]] = target\n    return np.round(Q_target, 4).tolist()"}
{"task_id": 453, "completion_id": 4, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not (Q.shape == Q_next.shape and len(Q) == len(actions) == len(rewards) == len(dones)):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    (batch_size, n_actions) = Q.shape\n    updated_Q = Q.copy()\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        updated_Q[i, actions[i]] = target\n    return np.round(updated_Q, 4).tolist()"}
{"task_id": 453, "completion_id": 5, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not len(Q) == len(Q_next) == len(actions) == len(rewards) == len(dones):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    Q_updated = Q.copy()\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        Q_updated[i, actions[i]] = target\n    Q_updated_rounded = np.round(Q_updated, 4)\n    return Q_updated_rounded.tolist()"}
{"task_id": 453, "completion_id": 6, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not 0 <= gamma <= 1:\n        return -1\n    if not (Q.shape == Q_next.shape and len(actions) == len(rewards) == len(dones) == Q.shape[0]):\n        return -1\n    targets = Q.copy()\n    for i in range(len(actions)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        targets[i, actions[i]] = target\n    targets_rounded = np.round(targets, 4)\n    return targets_rounded.tolist()"}
{"task_id": 453, "completion_id": 7, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not 0 <= gamma <= 1:\n        return -1\n    if not (Q.shape == Q_next.shape and len(actions) == len(rewards) == len(dones) == Q.shape[0]):\n        return -1\n    (batch_size, n_actions) = Q.shape\n    updated_Q = np.copy(Q)\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        updated_Q[i, actions[i]] = target\n    updated_Q_rounded = np.round(updated_Q, 4).tolist()\n    return updated_Q_rounded"}
{"task_id": 453, "completion_id": 8, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not (isinstance(Q, np.ndarray) and isinstance(Q_next, np.ndarray)):\n        return -1\n    if Q.shape != Q_next.shape:\n        return -1\n    if not (isinstance(actions, list) and isinstance(rewards, list) and isinstance(dones, list)):\n        return -1\n    if len(actions) != Q.shape[0] or len(rewards) != Q.shape[0] or len(dones) != Q.shape[0]:\n        return -1\n    if not (isinstance(gamma, float) and 0 <= gamma <= 1):\n        return -1\n    Q_updated = np.copy(Q).tolist()\n    for i in range(Q.shape[0]):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        Q_updated[i][actions[i]] = target\n    Q_updated = [[round(q, 4) for q in q_list] for q_list in Q_updated]\n    return Q_updated"}
{"task_id": 453, "completion_id": 9, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not (isinstance(Q, np.ndarray) and isinstance(Q_next, np.ndarray)):\n        return -1\n    if Q.shape != Q_next.shape:\n        return -1\n    if not (isinstance(actions, list) and isinstance(rewards, list) and isinstance(dones, list)):\n        return -1\n    if len(actions) != len(rewards) or len(rewards) != len(dones) or len(dones) != Q.shape[0]:\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    Q_targets = np.copy(Q)\n    for i in range(Q.shape[0]):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        Q_targets[i, actions[i]] = target\n    Q_targets_rounded = np.round(Q_targets, 4).tolist()\n    return Q_targets_rounded"}
{"task_id": 458, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = np.array(labels)\n    if (labels < 0).any():\n        return -1\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    if num_classes < max(labels) + 1:\n        return -1\n    one_hot_matrix = [[0] * num_classes for _ in range(len(labels))]\n    for (i, label) in enumerate(labels):\n        one_hot_matrix[i][label] = 1\n    return one_hot_matrix"}
{"task_id": 458, "completion_id": 1, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = np.array(labels)\n    if (labels < 0).any():\n        return -1\n    if num_classes is None:\n        num_classes = np.max(labels) + 1\n    if num_classes < np.max(labels) + 1:\n        return -1\n    one_hot = np.zeros((len(labels), num_classes), dtype=int)\n    for (i, label) in enumerate(labels):\n        one_hot[i, label] = 1\n    return one_hot.tolist()"}
{"task_id": 458, "completion_id": 2, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = np.array(labels)\n    if (labels < 0).any():\n        return -1\n    if num_classes is None:\n        num_classes = np.max(labels) + 1\n    if num_classes < np.max(labels) + 1:\n        return -1\n    one_hot_matrix = np.zeros((len(labels), num_classes), dtype=int)\n    one_hot_matrix[np.arange(len(labels)), labels] = 1\n    return one_hot_matrix.tolist()"}
{"task_id": 458, "completion_id": 3, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = np.array(labels)\n    if np.any(labels < 0):\n        return -1\n    if num_classes is None:\n        num_classes = np.max(labels) + 1\n    elif num_classes < np.max(labels) + 1:\n        return -1\n    one_hot_matrix = np.zeros((len(labels), num_classes), dtype=int)\n    one_hot_matrix[np.arange(len(labels)), labels] = 1\n    return one_hot_matrix.tolist()"}
{"task_id": 458, "completion_id": 4, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = np.array(labels)\n    if (labels < 0).any():\n        return -1\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    if num_classes < max(labels) + 1:\n        return -1\n    one_hot_matrix = np.zeros((len(labels), num_classes), dtype=int)\n    one_hot_matrix[np.arange(len(labels)), labels] = 1\n    return one_hot_matrix.tolist()"}
{"task_id": 458, "completion_id": 5, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = np.array(labels)\n    if (labels < 0).any():\n        return -1\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    if num_classes < max(labels) + 1:\n        return -1\n    one_hot_matrix = [[0] * num_classes for _ in range(len(labels))]\n    for (i, label) in enumerate(labels):\n        one_hot_matrix[i][label] = 1\n    return one_hot_matrix"}
{"task_id": 458, "completion_id": 6, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = np.array(labels)\n    if (labels < 0).any():\n        return -1\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    if num_classes < max(labels) + 1:\n        return -1\n    one_hot_matrix = np.zeros((len(labels), num_classes), dtype=int)\n    one_hot_matrix[np.arange(len(labels)), labels] = 1\n    return one_hot_matrix.tolist()"}
{"task_id": 458, "completion_id": 7, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = np.array(labels)\n    if np.any(labels < 0):\n        return -1\n    if num_classes is None:\n        num_classes = np.max(labels) + 1\n    if num_classes < np.max(labels) + 1:\n        return -1\n    one_hot_matrix = np.zeros((len(labels), num_classes), dtype=int)\n    one_hot_matrix[np.arange(len(labels)), labels] = 1\n    return one_hot_matrix.tolist()"}
{"task_id": 458, "completion_id": 8, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = np.array(labels)\n    if np.any(labels < 0):\n        return -1\n    if num_classes is None:\n        num_classes = np.max(labels) + 1\n    elif num_classes < np.max(labels) + 1:\n        return -1\n    one_hot_matrix = np.zeros((len(labels), num_classes), dtype=int)\n    one_hot_matrix[np.arange(len(labels)), labels] = 1\n    return one_hot_matrix.tolist()"}
{"task_id": 458, "completion_id": 9, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = np.array(labels)\n    if (labels < 0).any():\n        return -1\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    if num_classes < max(labels) + 1:\n        return -1\n    one_hot_matrix = [[0] * num_classes for _ in range(len(labels))]\n    for (i, label) in enumerate(labels):\n        one_hot_matrix[i][label] = 1\n    return one_hot_matrix"}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y))\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        unique_x = np.unique(x)[:-1]\n        best_t = None\n        best_sse = float('inf')\n        best_vL = None\n        best_vR = None\n        for t in unique_x:\n            left = residuals[x <= t]\n            right = residuals[x > t]\n            if len(left) == 0 or len(right) == 0:\n                continue\n            vL = np.mean(left)\n            vR = np.mean(right)\n            sse = np.sum((left - vL) ** 2) + np.sum((right - vR) ** 2)\n            if sse < best_sse:\n                best_t = t\n                best_sse = sse\n                best_vL = vL\n                best_vR = vR\n        if best_t is None:\n            v = np.mean(residuals)\n            y_pred += learning_rate * v\n        else:\n            stump_pred = np.where(x <= best_t, best_vL, best_vR)\n            y_pred += learning_rate * stump_pred\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 461, "completion_id": 1, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, fill_value=y.mean())\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        best_sse = float('inf')\n        best_t = None\n        best_vL = None\n        best_vR = None\n        unique_x = np.unique(x)[:-1]\n        if len(unique_x) == 0:\n            v = residuals.mean()\n            stump_predictions = np.full_like(residuals, fill_value=v)\n        else:\n            for t in unique_x:\n                left_mask = x <= t\n                right_mask = x > t\n                vL = residuals[left_mask].mean() if left_mask.any() else 0\n                vR = residuals[right_mask].mean() if right_mask.any() else 0\n                sse = ((residuals[left_mask] - vL) ** 2).sum() + ((residuals[right_mask] - vR) ** 2).sum()\n                if sse < best_sse:\n                    best_sse = sse\n                    best_t = t\n                    best_vL = vL\n                    best_vR = vR\n            if best_t is None:\n                v = residuals.mean()\n                stump_predictions = np.full_like(residuals, fill_value=v)\n            else:\n                stump_predictions = np.where(x <= best_t, best_vL, best_vR)\n        y_pred += learning_rate * stump_predictions\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 461, "completion_id": 2, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, y.mean())\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        if np.all(residuals == 0):\n            break\n        best_t = None\n        best_sse = float('inf')\n        best_vL = None\n        best_vR = None\n        unique_x = np.unique(x)[:-1]\n        for t in unique_x:\n            left_mask = x <= t\n            right_mask = x > t\n            vL = residuals[left_mask].mean() if np.any(left_mask) else None\n            vR = residuals[right_mask].mean() if np.any(right_mask) else None\n            if vL is None or vR is None:\n                continue\n            sse_left = np.sum((residuals[left_mask] - vL) ** 2)\n            sse_right = np.sum((residuals[right_mask] - vR) ** 2)\n            sse = sse_left + sse_right\n            if sse < best_sse:\n                best_t = t\n                best_sse = sse\n                best_vL = vL\n                best_vR = vR\n        if best_t is None:\n            stump_pred = residuals.mean()\n        else:\n            stump_pred = np.where(x <= best_t, best_vL, best_vR)\n        y_pred += learning_rate * stump_pred\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 461, "completion_id": 3, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.mean(y)\n    predictions = np.full_like(y, y_pred)\n    if n_estimators <= 0:\n        return np.round(predictions, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y - predictions\n        best_sse = float('inf')\n        best_split_value = None\n        best_v_L = None\n        best_v_R = None\n        unique_x = np.unique(x)\n        if len(unique_x) == 1:\n            v = np.mean(residuals)\n            best_v_L = v\n            best_v_R = v\n        else:\n            for t in unique_x[:-1]:\n                left_mask = x <= t\n                right_mask = x > t\n                if not np.any(left_mask) or not np.any(right_mask):\n                    continue\n                v_L = np.mean(residuals[left_mask])\n                v_R = np.mean(residuals[right_mask])\n                sse = np.sum((residuals[left_mask] - v_L) ** 2) + np.sum((residuals[right_mask] - v_R) ** 2)\n                if sse < best_sse:\n                    best_sse = sse\n                    best_split_value = t\n                    best_v_L = v_L\n                    best_v_R = v_R\n        if best_split_value is not None:\n            stump_predictions = np.where(x <= best_split_value, best_v_L, best_v_R)\n        else:\n            stump_predictions = np.full_like(residuals, best_v_L)\n        predictions += learning_rate * stump_predictions\n    return np.round(predictions, 4).tolist()"}
{"task_id": 461, "completion_id": 4, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, y.mean())\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        unique_x = np.unique(x)[:-1]\n        if len(unique_x) == 0:\n            stump_prediction = residuals.mean()\n            y_pred += learning_rate * stump_prediction\n            continue\n        best_sse = float('inf')\n        (best_t, best_vL, best_vR) = (None, None, None)\n        for t in unique_x:\n            left_mask = x <= t\n            right_mask = x > t\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            vL = residuals[left_mask].mean()\n            vR = residuals[right_mask].mean()\n            sse = np.sum((residuals[left_mask] - vL) ** 2) + np.sum((residuals[right_mask] - vR) ** 2)\n            if sse < best_sse:\n                best_sse = sse\n                best_t = t\n                best_vL = vL\n                best_vR = vR\n        if best_t is None:\n            stump_prediction = residuals.mean()\n        else:\n            stump_prediction = np.where(x <= best_t, best_vL, best_vR)\n        y_pred += learning_rate * stump_prediction\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 461, "completion_id": 5, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    if n_estimators <= 0:\n        mean_y = np.mean(y)\n        return np.full_like(y, mean_y, dtype=float).tolist()\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y), dtype=float)\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        unique_x = np.unique(x)[:-1]\n        best_sse = float('inf')\n        best_split = None\n        (best_vL, best_vR) = (None, None)\n        for t in unique_x:\n            left_mask = x <= t\n            right_mask = x > t\n            if not (left_mask.any() and right_mask.any()):\n                continue\n            vL = np.mean(residuals[left_mask])\n            vR = np.mean(residuals[right_mask])\n            sse = np.sum((residuals[left_mask] - vL) ** 2) + np.sum((residuals[right_mask] - vR) ** 2)\n            if sse < best_sse:\n                best_sse = sse\n                best_split = t\n                (best_vL, best_vR) = (vL, vR)\n        if best_split is None:\n            v_all = np.mean(residuals)\n            stump_pred = np.full_like(y, v_all, dtype=float)\n        else:\n            stump_pred = np.where(x <= best_split, best_vL, best_vR)\n        y_pred += learning_rate * stump_pred\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 461, "completion_id": 6, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y))\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        unique_x = np.unique(x)\n        if len(unique_x) == 1:\n            stump_pred = np.full_like(x, np.mean(residuals))\n        else:\n            best_sse = float('inf')\n            best_split = None\n            best_vL = None\n            best_vR = None\n            for t in unique_x[:-1]:\n                left_mask = x <= t\n                right_mask = x > t\n                vL = np.mean(residuals[left_mask])\n                vR = np.mean(residuals[right_mask])\n                sse = np.sum(left_mask * (residuals - vL) ** 2) + np.sum(right_mask * (residuals - vR) ** 2)\n                if sse < best_sse:\n                    best_sse = sse\n                    best_split = t\n                    best_vL = vL\n                    best_vR = vR\n            if best_split is None:\n                stump_pred = np.full_like(x, np.mean(residuals))\n            else:\n                stump_pred = np.where(x <= best_split, best_vL, best_vR)\n        y_pred += learning_rate * stump_pred\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 461, "completion_id": 7, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    if n_estimators <= 0:\n        return np.round([np.mean(y)] * len(y), 4).tolist()\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        unique_x = np.unique(x)[:-1]\n        best_sse = float('inf')\n        best_split = None\n        best_vl = None\n        best_vr = None\n        for t in unique_x:\n            left_mask = x <= t\n            right_mask = x > t\n            if not left_mask.any() or not right_mask.any():\n                continue\n            vl = np.mean(residuals[left_mask])\n            vr = np.mean(residuals[right_mask])\n            sse = np.sum(residuals[left_mask] - vl) ** 2 + np.sum(residuals[right_mask] - vr) ** 2\n            if sse < best_sse:\n                best_sse = sse\n                best_split = t\n                best_vl = vl\n                best_vr = vr\n        if best_split is None:\n            stump_pred = np.full_like(y, np.mean(residuals))\n        else:\n            stump_pred = np.where(x <= best_split, best_vl, best_vr)\n        y_pred += learning_rate * stump_pred\n        if np.allclose(residuals, 0):\n            break\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 461, "completion_id": 8, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y))\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        if np.all(residuals == 0):\n            break\n        unique_x = np.unique(x)[:-1]\n        best_split_t = None\n        best_sse = float('inf')\n        (best_vL, best_vR) = (0, 0)\n        for t in unique_x:\n            left_mask = x <= t\n            right_mask = x > t\n            if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                continue\n            vL = np.mean(residuals[left_mask])\n            vR = np.mean(residuals[right_mask])\n            sse = np.sum((residuals[left_mask] - vL) ** 2) + np.sum((residuals[right_mask] - vR) ** 2)\n            if sse < best_sse:\n                best_sse = sse\n                best_split_t = t\n                (best_vL, best_vR) = (vL, vR)\n        if best_split_t is None:\n            best_vL = best_vR = np.mean(residuals)\n        stump_predictions = np.where(x <= best_split_t, best_vL, best_vR)\n        y_pred += learning_rate * stump_predictions\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 461, "completion_id": 9, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    if n_estimators <= 0:\n        return [np.mean(y)] * len(y)\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        unique_x = np.unique(x)\n        if len(unique_x) <= 1:\n            y_pred += learning_rate * residuals\n            continue\n        best_sse = float('inf')\n        best_t = None\n        best_vL = None\n        best_vR = None\n        for t in unique_x[:-1]:\n            left_mask = x <= t\n            right_mask = x > t\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            vL = np.mean(residuals[left_mask])\n            vR = np.mean(residuals[right_mask])\n            sse = np.sum((residuals[left_mask] - vL) ** 2) + np.sum((residuals[right_mask] - vR) ** 2)\n            if sse < best_sse:\n                best_sse = sse\n                best_t = t\n                best_vL = vL\n                best_vR = vR\n        if best_t is None:\n            y_pred += learning_rate * residuals\n        else:\n            stump_pred = np.where(x <= best_t, best_vL, best_vR)\n            y_pred += learning_rate * stump_pred\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 471, "completion_id": 0, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    target = reward\n    if next_state is not None:\n        q_next = q_table[next_state]\n        max_q_value = max(q_next)\n        greedy_actions = [a for (a, q) in enumerate(q_next) if q == max_q_value]\n        expected_value = 0\n        for a in range(num_actions):\n            if a in greedy_actions:\n                expected_value += ((1 - epsilon) / len(greedy_actions) + epsilon / num_actions) * q_next[a]\n            else:\n                expected_value += epsilon / num_actions * q_next[a]\n        target += gamma * expected_value\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    return q_table"}
{"task_id": 471, "completion_id": 1, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is None:\n        target = reward\n    else:\n        greedy_action = np.argmax(q_table[next_state])\n        expected_q_value = 0.0\n        for a in range(num_actions):\n            if a == greedy_action:\n                prob = 1 - epsilon + epsilon / num_actions\n            else:\n                prob = epsilon / num_actions\n            expected_q_value += prob * q_table[next_state][a]\n        target = reward + gamma * expected_q_value\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    return q_table"}
{"task_id": 471, "completion_id": 2, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is not None:\n        greedy_action = np.argmax(q_table[next_state])\n        expected_value = 0.0\n        for a in range(num_actions):\n            if a == greedy_action:\n                expected_value += (1 - epsilon + epsilon / num_actions) * q_table[next_state][a]\n            else:\n                expected_value += epsilon / num_actions * q_table[next_state][a]\n        target = reward + gamma * expected_value\n    else:\n        target = reward\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table_rounded = [[round(q, 4) for q in row] for row in q_table]\n    return q_table_rounded"}
{"task_id": 471, "completion_id": 3, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is not None:\n        q_values_next_state = q_table[next_state]\n        greedy_action = np.argmax(q_values_next_state)\n        expected_value = 0.0\n        for a in range(num_actions):\n            if a == greedy_action:\n                expected_value += (1 - epsilon + epsilon / num_actions) * q_values_next_state[a]\n            else:\n                expected_value += epsilon / num_actions * q_values_next_state[a]\n        target = reward + gamma * expected_value\n    else:\n        target = reward\n    q_table[state][action] += lr * (target - q_table[state][action])\n    updated_q_table = [[round(q, 4) for q in row] for row in q_table]\n    return updated_q_table"}
{"task_id": 471, "completion_id": 4, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is not None:\n        max_q_value = max(q_table[next_state])\n        greedy_actions = [a for (a, q) in enumerate(q_table[next_state]) if q == max_q_value]\n        expected_value = 0.0\n        for a in range(num_actions):\n            if a in greedy_actions:\n                expected_value += (1 - epsilon + epsilon / num_actions) * q_table[next_state][a]\n            else:\n                expected_value += epsilon / num_actions * q_table[next_state][a]\n        target = reward + gamma * expected_value\n    else:\n        target = reward\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    return q_table"}
{"task_id": 471, "completion_id": 5, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is not None:\n        greedy_action = np.argmax(q_table[next_state])\n        expectation = 0.0\n        for a in range(num_actions):\n            if a == greedy_action:\n                expectation += (1 - epsilon + epsilon / num_actions) * q_table[next_state][a]\n            else:\n                expectation += epsilon / num_actions * q_table[next_state][a]\n        target = reward + gamma * expectation\n    else:\n        target = reward\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    return q_table"}
{"task_id": 471, "completion_id": 6, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    if next_state is not None:\n        num_actions = len(q_table[next_state])\n        greedy_action = np.argmax(q_table[next_state])\n        q_values_next_state = q_table[next_state]\n        expected_value = (1 - epsilon + epsilon / num_actions) * q_values_next_state[greedy_action]\n        for a in range(num_actions):\n            if a != greedy_action:\n                expected_value += epsilon / num_actions * q_values_next_state[a]\n        target = reward + gamma * expected_value\n    else:\n        target = reward\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    return q_table"}
{"task_id": 471, "completion_id": 7, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[next_state]) if next_state is not None else 0\n    if next_state is not None:\n        max_q = max(q_table[next_state])\n        greedy_actions = [a for (a, q) in enumerate(q_table[next_state]) if q == max_q]\n        exp_value = 0.0\n        for a in range(num_actions):\n            if a in greedy_actions:\n                exp_value += ((1 - epsilon) / len(greedy_actions) + epsilon / num_actions) * q_table[next_state][a]\n            else:\n                exp_value += epsilon / num_actions * q_table[next_state][a]\n    else:\n        exp_value = 0.0\n    target = reward + gamma * exp_value\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    return q_table"}
{"task_id": 471, "completion_id": 8, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is None:\n        target = reward\n    else:\n        best_action = np.argmax(q_table[next_state])\n        expected_value = 0.0\n        for a in range(num_actions):\n            if a == best_action:\n                expected_value += (1 - epsilon + epsilon / num_actions) * q_table[next_state][a]\n            else:\n                expected_value += epsilon / num_actions * q_table[next_state][a]\n        target = reward + gamma * expected_value\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    return q_table"}
{"task_id": 471, "completion_id": 9, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is not None:\n        greedy_action = np.argmax(q_table[next_state])\n        expected_value = 0.0\n        for a in range(num_actions):\n            if a == greedy_action:\n                probability = 1 - epsilon + epsilon / num_actions\n            else:\n                probability = epsilon / num_actions\n            expected_value += probability * q_table[next_state][a]\n        target = reward + gamma * expected_value\n    else:\n        target = reward\n    q_table[state][action] += lr * (target - q_table[state][action])\n    rounded_q_table = [[round(q, 4) for q in row] for row in q_table]\n    return rounded_q_table"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = (i % 2 * interval + 0.1) * 10\n        y_max = (i % 2 * interval + 0.9) * 10\n        x_train = np.random.uniform(x_min, x_max, n_train)\n        y_train = np.random.uniform(y_min, y_max, n_train)\n        label = (i - 0.5) * 2\n        X_train.append(np.column_stack((x_train, y_train)))\n        Y_train.append(np.full(n_train, label))\n        x_val = np.random.uniform(x_min, x_max, n_val)\n        y_val = np.random.uniform(y_min, y_max, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        Y_val.append(np.full(n_val, label))\n    X_train = np.concatenate(X_train)\n    Y_train = np.concatenate(Y_train)\n    X_val = np.concatenate(X_val)\n    Y_val = np.concatenate(Y_val)\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 474, "completion_id": 1, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = (i % 2 * interval + 0.1) * 10\n        y_max = (i % 2 * interval + 0.9) * 10\n        label = (i - 0.5) * 2\n        x_train = np.random.uniform(x_min, x_max, n_train)\n        y_train = np.random.uniform(y_min, y_max, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        Y_train.extend([label] * n_train)\n        x_val = np.random.uniform(x_min, x_max, n_val)\n        y_val = np.random.uniform(y_min, y_max, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        Y_val.extend([label] * n_val)\n    X_train = np.concatenate(X_train)\n    X_val = np.concatenate(X_val)\n    Y_train = np.array(Y_train)\n    Y_val = np.array(Y_val)\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 474, "completion_id": 2, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = (i % 2 * interval + 0.1) * 10\n        y_max = (i % 2 * interval + 0.9) * 10\n        label = (i - 0.5) * 2\n        x_train = np.random.uniform(x_min, x_max, n_train)\n        y_train = np.random.uniform(y_min, y_max, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        Y_train.append(np.full(n_train, label))\n        x_val = np.random.uniform(x_min, x_max, n_val)\n        y_val = np.random.uniform(y_min, y_max, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        Y_val.append(np.full(n_val, label))\n    X_train = np.round(np.vstack(X_train), 4)\n    Y_train = np.round(np.concatenate(Y_train), 4)\n    X_val = np.round(np.vstack(X_val), 4)\n    Y_val = np.round(np.concatenate(Y_val), 4)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 474, "completion_id": 3, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        x_train = np.random.uniform((i // 2 + 0.1) * 10, (i // 2 + 0.9) * 10, n_train)\n        y_train = np.random.uniform((i % 2 * interval + 0.1) * 10, (i % 2 * interval + 0.9) * 10, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        Y_train.extend([(i - 0.5) * 2] * n_train)\n        x_val = np.random.uniform((i // 2 + 0.1) * 10, (i // 2 + 0.9) * 10, n_val)\n        y_val = np.random.uniform((i % 2 * interval + 0.1) * 10, (i % 2 * interval + 0.9) * 10, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        Y_val.extend([(i - 0.5) * 2] * n_val)\n    X_train = np.round(np.vstack(X_train), 4)\n    Y_train = np.round(np.array(Y_train), 4)\n    X_val = np.round(np.vstack(X_val), 4)\n    Y_val = np.round(np.array(Y_val), 4)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 474, "completion_id": 4, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = (i % 2 * interval + 0.1) * 10\n        y_max = (i % 2 * interval + 0.9) * 10\n        label = (i - 0.5) * 2\n        x_train = np.random.uniform(x_min, x_max, n_train)\n        y_train = np.random.uniform(y_min, y_max, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        Y_train.extend([label] * n_train)\n        x_val = np.random.uniform(x_min, x_max, n_val)\n        y_val = np.random.uniform(y_min, y_max, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        Y_val.extend([label] * n_val)\n    X_train = np.round(np.vstack(X_train), 4)\n    Y_train = np.round(np.array(Y_train), 4)\n    X_val = np.round(np.vstack(X_val), 4)\n    Y_val = np.round(np.array(Y_val), 4)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 474, "completion_id": 5, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = (i % 2 * interval + 0.1) * 10\n        y_max = (i % 2 * interval + 0.9) * 10\n        label = (i - 0.5) * 2\n        x_train = np.random.uniform(x_min, x_max, n_train)\n        y_train = np.random.uniform(y_min, y_max, n_train)\n        X_train.extend(zip(x_train, y_train))\n        Y_train.extend([label] * n_train)\n        x_val = np.random.uniform(x_min, x_max, n_val)\n        y_val = np.random.uniform(y_min, y_max, n_val)\n        X_val.extend(zip(x_val, y_val))\n        Y_val.extend([label] * n_val)\n    X_train = np.array(X_train).round(4)\n    X_val = np.array(X_val).round(4)\n    Y_train = np.array(Y_train)\n    Y_val = np.array(Y_val)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 474, "completion_id": 6, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = (i % 2 * interval + 0.1) * 10\n        y_max = (i % 2 * interval + 0.9) * 10\n        x_train = np.random.uniform(x_min, x_max, n_train)\n        y_train = np.random.uniform(y_min, y_max, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        Y_train.append(np.full(n_train, (i - 0.5) * 2))\n        x_val = np.random.uniform(x_min, x_max, n_val)\n        y_val = np.random.uniform(y_min, y_max, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        Y_val.append(np.full(n_val, (i - 0.5) * 2))\n    X_train = np.concatenate(X_train)\n    Y_train = np.concatenate(Y_train)\n    X_val = np.concatenate(X_val)\n    Y_val = np.concatenate(Y_val)\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 474, "completion_id": 7, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n        random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = (i % 2 * interval + 0.1) * 10\n        y_max = (i % 2 * interval + 0.9) * 10\n        label = (i - 0.5) * 2\n        X_train_class = np.random.uniform(x_min, x_max, n_train).reshape(-1, 1)\n        Y_train_class = np.random.uniform(y_min, y_max, n_train).reshape(-1, 1)\n        X_train.append(np.concatenate((X_train_class, Y_train_class), axis=1))\n        Y_train.extend([label] * n_train)\n        X_val_class = np.random.uniform(x_min, x_max, n_val).reshape(-1, 1)\n        Y_val_class = np.random.uniform(y_min, y_max, n_val).reshape(-1, 1)\n        X_val.append(np.concatenate((X_val_class, Y_val_class), axis=1))\n        Y_val.extend([label] * n_val)\n    X_train = np.round(np.concatenate(X_train), 4)\n    Y_train = np.round(np.array(Y_train), 4)\n    X_val = np.round(np.concatenate(X_val), 4)\n    Y_val = np.round(np.array(Y_val), 4)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 474, "completion_id": 8, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = i % 2 * interval * 10 + 0.1 * 10\n        y_max = i % 2 * interval * 10 + 0.9 * 10\n        label = (i - 0.5) * 2\n        X_train.extend([[random.uniform(x_min, x_max), random.uniform(y_min, y_max)] for _ in range(n_train)])\n        Y_train.extend([label] * n_train)\n        X_val.extend([[random.uniform(x_min, x_max), random.uniform(y_min, y_max)] for _ in range(n_val)])\n        Y_val.extend([label] * n_val)\n    X_train = np.array(X_train).round(4)\n    Y_train = np.array(Y_train)\n    X_val = np.array(X_val).round(4)\n    Y_val = np.array(Y_val)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 474, "completion_id": 9, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n        random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        x_train = np.random.uniform((i // 2 + 0.1) * 10, (i // 2 + 0.9) * 10, n_train)\n        y_train = np.random.uniform((i % 2 * interval + 0.1) * 10, (i % 2 * interval + 0.9) * 10, n_train)\n        label_train = np.full(n_train, (i - 0.5) * 2)\n        x_val = np.random.uniform((i // 2 + 0.1) * 10, (i // 2 + 0.9) * 10, n_val)\n        y_val = np.random.uniform((i % 2 * interval + 0.1) * 10, (i % 2 * interval + 0.9) * 10, n_val)\n        label_val = np.full(n_val, (i - 0.5) * 2)\n        X_train.append(np.column_stack((x_train, y_train)))\n        Y_train.append(label_train)\n        X_val.append(np.column_stack((x_val, y_val)))\n        Y_val.append(label_val)\n    X_train = np.round(np.concatenate(X_train), 4)\n    Y_train = np.concatenate(Y_train)\n    X_val = np.round(np.concatenate(X_val), 4)\n    Y_val = np.concatenate(Y_val)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 1, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 2, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 3, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 4, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat_t = m_t / (1 - b1 ** t)\n    v_hat_t = v_t / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    return (w_new, m_t, v_t)"}
{"task_id": 475, "completion_id": 5, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 6, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 7, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 475, "completion_id": 8, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat_t = m_t / (1 - b1 ** t)\n    v_hat_t = v_t / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    return (w_new, m_t, v_t)"}
{"task_id": 475, "completion_id": 9, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad ** 2\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    N = len(rewards[0])\n    value_estimates = [ev_prior] * N\n    counts = [0] * N\n    for row in rewards:\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.randint(N)\n        else:\n            chosen_arm = np.argmax(value_estimates)\n        reward = row[chosen_arm]\n        counts[chosen_arm] += 1\n        value_estimates[chosen_arm] += (reward - value_estimates[chosen_arm]) / counts[chosen_arm]\n    return [round(value, 4) for value in value_estimates]"}
{"task_id": 479, "completion_id": 1, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    N = len(rewards[0])\n    value_estimates = [ev_prior] * N\n    pull_counts = [0] * N\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.randint(N)\n        else:\n            chosen_arm = np.argmax(value_estimates)\n        reward = rewards[t][chosen_arm]\n        pull_counts[chosen_arm] += 1\n        C_i = pull_counts[chosen_arm]\n        V_i = value_estimates[chosen_arm]\n        value_estimates[chosen_arm] = V_i + (reward - V_i) / C_i\n    return [round(value, 4) for value in value_estimates]"}
{"task_id": 479, "completion_id": 2, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    N = len(rewards[0])\n    value_estimates = [ev_prior] * N\n    pull_counts = [0] * N\n    for rewards_at_t in rewards:\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.choice(N)\n        else:\n            chosen_arm = np.argmax(value_estimates)\n        reward = rewards_at_t[chosen_arm]\n        pull_counts[chosen_arm] += 1\n        C_i = pull_counts[chosen_arm]\n        V_i = value_estimates[chosen_arm]\n        value_estimates[chosen_arm] = V_i + (reward - V_i) / C_i\n    return [round(v, 4) for v in value_estimates]"}
{"task_id": 479, "completion_id": 3, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    N = len(rewards[0])\n    values = np.full(N, ev_prior)\n    counts = np.zeros(N, dtype=int)\n    for reward_at_t in rewards:\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.randint(N)\n        else:\n            chosen_arm = np.argmax(values)\n        reward = reward_at_t[chosen_arm]\n        counts[chosen_arm] += 1\n        values[chosen_arm] += (reward - values[chosen_arm]) / counts[chosen_arm]\n    return [round(value, 4) for value in values]"}
{"task_id": 479, "completion_id": 4, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    N = len(rewards[0])\n    value_estimates = [ev_prior] * N\n    pull_counts = [0] * N\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.randint(N)\n        else:\n            chosen_arm = np.argmax(value_estimates)\n        reward = rewards[t][chosen_arm]\n        pull_counts[chosen_arm] += 1\n        value_estimates[chosen_arm] += (reward - value_estimates[chosen_arm]) / pull_counts[chosen_arm]\n    return [round(value, 4) for value in value_estimates]"}
{"task_id": 479, "completion_id": 5, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    num_arms = len(rewards[0])\n    value_estimates = [ev_prior] * num_arms\n    arm_pull_counts = [0] * num_arms\n    for time_step in rewards:\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.choice(num_arms)\n        else:\n            chosen_arm = np.argmax(value_estimates)\n        arm_pull_counts[chosen_arm] += 1\n        reward = time_step[chosen_arm]\n        C_i = arm_pull_counts[chosen_arm]\n        V_i = value_estimates[chosen_arm]\n        value_estimates[chosen_arm] = V_i + (reward - V_i) / C_i\n    return [round(est, 4) for est in value_estimates]"}
{"task_id": 479, "completion_id": 6, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    N = len(rewards[0])\n    value_estimates = [ev_prior] * N\n    counts = [0] * N\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.randint(N)\n        else:\n            chosen_arm = np.argmax(value_estimates)\n        reward = rewards[t][chosen_arm]\n        counts[chosen_arm] += 1\n        value_estimates[chosen_arm] += (reward - value_estimates[chosen_arm]) / counts[chosen_arm]\n    return [round(value, 4) for value in value_estimates]"}
{"task_id": 479, "completion_id": 7, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    N = len(rewards[0])\n    estimated_values = [ev_prior] * N\n    counts = [0] * N\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.choice(N)\n        else:\n            chosen_arm = np.argmax(estimated_values)\n        reward = rewards[t][chosen_arm]\n        counts[chosen_arm] += 1\n        estimated_values[chosen_arm] += (reward - estimated_values[chosen_arm]) / counts[chosen_arm]\n    return [round(value, 4) for value in estimated_values]"}
{"task_id": 479, "completion_id": 8, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    N = len(rewards[0])\n    estimates = [ev_prior] * N\n    counts = [0] * N\n    for step in rewards:\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.randint(N)\n        else:\n            chosen_arm = np.argmax(estimates)\n        counts[chosen_arm] += 1\n        reward = step[chosen_arm]\n        estimates[chosen_arm] += (reward - estimates[chosen_arm]) / counts[chosen_arm]\n    return [round(est, 4) for est in estimates]"}
{"task_id": 479, "completion_id": 9, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    N = len(rewards[0])\n    Q = [ev_prior] * N\n    N_pulls = [0] * N\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            arm = np.random.choice(N)\n        else:\n            arm = np.argmax(Q)\n        N_pulls[arm] += 1\n        reward = rewards[t][arm]\n        Q[arm] += (reward - Q[arm]) / N_pulls[arm]\n    return [round(q, 4) for q in Q]"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if len(data) == 0:\n        return []\n\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n\n    def region_query(point_index):\n        neighbors = []\n        for i in range(len(data)):\n            if euclidean_distance(data[point_index], data[i]) <= eps:\n                neighbors.append(i)\n        return neighbors\n\n    def expand_cluster(point_index, neighbors, cluster_id):\n        labels[point_index] = cluster_id\n        i = 0\n        while i < len(neighbors):\n            neighbor_index = neighbors[i]\n            if labels[neighbor_index] == -1:\n                labels[neighbor_index] = cluster_id\n            if labels[neighbor_index] == -2:\n                labels[neighbor_index] = cluster_id\n                point_neighbors = region_query(neighbor_index)\n                if len(point_neighbors) >= min_samples:\n                    neighbors += point_neighbors\n            i += 1\n    labels = [-2] * len(data)\n    cluster_id = 0\n    for point_index in range(len(data)):\n        if labels[point_index] != -2:\n            continue\n        neighbors = region_query(point_index)\n        if len(neighbors) < min_samples:\n            labels[point_index] = -1\n        else:\n            expand_cluster(point_index, neighbors, cluster_id)\n            cluster_id += 1\n    return labels"}
{"task_id": 481, "completion_id": 1, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n\n    def region_query(point_index):\n        neighbors = []\n        for i in range(len(data)):\n            if euclidean_distance(data[point_index], data[i]) <= eps:\n                neighbors.append(i)\n        return neighbors\n\n    def expand_cluster(point_index, neighbors, cluster_id):\n        labels[point_index] = cluster_id\n        i = 0\n        while i < len(neighbors):\n            neighbor_index = neighbors[i]\n            if labels[neighbor_index] == -1:\n                labels[neighbor_index] = cluster_id\n            elif labels[neighbor_index] == 0:\n                labels[neighbor_index] = cluster_id\n                neighbor_neighbors = region_query(neighbor_index)\n                if len(neighbor_neighbors) >= min_samples:\n                    neighbors.extend(neighbor_neighbors)\n            i += 1\n    labels = [0] * len(data)\n    cluster_id = 0\n    for index in range(len(data)):\n        if labels[index] != 0:\n            continue\n        neighbors = region_query(index)\n        if len(neighbors) < min_samples:\n            labels[index] = -1\n        else:\n            cluster_id += 1\n            expand_cluster(index, neighbors, cluster_id)\n    return labels"}
{"task_id": 481, "completion_id": 2, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n\n    def region_query(point_idx, eps):\n        neighbors = []\n        for idx in range(len(data)):\n            if euclidean_distance(data[point_idx], data[idx]) <= eps:\n                neighbors.append(idx)\n        return neighbors\n\n    def expand_cluster(point_idx, neighbors, cluster_id):\n        labels[point_idx] = cluster_id\n        i = 0\n        while i < len(neighbors):\n            neighbor_idx = neighbors[i]\n            if labels[neighbor_idx] == -1:\n                labels[neighbor_idx] = cluster_id\n            elif labels[neighbor_idx] == 0:\n                labels[neighbor_idx] = cluster_id\n                neighbor_neighbors = region_query(neighbor_idx, eps)\n                if len(neighbor_neighbors) >= min_samples:\n                    neighbors += neighbor_neighbors\n            i += 1\n    labels = [0] * len(data)\n    cluster_id = 0\n    for point_idx in range(len(data)):\n        if labels[point_idx] != 0:\n            continue\n        neighbors = region_query(point_idx, eps)\n        if len(neighbors) < min_samples:\n            labels[point_idx] = -1\n        else:\n            cluster_id += 1\n            expand_cluster(point_idx, neighbors, cluster_id)\n    return labels"}
{"task_id": 481, "completion_id": 3, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.shape[0] == 0:\n        return []\n    labels = [-1] * data.shape[0]\n    cluster_id = 0\n\n    def region_query(point_index: int) -> list[int]:\n        \"\"\"Find all points within eps distance of the point at point_index.\"\"\"\n        neighbors = []\n        for i in range(data.shape[0]):\n            if np.linalg.norm(data[point_index] - data[i]) <= eps:\n                neighbors.append(i)\n        return neighbors\n\n    def expand_cluster(point_index: int, neighbors: list[int]):\n        \"\"\"Expand the cluster by finding density-reachable points.\"\"\"\n        nonlocal cluster_id\n        labels[point_index] = cluster_id\n        i = 0\n        while i < len(neighbors):\n            neighbor = neighbors[i]\n            if labels[neighbor] == -1:\n                labels[neighbor] = cluster_id\n            if labels[neighbor] < 0:\n                new_neighbors = region_query(neighbor)\n                if len(new_neighbors) >= min_samples:\n                    neighbors.extend(new_neighbors)\n            i += 1\n    for point_index in range(data.shape[0]):\n        if labels[point_index] != -1:\n            continue\n        neighbors = region_query(point_index)\n        if len(neighbors) < min_samples:\n            labels[point_index] = -1\n        else:\n            cluster_id += 1\n            expand_cluster(point_index, neighbors)\n    return labels"}
{"task_id": 481, "completion_id": 4, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def region_query(point_index):\n        neighbors = []\n        for i in range(len(data)):\n            if euclidean_distance(data[point_index], data[i]) <= eps:\n                neighbors.append(i)\n        return neighbors\n\n    def expand_cluster(point_index, neighbors, cluster_id):\n        labels[point_index] = cluster_id\n        i = 0\n        while i < len(neighbors):\n            neighbor_index = neighbors[i]\n            if labels[neighbor_index] == -1:\n                labels[neighbor_index] = cluster_id\n            elif labels[neighbor_index] == 0:\n                labels[neighbor_index] = cluster_id\n                neighbor_neighbors = region_query(neighbor_index)\n                if len(neighbor_neighbors) >= min_samples:\n                    neighbors.extend(neighbor_neighbors)\n            i += 1\n    labels = [0] * len(data)\n    cluster_id = -1\n    for point_index in range(len(data)):\n        if labels[point_index] != 0:\n            continue\n        neighbors = region_query(point_index)\n        if len(neighbors) < min_samples:\n            labels[point_index] = -1\n        else:\n            cluster_id += 1\n            expand_cluster(point_index, neighbors, cluster_id)\n    return labels"}
{"task_id": 481, "completion_id": 5, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n\n    def find_neighbors(point_index):\n        neighbors = []\n        for (i, point) in enumerate(data):\n            if euclidean_distance(data[point_index], point) < eps:\n                neighbors.append(i)\n        return neighbors\n    labels = [-1] * len(data)\n    cluster_id = 0\n    for point_index in range(len(data)):\n        if labels[point_index] != -1:\n            continue\n        neighbors = find_neighbors(point_index)\n        if len(neighbors) < min_samples:\n            labels[point_index] = -1\n        else:\n            labels[point_index] = cluster_id\n            i = 0\n            while i < len(neighbors):\n                neighbor_index = neighbors[i]\n                if labels[neighbor_index] == -1:\n                    labels[neighbor_index] = cluster_id\n                if labels[neighbor_index] == -1:\n                    neighbor_neighbors = find_neighbors(neighbor_index)\n                    if len(neighbor_neighbors) >= min_samples:\n                        neighbors.extend(neighbor_neighbors)\n                i += 1\n            cluster_id += 1\n    return labels"}
{"task_id": 481, "completion_id": 6, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n\n    def region_query(point_index):\n        neighbors = []\n        for index in range(len(data)):\n            if euclidean_distance(data[point_index], data[index]) <= eps:\n                neighbors.append(index)\n        return neighbors\n\n    def expand_cluster(point_index, neighbors, cluster_id):\n        labels[point_index] = cluster_id\n        i = 0\n        while i < len(neighbors):\n            neighbor = neighbors[i]\n            if labels[neighbor] == -1:\n                labels[neighbor] = cluster_id\n            elif labels[neighbor] == 0:\n                labels[neighbor] = cluster_id\n                new_neighbors = region_query(neighbor)\n                if len(new_neighbors) >= min_samples:\n                    neighbors.extend(new_neighbors)\n            i += 1\n    if len(data) == 0:\n        return []\n    labels = [0] * len(data)\n    cluster_id = 0\n    for point_index in range(len(data)):\n        if labels[point_index] != 0:\n            continue\n        neighbors = region_query(point_index)\n        if len(neighbors) < min_samples:\n            labels[point_index] = -1\n        else:\n            cluster_id += 1\n            expand_cluster(point_index, neighbors, cluster_id)\n    return labels"}
{"task_id": 481, "completion_id": 7, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    labels = [-1] * data.shape[0]\n    cluster_id = 0\n\n    def distance(point1, point2):\n        return np.linalg.norm(point1 - point2)\n\n    def region_query(point_id):\n        neighbors = []\n        for other_point_id in range(data.shape[0]):\n            if distance(data[point_id], data[other_point_id]) <= eps:\n                neighbors.append(other_point_id)\n        return neighbors\n\n    def expand_cluster(point_id, neighbors, cluster_id):\n        labels[point_id] = cluster_id\n        i = 0\n        while i < len(neighbors):\n            neighbor_id = neighbors[i]\n            if labels[neighbor_id] == -1:\n                labels[neighbor_id] = cluster_id\n            elif labels[neighbor_id] == 0:\n                labels[neighbor_id] = cluster_id\n                new_neighbors = region_query(neighbor_id)\n                if len(new_neighbors) >= min_samples:\n                    neighbors += new_neighbors\n            i += 1\n    for point_id in range(data.shape[0]):\n        if labels[point_id] != -1:\n            continue\n        neighbors = region_query(point_id)\n        if len(neighbors) < min_samples:\n            labels[point_id] = 0\n        else:\n            cluster_id += 1\n            expand_cluster(point_id, neighbors, cluster_id)\n    return labels"}
{"task_id": 481, "completion_id": 8, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled -1 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    labels = [-1] * len(data)\n    cluster_id = 0\n\n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def region_query(point_index):\n        neighbors = []\n        for (index, point) in enumerate(data):\n            if euclidean_distance(data[point_index], point) <= eps:\n                neighbors.append(index)\n        return neighbors\n\n    def expand_cluster(point_index, neighbors, cluster_id):\n        labels[point_index] = cluster_id\n        i = 0\n        while i < len(neighbors):\n            neighbor_index = neighbors[i]\n            if labels[neighbor_index] == -1:\n                labels[neighbor_index] = cluster_id\n            elif labels[neighbor_index] == 0:\n                labels[neighbor_index] = cluster_id\n                neighbor_neighbors = region_query(neighbor_index)\n                if len(neighbor_neighbors) >= min_samples:\n                    neighbors.extend(neighbor_neighbors)\n            i += 1\n    for point_index in range(len(data)):\n        if labels[point_index] != -1:\n            continue\n        neighbors = region_query(point_index)\n        if len(neighbors) < min_samples:\n            labels[point_index] = -1\n        else:\n            cluster_id += 1\n            expand_cluster(point_index, neighbors, cluster_id)\n    return labels"}
{"task_id": 481, "completion_id": 9, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def find_neighbors(point_idx):\n        neighbors = []\n        for i in range(len(data)):\n            if euclidean_distance(data[point_idx], data[i]) < eps:\n                neighbors.append(i)\n        return neighbors\n    labels = [-1] * len(data)\n    cluster_id = 0\n    for point_idx in range(len(data)):\n        if labels[point_idx] != -1:\n            continue\n        neighbors = find_neighbors(point_idx)\n        if len(neighbors) < min_samples:\n            labels[point_idx] = -1\n        else:\n            labels[point_idx] = cluster_id\n            i = 0\n            while i < len(neighbors):\n                neighbor = neighbors[i]\n                if labels[neighbor] == -1:\n                    labels[neighbor] = cluster_id\n                elif labels[neighbor] == -1:\n                    labels[neighbor] = cluster_id\n                    new_neighbors = find_neighbors(neighbor)\n                    if len(new_neighbors) >= min_samples:\n                        neighbors.extend(new_neighbors)\n                i += 1\n            cluster_id += 1\n    return labels"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('Labels must be in the range [0, num_classes).')\n    result = np.zeros((y.size, num_classes), dtype=int)\n    result[np.arange(y.size), y] = 1\n    return result"}
{"task_id": 482, "completion_id": 1, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype=int)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('Labels must be non-negative and less than num_classes.')\n    one_hot = np.zeros((len(y), num_classes), dtype=int)\n    one_hot[np.arange(len(y)), y] = 1\n    return one_hot"}
{"task_id": 482, "completion_id": 2, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('Labels must be non-negative integers less than num_classes.')\n    one_hot = np.zeros((y.size, num_classes), dtype=int)\n    one_hot[np.arange(y.size), y] = 1\n    return one_hot"}
{"task_id": 482, "completion_id": 3, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype=int)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if any(y < 0) or any(y >= num_classes):\n        raise ValueError('Labels must be non-negative and less than num_classes.')\n    one_hot_matrix = np.zeros((y.size, num_classes), dtype=int)\n    one_hot_matrix[np.arange(y.size), y] = 1\n    return one_hot_matrix"}
{"task_id": 482, "completion_id": 4, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype=int)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('All labels must be non-negative integers less than num_classes.')\n    one_hot = np.zeros((len(y), num_classes), dtype=int)\n    one_hot[np.arange(len(y)), y] = 1\n    return one_hot"}
{"task_id": 482, "completion_id": 5, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if not np.issubdtype(y.dtype, np.integer) or np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('All labels must be non-negative integers and less than num_classes.')\n    one_hot_matrix = np.zeros((y.shape[0], num_classes), dtype=int)\n    one_hot_matrix[np.arange(y.shape[0]), y] = 1\n    return one_hot_matrix"}
{"task_id": 482, "completion_id": 6, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype=int)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('Labels must be non-negative and less than num_classes')\n    one_hot_matrix = np.zeros((len(y), num_classes), dtype=int)\n    one_hot_matrix[np.arange(len(y)), y] = 1\n    return one_hot_matrix"}
{"task_id": 482, "completion_id": 7, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('Labels must be integers in the range [0, num_classes).')\n    one_hot = np.zeros((y.shape[0], num_classes), dtype=int)\n    one_hot[np.arange(y.shape[0]), y] = 1\n    return one_hot"}
{"task_id": 482, "completion_id": 8, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype=int)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('Labels must be non-negative and less than num_classes.')\n    one_hot = np.zeros((len(y), num_classes), dtype=int)\n    one_hot[np.arange(len(y)), y] = 1\n    return one_hot"}
{"task_id": 482, "completion_id": 9, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('Labels must be non-negative integers and smaller than num_classes.')\n    categorical = np.zeros((y.size, num_classes), dtype=int)\n    categorical[np.arange(y.size), y] = 1\n    return categorical"}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def build_tree(X, y, depth):\n        if len(X) < 2 or depth == max_depth:\n            return np.mean(y)\n        best_sse = float('inf')\n        best_split = None\n        for i in range(1, len(X)):\n            (left_x, right_x) = (X[:i], X[i:])\n            (left_y, right_y) = (y[:i], y[i:])\n            sse_left = np.sum((left_y - np.mean(left_y)) ** 2)\n            sse_right = np.sum((right_y - np.mean(right_y)) ** 2)\n            sse = sse_left + sse_right\n            if sse < best_sse:\n                best_sse = sse\n                best_split = i\n        if best_split is None:\n            return np.mean(y)\n        left_tree = build_tree(X[:best_split], y[:best_split], depth + 1)\n        right_tree = build_tree(X[best_split:], y[best_split:], depth + 1)\n        return ((X[best_split - 1] + X[best_split]) / 2, left_tree, right_tree)\n\n    def predict_tree(x, tree):\n        if isinstance(tree, float):\n            return tree\n        (split, left, right) = tree\n        if x < split:\n            return predict_tree(x, left)\n        else:\n            return predict_tree(x, right)\n    if not X_train:\n        return []\n    (X_train, y_train) = zip(*sorted(zip(X_train, y_train)))\n    tree = build_tree(X_train, y_train, 0)\n    return [predict_tree(x, tree) for x in X_test]"}
{"task_id": 485, "completion_id": 1, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if len(X_train) == 0:\n        return []\n\n    def build_tree(X, y, depth):\n        if depth == max_depth or len(X) < 2:\n            return np.mean(y)\n        best_split_point = None\n        min_sse = float('inf')\n        for i in range(1, len(X)):\n            left_y = y[:i]\n            right_y = y[i:]\n            sse = np.sum((left_y - np.mean(left_y)) ** 2) + np.sum((right_y - np.mean(right_y)) ** 2)\n            if sse < min_sse:\n                min_sse = sse\n                best_split_point = i\n        if best_split_point is None:\n            return np.mean(y)\n        left_tree = build_tree(X[:best_split_point], y[:best_split_point], depth + 1)\n        right_tree = build_tree(X[best_split_point:], y[best_split_point:], depth + 1)\n        split_value = X[best_split_point - 1]\n        return (split_value, left_tree, right_tree)\n\n    def predict_tree(tree, x):\n        if isinstance(tree, float):\n            return tree\n        (split_value, left_tree, right_tree) = tree\n        if x <= split_value:\n            return predict_tree(left_tree, x)\n        else:\n            return predict_tree(right_tree, x)\n    sorted_indices = np.argsort(X_train)\n    X_sorted = np.array(X_train)[sorted_indices]\n    y_sorted = np.array(y_train)[sorted_indices]\n    tree = build_tree(X_sorted, y_sorted, 0)\n    return [predict_tree(tree, x) for x in X_test]"}
{"task_id": 485, "completion_id": 2, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def sse(values):\n        mean = np.mean(values)\n        return np.sum((values - mean) ** 2)\n\n    def best_split(X, y):\n        best_sse = float('inf')\n        best_split_value = None\n        for i in range(1, len(X)):\n            sse_left = sse(y[:i])\n            sse_right = sse(y[i:])\n            total_sse = sse_left + sse_right\n            if total_sse < best_sse:\n                best_sse = total_sse\n                best_split_value = X[i]\n        return best_split_value\n\n    def build_tree(X, y, depth):\n        if len(y) < 2 or depth == max_depth:\n            return np.mean(y)\n        split_value = best_split(X, y)\n        if split_value is None:\n            return np.mean(y)\n        left_indices = [i for (i, val) in enumerate(X) if val < split_value]\n        right_indices = [i for (i, val) in enumerate(X) if val >= split_value]\n        if not left_indices or not right_indices:\n            return np.mean(y)\n        left_X = [X[i] for i in left_indices]\n        left_y = [y[i] for i in left_indices]\n        right_X = [X[i] for i in right_indices]\n        right_y = [y[i] for i in right_indices]\n        return (split_value, build_tree(left_X, left_y, depth + 1), build_tree(right_X, right_y, depth + 1))\n\n    def predict_tree(tree, x):\n        if isinstance(tree, float):\n            return tree\n        else:\n            (split_value, left_tree, right_tree) = tree\n            if x < split_value:\n                return predict_tree(left_tree, x)\n            else:\n                return predict_tree(right_tree, x)\n    if not X_train or not y_train:\n        return []\n    sorted_indices = np.argsort(X_train)\n    X_train_sorted = [X_train[i] for i in sorted_indices]\n    y_train_sorted = [y_train[i] for i in sorted_indices]\n    tree = build_tree(X_train_sorted, y_train_sorted, 0)\n    predictions = [predict_tree(tree, x) for x in X_test]\n    return predictions"}
{"task_id": 485, "completion_id": 3, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def best_split(X, y):\n        \"\"\"Find the best split point for the data.\"\"\"\n        best_sse = float('inf')\n        best_split_point = None\n        n = len(X)\n        for i in range(n - 1):\n            split_point = (X[i] + X[i + 1]) / 2.0\n            left_indices = [j for j in range(n) if X[j] <= split_point]\n            right_indices = [j for j in range(n) if X[j] > split_point]\n            if len(left_indices) == 0 or len(right_indices) == 0:\n                continue\n            left_mean = np.mean([y[j] for j in left_indices])\n            right_mean = np.mean([y[j] for j in right_indices])\n            sse_left = np.sum([(y[j] - left_mean) ** 2 for j in left_indices])\n            sse_right = np.sum([(y[j] - right_mean) ** 2 for j in right_indices])\n            sse = sse_left + sse_right\n            if sse < best_sse:\n                best_sse = sse\n                best_split_point = split_point\n        return best_split_point\n\n    def build_tree(X, y, depth):\n        \"\"\"Recursively build the regression tree.\"\"\"\n        if len(X) < 2 or depth == max_depth:\n            return np.mean(y)\n        split_point = best_split(X, y)\n        if split_point is None:\n            return np.mean(y)\n        left_indices = [i for (i, val) in enumerate(X) if val <= split_point]\n        right_indices = [i for (i, val) in enumerate(X) if val > split_point]\n        left_node = build_tree([X[i] for i in left_indices], [y[i] for i in left_indices], depth + 1)\n        right_node = build_tree([X[i] for i in right_indices], [y[i] for i in right_indices], depth + 1)\n        return (split_point, left_node, right_node)\n\n    def predict_tree(node, x):\n        \"\"\"Predict using the trained tree.\"\"\"\n        if isinstance(node, float):\n            return node\n        (split_point, left_node, right_node) = node\n        if x <= split_point:\n            return predict_tree(left_node, x)\n        else:\n            return predict_tree(right_node, x)\n    if len(X_train) == 0:\n        return []\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    sorted_indices = np.argsort(X_train)\n    X_train = X_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    tree = build_tree(X_train, y_train, 0)\n    predictions = [predict_tree(tree, x) for x in X_test]\n    return predictions"}
{"task_id": 485, "completion_id": 4, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def best_split(X, y):\n        n_samples = len(X)\n        if n_samples < 2:\n            return (None, None, None)\n        best_sse = float('inf')\n        best_feature_idx = None\n        best_threshold = None\n        (X, y) = zip(*sorted(zip(X, y)))\n        cumulative_y = np.cumsum(y)\n        cumulative_y_sq = np.cumsum([yi ** 2 for yi in y])\n        total_y_sq = cumulative_y_sq[-1]\n        total_y = cumulative_y[-1]\n        for i in range(n_samples - 1):\n            ss_left = cumulative_y_sq[i] - cumulative_y[i] ** 2 / (i + 1)\n            ss_right = total_y_sq - cumulative_y_sq[i] - (total_y - cumulative_y[i]) ** 2 / (n_samples - i - 1)\n            sse = ss_left + ss_right\n            if sse < best_sse:\n                best_sse = sse\n                best_threshold = (X[i] + X[i + 1]) / 2\n        return (best_threshold, best_sse)\n\n    def build_tree(X, y, depth):\n        if depth >= max_depth or len(X) < 2:\n            return np.mean(y)\n        (threshold, _) = best_split(X, y)\n        if threshold is None:\n            return np.mean(y)\n        left_mask = np.array(X) <= threshold\n        right_mask = np.array(X) > threshold\n        left_tree = build_tree(np.array(X)[left_mask], np.array(y)[left_mask], depth + 1)\n        right_tree = build_tree(np.array(X)[right_mask], np.array(y)[right_mask], depth + 1)\n        return (threshold, left_tree, right_tree)\n\n    def predict_tree(x, tree):\n        if isinstance(tree, float):\n            return tree\n        (threshold, left_tree, right_tree) = tree\n        if x <= threshold:\n            return predict_tree(x, left_tree)\n        else:\n            return predict_tree(x, right_tree)\n    if not X_train or not y_train:\n        return []\n    tree = build_tree(X_train, y_train, 0)\n    return [predict_tree(x, tree) for x in X_test]"}
{"task_id": 485, "completion_id": 5, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def sse(y):\n        mean = np.mean(y)\n        return np.sum((y - mean) ** 2)\n\n    def best_split(X, y):\n        best_sse = np.inf\n        best_split_point = None\n        for i in range(1, len(X)):\n            sse_left = sse(y[:i])\n            sse_right = sse(y[i:])\n            total_sse = sse_left + sse_right\n            if total_sse < best_sse:\n                best_sse = total_sse\n                best_split_point = i\n        return best_split_point\n\n    def build_tree(X, y, depth):\n        if depth == max_depth or len(X) < 2:\n            return np.mean(y)\n        split_point = best_split(X, y)\n        if split_point is None:\n            return np.mean(y)\n        left_tree = build_tree(X[:split_point], y[:split_point], depth + 1)\n        right_tree = build_tree(X[split_point:], y[split_point:], depth + 1)\n        return (X[split_point], left_tree, right_tree)\n\n    def predict_tree(tree, x):\n        if isinstance(tree, (float, int)):\n            return tree\n        (split_point, left_tree, right_tree) = tree\n        if x < split_point:\n            return predict_tree(left_tree, x)\n        else:\n            return predict_tree(right_tree, x)\n    if not X_train or not y_train:\n        return []\n    indices = np.argsort(X_train)\n    X_train_sorted = np.array(X_train)[indices]\n    y_train_sorted = np.array(y_train)[indices]\n    tree = build_tree(X_train_sorted, y_train_sorted, 0)\n    predictions = [predict_tree(tree, x) for x in X_test]\n    return predictions"}
{"task_id": 485, "completion_id": 6, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def build_tree(X, y, depth):\n        if len(X) < 2 or depth == max_depth:\n            return np.mean(y)\n        best_sse = float('inf')\n        best_split = None\n        for i in range(1, len(X)):\n            left_sse = np.sum((y[:i] - np.mean(y[:i])) ** 2)\n            right_sse = np.sum((y[i:] - np.mean(y[i:])) ** 2)\n            sse = left_sse + right_sse\n            if sse < best_sse:\n                best_sse = sse\n                best_split = i\n        split_point = X[best_split]\n        left_tree = build_tree(X[:best_split], y[:best_split], depth + 1)\n        right_tree = build_tree(X[best_split:], y[best_split:], depth + 1)\n        return (split_point, left_tree, right_tree)\n\n    def predict_tree(tree, x):\n        if isinstance(tree, float):\n            return tree\n        else:\n            (split_point, left_tree, right_tree) = tree\n            if x < split_point:\n                return predict_tree(left_tree, x)\n            else:\n                return predict_tree(right_tree, x)\n    if not X_train or not y_train:\n        return []\n    sorted_indices = np.argsort(X_train)\n    X_train_sorted = np.array(X_train)[sorted_indices]\n    y_train_sorted = np.array(y_train)[sorted_indices]\n    tree = build_tree(X_train_sorted, y_train_sorted, 0)\n    return [predict_tree(tree, x) for x in X_test]"}
{"task_id": 485, "completion_id": 7, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def build_tree(X, y, depth=0):\n        if len(X) < 2 or depth == max_depth:\n            return np.mean(y)\n        best_split = None\n        best_sse = float('inf')\n        for i in range(len(X) - 1):\n            mid = (X[i] + X[i + 1]) / 2\n            left_indices = X <= mid\n            right_indices = X > mid\n            left_sse = np.sum((y[left_indices] - np.mean(y[left_indices])) ** 2)\n            right_sse = np.sum((y[right_indices] - np.mean(y[right_indices])) ** 2)\n            sse = left_sse + right_sse\n            if sse < best_sse:\n                best_sse = sse\n                best_split = mid\n        if best_split is None:\n            return np.mean(y)\n        left_indices = X <= best_split\n        right_indices = X > best_split\n        left_subtree = build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_subtree = build_tree(X[right_indices], y[right_indices], depth + 1)\n        return (best_split, left_subtree, right_subtree)\n\n    def predict_tree(x, tree):\n        if isinstance(tree, float):\n            return tree\n        (split, left, right) = tree\n        if x <= split:\n            return predict_tree(x, left)\n        else:\n            return predict_tree(x, right)\n    if not X_train or not y_train:\n        return []\n    (X_train, y_train) = (np.array(X_train), np.array(y_train))\n    sorted_indices = np.argsort(X_train)\n    X_train_sorted = X_train[sorted_indices]\n    y_train_sorted = y_train[sorted_indices]\n    tree = build_tree(X_train_sorted, y_train_sorted)\n    return [predict_tree(x, tree) for x in X_test]"}
{"task_id": 485, "completion_id": 8, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def best_split(X, y):\n        best_sse = float('inf')\n        best_split_point = None\n        n = len(X)\n        sorted_indices = np.argsort(X)\n        X_sorted = np.array(X)[sorted_indices]\n        y_sorted = np.array(y)[sorted_indices]\n        for i in range(1, n):\n            left_y = y_sorted[:i]\n            right_y = y_sorted[i:]\n            left_mean = np.mean(left_y) if len(left_y) > 0 else 0\n            right_mean = np.mean(right_y) if len(right_y) > 0 else 0\n            sse_left = np.sum((left_y - left_mean) ** 2)\n            sse_right = np.sum((right_y - right_mean) ** 2)\n            sse = sse_left + sse_right\n            if sse < best_sse:\n                best_sse = sse\n                best_split_point = (X_sorted[i - 1] + X_sorted[i]) / 2\n        return (best_split_point, best_sse)\n\n    def build_tree(X, y, depth=0):\n        if len(X) < 2 or depth == max_depth:\n            return np.mean(y)\n        (split_point, _) = best_split(X, y)\n        if split_point is None:\n            return np.mean(y)\n        left_indices = [i for (i, x) in enumerate(X) if x <= split_point]\n        right_indices = [i for (i, x) in enumerate(X) if x > split_point]\n        left_subtree = build_tree([X[i] for i in left_indices], [y[i] for i in left_indices], depth + 1)\n        right_subtree = build_tree([X[i] for i in right_indices], [y[i] for i in right_indices], depth + 1)\n        return (split_point, left_subtree, right_subtree)\n\n    def predict_tree(tree, x):\n        if isinstance(tree, float):\n            return tree\n        (split_point, left_subtree, right_subtree) = tree\n        if x <= split_point:\n            return predict_tree(left_subtree, x)\n        else:\n            return predict_tree(right_subtree, x)\n    if not X_train or not y_train:\n        return []\n    tree = build_tree(X_train, y_train)\n    predictions = [predict_tree(tree, x) for x in X_test]\n    return predictions"}
{"task_id": 485, "completion_id": 9, "solution": "import numpy as np\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if not X_train or not y_train:\n        return []\n\n    def build_tree(X, y, depth):\n        if depth == max_depth or len(X) < 2:\n            return np.mean(y)\n        best_sse = float('inf')\n        best_split = None\n        sorted_indices = np.argsort(X)\n        X_sorted = np.array(X)[sorted_indices]\n        y_sorted = np.array(y)[sorted_indices]\n        for i in range(1, len(X_sorted)):\n            left_y = y_sorted[:i]\n            right_y = y_sorted[i:]\n            sse_left = np.sum((left_y - np.mean(left_y)) ** 2)\n            sse_right = np.sum((right_y - np.mean(right_y)) ** 2)\n            sse = sse_left + sse_right\n            if sse < best_sse:\n                best_sse = sse\n                best_split = (X_sorted[i - 1] + X_sorted[i]) / 2\n        if best_split is None:\n            return np.mean(y)\n        left_indices = [j for j in range(len(X)) if X[j] < best_split]\n        right_indices = [j for j in range(len(X)) if X[j] >= best_split]\n        left_subtree = build_tree([X[j] for j in left_indices], [y[j] for j in left_indices], depth + 1)\n        right_subtree = build_tree([X[j] for j in right_indices], [y[j] for j in right_indices], depth + 1)\n        return (best_split, left_subtree, right_subtree)\n\n    def predict_tree(tree, x):\n        if isinstance(tree, float):\n            return tree\n        (split_value, left, right) = tree\n        if x < split_value:\n            return predict_tree(left, x)\n        else:\n            return predict_tree(right, x)\n    tree = build_tree(X_train, y_train, 0)\n    return [predict_tree(tree, x) for x in X_test]"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    diag_matrix = np.diag(x)\n    return diag_matrix.tolist()"}
{"task_id": 490, "completion_id": 1, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 490, "completion_id": 2, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if isinstance(x, (list, tuple)):\n        x = np.array(x)\n    if x.ndim != 1:\n        raise ValueError('Input must be a one-dimensional vector.')\n    if x.size == 0:\n        return []\n    diag_matrix = np.diag(x)\n    return diag_matrix.tolist()"}
{"task_id": 490, "completion_id": 3, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 490, "completion_id": 4, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    if x.size == 0:\n        return []\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 490, "completion_id": 5, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    if x.size == 0:\n        return []\n    diagonal_matrix = np.diag(x).tolist()\n    return diagonal_matrix"}
{"task_id": 490, "completion_id": 6, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    if x.size == 0:\n        return []\n    diag_matrix = np.diag(x)\n    return diag_matrix.tolist()"}
{"task_id": 490, "completion_id": 7, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    if x.size == 0:\n        return []\n    diag_matrix = np.diag(x)\n    return diag_matrix.tolist()"}
{"task_id": 490, "completion_id": 8, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    if x.size == 0:\n        return []\n    diag_matrix = np.diag(x)\n    return diag_matrix.tolist()"}
{"task_id": 490, "completion_id": 9, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 491, "completion_id": 0, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    frequency = defaultdict(int)\n    for transaction in transactions:\n        for item in transaction:\n            frequency[item] += 1\n    frequent_items = {item: count for (item, count) in frequency.items() if count >= min_sup}\n    frequent_items = dict(sorted(frequent_items.items(), key=lambda x: (-x[1], x[0])))\n    header_table = {item: None for item in frequent_items}\n\n    class FPNode:\n\n        def __init__(self, item, count=1, parent=None):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.children = {}\n            self.link = None\n\n    def insert_tree(transaction, root):\n        cursor = root\n        for item in transaction:\n            if item in cursor.children:\n                cursor.children[item].count += 1\n            else:\n                new_node = FPNode(item, 1, cursor)\n                cursor.children[item] = new_node\n                if header_table[item] is None:\n                    header_table[item] = new_node\n                else:\n                    last_node = header_table[item]\n                    while last_node.link is not None:\n                        last_node = last_node.link\n                    last_node.link = new_node\n            cursor = cursor.children[item]\n    frequent_transactions = []\n    for transaction in transactions:\n        frequent_items_in_transaction = [item for item in transaction if item in frequent_items]\n        frequent_items_in_transaction.sort(key=lambda x: (-frequent_items[x], x))\n        if frequent_items_in_transaction:\n            frequent_transactions.append(frequent_items_in_transaction)\n    root = FPNode('Null', 1, None)\n    for transaction in frequent_transactions:\n        insert_tree(transaction, root)\n\n    def find_frequent_patterns(header_table, prefix, min_sup, frequent_itemsets):\n        for (item, node) in sorted(header_table.items(), key=lambda x: (-frequent_items[x[0]], x[0])):\n            pattern = prefix + (item,)\n            frequent_itemsets.append(pattern)\n            conditional_pattern_base = []\n            n = node\n            while n is not None:\n                path = []\n                parent = n.parent\n                while parent.item != 'Null':\n                    path.append(parent.item)\n                    parent = parent.parent\n                if path:\n                    conditional_pattern_base.append((list(path), n.count))\n                n = n.link\n            if conditional_pattern_base:\n                conditional_tree = FPNode('Null', 1, None)\n                conditional_header = defaultdict()\n                for (path, count) in conditional_pattern_base:\n                    path.sort(key=lambda x: (-frequent_items[x], x))\n                    insert_tree(path, conditional_tree, conditional_header, count)\n                if conditional_tree.children:\n                    find_frequent_patterns(conditional_header, pattern, min_sup, frequent_itemsets)\n\n    def insert_tree_conditional(transaction, root, header, count):\n        cursor = root\n        for item in transaction:\n            if item in cursor.children:\n                cursor.children[item].count += count\n            else:\n                new_node = FPNode(item, count, cursor)\n                cursor.children[item] = new_node\n                if header[item] is None:\n                    header[item] = new_node\n                else:\n                    last_node = header[item]\n                    while last_node.link is not None:\n                        last_node = last_node.link\n                    last_node.link = new_node\n            cursor = cursor.children[item]\n    frequent_itemsets = []\n    find_frequent_patterns(header_table, tuple(), min_sup, frequent_itemsets)\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3"}
{"task_id": 491, "completion_id": 1, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    freq_items = {item: count for (item, count) in item_counts.items() if count >= min_sup}\n    sorted_items = sorted(freq_items, key=freq_items.get, reverse=True)\n    fp_tree = FPTree()\n    for transaction in transactions:\n        sorted_transaction = [item for item in transaction if item in freq_items]\n        sorted_transaction.sort(key=lambda x: sorted_items.index(x))\n        fp_tree.add_transaction(sorted_transaction)\n    frequent_itemsets = []\n    mine_tree(fp_tree, sorted_items, set(), frequent_itemsets, min_sup)\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\nclass FPNode:\n\n    def __init__(self, value, count=0, parent=None):\n        self.value = value\n        self.count = count\n        self.parent = parent\n        self.link = None\n        self.children = defaultdict(FPNode)\n\n    def increment(self, count):\n        self.count += count\n\n    def get_path(self):\n        path = []\n        current = self\n        while current.parent is not None:\n            path.append(current)\n            current = current.parent\n        path.pop()\n        return path[::-1]\nclass FPTree:\n\n    def __init__(self):\n        self.root = FPNode(None)\n        self.header_table = defaultdict(list)\n\n    def add_transaction(self, transaction):\n        current_node = self.root\n        for item in transaction:\n            if item not in current_node.children:\n                new_node = FPNode(item, parent=current_node)\n                current_node.children[item] = new_node\n                self.header_table[item].append(new_node)\n            current_node = current_node.children[item]\n            current_node.increment(1)"}
{"task_id": 491, "completion_id": 2, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_sup}\n    sorted_items = sorted(frequent_items, key=lambda x: (frequent_items[x], x), reverse=True)\n    root = defaultdict(lambda : defaultdict(int))\n    header_table = defaultdict(list)\n    for transaction in transactions:\n        transaction = sorted((item for item in transaction if item in frequent_items), key=lambda x: (frequent_items[x], x), reverse=True)\n        if not transaction:\n            continue\n        current_layer = root\n        for item in transaction:\n            current_layer[item][None] += 1\n            header_table[item].append(current_layer[item])\n            current_layer = current_layer[item]\n\n    def mine_tree(tree, prefix, min_sup, header_table, frequent_itemsets):\n        if all((len(v.keys()) == 1 for v in tree.values())):\n            path = [k for k in tree if k is not None]\n            path.sort()\n            if path:\n                for i in range(1, len(path) + 1):\n                    for combination in itertools.combinations(path, i):\n                        combination = prefix + tuple(combination)\n                        frequent_itemsets.append(combination)\n            return\n        for base_path in [h[None] for h in header_table.values()]:\n            path = []\n            node = base_path\n            while node is not None:\n                if node is not base_path:\n                    path.append(node)\n                node = node.get(None, None)\n            cond_pattern_base = defaultdict(list)\n            for node in path:\n                parent = node\n                count = parent[None]\n                cond_pattern = []\n                while parent is not None and parent != root:\n                    cond_pattern.append(parent)\n                    parent = parent.popitem(last=False)[0]\n                cond_pattern.pop()\n                cond_pattern_base[tuple(reversed(cond_pattern))].append(count)\n            cond_tree = defaultdict(lambda : defaultdict(int))\n            cond_header = defaultdict(list)\n            for (cond_items, count) in cond_pattern_base.items():\n                pattern = [item for item in cond_items if item in frequent_items]\n                if not pattern:\n                    continue\n                pattern.sort(key=lambda x: (frequent_items[x], x), reverse=True)\n                current_layer = cond_tree\n                for item in pattern:\n                    current_layer[item][None] += sum(count)\n                    cond_header[item].append(current_layer[item])\n                    current_layer = current_layer[item]\n            if cond_tree:\n                mine_tree(cond_tree, prefix + (path[-1],), min_sup, cond_header, frequent_itemsets)\n        if prefix:\n            frequent_itemsets.append(prefix)\n    frequent_itemsets = []\n    mine_tree(root, (), min_sup, header_table, frequent_itemsets)\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3"}
{"task_id": 491, "completion_id": 3, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n\n    class FPNode:\n\n        def __init__(self, item, count=1):\n            self.item = item\n            self.count = count\n            self.parent = None\n            self.children = {}\n            self.link = None\n\n    def build_fp_tree(transactions, header_table):\n        root = FPNode(item=None)\n        for transaction in transactions:\n            sorted_transaction = sorted(transaction, key=lambda x: (header_table[x][0], x), reverse=True)\n            current_node = root\n            for item in sorted_transaction:\n                if item in current_node.children:\n                    current_node.children[item].count += 1\n                else:\n                    child_node = FPNode(item)\n                    child_node.parent = current_node\n                    current_node.children[item] = child_node\n                    if header_table[item][1] is None:\n                        header_table[item][1] = child_node\n                    else:\n                        node = header_table[item][1]\n                        while node.link is not None:\n                            node = node.link\n                        node.link = child_node\n                current_node = current_node.children[item]\n        return root\n\n    def mine_tree(root, header_table, prefix, frequent_itemsets):\n        for (item, nodes) in sorted(header_table.items(), key=lambda x: x[0]):\n            new_prefix = prefix + (item,)\n            frequent_itemsets.append(new_prefix)\n            conditional_patterns = []\n            node = nodes[1]\n            while node is not None:\n                path = []\n                parent = node.parent\n                while parent.item is not None:\n                    path.append(parent.item)\n                    parent = parent.parent\n                conditional_patterns.append((path, node.count))\n                node = node.link\n            if conditional_patterns:\n                conditional_items = Counter()\n                for (path, count) in conditional_patterns:\n                    conditional_items.update(path)\n                conditional_items = {k: v for (k, v) in conditional_items.items() if v >= min_sup}\n                if conditional_items:\n                    conditional_tree_root = FPNode(item=None)\n                    header = {item: [count, None] for (item, count) in conditional_items.items()}\n                    for (path, count) in conditional_patterns:\n                        filtered_path = [item for item in path if item in header]\n                        if filtered_path:\n                            add_transaction(filtered_path, count, conditional_tree_root, header)\n                    mine_tree(conditional_tree_root, header, new_prefix, frequent_itemsets)\n\n    def add_transaction(transaction, count, root, header_table):\n        current_node = root\n        for item in transaction:\n            if item in current_node.children:\n                current_node.children[item].count += count\n            else:\n                new_node = FPNode(item, count)\n                new_node.parent = current_node\n                current_node.children[item] = new_node\n                if header_table[item][1] is None:\n                    header_table[item][1] = new_node\n                else:\n                    node = header_table[item][1]\n                    while node.link is not None:\n                        node = node.link\n                    node.link = new_node\n            current_node = current_node.children[item]\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    items = [item for (item, count) in sorted(item_counts.items(), key=lambda x: x[0]) if count >= min_sup]\n    header_table = {item: [item_counts[item], None] for item in items}\n    fp_tree_root = build_fp_tree(transactions, header_table)\n    frequent_itemsets = []\n    mine_tree(fp_tree_root, header_table, (), frequent_itemsets)\n    return sorted(frequent_itemsets)\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3"}
{"task_id": 491, "completion_id": 4, "solution": "from collections import Counter, defaultdict\nimport itertools\nclass Node:\n\n    def __init__(self, item, count=0, parent=None):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.link = None\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_sup}\n    if not frequent_items:\n        return []\n    sorted_items = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n    header_table = defaultdict(list)\n    fp_tree_root = Node('root')\n    for transaction in transactions:\n        filtered_transaction = sorted((item for item in transaction if item in frequent_items), key=lambda x: (-frequent_items[x], x))\n        insert_transaction(filtered_transaction, fp_tree_root, header_table)\n    frequent_itemsets = []\n    mine_tree(fp_tree_root, header_table, [], frequent_itemsets, min_sup)\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3"}
{"task_id": 491, "completion_id": 5, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n\n    def build_frequent_itemset_counts(transactions):\n        item_counts = Counter()\n        for transaction in transactions:\n            item_counts.update(transaction)\n        frequent_items = {item: support for (item, support) in item_counts.items() if support >= min_sup}\n        return frequent_items\n\n    def build_ordered_transactions(transactions, frequent_items):\n        ordered_transactions = []\n        for transaction in transactions:\n            ordered_transaction = sorted((item for item in transaction if item in frequent_items), key=lambda item: (-frequent_items[item], item))\n            if ordered_transaction:\n                ordered_transactions.append(ordered_transaction)\n        return ordered_transactions\n\n    class FPNode:\n\n        def __init__(self, item, count, parent):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.link = None\n            self.children = {}\n\n    def insert_transaction_into_fp_tree(transaction, root, headers):\n        current_node = root\n        for item in transaction:\n            if item in current_node.children:\n                current_node.children[item].count += 1\n            else:\n                new_node = FPNode(item, 1, current_node)\n                current_node.children[item] = new_node\n                if item in headers:\n                    last_node = headers[item]\n                    while last_node.link:\n                        last_node = last_node.link\n                    last_node.link = new_node\n                else:\n                    headers[item] = new_node\n            current_node = current_node.children[item]\n\n    def build_fp_tree(ordered_transactions):\n        root = FPNode(None, 0, None)\n        headers = {}\n        for transaction in ordered_transactions:\n            insert_transaction_into_fp_tree(transaction, root, headers)\n        return (root, headers)\n\n    def find_conditional_pattern_base(item, headers):\n        cond_pattern_base = []\n        pointer = headers[item]\n        while pointer:\n            prefix_path = []\n            node = pointer.parent\n            while node and node.item:\n                prefix_path.append((node.item, pointer.count))\n                node = node.parent\n            if prefix_path:\n                cond_pattern_base.append(prefix_path)\n            pointer = pointer.link\n        return cond_pattern_base\n\n    def build_conditional_fp_tree(cond_pattern_base, frequent_items):\n        root = FPNode(None, 0, None)\n        for path in cond_pattern_base:\n            sub_transaction = [item for (item, count) in path if item in frequent_items]\n            sub_transaction.sort(key=lambda x: (-frequent_items[x], x))\n            insert_transaction_into_fp_tree(sub_transaction, root, {})\n        return root\n\n    def mine_frequent_itemsets_recursive(prefix, tree, headers, frequent_items, freq_itemsets):\n        for item in sorted(headers, key=lambda x: (frequent_items[x], x), reverse=True):\n            freq_itemset = prefix + (item,)\n            freq_itemsets.append(freq_itemset)\n            cond_pattern_base = find_conditional_pattern_base(item, headers)\n            (cond_tree, cond_headers) = build_conditional_fp_tree(cond_pattern_base, frequent_items)\n            if cond_headers:\n                mine_frequent_itemsets_recursive(freq_itemset, cond_tree, cond_headers, frequent_items, freq_itemsets)\n    frequent_items = build_frequent_itemset_counts(transactions)\n    if not frequent_items:\n        return []\n    ordered_transactions = build_ordered_transactions(transactions, frequent_items)\n    (root, headers) = build_fp_tree(ordered_transactions)\n    freq_itemsets = []\n    mine_frequent_itemsets_recursive((), root, headers, frequent_items, freq_itemsets)\n    return sorted(freq_itemsets, key=lambda x: (len(x), x))\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3"}
{"task_id": 491, "completion_id": 6, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n\n    class FPTreeNode:\n\n        def __init__(self, value, count=0, parent=None):\n            self.value = value\n            self.count = count\n            self.parent = parent\n            self.link = None\n            self.children = defaultdict(FPTreeNode)\n\n        def increment(self, count):\n            self.count += count\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    valid_items = {item for (item, count) in item_counts.items() if count >= min_sup}\n    ordered_transactions = []\n    for transaction in transactions:\n        ordered_transaction = sorted((item for item in transaction if item in valid_items), key=lambda x: item_counts[x], reverse=True)\n        if ordered_transaction:\n            ordered_transactions.append(ordered_transaction)\n    root = FPTreeNode(None)\n    header_table = defaultdict(list)\n    for transaction in ordered_transactions:\n        curr_node = root\n        for item in transaction:\n            next_node = curr_node.children.get(item)\n            if next_node is None:\n                next_node = FPTreeNode(item, count=1, parent=curr_node)\n                curr_node.children[item] = next_node\n                header_table[item].append(next_node)\n            else:\n                next_node.increment(1)\n            curr_node = next_node\n\n    def find_frequent_itemsets(prefix, node, min_sup, header_table, frequent_itemsets):\n        for (item, count) in node.children.items():\n            freq_itemset = prefix + (item,)\n            support = count.count\n            if support >= min_sup:\n                frequent_itemsets.append(freq_itemset)\n                cond_pat_base = []\n                cond_pat_prefix = []\n                while count.parent is not None:\n                    cond_pat_prefix.append((count.parent.value, count.parent.count))\n                    count = count.parent\n                cond_pat_base.append((cond_pat_prefix, freq_itemset[-1]))\n                cond_pat_tree = FPTreeNode(None)\n                cond_pat_last = defaultdict(list)\n                for (cond_pat, item) in cond_pat_base:\n                    condition = cond_pat\n                    cond_pat_item = item\n                    curr_node = cond_pat_tree\n                    condition = sorted(condition, key=lambda x: item_counts[x[0]], reverse=True)\n                    for (item, count) in condition:\n                        next_prefix_node = curr_node.children.get(item)\n                        if next_prefix_node is None:\n                            next_prefix_node = FPTreeNode(item, count=0, parent=curr_node)\n                            curr_node.children[item] = next_prefix_node\n                            cond_pat_last[item].append(next_prefix_node)\n                        else:\n                            next_prefix_node.increment(count)\n                        curr_node = next_prefix_node\n                    condition_node = curr_node.children.get(cond_pat_item)\n                    if condition_node is None:\n                        condition_node = FPTreeNode(cond_pat_item, 1, curr_node)\n                        curr_node.children[cond_pat_item] = condition_node\n                        cond_pat_last[cond_pat_item].append(condition_node)\n                    else:\n                        condition_node.increment(1)\n                for (item, nodes) in cond_pat_last.items():\n                    cond_header_table = defaultdict(list)\n                    for node in nodes:\n                        cond_header_table[item].append(node)\n                    find_frequent_itemsets(freq_itemset, cond_pat_tree, min_sup, cond_header_table, frequent_itemsets)\n    frequent_itemsets = []\n    for (item, nodes) in header_table.items():\n        find_frequent_itemsets((item,), root, min_sup, header_table, frequent_itemsets)\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3"}
{"task_id": 491, "completion_id": 7, "solution": "from collections import Counter, defaultdict\nimport itertools\nclass FPNode(object):\n    \"\"\"A node in an FP tree.\"\"\"\n\n    def __init__(self, item, count=1):\n        self.item = item\n        self.count = count\n        self.parent = None\n        self.children = defaultdict(FPNode)\n        self.link = None\n\n    def __repr__(self):\n        return f'FPNode({self.item}, {self.count})'\nclass FPTree(object):\n    \"\"\"An FP tree.\"\"\"\n\n    def __init__(self):\n        self.root = FPNode(None)\n        self.header_table = defaultdict(list)\n\n    def _update_tree(self, items):\n        curr_node = self.root\n        for item in items:\n            if item in curr_node.children:\n                curr_node.children[item].count += 1\n            else:\n                new_node = FPNode(item, 1)\n                new_node.parent = curr_node\n                curr_node.children[item] = new_node\n                self._update_header(item, new_node)\n            curr_node = curr_node.children[item]\n\n    def _update_header(self, item, node):\n        if self.header_table[item]:\n            last_node = self.header_table[item][-1]\n            last_node.link = node\n        self.header_table[item].append(node)\n\n    def add_transaction(self, transaction):\n        transaction = [item for (item, count) in transaction.items()]\n        self._update_tree(transaction)\n\n    def nodes(self, node=None):\n        \"\"\"Generator to iterate over all nodes in the tree.\"\"\"\n        if node is None:\n            node = self.root\n        yield node\n        for child in node.children.values():\n            yield from self.nodes(child)\n\n    def items_prefix(self, path):\n        \"\"\"Return a generator that yields the items in the given path.\"\"\"\n        condition_path = []\n        while path.parent is not None:\n            condition_path.append(path.item)\n            path = path.parent\n        condition_path.reverse()\n        return condition_path\n\n    def prefix_paths(self, node):\n        \"\"\"Generator that yields the conditional paths for the given node.\"\"\"\n\n        def collect_prefix_path(path):\n            pathes = []\n            condition_path = tuple(self.items_prefix(path))\n            if condition_path:\n                pathes.append(condition_path)\n            return pathes\n        pathes = []\n        seen = set()\n        while node is not None:\n            if node not in seen:\n                pathes.extend(collect_prefix_path(node))\n                seen.add(node)\n            node = node.link\n        return set(pathes)\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\"\"\"\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    item_sets = {item: count for (item, count) in item_counts.items() if count >= min_sup}\n    if not item_sets:\n        return []\n    tree = FPTree()\n    for transaction in transactions:\n        filtered = {item: count for (item, count) in Counter(transaction).items() if item in item_sets}\n        sorted_items = [item for (item, _) in sorted(filtered.items(), key=lambda x: (item_sets[x[0]], x[0]), reverse=True)]\n        tree.add_transaction(sorted_items)\n\n    def find_frequent_itemsets(tree, prefix):\n        if not tree.root.children:\n            return\n        for item in reversed(list(tree.header_table)):\n            supp = float(tree.header_table[item][-1].count)\n            path = prefix + (item,)\n            if path not in frequent_itemsets:\n                frequent_itemsets.append(path)\n            condition_pattern_base = tree.prefix_paths(tree.header_table[item][-1])\n            if len(condition_pattern_base) > 1:\n                condition_tree = FPTree()\n                for pattern in condition_pattern_base:\n                    condition_tree.add_transaction(Counter(pattern))\n                find_frequent_itemsets(condition_tree, path)\n    frequent_itemsets = []\n    find_frequent_itemsets(tree, tuple())\n    return sorted(frequent_itemsets, key=lambda x: (len(x), x))\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3"}
{"task_id": 491, "completion_id": 8, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    item_counts = Counter((item for transaction in transactions for item in transaction))\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_sup}\n    if not frequent_items:\n        return []\n    sorted_items = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n\n    def insert_tree(transaction, tree_root, header_table):\n        if not transaction:\n            return\n        item = transaction[0]\n        if item in tree_root.children:\n            tree_root.children[item].count += 1\n        else:\n            tree_root.children[item] = FPNode(item, frequent_items[item], tree_root)\n            if header_table[item][0] is None:\n                header_table[item] = (tree_root.children[item], None)\n            else:\n                current_node = header_table[item][0]\n                while current_node.link is not None:\n                    current_node = current_node.link\n                current_node.link = tree_root.children[item]\n        insert_tree(transaction[1:], tree_root.children[item], header_table)\n\n    class FPNode:\n\n        def __init__(self, item, count, parent):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.children = {}\n            self.link = None\n    header_table = defaultdict(lambda : (None, None))\n    fp_tree_root = FPNode(None, None, None)\n    for transaction in transactions:\n        filtered_sorted_transaction = [item for item in transaction if item in frequent_items]\n        filtered_sorted_transaction.sort(key=lambda x: (-frequent_items[x], x))\n        if filtered_sorted_transaction:\n            insert_tree(filtered_sorted_transaction, fp_tree_root, header_table)\n\n    def mine_tree(header_table, prefix, min_sup, frequent_item_sets):\n        for item in sorted(header_table, key=lambda x: header_table[x][0].count):\n            new_freq_set = prefix + (item,)\n            frequent_item_sets.append(new_freq_set)\n            conditional_pat_base = []\n            node = header_table[item][0]\n            while node is not None:\n                cond_pat = []\n                parent = node.parent\n                while parent and parent.item is not None:\n                    cond_pat.append(parent.item)\n                    parent = parent.parent\n                if cond_pat:\n                    conditional_pat_base.append((cond_pat, node.count))\n                node = node.link\n            cond_tree_root = FPNode(None, None, None)\n            cond_header_table = defaultdict(lambda : (None, None))\n            for (pattern, count) in conditional_pat_base:\n                filtered_sorted_pattern = [item for item in pattern if item in frequent_items]\n                filtered_sorted_pattern.sort(key=lambda x: (-frequent_items[x], x))\n                if filtered_sorted_pattern:\n                    insert_tree(filtered_sorted_pattern, cond_tree_root, cond_header_table)\n            if cond_tree_root.children:\n                mine_tree(cond_header_table, new_freq_set, min_sup, frequent_item_sets)\n    frequent_item_sets = []\n    mine_tree(header_table, (), min_sup, frequent_item_sets)\n    frequent_item_sets.sort(key=lambda x: (len(x), x))\n    return frequent_item_sets\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3"}
{"task_id": 491, "completion_id": 9, "solution": "from collections import Counter, defaultdict\nimport itertools\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n\n    def construct_fp_tree(transactions, min_sup):\n        item_counts = Counter((item for transaction in transactions for item in transaction))\n        frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_sup}\n        sorted_items = sorted(frequent_items, key=lambda item: (-frequent_items[item], item))\n        item_order = {item: idx for (idx, item) in enumerate(sorted_items)}\n        header_table = {item: None for item in frequent_items}\n        root = Node(null=True)\n        for transaction in transactions:\n            filtered_transaction = sorted((item for item in transaction if item in frequent_items), key=lambda item: item_order[item])\n            insert_tree(filtered_transaction, root, header_table)\n        return (root, header_table)\n\n    def insert_tree(transaction, node, header_table):\n        if not transaction:\n            return\n        item = transaction[0]\n        child_node = node.children.get(item)\n        if child_node is None:\n            child_node = Node(item=item)\n            node.children[item] = child_node\n            if header_table[item] is None:\n                header_table[item] = child_node\n            else:\n                current = header_table[item]\n                while current.link is not None:\n                    current = current.link\n                current.link = child_node\n        child_node.count += 1\n        insert_tree(transaction[1:], child_node, header_table)\n\n    def mine_frequent_itemsets(prefix, node, header_table, min_sup, frequent_itemsets):\n        if prefix:\n            count = float('inf')\n            current = node\n            while current is not None:\n                count = min(count, current.count)\n                current = current.link\n            frequent_itemsets.add(prefix)\n        condition_items = [item for (item, head) in header_table.items()]\n        condition_items.sort(key=lambda item: header_table[item].count)\n        for item in condition_items:\n            conditional_pattern_base = []\n            path = []\n            node = header_table[item]\n            while node is not None:\n                path = []\n                parent = node.parent\n                while parent.null is False:\n                    path.append(parent.item)\n                    parent = parent.parent\n                if path:\n                    conditional_pattern_base.append((path, node.count))\n                node = node.link\n            (condition_tree, condition_tree_header_table) = construct_fp_tree((items for (items, count) in conditional_pattern_base), min_sup)\n            if condition_tree.children:\n                mine_frequent_itemsets(prefix + (item,), condition_tree, condition_tree_header_table, min_sup, frequent_itemsets)\n\n    class Node:\n\n        def __init__(self, item=None, null=False):\n            self.item = item\n            self.children = defaultdict(Node)\n            self.parent = None\n            self.count = 0\n            self.link = None\n            self.null = null\n    (root, header_table) = construct_fp_tree(transactions, min_sup)\n    frequent_itemsets = set()\n    mine_frequent_itemsets((), root, header_table, min_sup, frequent_itemsets)\n    result = [tuple(sorted(itemset)) for itemset in frequent_itemsets]\n    result.sort(key=lambda itemset: (len(itemset), itemset))\n    return result\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3"}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    feature_combinations = []\n    for r in range(degree + 1):\n        feature_combinations.extend(combinations_with_replacement(range(n_features), r))\n    polynomial_feature_matrix = []\n    for sample in X:\n        row = [1]\n        for combination in feature_combinations[1:]:\n            term = np.prod([sample[i] ** exp for (i, exp) in enumerate(combination)])\n            row.append(term)\n        polynomial_feature_matrix.append(row)\n    return polynomial_feature_matrix\nX = [[1, 2], [3, 4]]\ndegree = 2"}
{"task_id": 492, "completion_id": 1, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    feature_indices = range(n_features)\n    all_combinations = []\n    for r in range(degree + 1):\n        all_combinations.extend(combinations_with_replacement(feature_indices, r))\n    feature_matrix = np.ones((n_samples, 1))\n    for combination in all_combinations:\n        if not combination:\n            continue\n        powers = np.prod(X[:, combination] ** np.bincount(combination, minlength=n_features), axis=1)\n        feature_matrix = np.column_stack((feature_matrix, powers.reshape(-1, 1)))\n    return feature_matrix.tolist()"}
{"task_id": 492, "completion_id": 2, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    feature_indices = range(n_features)\n    powers = []\n    for r in range(degree + 1):\n        powers.extend(combinations_with_replacement(feature_indices, r))\n    result = np.ones((n_samples, 1))\n    for power in powers[1:]:\n        monomial = np.prod(X[:, power] ** np.array([power.count(i) for i in feature_indices]), axis=1)\n        result = np.column_stack((result, monomial))\n    return result.tolist()\nX = [[1, 2], [3, 4]]\ndegree = 2"}
{"task_id": 492, "completion_id": 3, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    feature_indices = list(range(n_features))\n    feature_combinations = []\n    for current_degree in range(degree + 1):\n        feature_combinations.extend(combinations_with_replacement(feature_indices, current_degree))\n    polynomial_matrix = []\n    for sample in X:\n        polynomial_row = []\n        for feature_combination in feature_combinations:\n            product = 1.0\n            for feature_index in feature_combination:\n                product *= sample[feature_index]\n            polynomial_row.append(product)\n        polynomial_matrix.append(polynomial_row)\n    return polynomial_matrix\nX = [[1, 2], [3, 4]]\ndegree = 2"}
{"task_id": 492, "completion_id": 4, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    (n_samples, n_features) = (len(X), len(X[0]))\n    X = np.array(X)\n    feature_combinations = []\n    for k in range(degree + 1):\n        feature_combinations.extend(combinations_with_replacement(range(n_features), k))\n    polynomial_X = []\n    for sample in X:\n        polynomial_row = [1]\n        for indices in feature_combinations[1:]:\n            term = np.prod([sample[i] ** power for (i, power) in enumerate(indices)])\n            polynomial_row.append(term)\n        polynomial_X.append(polynomial_row)\n    return polynomial_X.tolist()"}
{"task_id": 492, "completion_id": 5, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or -1 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    powers = list(combinations_with_replacement(range(n_features), degree))\n    all_powers = []\n    for d in range(degree + 1):\n        all_powers.extend(combinations_with_replacement(range(n_features), d))\n    poly_features = []\n    for x in X:\n        row = [1]\n        for powers in all_powers[1:]:\n            term = np.prod(x[list(powers)] ** np.bincount(powers, minlength=n_features))\n            row.append(term)\n        poly_features.append(row)\n    return poly_features\nX = [[1, 2], [3, 4]]\ndegree = 2"}
{"task_id": 492, "completion_id": 6, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    feature_indices = list(range(n_features))\n    exponents = []\n    for d in range(degree + 1):\n        exponents.extend(combinations_with_replacement(feature_indices, d))\n    polynomial_mat = []\n    for sample in X:\n        row = [1]\n        for exp in exponents:\n            term = np.prod([sample[i] ** e for (i, e) in enumerate(exp)])\n            row.append(term)\n        polynomial_mat.append(row)\n    return polynomial_mat"}
{"task_id": 492, "completion_id": 7, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement, product\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    feature_indices = list(range(n_features))\n    all_combinations = []\n    for d in range(degree + 1):\n        all_combinations.extend(combinations_with_replacement(feature_indices, d))\n    feature_matrix = np.ones((n_samples, 1))\n    for combo in all_combinations:\n        term = np.prod(X[:, combo], axis=1)\n        feature_matrix = np.hstack([feature_matrix, term.reshape(-1, 1)])\n    return feature_matrix.tolist()"}
{"task_id": 492, "completion_id": 8, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    exponents = combinations_with_replacement(range(degree + 1), n_features)\n    exponents = [exp for exp in exponents if sum(exp) <= degree]\n    result = np.ones((n_samples, len(exponents)))\n    for (i, exp) in enumerate(exponents):\n        result[:, i] = np.prod(X ** exp, axis=1)\n    return result.tolist()"}
{"task_id": 492, "completion_id": 9, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    feature_indexes = range(n_features)\n    output = []\n    for sample in X:\n        new_features = [1]\n        for total_degree in range(1, degree + 1):\n            for indices in combinations_with_replacement(feature_indexes, total_degree):\n                new_feature = np.prod([sample[i] ** power for (i, power) in enumerate(np.bincount(indices, minlength=n_features))])\n                new_features.append(new_feature)\n        output.append(new_features)\n    return output"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    y = np.array(y)\n    y_mean = np.mean(y)\n    squared_errors = (y - y_mean) ** 2\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 1, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    y = np.array(y)\n    y_mean = np.mean(y)\n    mse_value = np.mean((y - y_mean) ** 2)\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 2, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    y = np.array(y)\n    y_mean = np.mean(y)\n    mse_value = np.mean((y - y_mean) ** 2)\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 3, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    y_mean = np.mean(y)\n    squared_errors = [(yi - y_mean) ** 2 for yi in y]\n    mse_value = np.mean(squared_errors)\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 4, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    y = np.array(y)\n    y_bar = np.mean(y)\n    mse_value = np.mean((y - y_bar) ** 2)\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 5, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    y = np.array(y)\n    y_mean = np.mean(y)\n    mse_value = np.mean((y - y_mean) ** 2)\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 6, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    y = np.array(y)\n    y_mean = np.mean(y)\n    mse_value = np.mean((y - y_mean) ** 2)\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 7, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    y = np.array(y)\n    mean_y = np.mean(y)\n    mse_value = np.mean((y - mean_y) ** 2)\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 8, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    y = np.array(y)\n    y_mean = np.mean(y)\n    mse_value = np.mean((y - y_mean) ** 2)\n    return round(mse_value, 4)"}
{"task_id": 493, "completion_id": 9, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    y = np.array(y)\n    y_mean = np.mean(y)\n    mse_value = np.mean((y - y_mean) ** 2)\n    return round(mse_value, 4)"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x, dtype=float)\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.zeros_like(x)\n    y_rounded = np.round(y, 4)\n    grad_rounded = np.round(grad, 4)\n    grad2_rounded = np.round(grad2, 4)\n    return (y_rounded.tolist(), grad_rounded.tolist(), grad2_rounded.tolist())"}
{"task_id": 496, "completion_id": 1, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    x = np.atleast_1d(x)\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.full_like(x, 0.0)\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    return (y_rounded, grad_rounded, grad2_rounded)"}
{"task_id": 496, "completion_id": 2, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x, dtype=float)\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.full_like(x, 0.0)\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    return (y_rounded, grad_rounded, grad2_rounded)"}
{"task_id": 496, "completion_id": 3, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(x, (int, float)):\n        x = np.array([x])\n    else:\n        x = np.array(x)\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.zeros_like(x)\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    return (y_rounded, grad_rounded, grad2_rounded)"}
{"task_id": 496, "completion_id": 4, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(x, (int, float)):\n        x = np.array([x])\n    else:\n        x = np.array(x)\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.full_like(x, 0.0)\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    return (y_rounded, grad_rounded, grad2_rounded)"}
{"task_id": 496, "completion_id": 5, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x, dtype=float)\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.zeros_like(x)\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    return (y_rounded, grad_rounded, grad2_rounded)"}
{"task_id": 496, "completion_id": 6, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x, dtype=float)\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.zeros_like(x)\n    y_rounded = np.round(y, 4)\n    grad_rounded = np.round(grad, 4)\n    grad2_rounded = np.round(grad2, 4)\n    return (y_rounded.tolist(), grad_rounded.tolist(), grad2_rounded.tolist())"}
{"task_id": 496, "completion_id": 7, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x).flatten()\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.zeros_like(x)\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    return (y_rounded, grad_rounded, grad2_rounded)"}
{"task_id": 496, "completion_id": 8, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.full_like(x, 0.0)\n    y_rounded = np.round(y, 4)\n    grad_rounded = np.round(grad, 4)\n    grad2_rounded = np.round(grad2, 4)\n    return (y_rounded.tolist(), grad_rounded.tolist(), grad2_rounded.tolist())"}
{"task_id": 496, "completion_id": 9, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(x, (int, float)):\n        x = np.array([x])\n    else:\n        x = np.array(x)\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.full_like(x, 0.0)\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    return (y_rounded, grad_rounded, grad2_rounded)"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_features:\n        return -1\n    mean = np.mean(data, axis=0)\n    std_dev = np.std(data, axis=0, ddof=1)\n    std_dev[std_dev == 0] = 1\n    standardized_data = (data - mean) / std_dev\n    cov_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    max_abs_idx = np.argmax(np.abs(eigenvectors), axis=0)\n    signs = np.sign(eigenvectors[max_abs_idx, np.arange(n_features)])\n    eigenvectors *= signs\n    projection = standardized_data @ eigenvectors[:, :k]\n    return np.round(projection, 4).tolist()"}
{"task_id": 499, "completion_id": 1, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_features:\n        return -1\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=1)\n    stds[stds == 0] = 1\n    standardized_data = (data - means) / stds\n    covariance_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    max_abs_indices = np.argmax(np.abs(sorted_eigenvectors), axis=0)\n    signs = np.sign(sorted_eigenvectors[max_abs_indices, range(n_features)])\n    sorted_eigenvectors *= signs\n    principal_components = sorted_eigenvectors[:, :k]\n    projected_data = standardized_data @ principal_components\n    return np.round(projected_data, 4).tolist()"}
{"task_id": 499, "completion_id": 2, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_features:\n        return -1\n    mean = np.mean(data, axis=0)\n    centered_data = data - mean\n    variance = np.var(data, axis=0, ddof=1)\n    std_dev = np.sqrt(variance)\n    std_dev[std_dev == 0] = 1\n    standardized_data = centered_data / std_dev\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    for i in range(n_features):\n        max_abs_idx = np.argmax(np.abs(sorted_eigenvectors[:, i]))\n        if sorted_eigenvectors[max_abs_idx, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projected_data = np.dot(standardized_data, projection_matrix)\n    return np.round(projected_data, 4).tolist()"}
{"task_id": 499, "completion_id": 3, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_features:\n        return -1\n    means = np.mean(data, axis=0)\n    std_devs = np.std(data, axis=0, ddof=1)\n    std_devs[std_devs == 0] = 1\n    standardized_data = (data - means) / std_devs\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_indices]\n    eigenvectors = eigenvectors[:, sorted_indices]\n    for i in range(n_features):\n        max_index = np.argmax(np.abs(eigenvectors[:, i]))\n        if eigenvectors[max_index, i] < 0:\n            eigenvectors[:, i] *= -1\n    principal_components = eigenvectors[:, :k]\n    projected_data = standardized_data @ principal_components\n    return np.round(projected_data, 4).tolist()"}
{"task_id": 499, "completion_id": 4, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_features:\n        return -1\n    means = np.mean(data, axis=0)\n    centered_data = data - means\n    variances = np.var(centered_data, axis=0, ddof=1)\n    std_devs = np.sqrt(variances)\n    std_devs[variances == 0] = 1\n    standardized_data = centered_data / std_devs\n    covariance_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    for i in range(n_features):\n        max_abs_index = np.argmax(np.abs(sorted_eigenvectors[:, i]))\n        if sorted_eigenvectors[max_abs_index, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projected_data = standardized_data @ projection_matrix\n    return np.round(projected_data, 4).tolist()"}
{"task_id": 499, "completion_id": 5, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_features:\n        return -1\n    means = np.mean(data, axis=0)\n    variances = np.var(data, axis=0, ddof=1)\n    std_devs = np.sqrt(variances)\n    std_data = np.copy(data)\n    std_data[:, std_devs != 0] = (std_data[:, std_devs != 0] - means[std_devs != 0]) / std_devs[std_devs != 0]\n    cov_matrix = np.cov(std_data, rowvar=False, bias=False)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    for i in range(sorted_eigenvectors.shape[1]):\n        max_index = np.argmax(np.abs(sorted_eigenvectors[:, i]))\n        if sorted_eigenvectors[max_index, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projected_data = std_data @ projection_matrix\n    return np.round(projected_data, 4).tolist()"}
{"task_id": 499, "completion_id": 6, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_features:\n        return -1\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=1)\n    stds[stds == 0] = 1\n    standardized_data = (data - means) / stds\n    covariance_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    for i in range(sorted_eigenvectors.shape[1]):\n        max_index = np.argmax(np.abs(sorted_eigenvectors[:, i]))\n        if sorted_eigenvectors[max_index, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    principal_components = sorted_eigenvectors[:, :k]\n    projected_data = standardized_data @ principal_components\n    return np.round(projected_data, 4).tolist()"}
{"task_id": 499, "completion_id": 7, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_features:\n        return -1\n    mean = np.mean(data, axis=0)\n    data_centered = data - mean\n    variance = np.var(data_centered, axis=0, ddof=0)\n    std_dev = np.sqrt(variance)\n    std_dev[std_dev == 0] = 1\n    data_standardized = data_centered / std_dev\n    cov_matrix = np.dot(data_standardized.T, data_standardized) / (n_samples - 1)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_indices]\n    eigenvectors = eigenvectors[:, sorted_indices]\n    max_abs_indices = np.argmax(np.abs(eigenvectors), axis=0)\n    signs = np.sign(eigenvectors[max_abs_indices, np.arange(n_features)])\n    eigenvectors *= signs\n    principal_components = eigenvectors[:, :k]\n    projected_data = np.dot(data_standardized, principal_components)\n    return np.round(projected_data, 4).tolist()"}
{"task_id": 499, "completion_id": 8, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_features:\n        return -1\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=1)\n    stds[stds == 0] = 1\n    standardized_data = (data - means) / stds\n    covariance_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    max_indices = np.argmax(np.abs(sorted_eigenvectors), axis=0)\n    signs = np.sign(sorted_eigenvectors[max_indices, range(n_features)])\n    sorted_eigenvectors *= signs\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projected_data = standardized_data @ projection_matrix\n    return np.round(projected_data, 4).tolist()"}
{"task_id": 499, "completion_id": 9, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if not 1 <= k <= n_features:\n        return -1\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=1)\n    stds[stds == 0] = 1\n    standardized_data = (data - means) / stds\n    covariance_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    max_abs_indices = np.argmax(np.abs(sorted_eigenvectors), axis=0)\n    signs = np.sign(sorted_eigenvectors[max_abs_indices, range(n_features)])\n    sorted_eigenvectors *= signs\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projected_data = standardized_data @ projection_matrix\n    return np.round(projected_data, 4).tolist()"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n\n    def fit_decision_stump(X, residuals):\n        (n_samples, n_features) = (len(X), len(X[0]))\n        best_feature = None\n        best_threshold = None\n        best_left_value = None\n        best_right_value = None\n        min_error = np.inf\n        for feature_idx in range(n_features):\n            thresholds = sorted(set([sample[feature_idx] for sample in X]))\n            for threshold in thresholds:\n                left_values = [residuals[i] for i in range(n_samples) if X[i][feature_idx] <= threshold]\n                right_values = [residuals[i] for i in range(n_samples) if X[i][feature_idx] > threshold]\n                left_value = np.mean(left_values) if left_values else 0.0\n                right_value = np.mean(right_values) if right_values else 0.0\n                error = sum(((residuals[i] - (left_value if X[i][feature_idx] <= threshold else right_value)) ** 2 for i in range(n_samples)))\n                if error < min_error:\n                    min_error = error\n                    best_feature = feature_idx\n                    best_threshold = threshold\n                    best_left_value = left_value\n                    best_right_value = right_value\n\n        def stump(x):\n            return best_left_value if x[best_feature] <= best_threshold else best_right_value\n        return stump\n    (n_samples, n_features) = (len(X_train), len(X_train[0]))\n    F = np.full(n_samples, np.mean(y_train))\n    ensemble = []\n    for _ in range(n_estimators):\n        residuals = np.array(y_train) - F\n        stump = fit_decision_stump(X_train, residuals)\n        predictions = np.array([stump(x) for x in X_train])\n        F += learning_rate * predictions\n        ensemble.append(stump)\n    F_test = np.full(len(X_test), np.mean(y_train))\n    for stump in ensemble:\n        F_test += learning_rate * np.array([stump(x) for x in X_test])\n    return [1 if score >= 0.5 else 0 for score in F_test]"}
{"task_id": 500, "completion_id": 1, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    F_train = np.mean(y_train)\n    F_test = np.full(X_test.shape[0], F_train)\n    for m in range(n_estimators):\n        residuals = y_train - F_train\n        (best_feature, best_threshold, best_left_value, best_right_value, min_error) = (float('inf'), float('inf'), float('inf'), float('inf'), float('inf'))\n        for feature in range(X_train.shape[1]):\n            sorted_indices = np.argsort(X_train[:, feature])\n            sorted_residuals = residuals[sorted_indices]\n            sorted_feature_values = X_train[sorted_indices, feature]\n            for i in range(1, sorted_indices.shape[0]):\n                threshold = (sorted_feature_values[i] + sorted_feature_values[i - 1]) / 2.0\n                left_value = np.mean(sorted_residuals[:i])\n                right_value = np.mean(sorted_residuals[i:])\n                error = np.sum((sorted_residuals[:i] - left_value) ** 2) + np.sum((sorted_residuals[i:] - right_value) ** 2)\n                if error < min_error:\n                    (best_feature, best_threshold, best_left_value, best_right_value, min_error) = (feature, threshold, left_value, right_value, error)\n        stump_train_predictions = np.where(X_train[:, best_feature] <= best_threshold, best_left_value, best_right_value)\n        stump_test_predictions = np.where(X_test[:, best_feature] <= best_threshold, best_left_value, best_right_value)\n        F_train += learning_rate * stump_train_predictions\n        F_test += learning_rate * stump_test_predictions\n    return [1 if score >= 0.5 else 0 for score in F_test]"}
{"task_id": 500, "completion_id": 2, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n\n    def decision_stump_fit(residuals, X):\n        \"\"\"Fit a decision stump to the residuals.\"\"\"\n        (best_feature, best_threshold, best_error) = (0, 0, np.inf)\n        (best_left_val, best_right_val) = (0, 0)\n        (n_samples, n_features) = (len(X), len(X[0]))\n        for feature in range(n_features):\n            indices = np.argsort([x[feature] for x in X])\n            sorted_X = [X[i] for i in indices]\n            sorted_residuals = [residuals[i] for i in indices]\n            for i in range(1, n_samples):\n                threshold = (sorted_X[i - 1][feature] + sorted_X[i][feature]) / 2.0\n                left_residuals = sorted_residuals[:i]\n                right_residuals = sorted_residuals[i:]\n                left_val = np.mean(left_residuals) if left_residuals else 0\n                right_val = np.mean(right_residuals) if right_residuals else 0\n                error = np.sum((np.array(left_residuals) - left_val) ** 2) + np.sum((np.array(right_residuals) - right_val) ** 2)\n                if error < best_error:\n                    best_error = error\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_left_val = left_val\n                    best_right_val = right_val\n        return (best_feature, best_threshold, best_left_val, best_right_val)\n\n    def decision_stump_predict(X, feature, threshold, left_val, right_val):\n        \"\"\"Predict using a decision stump.\"\"\"\n        predictions = []\n        for x in X:\n            if x[feature] <= threshold:\n                predictions.append(left_val)\n            else:\n                predictions.append(right_val)\n        return np.array(predictions)\n    c = np.mean(y_train)\n    F = [c] * len(y_train)\n    F_test = [c] * len(X_test)\n    for _ in range(n_estimators):\n        residuals = np.array(y_train) - np.array(F)\n        (best_feature, best_threshold, best_left_val, best_right_val) = decision_stump_fit(residuals, X_train)\n        h_m_train = decision_stump_predict(X_train, best_feature, best_threshold, best_left_val, best_right_val)\n        h_m_test = decision_stump_predict(X_test, best_feature, best_threshold, best_left_val, best_right_val)\n        F = [f + learning_rate * h for (f, h) in zip(F, h_m_train)]\n        F_test = [f + learning_rate * h for (f, h) in zip(F_test, h_m_test)]\n    predictions = [1 if score >= 0.5 else 0 for score in F_test]\n    return predictions"}
{"task_id": 500, "completion_id": 3, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    c = np.mean(y_train)\n    F = np.full_like(y_train, c, dtype=float)\n\n    def fit_stump(X, residuals):\n        (n_samples, n_features) = X.shape\n        (best_feature, best_threshold) = (None, None)\n        (best_left_value, best_right_value) = (None, None)\n        best_error = float('inf')\n        for feature in range(n_features):\n            unique_values = np.unique(X[:, feature])\n            for value in unique_values:\n                left_indices = X[:, feature] <= value\n                right_indices = X[:, feature] > value\n                left_value = np.mean(residuals[left_indices])\n                right_value = np.mean(residuals[right_indices])\n                left_error = np.sum(residuals[left_indices] - left_value) ** 2\n                right_error = np.sum(residuals[right_indices] - right_value) ** 2\n                error = left_error + right_error\n                if error < best_error:\n                    best_error = error\n                    best_feature = feature\n                    best_threshold = value\n                    best_left_value = left_value\n                    best_right_value = right_value\n\n        def stump(x):\n            if x[best_feature] <= best_threshold:\n                return best_left_value\n            else:\n                return best_right_value\n        return stump\n    stumps = []\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        stump = fit_stump(X_train, residuals)\n        stumps.append(stump)\n        F += learning_rate * np.array([stump(x) for x in X_train])\n    F_test = np.full((X_test.shape[0],), c)\n    for stump in stumps:\n        F_test += learning_rate * np.array([stump(x) for x in X_test])\n    predictions = [1 if score >= 0.5 else 0 for score in F_test]\n    return predictions"}
{"task_id": 500, "completion_id": 4, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    F = np.full_like(y_train, fill_value=y_train.mean())\n\n    def fit_decision_stump(X, residuals):\n        best_feature = None\n        best_threshold = None\n        best_left_value = None\n        best_right_value = None\n        best_error = float('inf')\n        for feature in range(X.shape[1]):\n            unique_values = np.unique(X[:, feature])\n            for threshold in unique_values:\n                left_indices = X[:, feature] <= threshold\n                right_indices = X[:, feature] > threshold\n                left_value = np.mean(residuals[left_indices]) if np.any(left_indices) else 0\n                right_value = np.mean(residuals[right_indices]) if np.any(right_indices) else 0\n                predictions = np.zeros_like(residuals)\n                predictions[left_indices] = left_value\n                predictions[right_indices] = right_value\n                error = np.sum((residuals - predictions) ** 2)\n                if error < best_error:\n                    best_error = error\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_left_value = left_value\n                    best_right_value = right_value\n\n        def stump(x):\n            if x[best_feature] <= best_threshold:\n                return best_left_value\n            else:\n                return best_right_value\n        return stump\n    stumps = []\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        stump = fit_decision_stump(X_train, residuals)\n        stumps.append(stump)\n        for (i, x) in enumerate(X_train):\n            F[i] += learning_rate * stump(x)\n    F_test = np.full(len(X_test), fill_value=y_train.mean())\n    for stump in stumps:\n        for (i, x) in enumerate(X_test):\n            F_test[i] += learning_rate * stump(x)\n    predictions = [1 if score >= 0.5 else 0 for score in F_test]\n    return predictions"}
{"task_id": 500, "completion_id": 5, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    F = np.full_like(y_train, y_train.mean(), dtype=float)\n    stumps = []\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        (best_feature, best_threshold, best_value_left, best_value_right, min_error) = (None, None, None, None, float('inf'))\n        for feature_idx in range(X_train.shape[1]):\n            feature_values = X_train[:, feature_idx]\n            unique_values = np.unique(feature_values)\n            for threshold in unique_values:\n                left_mask = feature_values <= threshold\n                right_mask = feature_values > threshold\n                value_left = residuals[left_mask].mean()\n                value_right = residuals[right_mask].mean()\n                error = np.sum((residuals[left_mask] - value_left) ** 2) + np.sum((residuals[right_mask] - value_right) ** 2)\n                if error < min_error:\n                    min_error = error\n                    best_feature = feature_idx\n                    best_threshold = threshold\n                    best_value_left = value_left\n                    best_value_right = value_right\n\n        def stump(x):\n            if x[best_feature] <= best_threshold:\n                return best_value_left\n            else:\n                return best_value_right\n        stumps.append(stump)\n        F += learning_rate * np.array([stump(x) for x in X_train])\n    F_test = np.full(len(X_test), y_train.mean(), dtype=float)\n    for stump in stumps:\n        F_test += learning_rate * np.array([stump(x) for x in X_test])\n    predictions = [1 if score >= 0.5 else 0 for score in F_test]\n    return predictions"}
{"task_id": 500, "completion_id": 6, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    F = np.mean(y_train) * np.ones(y_train.shape[0])\n\n    def fit_stump(residuals, X):\n        best_feature = None\n        best_threshold = None\n        best_left_val = None\n        best_right_val = None\n        best_error = float('inf')\n        for feature in range(X.shape[1]):\n            unique_values = np.unique(X[:, feature])\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2.0\n            for threshold in thresholds:\n                left_mask = X[:, feature] <= threshold\n                right_mask = X[:, feature] > threshold\n                left_val = np.mean(residuals[left_mask])\n                right_val = np.mean(residuals[right_mask])\n                errors = np.zeros_like(residuals)\n                errors[left_mask] = (residuals[left_mask] - left_val) ** 2\n                errors[right_mask] = (residuals[right_mask] - right_val) ** 2\n                error = np.mean(errors)\n                if error < best_error:\n                    best_error = error\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_left_val = left_val\n                    best_right_val = right_val\n        return (best_feature, best_threshold, best_left_val, best_right_val)\n    stumps = []\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        (best_feature, best_threshold, best_left_val, best_right_val) = fit_stump(residuals, X_train)\n        stumps.append((best_feature, best_threshold, best_left_val, best_right_val))\n        predictions = np.ones(X_train.shape[0])\n        predictions[X_train[:, best_feature] <= best_threshold] = 0\n        F += learning_rate * (predictions * best_left_val + (1 - predictions) * best_right_val)\n    test_predictions = np.mean(y_train) * np.ones(X_test.shape[0])\n    for (feature, threshold, left_val, right_val) in stumps:\n        predictions = np.ones(X_test.shape[0])\n        predictions[X_test[:, feature] <= threshold] = 0\n        test_predictions += learning_rate * (predictions * left_val + (1 - predictions) * right_val)\n    test_labels = (test_predictions >= 0.5).astype(int).tolist()\n    return test_labels"}
{"task_id": 500, "completion_id": 7, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    F = np.full((X_train.shape[0],), y_train.mean())\n    F_test = np.full((X_test.shape[0],), y_train.mean())\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        (best_feature, best_threshold, best_value_left, best_value_right) = (None, None, None, None)\n        best_mse = float('inf')\n        for feature in range(X_train.shape[1]):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                left_mask = X_train[:, feature] <= threshold\n                right_mask = X_train[:, feature] > threshold\n                value_left = np.mean(residuals[left_mask])\n                value_right = np.mean(residuals[right_mask])\n                predictions = np.full_like(residuals, value_right)\n                predictions[left_mask] = value_left\n                mse = np.mean((residuals - predictions) ** 2)\n                if mse < best_mse:\n                    best_mse = mse\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_value_left = value_left\n                    best_value_right = value_right\n        stump_prediction_train = np.where(X_train[:, best_feature] <= best_threshold, best_value_left, best_value_right)\n        stump_prediction_test = np.where(X_test[:, best_feature] <= best_threshold, best_value_left, best_value_right)\n        F += learning_rate * stump_prediction_train\n        F_test += learning_rate * stump_prediction_test\n    predictions = (F_test >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 500, "completion_id": 8, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    (n_samples, n_features) = X_train.shape\n    F = np.full(n_samples, np.mean(y_train))\n\n    def fit_decision_stump(X, y):\n        best_feature = None\n        best_threshold = None\n        best_left_val = None\n        best_right_val = None\n        best_mse = float('inf')\n        for feature in range(n_features):\n            feature_values = X[:, feature]\n            unique_values = np.unique(feature_values)\n            for threshold in unique_values:\n                left_mask = feature_values <= threshold\n                right_mask = feature_values > threshold\n                left_val = np.mean(y[left_mask]) if np.any(left_mask) else 0\n                right_val = np.mean(y[right_mask]) if np.any(right_mask) else 0\n                y_pred = np.where(left_mask, left_val, right_val)\n                mse = np.mean((y - y_pred) ** 2)\n                if mse < best_mse:\n                    best_mse = mse\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_left_val = left_val\n                    best_right_val = right_val\n\n        def stump(x):\n            return best_left_val if x[best_feature] <= best_threshold else best_right_val\n        return stump\n    weak_learners = []\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        stump = fit_decision_stump(X_train, residuals)\n        weak_learners.append(stump)\n        for (i, x) in enumerate(X_train):\n            F[i] += learning_rate * stump(x)\n    predictions = []\n    for x in X_test:\n        F_x = np.mean(y_train)\n        for stump in weak_learners:\n            F_x += learning_rate * stump(x)\n        predictions.append(1 if F_x >= 0.5 else 0)\n    return predictions"}
{"task_id": 500, "completion_id": 9, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    F = np.full(len(y_train), np.mean(y_train))\n    stumps = []\n    stump_thresholds = []\n    stump_features = []\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        (best_feature, best_threshold, best_left_pred, best_right_pred, best_err) = (None, None, None, None, float('inf'))\n        for feature in range(X_train.shape[1]):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                left_mask = X_train[:, feature] <= threshold\n                right_mask = X_train[:, feature] > threshold\n                left_pred = np.mean(residuals[left_mask])\n                right_pred = np.mean(residuals[right_mask])\n                err = np.sum((residuals[left_mask] - left_pred) ** 2) + np.sum((residuals[right_mask] - right_pred) ** 2)\n                if err < best_err:\n                    best_err = err\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_left_pred = left_pred\n                    best_right_pred = right_pred\n        stumps.append((best_left_pred, best_right_pred))\n        stump_features.append(best_feature)\n        stump_thresholds.append(best_threshold)\n        pred = np.zeros_like(F)\n        pred[X_train[:, best_feature] <= best_threshold] = best_left_pred\n        pred[X_train[:, best_feature] > best_threshold] = best_right_pred\n        F += learning_rate * pred\n    F_test = np.full(len(X_test), np.mean(y_train))\n    for ((left_pred, right_pred), feature, threshold) in zip(stumps, stump_features, stump_thresholds):\n        pred_test = np.zeros_like(F_test)\n        pred_test[X_test[:, feature] <= threshold] = left_pred\n        pred_test[X_test[:, feature] > threshold] = right_pred\n        F_test += learning_rate * pred_test\n    predictions = (F_test >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 505, "completion_id": 0, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n    (m, n_v) = X.shape\n    n_h = hbias.shape[0]\n    h0_prob = 1 / (1 + np.exp(-(X @ W + hbias)))\n    v_k = X\n    for _ in range(k):\n        h_k_prob = 1 / (1 + np.exp(-(v_k @ W + hbias)))\n        v_k_prob = 1 / (1 + np.exp(-(h_k_prob @ W.T + vbias)))\n    h_k_prob = 1 / (1 + np.exp(-(v_k_prob @ W + hbias)))\n    pos_grad = X.T @ h0_prob\n    neg_grad = v_k_prob.T @ h_k_prob\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    return np.round(W_new, 4).tolist()"}
{"task_id": 505, "completion_id": 1, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n    h0_prob = sigmoid(X @ W + hbias)\n    v = X\n    for _ in range(k):\n        h_prob = sigmoid(v @ W + hbias)\n        h = h_prob\n        v_prob = sigmoid(h @ W.T + vbias)\n        v = v_prob\n    h_k_prob = h_prob\n    v_k_prob = v_prob\n    pos_grad = X.T @ h0_prob\n    neg_grad = v_k_prob.T @ h_k_prob\n    W_new = W + learning_rate * (pos_grad - neg_grad) / X.shape[0]\n    return np.round(W_new, 4).tolist()\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))"}
{"task_id": 505, "completion_id": 2, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n    (m, n_v) = X.shape\n    n_h = hbias.shape[0]\n    h0_prob = sigmoid(X.dot(W) + hbias)\n    pos_grad = X.T.dot(h0_prob)\n    v = X.copy()\n    for _ in range(k):\n        h_prob = sigmoid(v.dot(W) + hbias)\n        v_prob = sigmoid(h_prob.dot(W.T) + vbias)\n        h_prob = sigmoid(v_prob.dot(W) + hbias)\n    v_k_prob = v_prob\n    h_k_prob = h_prob\n    neg_grad = v_k_prob.T.dot(h_k_prob)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    return np.round(W_new, 4).tolist()\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))"}
{"task_id": 505, "completion_id": 3, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n    (m, n_v) = X.shape\n    n_h = hbias.shape[0]\n    h0_prob = 1 / (1 + np.exp(-(X @ W + hbias)))\n    pos_grad = X.T @ h0_prob\n    v_k_prob = X.copy()\n    for _ in range(k):\n        h_k_prob = 1 / (1 + np.exp(-(v_k_prob @ W + hbias)))\n        v_k_prob = 1 / (1 + np.exp(-(h_k_prob @ W.T + vbias)))\n    neg_grad = v_k_prob.T @ h_k_prob\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    return np.round(W_new, 4).tolist()"}
{"task_id": 505, "completion_id": 4, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n    m = X.shape[0]\n    h0_prob = 1 / (1 + np.exp(-(X @ W + hbias)))\n    pos_grad = X.T @ h0_prob\n    v_k = X.copy()\n    for _ in range(k):\n        h_k_prob = 1 / (1 + np.exp(-(v_k @ W + hbias)))\n        v_k_prob = 1 / (1 + np.exp(-(h_k_prob @ W.T + vbias)))\n        v_k = v_k_prob\n    h_k_prob = 1 / (1 + np.exp(-(v_k @ W + hbias)))\n    neg_grad = v_k.T @ h_k_prob\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    return np.round(W_new, 4).tolist()"}
{"task_id": 505, "completion_id": 5, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n    (m, n_v) = X.shape\n    n_h = hbias.shape[0]\n    h0_prob = 1 / (1 + np.exp(-(X @ W + hbias)))\n    v = X\n    for step in range(k):\n        h_prob = 1 / (1 + np.exp(-(v @ W + hbias)))\n        v_prob = 1 / (1 + np.exp(-(h_prob @ W.T + vbias)))\n        v = v_prob\n        h_prob = 1 / (1 + np.exp(-(v @ W + hbias)))\n    v_k_prob = v_prob\n    h_k_prob = h_prob\n    pos_grad = X.T @ h0_prob\n    neg_grad = v_k_prob.T @ h_k_prob\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    return np.round(W_new, 4).tolist()"}
{"task_id": 505, "completion_id": 6, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n    h0_prob = 1 / (1 + np.exp(-(X @ W + hbias)))\n    pos_grad = X.T @ h0_prob\n    v_k = X.copy()\n    for _ in range(k):\n        h_k_prob = 1 / (1 + np.exp(-(v_k @ W + hbias)))\n        v_k_prob = 1 / (1 + np.exp(-(h_k_prob @ W.T + vbias)))\n    h_k_prob = 1 / (1 + np.exp(-(v_k_prob @ W + hbias)))\n    neg_grad = v_k_prob.T @ h_k_prob\n    W_new = W + learning_rate * (pos_grad - neg_grad) / X.shape[0]\n    return W_new.round(4).tolist()"}
{"task_id": 505, "completion_id": 7, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n    (m, n_v) = X.shape\n    n_h = hbias.shape[0]\n    h0_prob = 1 / (1 + np.exp(-(X @ W + hbias)))\n    v = X.copy()\n    for _ in range(k):\n        h_prob = 1 / (1 + np.exp(-(v @ W + hbias)))\n        v_prob = 1 / (1 + np.exp(-(h_prob @ W.T + vbias)))\n        v = v_prob\n    h_k_prob = 1 / (1 + np.exp(-(v @ W + hbias)))\n    pos_grad = X.T @ h0_prob\n    neg_grad = v.T @ h_k_prob\n    W += learning_rate * (pos_grad - neg_grad) / m\n    return np.round(W, 4).tolist()"}
{"task_id": 505, "completion_id": 8, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n    m = X.shape[0]\n    h0_prob = 1 / (1 + np.exp(-(X @ W + hbias)))\n    v = X\n    for _ in range(k):\n        h_prob = 1 / (1 + np.exp(-(v @ W + hbias)))\n        h = h_prob\n        v_prob = 1 / (1 + np.exp(-(h @ W.T + vbias)))\n        v = v_prob\n    h_k_prob = h_prob\n    v_k_prob = v_prob\n    pos_grad = X.T @ h0_prob\n    neg_grad = v_k_prob.T @ h_k_prob\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    return np.round(W_new, 4).tolist()"}
{"task_id": 505, "completion_id": 9, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n    (m, n_v) = X.shape\n    (_, n_h) = W.shape\n    h0_prob = 1 / (1 + np.exp(-(X @ W + hbias)))\n    pos_grad = X.T @ h0_prob\n    v_k_prob = X.copy()\n    for _ in range(k):\n        h_k_prob = 1 / (1 + np.exp(-(v_k_prob @ W + hbias)))\n        v_k_prob = 1 / (1 + np.exp(-(h_k_prob @ W.T + vbias)))\n    neg_grad = v_k_prob.T @ h_k_prob\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    return np.round(W_new, 4).tolist()"}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.asarray(x)\n    y = np.asarray(y)\n    if x.shape != y.shape:\n        return -1\n    distance = np.max(np.abs(x - y))\n    return round(distance, 4)\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 1, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if x.shape != y.shape:\n        return -1\n    distance = np.max(np.abs(x - y))\n    return round(float(distance), 4)\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 2, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.asarray(x)\n    y = np.asarray(y)\n    if x.shape != y.shape:\n        return -1\n    distance = np.max(np.abs(x - y))\n    return round(distance, 4)\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 3, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.asarray(x)\n    y = np.asarray(y)\n    if x.shape != y.shape:\n        return -1\n    distance = np.max(np.abs(x - y))\n    return round(distance, 4)\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 4, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.asarray(x)\n    y = np.asarray(y)\n    if x.shape != y.shape:\n        return -1\n    distance = np.max(np.abs(x - y))\n    return round(distance, 4)\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 5, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if x.shape != y.shape:\n        return -1\n    distance = np.max(np.abs(x - y))\n    return round(distance, 4)\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 6, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if len(x) != len(y):\n        return -1\n    abs_diff = np.abs(x - y)\n    chebyshev_distance = np.max(abs_diff)\n    return round(float(chebyshev_distance), 4)\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 7, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x_array = np.array(x)\n    y_array = np.array(y)\n    if x_array.shape != y_array.shape:\n        return -1\n    distance = np.max(np.abs(x_array - y_array))\n    return round(distance, 4)\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 8, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(y, list):\n        y = np.array(y)\n    if len(x) != len(y):\n        return -1\n    absolute_differences = np.abs(x - y)\n    chebyshev_distance = np.max(absolute_differences)\n    return float(round(chebyshev_distance, 4))\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 509, "completion_id": 9, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if x.shape != y.shape:\n        return -1\n    distance = np.max(np.abs(x - y))\n    return round(distance, 4)\nx = [1, 2, 3]\ny = [2, 4, 6]"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    reconstruction_loss = -np.sum(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var))\n    total_loss = reconstruction_loss + kl_divergence\n    average_loss = total_loss / y.shape[0]\n    return round(average_loss, 6)"}
{"task_id": 510, "completion_id": 1, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    reconstruction_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    total_loss = reconstruction_loss + kl_divergence\n    batch_size = y.shape[0]\n    average_loss = total_loss / batch_size\n    return round(average_loss, 6)"}
{"task_id": 510, "completion_id": 2, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    reconstruction_loss = -np.mean(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    kl_divergence = 0.5 * np.mean(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    total_loss = reconstruction_loss - kl_divergence\n    return round(total_loss, 6)"}
{"task_id": 510, "completion_id": 3, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    reconstruction_loss = -np.mean(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    kl_divergence = -0.5 * np.mean(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    total_loss = reconstruction_loss + kl_divergence\n    return round(total_loss, 6)"}
{"task_id": 510, "completion_id": 4, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    reconstruction_loss = -np.mean(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    kl_divergence = -0.5 * np.mean(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    total_loss = reconstruction_loss + kl_divergence\n    return round(total_loss, 6)"}
{"task_id": 510, "completion_id": 5, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    reconstruction_loss = -np.sum(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    total_loss = reconstruction_loss + kl_divergence\n    average_loss = total_loss / y.shape[0]\n    return round(average_loss, 6)"}
{"task_id": 510, "completion_id": 6, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    reconstruction_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    total_loss = reconstruction_loss + kl_divergence\n    return round(total_loss / y.shape[0], 6)"}
{"task_id": 510, "completion_id": 7, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    reconstruction_loss = -np.mean(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    kl_divergence = -0.5 * np.mean(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    total_loss = reconstruction_loss + kl_divergence\n    return round(total_loss, 6)"}
{"task_id": 510, "completion_id": 8, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    reconstruction_loss = -np.mean(np.sum(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped), axis=1))\n    kl_divergence = -0.5 * np.mean(np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1))\n    total_loss = reconstruction_loss + kl_divergence\n    return round(total_loss, 6)"}
{"task_id": 510, "completion_id": 9, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    reconstruction_loss = -np.sum(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    total_loss = reconstruction_loss + kl_divergence\n    return round(total_loss / y.shape[0], 6)"}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X_np = np.array(X, dtype=float)\n    w_np = np.array(w, dtype=float)\n    V_np = np.array(V, dtype=float)\n    n_samples = X_np.shape[0]\n    predictions = np.full(n_samples, w0)\n    predictions += X_np.dot(w_np)\n    pairwise_sum = np.dot(X_np, V_np) ** 2\n    pairwise_square_sum = np.dot(X_np ** 2, V_np ** 2)\n    predictions += 0.5 * np.sum(pairwise_sum - pairwise_square_sum, axis=1)\n    predictions = np.round(predictions, 4)\n    return predictions.tolist()"}
{"task_id": 513, "completion_id": 1, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    n_samples = X.shape[0]\n    predictions = np.full(n_samples, w0)\n    predictions += X @ w\n    sum_VX = X @ V.T\n    sum_VX_squared = sum_VX ** 2\n    sum_V_squared_X_squared = V ** 2 @ X.T ** 2\n    interaction_part = (sum_VX_squared - sum_V_squared_X_squared).sum(axis=1) / 2\n    predictions += interaction_part\n    return predictions.round(4).tolist()"}
{"task_id": 513, "completion_id": 2, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    n_samples = X.shape[0]\n    predictions = np.zeros(n_samples)\n    for i in range(n_samples):\n        linear_part = np.dot(w, X[i])\n        interaction_part = 0.0\n        for f in range(V.shape[1]):\n            v_f = V[:, f]\n            x_vf = np.dot(X[i], v_f)\n            x_vf_squared = np.dot(X[i] ** 2, v_f ** 2)\n            interaction_part += x_vf ** 2 - x_vf_squared\n        predictions[i] = w0 + linear_part + 0.5 * interaction_part\n    return np.round(predictions, 4).tolist()"}
{"task_id": 513, "completion_id": 3, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    predictions = np.full(X.shape[0], w0)\n    predictions += X @ w\n    sum_Vx = X @ V.T\n    sum_Vx_squared = sum_Vx ** 2\n    Vx_squared = X ** 2 @ (V ** 2).T\n    interaction_term = 0.5 * (sum_Vx_squared - Vx_squared)\n    interaction_component = np.sum(interaction_term, axis=1)\n    predictions += interaction_component\n    predictions = np.round(predictions, 4)\n    return predictions.tolist()"}
{"task_id": 513, "completion_id": 4, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    (n_samples, n_features) = X.shape\n    k = V.shape[1]\n    linear_part = np.dot(X, w)\n    sum_vx = np.dot(X, V)\n    sum_vx_squared = np.sum(sum_vx ** 2, axis=1)\n    vx_squared_sum = np.sum(X ** 2 * V ** 2, axis=1)\n    interaction_part = 0.5 * (sum_vx_squared - vx_squared_sum)\n    predictions = w0 + linear_part + interaction_part\n    predictions = np.round(predictions, 4)\n    return predictions.tolist()"}
{"task_id": 513, "completion_id": 5, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    w = np.array(w, dtype=float)\n    V = np.array(V, dtype=float)\n    n_samples = X.shape[0]\n    linear_term = np.dot(X, w)\n    V_interaction = np.dot(X, V)\n    squared_sum = np.square(V_interaction).sum(axis=1)\n    sum_squared = np.square(np.dot(X, V ** 2)).sum(axis=1)\n    interaction_term = 0.5 * (squared_sum - sum_squared)\n    predictions = w0 + linear_term + interaction_term\n    predictions_rounded = np.round(predictions, 4)\n    return predictions_rounded.tolist()"}
{"task_id": 513, "completion_id": 6, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    (n_samples, n_features) = X.shape\n    k = V.shape[1]\n    linear_part = X @ w\n    sum_of_squares = np.sum((X @ V) ** 2, axis=1)\n    square_of_sums = np.sum(X * V ** 2, axis=1)\n    interaction_part = 0.5 * (sum_of_squares - square_of_sums)\n    predictions = w0 + linear_part + interaction_part\n    return np.round(predictions, 4).tolist()"}
{"task_id": 513, "completion_id": 7, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    (n_samples, n_features) = X.shape\n    k = V.shape[1]\n    predictions = []\n    for i in range(n_samples):\n        linear_part = w0 + np.dot(w, X[i])\n        interaction_part = 0\n        for f in range(k):\n            sum_Vx = np.dot(V[:, f], X[i])\n            sum_Vx_squared = np.sum(V[:, f] * X[i] ** 2)\n            interaction_part += sum_Vx ** 2 - sum_Vx_squared\n        interaction_part *= 0.5\n        prediction = linear_part + interaction_part\n        predictions.append(prediction)\n    return [round(pred, 4) for pred in predictions]"}
{"task_id": 513, "completion_id": 8, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    n_samples = X.shape[0]\n    linear_part = np.dot(X, w)\n    V_dot_X = np.dot(X, V.T)\n    V_dot_X_squared = V_dot_X ** 2\n    V_squared_dot_X_squared = np.dot(X ** 2, V ** 2)\n    interaction_part = 0.5 * np.sum(V_dot_X_squared - V_squared_dot_X_squared, axis=1)\n    predictions = w0 + linear_part + interaction_part\n    predictions = np.round(predictions, 4)\n    return predictions.tolist()"}
{"task_id": 513, "completion_id": 9, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    w = np.array(w, dtype=float)\n    V = np.array(V, dtype=float)\n    n_samples = X.shape[0]\n    predictions = np.full(n_samples, w0)\n    predictions += X.dot(w)\n    interaction_sum_squared = X.dot(V) ** 2\n    interaction_squared_sum = (X ** 2).dot(V ** 2)\n    predictions += 0.5 * np.sum(interaction_sum_squared - interaction_squared_sum, axis=1)\n    predictions = np.round(predictions, 4)\n    return predictions.tolist()"}
{"task_id": 517, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    is_scalar = isinstance(z, (int, float))\n    z = np.array(z)\n    positive = z >= 0\n    negative = z < 0\n    sigmoid_positive = 1 / (1 + np.exp(-z[positive]))\n    sigmoid_negative = np.exp(z[negative]) / (1 + np.exp(z[negative]))\n    sigmoid_result = np.empty_like(z, dtype=float)\n    sigmoid_result[positive] = sigmoid_positive\n    sigmoid_result[negative] = sigmoid_negative\n    sigmoid_result = np.round(sigmoid_result, 4)\n    if is_scalar:\n        return float(sigmoid_result)\n    else:\n        return sigmoid_result.tolist()"}
{"task_id": 517, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    is_scalar = isinstance(z, (int, float))\n    z_array = np.array(z, dtype=float)\n    sigmoid_array = np.where(z_array >= 0, 1 / (1 + np.exp(-z_array)), np.exp(z_array) / (1 + np.exp(z_array)))\n    sigmoid_array = np.round(sigmoid_array, 4)\n    if is_scalar:\n        return float(sigmoid_array)\n    else:\n        return sigmoid_array.tolist()"}
{"task_id": 517, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z_array = np.array(z, dtype=float)\n    sigmoid_values = np.where(z_array >= 0, 1 / (1 + np.exp(-z_array)), np.exp(z_array) / (1 + np.exp(z_array)))\n    rounded_sigmoid_values = np.round(sigmoid_values, 4)\n    if isinstance(z, (int, float)):\n        return float(rounded_sigmoid_values)\n    else:\n        return rounded_sigmoid_values.tolist()"}
{"task_id": 517, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        z = np.array([z])\n    elif isinstance(z, (list, tuple)):\n        z = np.array(z)\n    sigmoid_values = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    sigmoid_values = np.round(sigmoid_values, 4)\n    if isinstance(z, np.ndarray) and z.size == 1:\n        return float(sigmoid_values)\n    else:\n        return sigmoid_values.tolist()"}
{"task_id": 517, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        z = np.array([z], dtype=float)\n    elif isinstance(z, (list, tuple)):\n        z = np.array(z, dtype=float)\n    else:\n        z = np.array(z, dtype=float)\n    sigmoid_values = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    sigmoid_values = np.round(sigmoid_values, 4)\n    if sigmoid_values.size == 1:\n        return float(sigmoid_values[0])\n    return sigmoid_values.tolist()"}
{"task_id": 517, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n\n    def stable_sigmoid(x):\n        if x >= 0:\n            return 1 / (1 + np.exp(-x))\n        else:\n            return np.exp(x) / (1 + np.exp(x))\n    if isinstance(z, (list, tuple)):\n        z = np.array(z)\n    if isinstance(z, np.ndarray):\n        sigmoid_values = np.array([stable_sigmoid(xi) for xi in z.flat]).reshape(z.shape)\n    else:\n        sigmoid_values = stable_sigmoid(z)\n    if isinstance(sigmoid_values, np.ndarray):\n        rounded_sigmoid_values = np.round(sigmoid_values, 4)\n        return rounded_sigmoid_values.tolist()\n    else:\n        return round(sigmoid_values, 4)"}
{"task_id": 517, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    is_scalar = isinstance(z, (int, float))\n    z = np.array(z)\n    sigmoid_values = np.where(z > 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    sigmoid_values = np.round(sigmoid_values, decimals=4)\n    if is_scalar:\n        return float(sigmoid_values)\n    else:\n        return sigmoid_values.tolist()"}
{"task_id": 517, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        z = np.array([z])\n    elif isinstance(z, (list, tuple)):\n        z = np.array(z)\n    sigmoid_values = np.where(z > 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    sigmoid_values = np.round(sigmoid_values, 4)\n    if isinstance(z, (np.ndarray, list, tuple)):\n        return sigmoid_values.tolist()\n    else:\n        return float(sigmoid_values[0])"}
{"task_id": 517, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        z_array = np.array([z], dtype=float)\n    else:\n        z_array = np.array(z, dtype=float)\n    stable_result = np.where(z_array >= 0, 1 / (1 + np.exp(-z_array)), np.exp(z_array) / (1 + np.exp(z_array)))\n    rounded_result = np.round(stable_result, 4)\n    if isinstance(z, (int, float)):\n        return rounded_result[0]\n    else:\n        return rounded_result.tolist()"}
{"task_id": 517, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        scalar_input = True\n        z = np.array([z])\n    else:\n        scalar_input = False\n        z = np.array(z)\n    positive_mask = z >= 0\n    negative_mask = z < 0\n    sigmoid_z = np.empty_like(z, dtype=float)\n    sigmoid_z[positive_mask] = 1 / (1 + np.exp(-z[positive_mask]))\n    sigmoid_z[negative_mask] = np.exp(z[negative_mask]) / (1 + np.exp(z[negative_mask]))\n    sigmoid_z = np.round(sigmoid_z, 4)\n    if scalar_input:\n        return float(sigmoid_z[0])\n    else:\n        return sigmoid_z.tolist()"}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 1, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 2, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 3, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 4, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 5, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 6, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 7, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 8, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 518, "completion_id": 9, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def compute_gradient(value):\n        return np.round(value * (1 - value), 4)\n    if isinstance(z, (float, int)):\n        return compute_gradient(z)\n    elif isinstance(z, list):\n        return [sigmoid_grad(item) for item in z]\n    elif isinstance(z, np.ndarray):\n        return np.vectorize(compute_gradient)(z).tolist()\n    else:\n        raise ValueError('Input must be a float, list, or NumPy ndarray')"}
{"task_id": 520, "completion_id": 1, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def compute_gradient(x):\n        return np.round(x * (1 - x), 4)\n    if isinstance(z, (int, float)):\n        return float(compute_gradient(z))\n    elif isinstance(z, list):\n        if not z:\n            return []\n        return [sigmoid_grad(item) if isinstance(item, list) else float(compute_gradient(item)) for item in z]\n    elif isinstance(z, np.ndarray):\n        return compute_gradient(z).tolist()\n    else:\n        raise TypeError('Input must be a float, list, or NumPy ndarray')"}
{"task_id": 520, "completion_id": 2, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def compute_gradient(value):\n        return np.round(value * (1 - value), 4)\n    if isinstance(z, (int, float)):\n        return compute_gradient(z)\n    elif isinstance(z, list):\n        return [sigmoid_grad(item) for item in z]\n    elif isinstance(z, np.ndarray):\n        result = np.vectorize(compute_gradient)(z)\n        if result.ndim == 0:\n            return float(result)\n        return result.tolist()\n    else:\n        raise ValueError('Input must be a float, list, or NumPy ndarray.')"}
{"task_id": 520, "completion_id": 3, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def compute_gradient(x):\n        return np.round(x * (1 - x), 4)\n    if isinstance(z, (int, float)):\n        return compute_gradient(z)[()]\n    elif isinstance(z, (list, np.ndarray)):\n        if len(z) == 0:\n            return z\n        elif all((isinstance(i, (int, float)) for i in z)):\n            return compute_gradient(z).tolist()\n        elif all((isinstance(i, (list, np.ndarray)) for i in z)):\n            return [sigmoid_grad(sublist) for sublist in z]\n        else:\n            raise ValueError('Input must be a scalar, list, or numpy array of floats.')\n    else:\n        raise TypeError('Input must be a scalar, list, or numpy array.')"}
{"task_id": 520, "completion_id": 4, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def compute_gradient(value):\n        return np.round(value * (1 - value), 4)\n    if isinstance(z, (float, int)):\n        return compute_gradient(z)\n    elif isinstance(z, list):\n        return [sigmoid_grad(item) for item in z]\n    elif isinstance(z, np.ndarray):\n        return np.vectorize(compute_gradient)(z).tolist()\n    else:\n        raise ValueError('Input must be a float, list, or NumPy ndarray')"}
{"task_id": 520, "completion_id": 5, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def compute_gradient(value):\n        return np.round(value * (1 - value), 4)\n    if isinstance(z, (int, float)):\n        return float(compute_gradient(z))\n    elif isinstance(z, list):\n        return [sigmoid_grad(item) for item in z]\n    elif isinstance(z, np.ndarray):\n        return compute_gradient(z).tolist()\n    elif z == []:\n        return []\n    else:\n        raise ValueError('Input must be a float, list, or NumPy ndarray.')"}
{"task_id": 520, "completion_id": 6, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def compute_gradient(x):\n        return np.round(x * (1 - x), 4)\n    if isinstance(z, (list, tuple)):\n        if not z:\n            return []\n        if all((isinstance(i, (list, tuple)) for i in z)):\n            return [sigmoid_grad(row) for row in z]\n        elif all((isinstance(i, (int, float, np.number)) for i in z)):\n            return [compute_gradient(x) for x in z]\n    elif isinstance(z, (int, float, np.number)):\n        return compute_gradient(z)\n    else:\n        raise ValueError('Input must be a float, list, tuple, or NumPy ndarray of floats.')\n    raise ValueError('Unexpected input structure.')"}
{"task_id": 520, "completion_id": 7, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def compute_gradient(x):\n        return np.round(x * (1 - x), 4)\n    if isinstance(z, (int, float)):\n        return float(compute_gradient(z))\n    elif isinstance(z, list):\n        if not z:\n            return []\n        return [sigmoid_grad(item) for item in z]\n    elif isinstance(z, np.ndarray):\n        return compute_gradient(z).tolist()\n    else:\n        raise ValueError('Input must be a float, list, or NumPy ndarray.')"}
{"task_id": 520, "completion_id": 8, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def compute_gradient(x):\n        return np.round(x * (1 - x), 4)\n    if isinstance(z, (int, float)):\n        return float(compute_gradient(z))\n    elif isinstance(z, list):\n        if len(z) == 0:\n            return []\n        elif all((isinstance(i, (int, float)) for i in z)):\n            return [float(compute_gradient(i)) for i in z]\n        else:\n            return [sigmoid_grad(sublist) for sublist in z]\n    elif isinstance(z, np.ndarray):\n        if z.ndim == 0:\n            return float(compute_gradient(z))\n        else:\n            return compute_gradient(z).tolist()\n    else:\n        raise ValueError('Input must be a float, list, or NumPy ndarray')"}
{"task_id": 520, "completion_id": 9, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n\n    def compute_gradient(value):\n        return np.round(value * (1 - value), 4)\n    if isinstance(z, (float, int)):\n        return compute_gradient(z)\n    elif isinstance(z, list):\n        if not z:\n            return []\n        return [sigmoid_grad(item) for item in z]\n    elif isinstance(z, np.ndarray):\n        if z.ndim == 0:\n            return compute_gradient(z)\n        elif z.ndim == 1 or z.ndim == 2:\n            return np.vectorize(compute_gradient)(z).tolist()\n        else:\n            raise ValueError('Input array must be 0-D, 1-D, or 2-D')\n    else:\n        raise TypeError('Input must be a float, list, or NumPy ndarray')"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X_np = np.array(X)\n    (x1_min, x1_max) = (X_np[:, 0].min(), X_np[:, 0].max())\n    (x2_min, x2_max) = (X_np[:, 1].min(), X_np[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (X1, X2) = np.meshgrid(x1_plot, x2_plot)\n    X1_flat = X1.flatten()\n    X2_flat = X2.flatten()\n    Z = W[0] * X1_flat + W[1] * X2_flat + b\n    labels_flat = np.where(Z >= 0, 1, -1)\n    labels = labels_flat.reshape((grid_n, grid_n))\n    labels_list = labels.tolist()\n    return labels_list"}
{"task_id": 528, "completion_id": 1, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    W = np.array(W)\n    (x1_min, x1_max) = (X[:, 0].min(), X[:, 0].max())\n    (x2_min, x2_max) = (X[:, 1].min(), X[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot)\n    x1_flat = x1_grid.flatten()\n    x2_flat = x2_grid.flatten()\n    z = W[0] * x1_flat + W[1] * x2_flat + b\n    labels_flat = np.sign(z)\n    labels_flat[labels_flat == 0] = -1\n    labels_grid = labels_flat.reshape((grid_n, grid_n))\n    labels_list = labels_grid.tolist()\n    return labels_list"}
{"task_id": 528, "completion_id": 2, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    (x1_min, x1_max) = (X[:, 0].min(), X[:, 0].max())\n    (x2_min, x2_max) = (X[:, 1].min(), X[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot)\n    x1_flat = x1_grid.flatten()\n    x2_flat = x2_grid.flatten()\n    Z = W[0] * x1_flat + W[1] * x2_flat + b\n    labels_flat = np.sign(Z).astype(int)\n    labels_flat[labels_flat == 0] = -1\n    labels_grid = labels_flat.reshape(grid_n, grid_n)\n    return labels_grid.tolist()"}
{"task_id": 528, "completion_id": 3, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    (x1_min, x1_max) = (X[:, 0].min(), X[:, 0].max())\n    (x2_min, x2_max) = (X[:, 1].min(), X[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot)\n    x1_flat = x1_grid.flatten()\n    x2_flat = x2_grid.flatten()\n    linear_combination = W[0] * x1_flat + W[1] * x2_flat + b\n    labels_flat = np.where(linear_combination >= 0, 1, -1)\n    labels_grid = labels_flat.reshape((grid_n, grid_n))\n    labels_list = labels_grid.tolist()\n    return labels_list"}
{"task_id": 528, "completion_id": 4, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    (x1_min, x1_max) = (X[:, 0].min(), X[:, 0].max())\n    (x2_min, x2_max) = (X[:, 1].min(), X[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (X1, X2) = np.meshgrid(x1_plot, x2_plot)\n    X_flat = np.vstack((X1.ravel(), X2.ravel())).T\n    Z = np.dot(X_flat, W) + b\n    labels = np.sign(Z).reshape(grid_n, grid_n)\n    labels_list = labels.tolist()\n    return labels_list"}
{"task_id": 528, "completion_id": 5, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    (x1_min, x1_max) = (X[:, 0].min(), X[:, 0].max())\n    (x2_min, x2_max) = (X[:, 1].min(), X[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot)\n    x1_flat = x1_grid.flatten()\n    x2_flat = x2_grid.flatten()\n    decision_values = W[0] * x1_flat + W[1] * x2_flat + b\n    labels_flat = np.where(decision_values >= 0, 1, -1)\n    labels_grid = labels_flat.reshape(grid_n, grid_n)\n    labels_list = labels_grid.tolist()\n    return labels_list"}
{"task_id": 528, "completion_id": 6, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X_array = np.array(X)\n    (x1_min, x1_max) = (X_array[:, 0].min(), X_array[:, 0].max())\n    (x2_min, x2_max) = (X_array[:, 1].min(), X_array[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot)\n    x1_flat = x1_grid.flatten()\n    x2_flat = x2_grid.flatten()\n    scores = W[0] * x1_flat + W[1] * x2_flat + b\n    labels_flat = np.where(scores >= 0, 1, -1)\n    labels_grid = labels_flat.reshape((grid_n, grid_n))\n    labels_list = labels_grid.tolist()\n    return labels_list"}
{"task_id": 528, "completion_id": 7, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    (x1_min, x1_max) = (X[:, 0].min(), X[:, 0].max())\n    (x2_min, x2_max) = (X[:, 1].min(), X[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot)\n    x1_flat = x1_grid.flatten()\n    x2_flat = x2_grid.flatten()\n    decision_function = W[0] * x1_flat + W[1] * x2_flat + b\n    labels_flat = np.sign(decision_function)\n    labels_flat[labels_flat == 0] = -1\n    labels_grid = labels_flat.reshape((grid_n, grid_n))\n    labels_list = labels_grid.tolist()\n    return labels_list"}
{"task_id": 528, "completion_id": 8, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    (x1_min, x1_max) = (X[:, 0].min(), X[:, 0].max())\n    (x2_min, x2_max) = (X[:, 1].min(), X[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot)\n    x1_flat = x1_grid.flatten()\n    x2_flat = x2_grid.flatten()\n    z = np.sign(W[0] * x1_flat + W[1] * x2_flat + b)\n    z_grid = z.reshape((grid_n, grid_n))\n    z_grid_list = z_grid.tolist()\n    return z_grid_list"}
{"task_id": 528, "completion_id": 9, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    (x1_min, x1_max) = (X[:, 0].min(), X[:, 0].max())\n    (x2_min, x2_max) = (X[:, 1].min(), X[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot)\n    W = np.array(W).reshape(1, 2)\n    points = np.stack((x1_grid.flatten(), x2_grid.flatten()), axis=1)\n    decision_function = np.dot(points, W.T) + b\n    labels = np.sign(decision_function).astype(int)\n    labels[labels == 0] = 1\n    labels_grid = labels.reshape(grid_n, grid_n)\n    labels_list = labels_grid.tolist()\n    return labels_list"}
{"task_id": 537, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    epsilon = 1e-09\n    (n_samples, n_features) = X_train.shape\n    prior_0 = np.mean(y_train == 0)\n    prior_1 = np.mean(y_train == 1)\n    X_train_0 = X_train[y_train == 0]\n    X_train_1 = X_train[y_train == 1]\n    mean_0 = np.mean(X_train_0, axis=0)\n    std_0 = np.std(X_train_0, axis=0) + epsilon\n    mean_1 = np.mean(X_train_1, axis=0)\n    std_1 = np.std(X_train_1, axis=0) + epsilon\n\n    def gaussian_pdf(x, mean, std):\n        return 1 / (np.sqrt(2 * np.pi) * std) * np.exp(-0.5 * ((x - mean) / std) ** 2)\n    predictions = []\n    for x in X_test:\n        likelihood_0 = np.prod(gaussian_pdf(x, mean_0, std_0))\n        likelihood_1 = np.prod(gaussian_pdf(x, mean_1, std_1))\n        posterior_0 = prior_0 * likelihood_0\n        posterior_1 = prior_1 * likelihood_1\n        if posterior_0 > posterior_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    return predictions"}
{"task_id": 537, "completion_id": 1, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    EPSILON = 1e-09\n    X_train_0 = X_train[y_train == 0]\n    X_train_1 = X_train[y_train == 1]\n    prior_0 = len(X_train_0) / len(X_train)\n    prior_1 = len(X_train_1) / len(X_train)\n    mean_0 = np.mean(X_train_0, axis=0)\n    std_0 = np.std(X_train_0, axis=0) + EPSILON\n    mean_1 = np.mean(X_train_1, axis=0)\n    std_1 = np.std(X_train_1, axis=0) + EPSILON\n\n    def gaussian_pdf(x, mean, std):\n        return 1 / (np.sqrt(2 * np.pi) * std) * np.exp(-0.5 * ((x - mean) / std) ** 2)\n    predictions = []\n    for x in X_test:\n        likelihood_0 = np.prod(gaussian_pdf(x, mean_0, std_0))\n        posterior_0 = prior_0 * likelihood_0\n        likelihood_1 = np.prod(gaussian_pdf(x, mean_1, std_1))\n        posterior_1 = prior_1 * likelihood_1\n        if posterior_0 > posterior_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    return predictions"}
{"task_id": 537, "completion_id": 2, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    epsilon = 1e-09\n    (n_samples, n_features) = X_train.shape\n    class_0_samples = y_train == 0\n    class_1_samples = y_train == 1\n    prior_0 = np.mean(class_0_samples)\n    prior_1 = np.mean(class_1_samples)\n    mean_0 = np.mean(X_train[class_0_samples], axis=0)\n    mean_1 = np.mean(X_train[class_1_samples], axis=0)\n    std_0 = np.std(X_train[class_0_samples], axis=0) + epsilon\n    std_1 = np.std(X_train[class_1_samples], axis=0) + epsilon\n\n    def gaussian_pdf(x, mean, std):\n        return 1 / (np.sqrt(2 * np.pi) * std) * np.exp(-0.5 * ((x - mean) / std) ** 2)\n    predictions = []\n    for x in X_test:\n        posterior_0 = np.log(prior_0) + np.sum(np.log(gaussian_pdf(x, mean_0, std_0)))\n        posterior_1 = np.log(prior_1) + np.sum(np.log(gaussian_pdf(x, mean_1, std_1)))\n        if posterior_1 > posterior_0:\n            predictions.append(1)\n        else:\n            predictions.append(0)\n    return predictions"}
{"task_id": 537, "completion_id": 3, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    epsilon = 1e-09\n    (unique_classes, counts) = np.unique(y_train, return_counts=True)\n    class_priors = counts / len(y_train)\n    means = np.zeros((len(unique_classes), X_train.shape[1]))\n    stds = np.zeros((len(unique_classes), X_train.shape[1]))\n    for (i, cls) in enumerate(unique_classes):\n        X_subset = X_train[y_train == cls]\n        means[i, :] = np.mean(X_subset, axis=0)\n        stds[i, :] = np.std(X_subset, axis=0) + epsilon\n    predictions = []\n    for x in X_test:\n        posteriors = []\n        for (i, cls) in enumerate(unique_classes):\n            prior = class_priors[i]\n            likelihood = np.prod(1 / (np.sqrt(2 * np.pi) * stds[i]) * np.exp(-(x - means[i]) ** 2 / (2 * stds[i] ** 2)))\n            posterior = prior * likelihood\n            posteriors.append(posterior)\n        predicted_class = unique_classes[np.argmax(posteriors)]\n        predictions.append(predicted_class)\n    return predictions"}
{"task_id": 537, "completion_id": 4, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    n_samples = X_train.shape[0]\n    prior_1 = np.mean(y_train)\n    prior_0 = 1 - prior_1\n    X_train_0 = X_train[y_train == 0]\n    X_train_1 = X_train[y_train == 1]\n    mean_0 = np.mean(X_train_0, axis=0)\n    std_0 = np.std(X_train_0, axis=0) + 1e-09\n    mean_1 = np.mean(X_train_1, axis=0)\n    std_1 = np.std(X_train_1, axis=0) + 1e-09\n    predictions = []\n    for x in X_test:\n        log_likelihood_0 = np.sum(np.log(1 / (np.sqrt(2 * np.pi) * std_0)) - (x - mean_0) ** 2 / (2 * std_0 ** 2))\n        log_likelihood_1 = np.sum(np.log(1 / (np.sqrt(2 * np.pi) * std_1)) - (x - mean_1) ** 2 / (2 * std_1 ** 2))\n        posterior_0 = log_likelihood_0 + np.log(prior_0)\n        posterior_1 = log_likelihood_1 + np.log(prior_1)\n        if posterior_1 > posterior_0:\n            predictions.append(1)\n        else:\n            predictions.append(0)\n    return predictions"}
{"task_id": 537, "completion_id": 5, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    n_samples = len(y_train)\n    prior_0 = np.sum(y_train == 0) / n_samples\n    prior_1 = 1 - prior_0\n    X_train_0 = X_train[y_train == 0]\n    X_train_1 = X_train[y_train == 1]\n    mean_0 = np.mean(X_train_0, axis=0)\n    std_0 = np.std(X_train_0, axis=0) + 1e-09\n    mean_1 = np.mean(X_train_1, axis=0)\n    std_1 = np.std(X_train_1, axis=0) + 1e-09\n\n    def gaussian_pdf(x, mean, std):\n        return 1 / (np.sqrt(2 * np.pi) * std) * np.exp(-0.5 * ((x - mean) / std) ** 2)\n    predictions = []\n    for x in X_test:\n        likelihood_0 = np.prod(gaussian_pdf(x, mean_0, std_0))\n        posterior_0 = prior_0 * likelihood_0\n        likelihood_1 = np.prod(gaussian_pdf(x, mean_1, std_1))\n        posterior_1 = prior_1 * likelihood_1\n        if posterior_0 > posterior_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    return predictions"}
{"task_id": 537, "completion_id": 6, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    epsilon = 1e-09\n    n_samples = len(y_train)\n    prior_0 = np.mean(y_train == 0)\n    prior_1 = np.mean(y_train == 1)\n    X_train_0 = X_train[y_train == 0]\n    X_train_1 = X_train[y_train == 1]\n    mean_0 = np.mean(X_train_0, axis=0)\n    std_0 = np.std(X_train_0, axis=0) + epsilon\n    mean_1 = np.mean(X_train_1, axis=0)\n    std_1 = np.std(X_train_1, axis=0) + epsilon\n\n    def gaussian_pdf(x, mean, std):\n        \"\"\"Calculate the Gaussian probability density function.\"\"\"\n        coefficient = 1 / (np.sqrt(2 * np.pi) * std)\n        exponent = np.exp(-(x - mean) ** 2 / (2 * std ** 2))\n        return coefficient * exponent\n    predictions = []\n    for x in X_test:\n        likelihood_0 = np.prod(gaussian_pdf(x, mean_0, std_0))\n        posterior_0 = prior_0 * likelihood_0\n        likelihood_1 = np.prod(gaussian_pdf(x, mean_1, std_1))\n        posterior_1 = prior_1 * likelihood_1\n        if posterior_0 > posterior_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    return predictions"}
{"task_id": 537, "completion_id": 7, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    epsilon = 1e-09\n    (n_samples, n_features) = X_train.shape\n    prior_0 = np.mean(y_train == 0)\n    prior_1 = np.mean(y_train == 1)\n    mean_0 = np.mean(X_train[y_train == 0], axis=0)\n    std_0 = np.std(X_train[y_train == 0], axis=0) + epsilon\n    mean_1 = np.mean(X_train[y_train == 1], axis=0)\n    std_1 = np.std(X_train[y_train == 1], axis=0) + epsilon\n    predictions = []\n    for x in X_test:\n        log_posterior_0 = np.log(prior_0)\n        log_posterior_0 += np.sum(np.log(1 / (np.sqrt(2 * np.pi) * std_0)))\n        log_posterior_0 += np.sum(-0.5 * (x - mean_0) ** 2 / std_0 ** 2)\n        log_posterior_1 = np.log(prior_1)\n        log_posterior_1 += np.sum(np.log(1 / (np.sqrt(2 * np.pi) * std_1)))\n        log_posterior_1 += np.sum(-0.5 * (x - mean_1) ** 2 / std_1 ** 2)\n        if log_posterior_0 > log_posterior_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    return predictions"}
{"task_id": 537, "completion_id": 8, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    epsilon = 1e-09\n    n_features = X_train.shape[1]\n    prior_0 = np.mean(y_train == 0)\n    prior_1 = np.mean(y_train == 1)\n    X_train_0 = X_train[y_train == 0]\n    mean_0 = np.mean(X_train_0, axis=0)\n    std_0 = np.std(X_train_0, axis=0) + epsilon\n    X_train_1 = X_train[y_train == 1]\n    mean_1 = np.mean(X_train_1, axis=0)\n    std_1 = np.std(X_train_1, axis=0) + epsilon\n\n    def gaussian_probability(x, mean, std):\n        return 1 / (np.sqrt(2 * np.pi) * std) * np.exp(-0.5 * ((x - mean) / std) ** 2)\n    predictions = []\n    for x in X_test:\n        posterior_0 = np.log(prior_0)\n        posterior_0 += np.sum(np.log(gaussian_probability(x, mean_0, std_0)))\n        posterior_1 = np.log(prior_1)\n        posterior_1 += np.sum(np.log(gaussian_probability(x, mean_1, std_1)))\n        prediction = 1 if posterior_1 > posterior_0 else 0\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 537, "completion_id": 9, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    epsilon = 1e-09\n    X_train_0 = X_train[y_train == 0]\n    X_train_1 = X_train[y_train == 1]\n    prior_0 = len(X_train_0) / len(X_train)\n    prior_1 = len(X_train_1) / len(X_train)\n    mean_0 = np.mean(X_train_0, axis=0)\n    std_0 = np.std(X_train_0, axis=0) + epsilon\n    mean_1 = np.mean(X_train_1, axis=0)\n    std_1 = np.std(X_train_1, axis=0) + epsilon\n\n    def gaussian_likelihood(x, mean, std):\n        return 1 / (np.sqrt(2 * np.pi) * std) * np.exp(-0.5 * ((x - mean) / std) ** 2)\n    predictions = []\n    for x in X_test:\n        posterior_0 = np.sum(np.log(gaussian_likelihood(x, mean_0, std_0))) + np.log(prior_0)\n        posterior_1 = np.sum(np.log(gaussian_likelihood(x, mean_1, std_1))) + np.log(prior_1)\n        if posterior_0 > posterior_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    return predictions"}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\"\"\"\n    assert AL.shape == Y.shape, 'AL and Y must have the same shape'\n    m = AL.shape[0]\n    epsilon = 1e-15\n    AL = np.clip(AL, epsilon, 1 - epsilon)\n    cost = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return float(np.round(cost, 4))"}
{"task_id": 539, "completion_id": 1, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\"\"\"\n    assert AL.shape == Y.shape, 'AL and Y must have the same shape'\n    m = AL.shape[0]\n    epsilon = 1e-15\n    AL = np.clip(AL, epsilon, 1 - epsilon)\n    cost = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return float(np.round(cost, 4))"}
{"task_id": 539, "completion_id": 2, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost between the predictions AL and the true labels Y.\n    \n    Parameters:\n    AL (np.ndarray): A numpy array of shape (1, m) or (m,) containing the model probabilities.\n    Y (np.ndarray): A numpy array of shape (1, m) or (m,) containing the true labels (0 or 1).\n    \n    Returns:\n    float: The binary cross-entropy cost rounded to 4 decimal places.\n    \"\"\"\n    if AL.shape != Y.shape:\n        raise ValueError('AL and Y must have the same shape.')\n    m = AL.shape[0]\n    eps = 1e-15\n    AL_clipped = np.clip(AL, eps, 1 - eps)\n    cost = -1 / m * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return float(np.round(cost, 4))"}
{"task_id": 539, "completion_id": 3, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\"\"\"\n    if AL.shape != Y.shape:\n        raise ValueError('AL and Y must have the same shape.')\n    m = AL.shape[0]\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n    cost = -(1 / m) * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return float(round(cost, 4))"}
{"task_id": 539, "completion_id": 4, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\"\"\"\n    assert AL.shape == Y.shape, 'AL and Y must have the same shape.'\n    m = AL.shape[0]\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n    cost = -1.0 / m * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return float(round(cost, 4))"}
{"task_id": 539, "completion_id": 5, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\"\"\"\n    assert AL.shape == Y.shape, 'AL and Y must have the same shape.'\n    m = AL.shape[0]\n    epsilon = 1e-15\n    AL = np.clip(AL, epsilon, 1 - epsilon)\n    cost = -(1 / m) * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return float(round(cost, 4))"}
{"task_id": 539, "completion_id": 6, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\"\"\"\n    assert AL.shape == Y.shape, 'AL and Y must have the same shape'\n    m = AL.shape[0]\n    epsilon = 1e-15\n    AL = np.clip(AL, epsilon, 1 - epsilon)\n    cost = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return float(cost)"}
{"task_id": 539, "completion_id": 7, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\"\"\"\n    if AL.shape != Y.shape:\n        raise ValueError('AL and Y must have the same shape.')\n    m = AL.shape[0]\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n    cost = -(1 / m) * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return round(float(cost), 4)"}
{"task_id": 539, "completion_id": 8, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n\n    Parameters:\n    AL (np.ndarray): Predicted probabilities, shape (1, m) or (m,)\n    Y (np.ndarray): True labels, shape (1, m) or (m,)\n\n    Returns:\n    float: The computed binary cross-entropy cost.\n    \"\"\"\n    assert AL.shape == Y.shape, 'AL and Y must have the same shape'\n    m = AL.shape[0]\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n    cost = -1 / m * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return round(float(cost), 4)"}
{"task_id": 539, "completion_id": 9, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\"\"\"\n    if AL.shape != Y.shape:\n        raise ValueError('AL and Y must have the same shape.')\n    m = AL.shape[0]\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n    cost = -1 / m * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return float(round(cost, 4))"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    N = len(pi)\n    T = len(observations)\n    if t < 0 or t >= T:\n        return []\n    alpha = np.zeros((T, N))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, T):\n        alpha[i] = np.dot(alpha[i - 1], A) * B[:, observations[i]]\n    beta = np.zeros((T, N))\n    beta[T - 1] = np.ones(N)\n    for i in range(T - 2, -1, -1):\n        beta[i] = np.dot(A, B[:, observations[i + 1]] * beta[i + 1])\n    gamma = alpha[t] * beta[t]\n    gamma /= np.sum(gamma)\n    gamma_rounded = [round(prob, 4) for prob in gamma]\n    return gamma_rounded\nhmm = {'pi': np.array([0.6, 0.4]), 'A': np.array([[0.7, 0.3], [0.4, 0.6]]), 'B': np.array([[0.5, 0.4, 0.1], [0.1, 0.3, 0.6]])}\nobservations = [0, 1, 2]\nt = 1"}
{"task_id": 552, "completion_id": 1, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    O = observations\n    N = len(pi)\n    T = len(O)\n    if t < 0 or t >= T:\n        return []\n    alpha = np.zeros((T, N))\n    alpha[0] = pi * B[:, O[0]]\n    alpha[0] /= np.sum(alpha[0])\n    for i in range(1, T):\n        alpha[i] = np.dot(alpha[i - 1], A) * B[:, O[i]]\n        alpha[i] /= np.sum(alpha[i])\n    beta = np.zeros((T, N))\n    beta[T - 1] = np.ones(N)\n    beta[T - 1] /= np.sum(beta[T - 1])\n    for i in range(T - 2, -1, -1):\n        beta[i] = np.dot(A, B[:, O[i + 1]] * beta[i + 1])\n        beta[i] /= np.sum(beta[i])\n    gamma_t = alpha[t] * beta[t]\n    gamma_t /= np.sum(gamma_t)\n    return [round(g, 4) for g in gamma_t]"}
{"task_id": 552, "completion_id": 2, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    num_states = len(pi)\n    num_observations = len(observations)\n    alpha = np.zeros((num_observations, num_states))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, num_observations):\n        alpha[i] = alpha[i - 1] @ A * B[:, observations[i]]\n    beta = np.zeros((num_observations, num_states))\n    beta[-1] = np.ones(num_states)\n    for i in range(num_observations - 2, -1, -1):\n        beta[i] = A @ (B[:, observations[i + 1]] * beta[i + 1])\n    gamma_t = alpha[t] * beta[t] / np.sum(alpha[t] * beta[t])\n    gamma_t = np.round(gamma_t, 4)\n    return gamma_t.tolist()"}
{"task_id": 552, "completion_id": 3, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    N = len(pi)\n    T = len(observations)\n    if t < 0 or t >= T:\n        return []\n    alpha = np.zeros((T, N))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, T):\n        alpha[i] = np.dot(alpha[i - 1], A) * B[:, observations[i]]\n    beta = np.zeros((T, N))\n    beta[T - 1] = np.ones(N)\n    for i in range(T - 2, -1, -1):\n        beta[i] = np.dot(A, B[:, observations[i + 1]] * beta[i + 1])\n    gamma_t = alpha[t] * beta[t]\n    gamma_t /= np.sum(gamma_t)\n    return [round(prob, 4) for prob in gamma_t]"}
{"task_id": 552, "completion_id": 4, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    num_states = len(pi)\n    num_observations = len(observations)\n    if t < 0 or t >= num_observations:\n        return []\n    alpha = np.zeros((num_observations, num_states))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, num_observations):\n        alpha[i] = alpha[i - 1] @ A * B[:, observations[i]]\n    beta = np.zeros((num_observations, num_states))\n    beta[-1] = np.ones(num_states)\n    for i in range(num_observations - 2, -1, -1):\n        beta[i] = A @ (B[:, observations[i + 1]] * beta[i + 1])\n    gamma_t = alpha[t] * beta[t]\n    gamma_t /= np.sum(gamma_t)\n    return [round(p, 4) for p in gamma_t]"}
{"task_id": 552, "completion_id": 5, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    T = len(observations)\n    N = len(pi)\n    if t < 0 or t >= T:\n        return []\n    alpha = np.zeros((T, N))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, T):\n        alpha[i] = alpha[i - 1] @ A * B[:, observations[i]]\n    beta = np.zeros((T, N))\n    beta[T - 1] = np.ones(N)\n    for i in range(T - 2, -1, -1):\n        beta[i] = A @ (B[:, observations[i + 1]] * beta[i + 1])\n    gamma_t = alpha[t] * beta[t]\n    gamma_t /= np.sum(gamma_t)\n    return [round(prob, 4) for prob in gamma_t.tolist()]"}
{"task_id": 552, "completion_id": 6, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    T = len(observations)\n    N = len(pi)\n    if t < 0 or t >= T:\n        return []\n    alpha = np.zeros((T, N))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, T):\n        alpha[i] = np.dot(alpha[i - 1], A) * B[:, observations[i]]\n    beta = np.zeros((T, N))\n    beta[T - 1] = np.ones(N)\n    for i in range(T - 2, -1, -1):\n        beta[i] = np.dot(A, B[:, observations[i + 1]] * beta[i + 1])\n    gamma_t = alpha[t] * beta[t] / np.sum(alpha[t] * beta[t])\n    gamma_t = np.round(gamma_t, 4)\n    return gamma_t.tolist()"}
{"task_id": 552, "completion_id": 7, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    T = len(observations)\n    N = len(pi)\n    if t < 0 or t >= T:\n        return []\n    alpha = np.zeros((T, N))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, T):\n        alpha[i] = np.dot(alpha[i - 1], A) * B[:, observations[i]]\n    beta = np.zeros((T, N))\n    beta[T - 1] = np.ones(N)\n    for i in range(T - 2, -1, -1):\n        beta[i] = np.dot(A, B[:, observations[i + 1]] * beta[i + 1])\n    numerator = alpha[t] * beta[t]\n    denominator = np.sum(alpha[t] * beta[t])\n    gamma_t = numerator / denominator\n    return [round(g, 4) for g in gamma_t]"}
{"task_id": 552, "completion_id": 8, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    N = len(pi)\n    T = len(observations)\n    if t < 0 or t >= T:\n        return []\n    alpha = np.zeros((T, N))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, T):\n        alpha[i] = np.dot(alpha[i - 1], A) * B[:, observations[i]]\n    beta = np.zeros((T, N))\n    beta[T - 1] = np.ones(N)\n    for i in range(T - 2, -1, -1):\n        beta[i] = np.dot(A, B[:, observations[i + 1]] * beta[i + 1])\n    numerator = alpha[t] * beta[t]\n    denominator = np.sum(numerator)\n    gamma_t = numerator / denominator\n    gamma_t_rounded = [round(prob, 4) for prob in gamma_t]\n    return gamma_t_rounded\nhmm = {'pi': [0.6, 0.4], 'A': [[0.7, 0.3], [0.4, 0.6]], 'B': [[0.5, 0.2, 0.3], [0.3, 0.5, 0.2]]}\nobservations = [0, 1, 1]\nt = 1"}
{"task_id": 552, "completion_id": 9, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    num_states = len(pi)\n    num_observations = len(observations)\n    if t < 0 or t >= num_observations:\n        return []\n    alpha = np.zeros((num_observations, num_states))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, num_observations):\n        alpha[i] = B[:, observations[i]] * np.dot(alpha[i - 1], A)\n    beta = np.zeros((num_observations, num_states))\n    beta[-1] = np.ones(num_states)\n    for i in range(num_observations - 2, -1, -1):\n        beta[i] = np.dot(A, B[:, observations[i + 1]] * beta[i + 1])\n    gamma_t = alpha[t] * beta[t]\n    gamma_t = gamma_t / np.sum(gamma_t)\n    gamma_t_rounded = np.round(gamma_t, 4)\n    return gamma_t_rounded.tolist()\nhmm = {'pi': np.array([0.6, 0.4]), 'A': np.array([[0.7, 0.3], [0.4, 0.6]]), 'B': np.array([[0.5, 0.4, 0.1], [0.1, 0.3, 0.6]])}\nobservations = [0, 1, 2]\ngamma_t = gamma_probabilities(hmm, observations, 1)"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import cdist\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    distance_matrix = cdist(data, data, metric='euclidean')\n    neighborhood_list = [np.where(distance_matrix[i] <= eps)[0] for i in range(n_samples)]\n    core_points = [i for (i, neighbors) in enumerate(neighborhood_list) if len(neighbors) >= min_samples]\n    cluster_id = 0\n    for core_point in core_points:\n        if labels[core_point] != -1:\n            continue\n        cluster_id += 1\n        queue = deque([core_point])\n        while queue:\n            current_point = queue.popleft()\n            if labels[current_point] == -1:\n                labels[current_point] = cluster_id\n            current_neighbors = neighborhood_list[current_point]\n            for neighbor in current_neighbors:\n                if labels[neighbor] == -1:\n                    labels[neighbor] = cluster_id\n                if len(neighborhood_list[neighbor]) >= min_samples and neighbor not in queue:\n                    queue.append(neighbor)\n    return labels"}
{"task_id": 555, "completion_id": 1, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n\n    def find_neighbors(point_idx):\n        neighbors = []\n        for idx in range(n_samples):\n            if euclidean_distance(data[point_idx], data[idx]) < eps:\n                neighbors.append(idx)\n        return neighbors\n\n    def expand_cluster(point_idx, cluster_id):\n        labels[point_idx] = cluster_id\n        search_queue = deque([point_idx])\n        while search_queue:\n            current_point_idx = search_queue.popleft()\n            if len(neighbors_list[current_point_idx]) >= min_samples:\n                for neighbor_idx in neighbors_list[current_point_idx]:\n                    if labels[neighbor_idx] == -1:\n                        labels[neighbor_idx] = cluster_id\n                    if labels[neighbor_idx] == 0:\n                        labels[neighbor_idx] = cluster_id\n                        search_queue.append(neighbor_idx)\n    neighbors_list = [find_neighbors(i) for i in range(n_samples)]\n    cluster_id = 0\n    for point_idx in range(n_samples):\n        if labels[point_idx] != -1:\n            continue\n        if len(neighbors_list[point_idx]) < min_samples:\n            labels[point_idx] = -1\n        else:\n            cluster_id += 1\n            expand_cluster(point_idx, cluster_id)\n    return labels"}
{"task_id": 555, "completion_id": 2, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n\n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    dist_matrix = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            dist = euclidean_distance(data[i], data[j])\n            dist_matrix[i, j] = dist\n            dist_matrix[j, i] = dist\n    neighborhoods = [[] for _ in range(n_samples)]\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if dist_matrix[i, j] <= eps:\n                neighborhoods[i].append(j)\n    core_points = [i for (i, neighborhood) in enumerate(neighborhoods) if len(neighborhood) >= min_samples]\n    cluster_label = 0\n    for core in core_points:\n        if labels[core] != -1:\n            continue\n        cluster_label += 1\n        labels[core] = cluster_label\n        queue = deque([core])\n        while queue:\n            current_point = queue.popleft()\n            current_neighborhood = neighborhoods[current_point]\n            for neighbor in current_neighborhood:\n                if labels[neighbor] == -1:\n                    labels[neighbor] = cluster_label\n                elif labels[neighbor] == 0:\n                    labels[neighbor] = cluster_label\n                    if len(neighborhoods[neighbor]) >= min_samples:\n                        queue.append(neighbor)\n    return labels"}
{"task_id": 555, "completion_id": 3, "solution": "import numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import pdist, squareform\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    distance_matrix = squareform(pdist(data, 'euclidean'))\n    neighborhoods = [np.where(distance_matrix[i] <= eps)[0].tolist() for i in range(n_samples)]\n    core_points = [i for (i, neighbors) in enumerate(neighborhoods) if len(neighbors) >= min_samples]\n    cluster_id = 0\n    for point in core_points:\n        if labels[point] != -1:\n            continue\n        cluster_id += 1\n        labels[point] = cluster_id\n        queue = deque([point])\n        while queue:\n            current_point = queue.popleft()\n            if len(neighborhoods[current_point]) < min_samples:\n                continue\n            for neighbor in neighborhoods[current_point]:\n                if labels[neighbor] == -1:\n                    labels[neighbor] = cluster_id\n                elif labels[neighbor] == 0:\n                    labels[neighbor] = cluster_id\n                    queue.append(neighbor)\n    return labels"}
{"task_id": 555, "completion_id": 4, "solution": "import numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import cdist\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    distances = cdist(data, data, metric='euclidean')\n    neighborhood_list = [set(indices) for indices in np.argwhere(distances <= eps)[:, 1]]\n    core_points = [point for (point, neighbors) in enumerate(neighborhood_list) if len(neighbors) >= min_samples]\n    cluster_id = 0\n    for core_point in core_points:\n        if labels[core_point] != -1:\n            continue\n        cluster_id += 1\n        queue = deque([core_point])\n        while queue:\n            current_point = queue.popleft()\n            if labels[current_point] != -1:\n                continue\n            labels[current_point] = cluster_id\n            current_neighbors = neighborhood_list[current_point]\n            for neighbor in current_neighbors:\n                if labels[neighbor] == -1:\n                    labels[neighbor] = cluster_id\n                if neighbor in core_points and labels[neighbor] == -1:\n                    queue.append(neighbor)\n    return labels"}
{"task_id": 555, "completion_id": 5, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n    neighborhoods = [[] for _ in range(n_samples)]\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            distance = euclidean_distance(data[i], data[j])\n            if distance <= eps:\n                neighborhoods[i].append(j)\n                neighborhoods[j].append(i)\n    core_points = []\n    for (i, neighborhood) in enumerate(neighborhoods):\n        if len(neighborhood) + 1 >= min_samples:\n            core_points.append(i)\n    cluster_id = 0\n    for core in core_points:\n        if labels[core] != -1:\n            continue\n        cluster_id += 1\n        labels[core] = cluster_id\n        seeds = deque([core])\n        while seeds:\n            current_point = seeds.popleft()\n            for neighbor in neighborhoods[current_point]:\n                if labels[neighbor] == -1:\n                    labels[neighbor] = cluster_id\n                elif labels[neighbor] == 0:\n                    labels[neighbor] = cluster_id\n                    if len(neighborhoods[neighbor]) + 1 >= min_samples:\n                        seeds.append(neighbor)\n    return labels"}
{"task_id": 555, "completion_id": 6, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = len(data)\n    labels = [-1] * n_samples\n    visited = [False] * n_samples\n\n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def region_query(point_index):\n        neighbors = []\n        for (idx, point) in enumerate(data):\n            if euclidean_distance(data[point_index], point) <= eps:\n                neighbors.append(idx)\n        return neighbors\n\n    def expand_cluster(point_index, cluster_id):\n        labels[point_index] = cluster_id\n        queue = deque([point_index])\n        while queue:\n            current_point_index = queue.popleft()\n            if not visited[current_point_index]:\n                visited[current_point_index] = True\n                neighbors = region_query(current_point_index)\n                if len(neighbors) >= min_samples:\n                    for neighbor in neighbors:\n                        if labels[neighbor] == -1:\n                            labels[neighbor] = cluster_id\n                        if labels[neighbor] == 0:\n                            queue.append(neighbor)\n                            labels[neighbor] = cluster_id\n    current_cluster_id = 1\n    for point_index in range(n_samples):\n        if not visited[point_index]:\n            visited[point_index] = True\n            neighbors = region_query(point_index)\n            if len(neighbors) >= min_samples:\n                expand_cluster(point_index, current_cluster_id)\n                current_cluster_id += 1\n    return labels"}
{"task_id": 555, "completion_id": 7, "solution": "import numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import pdist, squareform\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    distance_matrix = squareform(pdist(data, 'euclidean'))\n    neighborhoods = [np.where(dist <= eps)[0] for dist in distance_matrix]\n    core_points = [i for (i, neighborhood) in enumerate(neighborhoods) if len(neighborhood) >= min_samples]\n    labels = [-1] * len(data)\n    cluster_id = 0\n    for core_point in core_points:\n        if labels[core_point] != -1:\n            continue\n        cluster_id += 1\n        labels[core_point] = cluster_id\n        queue = deque([core_point])\n        while queue:\n            current_point = queue.popleft()\n            for neighbor in neighborhoods[current_point]:\n                if labels[neighbor] == -1:\n                    labels[neighbor] = cluster_id\n                    if neighbor in core_points:\n                        queue.append(neighbor)\n    return labels"}
{"task_id": 555, "completion_id": 8, "solution": "import numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import pdist, squareform\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples\n    dist_matrix = squareform(pdist(data))\n    neighbors = {i: [j for j in range(n_samples) if dist_matrix[i, j] <= eps] for i in range(n_samples)}\n    core_points = [i for i in range(n_samples) if len(neighbors[i]) >= min_samples]\n    cluster_id = 0\n    for core_point in core_points:\n        if labels[core_point] != -1:\n            continue\n        cluster_id += 1\n        labels[core_point] = cluster_id\n        queue = deque([core_point])\n        while queue:\n            current_point = queue.popleft()\n            for neighbor in neighbors[current_point]:\n                if labels[neighbor] == -1:\n                    labels[neighbor] = cluster_id\n                if labels[neighbor] != -1:\n                    continue\n                labels[neighbor] = cluster_id\n                if neighbor in core_points:\n                    queue.append(neighbor)\n    return labels"}
{"task_id": 555, "completion_id": 9, "solution": "import numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import cdist"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Implement the Expectation-Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    - data: A 2-D NumPy array of shape (N, D) containing N samples with D features.\n    - k: An integer representing the number of Gaussian components.\n    - max_iter: An integer representing the maximum number of iterations.\n    - epsilon: A float representing the tolerance for convergence.\n\n    Returns:\n    - A Python list of length N containing the final cluster label of each sample.\n    \"\"\"\n    (N, D) = data.shape\n    if k == 1:\n        return [0] * N\n    np.random.seed(42)\n    weights = np.ones(k) / k\n    means = data[np.random.choice(N, k, replace=False)]\n    covariances = [np.cov(data, rowvar=False) + np.eye(D) * 1e-06 for _ in range(k)]\n\n    def multivariate_gaussian(x, mean, covariance):\n        det_cov = np.linalg.det(covariance)\n        cov_inv = np.linalg.inv(covariance)\n        diff = x - mean\n        exponent = -0.5 * np.dot(diff.T, np.dot(cov_inv, diff))\n        return 1.0 / np.sqrt((2.0 * np.pi) ** D * det_cov) * np.exp(exponent)\n    for _ in range(max_iter):\n        responsibilities = np.zeros((N, k))\n        for i in range(N):\n            denominator = 0.0\n            for j in range(k):\n                numerator = weights[j] * multivariate_gaussian(data[i], means[j], covariances[j])\n                responsibilities[i, j] = numerator\n                denominator += numerator\n            responsibilities[i] /= denominator\n        new_weights = np.sum(responsibilities, axis=0) / N\n        new_means = np.dot(responsibilities.T, data) / np.sum(responsibilities, axis=0).reshape(-1, 1)\n        new_covariances = []\n        for j in range(k):\n            diff = data - new_means[j]\n            weighted_sum = np.dot((responsibilities[:, j] * diff.T).T, diff)\n            covariance = weighted_sum / np.sum(responsibilities[:, j])\n            new_covariances.append(covariance + np.eye(D) * 1e-06)\n        if np.max(np.abs(new_weights - weights)) < epsilon:\n            break\n        (weights, means, covariances) = (new_weights, new_means, new_covariances)\n    labels = np.argmax(responsibilities, axis=1)\n    sorted_indices = np.argsort(means[:, 0])\n    labels = np.array([sorted_indices[label] for label in labels])\n    return labels.tolist()"}
{"task_id": 561, "completion_id": 1, "solution": "import numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Implement the Expectation\u2013Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    data (np.ndarray): 2-D NumPy array containing N samples with D features.\n    k (int): Number of Gaussian components.\n    max_iter (int): Maximum number of iterations for the EM algorithm.\n    epsilon (float): Tolerance for convergence based on change in mixture weights.\n\n    Returns:\n    list[int]: List of length N containing the final cluster label of each sample.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k == 1:\n        return [0] * n_samples\n    np.random.seed(42)\n    weights = np.ones(k) / k\n    means = data[np.random.choice(n_samples, k, replace=False)]\n    covariances = np.array([np.cov(data, rowvar=False)] * k)\n\n    def multivariate_gaussian(x, mean, cov):\n        \"\"\"Compute the probability density of a multivariate Gaussian distribution.\"\"\"\n        det_cov = np.linalg.det(cov)\n        cov_inv = np.linalg.inv(cov)\n        diff = x - mean\n        exponent = -0.5 * np.dot(diff.T, np.dot(cov_inv, diff))\n        return 1.0 / math.sqrt((2 * np.pi) ** n_features * det_cov) * np.exp(exponent)\n    for _ in range(max_iter):\n        responsibilities = np.zeros((n_samples, k))\n        for i in range(k):\n            responsibilities[:, i] = weights[i] * multivariate_gaussian(data, means[i], covariances[i])\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        weights_new = responsibilities.mean(axis=0)\n        means_new = np.dot(responsibilities.T, data) / responsibilities.sum(axis=0, keepdims=True)\n        covariances_new = np.array([np.dot((data - means_new[i]).T, (data - means_new[i]) * responsibilities[:, i][:, np.newaxis]) / responsibilities[:, i].sum() for i in range(k)])\n        if np.linalg.norm(weights_new - weights) < epsilon:\n            break\n        (weights, means, covariances) = (weights_new, means_new, covariances_new)\n    labels = np.argmax(responsibilities, axis=1)\n    sorted_indices = np.argsort(means[:, 0])\n    labels = np.array([np.where(sorted_indices == label)[0][0] for label in labels])\n    return labels.tolist()"}
{"task_id": 561, "completion_id": 2, "solution": "import numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Implement the Expectation\u2013Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n    \n    Parameters:\n    - data: np.ndarray, shape (N, D) - The input data (N samples with D features).\n    - k: int - Number of Gaussian components.\n    - max_iter: int - Maximum number of iterations for the EM algorithm.\n    - epsilon: float - Convergence tolerance for the change in mixture weights.\n    \n    Returns:\n    - list[int] - A list of length N containing the final cluster label of each sample.\n    \"\"\"\n    (N, D) = data.shape\n    if k == 1:\n        return [0] * N\n\n    def initialize_parameters(N, D, k):\n        weights = np.ones(k) / k\n        means = data[np.random.choice(N, k, replace=False)]\n        covariances = [np.cov(data, rowvar=False) for _ in range(k)]\n        return (weights, means, covariances)\n    (weights, means, covariances) = initialize_parameters(N, D, k)\n\n    def gaussian_pdf(x, mean, cov):\n        det_cov = np.linalg.det(cov)\n        inv_cov = np.linalg.inv(cov)\n        exp_term = -0.5 * (x - mean).T @ inv_cov @ (x - mean)\n        return 1 / np.sqrt((2 * np.pi) ** D * det_cov) * np.exp(exp_term)\n\n    def e_step(data, means, covariances, weights):\n        responsibilities = np.zeros((N, k))\n        for i in range(k):\n            responsibilities[:, i] = weights[i] * gaussian_pdf(data - means[i], np.zeros(D), covariances[i])\n        sum_responsibilities = np.sum(responsibilities, axis=1, keepdims=True)\n        responsibilities /= sum_responsibilities\n        return responsibilities\n\n    def m_step(data, responsibilities):\n        Nk = np.sum(responsibilities, axis=0)\n        weights = Nk / N\n        means = responsibilities.T @ data / Nk[:, np.newaxis]\n        covariances = np.array([np.sum(responsibilities[:, i] * (data - means[i]).T @ (data - means[i]), axis=0) / Nk[i] for i in range(k)])\n        return (weights, means, covariances)\n    for iteration in range(max_iter):\n        old_weights = weights.copy()\n        responsibilities = e_step(data, means, covariances, weights)\n        (weights, means, covariances) = m_step(data, responsibilities)\n        if np.allclose(old_weights, weights, atol=epsilon):\n            break\n    labels = np.argmax(responsibilities, axis=1)\n    sorted_indices = np.argsort(means[:, 0])\n    re_label_map = {old_label: new_label for (new_label, old_label) in enumerate(sorted_indices)}\n    labels = [re_label_map[label] for label in labels]\n    return labels"}
{"task_id": 561, "completion_id": 3, "solution": "import numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Implement the Expectation\u2013Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    - data: np.ndarray, shape (N, D) where N is the number of samples and D is the number of features.\n    - k: int, number of Gaussian components.\n    - max_iter: int, maximum number of iterations for the EM algorithm.\n    - epsilon: float, tolerance for stopping the algorithm based on changes in mixture weights.\n\n    Returns:\n    - labels: list[int], final cluster label of each sample.\n    \"\"\"\n    if k == 1:\n        return [0] * len(data)\n    (N, D) = data.shape\n    np.random.seed(42)\n    weights = np.ones(k) / k\n    means = data[np.random.choice(N, k, replace=False)]\n    covariances = [np.cov(data, rowvar=False) for _ in range(k)]\n    for _ in range(max_iter):\n        responsibilities = np.zeros((N, k))\n        for i in range(k):\n            cov_inv = np.linalg.inv(covariances[i])\n            cov_det = np.linalg.det(covariances[i])\n            exponent = -0.5 * np.sum((data - means[i]) @ cov_inv * (data - means[i]), axis=1)\n            responsibilities[:, i] = weights[i] * np.exp(exponent) / np.sqrt((2 * np.pi) ** D * cov_det)\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        new_weights = responsibilities.mean(axis=0)\n        new_means = responsibilities.T @ data / responsibilities.sum(axis=0)[:, np.newaxis]\n        new_covariances = np.array([(responsibilities[:, i][:, np.newaxis] * (data - new_means[i])).T @ (data - new_means[i]) / responsibilities[:, i].sum() for i in range(k)])\n        if np.allclose(weights, new_weights, atol=epsilon):\n            break\n        (weights, means, covariances) = (new_weights, new_means, new_covariances)\n    labels = np.argmax(responsibilities, axis=1)\n    sorted_indices = np.argsort(means[:, 0])\n    labels = np.array([sorted_indices[label] for label in labels])\n    return labels.tolist()"}
{"task_id": 561, "completion_id": 4, "solution": "import numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Implement the Expectation\u2013Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    - data: np.ndarray, 2-D array of N samples with D features.\n    - k: int, number of Gaussian components.\n    - max_iter: int, maximum number of iterations.\n    - epsilon: float, tolerance for convergence of mixture weights.\n\n    Returns:\n    - list[int], final cluster label of each sample.\n    \"\"\"\n    (n, d) = data.shape\n    weights = np.ones(k) / k\n    means = data[np.random.choice(n, k, replace=False)]\n    covariances = [np.cov(data.T) for _ in range(k)]\n    for iteration in range(max_iter):\n        responsibilities = np.zeros((n, k))\n        for i in range(n):\n            likelihoods = [weights[j] * multivariate_normal_pdf(data[i], means[j], covariances[j]) for j in range(k)]\n            sum_likelihoods = sum(likelihoods)\n            responsibilities[i, :] = likelihoods / sum_likelihoods if sum_likelihoods != 0 else 0\n        new_weights = responsibilities.mean(axis=0)\n        new_means = np.dot(responsibilities.T, data) / responsibilities.sum(axis=0, keepdims=True).T\n        new_covariances = [np.dot((data - mean).T, (data - mean) * resp[:, np.newaxis]) / resp.sum() for (mean, resp) in zip(new_means, responsibilities.T)]\n        if np.abs(new_weights - weights).max() < epsilon:\n            break\n        (weights, means, covariances) = (new_weights, new_means, new_covariances)\n    labels = np.argmax(responsibilities, axis=1)\n    sorted_indices = np.argsort(means[:, 0])\n    labels = np.array([np.where(sorted_indices == label)[0][0] for label in labels])\n    return labels.tolist()\ndef multivariate_normal_pdf(x: np.ndarray, mean: np.ndarray, cov: np.ndarray) -> float:\n    \"\"\"\n    Compute the probability density function of a multivariate normal distribution.\n\n    Parameters:\n    - x: np.ndarray, sample point.\n    - mean: np.ndarray, mean of the distribution.\n    - cov: np.ndarray, covariance matrix of the distribution.\n\n    Returns:\n    - float, probability density at x.\n    \"\"\"\n    d = len(x)\n    det_cov = np.linalg.det(cov)\n    if det_cov == 0:\n        return 0\n    inv_cov = np.linalg.inv(cov)\n    exp_term = -0.5 * (x - mean).T.dot(inv_cov).dot(x - mean)\n    return 1 / ((2 * np.pi) ** (d / 2) * np.sqrt(det_cov)) * np.exp(exp_term)"}
{"task_id": 561, "completion_id": 5, "solution": "import numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Implements the Expectation\u2013Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    - data: np.ndarray, a 2-D array of N samples with D features.\n    - k: int, the number of Gaussian components.\n    - max_iter: int, the maximum number of iterations for the EM algorithm.\n    - epsilon: float, the tolerance for convergence based on the change in mixture weights.\n\n    Returns:\n    - list[int]: A list of length N containing the final cluster label of each sample.\n    \"\"\"\n    (N, D) = data.shape\n    if k == 1:\n        return [0] * N\n    np.random.seed(0)\n    weights = np.ones(k) / k\n    means = data[np.random.choice(N, k, replace=False)]\n    covariances = np.array([np.cov(data, rowvar=False) for _ in range(k)])\n\n    def multivariate_normal(x, mean, cov):\n        det_cov = np.linalg.det(cov)\n        norm_const = 1.0 / (np.power(2 * np.pi, len(x) / 2) * np.power(det_cov, 1.0 / 2))\n        x_diff = np.matrix(x - mean)\n        inv_cov = np.linalg.inv(cov)\n        exponent = -0.5 * (x_diff * inv_cov * x_diff.T)\n        return norm_const * np.exp(exponent)\n    for _ in range(max_iter):\n        responsibilities = np.zeros((N, k))\n        for i in range(N):\n            denom = 0\n            for j in range(k):\n                denom += weights[j] * multivariate_normal(data[i], means[j], covariances[j])\n            for j in range(k):\n                numerator = weights[j] * multivariate_normal(data[i], means[j], covariances[j])\n                responsibilities[i, j] = numerator / denom\n        responsibilities = np.nan_to_num(responsibilities)\n        weights_old = np.copy(weights)\n        for j in range(k):\n            resp_j = responsibilities[:, j]\n            weights[j] = np.sum(resp_j) / N\n            means[j] = np.sum(resp_j[:, np.newaxis] * data, axis=0) / np.sum(resp_j)\n            diff = data - means[j]\n            covariances[j] = np.dot(resp_j * diff.T, diff) / np.sum(resp_j)\n        if np.linalg.norm(weights - weights_old) < epsilon:\n            break\n    labels = np.argmax(responsibilities, axis=1)\n    sorted_indices = np.argsort(means[:, 0])\n    labels = np.searchsorted(sorted_indices, labels)\n    return labels.tolist()"}
{"task_id": 561, "completion_id": 6, "solution": "import numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Implement the Expectation\u2013Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    data (np.ndarray): A 2-D NumPy array containing N samples with D features.\n    k (int): Number of Gaussian components.\n    max_iter (int): Maximum number of iterations for the EM algorithm.\n    epsilon (float): Tolerance for convergence based on the change in mixture weights.\n\n    Returns:\n    list[int]: A list of length N containing the final cluster label of each sample.\n    \"\"\"\n    (n, d) = data.shape\n    if k == 1:\n        return [0] * n\n    weights = np.ones(k) / k\n    means = data[np.random.choice(n, k, replace=False)]\n    covariances = [np.cov(data, rowvar=False) + np.eye(d) * 1e-06 for _ in range(k)]\n    for _ in range(max_iter):\n        responsibilities = np.zeros((n, k))\n        for i in range(k):\n            diff = data - means[i]\n            exp_term = np.exp(-0.5 * np.sum(diff @ np.linalg.inv(covariances[i]) * diff, axis=1))\n            responsibilities[:, i] = weights[i] * exp_term / np.sqrt(np.linalg.det(covariances[i]))\n        row_sums = responsibilities.sum(axis=1)\n        responsibilities /= row_sums[:, np.newaxis]\n        new_weights = responsibilities.mean(axis=0)\n        new_means = responsibilities.T @ data / (n * new_weights[:, np.newaxis])\n        new_covariances = []\n        for i in range(k):\n            diff = data - new_means[i]\n            cov = (responsibilities[:, i][:, np.newaxis] * diff).T @ diff / (n * new_weights[i])\n            new_covariances.append(cov)\n        if np.allclose(weights, new_weights, atol=epsilon):\n            break\n        (weights, means, covariances) = (new_weights, new_means, new_covariances)\n    labels = np.argmax(responsibilities, axis=1)\n    sorted_indices = np.argsort(means[:, 0])\n    labels = np.array([sorted_indices[label] for label in labels])\n    return labels.tolist()"}
{"task_id": 561, "completion_id": 7, "solution": "import numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Implements the Expectation\u2013Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    - data: A 2-D NumPy array of shape (N, D) containing N samples with D features.\n    - k: The number of Gaussian components.\n    - max_iter: The maximum number of iterations to perform.\n    - epsilon: The tolerance for convergence based on the change in mixture weights.\n\n    Returns:\n    - A list of length N containing the final cluster label of each sample.\n    \"\"\"\n    (N, D) = data.shape\n    np.random.seed(0)\n    weights = np.ones(k) / k\n    means = data[np.random.choice(N, k, replace=False)]\n    covariances = [np.cov(data, rowvar=False) for _ in range(k)]\n\n    def gaussian(x, mean, cov):\n        det_cov = np.linalg.det(cov)\n        cov_inv = np.linalg.inv(cov)\n        d = x.shape[0]\n        const = 1.0 / np.sqrt((2 * np.pi) ** d * det_cov)\n        diff = x - mean\n        exponent = -0.5 * np.dot(diff.T, np.dot(cov_inv, diff))\n        return const * np.exp(exponent)\n    for _ in range(max_iter):\n        responsibilities = np.zeros((N, k))\n        for i in range(k):\n            responsibilities[:, i] = weights[i] * gaussian(data, means[i], covariances[i])\n        responsibilities /= responsibilities.sum(axis=1)[:, np.newaxis]\n        new_weights = responsibilities.mean(axis=0)\n        new_means = np.dot(responsibilities.T, data) / responsibilities.sum(axis=0)[:, np.newaxis]\n        new_covariances = []\n        for i in range(k):\n            diff = data - new_means[i]\n            cov_i = np.dot(responsibilities[:, i] * diff.T, diff) / responsibilities[:, i].sum()\n            new_covariances.append(cov_i)\n        if np.allclose(new_weights, weights, atol=epsilon):\n            break\n        (weights, means, covariances) = (new_weights, new_means, new_covariances)\n    responsibilities = np.zeros((N, k))\n    for i in range(k):\n        responsibilities[:, i] = weights[i] * gaussian(data, means[i], covariances[i])\n    labels = np.argmax(responsibilities, axis=1)\n    sorted_indices = np.argsort(means[:, 0])\n    labels = np.array([sorted_indices[label] for label in labels])\n    return labels.tolist()"}
{"task_id": 561, "completion_id": 8, "solution": "import numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Implements the Expectation\u2013Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n    \n    Parameters:\n    - data: A 2-D NumPy array containing N samples with D features.\n    - k: Number of Gaussian components.\n    - max_iter: Maximum number of iterations.\n    - epsilon: Tolerance for convergence.\n    \n    Returns:\n    - A list of length N containing the final cluster label of each sample.\n    \"\"\"\n    (N, D) = data.shape\n    if k == 1:\n        return [0] * N\n    weights = np.ones(k) / k\n    means = data[np.random.choice(N, k, replace=False)]\n    covariances = [np.eye(D) for _ in range(k)]\n\n    def multivariate_gaussian(data, mean, covariance):\n        det_cov = np.linalg.det(covariance)\n        inv_cov = np.linalg.inv(covariance)\n        diff = data - mean\n        return 1.0 / np.sqrt((2 * np.pi) ** D * det_cov) * np.exp(-0.5 * np.dot(np.dot(diff, inv_cov), diff.T))\n\n    def e_step(data):\n        responsibilities = np.zeros((N, k))\n        for i in range(k):\n            responsibilities[:, i] = weights[i] * multivariate_gaussian(data, means[i], covariances[i])\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        return responsibilities\n\n    def m_step(data, responsibilities):\n        sum_N_k = responsibilities.sum(axis=0)\n        weights_new = sum_N_k / N\n        means_new = np.dot(responsibilities.T, data) / sum_N_k[:, np.newaxis]\n        covariances_new = [np.dot((data - means_new[i]).T, np.dot(np.diag(responsibilities[:, i]), data - means_new[i])) / sum_N_k[i] for i in range(k)]\n        return (weights_new, means_new, covariances_new)\n    for _ in range(max_iter):\n        responsibilities = e_step(data)\n        (weights_new, means_new, covariances_new) = m_step(data, responsibilities)\n        if np.allclose(weights, weights_new, atol=epsilon):\n            break\n        (weights, means, covariances) = (weights_new, means_new, covariances_new)\n    labels = np.argmax(responsibilities, axis=1)\n    sorted_indices = np.argsort(means[:, 0])\n    labels = [sorted_indices[label] for label in labels]\n    return labels"}
{"task_id": 561, "completion_id": 9, "solution": "import numpy as np\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"\n    Implements the Expectation\u2013Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    - data: np.ndarray, 2-D NumPy array of shape (N, D) containing N samples with D features.\n    - k: int, number of Gaussian components.\n    - max_iter: int, maximum number of iterations for the EM algorithm.\n    - epsilon: float, tolerance for convergence based on change in mixture weights.\n\n    Returns:\n    - A Python list of length N containing the final cluster label of each sample.\n    \"\"\"\n    (N, D) = data.shape\n    if k == 1:\n        return [0] * N\n    weights = np.ones(k) / k\n    indices = np.random.choice(N, k, replace=False)\n    means = data[indices]\n    covariances = [np.cov(data, rowvar=False) for _ in range(k)]\n\n    def multivariate_gaussian(x, mean, cov):\n        diff = x - mean\n        inv_cov = np.linalg.inv(cov)\n        det_cov = np.linalg.det(cov)\n        const = 1.0 / np.sqrt((2 * np.pi) ** D * det_cov)\n        exponent = -0.5 * np.dot(diff.T, np.dot(inv_cov, diff))\n        return const * np.exp(exponent)\n    for iteration in range(max_iter):\n        responsibilities = np.zeros((N, k))\n        for i in range(N):\n            denominator = 0\n            for j in range(k):\n                responsibilities[i, j] = weights[j] * multivariate_gaussian(data[i], means[j], covariances[j])\n                denominator += responsibilities[i, j]\n            responsibilities[i] /= denominator\n        weights_new = np.sum(responsibilities, axis=0) / N\n        for j in range(k):\n            means[j] = np.dot(responsibilities[:, j], data) / np.sum(responsibilities[:, j])\n            diff = data - means[j]\n            covariances[j] = np.dot(responsibilities[:, j] * diff.T, diff) / np.sum(responsibilities[:, j])\n        if np.linalg.norm(weights_new - weights) < epsilon:\n            break\n        weights = weights_new\n    labels = np.argmax(responsibilities, axis=1)\n    sorted_indices = np.argsort(means[:, 0])\n    labels = np.array([sorted_indices[label] for label in labels])\n    return labels.tolist()"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    N = data.shape[0]\n    if n_cluster == 1:\n        return [0] * N\n\n    def compute_similarity_matrix(data, gamma):\n        pairwise_distance_squared = np.sum(data[:, np.newaxis, :] ** 2, axis=2) + np.sum(data[np.newaxis, :, :] ** 2, axis=2) - 2 * data @ data.T\n        similarity_matrix = np.exp(-gamma * pairwise_distance_squared)\n        np.fill_diagonal(similarity_matrix, 0)\n        return similarity_matrix\n    W = compute_similarity_matrix(data, gamma)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    if method == 'normalized':\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(np.sum(W, axis=1)))\n        L = D_inv_sqrt @ L @ D_inv_sqrt\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    selected_eigenvectors = eigenvectors[:, :n_cluster]\n    if method == 'normalized':\n        row_sums = np.sum(selected_eigenvectors, axis=1, keepdims=True)\n        row_sums[row_sums == 0] = 1\n        selected_eigenvectors /= row_sums\n\n    def kmeans(X, n_clusters, initial_centroids):\n        centroids = X[initial_centroids]\n        labels = np.zeros(X.shape[0], dtype=int)\n        while True:\n            distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)\n            new_labels = np.argmin(distances, axis=1)\n            if np.all(labels == new_labels):\n                break\n            labels = new_labels\n            for i in range(n_clusters):\n                if np.any(labels == i):\n                    centroids[i] = X[labels == i].mean(axis=0)\n        return labels\n    initial_centroids = np.arange(n_cluster)\n    labels = kmeans(selected_eigenvectors, n_cluster, initial_centroids)\n    min_index_by_label = {i: np.min(np.where(labels == i)[0]) for i in range(n_cluster)}\n    sorted_labels = sorted(min_index_by_label, key=min_index_by_label.get)\n    label_mapping = {old_label: idx for (idx, old_label) in enumerate(sorted_labels)}\n    labels = [label_mapping[label] for label in labels]\n    return labels"}
{"task_id": 562, "completion_id": 1, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    N = data.shape[0]\n    pairwise_squared_distances = np.sum(data ** 2, axis=1).reshape(-1, 1) + np.sum(data ** 2, axis=1) - 2 * np.dot(data, data.T)\n    W = np.exp(-gamma * pairwise_squared_distances)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    if method == 'normalized':\n        D_sqrt_inv = np.diag(1.0 / np.sqrt(np.sum(W, axis=1)))\n        L = np.dot(np.dot(D_sqrt_inv, L), D_sqrt_inv)\n    (eigenvalues, eigenvectors) = np.linalg.eig(L)\n    idx = np.argsort(eigenvalues)[:n_cluster]\n    U = eigenvectors[:, idx]\n    if method == 'normalized':\n        U /= np.linalg.norm(U, axis=1, keepdims=True)\n\n    def kmeans_eigenvector_space(U, n_cluster):\n        centroids = U[:n_cluster]\n        labels = np.argmin(np.linalg.norm(U[:, np.newaxis] - centroids, axis=2), axis=1)\n        while True:\n            new_centroids = np.array([U[labels == k].mean(axis=0) for k in range(n_cluster)])\n            new_labels = np.argmin(np.linalg.norm(U[:, np.newaxis] - new_centroids, axis=2), axis=1)\n            if np.array_equal(labels, new_labels):\n                break\n            labels = new_labels\n        return labels\n    labels = kmeans_eigenvector_space(U, n_cluster)\n    (unique_labels, inverse) = np.unique(labels, return_inverse=True)\n    ordered_labels = np.argsort(unique_labels)\n    labels = ordered_labels[inverse]\n    return labels.tolist()"}
{"task_id": 562, "completion_id": 2, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    N = data.shape[0]\n    pairwise_distances = np.sum(data ** 2, axis=1).reshape(-1, 1) + np.sum(data ** 2, axis=1) - 2 * np.dot(data, data.T)\n    W = np.exp(-gamma * pairwise_distances)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    if method == 'normalized':\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(D.diagonal()))\n        L = D_inv_sqrt @ L @ D_inv_sqrt\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    eigenvectors = eigenvectors[:, np.argsort(eigenvalues)[:n_cluster]]\n    if method == 'normalized':\n        eigenvectors = eigenvectors / np.linalg.norm(eigenvectors, axis=1, keepdims=True)\n    centroids = eigenvectors[:n_cluster]\n    labels = np.zeros(N, dtype=int)\n    changed = True\n    while changed:\n        new_labels = np.argmin(np.sum((eigenvectors[:, np.newaxis] - centroids) ** 2, axis=2), axis=1)\n        changed = not np.array_equal(labels, new_labels)\n        labels = new_labels\n        for k in range(n_cluster):\n            indices = np.where(labels == k)[0]\n            if len(indices) > 0:\n                centroids[k] = np.mean(eigenvectors[indices], axis=0)\n    (unique_labels, inverse) = np.unique(labels, return_inverse=True)\n    sorted_indices = np.argsort(np.min(np.where(labels == unique_labels), axis=1))\n    new_label_map = {old_label: new_label for (new_label, old_label) in enumerate(unique_labels[sorted_indices])}\n    labels = [new_label_map[label] for label in labels]\n    return labels"}
{"task_id": 562, "completion_id": 3, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    N = data.shape[0]\n    pairwise_sq_dists = np.sum(data ** 2, axis=1).reshape(-1, 1) + np.sum(data ** 2, axis=1) - 2 * np.dot(data, data.T)\n    W = np.exp(-gamma * pairwise_sq_dists)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    if method == 'normalized':\n        D_sqrt_inv = np.diag(1.0 / np.sqrt(np.sum(W, axis=1)))\n        L = np.dot(np.dot(D_sqrt_inv, L), D_sqrt_inv)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    eigenvectors = eigenvectors[:, :n_cluster]\n    if method == 'normalized':\n        eigenvectors = eigenvectors / np.linalg.norm(eigenvectors, axis=1, keepdims=True)\n\n    def kmeans(X, k):\n        centroids = X[:k]\n        labels = np.argmin(cdist(X, centroids), axis=1)\n        while True:\n            new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(k)])\n            new_labels = np.argmin(cdist(X, new_centroids), axis=1)\n            if np.array_equal(labels, new_labels):\n                break\n            centroids = new_centroids\n            labels = new_labels\n        return labels\n    from scipy.spatial.distance import cdist\n    labels = kmeans(eigenvectors, n_cluster)\n    unique_labels = np.unique(labels)\n    label_mapping = {old_label: new_label for (new_label, old_label) in enumerate(unique_labels)}\n    labels = [label_mapping[label] for label in labels]\n    return labels"}
{"task_id": 562, "completion_id": 4, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    N = data.shape[0]\n    pairwise_squared_distances = np.sum(data ** 2, axis=1).reshape(N, 1) + np.sum(data ** 2, axis=1) - 2 * data.dot(data.T)\n    W = np.exp(-gamma * pairwise_squared_distances)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    if method == 'normalized':\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(np.sum(W, axis=1)))\n        L = D_inv_sqrt @ L @ D_inv_sqrt\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    if method == 'normalized':\n        eigenvectors = eigenvectors / np.linalg.norm(eigenvectors, axis=1, keepdims=True)\n    selected_eigenvectors = eigenvectors[:, :n_cluster]\n\n    def kmeans(X, k):\n        centroids = X[:k]\n        labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - centroids, axis=2), axis=1)\n        while True:\n            new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(k)])\n            new_labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - new_centroids, axis=2), axis=1)\n            if np.array_equal(new_labels, labels):\n                break\n            centroids = new_centroids\n            labels = new_labels\n        return labels\n    labels = kmeans(selected_eigenvectors, n_cluster)\n    unique_labels = np.unique(labels)\n    label_mapping = {old_label: idx for (idx, old_label) in enumerate(unique_labels)}\n    labels = [label_mapping[label] for label in labels]\n    return labels"}
{"task_id": 562, "completion_id": 5, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    N = data.shape[0]\n    squared_distances = np.sum(data ** 2, axis=1).reshape(-1, 1) + np.sum(data ** 2, axis=1) - 2 * np.dot(data, data.T)\n    W = np.exp(-gamma * squared_distances)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    if method == 'normalized':\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(np.diag(D)))\n        L = D_inv_sqrt @ L @ D_inv_sqrt\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    eigenvectors = eigenvectors[:, :n_cluster]\n    if method == 'normalized':\n        eigenvectors = eigenvectors / np.linalg.norm(eigenvectors, axis=1, keepdims=True)\n\n    def kmeans(X, k, initial_centroids):\n        centroids = X[initial_centroids]\n        labels = np.zeros(X.shape[0], dtype=int)\n        while True:\n            distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)\n            new_labels = np.argmin(distances, axis=1)\n            if np.array_equal(new_labels, labels):\n                break\n            labels = new_labels\n            for i in range(k):\n                if np.any(labels == i):\n                    centroids[i] = np.mean(X[labels == i], axis=0)\n        return labels\n    initial_centroids = np.arange(n_cluster)\n    labels = kmeans(eigenvectors, n_cluster, initial_centroids)\n    unique_labels = np.unique(labels)\n    label_mapping = {old_label: new_label for (new_label, old_label) in enumerate(unique_labels)}\n    labels = [label_mapping[label] for label in labels]\n    return labels"}
{"task_id": 562, "completion_id": 6, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    pairwise_sq_dists = np.sum(data ** 2, axis=1).reshape(-1, 1) + np.sum(data ** 2, axis=1) - 2 * np.dot(data, data.T)\n    W = np.exp(-gamma * pairwise_sq_dists)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    if method == 'normalized':\n        D_inv_sqrt = np.diag(1 / np.sqrt(np.diag(D)))\n        L = D_inv_sqrt @ L @ D_inv_sqrt\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    relevant_eigenvectors = eigenvectors[:, :n_cluster]\n    if method == 'normalized':\n        row_norms = np.linalg.norm(relevant_eigenvectors, axis=1, keepdims=True)\n        relevant_eigenvectors = relevant_eigenvectors / row_norms\n\n    def kmeans(X, k, initial_centroids):\n        centroids = X[initial_centroids]\n        while True:\n            diff = (X[:, np.newaxis] - centroids) ** 2\n            distances = np.sum(diff, axis=2)\n            labels = np.argmin(distances, axis=1)\n            new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(k)])\n            if np.all(centroids == new_centroids):\n                break\n            centroids = new_centroids\n        return labels\n    initial_centroids = np.arange(n_cluster)\n    labels = kmeans(relevant_eigenvectors, n_cluster, initial_centroids)\n    unique_labels = np.unique(labels)\n    relabel_map = {old_label: new_label for (new_label, old_label) in enumerate(unique_labels)}\n    labels = [relabel_map[label] for label in labels]\n    return labels"}
{"task_id": 562, "completion_id": 7, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    N = data.shape[0]\n    pairwise_squared_distances = np.sum((data[:, np.newaxis] - data[np.newaxis, :]) ** 2, axis=2)\n    W = np.exp(-gamma * pairwise_squared_distances)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    if method == 'normalized':\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(np.sum(W, axis=1)))\n        L = D_inv_sqrt @ L @ D_inv_sqrt\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    indices = np.argsort(eigenvalues)[:n_cluster]\n    U = eigenvectors[:, indices]\n    if method == 'normalized':\n        U = U / np.linalg.norm(U, axis=1, keepdims=True)\n\n    def kmeans(X, centroids):\n        labels = np.argmin(np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2), axis=1)\n        new_centroids = np.array([X[labels == k].mean(axis=0) for k in range(len(centroids))])\n        return (labels, new_centroids)\n    centroids = U[:n_cluster]\n    while True:\n        (labels, new_centroids) = kmeans(U, centroids)\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    unique_labels = np.unique(labels)"}
{"task_id": 562, "completion_id": 8, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    N = data.shape[0]\n    pairwise_sq_dists = np.sum(data ** 2, axis=1).reshape(-1, 1) + np.sum(data ** 2, axis=1) - 2 * np.dot(data, data.T)\n    similarity_matrix = np.exp(-gamma * pairwise_sq_dists)\n    np.fill_diagonal(similarity_matrix, 0)\n    degree_matrix = np.diag(np.sum(similarity_matrix, axis=1))\n    laplacian_matrix = degree_matrix - similarity_matrix\n    if method == 'normalized':\n        degree_matrix_sqrt_inv = np.diag(1.0 / np.sqrt(np.sum(similarity_matrix, axis=1)))\n        laplacian_matrix = degree_matrix_sqrt_inv @ laplacian_matrix @ degree_matrix_sqrt_inv\n    (eigenvalues, eigenvectors) = np.linalg.eigh(laplacian_matrix)\n    if method == 'normalized':\n        eigenvectors = eigenvectors / np.linalg.norm(eigenvectors, axis=1, keepdims=True)\n    U = eigenvectors[:, :n_cluster]\n\n    def kmeans(X, k, initial_centroids):\n        centroids = X[initial_centroids]\n        labels = np.zeros(X.shape[0])\n        while True:\n            distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)\n            new_labels = np.argmin(distances, axis=1)\n            if np.array_equal(new_labels, labels):\n                break\n            labels = new_labels\n            for i in range(k):\n                centroids[i] = np.mean(X[labels == i], axis=0)\n        return labels\n    initial_centroids = np.arange(n_cluster)\n    labels = kmeans(U, n_cluster, initial_centroids)\n    (unique_labels, inverse) = np.unique(labels, return_inverse=True)\n    sorted_indices = np.argsort(np.array([np.min(np.where(labels == label)[0]) for label in unique_labels]))\n    relabeled_labels = sorted_indices[inverse]\n    return relabeled_labels.tolist()"}
{"task_id": 562, "completion_id": 9, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    N = data.shape[0]\n    W = np.zeros((N, N))\n    for i in range(N):\n        for j in range(N):\n            diff = np.linalg.norm(data[i] - data[j]) ** 2\n            W[i, j] = np.exp(-gamma * diff)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    if method == 'normalized':\n        D_inv_sqrt = np.diag(np.power(np.sum(W, axis=1), -0.5))\n        L = np.dot(np.dot(D_inv_sqrt, L), D_inv_sqrt)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(L)\n    eigenvectors = eigenvectors[:, :n_cluster]\n    if method == 'normalized':\n        eigenvectors = eigenvectors / np.linalg.norm(eigenvectors, axis=1, keepdims=True)\n\n    def kmeans(X, k, initial_centroids):\n        centroids = X[initial_centroids].copy()\n        labels = np.zeros(X.shape[0], dtype=int)\n        while True:\n            for i in range(X.shape[0]):\n                distances = np.linalg.norm(X[i] - centroids, axis=1)\n                labels[i] = np.argmin(distances)\n            new_centroids = np.array([X[labels == j].mean(axis=0) for j in range(k)])\n            if np.all(centroids == new_centroids):\n                break\n            centroids = new_centroids\n        return labels\n    initial_centroids = list(range(n_cluster))\n    labels = kmeans(eigenvectors, n_cluster, initial_centroids)\n    unique_labels = np.unique(labels)\n    label_mapping = {old_label: new_label for (new_label, old_label) in enumerate(unique_labels)}\n    labels = [label_mapping[label] for label in labels]\n    return labels"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = X_data.shape[0]\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.sum(alpha[:, np.newaxis] * y_data[:, np.newaxis] * X_data, axis=0)\n    w_rounded = [round(wi, 4) for wi in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 563, "completion_id": 1, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = len(y_data)\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.sum(alpha * y_data[:, np.newaxis] * X_data, axis=0)\n    w_rounded = [round(wi, 4) for wi in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 563, "completion_id": 2, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = X_data.shape[0]\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        update_count = 0\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                update_count += 1\n        if update_count == 0:\n            break\n    w = np.sum(alpha * y_data[:, np.newaxis] * X_data, axis=0)\n    w_rounded = [round(wi, 4) for wi in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 563, "completion_id": 3, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.sum((alpha * y_data).reshape(-1, 1) * X_data, axis=0)\n    w_rounded = [round(weight, 4) for weight in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 563, "completion_id": 4, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.sum(alpha * y_data[:, np.newaxis] * X_data, axis=0)\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = np.round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 563, "completion_id": 5, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.sum(alpha * y_data[:, np.newaxis] * X_data, axis=0)\n    w_rounded = [round(wi, 4) for wi in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 563, "completion_id": 6, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.sum(alpha * y_data[:, np.newaxis] * X_data, axis=0)\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = np.round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 563, "completion_id": 7, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = X_data.shape[0]\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.sum(alpha * y_data[:, np.newaxis] * X_data, axis=0)\n    w_rounded = [round(weight, 4) for weight in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 563, "completion_id": 8, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.sum(alpha * y_data[:, np.newaxis] * X_data, axis=0)\n    w_rounded = [round(weight, 4) for weight in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 563, "completion_id": 9, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = len(y_data)\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.sum(alpha * y_data[:, np.newaxis] * X_data, axis=0)\n    w = [round(wi, 4) for wi in w]\n    b = round(b, 4)\n    return (w, b)"}
{"task_id": 564, "completion_id": 0, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    node = root\n    while node.y is None:\n        if task_type == 'classification':\n            feature_value = features[node.label]\n            child_matched = False\n            for child in node.child:\n                if child.x == feature_value:\n                    node = child\n                    child_matched = True\n                    break\n            if not child_matched:\n                node = node.child[1]\n        elif task_type == 'regression':\n            feature_value = features[node.label]\n            if feature_value <= node.s:\n                node = node.child[0]\n            else:\n                node = node.child[1]\n    return node.y"}
{"task_id": 564, "completion_id": 1, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    node = root\n    while True:\n        if hasattr(node, 'y'):\n            return node.y\n        if task_type == 'classification':\n            feature_value = features[node.label]\n            for child in node.child:\n                if child.x == feature_value:\n                    node = child\n                    break\n            else:\n                node = node.child[1]\n        elif task_type == 'regression':\n            feature_value = features[node.label]\n            if feature_value <= node.s:\n                node = node.child[0]\n            else:\n                node = node.child[1]"}
{"task_id": 564, "completion_id": 2, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n    while current_node.y is None:\n        if task_type == 'classification':\n            feature_value = features[current_node.label]\n            for child in current_node.child:\n                if child.x == feature_value:\n                    current_node = child\n                    break\n            else:\n                current_node = current_node.child[1]\n        elif task_type == 'regression':\n            feature_value = features[current_node.label]\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n    return current_node.y"}
{"task_id": 564, "completion_id": 3, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n    while current_node.y is None:\n        feature_value = features[current_node.label]\n        if task_type == 'classification':\n            matched_child = None\n            for child in current_node.child:\n                if child.x == feature_value:\n                    matched_child = child\n                    break\n            if matched_child is None:\n                matched_child = current_node.child[1]\n            current_node = matched_child\n        elif task_type == 'regression':\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n    return current_node.y"}
{"task_id": 564, "completion_id": 4, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n\n    def traverse(node):\n        if node.y is not None:\n            return node.y\n        if task_type == 'classification':\n            feature_value = features[node.label]\n            for child in node.child:\n                if child.x == feature_value:\n                    return traverse(child)\n            return traverse(node.child[1])\n        elif task_type == 'regression':\n            feature_value = features[node.label]\n            if feature_value <= node.s:\n                return traverse(node.child[0])\n            else:\n                return traverse(node.child[1])\n    return traverse(root)"}
{"task_id": 564, "completion_id": 5, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    node = root\n    while not hasattr(node, 'y'):\n        if task_type == 'classification':\n            feature_value = features[node.label]\n            found_child = False\n            for child in node.child:\n                if child.x == feature_value:\n                    node = child\n                    found_child = True\n                    break\n            if not found_child:\n                node = node.child[1]\n        elif task_type == 'regression':\n            feature_value = features[node.label]\n            if feature_value <= node.s:\n                node = node.child[0]\n            else:\n                node = node.child[1]\n    return node.y"}
{"task_id": 564, "completion_id": 6, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n    while current_node.y is None:\n        if task_type == 'classification':\n            feature_value = features[current_node.label]\n            matched_child = next((child for child in current_node.child if child.x == feature_value), None)\n            if matched_child is not None:\n                current_node = matched_child\n            else:\n                current_node = current_node.child[1]\n        elif task_type == 'regression':\n            feature_value = features[current_node.label]\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n    return current_node.y"}
{"task_id": 564, "completion_id": 7, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n    while current_node.y is None:\n        if task_type == 'classification':\n            feature_value = features[current_node.label]\n            for child in current_node.child:\n                if child.x == feature_value:\n                    current_node = child\n                    break\n            else:\n                current_node = current_node.child[1]\n        elif task_type == 'regression':\n            feature_value = features[current_node.label]\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n    return current_node.y"}
{"task_id": 564, "completion_id": 8, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    node = root\n    while node.y is None:\n        if task_type == 'classification':\n            feature_value = features[node.label]\n            matching_child = next((child for child in node.child if child.x == feature_value), None)\n            if matching_child is not None:\n                node = matching_child\n            else:\n                node = node.child[1]\n        elif task_type == 'regression':\n            feature_value = features[node.label]\n            if feature_value <= node.s:\n                node = node.child[0]\n            else:\n                node = node.child[1]\n    return node.y"}
{"task_id": 564, "completion_id": 9, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n    while current_node.y is None:\n        feature_value = features[current_node.label]\n        if task_type == 'classification':\n            for child in current_node.child:\n                if child.x == feature_value:\n                    current_node = child\n                    break\n            else:\n                current_node = current_node.child[1]\n        elif task_type == 'regression':\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n    return current_node.y"}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n\n    def entropy(labels):\n        \"\"\"Calculate the entropy of a label distribution.\"\"\"\n        (_, counts) = np.unique(labels, return_counts=True)\n        probabilities = counts / counts.sum()\n        return -np.sum(probabilities * np.log2(probabilities))\n\n    def conditional_entropy(X, y, feature_index):\n        \"\"\"Calculate the conditional entropy of y given feature feature_index.\"\"\"\n        n_samples = X.shape[0]\n        feature_values = np.unique(X[:, feature_index])\n        total_entropy = 0.0\n        for value in feature_values:\n            subset_y = y[X[:, feature_index] == value]\n            subset_entropy = entropy(subset_y)\n            subset_weight = subset_y.shape[0] / n_samples\n            total_entropy += subset_weight * subset_entropy\n        return total_entropy\n    total_entropy = entropy(y)\n    n_features = X.shape[1]\n    max_information_gain = -1\n    best_feature_index = -1\n    for feature_index in range(n_features):\n        cond_entropy = conditional_entropy(X, y, feature_index)\n        information_gain = total_entropy - cond_entropy\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    return (best_feature_index, round(max_information_gain, 6))"}
{"task_id": 565, "completion_id": 1, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n\n    def entropy(labels):\n        n_labels = len(labels)\n        if n_labels == 0:\n            return 0.0\n        value_counts = np.bincount(labels)\n        probabilities = value_counts / n_labels\n        return -np.sum(probabilities * np.log2(probabilities + 1e-10))\n    (n_samples, n_features) = X.shape\n    H_y = entropy(y)\n    max_information_gain = -1.0\n    best_feature_index = -1\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        feature_value_counts = np.unique(feature_values, return_counts=True)\n        H_y_given_feature = 0.0\n        for (value, count) in zip(*feature_value_counts):\n            subset_labels = y[feature_values == value]\n            H_y_given_feature += count / n_samples * entropy(subset_labels)\n        information_gain = H_y - H_y_given_feature\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    return (best_feature_index, round(max_information_gain, 6))"}
{"task_id": 565, "completion_id": 2, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n\n    def entropy(labels: np.ndarray) -> float:\n        \"\"\"Calculate the entropy of a label distribution.\"\"\"\n        value_counts = np.bincount(labels)\n        probabilities = value_counts / labels.size\n        return -np.sum(probabilities * np.log2(probabilities + 1e-09))\n    H_y = entropy(y)\n    max_information_gain = -1\n    best_feature_index = -1\n    (n_samples, n_features) = X.shape\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        value_counts = np.unique(feature_values, return_counts=True)\n        feature_entropy = 0.0\n        for (value, count) in zip(value_counts[0], value_counts[1]):\n            subset_labels = y[feature_values == value]\n            feature_entropy += count / n_samples * entropy(subset_labels)\n        information_gain = H_y - feature_entropy\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    return (best_feature_index, round(max_information_gain, 6))"}
{"task_id": 565, "completion_id": 3, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n\n    def entropy(labels: np.ndarray) -> float:\n        \"\"\"Calculate the entropy of a label distribution.\"\"\"\n        value_counts = np.bincount(labels)\n        probabilities = value_counts / len(labels)\n        return -np.sum(probabilities * np.log2(probabilities + 1e-09))\n\n    def conditional_entropy(X: np.ndarray, y: np.ndarray, feature_index: int) -> float:\n        \"\"\"Calculate the conditional entropy of labels given a feature.\"\"\"\n        feature_values = np.unique(X[:, feature_index])\n        weighted_entropy = 0.0\n        for value in feature_values:\n            mask = X[:, feature_index] == value\n            subset_labels = y[mask]\n            weighted_entropy += len(subset_labels) / len(y) * entropy(subset_labels)\n        return weighted_entropy\n    base_entropy = entropy(y)\n    max_info_gain = -1.0\n    best_feature_index = -1\n    for feature_index in range(X.shape[1]):\n        info_gain = base_entropy - conditional_entropy(X, y, feature_index)\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_feature_index = feature_index\n    return (best_feature_index, round(max_info_gain, 6))"}
{"task_id": 565, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n\n    def entropy(labels):\n        n = len(labels)\n        value_counts = np.bincount(labels)\n        probabilities = value_counts / n\n        return -np.sum(probabilities * np.where(probabilities != 0, np.log2(probabilities), 0))\n\n    def conditional_entropy(X_feature, y):\n        n = len(y)\n        value_counts = np.bincount(X_feature)\n        probabilities = value_counts / n\n        conditional_entropies = np.array([entropy(y[X_feature == value]) if value_counts[value] > 0 else 0 for value in range(len(value_counts))])\n        return np.sum(probabilities * conditional_entropies)\n    base_entropy = entropy(y)\n    max_information_gain = -1\n    best_feature_index = -1\n    for i in range(X.shape[1]):\n        feature_entropy = conditional_entropy(X[:, i], y)\n        information_gain = base_entropy - feature_entropy\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = i\n    return (best_feature_index, round(max_information_gain, 6))"}
{"task_id": 565, "completion_id": 5, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n\n    def entropy(labels: np.ndarray) -> float:\n        \"\"\"Calculate the entropy of a label distribution.\"\"\"\n        value_counts = np.bincount(labels)\n        probabilities = value_counts / len(labels)\n        return -np.sum((p * math.log2(p) if p > 0 else 0 for p in probabilities))\n    H_y = entropy(y)\n    max_information_gain = -1\n    best_feature_index = -1\n    for feature_index in range(X.shape[1]):\n        feature_values = X[:, feature_index]\n        H_y_given_A = 0\n        for value in np.unique(feature_values):\n            subset_labels = y[feature_values == value]\n            H_y_given_A += len(subset_labels) / len(y) * entropy(subset_labels)\n        information_gain = H_y - H_y_given_A\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    return (best_feature_index, round(max_information_gain, 6))"}
{"task_id": 565, "completion_id": 6, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n\n    def entropy(labels: np.ndarray) -> float:\n        \"\"\"Calculate the entropy of a label distribution.\"\"\"\n        value_counts = np.bincount(labels)\n        probabilities = value_counts / len(labels)\n        return -np.sum(probabilities * np.log2(probabilities, where=probabilities != 0))\n    H_y = entropy(y)\n    (n_samples, n_features) = X.shape\n    max_information_gain = -1\n    best_feature_index = -1\n    for feature_idx in range(n_features):\n        unique_values = np.unique(X[:, feature_idx])\n        H_y_given_A = 0.0\n        for value in unique_values:\n            subset_labels = y[X[:, feature_idx] == value]\n            H_y_given_A += len(subset_labels) / n_samples * entropy(subset_labels)\n        information_gain = H_y - H_y_given_A\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_idx\n    return (best_feature_index, round(max_information_gain, 6))"}
{"task_id": 565, "completion_id": 7, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n\n    def entropy(labels: np.ndarray) -> float:\n        n_samples = len(labels)\n        if n_samples == 0:\n            return 0.0\n        value_counts = np.bincount(labels)\n        probabilities = value_counts / n_samples\n        return -np.sum(probabilities * np.log2(probabilities + 1e-09))\n    total_entropy = entropy(y)\n    (n_samples, n_features) = X.shape\n    max_information_gain = -1\n    best_feature_index = -1\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        weighted_entropy = 0.0\n        for value in unique_values:\n            mask = feature_values == value\n            subset_labels = y[mask]\n            subset_weight = len(subset_labels) / n_samples\n            subset_entropy = entropy(subset_labels)\n            weighted_entropy += subset_weight * subset_entropy\n        information_gain = total_entropy - weighted_entropy\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    return (best_feature_index, round(max_information_gain, 6))"}
{"task_id": 565, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n\n    def entropy(labels):\n        \"\"\"Calculate the entropy of a label distribution.\"\"\"\n        value_counts = np.bincount(labels)\n        probabilities = value_counts / len(labels)\n        return -np.sum([p * math.log2(p) for p in probabilities if p > 0])\n    (n_samples, n_features) = X.shape\n    total_entropy = entropy(y)\n    max_information_gain = -np.inf\n    best_feature_index = -1\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        weighted_entropy = 0.0\n        for value in unique_values:\n            mask = feature_values == value\n            subset_labels = y[mask]\n            weighted_entropy += len(subset_labels) / n_samples * entropy(subset_labels)\n        information_gain = total_entropy - weighted_entropy\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    return (best_feature_index, round(max_information_gain, 6))"}
{"task_id": 565, "completion_id": 9, "solution": "import numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n\n    def entropy(labels):\n        \"\"\"Calculate the entropy of a label distribution.\"\"\"\n        value_counts = np.bincount(labels)\n        probs = value_counts / len(labels)\n        return -np.sum([p * math.log2(p) if p > 0 else 0 for p in probs])\n    H_y = entropy(y)\n    (n_samples, n_features) = X.shape\n    max_information_gain = -1\n    best_feature_index = -1\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        H_y_given_A = 0\n        for value in unique_values:\n            subset_labels = y[feature_values == value]\n            H_y_given_A += len(subset_labels) / n_samples * entropy(subset_labels)\n        information_gain = H_y - H_y_given_A\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    return (best_feature_index, round(max_information_gain, 6))"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n\n    def c(n):\n        if n == 1:\n            return 0\n        return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\n    def avg_path_length(n):\n        return c(n) if n > 2 else 2 * math.log(n - 1) + 0.5772156649 if n == 2 else 0\n\n    def build_isolation_tree(subsample, height_limit):\n        if len(subsample) <= 1 or height_limit == 0:\n            return {'value': subsample, 'left': None, 'right': None}\n        feature_idx = np.random.randint(data.shape[1])\n        feature_range = data[:, feature_idx].max() - data[:, feature_idx].min()\n        if feature_range == 0:\n            return {'value': subsample, 'left': None, 'right': None}\n        threshold = np.random.uniform(data[:, feature_idx].min(), data[:, feature_idx].max())\n        left_samples = subsample[data[subsample, feature_idx] < threshold]\n        right_samples = subsample[data[subsample, feature_idx] >= threshold]\n        return {'feature': feature_idx, 'threshold': threshold, 'left': build_isolation_tree(left_samples, height_limit - 1), 'right': build_isolation_tree(right_samples, height_limit - 1)}\n\n    def path_length(x, tree, height=0):\n        if 'value' in tree:\n            return height + c(len(tree['value']))\n        feature = tree['feature']\n        threshold = tree['threshold']\n        if x[feature] < threshold:\n            return path_length(x, tree['left'], height + 1)\n        else:\n            return path_length(x, tree['right'], height + 1)\n    height_limit = math.ceil(math.log2(sample_size if sample_size < data.shape[0] else data.shape[0]))\n    trees = [build_isolation_tree(np.random.choice(data.shape[0], sample_size, replace=False), height_limit) for _ in range(n_trees)]\n    path_lengths = np.zeros(data.shape[0])\n    for i in range(data.shape[0]):\n        path_lengths[i] = sum((path_length(data[i], tree) for tree in trees)) / n_trees\n    avg_path_length_n = avg_path_length(data.shape[0])\n    anomaly_scores = [2 ** (-path_length / avg_path_length_n) for path_length in path_lengths]\n    threshold = np.percentile(anomaly_scores, (1 - epsilon) * 100)\n    outliers = [i for (i, score) in enumerate(anomaly_scores) if score >= threshold]\n    return sorted(outliers)"}
{"task_id": 566, "completion_id": 1, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n\n    def c(n):\n        if n == 1:\n            return 0\n        else:\n            return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\n    def build_isolation_tree(sub_data, height_limit):\n        if len(sub_data) <= 1 or height_limit == 0:\n            return (sub_data, None, None, c(len(sub_data)))\n        else:\n            feature_idx = np.random.randint(sub_data.shape[1])\n            (min_val, max_val) = (np.min(sub_data[:, feature_idx]), np.max(sub_data[:, feature_idx]))\n            if min_val == max_val:\n                return (sub_data, None, None, c(len(sub_data)))\n            threshold = np.random.uniform(min_val, max_val)\n            left_data = sub_data[sub_data[:, feature_idx] < threshold]\n            right_data = sub_data[sub_data[:, feature_idx] >= threshold]\n            left_tree = build_isolation_tree(left_data, height_limit - 1)\n            right_tree = build_isolation_tree(right_data, height_limit - 1)\n            return (None, feature_idx, threshold, left_tree, right_tree)\n\n    def path_length(x, tree, current_height):\n        (node_data, feature_idx, threshold, left_tree, right_tree) = tree\n        if node_data is not None:\n            return current_height + c(len(node_data))\n        elif x[feature_idx] < threshold:\n            return path_length(x, left_tree, current_height + 1)\n        else:\n            return path_length(x, right_tree, current_height + 1)\n    height_limit = math.ceil(math.log2(min(sample_size, len(data))))\n    isolation_forest = [build_isolation_tree(data[np.random.choice(len(data), size=min(sample_size, len(data)), replace=False)], height_limit) for _ in range(n_trees)]\n    path_lengths = np.array([np.mean([path_length(x, tree, 0) for tree in isolation_forest]) for x in data])\n    anomaly_scores = 2 ** (-path_lengths / c(len(data)))\n    threshold = np.percentile(anomaly_scores, (1 - epsilon) * 100)\n    outliers = np.where(anomaly_scores >= threshold)[0]\n    return sorted(outliers)"}
{"task_id": 566, "completion_id": 2, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    height_limit = math.ceil(math.log2(sample_size if sample_size < n_samples else n_samples))\n\n    def c(n):\n        if n == 1:\n            return 0\n        return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\n    def build_tree(subsample):\n        if len(subsample) <= 1 or len(subsample) <= height_limit:\n            return subsample\n        feature_idx = np.random.randint(n_features)\n        (min_val, max_val) = (np.min(subsample[:, feature_idx]), np.max(subsample[:, feature_idx]))\n        if min_val == max_val:\n            return subsample\n        threshold = np.random.uniform(min_val, max_val)\n        left = subsample[subsample[:, feature_idx] < threshold]\n        right = subsample[subsample[:, feature_idx] >= threshold]\n        node = {'feature': feature_idx, 'threshold': threshold, 'left': build_tree(left), 'right': build_tree(right)}\n        return node\n\n    def path_length(point, tree, depth=0):\n        if isinstance(tree, np.ndarray):\n            return depth + c(len(tree))\n        if point[tree['feature']] < tree['threshold']:\n            return path_length(point, tree['left'], depth + 1)\n        else:\n            return path_length(point, tree['right'], depth + 1)\n    trees = []\n    for _ in range(n_trees):\n        sample_indices = np.random.choice(n_samples, min(sample_size, n_samples), replace=False)\n        tree = build_tree(data[sample_indices])\n        trees.append(tree)\n    path_lengths = np.zeros(n_samples)\n    for point_idx in range(n_samples):\n        point = data[point_idx]\n        lengths = [path_length(point, tree) for tree in trees]\n        path_lengths[point_idx] = np.mean(lengths)\n    phi = 2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    anomaly_scores = 2 ** (-path_lengths / phi)\n    threshold = np.percentile(anomaly_scores, (1 - epsilon) * 100)\n    outliers = [idx for (idx, score) in enumerate(anomaly_scores) if score > threshold]\n    return sorted(outliers)"}
{"task_id": 566, "completion_id": 3, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n\n    def c(n):\n        if n == 1:\n            return 0\n        return 2 * np.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\n    def height_limit(n):\n        return math.ceil(math.log2(n))\n\n    class Node:\n\n        def __init__(self, feature=None, threshold=None, left=None, right=None, size=None):\n            self.feature = feature\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.size = size\n\n    def build_tree(X):\n        if X.shape[0] <= 1 or height_limit(X.shape[0]) == 0:\n            return Node(size=X.shape[0])\n        feature_idx = np.random.randint(X.shape[1])\n        (min_val, max_val) = (X[:, feature_idx].min(), X[:, feature_idx].max())\n        if min_val == max_val:\n            return Node(size=X.shape[0])\n        threshold = np.random.uniform(min_val, max_val)\n        left_idx = X[:, feature_idx] < threshold\n        right_idx = X[:, feature_idx] >= threshold\n        left_tree = build_tree(X[left_idx])\n        right_tree = build_tree(X[right_idx])\n        return Node(feature=feature_idx, threshold=threshold, left=left_tree, right=right_tree, size=X.shape[0])\n\n    def path_length(x, tree, depth=0):\n        if tree.size <= 1:\n            return depth + c(tree.size)\n        if x[tree.feature] < tree.threshold:\n            return path_length(x, tree.left, depth + 1)\n        else:\n            return path_length(x, tree.right, depth + 1)\n    trees = []\n    n_samples = data.shape[0]\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            sample = data\n        else:\n            indices = np.random.choice(n_samples, sample_size, replace=False)\n            sample = data[indices]\n        tree = build_tree(sample)\n        trees.append(tree)\n    avg_path_lengths = np.zeros(n_samples)\n    for (i, x) in enumerate(data):\n        path_lengths = [path_length(x, tree) for tree in trees]\n        avg_path_lengths[i] = np.mean(path_lengths)\n    E_avg_path_length = c(n_samples)\n    anomaly_scores = 2 ** (-avg_path_lengths / E_avg_path_length)\n    threshold = np.percentile(anomaly_scores, 100 * (1 - epsilon))\n    outliers = [i for (i, score) in enumerate(anomaly_scores) if score >= threshold]\n    return sorted(outliers)"}
{"task_id": 566, "completion_id": 4, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    if epsilon == 0:\n        return []\n\n    def c(n):\n        if n <= 1:\n            return 0\n        return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\n    def expected_path_length(n):\n        if n <= 1:\n            return 0\n        return c(n) + 2 * (np.log(n - 1) - (n - 1) / n)\n\n    def build_random_tree(subsample, height, height_limit):\n        if height >= height_limit or len(subsample) <= 1:\n            return ('leaf', len(subsample))\n        feature = np.random.randint(0, n_features)\n        feature_range = data[subsample, feature]\n        min_val = feature_range.min()\n        max_val = feature_range.max()\n        if min_val == max_val:\n            return ('leaf', len(subsample))\n        threshold = np.random.uniform(min_val, max_val)\n        left_indices = subsample[feature_range < threshold]\n        right_indices = subsample[feature_range >= threshold]\n        left_subtree = build_random_tree(left_indices, height + 1, height_limit)\n        right_subtree = build_random_tree(right_indices, height + 1, height_limit)\n        return ('node', feature, threshold, left_subtree, right_subtree)\n\n    def path_length(x, tree, height, height_limit):\n        if tree[0] == 'leaf':\n            return height + c(tree[1])\n        (feature, threshold, left_subtree, right_subtree) = (tree[1], tree[2], tree[3], tree[4])\n        if x[feature] < threshold:\n            return path_length(x, left_subtree, height + 1, height_limit)\n        else:\n            return path_length(x, right_subtree, height + 1, height_limit)\n    height_limit = math.ceil(math.log2(min(sample_size, n_samples)))\n    trees = []\n    for _ in range(n_trees):\n        sample_indices = np.random.choice(n_samples, min(sample_size, n_samples), replace=False)\n        tree = build_random_tree(sample_indices, 0, height_limit)\n        trees.append(tree)\n    path_lengths = np.zeros(n_samples)\n    for i in range(n_samples):\n        for tree in trees:\n            path_lengths[i] += path_length(data[i], tree, 0, height_limit)\n    path_lengths /= n_trees\n    mean_expected_length = expected_path_length(min(sample_size, n_samples))\n    anomaly_scores = 2 ** (-(path_lengths / mean_expected_length))\n    threshold_index = int((1 - epsilon) * n_samples)\n    sorted_indices = np.argsort(anomaly_scores)[::-1]\n    outliers = sorted_indices[:threshold_index]\n    return sorted(outliers)"}
{"task_id": 566, "completion_id": 5, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    (n_samples, _) = data.shape\n\n    def c(n):\n        if n <= 1:\n            return 0\n        return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\n    def build_isolation_tree(subsample):\n        if len(subsample) <= 1 or sample_size <= 1 or height_limit == 0:\n            return (None, len(subsample))\n        feature_idx = np.random.randint(data.shape[1])\n        (feature_min, feature_max) = (np.min(subsample[:, feature_idx]), np.max(subsample[:, feature_idx]))\n        if feature_min == feature_max:\n            return (None, len(subsample))\n        split_value = np.random.uniform(feature_min, feature_max)\n        left_subsample = subsample[subsample[:, feature_idx] < split_value]\n        right_subsample = subsample[subsample[:, feature_idx] >= split_value]\n        (left_tree, left_size) = build_isolation_tree(left_subsample)\n        (right_tree, right_size) = build_isolation_tree(right_subsample)\n        return ((feature_idx, split_value, left_tree, right_tree), None)\n\n    def path_length(x, tree, current_height=0):\n        if tree is None:\n            return current_height + c(len(x))\n        (feature_idx, split_value, left_tree, right_tree) = tree\n        if len(x) <= 1:\n            return current_height + c(len(x))\n        if x[0, feature_idx] < split_value:\n            return path_length(x[x[:, feature_idx] < split_value], left_tree, current_height + 1)\n        else:\n            return path_length(x[x[:, feature_idx] >= split_value], right_tree, current_height + 1)\n    height_limit = math.ceil(math.log2(sample_size))\n    trees = []\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            subsample = data\n        else:\n            subsample_indices = np.random.choice(n_samples, sample_size, replace=False)\n            subsample = data[subsample_indices]\n        (tree, _) = build_isolation_tree(subsample)\n        trees.append(tree)\n    avg_path_lengths = np.zeros(n_samples)\n    for tree in trees:\n        for i in range(n_samples):\n            x = data[i:i + 1]\n            avg_path_lengths[i] += path_length(x, tree)\n    avg_path_lengths /= n_trees\n    scores = np.power(2, -avg_path_lengths / c(n_samples))\n    threshold = np.percentile(scores, (1 - epsilon) * 100)\n    outliers = np.where(scores >= threshold)[0]\n    return sorted(outliers)"}
{"task_id": 566, "completion_id": 6, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n\n    def c(n):\n        if n == 1:\n            return 0\n        return 2.0 * math.log(n - 1.0) + 0.5772156649 - 2.0 * (n - 1.0) / n\n\n    def average_path_length(n_samples):\n        if n_samples > 2:\n            return c(n_samples) + 1\n        if n_samples == 2:\n            return 1\n        return 0\n\n    def build_isolation_tree(subsample):\n        if len(subsample) <= 1 or height >= height_limit:\n            return subsample\n        feature = np.random.choice(len(subsample[0]))\n        values = subsample[:, feature]\n        (min_val, max_val) = (np.min(values), np.max(values))\n        if min_val == max_val:\n            return subsample\n        split_val = np.random.uniform(min_val, max_val)\n        left_subsample = subsample[values < split_val]\n        right_subsample = subsample[values >= split_val]\n        return (feature, split_val, build_isolation_tree(left_subsample), build_isolation_tree(right_subsample))\n\n    def path_length(tree, x, height=0):\n        if isinstance(tree, np.ndarray):\n            return height + c(len(tree))\n        (feature, split_val, left, right) = tree\n        if x[feature] < split_val:\n            return path_length(left, x, height + 1)\n        else:\n            return path_length(right, x, height + 1)\n    (n_samples, n_features) = data.shape\n    height_limit = math.ceil(math.log2(min(sample_size, n_samples)))\n    trees = [build_isolation_tree(np.random.choice(data, sample_size, replace=False)) for _ in range(n_trees)]\n    anomaly_scores = np.zeros(n_samples)\n    for (i, x) in enumerate(data):\n        path_lengths = [path_length(tree, x) for tree in trees]\n        mean_path_length = np.mean(path_lengths)\n        anomaly_scores[i] = 2 ** (-mean_path_length / c(n_samples - 1))\n    threshold = np.percentile(anomaly_scores, 100 * (1 - epsilon))\n    outliers = [i for (i, score) in enumerate(anomaly_scores) if score > threshold]\n    return sorted(outliers)"}
{"task_id": 566, "completion_id": 7, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n\n    def c(n):\n        if n == 1:\n            return 0\n        return 2 * np.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\n    def average_path_length(n, path_length=0):\n        if n <= 1:\n            return path_length + c(n)\n        else:\n            return path_length + 1 + average_path_length(n / 2, path_length)\n\n    def build_isolation_tree(subsample, height_limit, current_height=0):\n        if current_height >= height_limit or len(subsample) <= 1:\n            return (subsample, None, None)\n        else:\n            feature_index = np.random.randint(data.shape[1])\n            min_val = subsample[:, feature_index].min()\n            max_val = subsample[:, feature_index].max()\n            if min_val == max_val:\n                return (subsample, None, None)\n            split_value = np.random.uniform(min_val, max_val)\n            left_subsample = subsample[subsample[:, feature_index] < split_value]\n            right_subsample = subsample[subsample[:, feature_index] >= split_value]\n            (left_tree, _, _) = build_isolation_tree(left_subsample, height_limit, current_height + 1)\n            (right_tree, _, _) = build_isolation_tree(right_subsample, height_limit, current_height + 1)\n            return (None, (feature_index, split_value), (left_tree, right_tree))\n\n    def get_path_length(x, tree, current_height=0):\n        if tree[0] is not None:\n            return current_height + c(len(tree[0]))\n        (feature_index, split_value) = tree[1]\n        (left_tree, right_tree) = tree[2]\n        if x[feature_index] < split_value:\n            return get_path_length(x, left_tree, current_height + 1)\n        else:\n            return get_path_length(x, right_tree, current_height + 1)\n    height_limit = math.ceil(math.log2(min(sample_size, data.shape[0])))\n    trees = []\n    for _ in range(n_trees):\n        if sample_size >= data.shape[0]:\n            sample_indices = np.arange(data.shape[0])\n        else:\n            sample_indices = np.random.choice(data.shape[0], sample_size, replace=False)\n        subsample = data[sample_indices]\n        tree = build_isolation_tree(subsample, height_limit)\n        trees.append(tree)\n    path_lengths = np.zeros(data.shape[0])\n    for tree in trees:\n        for (i, x) in enumerate(data):\n            path_lengths[i] += get_path_length(x, tree) / average_path_length(sample_size)\n    scores = 2 ** (-path_lengths)\n    threshold = np.percentile(scores, (1 - epsilon) * 100)\n    outliers = np.where(scores >= threshold)[0]\n    return sorted(outliers)"}
{"task_id": 566, "completion_id": 8, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n\n    def c(n):\n        if n == 1:\n            return 0\n        return 2 * math.log(n - 1) + 0.5772156649 - 2.0 * (n - 1) / n\n\n    def path_length(x, tree, height_limit, depth=0):\n        if not tree['left'] and (not tree['right']):\n            return depth + c(len(tree['data']))\n        feature = tree['feature']\n        threshold = tree['threshold']\n        if x[feature] < threshold:\n            return path_length(x, tree['left'], height_limit, depth + 1)\n        else:\n            return path_length(x, tree['right'], height_limit, depth + 1)\n\n    def build_tree(data, height_limit, current_depth=0):\n        if len(data) <= 1 or current_depth >= height_limit:\n            return {'data': data, 'left': None, 'right': None}\n        feature = np.random.randint(data.shape[1])\n        feature_range = data[:, feature].max() - data[:, feature].min()\n        if feature_range == 0:\n            return {'data': data, 'left': None, 'right': None}\n        threshold = data[:, feature].min() + np.random.rand() * feature_range\n        left_data = data[data[:, feature] < threshold]\n        right_data = data[data[:, feature] >= threshold]\n        return {'data': None, 'feature': feature, 'threshold': threshold, 'left': build_tree(left_data, height_limit, current_depth + 1), 'right': build_tree(right_data, height_limit, current_depth + 1)}\n    trees = []\n    n_samples = data.shape[0]\n    height_limit = math.ceil(math.log2(min(sample_size, n_samples)))\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            sampled_data = data\n        else:\n            sampled_data = data[np.random.choice(n_samples, sample_size, replace=False)]\n        trees.append(build_tree(sampled_data, height_limit))\n    average_path_lengths = np.zeros(n_samples)\n    for i in range(n_samples):\n        for tree in trees:\n            average_path_lengths[i] += path_length(data[i], tree, height_limit)\n    average_path_lengths /= n_trees\n    phi = 2 * math.log(n_samples - 1) - 2.0 * (n_samples - 1) / n_samples\n    anomaly_scores = 2 ** (-(average_path_lengths / phi))\n    threshold = np.percentile(anomaly_scores, 100 * (1 - epsilon))\n    outliers = [i for (i, score) in enumerate(anomaly_scores) if score > threshold]\n    return sorted(outliers)"}
{"task_id": 566, "completion_id": 9, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n\n    def c(n):\n        if n == 1:\n            return 0\n        else:\n            return 2 * np.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\n    def sample_data(data, sample_size):\n        if sample_size >= data.shape[0]:\n            return data\n        else:\n            return data[np.random.choice(data.shape[0], sample_size, replace=False)]\n\n    def itree(data):\n        if sample_size >= data.shape[0] or data.shape[0] == 1:\n            return None\n        if len(data) == 0:\n            return None\n        height_limit = math.ceil(np.log2(sample_size))\n        return create_isolation_tree(data, height_limit, 0)\n\n    def create_isolation_tree(data, height_limit, current_height):\n        if current_height >= height_limit or len(data) <= 1:\n            return {'size': len(data)}\n        feature = np.random.choice(data.shape[1])\n        (min_val, max_val) = (data[:, feature].min(), data[:, feature].max())\n        if min_val == max_val:\n            return {'size': len(data)}\n        threshold = np.random.uniform(min_val, max_val)\n        left_data = data[data[:, feature] < threshold]\n        right_data = data[data[:, feature] >= threshold]\n        node = {'feature': feature, 'threshold': threshold, 'left': create_isolation_tree(left_data, height_limit, current_height + 1), 'right': create_isolation_tree(right_data, height_limit, current_height + 1)}\n        return node\n\n    def path_length(node, x, current_path_length):\n        if not node or node['size'] <= 1:\n            return current_path_length + c(node['size'])\n        feature = node['feature']\n        threshold = node['threshold']\n        if x[feature] < threshold:\n            return path_length(node['left'], x, current_path_length + 1)\n        else:\n            return path_length(node['right'], x, current_path_length + 1)\n\n    def evaluate(x, trees):\n        path_lengths = [path_length(tree, x, 0) for tree in trees]\n        return np.mean(path_lengths)\n    trees = [itree(sample_data(data, sample_size)) for _ in range(n_trees)]\n    avg_path_lengths = [evaluate(x, trees) for x in data]\n    n_samples = data.shape[0]\n    if epsilon == 0:\n        return []\n    threshold = np.percentile(avg_path_lengths, 100 * (1 - epsilon))\n    outliers = [i for (i, path_length) in enumerate(avg_path_lengths) if path_length > threshold]\n    return sorted(outliers)"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    (n_samples, n_features) = X_train.shape\n    classes = np.unique(y_train)\n    n_classes = len(classes)\n    empirical_dist = defaultdict(float)\n    empirical_marginal = defaultdict(float)\n    for (x, y) in zip(X_train, y_train):\n        for (feature_index, feature_value) in enumerate(x):\n            empirical_dist[feature_index, feature_value, y] += 1\n            empirical_marginal[feature_index, feature_value] += 1\n    for key in empirical_dist:\n        empirical_dist[key] /= n_samples\n    for key in empirical_marginal:\n        empirical_marginal[key] /= n_samples\n    weights = defaultdict(float)\n\n    def compute_partition_function(x):\n        Z = 0\n        for y in classes:\n            score = 0\n            for (feature_index, feature_value) in enumerate(x):\n                score += weights[feature_index, feature_value, y]\n            Z += math.exp(score)\n        return Z\n\n    def compute_model_dist(x):\n        Z = compute_partition_function(x)\n        dist = {}\n        for y in classes:\n            score = 0\n            for (feature_index, feature_value) in enumerate(x):\n                score += weights[feature_index, feature_value, y]\n            dist[y] = math.exp(score) / Z\n        return dist\n    for iteration in range(n_iter):\n        expected_counts = defaultdict(float)\n        for x in X_train:\n            model_dist = compute_model_dist(x)\n            for y in classes:\n                for (feature_index, feature_value) in enumerate(x):\n                    expected_counts[feature_index, feature_value, y] += model_dist[y]\n        for key in expected_counts:\n            (feature_index, feature_value, _) = key\n            expected_counts[key] /= empirical_marginal[feature_index, feature_value]\n        max_update = 0\n        for key in weights:\n            update = empirical_dist[key] - expected_counts[key]\n            weights[key] += update\n            max_update = max(max_update, abs(update))\n        if max_update < epsilon:\n            break\n    predictions = []\n    for x in X_test:\n        model_dist = compute_model_dist(x)\n        predicted_label = max(model_dist, key=model_dist.get)\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 568, "completion_id": 1, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    labels = np.unique(y_train)\n    num_labels = len(labels)\n    (num_samples, num_features) = X_train.shape\n    label_to_index = {label: i for (i, label) in enumerate(labels)}\n    index_to_label = {i: label for (i, label) in enumerate(labels)}\n    weights = defaultdict(float)\n    empirical_joint = defaultdict(float)\n    empirical_marginal_x = defaultdict(float)\n    for (x, y) in zip(X_train, y_train):\n        y_index = label_to_index[y]\n        x_tuple = tuple(x)\n        empirical_joint[x_tuple, y] += 1\n        empirical_marginal_x[x_tuple] += 1\n    total_samples = len(X_train)\n    for ((x_tuple, y), count) in empirical_joint.items():\n        empirical_joint[x_tuple, y] = count / total_samples\n    for (x_tuple, count) in empirical_marginal_x.items():\n        empirical_marginal_x[x_tuple] = count / total_samples\n    expected_counts = defaultdict(float)\n    for ((x_tuple, y), p_xy) in empirical_joint.items():\n        for (feature_index, feature_value) in enumerate(x_tuple):\n            expected_counts[feature_index, feature_value, y] += p_xy\n    for iteration in range(n_iter):\n        model_marginal_x = defaultdict(float)\n        model_probs = defaultdict(float)\n        for x in np.unique(X_train, axis=0):\n            x_tuple = tuple(x)\n            model_marginal_x[x_tuple] = 0.0\n            for y in labels:\n                y_index = label_to_index[y]\n                score = 0.0\n                for (feature_index, feature_value) in enumerate(x_tuple):\n                    score += weights[feature_index, feature_value, y]\n                model_probs[x_tuple, y] = math.exp(score)\n                model_marginal_x[x_tuple] += model_probs[x_tuple, y]\n        for (x_tuple, y) in model_probs:\n            model_probs[x_tuple, y] /= model_marginal_x[x_tuple]\n        model_expected_counts = defaultdict(float)\n        for x in np.unique(X_train, axis=0):\n            x_tuple = tuple(x)\n            for y in labels:\n                y_index = label_to_index[y]\n                for (feature_index, feature_value) in enumerate(x_tuple):\n                    model_expected_counts[feature_index, feature_value, y] += empirical_marginal_x[x_tuple] * model_probs[x_tuple, y]\n        max_update = 0.0\n        for (feature_index, feature_value, y) in expected_counts:\n            p_data = expected_counts[feature_index, feature_value, y]\n            p_model = model_expected_counts[feature_index, feature_value, y]\n            update = math.log(p_data / p_model) if p_model > 0 else 0.0\n            weights[feature_index, feature_value, y] += update\n            max_update = max(max_update, abs(update))\n        if max_update < epsilon:\n            break\n    predictions = []\n    for x in X_test:\n        x_tuple = tuple(x)\n        best_label = None\n        best_score = -math.inf\n        for y in labels:\n            y_index = label_to_index[y]\n            score = 0.0\n            for (feature_index, feature_value) in enumerate(x_tuple):\n                score += weights[feature_index, feature_value, y]\n            if score > best_score:\n                best_score = score\n                best_label = y\n        predictions.append(best_label)\n    return predictions"}
{"task_id": 568, "completion_id": 2, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"Predict labels for test samples using Maximum Entropy Classifier with GIS.\"\"\"\n    empirical_counts = defaultdict(int)\n    label_counts = defaultdict(int)\n    feature_label_counts = defaultdict(int)\n    (num_samples, num_features) = X_train.shape\n    unique_labels = set(y_train)\n    for i in range(num_samples):\n        x = X_train[i]\n        y = y_train[i]\n        label_counts[y] += 1\n        for (feature_index, feature_value) in enumerate(x):\n            empirical_counts[feature_index, feature_value, y] += 1\n            feature_label_counts[feature_index, feature_value] += 1\n    empirical_probs = defaultdict(float)\n    for ((feature_index, feature_value, y), count) in empirical_counts.items():\n        empirical_probs[feature_index, feature_value, y] = count / label_counts[y]\n    weights = defaultdict(float)\n    for iteration in range(n_iter):\n        expected_counts = defaultdict(float)\n        for i in range(num_samples):\n            x = X_train[i]\n            partition_function = 0.0\n            label_probs = {}\n            for y in unique_labels:\n                score = 0.0\n                for (feature_index, feature_value) in enumerate(x):\n                    score += weights[feature_index, feature_value, y]\n                label_probs[y] = math.exp(score)\n                partition_function += label_probs[y]\n            for y in unique_labels:\n                label_prob = label_probs[y] / partition_function\n                for (feature_index, feature_value) in enumerate(x):\n                    expected_counts[feature_index, feature_value, y] += label_prob\n        for (feature_index, feature_value, y) in expected_counts:\n            expected_counts[feature_index, feature_value, y] /= num_samples\n        max_update = 0.0\n        for (feature_index, feature_value, y) in weights:\n            if feature_label_counts[feature_index, feature_value] > 0:\n                empirical_prob = empirical_probs[feature_index, feature_value, y]\n                expected_prob = expected_counts[feature_index, feature_value, y]\n                update = empirical_prob - expected_prob\n                weights[feature_index, feature_value, y] += update\n                max_update = max(max_update, abs(update))\n        if max_update < epsilon:\n            break\n    predictions = []\n    for x in X_test:\n        partition_function = 0.0\n        label_scores = {}\n        for y in unique_labels:\n            score = 0.0\n            for (feature_index, feature_value) in enumerate(x):\n                score += weights[feature_index, feature_value, y]\n            label_scores[y] = math.exp(score)\n            partition_function += label_scores[y]\n        predicted_label = max(unique_labels, key=lambda y: label_scores[y] / partition_function)\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 568, "completion_id": 3, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    labels = set(y_train)\n    feature_values = defaultdict(set)\n    for x in X_train:\n        for (feature_index, feature_value) in enumerate(x):\n            feature_values[feature_index].add(feature_value)\n    empirical_counts = defaultdict(float)\n    for (x, y) in zip(X_train, y_train):\n        for (feature_index, feature_value) in enumerate(x):\n            empirical_counts[feature_index, feature_value, y] += 1\n    n_samples = len(X_train)\n    empirical_probs = {k: v / n_samples for (k, v) in empirical_counts.items()}\n    label_counts = defaultdict(float)\n    for y in y_train:\n        label_counts[y] += 1\n    label_probs = {y: count / n_samples for (y, count) in label_counts.items()}\n    weights = defaultdict(float)\n    for iteration in range(n_iter):\n        model_counts = defaultdict(float)\n        model_probs = defaultdict(float)\n        unnormalized_probs = defaultdict(float)\n        for x in X_train:\n            for y in labels:\n                score = 0.0\n                for (feature_index, feature_value) in enumerate(x):\n                    score += weights[feature_index, feature_value, y]\n                unnormalized_probs[tuple(x), y] = math.exp(score)\n        normalization_factors = defaultdict(float)\n        for (x, y) in unnormalized_probs.keys():\n            normalization_factors[x] += unnormalized_probs[x, y]\n        for (x, y) in unnormalized_probs.keys():\n            model_probs[x, y] = unnormalized_probs[x, y] / normalization_factors[x]\n        for (x, y) in model_probs.keys():\n            for (feature_index, feature_value) in enumerate(x):\n                model_counts[feature_index, feature_value, y] += model_probs[x, y]\n        total_count = sum(model_counts.values())\n        model_expectations = {k: v / total_count for (k, v) in model_counts.items()}\n        delta = 0.0\n        for (feature_index, feature_value, y) in weights.keys():\n            empirical_prob = empirical_probs.get((feature_index, feature_value, y), 0)\n            model_expectation = model_expectations.get((feature_index, feature_value, y), 0)\n            update = empirical_prob - model_expectation\n            weights[feature_index, feature_value, y] += update\n            delta = max(delta, abs(update))\n        if delta < epsilon:\n            break\n    predictions = []\n    for x in X_test:\n        max_prob = -np.inf\n        best_label = None\n        x_tuple = tuple(x)\n        for y in labels:\n            score = 0.0\n            for (feature_index, feature_value) in enumerate(x):\n                score += weights[feature_index, feature_value, y]\n            prob = math.exp(score) / normalization_factors[x_tuple]\n            if prob > max_prob:\n                max_prob = prob\n                best_label = y\n        predictions.append(best_label)\n    return predictions"}
{"task_id": 568, "completion_id": 4, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"Predicts the labels for the test set using a Maximum Entropy classifier trained with GIS.\"\"\"\n    (num_samples, num_features) = X_train.shape\n    labels = np.unique(y_train)\n    num_labels = len(labels)\n    label_to_index = {label: idx for (idx, label) in enumerate(labels)}\n    feature_value_pairs = defaultdict(lambda : defaultdict(int))\n    feature_value_count = defaultdict(int)\n    feature_label_pairs = defaultdict(lambda : defaultdict(int))\n    feature_label_count = defaultdict(int)\n    empirical_feature_label = defaultdict(lambda : defaultdict(float))\n    empirical_feature = defaultdict(float)\n    for (x, y) in zip(X_train, y_train):\n        label_idx = label_to_index[y]\n        for (feature_idx, feature_value) in enumerate(x):\n            feature_value_pairs[feature_idx][feature_value] += 1\n            feature_value_count[feature_idx] += 1\n            key = (feature_idx, feature_value, label_idx)\n            feature_label_pairs[key] += 1\n            feature_label_count[key] += 1\n    for (key, count) in feature_label_pairs.items():\n        (feature_idx, feature_value, label_idx) = key\n        empirical_feature_label[feature_idx][feature_value, label_idx] = count / feature_value_count[feature_idx]\n    for (feature_idx, count) in feature_value_count.items():\n        for (feature_value, label_idx) in feature_value_pairs[feature_idx].items():\n            empirical_feature[feature_idx, feature_value] = label_value_pairs[feature_idx][feature_value] / count\n    weights = defaultdict(float)\n    for iteration in range(n_iter):\n        conditional_prob = defaultdict(lambda : defaultdict(float))\n        for x in X_train:\n            Z_x = 0\n            label_probs = []\n            for label in labels:\n                label_idx = label_to_index[label]\n                score = 0\n                for (feature_idx, feature_value) in enumerate(x):\n                    key = (feature_idx, feature_value, label_idx)\n                    score += weights[key]\n                label_probs.append((label_idx, score))\n                Z_x += math.exp(score)\n            for (label_idx, score) in label_probs:\n                conditional_prob[tuple(x)][label_idx] = math.exp(score) / Z_x\n        new_weights = defaultdict(float)\n        max_update = 0\n        for (x, y) in zip(X_train, y_train):\n            label_idx = label_to_index[y]\n            for (feature_idx, feature_value) in enumerate(x):\n                key = (feature_idx, feature_value, label_idx)\n                emp_prob = empirical_feature_label[feature_idx][feature_value, label_idx]\n                model_prob = conditional_prob[tuple(x)][label_idx] * empirical_feature[feature_idx, feature_value]\n                new_weights[key] = weights[key] + math.log(emp_prob / model_prob) if emp_prob > 0 else weights[key]\n                update = abs(new_weights[key] - weights[key])\n                if update > max_update:\n                    max_update = update\n        weights = new_weights\n        if max_update < epsilon:\n            break\n    predictions = []\n    for x in X_test:\n        Z_x = 0\n        label_scores = []\n        for label in labels:\n            label_idx = label_to_index[label]\n            score = 0\n            for (feature_idx, feature_value) in enumerate(x):\n                key = (feature_idx, feature_value, label_idx)\n                score += weights[key]\n            label_scores.append((label_idx, score))\n            Z_x += math.exp(score)\n        predicted_label_idx = max(label_scores, key=lambda x: math.exp(x[1]) / Z_x)[0]\n        predictions.append(labels[predicted_label_idx].item())\n    return predictions"}
{"task_id": 568, "completion_id": 5, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"Trains a Maximum Entropy classifier using GIS and predicts labels for X_test.\"\"\"\n    feature_names = defaultdict(set)\n    for sample in X_train:\n        for (feature_index, feature_value) in enumerate(sample):\n            feature_names[feature_index].add(feature_value)\n    labels = set(y_train)\n    num_features = len(feature_names)\n    feature_id = {}\n    current_id = 0\n    for feature_index in range(num_features):\n        for feature_value in feature_names[feature_index]:\n            for label in labels:\n                feature_id[feature_index, feature_value, label] = current_id\n                current_id += 1\n    num_features_total = len(feature_id)\n    weights = np.zeros(num_features_total)\n    P_xy = defaultdict(float)\n    for (sample, label) in zip(X_train, y_train):\n        P_xy[tuple(sample), label] += 1\n    total_samples = len(X_train)\n    for key in P_xy:\n        P_xy[key] /= total_samples\n    P_x = defaultdict(float)\n    for sample in X_train:\n        P_x[tuple(sample)] += 1\n    for key in P_x:\n        P_x[key] /= total_samples\n\n    def calculate_P_y_given_x(sample, weights):\n        exponentiated_weights = defaultdict(float)\n        log_sum = -math.inf\n        for label in labels:\n            exp_sum = 0\n            for (feature_index, feature_value) in enumerate(sample):\n                feature_key = (feature_index, feature_value, label)\n                if feature_key in feature_id:\n                    exp_sum += weights[feature_id[feature_key]]\n            exponentiated_weights[label] = math.exp(exp_sum)\n            if exponentiated_weights[label] > log_sum:\n                log_sum = exponentiated_weights[label]\n        Z_x = sum((exponentiated_weights[label] / log_sum for label in labels)) * log_sum\n        P_y_given_x = {label: exponentiated_weights[label] / Z_x for label in labels}\n        return P_y_given_x\n    for iteration in range(n_iter):\n        expected_counts = np.zeros(num_features_total)\n        for (sample, label) in P_xy.keys():\n            P_y_given_x = calculate_P_y_given_x(sample, weights)\n            for (feature_index, feature_value) in enumerate(sample):\n                feature_key = (feature_index, feature_value, label)\n                if feature_key in feature_id:\n                    expected_counts[feature_id[feature_key]] += P_xy[sample, label] * P_y_given_x[label]\n        actual_counts = np.zeros(num_features_total)\n        for sample in P_x.keys():\n            for label in labels:\n                P_y_given_x = calculate_P_y_given_x(sample, weights)\n                for (feature_index, feature_value) in enumerate(sample):\n                    feature_key = (feature_index, feature_value, label)\n                    if feature_key in feature_id:\n                        actual_counts[feature_id[feature_key]] += P_x[sample] * P_y_given_x[label]\n        new_weights = weights + np.log(expected_counts / actual_counts)\n        max_update = np.max(np.abs(new_weights - weights))\n        weights = new_weights\n        if max_update < epsilon:\n            break\n    predictions = []\n    for sample in X_test:\n        P_y_given_x = calculate_P_y_given_x(sample, weights)\n        predicted_label = max(P_y_given_x, key=P_y_given_x.get)\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 568, "completion_id": 6, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"Predict labels for test data using the Maximum Entropy Classifier with GIS.\"\"\"\n    labels = np.unique(y_train)\n    num_features = X_train.shape[1]\n    num_labels = len(labels)\n    weights = defaultdict(float)\n    label_to_index = {label: idx for (idx, label) in enumerate(labels)}\n    empirical_counts = defaultdict(float)\n    total_counts = defaultdict(float)\n    for (x, y) in zip(X_train, y_train):\n        y_idx = label_to_index[y]\n        for (feature_idx, feature_value) in enumerate(x):\n            key = (feature_idx, feature_value, y)\n            empirical_counts[key] += 1.0\n            total_counts[feature_idx, feature_value] += 1.0\n    for key in empirical_counts:\n        (feature_idx, feature_value, y) = key\n        empirical_counts[key] /= total_counts[feature_idx, feature_value]\n    for iteration in range(n_iter):\n        Z = defaultdict(float)\n        for (idx, x) in enumerate(X_train):\n            Z[idx] = 0.0\n            for y in labels:\n                y_idx = label_to_index[y]\n                score = 0.0\n                for (feature_idx, feature_value) in enumerate(x):\n                    key = (feature_idx, feature_value, y)\n                    score += weights[key]\n                Z[idx] += math.exp(score)\n        expected_counts = defaultdict(float)\n        for (idx, x) in enumerate(X_train):\n            for y in labels:\n                y_idx = label_to_index[y]\n                score = 0.0\n                for (feature_idx, feature_value) in enumerate(x):\n                    key = (feature_idx, feature_value, y)\n                    score += weights[key]\n                prob = math.exp(score) / Z[idx]\n                for (feature_idx, feature_value) in enumerate(x):\n                    key = (feature_idx, feature_value, y)\n                    expected_counts[key] += prob\n        max_update = 0.0\n        for key in empirical_counts:\n            (feature_idx, feature_value, y) = key\n            if feature_idx < num_features:\n                empirical_prob = empirical_counts[key]\n                expected_prob = expected_counts[key] / X_train.shape[0]\n                weight_update = math.log(empirical_prob / expected_prob) - weights[key]\n                weights[key] += weight_update\n                max_update = max(max_update, abs(weight_update))\n        if max_update < epsilon:\n            break\n    predictions = []\n    for x in X_test:\n        best_label = None\n        best_score = -float('inf')\n        for y in labels:\n            score = 0.0\n            for (feature_idx, feature_value) in enumerate(x):\n                key = (feature_idx, feature_value, y)\n                score += weights[key]\n            if score > best_score:\n                best_score = score\n                best_label = y\n        predictions.append(best_label)\n    return predictions"}
{"task_id": 568, "completion_id": 7, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"Predict labels for X_test using a Maximum Entropy classifier trained on X_train and y_train.\"\"\"\n    N = len(X_train)\n    D = X_train.shape[1]\n    labels = set(y_train)\n    feature_value_counts = defaultdict(int)\n    empirical_label_counts = defaultdict(int)\n    for (x, y) in zip(X_train, y_train):\n        empirical_label_counts[y] += 1\n        for (feature_index, feature_value) in enumerate(x):\n            feature_value_counts[feature_index, feature_value, y] += 1\n    empirical_label_dist = {y: count / N for (y, count) in empirical_label_counts.items()}\n    empirical_feature_value_dist = {(feature_index, feature_value, y): count / N for ((feature_index, feature_value, y), count) in feature_value_counts.items()}\n    weights = defaultdict(lambda : 0.0)\n    for iteration in range(n_iter):\n        model_label_dist = defaultdict(float)\n        for x in X_train:\n            Z_x = 0.0\n            for y in labels:\n                score = 0.0\n                for (feature_index, feature_value) in enumerate(x):\n                    score += weights[feature_index, feature_value, y]\n                Z_x += math.exp(score)\n            for y in labels:\n                score = 0.0\n                for (feature_index, feature_value) in enumerate(x):\n                    score += weights[feature_index, feature_value, y]\n                model_label_dist[tuple(x), y] = math.exp(score) / Z_x\n        model_feature_value_dist = defaultdict(float)\n        for ((x, y), prob) in model_label_dist.items():\n            for (feature_index, feature_value) in enumerate(x):\n                model_feature_value_dist[feature_index, feature_value, y] += prob\n        total = sum(model_feature_value_dist.values())\n        model_feature_value_dist = {k: v / total for (k, v) in model_feature_value_dist.items()}\n        max_update = 0.0\n        for (feature_index, feature_value, y) in empirical_feature_value_dist:\n            empirical_prob = empirical_feature_value_dist[feature_index, feature_value, y]\n            model_prob = model_feature_value_dist.get((feature_index, feature_value, y), 0.0)\n            delta = empirical_prob - model_prob\n            if abs(delta) > max_update:\n                max_update = abs(delta)\n            weights[feature_index, feature_value, y] += delta\n        if max_update < epsilon:\n            print(f'Converged after {iteration + 1} iterations.')\n            break\n    else:\n        print(f'Reached maximum number of iterations: {n_iter}.')\n    predictions = []\n    for x in X_test:\n        Z_x = 0.0\n        best_score = float('-inf')\n        best_label = None\n        for y in labels:\n            score = 0.0\n            for (feature_index, feature_value) in enumerate(x):\n                score += weights[feature_index, feature_value, y]\n            Z_x += math.exp(score)\n            if score > best_score:\n                best_score = score\n                best_label = y\n        predictions.append(best_label)\n    return predictions"}
{"task_id": 568, "completion_id": 8, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"Predicts the labels for X_test using a Maximum Entropy Classifier trained on X_train and y_train.\"\"\"\n    (n_samples, n_features) = X_train.shape\n    labels = set(y_train)\n    feature_counts = defaultdict(int)\n    feature_label_counts = defaultdict(int)\n    label_counts = defaultdict(int)\n    for (x, y) in zip(X_train, y_train):\n        label_counts[y] += 1\n        for (feature_index, feature_value) in enumerate(x):\n            feature_counts[feature_index, feature_value] += 1\n            feature_label_counts[feature_index, feature_value, y] += 1\n    weights = defaultdict(float)\n    for iteration in range(n_iter):\n        empirical_expectations = defaultdict(float)\n        for (feature_index, feature_value) in feature_counts:\n            for y in labels:\n                empirical_expectations[feature_index, feature_value, y] = feature_label_counts[feature_index, feature_value, y] / label_counts[y]\n        model_expectations = defaultdict(float)\n        for (sample, y) in zip(X_train, y_train):\n            Z_x = sum((math.exp(sum((weights[feature_index, feature_value, y_prime] for (feature_index, feature_value) in enumerate(sample)))) for y_prime in labels))\n            for (feature_index, feature_value) in enumerate(sample):\n                for y in labels:\n                    model_expectations[feature_index, feature_value, y] += math.exp(sum((weights[fi, fv, y] for (fi, fv) in enumerate(sample)))) / Z_x / n_samples\n        max_update = 0\n        for (feature_index, feature_value, y) in feature_counts:\n            new_weight = math.log(empirical_expectations[feature_index, feature_value, y] / model_expectations[feature_index, feature_value, y])\n            update = abs(new_weight - weights[feature_index, feature_value, y])\n            max_update = max(max_update, update)\n            weights[feature_index, feature_value, y] = new_weight\n        if max_update < epsilon:\n            break\n    predictions = []\n    for sample in X_test:\n        max_prob = -float('inf')\n        predicted_label = None\n        for y in labels:\n            log_prob = sum((weights[feature_index, feature_value, y] for (feature_index, feature_value) in enumerate(sample)))\n            if log_prob > max_prob:\n                max_prob = log_prob\n                predicted_label = y\n        predictions.append(predicted_label)\n    return predictions"}
{"task_id": 568, "completion_id": 9, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    labels = np.unique(y_train)\n    num_labels = len(labels)\n    feature_indices = range(X_train.shape[1])\n    feature_values = {i: np.unique(X_train[:, i]) for i in feature_indices}\n    weights = defaultdict(float)\n\n    def feature_function(x, y, feature_index, feature_value):\n        return 1.0 if x[feature_index] == feature_value and y == y else 0.0\n    empirical_expectations = defaultdict(float)\n    for (x, y) in zip(X_train, y_train):\n        for feature_index in feature_indices:\n            for feature_value in feature_values[feature_index]:\n                empirical_expectations[feature_index, feature_value, y] += feature_function(x, y, feature_index, feature_value)\n    for key in empirical_expectations:\n        empirical_expectations[key] /= len(X_train)\n\n    def normalizer(x):\n        z = 0.0\n        for y in labels:\n            score = 0.0\n            for feature_index in feature_indices:\n                for feature_value in feature_values[feature_index]:\n                    score += weights[feature_index, feature_value, y] * feature_function(x, y, feature_index, feature_value)\n            z += math.exp(score)\n        return z\n\n    def expected_features(p):\n        expected = defaultdict(float)\n        for x in X_train:\n            Z_x = normalizer(x)\n            for y in labels:\n                for feature_index in feature_indices:\n                    for feature_value in feature_values[feature_index]:\n                        score = 0.0\n                        for y_inner in labels:\n                            score_inner = 0.0\n                            for feature_index_inner in feature_indices:\n                                for feature_value_inner in feature_values[feature_index_inner]:\n                                    score_inner += weights[feature_index_inner, feature_value_inner, y_inner] * feature_function(x, y_inner, feature_index_inner, feature_value_inner)\n                            score_inner = math.exp(score_inner) / Z_x\n                            if y_inner == y:\n                                score += score_inner * feature_function(x, y, feature_index, feature_value)\n                        expected[feature_index, feature_value, y] += score * p[x]\n        return expected\n    p = defaultdict(float)\n    for x in X_train:\n        p[x] += 1.0 / len(X_train)\n    for _ in range(n_iter):\n        expected = expected_features(p)\n        max_update = 0.0\n        for feature_index in feature_indices:\n            for feature_value in feature_values[feature_index]:\n                for y in labels:\n                    key = (feature_index, feature_value, y)\n                    old_weight = weights[key]\n                    new_weight = old_weight + math.log(empirical_expectations[key] / expected[key]) if expected[key] > 0 else old_weight\n                    weights[key] = new_weight\n                    max_update = max(max_update, abs(new_weight - old_weight))\n        if max_update < epsilon:\n            break\n\n    def predict(x):\n        max_score = -np.inf\n        predicted_y = None\n        for y in labels:\n            score = 0.0\n            for feature_index in feature_indices:\n                for feature_value in feature_values[feature_index]:\n                    score += weights[feature_index, feature_value, y] * feature_function(x, y, feature_index, feature_value)\n            if score > max_score:\n                max_score = score\n                predicted_y = y\n        return predicted_y\n    predictions = [predict(x) for x in X_test]\n    return predictions"}
{"task_id": 569, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    if not data:\n        return ([], set())\n    num_documents = len(data)\n    word_doc_presence = Counter()\n    for (_, words) in data:\n        unique_words = set(words)\n        word_doc_presence.update(unique_words)\n    word_freq_ratios = [(word, round(count / num_documents, 4)) for (word, count) in word_doc_presence.items()]\n    word_freq_ratios.sort(key=lambda x: x[1], reverse=True)\n    if cut_off is None or cut_off >= len(word_freq_ratios):\n        most_common_words = set((word for (word, _) in word_freq_ratios))\n    elif cut_off == 0:\n        most_common_words = set()\n    else:\n        most_common_words = set((word for (word, _) in word_freq_ratios[:cut_off]))\n    return (word_freq_ratios, most_common_words)"}
{"task_id": 569, "completion_id": 1, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                 ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    if not data:\n        return ([], set())\n    total_docs = len(data)\n    word_doc_count = Counter()\n    for (_, words) in data:\n        unique_words_in_doc = set(words)\n        word_doc_count.update(unique_words_in_doc)\n    word_df_ratios = [(word, round(count / total_docs, 4)) for (word, count) in word_doc_count.items()]\n    word_df_ratios.sort(key=lambda x: x[1], reverse=True)\n    if cut_off is None:\n        top_words = set((word for (word, _) in word_df_ratios))\n    elif cut_off == 0:\n        top_words = set()\n    else:\n        top_words = set((word for (word, _) in word_df_ratios[:cut_off]))\n    return (word_df_ratios, top_words)"}
{"task_id": 569, "completion_id": 2, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                 ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_documents = len(data)\n    word_doc_count = Counter()\n    for (_, words) in data:\n        unique_words_in_doc = set(words)\n        word_doc_count.update(unique_words_in_doc)\n    doc_freq_ratios = [(word, round(count / total_documents, 4)) for (word, count) in word_doc_count.items()]\n    doc_freq_ratios.sort(key=lambda x: x[1], reverse=True)\n    if cut_off is None or cut_off >= len(doc_freq_ratios):\n        most_common_words = {word for (word, _) in doc_freq_ratios}\n    elif cut_off == 0:\n        most_common_words = set()\n    else:\n        most_common_words = {word for (word, _) in doc_freq_ratios[:cut_off]}\n    return (doc_freq_ratios, most_common_words)"}
{"task_id": 569, "completion_id": 3, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_documents = len(data)\n    word_doc_count = Counter()\n    for (_, words) in data:\n        unique_words = set(words)\n        word_doc_count.update(unique_words)\n    word_freq_ratios = [(word, round(count / total_documents, 4)) for (word, count) in word_doc_count.items()]\n    word_freq_ratios.sort(key=lambda x: x[1], reverse=True)\n    if cut_off is None:\n        top_words = {word for (word, _) in word_freq_ratios}\n    else:\n        top_words = {word for (word, _) in word_freq_ratios[:cut_off]}\n    return (word_freq_ratios, top_words)"}
{"task_id": 569, "completion_id": 4, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    if not data:\n        return ([], set())\n    total_documents = len(data)\n    document_word_presence = Counter()\n    for (_, words) in data:\n        unique_words_in_doc = set(words)\n        document_word_presence.update(unique_words_in_doc)\n    document_frequency = [(word, round(count / total_documents, 4)) for (word, count) in document_word_presence.items()]\n    document_frequency.sort(key=lambda x: x[1], reverse=True)\n    if cut_off is None:\n        top_words = {word for (word, _) in document_frequency}\n    else:\n        top_words = {word for (word, _) in document_frequency[:cut_off]}\n    return (document_frequency, top_words)"}
{"task_id": 569, "completion_id": 5, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                 ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    if not data:\n        return ([], set())\n    total_documents = len(data)\n    word_doc_count = Counter()\n    for (_, words) in data:\n        unique_words = set(words)\n        word_doc_count.update(unique_words)\n    word_ratios = [(word, round(count / total_documents, 4)) for (word, count) in word_doc_count.items()]\n    word_ratios.sort(key=lambda x: x[1], reverse=True)\n    if cut_off is None or cut_off >= len(word_ratios):\n        most_common_words = set((word for (word, _) in word_ratios))\n    elif cut_off == 0:\n        most_common_words = set()\n    else:\n        most_common_words = set((word for (word, _) in word_ratios[:cut_off]))\n    return (word_ratios, most_common_words)"}
{"task_id": 569, "completion_id": 6, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_documents = len(data)\n    word_in_docs = set()\n    for (_, words) in data:\n        word_in_docs.update(words)\n    doc_frequency = Counter()\n    for word in word_in_docs:\n        doc_frequency[word] = sum((1 for (_, words) in data if word in words))\n    doc_frequency_ratio = [(word, round(count / total_documents, 4)) for (word, count) in doc_frequency.items()]\n    doc_frequency_ratio.sort(key=lambda x: x[1], reverse=True)\n    if cut_off is None:\n        most_common_words = set((word for (word, _) in doc_frequency_ratio))\n    elif cut_off == 0:\n        most_common_words = set()\n    else:\n        most_common_words = set((word for (word, _) in doc_frequency_ratio[:cut_off]))\n    return (doc_frequency_ratio, most_common_words)"}
{"task_id": 569, "completion_id": 7, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_documents = len(data)\n    word_sets = [set(words) for (_, words) in data]\n    word_counter = Counter()\n    for word_set in word_sets:\n        word_counter.update(word_set)\n    document_frequency = [(word, round(count / total_documents, 4)) for (word, count) in word_counter.items()]\n    document_frequency.sort(key=lambda x: x[1], reverse=True)\n    if cut_off is None or cut_off >= len(document_frequency):\n        most_common_words = {word for (word, _) in document_frequency}\n    else:\n        most_common_words = {word for (word, _) in document_frequency[:cut_off]}\n    return (document_frequency, most_common_words)\ndata = [(1, ['apple', 'banana', 'apple']), (2, ['banana', 'orange']), (3, ['apple', 'orange', 'banana', 'grape']), (4, ['grape', 'apple'])]"}
{"task_id": 569, "completion_id": 8, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_documents = len(data)\n    word_in_document = Counter()\n    all_words = set()\n    for (_, words) in data:\n        unique_words_in_doc = set(words)\n        all_words.update(unique_words_in_doc)\n        word_in_document.update(unique_words_in_doc)\n    df_ratios = [(word, round(count / total_documents, 4)) for (word, count) in word_in_document.items()]\n    df_ratios.sort(key=lambda x: x[1], reverse=True)\n    if cut_off is None:\n        most_common_words = all_words\n    else:\n        most_common_words = set((word for (word, _) in df_ratios[:cut_off]))\n    return (df_ratios, most_common_words)"}
{"task_id": 569, "completion_id": 9, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    if not data:\n        return ([], set())\n    total_documents = len(data)\n    word_doc_count = Counter()\n    for (_, words) in data:\n        unique_words_in_doc = set(words)\n        word_doc_count.update(unique_words_in_doc)\n    word_freq_ratios = [(word, round(count / total_documents, 4)) for (word, count) in word_doc_count.items()]\n    word_freq_ratios.sort(key=lambda x: x[1], reverse=True)\n    if cut_off is None or cut_off >= len(word_freq_ratios):\n        most_common_words = {word for (word, _) in word_freq_ratios}\n    else:\n        most_common_words = {word for (word, _) in word_freq_ratios[:cut_off]}\n    return (word_freq_ratios, most_common_words)"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.sum(alpha * y * X.T, axis=1)\n    margins = y - np.dot(X, w)\n    b = np.mean(margins[np.isclose(alpha, 0, atol=1e-05)])\n    w_rounded = [round(weight, 4) for weight in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 571, "completion_id": 1, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = X.T @ (alpha * y)\n    b = np.mean(y - X @ w)\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    w_list = w_rounded.tolist()\n    return (w_list, b_rounded)"}
{"task_id": 571, "completion_id": 2, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, alpha * y)\n    support_vector_indices = alpha > 0\n    if np.any(support_vector_indices):\n        b = np.mean(y[support_vector_indices] - np.dot(X[support_vector_indices], w))\n    else:\n        b = 0.0\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    w_list = w_rounded.tolist()\n    return (w_list, b_rounded)"}
{"task_id": 571, "completion_id": 3, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, alpha * y)\n    b = np.mean(y - np.dot(X, w))\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    w_list = w_rounded.tolist()\n    return (w_list, b_rounded)"}
{"task_id": 571, "completion_id": 4, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.sum(alpha * y[:, np.newaxis] * X, axis=0)\n    b_values = y - np.dot(X, w)\n    b = np.mean(b_values[alpha > 0])\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    w_list = w_rounded.tolist()\n    return (w_list, b_rounded)"}
{"task_id": 571, "completion_id": 5, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, alpha * y)\n    b = np.mean(y - np.dot(X, w))\n    w_rounded = [round(value, 4) for value in w]\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 571, "completion_id": 6, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.sum(alpha * y * X, axis=0)\n    b = np.mean(y - np.dot(X, w))\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    w_list = w_rounded.tolist()\n    return (w_list, b_rounded)"}
{"task_id": 571, "completion_id": 7, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = X.T @ (alpha * y)\n    n = len(y)\n    b = np.mean(y - X @ w)\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    w_list = w_rounded.tolist()\n    return (w_list, b_rounded)"}
{"task_id": 571, "completion_id": 8, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, alpha * y)\n    b_terms = y - np.dot(X, w)\n    b = np.mean(b_terms)\n    w_list = [round(weight, 4) for weight in w]\n    b = round(b, 4)\n    return (w_list, b)"}
{"task_id": 571, "completion_id": 9, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = X.T @ (alpha * y)\n    w = np.round(w, 4)\n    conditions = (alpha > 0) & (alpha < 1)\n    if np.any(conditions):\n        b = np.mean(y[conditions] - np.dot(X[conditions], w))\n    else:\n        margins = y * np.dot(X, w)\n        soft_margin_indices = np.where(np.isclose(margins, 1))[0]\n        b = np.mean(y[soft_margin_indices] - np.dot(X[soft_margin_indices], w))\n    b = np.round(b, 4)\n    w_list = w.tolist()\n    return (w_list, b)"}
{"task_id": 572, "completion_id": 0, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) for each sample in the data.\"\"\"\n    n_samples = len(data)\n    distance_matrix = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            distance_matrix[i, j] = np.linalg.norm(data[i] - data[j])\n            distance_matrix[j, i] = distance_matrix[i, j]\n    k_distances = np.zeros(n_samples)\n    k_neighbors = [None] * n_samples\n    for i in range(n_samples):\n        distances = distance_matrix[i]\n        sorted_indices = np.argsort(distances)\n        k_distances[i] = distances[sorted_indices[k]]\n        k_neighbors[i] = sorted_indices[1:k + 1]\n\n    def reachability_distance(p, q):\n        return max(k_distances[q], distance_matrix[p, q])\n    lrd = np.zeros(n_samples)\n    for i in range(n_samples):\n        sum_reach_dist = sum((reachability_distance(i, q) for q in k_neighbors[i]))\n        lrd[i] = k / sum_reach_dist\n    lof_scores = np.zeros(n_samples)\n    for i in range(n_samples):\n        sum_lrd_neighbors = sum((lrd[q] for q in k_neighbors[i]))\n        lof_scores[i] = sum_lrd_neighbors / k / lrd[i]\n    lof_scores_rounded = np.round(lof_scores, 4).tolist()\n    outlier_indices = np.where(lof_scores > epsilon)[0].tolist()\n    outlier_indices.sort()\n    return (lof_scores_rounded, outlier_indices)"}
{"task_id": 572, "completion_id": 1, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) for each sample in the dataset.\"\"\"\n    n_samples = len(data)\n    distance_matrix = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j:\n                distance_matrix[i, j] = np.linalg.norm(data[i] - data[j])\n    k_distances = np.zeros(n_samples)\n    k_neighbors = []\n    for i in range(n_samples):\n        sorted_distances = np.sort(distance_matrix[i])\n        k_distances[i] = sorted_distances[k - 1]\n        k_neighbors.append(np.argsort(distance_matrix[i])[:k])\n    reachability_distances = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in k_neighbors[i]:\n            reachability_distances[i, j] = max(k_distances[j], distance_matrix[i, j])\n    lrd = np.zeros(n_samples)\n    for i in range(n_samples):\n        lrd[i] = k / np.sum(reachability_distances[i, k_neighbors[i]])\n    lof = np.zeros(n_samples)\n    for i in range(n_samples):\n        lof[i] = np.sum(lrd[k_neighbors[i]]) / k / lrd[i]\n    lof_rounded = np.round(lof, 4)\n    outlier_indices = np.where(lof_rounded > epsilon)[0]\n    outlier_indices_sorted = sorted(outlier_indices)\n    return (list(lof_rounded), outlier_indices_sorted)"}
{"task_id": 572, "completion_id": 2, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) for each sample in the dataset.\"\"\"\n    n = len(data)\n    distance_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                distance_matrix[i, j] = np.linalg.norm(data[i] - data[j])\n    k_distances = np.zeros(n)\n    k_neighbors = [None] * n\n    for i in range(n):\n        distances = distance_matrix[i]\n        sorted_indices = np.argsort(distances)\n        k_neighbors[i] = sorted_indices[1:k + 1]\n        k_distances[i] = distances[sorted_indices[k]]\n\n    def reach_dist(p, q):\n        return max(k_distances[q], distance_matrix[p, q])\n    lrd_scores = np.zeros(n)\n    for i in range(n):\n        lrd_numerator = sum((reach_dist(i, neighbor) for neighbor in k_neighbors[i]))\n        lrd_scores[i] = k / lrd_numerator if lrd_numerator != 0 else 0\n    lof_scores = np.zeros(n)\n    for i in range(n):\n        lof_numerator = sum((lrd_scores[neighbor] for neighbor in k_neighbors[i]))\n        lof_scores[i] = lof_numerator / (k * lrd_scores[i]) if lrd_scores[i] != 0 else 0\n    lof_scores_rounded = np.round(lof_scores, 4).tolist()\n    outlier_indices = [i for (i, score) in enumerate(lof_scores) if score > epsilon]\n    outlier_indices_sorted = sorted(outlier_indices)\n    return (lof_scores_rounded, outlier_indices_sorted)\ndata = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\nk = 3\nepsilon = 1.5"}
{"task_id": 572, "completion_id": 3, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Implement the Local Outlier Factor (LOF) algorithm from scratch.\"\"\"\n    n = data.shape[0]\n    distance_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance_matrix[i, j] = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n            distance_matrix[j, i] = distance_matrix[i, j]\n    k_distances = np.zeros(n)\n    k_neighbors = np.zeros((n, k), dtype=int)\n    for i in range(n):\n        distances = distance_matrix[i]\n        sorted_indices = np.argsort(distances)[1:k + 1]\n        k_distances[i] = distances[sorted_indices[-1]]\n        k_neighbors[i] = sorted_indices\n\n    def reach_dist_k(i, j):\n        return max(k_distances[j], distance_matrix[i, j])\n    lrd = np.zeros(n)\n    for i in range(n):\n        sum_reach_dist = 0\n        for j in k_neighbors[i]:\n            sum_reach_dist += reach_dist_k(i, j)\n        lrd[i] = k / sum_reach_dist\n    lof_scores = np.zeros(n)\n    for i in range(n):\n        sum_lrd_neighbors = 0\n        for j in k_neighbors[i]:\n            sum_lrd_neighbors += lrd[j]\n        lof_scores[i] = sum_lrd_neighbors / k / lrd[i]\n    lof_scores_rounded = np.round(lof_scores, 4)\n    outlier_indices = np.where(lof_scores_rounded > epsilon)[0]\n    outlier_indices_sorted = np.sort(outlier_indices)\n    return (list(lof_scores_rounded), list(outlier_indices_sorted))"}
{"task_id": 572, "completion_id": 4, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Implement the Local Outlier Factor (LOF) algorithm.\"\"\"\n    n = len(data)\n    dist_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            dist_matrix[i, j] = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n            dist_matrix[j, i] = dist_matrix[i, j]\n    k_distances = np.zeros(n)\n    k_indices = np.zeros((n, k), dtype=int)\n    for i in range(n):\n        distances = dist_matrix[i]\n        sorted_indices = np.argsort(distances)[1:k + 1]\n        k_distances[i] = distances[sorted_indices[-1]]\n        k_indices[i] = sorted_indices\n\n    def reach_dist(k, p, q, dist_matrix, k_distances):\n        return max(k_distances[q], dist_matrix[p, q])\n    lrd = np.zeros(n)\n    for i in range(n):\n        sum_reach_dist = 0\n        for q in k_indices[i]:\n            sum_reach_dist += reach_dist(k, i, q, dist_matrix, k_distances)\n        if sum_reach_dist == 0:\n            lrd[i] = np.inf\n        else:\n            lrd[i] = k / sum_reach_dist\n    lof_scores = np.zeros(n)\n    for i in range(n):\n        lrd_sum = 0\n        for q in k_indices[i]:\n            lrd_sum += lrd[q]\n        lof_scores[i] = lrd_sum / k / lrd[i]\n    lof_scores = np.round(lof_scores, 4)\n    outlier_indices = np.where(lof_scores > epsilon)[0]\n    outlier_indices = sorted(outlier_indices)\n    return (list(lof_scores), outlier_indices)\ndata = np.array([[1, 2], [2, 3], [3, 3], [8, 7], [8, 8], [25, 80]])\nk = 3\nepsilon = 1.5"}
{"task_id": 572, "completion_id": 5, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Implement the Local Outlier Factor (LOF) algorithm from scratch.\"\"\"\n    n_samples = len(data)\n    distance_matrix = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            distance_matrix[i, j] = distance_matrix[j, i] = np.linalg.norm(data[i] - data[j])\n    k_distances = np.zeros(n_samples)\n    k_neighbors = {}\n    for i in range(n_samples):\n        sorted_indices = np.argsort(distance_matrix[i])[1:k + 1]\n        k_distances[i] = distance_matrix[i, sorted_indices[-1]]\n        k_neighbors[i] = sorted_indices\n    reachability_distances = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in k_neighbors[i]:\n            reachability_distances[i, j] = max(k_distances[j], distance_matrix[i, j])\n    lrd = np.zeros(n_samples)\n    for i in range(n_samples):\n        lrd[i] = k / np.sum(reachability_distances[i, k_neighbors[i]])\n    lof = np.zeros(n_samples)\n    for i in range(n_samples):\n        lof[i] = np.sum(lrd[k_neighbors[i]]) / k / lrd[i]\n    lof_scores = np.round(lof, 4).tolist()\n    outlier_indices = np.where(lof > epsilon)[0]\n    outlier_indices = sorted(outlier_indices.tolist())\n    return (lof_scores, outlier_indices)"}
{"task_id": 572, "completion_id": 6, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) for each sample in the dataset.\"\"\"\n    n_samples = len(data)\n    distance_matrix = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            distance = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n            distance_matrix[i, j] = distance\n            distance_matrix[j, i] = distance\n    k_distances = np.zeros(n_samples)\n    k_neighbors = [set() for _ in range(n_samples)]\n    for i in range(n_samples):\n        distances = distance_matrix[i]\n        sorted_indices = np.argsort(distances)[1:k + 1]\n        k_distances[i] = distances[sorted_indices[-1]]\n        k_neighbors[i].update(sorted_indices)\n\n    def reachability_distance(p, q):\n        return max(k_distances[q], distance_matrix[p, q])\n    lrd = np.zeros(n_samples)\n    for i in range(n_samples):\n        sum_reach_dist = sum((reachability_distance(i, q) for q in k_neighbors[i]))\n        lrd[i] = k / sum_reach_dist\n    lof_scores = np.zeros(n_samples)\n    for i in range(n_samples):\n        sum_lrd_neighbors = sum((lrd[q] for q in k_neighbors[i]))\n        lof_scores[i] = sum_lrd_neighbors / k / lrd[i]\n    lof_scores_rounded = np.round(lof_scores, 4).tolist()\n    outlier_indices = [i for (i, score) in enumerate(lof_scores) if score > epsilon]\n    outlier_indices.sort()\n    return (lof_scores_rounded, outlier_indices)\ndata = np.array([[1, 2], [2, 3], [3, 4], [10, 10], [11, 11]])\nk = 3\nepsilon = 1.5"}
{"task_id": 572, "completion_id": 7, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) for each sample in the dataset.\"\"\"\n    n_samples = len(data)\n    distance_matrix = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            distance = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n            distance_matrix[i, j] = distance\n            distance_matrix[j, i] = distance\n    k_distances = np.zeros(n_samples)\n    k_neighbors = [None] * n_samples\n    for i in range(n_samples):\n        sorted_distances = np.argsort(distance_matrix[i])[1:k + 1]\n        k_distances[i] = distance_matrix[i, sorted_distances[-1]]\n        k_neighbors[i] = sorted_distances\n\n    def reach_dist(k_dist, dist):\n        return max(k_dist, dist)\n    lrd = np.zeros(n_samples)\n    for i in range(n_samples):\n        neighbor_indices = k_neighbors[i]\n        sum_reach_dist = 0.0\n        for neighbor in neighbor_indices:\n            sum_reach_dist += reach_dist(k_distances[neighbor], distance_matrix[i, neighbor])\n        lrd[i] = k / sum_reach_dist if sum_reach_dist > 0 else 0\n    lof = np.zeros(n_samples)\n    for i in range(n_samples):\n        neighbor_indices = k_neighbors[i]\n        sum_lrd_neighbors = 0.0\n        for neighbor in neighbor_indices:\n            sum_lrd_neighbors += lrd[neighbor]\n        lof[i] = sum_lrd_neighbors / k / lrd[i] if lrd[i] > 0 else 0\n    lof_scores = np.round(lof, 4).tolist()\n    outlier_indices = [i for (i, score) in enumerate(lof_scores) if score > epsilon]\n    outlier_indices.sort()\n    return (lof_scores, outlier_indices)"}
{"task_id": 572, "completion_id": 8, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Implement the Local Outlier Factor (LOF) algorithm from scratch.\"\"\"\n    n_samples = len(data)\n    dist_matrix = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            dist_matrix[i, j] = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n            dist_matrix[j, i] = dist_matrix[i, j]\n    k_distances = np.zeros(n_samples)\n    k_neighbor_indices = np.zeros((n_samples, k), dtype=int)\n    for i in range(n_samples):\n        sorted_indices = np.argsort(dist_matrix[i])\n        k_distances[i] = dist_matrix[i, sorted_indices[k]]\n        k_neighbor_indices[i] = sorted_indices[1:k + 1]\n    reach_dist = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in k_neighbor_indices[i]:\n            reach_dist[i, j] = max(k_distances[j], dist_matrix[i, j])\n    lrd = np.zeros(n_samples)\n    for i in range(n_samples):\n        lrd[i] = k / np.sum(reach_dist[i, k_neighbor_indices[i]])\n    lof_score = np.zeros(n_samples)\n    for i in range(n_samples):\n        lof_score[i] = np.sum(lrd[k_neighbor_indices[i]]) / k / lrd[i]\n    lof_score_rounded = np.round(lof_score, 4).tolist()\n    outlier_indices = np.where(lof_score > epsilon)[0]\n    outlier_indices_sorted = sorted(outlier_indices)\n    return (lof_score_rounded, outlier_indices_sorted)"}
{"task_id": 572, "completion_id": 9, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor for each sample in the dataset.\"\"\"\n\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n    n_samples = len(data)\n    distance_matrix = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            distance = euclidean_distance(data[i], data[j])\n            distance_matrix[i, j] = distance\n            distance_matrix[j, i] = distance\n    k_distances = np.zeros(n_samples)\n    k_neighbours = [[] for _ in range(n_samples)]\n    for i in range(n_samples):\n        sorted_distances = np.argsort(distance_matrix[i])\n        k_distances[i] = distance_matrix[i, sorted_distances[k]]\n        k_neighbours[i] = sorted_distances[1:k + 1]\n\n    def reachability_distance(p, q):\n        return max(k_distances[q], distance_matrix[p, q])\n    lrd = np.zeros(n_samples)\n    for i in range(n_samples):\n        sum_reach_dist = 0.0\n        for neighbor in k_neighbours[i]:\n            sum_reach_dist += reachability_distance(i, neighbor)\n        lrd[i] = k / sum_reach_dist if sum_reach_dist > 0 else 0.0\n    lof_scores = np.zeros(n_samples)\n    for i in range(n_samples):\n        if lrd[i] == 0:\n            lof_scores[i] = 0\n            continue\n        sum_lrd_neighbors = 0.0\n        for neighbor in k_neighbours[i]:\n            sum_lrd_neighbors += lrd[neighbor]\n        lof_scores[i] = sum_lrd_neighbors / k / lrd[i]\n    lof_scores = np.round(lof_scores, 4)\n    outlier_indices = np.where(lof_scores > epsilon)[0]\n    outlier_indices = sorted(outlier_indices)\n    return (list(lof_scores), outlier_indices)"}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    X_val = []\n    y_train = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train = np.random.uniform(base + 1, base + 9, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val = np.random.uniform(base + 1, base + 9, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        y_train_labels = np.full(n_train, c)\n        y_val_labels = np.full(n_val, c)\n        y_train.append(y_train_labels)\n        y_val.append(y_val_labels)\n    X_train = np.round(np.concatenate(X_train), 4)\n    X_val = np.round(np.concatenate(X_val), 4)\n    y_train = np.concatenate(y_train)\n    y_val = np.concatenate(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 1, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    X_val = []\n    y_train = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train = np.random.uniform(base + 1, base + 9, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        y_train.extend([c] * n_train)\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val = np.random.uniform(base + 1, base + 9, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        y_val.extend([c] * n_val)\n    X_train = np.round(np.vstack(X_train), 4)\n    X_val = np.round(np.vstack(X_val), 4)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 2, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train = np.random.uniform(base + 1, base + 9, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        y_train.append(np.full(n_train, c))\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val = np.random.uniform(base + 1, base + 9, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        y_val.append(np.full(n_val, c))\n    X_train = np.round(np.vstack(X_train), 4)\n    y_train = np.hstack(y_train)\n    X_val = np.round(np.vstack(X_val), 4)\n    y_val = np.hstack(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 3, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train = np.random.uniform(base + 1, base + 9, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        y_train.extend([c] * n_train)\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val = np.random.uniform(base + 1, base + 9, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        y_val.extend([c] * n_val)\n    X_train = np.round(np.concatenate(X_train), 4)\n    y_train = np.array(y_train)\n    X_val = np.round(np.concatenate(X_val), 4)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 4, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, (n_train,))\n        y_train = np.random.uniform(base + 1, base + 9, (n_train,))\n        x_val = np.random.uniform(base + 1, base + 9, (n_val,))\n        y_val = np.random.uniform(base + 1, base + 9, (n_val,))\n        X_train.append(np.column_stack((x_train, y_train)).round(4))\n        y_train.extend([c] * n_train)\n        X_val.append(np.column_stack((x_val, y_val)).round(4))\n        y_val.extend([c] * n_val)\n    X_train = np.vstack(X_train)\n    y_train = np.array(y_train)\n    X_val = np.vstack(X_val)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 5, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train = np.random.uniform(base + 1, base + 9, n_train)\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val = np.random.uniform(base + 1, base + 9, n_val)\n        X_train.append(np.column_stack((x_train, y_train)))\n        X_val.append(np.column_stack((x_val, y_val)))\n        y_train.extend([c] * n_train)\n        y_val.extend([c] * n_val)\n    X_train = np.round(np.vstack(X_train), 4)\n    X_val = np.round(np.vstack(X_val), 4)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 6, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train = np.random.uniform(base + 1, base + 9, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        y_train_labels = np.full(n_train, c)\n        y_train.append(y_train_labels)\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val = np.random.uniform(base + 1, base + 9, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        y_val_labels = np.full(n_val, c)\n        y_val.append(y_val_labels)\n    X_train = np.concatenate(X_train).round(4)\n    y_train = np.concatenate(y_train)\n    X_val = np.concatenate(X_val).round(4)\n    y_val = np.concatenate(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 7, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train = np.random.uniform(base + 1, base + 9, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        y_train_labels = np.full(n_train, c)\n        y_train.append(y_train_labels)\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val = np.random.uniform(base + 1, base + 9, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        y_val_labels = np.full(n_val, c)\n        y_val.append(y_val_labels)\n    X_train = np.concatenate(X_train).round(4)\n    y_train = np.concatenate(y_train)\n    X_val = np.concatenate(X_val).round(4)\n    y_val = np.concatenate(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 8, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train = np.random.uniform(base + 1, base + 9, n_train)\n        X_train.extend(np.column_stack((x_train, y_train)).round(4))\n        y_train.extend([c] * n_train)\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val = np.random.uniform(base + 1, base + 9, n_val)\n        X_val.extend(np.column_stack((x_val, y_val)).round(4))\n        y_val.extend([c] * n_val)\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_val = np.array(X_val)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 574, "completion_id": 9, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train = np.random.uniform(base + 1, base + 9, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        y_train_labels = np.full(n_train, c)\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val = np.random.uniform(base + 1, base + 9, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        y_val_labels = np.full(n_val, c)\n        y_train.extend(y_train_labels)\n        y_val.extend(y_val_labels)\n    X_train = np.round(np.concatenate(X_train), 4)\n    X_val = np.round(np.concatenate(X_val), 4)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 579, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centres = X[:k].copy()\n    for _ in range(max_iters):\n        labels = []\n        for point in X:\n            distances = np.linalg.norm(point - centres, axis=1)\n            closest_centre_index = np.argmin(distances)\n            labels.append(closest_centre_index)\n        new_centres = np.array([X[labels == i].mean(axis=0) if np.any(labels == i) else centres[i] for i in range(k)])\n        if np.array_equal(centres, new_centres):\n            break\n        centres = new_centres\n    centres = np.round(centres, 4).tolist()\n    return (labels, centres)"}
{"task_id": 579, "completion_id": 1, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centres = X[:k].copy()\n    labels = [-1] * len(X)\n    for _ in range(max_iters):\n        new_labels = []\n        for point in X:\n            distances = np.linalg.norm(point - centres, axis=1)\n            closest_centre_index = np.argmin(distances)\n            new_labels.append(closest_centre_index)\n        if new_labels == labels:\n            break\n        labels = new_labels\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n        for (label, point) in zip(labels, X):\n            new_centres[label] += point\n            counts[label] += 1\n        for i in range(k):\n            if counts[i] > 0:\n                new_centres[i] /= counts[i]\n        centres = new_centres\n    centres_rounded = np.round(centres, 4).tolist()\n    return (labels, centres_rounded)"}
{"task_id": 579, "completion_id": 2, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centres = X[:k]\n    for iteration in range(max_iters):\n        labels = []\n        for point in X:\n            distances = np.linalg.norm(point - centres, axis=1)\n            nearest_centre_index = np.argmin(distances)\n            labels.append(nearest_centre_index)\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n        for (label, point) in zip(labels, X):\n            new_centres[label] += point\n            counts[label] += 1\n        for i in range(k):\n            if counts[i] > 0:\n                new_centres[i] /= counts[i]\n            else:\n                new_centres[i] = centres[i]\n        if np.allclose(centres, new_centres):\n            break\n        centres = new_centres\n    centres = np.round(centres, 4).tolist()\n    return (labels, centres)"}
{"task_id": 579, "completion_id": 3, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centres = X[:k].copy()\n    labels = np.zeros(m, dtype=int)\n    for _ in range(max_iters):\n        new_labels = np.zeros(m, dtype=int)\n        for i in range(m):\n            distances = np.linalg.norm(X[i] - centres, axis=1)\n            new_labels[i] = np.argmin(distances)\n        if np.array_equal(new_labels, labels):\n            break\n        labels = new_labels\n        new_centres = np.zeros((k, d))\n        for j in range(k):\n            points_in_cluster = X[labels == j]\n            if len(points_in_cluster) > 0:\n                new_centres[j] = points_in_cluster.mean(axis=0)\n            else:\n                new_centres[j] = centres[j]\n        centres = new_centres\n    centres = np.round(centres, 4)\n    return (labels.tolist(), centres.tolist())"}
{"task_id": 579, "completion_id": 4, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centres = X[:k].copy()\n    for _ in range(max_iters):\n        labels = []\n        for point in X:\n            distances = np.linalg.norm(point - centres, axis=1)\n            labels.append(np.argmin(distances))\n        new_centres = np.array([X[labels == i].mean(axis=0) for i in range(k)])\n        if np.all(centres == new_centres):\n            break\n        centres = new_centres\n    centres = np.round(centres, 4).tolist()\n    return (labels, centres)"}
{"task_id": 579, "completion_id": 5, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centres = X[:k].copy()\n    for _ in range(max_iters):\n        labels = []\n        for point in X:\n            distances = np.linalg.norm(point - centres, axis=1)\n            min_index = np.argmin(distances)\n            labels.append(min_index)\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k)\n        for (label, point) in zip(labels, X):\n            new_centres[label] += point\n            counts[label] += 1\n        for i in range(k):\n            if counts[i] > 0:\n                new_centres[i] /= counts[i]\n            else:\n                new_centres[i] = centres[i]\n        if np.allclose(new_centres, centres):\n            break\n        centres = new_centres.copy()\n    centres = np.round(centres, 4).tolist()\n    return (labels, centres)"}
{"task_id": 579, "completion_id": 6, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centres = X[:k].copy()\n    for _ in range(max_iters):\n        labels = []\n        for point in X:\n            distances = np.linalg.norm(point - centres, axis=1)\n            nearest_centre_index = np.argmin(distances)\n            labels.append(nearest_centre_index)\n        new_centres = np.array([X[labels == i].mean(axis=0) for i in range(k)])\n        if np.allclose(centres, new_centres, atol=1e-05):\n            break\n        centres = new_centres\n    centres = centres.round(4).tolist()\n    return (labels, centres)"}
{"task_id": 579, "completion_id": 7, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centres = X[:k].copy()\n    for iteration in range(max_iters):\n        labels = []\n        for point in X:\n            distances = np.linalg.norm(point - centres, axis=1)\n            closest_centre_index = np.argmin(distances)\n            labels.append(closest_centre_index)\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n        for (label, point) in zip(labels, X):\n            new_centres[label] += point\n            counts[label] += 1\n        for i in range(k):\n            if counts[i] > 0:\n                new_centres[i] /= counts[i]\n            else:\n                new_centres[i] = centres[i]\n        if np.allclose(centres, new_centres):\n            break\n        centres = new_centres.copy()\n    centres = np.round(centres, 4).tolist()\n    return (labels, centres)"}
{"task_id": 579, "completion_id": 8, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centres = X[:k].copy()\n    for _ in range(max_iters):\n        labels = []\n        for point in X:\n            distances = np.linalg.norm(point - centres, axis=1)\n            closest_centre_index = np.argmin(distances)\n            labels.append(closest_centre_index)\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n        for (label, point) in zip(labels, X):\n            new_centres[label] += point\n            counts[label] += 1\n        for i in range(k):\n            if counts[i] > 0:\n                new_centres[i] /= counts[i]\n            else:\n                new_centres[i] = centres[i]\n        if np.array_equal(centres, new_centres):\n            break\n        centres = new_centres\n    rounded_centres = np.round(centres, 4).tolist()\n    return (labels, rounded_centres)"}
{"task_id": 579, "completion_id": 9, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centres = X[:k].copy()\n    for _ in range(max_iters):\n        labels = []\n        for point in X:\n            distances = np.linalg.norm(point - centres, axis=1)\n            nearest_centre_index = np.argmin(distances)\n            labels.append(nearest_centre_index)\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n        for (point, label) in zip(X, labels):\n            new_centres[label] += point\n            counts[label] += 1\n        for i in range(k):\n            if counts[i] > 0:\n                new_centres[i] /= counts[i]\n            else:\n                new_centres[i] = centres[i]\n        if np.array_equal(new_centres, centres):\n            break\n        centres = new_centres\n    rounded_centres = np.round(centres, 4).tolist()\n    return (labels, rounded_centres)"}
{"task_id": 581, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([round(w, 4) for w in weights], round(bias, 4))\n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residuals = y - predictions\n        gradient_weights = -2 * np.dot(X.T, residuals) + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        gradient_bias = -2 * np.sum(residuals)\n        weights -= learning_rate * gradient_weights / m\n        bias -= learning_rate * gradient_bias / m\n    return ([round(w, 4) for w in weights], round(bias, 4))"}
{"task_id": 581, "completion_id": 1, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([round(w, 4) for w in weights], round(bias, 4))\n    for _ in range(iterations):\n        y_pred = np.dot(X, weights) + bias\n        residuals = y - y_pred\n        grad_weights = -2 / m * np.dot(X.T, residuals) + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        grad_bias = -2 / m * np.sum(residuals)\n        weights -= learning_rate * grad_weights\n        bias -= learning_rate * grad_bias\n    return ([round(w, 4) for w in weights], round(bias, 4))"}
{"task_id": 581, "completion_id": 2, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([round(weight, 4) for weight in weights], round(bias, 4))\n    for _ in range(iterations):\n        y_pred = X @ weights + bias\n        residuals = y - y_pred\n        grad_weights = -2 * X.T @ residuals / m + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        grad_bias = -2 * np.sum(residuals) / m\n        weights -= learning_rate * grad_weights\n        bias -= learning_rate * grad_bias\n    return ([round(weight, 4) for weight in weights], round(bias, 4))"}
{"task_id": 581, "completion_id": 3, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to four decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return (weights.round(4).tolist(), round(bias, 4))\n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residuals = y - predictions\n        gradient_weights = -2 * np.dot(X.T, residuals) / m + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        gradient_bias = -2 * np.sum(residuals) / m\n        weights -= learning_rate * gradient_weights\n        bias -= learning_rate * gradient_bias\n    return (weights.round(4).tolist(), round(bias, 4))"}
{"task_id": 581, "completion_id": 4, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to four decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([round(w, 4) for w in weights], round(bias, 4))\n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residuals = y - predictions\n        dw = -2 * np.dot(X.T, residuals) / m + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        db = -2 * np.sum(residuals) / m\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n    return ([round(w, 4) for w in weights], round(bias, 4))"}
{"task_id": 581, "completion_id": 5, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([round(w, 4) for w in weights], round(bias, 4))\n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residuals = y - predictions\n        gradient_weights = -2 * np.dot(X.T, residuals) / m + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        gradient_bias = -2 * np.sum(residuals) / m\n        weights -= learning_rate * gradient_weights\n        bias -= learning_rate * gradient_bias\n    return ([round(w, 4) for w in weights], round(bias, 4))"}
{"task_id": 581, "completion_id": 6, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([round(w, 4) for w in weights], round(bias, 4))\n    for _ in range(iterations):\n        predictions = X @ weights + bias\n        residuals = y - predictions\n        gradient_weights = -2 * X.T @ residuals + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        gradient_bias = -2 * np.sum(residuals)\n        weights -= learning_rate / m * gradient_weights\n        bias -= learning_rate / m * gradient_bias\n    return ([round(w, 4) for w in weights], round(bias, 4))"}
{"task_id": 581, "completion_id": 7, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    w = np.zeros(n)\n    b = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([round(weight, 4) for weight in w], round(b, 4))\n    for _ in range(iterations):\n        y_pred = np.dot(X, w) + b\n        residuals = y - y_pred\n        grad_w = -2 / m * np.dot(X.T, residuals) + l1_penalty * np.sign(w) + 2 * l2_penalty * w\n        grad_b = -2 / m * np.sum(residuals)\n        w -= learning_rate * grad_w\n        b -= learning_rate * grad_b\n    return ([round(weight, 4) for weight in w], round(b, 4))"}
{"task_id": 581, "completion_id": 8, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([round(w, 4) for w in weights], round(bias, 4))\n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residuals = y - predictions\n        grad_w = -2 / m * np.dot(X.T, residuals) + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        grad_b = -2 / m * np.sum(residuals)\n        weights -= learning_rate * grad_w\n        bias -= learning_rate * grad_b\n    return ([round(w, 4) for w in weights], round(bias, 4))"}
{"task_id": 581, "completion_id": 9, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([round(w, 4) for w in weights], round(bias, 4))\n    for _ in range(iterations):\n        predictions = X.dot(weights) + bias\n        residuals = y - predictions\n        weights_grad = -2 * X.T.dot(residuals) + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        bias_grad = -2 * np.sum(residuals)\n        weights -= learning_rate * weights_grad / m\n        bias -= learning_rate * bias_grad / m\n    return ([round(w, 4) for w in weights], round(bias, 4))"}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n\n    def relu(z):\n        return np.maximum(0, z)\n    a = np.array(x)\n    for (l, weight_matrix) in enumerate(weights):\n        a = np.insert(a, 0, 1)\n        a = np.array(a)\n        z = np.dot(a, np.array(weight_matrix).T)\n        if l != len(weights) - 1:\n            a = relu(z)\n        else:\n            a = z\n    if len(a) == 1:\n        return round(a[0], 4)\n    else:\n        return [round(value, 4) for value in a]"}
{"task_id": 591, "completion_id": 1, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.array(x)\n    for L in range(len(weights)):\n        x = np.insert(x, 0, 1)\n        x = np.dot(weights[L], x)\n        if L != len(weights) - 1:\n            x = np.maximum(0, x)\n    result = np.round(x, 4)\n    return result.item() if result.size == 1 else result.tolist()"}
{"task_id": 591, "completion_id": 2, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n\n    def relu(z):\n        return np.maximum(0, z)\n    current_input = np.array(x, dtype=float)\n    for layer_weights in weights:\n        layer_weights_np = np.array(layer_weights, dtype=float)\n        current_input = np.insert(current_input, 0, 1)\n        z = np.dot(current_input, layer_weights_np.T)\n        if layer_weights is not weights[-1]:\n            current_input = relu(z)\n        else:\n            current_input = z\n    if current_input.size == 1:\n        return round(current_input.flat[0], 4)\n    else:\n        return [round(value, 4) for value in current_input.flat]"}
{"task_id": 591, "completion_id": 3, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    input_vector = np.array(x)\n    for (i, layer_weights) in enumerate(weights):\n        layer_weights = np.array(layer_weights)\n        biases = layer_weights[:, 0]\n        connections = layer_weights[:, 1:]\n        input_with_bias = np.insert(input_vector, 0, 1)\n        z = np.dot(input_with_bias, layer_weights.T)\n        if i == len(weights) - 1:\n            output = z\n        else:\n            output = np.maximum(0, z)\n        input_vector = output\n    rounded_output = np.round(output, 4)\n    if rounded_output.size == 1:\n        return float(rounded_output)\n    else:\n        return rounded_output.tolist()"}
{"task_id": 591, "completion_id": 4, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.array(x)\n    for (L, layer_weights) in enumerate(weights):\n        x = np.insert(x, 0, 1)\n        layer_weights_np = np.array(layer_weights)\n        x = np.dot(x, layer_weights_np.T)\n        if L < len(weights) - 1:\n            x = np.maximum(x, 0)\n    if len(x) == 1:\n        return round(float(x[0]), 4)\n    else:\n        return [round(float(val), 4) for val in x]"}
{"task_id": 591, "completion_id": 5, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.array(x, dtype=float)\n    for layer_weights in weights:\n        x = np.insert(x, 0, 1)\n        x = np.dot(x, np.array(layer_weights).T)\n        if layer_weights is not weights[-1]:\n            x = np.maximum(0, x)\n    x = np.round(x, 4)\n    return x[0] if x.size == 1 else x.tolist()"}
{"task_id": 591, "completion_id": 6, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    input_vector = np.array(x)\n    for (layer_index, layer_weights) in enumerate(weights):\n        input_vector = np.insert(input_vector, 0, 1)\n        layer_output = np.dot(layer_weights, input_vector)\n        if layer_index < len(weights) - 1:\n            layer_output = np.maximum(0, layer_output)\n        input_vector = layer_output\n    if len(input_vector) == 1:\n        return round(float(input_vector[0]), 4)\n    else:\n        return [round(float(value), 4) for value in input_vector]"}
{"task_id": 591, "completion_id": 7, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    current_input = np.array(x)\n    for L in range(len(weights)):\n        current_input = np.insert(current_input, 0, 1)\n        weight_matrix = np.array(weights[L])\n        z = np.dot(weight_matrix, current_input)\n        if L < len(weights) - 1:\n            current_input = np.maximum(0, z)\n        else:\n            current_input = z\n    result = np.round(current_input, 4)\n    return float(result) if result.size == 1 else result.tolist()"}
{"task_id": 591, "completion_id": 8, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.array(x)\n    for l in range(len(weights)):\n        layer_weights = np.array(weights[l])\n        x = np.insert(x, 0, 1)\n        x = layer_weights @ x\n        if l < len(weights) - 1:\n            x = np.maximum(0, x)\n    if len(x) == 1:\n        return round(float(x), 4)\n    else:\n        return [round(float(val), 4) for val in x]"}
{"task_id": 591, "completion_id": 9, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.array(x, dtype=float)\n    for (L, weight_matrix) in enumerate(weights):\n        weight_matrix = np.array(weight_matrix, dtype=float)\n        biases = weight_matrix[:, 0]\n        connection_weights = weight_matrix[:, 1:]\n        x = np.concatenate(([1.0], x))\n        x = np.dot(connection_weights, x) + biases\n        if L < len(weights) - 1:\n            x = np.maximum(0, x)\n    if len(x) == 1:\n        return round(float(x[0]), 4)\n    else:\n        return [round(float(val), 4) for val in x]"}
{"task_id": 595, "completion_id": 0, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Implement the K-Means clustering algorithm to compute centroids only.\"\"\"\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.zeros_like(centroids)\n        for j in range(k):\n            cluster_samples = X[labels == j]\n            if cluster_samples.shape[0] == 0:\n                new_centroids[j] = centroids[j]\n            else:\n                new_centroids[j] = np.mean(cluster_samples, axis=0)\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 0.0001):\n            break\n        centroids = new_centroids\n    sorted_centroids = np.round(centroids, 4)\n    sorted_centroids = sorted(sorted_centroids, key=lambda x: tuple(x))\n    return sorted_centroids.tolist()"}
{"task_id": 595, "completion_id": 1, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Implement K-Means clustering to compute centroids.\"\"\"\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(k)])\n        for i in range(k):\n            if len(X[labels == i]) == 0:\n                new_centroids[i] = centroids[i]\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 0.0001):\n            break\n        centroids = new_centroids\n    centroids_sorted = np.round(sorted(centroids, key=lambda x: tuple(x)), 4)\n    return centroids_sorted.tolist()"}
{"task_id": 595, "completion_id": 2, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Implement K-Means clustering to compute centroids only.\"\"\"\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        distances = np.array([[np.sum((x - c) ** 2) for c in centroids] for x in X])\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.zeros_like(centroids)\n        for i in range(k):\n            if np.any(labels == i):\n                new_centroids[i] = X[labels == i].mean(axis=0)\n            else:\n                new_centroids[i] = centroids[i]\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 0.0001):\n            break\n        centroids = new_centroids\n    sorted_centroids = sorted(centroids, key=lambda x: tuple(x))\n    rounded_centroids = [list(np.round(c, 4)) for c in sorted_centroids]\n    return rounded_centroids"}
{"task_id": 595, "completion_id": 3, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Your task: implement here. See docstring in the description.\"\"\"\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([X[labels == i].mean(axis=0) if (labels == i).any() else centroids[i] for i in range(k)])\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 0.0001):\n            break\n        centroids = new_centroids\n    centroids = np.sort(centroids, axis=0)\n    centroids_rounded = np.round(centroids, 4).tolist()\n    return centroids_rounded"}
{"task_id": 595, "completion_id": 4, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Your task: implement here. See docstring in the description.\"\"\"\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        distances = np.array([np.sum((X - centroid) ** 2, axis=1) for centroid in centroids])\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.array([X[labels == i].mean(axis=0) if np.any(labels == i) else centroids[i] for i in range(k)])\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 0.0001):\n            break\n        centroids = new_centroids\n    centroids = centroids[np.lexsort((centroids[:, 0],))]\n    rounded_centroids = np.round(centroids, 4).tolist()\n    return rounded_centroids"}
{"task_id": 595, "completion_id": 5, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Your task: implement here. See docstring in the description.\"\"\"\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([X[labels == i].mean(axis=0) if np.any(labels == i) else centroids[i] for i in range(k)])\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 0.0001):\n            break\n        centroids = new_centroids\n    sorted_centroids = np.round(np.sort(centroids, axis=0), 4).tolist()\n    return sorted_centroids"}
{"task_id": 595, "completion_id": 6, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Implement the K-Means clustering algorithm to compute centroids only.\"\"\"\n    centroids = np.array(X[:k], dtype=float)\n    for _ in range(max_iters):\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        old_centroids = centroids.copy()\n        for i in range(k):\n            points = X[labels == i]\n            if len(points) > 0:\n                centroids[i] = np.mean(points, axis=0)\n        if np.all(np.linalg.norm(centroids - old_centroids, axis=1) < 0.0001):\n            break\n    sorted_centroids = sorted(centroids, key=lambda x: tuple(x))\n    rounded_centroids = [list(np.round(centroid, 4)) for centroid in sorted_centroids]\n    return rounded_centroids"}
{"task_id": 595, "completion_id": 7, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Your task: implement here. See docstring in the description.\"\"\"\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([X[labels == i].mean(axis=0) if np.any(labels == i) else centroids[i] for i in range(k)])\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 0.0001):\n            break\n        centroids = new_centroids\n    sorted_centroids = np.round(np.sort(centroids, axis=0), decimals=4).tolist()\n    return sorted_centroids"}
{"task_id": 595, "completion_id": 8, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Implement K-Means clustering to compute centroids only.\"\"\"\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([X[labels == i].mean(axis=0) if np.any(labels == i) else centroids[i] for i in range(k)])\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 0.0001):\n            break\n        centroids = new_centroids\n    centroids = np.round(np.sort(centroids, axis=0), 4)\n    return centroids.tolist()"}
{"task_id": 595, "completion_id": 9, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Implement K-Means clustering algorithm to compute centroids only.\"\"\"\n    centroids = X[:k].copy()\n    for _ in range(max_iters):\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2)\n        closest_centroid_indices = np.argmin(distances, axis=1)\n        new_centroids = np.array([X[closest_centroid_indices == i].mean(axis=0) if np.any(closest_centroid_indices == i) else centroids[i] for i in range(k)])\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 0.0001):\n            break\n        centroids = new_centroids\n    sorted_centroids = centroids[np.lexsort([centroids[:, i] for i in range(centroids.shape[1] - 1, -1, -1)])]\n    rounded_centroids = np.round(sorted_centroids, 4).tolist()\n    return rounded_centroids"}
